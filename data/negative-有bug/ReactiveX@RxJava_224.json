{
  "id" : 224,
  "expression" : "values[i + 1]",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/subjects/ReplaySubjectBoundedConcurrencyTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "values[i + 1]",
    "nodeType" : "ArrayAccess",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 456,
      "startColumnNumber" : 38,
      "endLineNumber" : 456,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 456,
        "startColumnNumber" : 29,
        "endLineNumber" : 456,
        "endColumnNumber" : 51
      },
      "nodeContext" : "(Integer)values[i + 1]",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 456,
        "startColumnNumber" : 24,
        "endLineNumber" : 456,
        "endColumnNumber" : 51
      },
      "nodeContext" : "v2=(Integer)values[i + 1]",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 456,
        "startColumnNumber" : 16,
        "endLineNumber" : 456,
        "endColumnNumber" : 52
      },
      "nodeContext" : "Integer v2=(Integer)values[i + 1];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 163,
        "startLineNumber" : 454,
        "startColumnNumber" : 56,
        "endLineNumber" : 458,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Integer v1=(Integer)values[i];\n  Integer v2=(Integer)values[i + 1];\n  assertEquals(1,v2 - v1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 32,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 207,
        "startLineNumber" : 454,
        "startColumnNumber" : 12,
        "endLineNumber" : 458,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < values.length - 1; i++) {\n  Integer v1=(Integer)values[i];\n  Integer v2=(Integer)values[i + 1];\n  assertEquals(1,v2 - v1);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 47,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 805,
        "startLineNumber" : 441,
        "startColumnNumber" : 57,
        "endLineNumber" : 460,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int size=rs.size();\n  boolean hasAny=rs.hasValue();\n  Object[] values=rs.getValues();\n  if (size < lastSize) {\n    Assert.fail(\"Size decreased! \" + lastSize + \" -> \"+ size);\n  }\n  if ((size > 0) && !hasAny) {\n    Assert.fail(\"hasAnyValue reports emptyness but size doesn't\");\n  }\n  if (size > values.length) {\n    Assert.fail(\"Got fewer values than size! \" + size + \" -> \"+ values.length);\n  }\n  for (int i=0; i < values.length - 1; i++) {\n    Integer v1=(Integer)values[i];\n    Integer v2=(Integer)values[i + 1];\n    assertEquals(1,v2 - v1);\n  }\n  lastSize=size;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 122,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 854,
        "startLineNumber" : 441,
        "startColumnNumber" : 8,
        "endLineNumber" : 460,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (; !rs.hasThrowable() && !rs.hasComplete(); ) {\n  int size=rs.size();\n  boolean hasAny=rs.hasValue();\n  Object[] values=rs.getValues();\n  if (size < lastSize) {\n    Assert.fail(\"Size decreased! \" + lastSize + \" -> \"+ size);\n  }\n  if ((size > 0) && !hasAny) {\n    Assert.fail(\"hasAnyValue reports emptyness but size doesn't\");\n  }\n  if (size > values.length) {\n    Assert.fail(\"Got fewer values than size! \" + size + \" -> \"+ values.length);\n  }\n  for (int i=0; i < values.length - 1; i++) {\n    Integer v1=(Integer)values[i];\n    Integer v2=(Integer)values[i + 1];\n    assertEquals(1,v2 - v1);\n  }\n  lastSize=size;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 132,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1853,
        "startLineNumber" : 411,
        "startColumnNumber" : 79,
        "endLineNumber" : 463,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final ReplaySubject<Object> rs=ReplaySubject.createUnbounded();\n  final CyclicBarrier cb=new CyclicBarrier(2);\n  Thread t=new Thread(new Runnable(){\n    @Override public void run(){\n      try {\n        cb.await();\n      }\n catch (      InterruptedException e) {\n        return;\n      }\ncatch (      BrokenBarrierException e) {\n        return;\n      }\n      for (int i=0; i < 1000000; i++) {\n        rs.onNext(i);\n      }\n      rs.onComplete();\n      System.out.println(\"Replay fill Thread finished!\");\n    }\n  }\n);\n  t.start();\n  try {\n    cb.await();\n  }\n catch (  InterruptedException e) {\n    return;\n  }\ncatch (  BrokenBarrierException e) {\n    return;\n  }\n  int lastSize=0;\n  for (; !rs.hasThrowable() && !rs.hasComplete(); ) {\n    int size=rs.size();\n    boolean hasAny=rs.hasValue();\n    Object[] values=rs.getValues();\n    if (size < lastSize) {\n      Assert.fail(\"Size decreased! \" + lastSize + \" -> \"+ size);\n    }\n    if ((size > 0) && !hasAny) {\n      Assert.fail(\"hasAnyValue reports emptyness but size doesn't\");\n    }\n    if (size > values.length) {\n      Assert.fail(\"Got fewer values than size! \" + size + \" -> \"+ values.length);\n    }\n    for (int i=0; i < values.length - 1; i++) {\n      Integer v1=(Integer)values[i];\n      Integer v2=(Integer)values[i + 1];\n      assertEquals(1,v2 - v1);\n    }\n    lastSize=size;\n  }\n  t.join();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 255,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1955,
        "startLineNumber" : 410,
        "startColumnNumber" : 4,
        "endLineNumber" : 463,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(timeout=5000) public void testConcurrentSizeAndHasAnyValue() throws InterruptedException {\n  final ReplaySubject<Object> rs=ReplaySubject.createUnbounded();\n  final CyclicBarrier cb=new CyclicBarrier(2);\n  Thread t=new Thread(new Runnable(){\n    @Override public void run(){\n      try {\n        cb.await();\n      }\n catch (      InterruptedException e) {\n        return;\n      }\ncatch (      BrokenBarrierException e) {\n        return;\n      }\n      for (int i=0; i < 1000000; i++) {\n        rs.onNext(i);\n      }\n      rs.onComplete();\n      System.out.println(\"Replay fill Thread finished!\");\n    }\n  }\n);\n  t.start();\n  try {\n    cb.await();\n  }\n catch (  InterruptedException e) {\n    return;\n  }\ncatch (  BrokenBarrierException e) {\n    return;\n  }\n  int lastSize=0;\n  for (; !rs.hasThrowable() && !rs.hasComplete(); ) {\n    int size=rs.size();\n    boolean hasAny=rs.hasValue();\n    Object[] values=rs.getValues();\n    if (size < lastSize) {\n      Assert.fail(\"Size decreased! \" + lastSize + \" -> \"+ size);\n    }\n    if ((size > 0) && !hasAny) {\n      Assert.fail(\"hasAnyValue reports emptyness but size doesn't\");\n    }\n    if (size > values.length) {\n      Assert.fail(\"Got fewer values than size! \" + size + \" -> \"+ values.length);\n    }\n    for (int i=0; i < values.length - 1; i++) {\n      Integer v1=(Integer)values[i];\n      Integer v2=(Integer)values[i + 1];\n      assertEquals(1,v2 - v1);\n    }\n    lastSize=size;\n  }\n  t.join();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 266,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 456,
        "startColumnNumber" : 16,
        "endLineNumber" : 456,
        "endColumnNumber" : 52
      },
      "nodeContext" : "Integer v2=(Integer)values[i + 1];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 4,
    "type" : "java.lang.Object"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 456,
    "startColumnNumber" : 38,
    "endLineNumber" : 456,
    "endColumnNumber" : 51
  } ],
  "layoutRelationDataList" : [ ]
}