{
  "id" : 407,
  "expression" : "thisEqualsNull",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/core/lombok/javac/handlers/HandleEqualsAndHashCode.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "thisEqualsNull",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 304,
      "startColumnNumber" : 74,
      "endLineNumber" : 304,
      "endColumnNumber" : 88
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 304,
        "startColumnNumber" : 56,
        "endLineNumber" : 304,
        "endColumnNumber" : 115
      },
      "nodeContext" : "maker.Conditional(thisEqualsNull,maker.Literal(0),hcCall)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 304,
        "startColumnNumber" : 22,
        "endLineNumber" : 304,
        "endColumnNumber" : 116
      },
      "nodeContext" : "createResultCalculation(typeNode,maker.Conditional(thisEqualsNull,maker.Literal(0),hcCall))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 304,
        "startColumnNumber" : 4,
        "endLineNumber" : 304,
        "endColumnNumber" : 117
      },
      "nodeContext" : "statements.append(createResultCalculation(typeNode,maker.Conditional(thisEqualsNull,maker.Literal(0),hcCall)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 304,
        "startColumnNumber" : 4,
        "endLineNumber" : 304,
        "endColumnNumber" : 118
      },
      "nodeContext" : "statements.append(createResultCalculation(typeNode,maker.Conditional(thisEqualsNull,maker.Literal(0),hcCall)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 816,
        "startLineNumber" : 294,
        "startColumnNumber" : 24,
        "endLineNumber" : 305,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  Name dollarFieldName=dollar.append(((JCVariableDecl)fieldNode.get()).name);\n  statements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),dollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),fieldAccessor));\n  JCExpression hcCall=maker.Apply(List.<JCExpression>nil(),maker.Select(maker.Ident(dollarFieldName),typeNode.toName(\"hashCode\")),List.<JCExpression>nil());\n  JCExpression thisEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(dollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\n  statements.append(createResultCalculation(typeNode,maker.Conditional(thisEqualsNull,maker.Literal(0),hcCall)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 112,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1465,
        "startLineNumber" : 286,
        "startColumnNumber" : 10,
        "endLineNumber" : 305,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (fType instanceof JCArrayTypeTree) {\n  boolean multiDim=((JCArrayTypeTree)fType).elemtype instanceof JCArrayTypeTree;\n  boolean primitiveArray=((JCArrayTypeTree)fType).elemtype instanceof JCPrimitiveTypeTree;\n  boolean useDeepHC=multiDim || !primitiveArray;\n  JCExpression hcMethod=chainDots(typeNode,\"java\",\"util\",\"Arrays\",useDeepHC ? \"deepHashCode\" : \"hashCode\");\n  statements.append(createResultCalculation(typeNode,maker.Apply(List.<JCExpression>nil(),hcMethod,List.of(fieldAccessor))));\n}\n else {\n  Name dollarFieldName=dollar.append(((JCVariableDecl)fieldNode.get()).name);\n  statements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),dollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),fieldAccessor));\n  JCExpression hcCall=maker.Apply(List.<JCExpression>nil(),maker.Select(maker.Ident(dollarFieldName),typeNode.toName(\"hashCode\")),List.<JCExpression>nil());\n  JCExpression thisEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(dollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\n  statements.append(createResultCalculation(typeNode,maker.Conditional(thisEqualsNull,maker.Literal(0),hcCall)));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 189,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3318,
        "startLineNumber" : 247,
        "startColumnNumber" : 3,
        "endLineNumber" : 305,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (fType instanceof JCPrimitiveTypeTree) {\nswitch (((JCPrimitiveTypeTree)fType).getPrimitiveTypeKind()) {\ncase BOOLEAN:    statements.append(createResultCalculation(typeNode,maker.Conditional(fieldAccessor,maker.Literal(1231),maker.Literal(1237))));\n  break;\ncase LONG:{\n  Name dollarFieldName=dollar.append(((JCVariableDecl)fieldNode.get()).name);\n  statements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),dollarFieldName,maker.TypeIdent(TypeTags.LONG),fieldAccessor));\n  statements.append(createResultCalculation(typeNode,longToIntForHashCode(maker,maker.Ident(dollarFieldName),maker.Ident(dollarFieldName))));\n}\nbreak;\ncase FLOAT:statements.append(createResultCalculation(typeNode,maker.Apply(List.<JCExpression>nil(),chainDots(typeNode,\"java\",\"lang\",\"Float\",\"floatToIntBits\"),List.of(fieldAccessor))));\nbreak;\ncase DOUBLE:{\nName dollarFieldName=dollar.append(((JCVariableDecl)fieldNode.get()).name);\nJCExpression init=maker.Apply(List.<JCExpression>nil(),chainDots(typeNode,\"java\",\"lang\",\"Double\",\"doubleToLongBits\"),List.of(fieldAccessor));\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),dollarFieldName,maker.TypeIdent(TypeTags.LONG),init));\nstatements.append(createResultCalculation(typeNode,longToIntForHashCode(maker,maker.Ident(dollarFieldName),maker.Ident(dollarFieldName))));\n}\nbreak;\ndefault:case BYTE:case SHORT:case INT:case CHAR:statements.append(createResultCalculation(typeNode,fieldAccessor));\nbreak;\n}\n}\n else if (fType instanceof JCArrayTypeTree) {\nboolean multiDim=((JCArrayTypeTree)fType).elemtype instanceof JCArrayTypeTree;\nboolean primitiveArray=((JCArrayTypeTree)fType).elemtype instanceof JCPrimitiveTypeTree;\nboolean useDeepHC=multiDim || !primitiveArray;\nJCExpression hcMethod=chainDots(typeNode,\"java\",\"util\",\"Arrays\",useDeepHC ? \"deepHashCode\" : \"hashCode\");\nstatements.append(createResultCalculation(typeNode,maker.Apply(List.<JCExpression>nil(),hcMethod,List.of(fieldAccessor))));\n}\n else {\nName dollarFieldName=dollar.append(((JCVariableDecl)fieldNode.get()).name);\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),dollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),fieldAccessor));\nJCExpression hcCall=maker.Apply(List.<JCExpression>nil(),maker.Select(maker.Ident(dollarFieldName),typeNode.toName(\"hashCode\")),List.<JCExpression>nil());\nJCExpression thisEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(dollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nstatements.append(createResultCalculation(typeNode,maker.Conditional(thisEqualsNull,maker.Literal(0),hcCall)));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 416,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3473,
        "startLineNumber" : 244,
        "startColumnNumber" : 37,
        "endLineNumber" : 306,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  JCExpression fType=getFieldType(fieldNode,fieldAccess);\n  JCExpression fieldAccessor=createFieldAccessor(maker,fieldNode,fieldAccess);\n  if (fType instanceof JCPrimitiveTypeTree) {\nswitch (((JCPrimitiveTypeTree)fType).getPrimitiveTypeKind()) {\ncase BOOLEAN:      statements.append(createResultCalculation(typeNode,maker.Conditional(fieldAccessor,maker.Literal(1231),maker.Literal(1237))));\n    break;\ncase LONG:{\n    Name dollarFieldName=dollar.append(((JCVariableDecl)fieldNode.get()).name);\n    statements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),dollarFieldName,maker.TypeIdent(TypeTags.LONG),fieldAccessor));\n    statements.append(createResultCalculation(typeNode,longToIntForHashCode(maker,maker.Ident(dollarFieldName),maker.Ident(dollarFieldName))));\n  }\nbreak;\ncase FLOAT:statements.append(createResultCalculation(typeNode,maker.Apply(List.<JCExpression>nil(),chainDots(typeNode,\"java\",\"lang\",\"Float\",\"floatToIntBits\"),List.of(fieldAccessor))));\nbreak;\ncase DOUBLE:{\nName dollarFieldName=dollar.append(((JCVariableDecl)fieldNode.get()).name);\nJCExpression init=maker.Apply(List.<JCExpression>nil(),chainDots(typeNode,\"java\",\"lang\",\"Double\",\"doubleToLongBits\"),List.of(fieldAccessor));\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),dollarFieldName,maker.TypeIdent(TypeTags.LONG),init));\nstatements.append(createResultCalculation(typeNode,longToIntForHashCode(maker,maker.Ident(dollarFieldName),maker.Ident(dollarFieldName))));\n}\nbreak;\ndefault:case BYTE:case SHORT:case INT:case CHAR:statements.append(createResultCalculation(typeNode,fieldAccessor));\nbreak;\n}\n}\n else if (fType instanceof JCArrayTypeTree) {\nboolean multiDim=((JCArrayTypeTree)fType).elemtype instanceof JCArrayTypeTree;\nboolean primitiveArray=((JCArrayTypeTree)fType).elemtype instanceof JCPrimitiveTypeTree;\nboolean useDeepHC=multiDim || !primitiveArray;\nJCExpression hcMethod=chainDots(typeNode,\"java\",\"util\",\"Arrays\",useDeepHC ? \"deepHashCode\" : \"hashCode\");\nstatements.append(createResultCalculation(typeNode,maker.Apply(List.<JCExpression>nil(),hcMethod,List.of(fieldAccessor))));\n}\n else {\nName dollarFieldName=dollar.append(((JCVariableDecl)fieldNode.get()).name);\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),dollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),fieldAccessor));\nJCExpression hcCall=maker.Apply(List.<JCExpression>nil(),maker.Select(maker.Ident(dollarFieldName),typeNode.toName(\"hashCode\")),List.<JCExpression>nil());\nJCExpression thisEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(dollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nstatements.append(createResultCalculation(typeNode,maker.Conditional(thisEqualsNull,maker.Literal(0),hcCall)));\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 436,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3508,
        "startLineNumber" : 244,
        "startColumnNumber" : 2,
        "endLineNumber" : 306,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (JavacNode fieldNode : fields) {\n  JCExpression fType=getFieldType(fieldNode,fieldAccess);\n  JCExpression fieldAccessor=createFieldAccessor(maker,fieldNode,fieldAccess);\n  if (fType instanceof JCPrimitiveTypeTree) {\nswitch (((JCPrimitiveTypeTree)fType).getPrimitiveTypeKind()) {\ncase BOOLEAN:      statements.append(createResultCalculation(typeNode,maker.Conditional(fieldAccessor,maker.Literal(1231),maker.Literal(1237))));\n    break;\ncase LONG:{\n    Name dollarFieldName=dollar.append(((JCVariableDecl)fieldNode.get()).name);\n    statements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),dollarFieldName,maker.TypeIdent(TypeTags.LONG),fieldAccessor));\n    statements.append(createResultCalculation(typeNode,longToIntForHashCode(maker,maker.Ident(dollarFieldName),maker.Ident(dollarFieldName))));\n  }\nbreak;\ncase FLOAT:statements.append(createResultCalculation(typeNode,maker.Apply(List.<JCExpression>nil(),chainDots(typeNode,\"java\",\"lang\",\"Float\",\"floatToIntBits\"),List.of(fieldAccessor))));\nbreak;\ncase DOUBLE:{\nName dollarFieldName=dollar.append(((JCVariableDecl)fieldNode.get()).name);\nJCExpression init=maker.Apply(List.<JCExpression>nil(),chainDots(typeNode,\"java\",\"lang\",\"Double\",\"doubleToLongBits\"),List.of(fieldAccessor));\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),dollarFieldName,maker.TypeIdent(TypeTags.LONG),init));\nstatements.append(createResultCalculation(typeNode,longToIntForHashCode(maker,maker.Ident(dollarFieldName),maker.Ident(dollarFieldName))));\n}\nbreak;\ndefault:case BYTE:case SHORT:case INT:case CHAR:statements.append(createResultCalculation(typeNode,fieldAccessor));\nbreak;\n}\n}\n else if (fType instanceof JCArrayTypeTree) {\nboolean multiDim=((JCArrayTypeTree)fType).elemtype instanceof JCArrayTypeTree;\nboolean primitiveArray=((JCArrayTypeTree)fType).elemtype instanceof JCPrimitiveTypeTree;\nboolean useDeepHC=multiDim || !primitiveArray;\nJCExpression hcMethod=chainDots(typeNode,\"java\",\"util\",\"Arrays\",useDeepHC ? \"deepHashCode\" : \"hashCode\");\nstatements.append(createResultCalculation(typeNode,maker.Apply(List.<JCExpression>nil(),hcMethod,List.of(fieldAccessor))));\n}\n else {\nName dollarFieldName=dollar.append(((JCVariableDecl)fieldNode.get()).name);\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),dollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),fieldAccessor));\nJCExpression hcCall=maker.Apply(List.<JCExpression>nil(),maker.Select(maker.Ident(dollarFieldName),typeNode.toName(\"hashCode\")),List.<JCExpression>nil());\nJCExpression thisEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(dollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nstatements.append(createResultCalculation(typeNode,maker.Conditional(thisEqualsNull,maker.Literal(0),hcCall)));\n}\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 442,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5100,
        "startLineNumber" : 215,
        "startColumnNumber" : 140,
        "endLineNumber" : 315,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  TreeMaker maker=typeNode.getTreeMaker();\n  JCAnnotation overrideAnnotation=maker.Annotation(chainDots(typeNode,\"java\",\"lang\",\"Override\"),List.<JCExpression>nil());\n  JCModifiers mods=maker.Modifiers(Flags.PUBLIC,List.of(overrideAnnotation));\n  JCExpression returnType=maker.TypeIdent(getCtcInt(TypeTags.class,\"INT\"));\n  ListBuffer<JCStatement> statements=ListBuffer.lb();\n  Name primeName=typeNode.toName(PRIME_NAME);\n  Name resultName=typeNode.toName(RESULT_NAME);\n{\n    if (!fields.isEmpty() || callSuper) {\n      statements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),primeName,maker.TypeIdent(getCtcInt(TypeTags.class,\"INT\")),maker.Literal(31)));\n    }\n  }\n{\n    statements.append(maker.VarDef(maker.Modifiers(0),resultName,maker.TypeIdent(getCtcInt(TypeTags.class,\"INT\")),maker.Literal(1)));\n  }\n  if (callSuper) {\n    JCMethodInvocation callToSuper=maker.Apply(List.<JCExpression>nil(),maker.Select(maker.Ident(typeNode.toName(\"super\")),typeNode.toName(\"hashCode\")),List.<JCExpression>nil());\n    statements.append(createResultCalculation(typeNode,callToSuper));\n  }\n  Name dollar=typeNode.toName(\"$\");\n  for (  JavacNode fieldNode : fields) {\n    JCExpression fType=getFieldType(fieldNode,fieldAccess);\n    JCExpression fieldAccessor=createFieldAccessor(maker,fieldNode,fieldAccess);\n    if (fType instanceof JCPrimitiveTypeTree) {\nswitch (((JCPrimitiveTypeTree)fType).getPrimitiveTypeKind()) {\ncase BOOLEAN:        statements.append(createResultCalculation(typeNode,maker.Conditional(fieldAccessor,maker.Literal(1231),maker.Literal(1237))));\n      break;\ncase LONG:{\n      Name dollarFieldName=dollar.append(((JCVariableDecl)fieldNode.get()).name);\n      statements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),dollarFieldName,maker.TypeIdent(TypeTags.LONG),fieldAccessor));\n      statements.append(createResultCalculation(typeNode,longToIntForHashCode(maker,maker.Ident(dollarFieldName),maker.Ident(dollarFieldName))));\n    }\n  break;\ncase FLOAT:statements.append(createResultCalculation(typeNode,maker.Apply(List.<JCExpression>nil(),chainDots(typeNode,\"java\",\"lang\",\"Float\",\"floatToIntBits\"),List.of(fieldAccessor))));\nbreak;\ncase DOUBLE:{\nName dollarFieldName=dollar.append(((JCVariableDecl)fieldNode.get()).name);\nJCExpression init=maker.Apply(List.<JCExpression>nil(),chainDots(typeNode,\"java\",\"lang\",\"Double\",\"doubleToLongBits\"),List.of(fieldAccessor));\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),dollarFieldName,maker.TypeIdent(TypeTags.LONG),init));\nstatements.append(createResultCalculation(typeNode,longToIntForHashCode(maker,maker.Ident(dollarFieldName),maker.Ident(dollarFieldName))));\n}\nbreak;\ndefault:case BYTE:case SHORT:case INT:case CHAR:statements.append(createResultCalculation(typeNode,fieldAccessor));\nbreak;\n}\n}\n else if (fType instanceof JCArrayTypeTree) {\nboolean multiDim=((JCArrayTypeTree)fType).elemtype instanceof JCArrayTypeTree;\nboolean primitiveArray=((JCArrayTypeTree)fType).elemtype instanceof JCPrimitiveTypeTree;\nboolean useDeepHC=multiDim || !primitiveArray;\nJCExpression hcMethod=chainDots(typeNode,\"java\",\"util\",\"Arrays\",useDeepHC ? \"deepHashCode\" : \"hashCode\");\nstatements.append(createResultCalculation(typeNode,maker.Apply(List.<JCExpression>nil(),hcMethod,List.of(fieldAccessor))));\n}\n else {\nName dollarFieldName=dollar.append(((JCVariableDecl)fieldNode.get()).name);\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),dollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),fieldAccessor));\nJCExpression hcCall=maker.Apply(List.<JCExpression>nil(),maker.Select(maker.Ident(dollarFieldName),typeNode.toName(\"hashCode\")),List.<JCExpression>nil());\nJCExpression thisEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(dollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nstatements.append(createResultCalculation(typeNode,maker.Conditional(thisEqualsNull,maker.Literal(0),hcCall)));\n}\n}\n{\nstatements.append(maker.Return(maker.Ident(resultName)));\n}\nJCBlock body=maker.Block(0,statements.toList());\nreturn recursiveSetGeneratedBy(maker.MethodDef(mods,typeNode.toName(\"hashCode\"),returnType,List.<JCTypeParameter>nil(),List.<JCVariableDecl>nil(),List.<JCExpression>nil(),body,null),source);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 696,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5239,
        "startLineNumber" : 215,
        "startColumnNumber" : 1,
        "endLineNumber" : 315,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private JCMethodDecl createHashCode(JavacNode typeNode,List<JavacNode> fields,boolean callSuper,FieldAccess fieldAccess,JCTree source){\n  TreeMaker maker=typeNode.getTreeMaker();\n  JCAnnotation overrideAnnotation=maker.Annotation(chainDots(typeNode,\"java\",\"lang\",\"Override\"),List.<JCExpression>nil());\n  JCModifiers mods=maker.Modifiers(Flags.PUBLIC,List.of(overrideAnnotation));\n  JCExpression returnType=maker.TypeIdent(getCtcInt(TypeTags.class,\"INT\"));\n  ListBuffer<JCStatement> statements=ListBuffer.lb();\n  Name primeName=typeNode.toName(PRIME_NAME);\n  Name resultName=typeNode.toName(RESULT_NAME);\n{\n    if (!fields.isEmpty() || callSuper) {\n      statements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),primeName,maker.TypeIdent(getCtcInt(TypeTags.class,\"INT\")),maker.Literal(31)));\n    }\n  }\n{\n    statements.append(maker.VarDef(maker.Modifiers(0),resultName,maker.TypeIdent(getCtcInt(TypeTags.class,\"INT\")),maker.Literal(1)));\n  }\n  if (callSuper) {\n    JCMethodInvocation callToSuper=maker.Apply(List.<JCExpression>nil(),maker.Select(maker.Ident(typeNode.toName(\"super\")),typeNode.toName(\"hashCode\")),List.<JCExpression>nil());\n    statements.append(createResultCalculation(typeNode,callToSuper));\n  }\n  Name dollar=typeNode.toName(\"$\");\n  for (  JavacNode fieldNode : fields) {\n    JCExpression fType=getFieldType(fieldNode,fieldAccess);\n    JCExpression fieldAccessor=createFieldAccessor(maker,fieldNode,fieldAccess);\n    if (fType instanceof JCPrimitiveTypeTree) {\nswitch (((JCPrimitiveTypeTree)fType).getPrimitiveTypeKind()) {\ncase BOOLEAN:        statements.append(createResultCalculation(typeNode,maker.Conditional(fieldAccessor,maker.Literal(1231),maker.Literal(1237))));\n      break;\ncase LONG:{\n      Name dollarFieldName=dollar.append(((JCVariableDecl)fieldNode.get()).name);\n      statements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),dollarFieldName,maker.TypeIdent(TypeTags.LONG),fieldAccessor));\n      statements.append(createResultCalculation(typeNode,longToIntForHashCode(maker,maker.Ident(dollarFieldName),maker.Ident(dollarFieldName))));\n    }\n  break;\ncase FLOAT:statements.append(createResultCalculation(typeNode,maker.Apply(List.<JCExpression>nil(),chainDots(typeNode,\"java\",\"lang\",\"Float\",\"floatToIntBits\"),List.of(fieldAccessor))));\nbreak;\ncase DOUBLE:{\nName dollarFieldName=dollar.append(((JCVariableDecl)fieldNode.get()).name);\nJCExpression init=maker.Apply(List.<JCExpression>nil(),chainDots(typeNode,\"java\",\"lang\",\"Double\",\"doubleToLongBits\"),List.of(fieldAccessor));\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),dollarFieldName,maker.TypeIdent(TypeTags.LONG),init));\nstatements.append(createResultCalculation(typeNode,longToIntForHashCode(maker,maker.Ident(dollarFieldName),maker.Ident(dollarFieldName))));\n}\nbreak;\ndefault:case BYTE:case SHORT:case INT:case CHAR:statements.append(createResultCalculation(typeNode,fieldAccessor));\nbreak;\n}\n}\n else if (fType instanceof JCArrayTypeTree) {\nboolean multiDim=((JCArrayTypeTree)fType).elemtype instanceof JCArrayTypeTree;\nboolean primitiveArray=((JCArrayTypeTree)fType).elemtype instanceof JCPrimitiveTypeTree;\nboolean useDeepHC=multiDim || !primitiveArray;\nJCExpression hcMethod=chainDots(typeNode,\"java\",\"util\",\"Arrays\",useDeepHC ? \"deepHashCode\" : \"hashCode\");\nstatements.append(createResultCalculation(typeNode,maker.Apply(List.<JCExpression>nil(),hcMethod,List.of(fieldAccessor))));\n}\n else {\nName dollarFieldName=dollar.append(((JCVariableDecl)fieldNode.get()).name);\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),dollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),fieldAccessor));\nJCExpression hcCall=maker.Apply(List.<JCExpression>nil(),maker.Select(maker.Ident(dollarFieldName),typeNode.toName(\"hashCode\")),List.<JCExpression>nil());\nJCExpression thisEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(dollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nstatements.append(createResultCalculation(typeNode,maker.Conditional(thisEqualsNull,maker.Literal(0),hcCall)));\n}\n}\n{\nstatements.append(maker.Return(maker.Ident(resultName)));\n}\nJCBlock body=maker.Block(0,statements.toList());\nreturn recursiveSetGeneratedBy(maker.MethodDef(mods,typeNode.toName(\"hashCode\"),returnType,List.<JCTypeParameter>nil(),List.<JCVariableDecl>nil(),List.<JCExpression>nil(),body,null),source);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 723,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 304,
        "startColumnNumber" : 4,
        "endLineNumber" : 304,
        "endColumnNumber" : 118
      },
      "nodeContext" : "statements.append(createResultCalculation(typeNode,maker.Conditional(thisEqualsNull,maker.Literal(0),hcCall)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "lombok.javac.handlers.JCExpression"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 304,
    "startColumnNumber" : 74,
    "endLineNumber" : 304,
    "endColumnNumber" : 88
  } ],
  "layoutRelationDataList" : [ ]
}