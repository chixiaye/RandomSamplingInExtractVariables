{
  "id" : 463,
  "expression" : "TimeUnit",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/core/src/main/java/org/apache/druid/data/input/impl/TimedShutoffInputSourceReader.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "TimeUnit",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 132,
      "startColumnNumber" : 8,
      "endLineNumber" : 132,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 132,
        "startColumnNumber" : 8,
        "endLineNumber" : 132,
        "endColumnNumber" : 29
      },
      "nodeContext" : "TimeUnit.MILLISECONDS",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 381,
        "startLineNumber" : 120,
        "startColumnNumber" : 4,
        "endLineNumber" : 133,
        "endColumnNumber" : 5
      },
      "nodeContext" : "exec.schedule(() -> {\n  LOG.info(\"Closing delegate inputSource.\");\n  try {\n    wrappingIterator.close();\n  }\n catch (  IOException e) {\n    LOG.warn(e,\"Failed to close delegate inputSource, ignoring.\");\n  }\n}\n,shutoffTime.getMillis() - System.currentTimeMillis(),TimeUnit.MILLISECONDS)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 38,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 382,
        "startLineNumber" : 120,
        "startColumnNumber" : 4,
        "endLineNumber" : 133,
        "endColumnNumber" : 6
      },
      "nodeContext" : "exec.schedule(() -> {\n  LOG.info(\"Closing delegate inputSource.\");\n  try {\n    wrappingIterator.close();\n  }\n catch (  IOException e) {\n    LOG.warn(e,\"Failed to close delegate inputSource, ignoring.\");\n  }\n}\n,shutoffTime.getMillis() - System.currentTimeMillis(),TimeUnit.MILLISECONDS);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 39,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1837,
        "startLineNumber" : 69,
        "startColumnNumber" : 2,
        "endLineNumber" : 136,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final Closer closer=Closer.create();\n  closer.register(delegateIterator);\n  closer.register(exec::shutdownNow);\n  final CloseableIterator<T> wrappingIterator=new CloseableIterator<T>(){\n    /** \n * Indicates this iterator has been closed or not. Volatile since there is a happens-before relationship between  {@link #hasNext()} and {@link #close()}.\n */\n    volatile boolean closed;\n    /** \n * Caching the next item. The item returned from the underling iterator is either a non-null  {@link InputRow}or  {@link InputRowListPlusRawValues}. Not volatile since  {@link #hasNext()} and {@link #next()} are supposed to be called by the same thread.\n */\n    T next=null;\n    @Override public boolean hasNext(){\n      if (next != null) {\n        return true;\n      }\n      if (!closed && delegateIterator.hasNext()) {\n        next=delegateIterator.next();\n        return true;\n      }\n else {\n        return false;\n      }\n    }\n    @Override public T next(){\n      if (next != null) {\n        final T returnValue=next;\n        next=null;\n        return returnValue;\n      }\n else {\n        throw new NoSuchElementException();\n      }\n    }\n    @Override public void close() throws IOException {\n      closed=true;\n      closer.close();\n    }\n  }\n;\n  exec.schedule(() -> {\n    LOG.info(\"Closing delegate inputSource.\");\n    try {\n      wrappingIterator.close();\n    }\n catch (    IOException e) {\n      LOG.warn(e,\"Failed to close delegate inputSource, ignoring.\");\n    }\n  }\n,shutoffTime.getMillis() - System.currentTimeMillis(),TimeUnit.MILLISECONDS);\n  return wrappingIterator;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 173,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1982,
        "startLineNumber" : 65,
        "startColumnNumber" : 2,
        "endLineNumber" : 136,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private <T>CloseableIterator<T> decorateShutdownTimeout(ScheduledExecutorService exec,CloseableIterator<T> delegateIterator){\n  final Closer closer=Closer.create();\n  closer.register(delegateIterator);\n  closer.register(exec::shutdownNow);\n  final CloseableIterator<T> wrappingIterator=new CloseableIterator<T>(){\n    /** \n * Indicates this iterator has been closed or not. Volatile since there is a happens-before relationship between  {@link #hasNext()} and {@link #close()}.\n */\n    volatile boolean closed;\n    /** \n * Caching the next item. The item returned from the underling iterator is either a non-null  {@link InputRow}or  {@link InputRowListPlusRawValues}. Not volatile since  {@link #hasNext()} and {@link #next()} are supposed to be called by the same thread.\n */\n    T next=null;\n    @Override public boolean hasNext(){\n      if (next != null) {\n        return true;\n      }\n      if (!closed && delegateIterator.hasNext()) {\n        next=delegateIterator.next();\n        return true;\n      }\n else {\n        return false;\n      }\n    }\n    @Override public T next(){\n      if (next != null) {\n        final T returnValue=next;\n        next=null;\n        return returnValue;\n      }\n else {\n        throw new NoSuchElementException();\n      }\n    }\n    @Override public void close() throws IOException {\n      closed=true;\n      closer.close();\n    }\n  }\n;\n  exec.schedule(() -> {\n    LOG.info(\"Closing delegate inputSource.\");\n    try {\n      wrappingIterator.close();\n    }\n catch (    IOException e) {\n      LOG.warn(e,\"Failed to close delegate inputSource, ignoring.\");\n    }\n  }\n,shutoffTime.getMillis() - System.currentTimeMillis(),TimeUnit.MILLISECONDS);\n  return wrappingIterator;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 194,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 132,
        "startColumnNumber" : 8,
        "endLineNumber" : 132,
        "endColumnNumber" : 29
      },
      "nodeContext" : "TimeUnit.MILLISECONDS",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.util.concurrent.TimeUnit"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 132,
    "startColumnNumber" : 8,
    "endLineNumber" : 132,
    "endColumnNumber" : 16
  } ],
  "layoutRelationDataList" : [ ]
}