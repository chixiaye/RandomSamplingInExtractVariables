{
  "id" : 517,
  "expression" : "-1",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/core/src/test/java/com/google/zxing/common/detector/MathUtilsTestCase.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "-1",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 31,
      "startColumnNumber" : 17,
      "endLineNumber" : 31,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 2,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 31,
        "startColumnNumber" : 4,
        "endLineNumber" : 31,
        "endColumnNumber" : 44
      },
      "nodeContext" : "assertEquals(-1,MathUtils.round(-1.0f))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 31,
        "startColumnNumber" : 4,
        "endLineNumber" : 31,
        "endColumnNumber" : 45
      },
      "nodeContext" : "assertEquals(-1,MathUtils.round(-1.0f));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 825,
        "startLineNumber" : 30,
        "startColumnNumber" : 26,
        "endLineNumber" : 52,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  assertEquals(-1,MathUtils.round(-1.0f));\n  assertEquals(0,MathUtils.round(0.0f));\n  assertEquals(1,MathUtils.round(1.0f));\n  assertEquals(2,MathUtils.round(1.9f));\n  assertEquals(2,MathUtils.round(2.1f));\n  assertEquals(3,MathUtils.round(2.5f));\n  assertEquals(-2,MathUtils.round(-1.9f));\n  assertEquals(-2,MathUtils.round(-2.1f));\n  assertEquals(-3,MathUtils.round(-2.5f));\n  assertEquals(Integer.MAX_VALUE,MathUtils.round(Integer.MAX_VALUE));\n  assertEquals(Integer.MIN_VALUE,MathUtils.round(Integer.MIN_VALUE));\n  assertEquals(Integer.MAX_VALUE,MathUtils.round(Float.POSITIVE_INFINITY));\n  assertEquals(Integer.MIN_VALUE,MathUtils.round(Float.NEGATIVE_INFINITY));\n  assertEquals(0,MathUtils.round(Float.NaN));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 139,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 858,
        "startLineNumber" : 29,
        "startColumnNumber" : 2,
        "endLineNumber" : 52,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testRound(){\n  assertEquals(-1,MathUtils.round(-1.0f));\n  assertEquals(0,MathUtils.round(0.0f));\n  assertEquals(1,MathUtils.round(1.0f));\n  assertEquals(2,MathUtils.round(1.9f));\n  assertEquals(2,MathUtils.round(2.1f));\n  assertEquals(3,MathUtils.round(2.5f));\n  assertEquals(-2,MathUtils.round(-1.9f));\n  assertEquals(-2,MathUtils.round(-2.1f));\n  assertEquals(-3,MathUtils.round(-2.5f));\n  assertEquals(Integer.MAX_VALUE,MathUtils.round(Integer.MAX_VALUE));\n  assertEquals(Integer.MIN_VALUE,MathUtils.round(Integer.MIN_VALUE));\n  assertEquals(Integer.MAX_VALUE,MathUtils.round(Float.POSITIVE_INFINITY));\n  assertEquals(Integer.MIN_VALUE,MathUtils.round(Float.NEGATIVE_INFINITY));\n  assertEquals(0,MathUtils.round(Float.NaN));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 145,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 31,
        "startColumnNumber" : 4,
        "endLineNumber" : 31,
        "endColumnNumber" : 45
      },
      "nodeContext" : "assertEquals(-1,MathUtils.round(-1.0f));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 31,
    "startColumnNumber" : 17,
    "endLineNumber" : 31,
    "endColumnNumber" : 19
  } ],
  "layoutRelationDataList" : [ ]
}