{
  "id" : 230,
  "expression" : "holder",
  "projectName" : "androidannotations@androidannotations",
  "commitID" : "b60a7ff27cb1bcb0eac2710c15c4957c0d992e27",
  "filePath" : "/AndroidAnnotations/androidannotations/src/main/java/com/googlecode/androidannotations/processing/rest/RestProcessor.java",
  "occurrences" : 18,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "holder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 63,
      "startColumnNumber" : 2,
      "endLineNumber" : 63,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 63,
        "startColumnNumber" : 2,
        "endLineNumber" : 63,
        "endColumnNumber" : 18
      },
      "nodeContext" : "holder.urlPrefix",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 63,
        "startColumnNumber" : 2,
        "endLineNumber" : 63,
        "endColumnNumber" : 66
      },
      "nodeContext" : "holder.urlPrefix=typeElement.getAnnotation(Rest.class).value()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 63,
        "startColumnNumber" : 2,
        "endLineNumber" : 63,
        "endColumnNumber" : 67
      },
      "nodeContext" : "holder.urlPrefix=typeElement.getAnnotation(Rest.class).value();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3504,
        "startLineNumber" : 57,
        "startColumnNumber" : 108,
        "endLineNumber" : 124,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RestImplementationHolder holder=restImplementationHolder.create(element);\n  TypeElement typeElement=(TypeElement)element;\n  holder.urlPrefix=typeElement.getAnnotation(Rest.class).value();\n  String interfaceName=typeElement.getQualifiedName().toString();\n  String implementationName=interfaceName + ModelConstants.GENERATION_SUFFIX;\n  holder.restImplementationClass=codeModel._class(JMod.PUBLIC,implementationName,ClassType.CLASS);\n  JClass interfaceClass=holder.refClass(interfaceName);\n  holder.restImplementationClass._implements(interfaceClass);\n  JClass restTemplateClass=holder.refClass(SPRING_REST_TEMPLATE_QUALIFIED_NAME);\n  holder.restTemplateField=holder.restImplementationClass.field(JMod.PRIVATE,restTemplateClass,\"restTemplate\");\n  JMethod defaultConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  defaultConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass));\n  JMethod restTemplateConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JVar restTemplateParam=restTemplateConstructor.param(restTemplateClass,\"restTemplate\");\n  restTemplateConstructor.body().assign(JExpr._this().ref(holder.restTemplateField),restTemplateParam);\n  JMethod requestFactoryConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JClass requestFactoryClass=holder.refClass(\"org.springframework.http.client.ClientHttpRequestFactory\");\n  JVar requestFactoryParam=requestFactoryConstructor.param(requestFactoryClass,\"requestFactory\");\n  requestFactoryConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass).arg(requestFactoryParam));\n  List<? extends Element> enclosedElements=typeElement.getEnclosedElements();\n  List<ExecutableElement> methods=ElementFilter.methodsIn(enclosedElements);\n  for (  ExecutableElement method : methods) {\n    if (method.getParameters().size() == 0 && method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n      String methodName=method.getSimpleName().toString();\n      JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n      getRestTemplateMethod.annotate(Override.class);\n      getRestTemplateMethod.body()._return(holder.restTemplateField);\n      break;\n    }\n  }\n  for (  ExecutableElement method : methods) {\n    List<? extends VariableElement> parameters=method.getParameters();\n    if (parameters.size() == 1 && method.getReturnType().getKind() == TypeKind.VOID) {\n      VariableElement firstParameter=parameters.get(0);\n      if (firstParameter.asType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n        String methodName=method.getSimpleName().toString();\n        JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n        setRestTemplateMethod.annotate(Override.class);\n        JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n        setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 428,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3622,
        "startLineNumber" : 56,
        "startColumnNumber" : 1,
        "endLineNumber" : 124,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void process(Element element,JCodeModel codeModel,EBeansHolder activitiesHolder) throws Exception {\n  RestImplementationHolder holder=restImplementationHolder.create(element);\n  TypeElement typeElement=(TypeElement)element;\n  holder.urlPrefix=typeElement.getAnnotation(Rest.class).value();\n  String interfaceName=typeElement.getQualifiedName().toString();\n  String implementationName=interfaceName + ModelConstants.GENERATION_SUFFIX;\n  holder.restImplementationClass=codeModel._class(JMod.PUBLIC,implementationName,ClassType.CLASS);\n  JClass interfaceClass=holder.refClass(interfaceName);\n  holder.restImplementationClass._implements(interfaceClass);\n  JClass restTemplateClass=holder.refClass(SPRING_REST_TEMPLATE_QUALIFIED_NAME);\n  holder.restTemplateField=holder.restImplementationClass.field(JMod.PRIVATE,restTemplateClass,\"restTemplate\");\n  JMethod defaultConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  defaultConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass));\n  JMethod restTemplateConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JVar restTemplateParam=restTemplateConstructor.param(restTemplateClass,\"restTemplate\");\n  restTemplateConstructor.body().assign(JExpr._this().ref(holder.restTemplateField),restTemplateParam);\n  JMethod requestFactoryConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JClass requestFactoryClass=holder.refClass(\"org.springframework.http.client.ClientHttpRequestFactory\");\n  JVar requestFactoryParam=requestFactoryConstructor.param(requestFactoryClass,\"requestFactory\");\n  requestFactoryConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass).arg(requestFactoryParam));\n  List<? extends Element> enclosedElements=typeElement.getEnclosedElements();\n  List<ExecutableElement> methods=ElementFilter.methodsIn(enclosedElements);\n  for (  ExecutableElement method : methods) {\n    if (method.getParameters().size() == 0 && method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n      String methodName=method.getSimpleName().toString();\n      JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n      getRestTemplateMethod.annotate(Override.class);\n      getRestTemplateMethod.body()._return(holder.restTemplateField);\n      break;\n    }\n  }\n  for (  ExecutableElement method : methods) {\n    List<? extends VariableElement> parameters=method.getParameters();\n    if (parameters.size() == 1 && method.getReturnType().getKind() == TypeKind.VOID) {\n      VariableElement firstParameter=parameters.get(0);\n      if (firstParameter.asType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n        String methodName=method.getSimpleName().toString();\n        JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n        setRestTemplateMethod.annotate(Override.class);\n        JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n        setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 448,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 63,
        "startColumnNumber" : 2,
        "endLineNumber" : 63,
        "endColumnNumber" : 67
      },
      "nodeContext" : "holder.urlPrefix=typeElement.getAnnotation(Rest.class).value();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "com.googlecode.androidannotations.processing.rest.RestImplementationHolder"
  }, {
    "nodeContext" : "holder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 71,
      "startColumnNumber" : 2,
      "endLineNumber" : 71,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 71,
        "startColumnNumber" : 2,
        "endLineNumber" : 71,
        "endColumnNumber" : 32
      },
      "nodeContext" : "holder.restImplementationClass",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 71,
        "startColumnNumber" : 2,
        "endLineNumber" : 71,
        "endColumnNumber" : 101
      },
      "nodeContext" : "holder.restImplementationClass=codeModel._class(JMod.PUBLIC,implementationName,ClassType.CLASS)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 71,
        "startColumnNumber" : 2,
        "endLineNumber" : 71,
        "endColumnNumber" : 102
      },
      "nodeContext" : "holder.restImplementationClass=codeModel._class(JMod.PUBLIC,implementationName,ClassType.CLASS);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3504,
        "startLineNumber" : 57,
        "startColumnNumber" : 108,
        "endLineNumber" : 124,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RestImplementationHolder holder=restImplementationHolder.create(element);\n  TypeElement typeElement=(TypeElement)element;\n  holder.urlPrefix=typeElement.getAnnotation(Rest.class).value();\n  String interfaceName=typeElement.getQualifiedName().toString();\n  String implementationName=interfaceName + ModelConstants.GENERATION_SUFFIX;\n  holder.restImplementationClass=codeModel._class(JMod.PUBLIC,implementationName,ClassType.CLASS);\n  JClass interfaceClass=holder.refClass(interfaceName);\n  holder.restImplementationClass._implements(interfaceClass);\n  JClass restTemplateClass=holder.refClass(SPRING_REST_TEMPLATE_QUALIFIED_NAME);\n  holder.restTemplateField=holder.restImplementationClass.field(JMod.PRIVATE,restTemplateClass,\"restTemplate\");\n  JMethod defaultConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  defaultConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass));\n  JMethod restTemplateConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JVar restTemplateParam=restTemplateConstructor.param(restTemplateClass,\"restTemplate\");\n  restTemplateConstructor.body().assign(JExpr._this().ref(holder.restTemplateField),restTemplateParam);\n  JMethod requestFactoryConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JClass requestFactoryClass=holder.refClass(\"org.springframework.http.client.ClientHttpRequestFactory\");\n  JVar requestFactoryParam=requestFactoryConstructor.param(requestFactoryClass,\"requestFactory\");\n  requestFactoryConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass).arg(requestFactoryParam));\n  List<? extends Element> enclosedElements=typeElement.getEnclosedElements();\n  List<ExecutableElement> methods=ElementFilter.methodsIn(enclosedElements);\n  for (  ExecutableElement method : methods) {\n    if (method.getParameters().size() == 0 && method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n      String methodName=method.getSimpleName().toString();\n      JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n      getRestTemplateMethod.annotate(Override.class);\n      getRestTemplateMethod.body()._return(holder.restTemplateField);\n      break;\n    }\n  }\n  for (  ExecutableElement method : methods) {\n    List<? extends VariableElement> parameters=method.getParameters();\n    if (parameters.size() == 1 && method.getReturnType().getKind() == TypeKind.VOID) {\n      VariableElement firstParameter=parameters.get(0);\n      if (firstParameter.asType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n        String methodName=method.getSimpleName().toString();\n        JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n        setRestTemplateMethod.annotate(Override.class);\n        JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n        setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 428,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3622,
        "startLineNumber" : 56,
        "startColumnNumber" : 1,
        "endLineNumber" : 124,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void process(Element element,JCodeModel codeModel,EBeansHolder activitiesHolder) throws Exception {\n  RestImplementationHolder holder=restImplementationHolder.create(element);\n  TypeElement typeElement=(TypeElement)element;\n  holder.urlPrefix=typeElement.getAnnotation(Rest.class).value();\n  String interfaceName=typeElement.getQualifiedName().toString();\n  String implementationName=interfaceName + ModelConstants.GENERATION_SUFFIX;\n  holder.restImplementationClass=codeModel._class(JMod.PUBLIC,implementationName,ClassType.CLASS);\n  JClass interfaceClass=holder.refClass(interfaceName);\n  holder.restImplementationClass._implements(interfaceClass);\n  JClass restTemplateClass=holder.refClass(SPRING_REST_TEMPLATE_QUALIFIED_NAME);\n  holder.restTemplateField=holder.restImplementationClass.field(JMod.PRIVATE,restTemplateClass,\"restTemplate\");\n  JMethod defaultConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  defaultConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass));\n  JMethod restTemplateConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JVar restTemplateParam=restTemplateConstructor.param(restTemplateClass,\"restTemplate\");\n  restTemplateConstructor.body().assign(JExpr._this().ref(holder.restTemplateField),restTemplateParam);\n  JMethod requestFactoryConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JClass requestFactoryClass=holder.refClass(\"org.springframework.http.client.ClientHttpRequestFactory\");\n  JVar requestFactoryParam=requestFactoryConstructor.param(requestFactoryClass,\"requestFactory\");\n  requestFactoryConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass).arg(requestFactoryParam));\n  List<? extends Element> enclosedElements=typeElement.getEnclosedElements();\n  List<ExecutableElement> methods=ElementFilter.methodsIn(enclosedElements);\n  for (  ExecutableElement method : methods) {\n    if (method.getParameters().size() == 0 && method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n      String methodName=method.getSimpleName().toString();\n      JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n      getRestTemplateMethod.annotate(Override.class);\n      getRestTemplateMethod.body()._return(holder.restTemplateField);\n      break;\n    }\n  }\n  for (  ExecutableElement method : methods) {\n    List<? extends VariableElement> parameters=method.getParameters();\n    if (parameters.size() == 1 && method.getReturnType().getKind() == TypeKind.VOID) {\n      VariableElement firstParameter=parameters.get(0);\n      if (firstParameter.asType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n        String methodName=method.getSimpleName().toString();\n        JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n        setRestTemplateMethod.annotate(Override.class);\n        JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n        setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 448,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 71,
        "startColumnNumber" : 2,
        "endLineNumber" : 71,
        "endColumnNumber" : 102
      },
      "nodeContext" : "holder.restImplementationClass=codeModel._class(JMod.PUBLIC,implementationName,ClassType.CLASS);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.googlecode.androidannotations.processing.rest.RestImplementationHolder"
  }, {
    "nodeContext" : "holder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 72,
      "startColumnNumber" : 26,
      "endLineNumber" : 72,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 72,
        "startColumnNumber" : 26,
        "endLineNumber" : 72,
        "endColumnNumber" : 56
      },
      "nodeContext" : "holder.refClass(interfaceName)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 72,
        "startColumnNumber" : 9,
        "endLineNumber" : 72,
        "endColumnNumber" : 56
      },
      "nodeContext" : "interfaceClass=holder.refClass(interfaceName)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 72,
        "startColumnNumber" : 2,
        "endLineNumber" : 72,
        "endColumnNumber" : 57
      },
      "nodeContext" : "JClass interfaceClass=holder.refClass(interfaceName);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3504,
        "startLineNumber" : 57,
        "startColumnNumber" : 108,
        "endLineNumber" : 124,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RestImplementationHolder holder=restImplementationHolder.create(element);\n  TypeElement typeElement=(TypeElement)element;\n  holder.urlPrefix=typeElement.getAnnotation(Rest.class).value();\n  String interfaceName=typeElement.getQualifiedName().toString();\n  String implementationName=interfaceName + ModelConstants.GENERATION_SUFFIX;\n  holder.restImplementationClass=codeModel._class(JMod.PUBLIC,implementationName,ClassType.CLASS);\n  JClass interfaceClass=holder.refClass(interfaceName);\n  holder.restImplementationClass._implements(interfaceClass);\n  JClass restTemplateClass=holder.refClass(SPRING_REST_TEMPLATE_QUALIFIED_NAME);\n  holder.restTemplateField=holder.restImplementationClass.field(JMod.PRIVATE,restTemplateClass,\"restTemplate\");\n  JMethod defaultConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  defaultConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass));\n  JMethod restTemplateConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JVar restTemplateParam=restTemplateConstructor.param(restTemplateClass,\"restTemplate\");\n  restTemplateConstructor.body().assign(JExpr._this().ref(holder.restTemplateField),restTemplateParam);\n  JMethod requestFactoryConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JClass requestFactoryClass=holder.refClass(\"org.springframework.http.client.ClientHttpRequestFactory\");\n  JVar requestFactoryParam=requestFactoryConstructor.param(requestFactoryClass,\"requestFactory\");\n  requestFactoryConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass).arg(requestFactoryParam));\n  List<? extends Element> enclosedElements=typeElement.getEnclosedElements();\n  List<ExecutableElement> methods=ElementFilter.methodsIn(enclosedElements);\n  for (  ExecutableElement method : methods) {\n    if (method.getParameters().size() == 0 && method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n      String methodName=method.getSimpleName().toString();\n      JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n      getRestTemplateMethod.annotate(Override.class);\n      getRestTemplateMethod.body()._return(holder.restTemplateField);\n      break;\n    }\n  }\n  for (  ExecutableElement method : methods) {\n    List<? extends VariableElement> parameters=method.getParameters();\n    if (parameters.size() == 1 && method.getReturnType().getKind() == TypeKind.VOID) {\n      VariableElement firstParameter=parameters.get(0);\n      if (firstParameter.asType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n        String methodName=method.getSimpleName().toString();\n        JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n        setRestTemplateMethod.annotate(Override.class);\n        JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n        setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 428,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3622,
        "startLineNumber" : 56,
        "startColumnNumber" : 1,
        "endLineNumber" : 124,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void process(Element element,JCodeModel codeModel,EBeansHolder activitiesHolder) throws Exception {\n  RestImplementationHolder holder=restImplementationHolder.create(element);\n  TypeElement typeElement=(TypeElement)element;\n  holder.urlPrefix=typeElement.getAnnotation(Rest.class).value();\n  String interfaceName=typeElement.getQualifiedName().toString();\n  String implementationName=interfaceName + ModelConstants.GENERATION_SUFFIX;\n  holder.restImplementationClass=codeModel._class(JMod.PUBLIC,implementationName,ClassType.CLASS);\n  JClass interfaceClass=holder.refClass(interfaceName);\n  holder.restImplementationClass._implements(interfaceClass);\n  JClass restTemplateClass=holder.refClass(SPRING_REST_TEMPLATE_QUALIFIED_NAME);\n  holder.restTemplateField=holder.restImplementationClass.field(JMod.PRIVATE,restTemplateClass,\"restTemplate\");\n  JMethod defaultConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  defaultConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass));\n  JMethod restTemplateConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JVar restTemplateParam=restTemplateConstructor.param(restTemplateClass,\"restTemplate\");\n  restTemplateConstructor.body().assign(JExpr._this().ref(holder.restTemplateField),restTemplateParam);\n  JMethod requestFactoryConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JClass requestFactoryClass=holder.refClass(\"org.springframework.http.client.ClientHttpRequestFactory\");\n  JVar requestFactoryParam=requestFactoryConstructor.param(requestFactoryClass,\"requestFactory\");\n  requestFactoryConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass).arg(requestFactoryParam));\n  List<? extends Element> enclosedElements=typeElement.getEnclosedElements();\n  List<ExecutableElement> methods=ElementFilter.methodsIn(enclosedElements);\n  for (  ExecutableElement method : methods) {\n    if (method.getParameters().size() == 0 && method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n      String methodName=method.getSimpleName().toString();\n      JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n      getRestTemplateMethod.annotate(Override.class);\n      getRestTemplateMethod.body()._return(holder.restTemplateField);\n      break;\n    }\n  }\n  for (  ExecutableElement method : methods) {\n    List<? extends VariableElement> parameters=method.getParameters();\n    if (parameters.size() == 1 && method.getReturnType().getKind() == TypeKind.VOID) {\n      VariableElement firstParameter=parameters.get(0);\n      if (firstParameter.asType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n        String methodName=method.getSimpleName().toString();\n        JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n        setRestTemplateMethod.annotate(Override.class);\n        JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n        setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 448,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 72,
        "startColumnNumber" : 2,
        "endLineNumber" : 72,
        "endColumnNumber" : 57
      },
      "nodeContext" : "JClass interfaceClass=holder.refClass(interfaceName);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.googlecode.androidannotations.processing.rest.RestImplementationHolder"
  }, {
    "nodeContext" : "holder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 73,
      "startColumnNumber" : 2,
      "endLineNumber" : 73,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 73,
        "startColumnNumber" : 2,
        "endLineNumber" : 73,
        "endColumnNumber" : 32
      },
      "nodeContext" : "holder.restImplementationClass",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 73,
        "startColumnNumber" : 2,
        "endLineNumber" : 73,
        "endColumnNumber" : 60
      },
      "nodeContext" : "holder.restImplementationClass._implements(interfaceClass)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 73,
        "startColumnNumber" : 2,
        "endLineNumber" : 73,
        "endColumnNumber" : 61
      },
      "nodeContext" : "holder.restImplementationClass._implements(interfaceClass);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3504,
        "startLineNumber" : 57,
        "startColumnNumber" : 108,
        "endLineNumber" : 124,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RestImplementationHolder holder=restImplementationHolder.create(element);\n  TypeElement typeElement=(TypeElement)element;\n  holder.urlPrefix=typeElement.getAnnotation(Rest.class).value();\n  String interfaceName=typeElement.getQualifiedName().toString();\n  String implementationName=interfaceName + ModelConstants.GENERATION_SUFFIX;\n  holder.restImplementationClass=codeModel._class(JMod.PUBLIC,implementationName,ClassType.CLASS);\n  JClass interfaceClass=holder.refClass(interfaceName);\n  holder.restImplementationClass._implements(interfaceClass);\n  JClass restTemplateClass=holder.refClass(SPRING_REST_TEMPLATE_QUALIFIED_NAME);\n  holder.restTemplateField=holder.restImplementationClass.field(JMod.PRIVATE,restTemplateClass,\"restTemplate\");\n  JMethod defaultConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  defaultConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass));\n  JMethod restTemplateConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JVar restTemplateParam=restTemplateConstructor.param(restTemplateClass,\"restTemplate\");\n  restTemplateConstructor.body().assign(JExpr._this().ref(holder.restTemplateField),restTemplateParam);\n  JMethod requestFactoryConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JClass requestFactoryClass=holder.refClass(\"org.springframework.http.client.ClientHttpRequestFactory\");\n  JVar requestFactoryParam=requestFactoryConstructor.param(requestFactoryClass,\"requestFactory\");\n  requestFactoryConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass).arg(requestFactoryParam));\n  List<? extends Element> enclosedElements=typeElement.getEnclosedElements();\n  List<ExecutableElement> methods=ElementFilter.methodsIn(enclosedElements);\n  for (  ExecutableElement method : methods) {\n    if (method.getParameters().size() == 0 && method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n      String methodName=method.getSimpleName().toString();\n      JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n      getRestTemplateMethod.annotate(Override.class);\n      getRestTemplateMethod.body()._return(holder.restTemplateField);\n      break;\n    }\n  }\n  for (  ExecutableElement method : methods) {\n    List<? extends VariableElement> parameters=method.getParameters();\n    if (parameters.size() == 1 && method.getReturnType().getKind() == TypeKind.VOID) {\n      VariableElement firstParameter=parameters.get(0);\n      if (firstParameter.asType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n        String methodName=method.getSimpleName().toString();\n        JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n        setRestTemplateMethod.annotate(Override.class);\n        JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n        setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 428,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3622,
        "startLineNumber" : 56,
        "startColumnNumber" : 1,
        "endLineNumber" : 124,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void process(Element element,JCodeModel codeModel,EBeansHolder activitiesHolder) throws Exception {\n  RestImplementationHolder holder=restImplementationHolder.create(element);\n  TypeElement typeElement=(TypeElement)element;\n  holder.urlPrefix=typeElement.getAnnotation(Rest.class).value();\n  String interfaceName=typeElement.getQualifiedName().toString();\n  String implementationName=interfaceName + ModelConstants.GENERATION_SUFFIX;\n  holder.restImplementationClass=codeModel._class(JMod.PUBLIC,implementationName,ClassType.CLASS);\n  JClass interfaceClass=holder.refClass(interfaceName);\n  holder.restImplementationClass._implements(interfaceClass);\n  JClass restTemplateClass=holder.refClass(SPRING_REST_TEMPLATE_QUALIFIED_NAME);\n  holder.restTemplateField=holder.restImplementationClass.field(JMod.PRIVATE,restTemplateClass,\"restTemplate\");\n  JMethod defaultConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  defaultConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass));\n  JMethod restTemplateConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JVar restTemplateParam=restTemplateConstructor.param(restTemplateClass,\"restTemplate\");\n  restTemplateConstructor.body().assign(JExpr._this().ref(holder.restTemplateField),restTemplateParam);\n  JMethod requestFactoryConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JClass requestFactoryClass=holder.refClass(\"org.springframework.http.client.ClientHttpRequestFactory\");\n  JVar requestFactoryParam=requestFactoryConstructor.param(requestFactoryClass,\"requestFactory\");\n  requestFactoryConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass).arg(requestFactoryParam));\n  List<? extends Element> enclosedElements=typeElement.getEnclosedElements();\n  List<ExecutableElement> methods=ElementFilter.methodsIn(enclosedElements);\n  for (  ExecutableElement method : methods) {\n    if (method.getParameters().size() == 0 && method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n      String methodName=method.getSimpleName().toString();\n      JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n      getRestTemplateMethod.annotate(Override.class);\n      getRestTemplateMethod.body()._return(holder.restTemplateField);\n      break;\n    }\n  }\n  for (  ExecutableElement method : methods) {\n    List<? extends VariableElement> parameters=method.getParameters();\n    if (parameters.size() == 1 && method.getReturnType().getKind() == TypeKind.VOID) {\n      VariableElement firstParameter=parameters.get(0);\n      if (firstParameter.asType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n        String methodName=method.getSimpleName().toString();\n        JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n        setRestTemplateMethod.annotate(Override.class);\n        JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n        setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 448,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 73,
        "startColumnNumber" : 2,
        "endLineNumber" : 73,
        "endColumnNumber" : 61
      },
      "nodeContext" : "holder.restImplementationClass._implements(interfaceClass);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.googlecode.androidannotations.processing.rest.RestImplementationHolder"
  }, {
    "nodeContext" : "holder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 76,
      "startColumnNumber" : 29,
      "endLineNumber" : 76,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 76,
        "startColumnNumber" : 29,
        "endLineNumber" : 76,
        "endColumnNumber" : 81
      },
      "nodeContext" : "holder.refClass(SPRING_REST_TEMPLATE_QUALIFIED_NAME)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 76,
        "startColumnNumber" : 9,
        "endLineNumber" : 76,
        "endColumnNumber" : 81
      },
      "nodeContext" : "restTemplateClass=holder.refClass(SPRING_REST_TEMPLATE_QUALIFIED_NAME)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 76,
        "startColumnNumber" : 2,
        "endLineNumber" : 76,
        "endColumnNumber" : 82
      },
      "nodeContext" : "JClass restTemplateClass=holder.refClass(SPRING_REST_TEMPLATE_QUALIFIED_NAME);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3504,
        "startLineNumber" : 57,
        "startColumnNumber" : 108,
        "endLineNumber" : 124,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RestImplementationHolder holder=restImplementationHolder.create(element);\n  TypeElement typeElement=(TypeElement)element;\n  holder.urlPrefix=typeElement.getAnnotation(Rest.class).value();\n  String interfaceName=typeElement.getQualifiedName().toString();\n  String implementationName=interfaceName + ModelConstants.GENERATION_SUFFIX;\n  holder.restImplementationClass=codeModel._class(JMod.PUBLIC,implementationName,ClassType.CLASS);\n  JClass interfaceClass=holder.refClass(interfaceName);\n  holder.restImplementationClass._implements(interfaceClass);\n  JClass restTemplateClass=holder.refClass(SPRING_REST_TEMPLATE_QUALIFIED_NAME);\n  holder.restTemplateField=holder.restImplementationClass.field(JMod.PRIVATE,restTemplateClass,\"restTemplate\");\n  JMethod defaultConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  defaultConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass));\n  JMethod restTemplateConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JVar restTemplateParam=restTemplateConstructor.param(restTemplateClass,\"restTemplate\");\n  restTemplateConstructor.body().assign(JExpr._this().ref(holder.restTemplateField),restTemplateParam);\n  JMethod requestFactoryConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JClass requestFactoryClass=holder.refClass(\"org.springframework.http.client.ClientHttpRequestFactory\");\n  JVar requestFactoryParam=requestFactoryConstructor.param(requestFactoryClass,\"requestFactory\");\n  requestFactoryConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass).arg(requestFactoryParam));\n  List<? extends Element> enclosedElements=typeElement.getEnclosedElements();\n  List<ExecutableElement> methods=ElementFilter.methodsIn(enclosedElements);\n  for (  ExecutableElement method : methods) {\n    if (method.getParameters().size() == 0 && method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n      String methodName=method.getSimpleName().toString();\n      JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n      getRestTemplateMethod.annotate(Override.class);\n      getRestTemplateMethod.body()._return(holder.restTemplateField);\n      break;\n    }\n  }\n  for (  ExecutableElement method : methods) {\n    List<? extends VariableElement> parameters=method.getParameters();\n    if (parameters.size() == 1 && method.getReturnType().getKind() == TypeKind.VOID) {\n      VariableElement firstParameter=parameters.get(0);\n      if (firstParameter.asType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n        String methodName=method.getSimpleName().toString();\n        JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n        setRestTemplateMethod.annotate(Override.class);\n        JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n        setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 428,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3622,
        "startLineNumber" : 56,
        "startColumnNumber" : 1,
        "endLineNumber" : 124,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void process(Element element,JCodeModel codeModel,EBeansHolder activitiesHolder) throws Exception {\n  RestImplementationHolder holder=restImplementationHolder.create(element);\n  TypeElement typeElement=(TypeElement)element;\n  holder.urlPrefix=typeElement.getAnnotation(Rest.class).value();\n  String interfaceName=typeElement.getQualifiedName().toString();\n  String implementationName=interfaceName + ModelConstants.GENERATION_SUFFIX;\n  holder.restImplementationClass=codeModel._class(JMod.PUBLIC,implementationName,ClassType.CLASS);\n  JClass interfaceClass=holder.refClass(interfaceName);\n  holder.restImplementationClass._implements(interfaceClass);\n  JClass restTemplateClass=holder.refClass(SPRING_REST_TEMPLATE_QUALIFIED_NAME);\n  holder.restTemplateField=holder.restImplementationClass.field(JMod.PRIVATE,restTemplateClass,\"restTemplate\");\n  JMethod defaultConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  defaultConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass));\n  JMethod restTemplateConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JVar restTemplateParam=restTemplateConstructor.param(restTemplateClass,\"restTemplate\");\n  restTemplateConstructor.body().assign(JExpr._this().ref(holder.restTemplateField),restTemplateParam);\n  JMethod requestFactoryConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JClass requestFactoryClass=holder.refClass(\"org.springframework.http.client.ClientHttpRequestFactory\");\n  JVar requestFactoryParam=requestFactoryConstructor.param(requestFactoryClass,\"requestFactory\");\n  requestFactoryConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass).arg(requestFactoryParam));\n  List<? extends Element> enclosedElements=typeElement.getEnclosedElements();\n  List<ExecutableElement> methods=ElementFilter.methodsIn(enclosedElements);\n  for (  ExecutableElement method : methods) {\n    if (method.getParameters().size() == 0 && method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n      String methodName=method.getSimpleName().toString();\n      JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n      getRestTemplateMethod.annotate(Override.class);\n      getRestTemplateMethod.body()._return(holder.restTemplateField);\n      break;\n    }\n  }\n  for (  ExecutableElement method : methods) {\n    List<? extends VariableElement> parameters=method.getParameters();\n    if (parameters.size() == 1 && method.getReturnType().getKind() == TypeKind.VOID) {\n      VariableElement firstParameter=parameters.get(0);\n      if (firstParameter.asType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n        String methodName=method.getSimpleName().toString();\n        JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n        setRestTemplateMethod.annotate(Override.class);\n        JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n        setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 448,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 76,
        "startColumnNumber" : 2,
        "endLineNumber" : 76,
        "endColumnNumber" : 82
      },
      "nodeContext" : "JClass restTemplateClass=holder.refClass(SPRING_REST_TEMPLATE_QUALIFIED_NAME);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.googlecode.androidannotations.processing.rest.RestImplementationHolder"
  }, {
    "nodeContext" : "holder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 77,
      "startColumnNumber" : 2,
      "endLineNumber" : 77,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 77,
        "startColumnNumber" : 2,
        "endLineNumber" : 77,
        "endColumnNumber" : 26
      },
      "nodeContext" : "holder.restTemplateField",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 112,
        "startLineNumber" : 77,
        "startColumnNumber" : 2,
        "endLineNumber" : 77,
        "endColumnNumber" : 114
      },
      "nodeContext" : "holder.restTemplateField=holder.restImplementationClass.field(JMod.PRIVATE,restTemplateClass,\"restTemplate\")",
      "nodeType" : "Assignment",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 77,
        "startColumnNumber" : 2,
        "endLineNumber" : 77,
        "endColumnNumber" : 115
      },
      "nodeContext" : "holder.restTemplateField=holder.restImplementationClass.field(JMod.PRIVATE,restTemplateClass,\"restTemplate\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3504,
        "startLineNumber" : 57,
        "startColumnNumber" : 108,
        "endLineNumber" : 124,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RestImplementationHolder holder=restImplementationHolder.create(element);\n  TypeElement typeElement=(TypeElement)element;\n  holder.urlPrefix=typeElement.getAnnotation(Rest.class).value();\n  String interfaceName=typeElement.getQualifiedName().toString();\n  String implementationName=interfaceName + ModelConstants.GENERATION_SUFFIX;\n  holder.restImplementationClass=codeModel._class(JMod.PUBLIC,implementationName,ClassType.CLASS);\n  JClass interfaceClass=holder.refClass(interfaceName);\n  holder.restImplementationClass._implements(interfaceClass);\n  JClass restTemplateClass=holder.refClass(SPRING_REST_TEMPLATE_QUALIFIED_NAME);\n  holder.restTemplateField=holder.restImplementationClass.field(JMod.PRIVATE,restTemplateClass,\"restTemplate\");\n  JMethod defaultConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  defaultConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass));\n  JMethod restTemplateConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JVar restTemplateParam=restTemplateConstructor.param(restTemplateClass,\"restTemplate\");\n  restTemplateConstructor.body().assign(JExpr._this().ref(holder.restTemplateField),restTemplateParam);\n  JMethod requestFactoryConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JClass requestFactoryClass=holder.refClass(\"org.springframework.http.client.ClientHttpRequestFactory\");\n  JVar requestFactoryParam=requestFactoryConstructor.param(requestFactoryClass,\"requestFactory\");\n  requestFactoryConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass).arg(requestFactoryParam));\n  List<? extends Element> enclosedElements=typeElement.getEnclosedElements();\n  List<ExecutableElement> methods=ElementFilter.methodsIn(enclosedElements);\n  for (  ExecutableElement method : methods) {\n    if (method.getParameters().size() == 0 && method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n      String methodName=method.getSimpleName().toString();\n      JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n      getRestTemplateMethod.annotate(Override.class);\n      getRestTemplateMethod.body()._return(holder.restTemplateField);\n      break;\n    }\n  }\n  for (  ExecutableElement method : methods) {\n    List<? extends VariableElement> parameters=method.getParameters();\n    if (parameters.size() == 1 && method.getReturnType().getKind() == TypeKind.VOID) {\n      VariableElement firstParameter=parameters.get(0);\n      if (firstParameter.asType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n        String methodName=method.getSimpleName().toString();\n        JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n        setRestTemplateMethod.annotate(Override.class);\n        JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n        setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 428,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3622,
        "startLineNumber" : 56,
        "startColumnNumber" : 1,
        "endLineNumber" : 124,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void process(Element element,JCodeModel codeModel,EBeansHolder activitiesHolder) throws Exception {\n  RestImplementationHolder holder=restImplementationHolder.create(element);\n  TypeElement typeElement=(TypeElement)element;\n  holder.urlPrefix=typeElement.getAnnotation(Rest.class).value();\n  String interfaceName=typeElement.getQualifiedName().toString();\n  String implementationName=interfaceName + ModelConstants.GENERATION_SUFFIX;\n  holder.restImplementationClass=codeModel._class(JMod.PUBLIC,implementationName,ClassType.CLASS);\n  JClass interfaceClass=holder.refClass(interfaceName);\n  holder.restImplementationClass._implements(interfaceClass);\n  JClass restTemplateClass=holder.refClass(SPRING_REST_TEMPLATE_QUALIFIED_NAME);\n  holder.restTemplateField=holder.restImplementationClass.field(JMod.PRIVATE,restTemplateClass,\"restTemplate\");\n  JMethod defaultConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  defaultConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass));\n  JMethod restTemplateConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JVar restTemplateParam=restTemplateConstructor.param(restTemplateClass,\"restTemplate\");\n  restTemplateConstructor.body().assign(JExpr._this().ref(holder.restTemplateField),restTemplateParam);\n  JMethod requestFactoryConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JClass requestFactoryClass=holder.refClass(\"org.springframework.http.client.ClientHttpRequestFactory\");\n  JVar requestFactoryParam=requestFactoryConstructor.param(requestFactoryClass,\"requestFactory\");\n  requestFactoryConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass).arg(requestFactoryParam));\n  List<? extends Element> enclosedElements=typeElement.getEnclosedElements();\n  List<ExecutableElement> methods=ElementFilter.methodsIn(enclosedElements);\n  for (  ExecutableElement method : methods) {\n    if (method.getParameters().size() == 0 && method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n      String methodName=method.getSimpleName().toString();\n      JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n      getRestTemplateMethod.annotate(Override.class);\n      getRestTemplateMethod.body()._return(holder.restTemplateField);\n      break;\n    }\n  }\n  for (  ExecutableElement method : methods) {\n    List<? extends VariableElement> parameters=method.getParameters();\n    if (parameters.size() == 1 && method.getReturnType().getKind() == TypeKind.VOID) {\n      VariableElement firstParameter=parameters.get(0);\n      if (firstParameter.asType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n        String methodName=method.getSimpleName().toString();\n        JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n        setRestTemplateMethod.annotate(Override.class);\n        JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n        setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 448,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 77,
        "startColumnNumber" : 2,
        "endLineNumber" : 77,
        "endColumnNumber" : 115
      },
      "nodeContext" : "holder.restTemplateField=holder.restImplementationClass.field(JMod.PRIVATE,restTemplateClass,\"restTemplate\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.googlecode.androidannotations.processing.rest.RestImplementationHolder"
  }, {
    "nodeContext" : "holder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 77,
      "startColumnNumber" : 29,
      "endLineNumber" : 77,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 77,
        "startColumnNumber" : 29,
        "endLineNumber" : 77,
        "endColumnNumber" : 59
      },
      "nodeContext" : "holder.restImplementationClass",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 77,
        "startColumnNumber" : 29,
        "endLineNumber" : 77,
        "endColumnNumber" : 114
      },
      "nodeContext" : "holder.restImplementationClass.field(JMod.PRIVATE,restTemplateClass,\"restTemplate\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 112,
        "startLineNumber" : 77,
        "startColumnNumber" : 2,
        "endLineNumber" : 77,
        "endColumnNumber" : 114
      },
      "nodeContext" : "holder.restTemplateField=holder.restImplementationClass.field(JMod.PRIVATE,restTemplateClass,\"restTemplate\")",
      "nodeType" : "Assignment",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 77,
        "startColumnNumber" : 2,
        "endLineNumber" : 77,
        "endColumnNumber" : 115
      },
      "nodeContext" : "holder.restTemplateField=holder.restImplementationClass.field(JMod.PRIVATE,restTemplateClass,\"restTemplate\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3504,
        "startLineNumber" : 57,
        "startColumnNumber" : 108,
        "endLineNumber" : 124,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RestImplementationHolder holder=restImplementationHolder.create(element);\n  TypeElement typeElement=(TypeElement)element;\n  holder.urlPrefix=typeElement.getAnnotation(Rest.class).value();\n  String interfaceName=typeElement.getQualifiedName().toString();\n  String implementationName=interfaceName + ModelConstants.GENERATION_SUFFIX;\n  holder.restImplementationClass=codeModel._class(JMod.PUBLIC,implementationName,ClassType.CLASS);\n  JClass interfaceClass=holder.refClass(interfaceName);\n  holder.restImplementationClass._implements(interfaceClass);\n  JClass restTemplateClass=holder.refClass(SPRING_REST_TEMPLATE_QUALIFIED_NAME);\n  holder.restTemplateField=holder.restImplementationClass.field(JMod.PRIVATE,restTemplateClass,\"restTemplate\");\n  JMethod defaultConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  defaultConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass));\n  JMethod restTemplateConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JVar restTemplateParam=restTemplateConstructor.param(restTemplateClass,\"restTemplate\");\n  restTemplateConstructor.body().assign(JExpr._this().ref(holder.restTemplateField),restTemplateParam);\n  JMethod requestFactoryConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JClass requestFactoryClass=holder.refClass(\"org.springframework.http.client.ClientHttpRequestFactory\");\n  JVar requestFactoryParam=requestFactoryConstructor.param(requestFactoryClass,\"requestFactory\");\n  requestFactoryConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass).arg(requestFactoryParam));\n  List<? extends Element> enclosedElements=typeElement.getEnclosedElements();\n  List<ExecutableElement> methods=ElementFilter.methodsIn(enclosedElements);\n  for (  ExecutableElement method : methods) {\n    if (method.getParameters().size() == 0 && method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n      String methodName=method.getSimpleName().toString();\n      JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n      getRestTemplateMethod.annotate(Override.class);\n      getRestTemplateMethod.body()._return(holder.restTemplateField);\n      break;\n    }\n  }\n  for (  ExecutableElement method : methods) {\n    List<? extends VariableElement> parameters=method.getParameters();\n    if (parameters.size() == 1 && method.getReturnType().getKind() == TypeKind.VOID) {\n      VariableElement firstParameter=parameters.get(0);\n      if (firstParameter.asType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n        String methodName=method.getSimpleName().toString();\n        JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n        setRestTemplateMethod.annotate(Override.class);\n        JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n        setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 428,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3622,
        "startLineNumber" : 56,
        "startColumnNumber" : 1,
        "endLineNumber" : 124,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void process(Element element,JCodeModel codeModel,EBeansHolder activitiesHolder) throws Exception {\n  RestImplementationHolder holder=restImplementationHolder.create(element);\n  TypeElement typeElement=(TypeElement)element;\n  holder.urlPrefix=typeElement.getAnnotation(Rest.class).value();\n  String interfaceName=typeElement.getQualifiedName().toString();\n  String implementationName=interfaceName + ModelConstants.GENERATION_SUFFIX;\n  holder.restImplementationClass=codeModel._class(JMod.PUBLIC,implementationName,ClassType.CLASS);\n  JClass interfaceClass=holder.refClass(interfaceName);\n  holder.restImplementationClass._implements(interfaceClass);\n  JClass restTemplateClass=holder.refClass(SPRING_REST_TEMPLATE_QUALIFIED_NAME);\n  holder.restTemplateField=holder.restImplementationClass.field(JMod.PRIVATE,restTemplateClass,\"restTemplate\");\n  JMethod defaultConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  defaultConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass));\n  JMethod restTemplateConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JVar restTemplateParam=restTemplateConstructor.param(restTemplateClass,\"restTemplate\");\n  restTemplateConstructor.body().assign(JExpr._this().ref(holder.restTemplateField),restTemplateParam);\n  JMethod requestFactoryConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JClass requestFactoryClass=holder.refClass(\"org.springframework.http.client.ClientHttpRequestFactory\");\n  JVar requestFactoryParam=requestFactoryConstructor.param(requestFactoryClass,\"requestFactory\");\n  requestFactoryConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass).arg(requestFactoryParam));\n  List<? extends Element> enclosedElements=typeElement.getEnclosedElements();\n  List<ExecutableElement> methods=ElementFilter.methodsIn(enclosedElements);\n  for (  ExecutableElement method : methods) {\n    if (method.getParameters().size() == 0 && method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n      String methodName=method.getSimpleName().toString();\n      JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n      getRestTemplateMethod.annotate(Override.class);\n      getRestTemplateMethod.body()._return(holder.restTemplateField);\n      break;\n    }\n  }\n  for (  ExecutableElement method : methods) {\n    List<? extends VariableElement> parameters=method.getParameters();\n    if (parameters.size() == 1 && method.getReturnType().getKind() == TypeKind.VOID) {\n      VariableElement firstParameter=parameters.get(0);\n      if (firstParameter.asType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n        String methodName=method.getSimpleName().toString();\n        JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n        setRestTemplateMethod.annotate(Override.class);\n        JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n        setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 448,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 77,
        "startColumnNumber" : 2,
        "endLineNumber" : 77,
        "endColumnNumber" : 115
      },
      "nodeContext" : "holder.restTemplateField=holder.restImplementationClass.field(JMod.PRIVATE,restTemplateClass,\"restTemplate\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.googlecode.androidannotations.processing.rest.RestImplementationHolder"
  }, {
    "nodeContext" : "holder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 80,
      "startColumnNumber" : 31,
      "endLineNumber" : 80,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 80,
        "startColumnNumber" : 31,
        "endLineNumber" : 80,
        "endColumnNumber" : 61
      },
      "nodeContext" : "holder.restImplementationClass",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 80,
        "startColumnNumber" : 31,
        "endLineNumber" : 80,
        "endColumnNumber" : 86
      },
      "nodeContext" : "holder.restImplementationClass.constructor(JMod.PUBLIC)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 80,
        "startColumnNumber" : 10,
        "endLineNumber" : 80,
        "endColumnNumber" : 86
      },
      "nodeContext" : "defaultConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 80,
        "startColumnNumber" : 2,
        "endLineNumber" : 80,
        "endColumnNumber" : 87
      },
      "nodeContext" : "JMethod defaultConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3504,
        "startLineNumber" : 57,
        "startColumnNumber" : 108,
        "endLineNumber" : 124,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RestImplementationHolder holder=restImplementationHolder.create(element);\n  TypeElement typeElement=(TypeElement)element;\n  holder.urlPrefix=typeElement.getAnnotation(Rest.class).value();\n  String interfaceName=typeElement.getQualifiedName().toString();\n  String implementationName=interfaceName + ModelConstants.GENERATION_SUFFIX;\n  holder.restImplementationClass=codeModel._class(JMod.PUBLIC,implementationName,ClassType.CLASS);\n  JClass interfaceClass=holder.refClass(interfaceName);\n  holder.restImplementationClass._implements(interfaceClass);\n  JClass restTemplateClass=holder.refClass(SPRING_REST_TEMPLATE_QUALIFIED_NAME);\n  holder.restTemplateField=holder.restImplementationClass.field(JMod.PRIVATE,restTemplateClass,\"restTemplate\");\n  JMethod defaultConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  defaultConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass));\n  JMethod restTemplateConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JVar restTemplateParam=restTemplateConstructor.param(restTemplateClass,\"restTemplate\");\n  restTemplateConstructor.body().assign(JExpr._this().ref(holder.restTemplateField),restTemplateParam);\n  JMethod requestFactoryConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JClass requestFactoryClass=holder.refClass(\"org.springframework.http.client.ClientHttpRequestFactory\");\n  JVar requestFactoryParam=requestFactoryConstructor.param(requestFactoryClass,\"requestFactory\");\n  requestFactoryConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass).arg(requestFactoryParam));\n  List<? extends Element> enclosedElements=typeElement.getEnclosedElements();\n  List<ExecutableElement> methods=ElementFilter.methodsIn(enclosedElements);\n  for (  ExecutableElement method : methods) {\n    if (method.getParameters().size() == 0 && method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n      String methodName=method.getSimpleName().toString();\n      JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n      getRestTemplateMethod.annotate(Override.class);\n      getRestTemplateMethod.body()._return(holder.restTemplateField);\n      break;\n    }\n  }\n  for (  ExecutableElement method : methods) {\n    List<? extends VariableElement> parameters=method.getParameters();\n    if (parameters.size() == 1 && method.getReturnType().getKind() == TypeKind.VOID) {\n      VariableElement firstParameter=parameters.get(0);\n      if (firstParameter.asType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n        String methodName=method.getSimpleName().toString();\n        JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n        setRestTemplateMethod.annotate(Override.class);\n        JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n        setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 428,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3622,
        "startLineNumber" : 56,
        "startColumnNumber" : 1,
        "endLineNumber" : 124,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void process(Element element,JCodeModel codeModel,EBeansHolder activitiesHolder) throws Exception {\n  RestImplementationHolder holder=restImplementationHolder.create(element);\n  TypeElement typeElement=(TypeElement)element;\n  holder.urlPrefix=typeElement.getAnnotation(Rest.class).value();\n  String interfaceName=typeElement.getQualifiedName().toString();\n  String implementationName=interfaceName + ModelConstants.GENERATION_SUFFIX;\n  holder.restImplementationClass=codeModel._class(JMod.PUBLIC,implementationName,ClassType.CLASS);\n  JClass interfaceClass=holder.refClass(interfaceName);\n  holder.restImplementationClass._implements(interfaceClass);\n  JClass restTemplateClass=holder.refClass(SPRING_REST_TEMPLATE_QUALIFIED_NAME);\n  holder.restTemplateField=holder.restImplementationClass.field(JMod.PRIVATE,restTemplateClass,\"restTemplate\");\n  JMethod defaultConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  defaultConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass));\n  JMethod restTemplateConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JVar restTemplateParam=restTemplateConstructor.param(restTemplateClass,\"restTemplate\");\n  restTemplateConstructor.body().assign(JExpr._this().ref(holder.restTemplateField),restTemplateParam);\n  JMethod requestFactoryConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JClass requestFactoryClass=holder.refClass(\"org.springframework.http.client.ClientHttpRequestFactory\");\n  JVar requestFactoryParam=requestFactoryConstructor.param(requestFactoryClass,\"requestFactory\");\n  requestFactoryConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass).arg(requestFactoryParam));\n  List<? extends Element> enclosedElements=typeElement.getEnclosedElements();\n  List<ExecutableElement> methods=ElementFilter.methodsIn(enclosedElements);\n  for (  ExecutableElement method : methods) {\n    if (method.getParameters().size() == 0 && method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n      String methodName=method.getSimpleName().toString();\n      JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n      getRestTemplateMethod.annotate(Override.class);\n      getRestTemplateMethod.body()._return(holder.restTemplateField);\n      break;\n    }\n  }\n  for (  ExecutableElement method : methods) {\n    List<? extends VariableElement> parameters=method.getParameters();\n    if (parameters.size() == 1 && method.getReturnType().getKind() == TypeKind.VOID) {\n      VariableElement firstParameter=parameters.get(0);\n      if (firstParameter.asType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n        String methodName=method.getSimpleName().toString();\n        JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n        setRestTemplateMethod.annotate(Override.class);\n        JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n        setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 448,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 80,
        "startColumnNumber" : 2,
        "endLineNumber" : 80,
        "endColumnNumber" : 87
      },
      "nodeContext" : "JMethod defaultConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.googlecode.androidannotations.processing.rest.RestImplementationHolder"
  }, {
    "nodeContext" : "holder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 81,
      "startColumnNumber" : 35,
      "endLineNumber" : 81,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 81,
        "startColumnNumber" : 35,
        "endLineNumber" : 81,
        "endColumnNumber" : 59
      },
      "nodeContext" : "holder.restTemplateField",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 81,
        "startColumnNumber" : 2,
        "endLineNumber" : 81,
        "endColumnNumber" : 91
      },
      "nodeContext" : "defaultConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 81,
        "startColumnNumber" : 2,
        "endLineNumber" : 81,
        "endColumnNumber" : 92
      },
      "nodeContext" : "defaultConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3504,
        "startLineNumber" : 57,
        "startColumnNumber" : 108,
        "endLineNumber" : 124,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RestImplementationHolder holder=restImplementationHolder.create(element);\n  TypeElement typeElement=(TypeElement)element;\n  holder.urlPrefix=typeElement.getAnnotation(Rest.class).value();\n  String interfaceName=typeElement.getQualifiedName().toString();\n  String implementationName=interfaceName + ModelConstants.GENERATION_SUFFIX;\n  holder.restImplementationClass=codeModel._class(JMod.PUBLIC,implementationName,ClassType.CLASS);\n  JClass interfaceClass=holder.refClass(interfaceName);\n  holder.restImplementationClass._implements(interfaceClass);\n  JClass restTemplateClass=holder.refClass(SPRING_REST_TEMPLATE_QUALIFIED_NAME);\n  holder.restTemplateField=holder.restImplementationClass.field(JMod.PRIVATE,restTemplateClass,\"restTemplate\");\n  JMethod defaultConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  defaultConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass));\n  JMethod restTemplateConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JVar restTemplateParam=restTemplateConstructor.param(restTemplateClass,\"restTemplate\");\n  restTemplateConstructor.body().assign(JExpr._this().ref(holder.restTemplateField),restTemplateParam);\n  JMethod requestFactoryConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JClass requestFactoryClass=holder.refClass(\"org.springframework.http.client.ClientHttpRequestFactory\");\n  JVar requestFactoryParam=requestFactoryConstructor.param(requestFactoryClass,\"requestFactory\");\n  requestFactoryConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass).arg(requestFactoryParam));\n  List<? extends Element> enclosedElements=typeElement.getEnclosedElements();\n  List<ExecutableElement> methods=ElementFilter.methodsIn(enclosedElements);\n  for (  ExecutableElement method : methods) {\n    if (method.getParameters().size() == 0 && method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n      String methodName=method.getSimpleName().toString();\n      JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n      getRestTemplateMethod.annotate(Override.class);\n      getRestTemplateMethod.body()._return(holder.restTemplateField);\n      break;\n    }\n  }\n  for (  ExecutableElement method : methods) {\n    List<? extends VariableElement> parameters=method.getParameters();\n    if (parameters.size() == 1 && method.getReturnType().getKind() == TypeKind.VOID) {\n      VariableElement firstParameter=parameters.get(0);\n      if (firstParameter.asType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n        String methodName=method.getSimpleName().toString();\n        JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n        setRestTemplateMethod.annotate(Override.class);\n        JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n        setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 428,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3622,
        "startLineNumber" : 56,
        "startColumnNumber" : 1,
        "endLineNumber" : 124,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void process(Element element,JCodeModel codeModel,EBeansHolder activitiesHolder) throws Exception {\n  RestImplementationHolder holder=restImplementationHolder.create(element);\n  TypeElement typeElement=(TypeElement)element;\n  holder.urlPrefix=typeElement.getAnnotation(Rest.class).value();\n  String interfaceName=typeElement.getQualifiedName().toString();\n  String implementationName=interfaceName + ModelConstants.GENERATION_SUFFIX;\n  holder.restImplementationClass=codeModel._class(JMod.PUBLIC,implementationName,ClassType.CLASS);\n  JClass interfaceClass=holder.refClass(interfaceName);\n  holder.restImplementationClass._implements(interfaceClass);\n  JClass restTemplateClass=holder.refClass(SPRING_REST_TEMPLATE_QUALIFIED_NAME);\n  holder.restTemplateField=holder.restImplementationClass.field(JMod.PRIVATE,restTemplateClass,\"restTemplate\");\n  JMethod defaultConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  defaultConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass));\n  JMethod restTemplateConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JVar restTemplateParam=restTemplateConstructor.param(restTemplateClass,\"restTemplate\");\n  restTemplateConstructor.body().assign(JExpr._this().ref(holder.restTemplateField),restTemplateParam);\n  JMethod requestFactoryConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JClass requestFactoryClass=holder.refClass(\"org.springframework.http.client.ClientHttpRequestFactory\");\n  JVar requestFactoryParam=requestFactoryConstructor.param(requestFactoryClass,\"requestFactory\");\n  requestFactoryConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass).arg(requestFactoryParam));\n  List<? extends Element> enclosedElements=typeElement.getEnclosedElements();\n  List<ExecutableElement> methods=ElementFilter.methodsIn(enclosedElements);\n  for (  ExecutableElement method : methods) {\n    if (method.getParameters().size() == 0 && method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n      String methodName=method.getSimpleName().toString();\n      JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n      getRestTemplateMethod.annotate(Override.class);\n      getRestTemplateMethod.body()._return(holder.restTemplateField);\n      break;\n    }\n  }\n  for (  ExecutableElement method : methods) {\n    List<? extends VariableElement> parameters=method.getParameters();\n    if (parameters.size() == 1 && method.getReturnType().getKind() == TypeKind.VOID) {\n      VariableElement firstParameter=parameters.get(0);\n      if (firstParameter.asType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n        String methodName=method.getSimpleName().toString();\n        JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n        setRestTemplateMethod.annotate(Override.class);\n        JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n        setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 448,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 81,
        "startColumnNumber" : 2,
        "endLineNumber" : 81,
        "endColumnNumber" : 92
      },
      "nodeContext" : "defaultConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.googlecode.androidannotations.processing.rest.RestImplementationHolder"
  }, {
    "nodeContext" : "holder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 84,
      "startColumnNumber" : 36,
      "endLineNumber" : 84,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 84,
        "startColumnNumber" : 36,
        "endLineNumber" : 84,
        "endColumnNumber" : 66
      },
      "nodeContext" : "holder.restImplementationClass",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 84,
        "startColumnNumber" : 36,
        "endLineNumber" : 84,
        "endColumnNumber" : 91
      },
      "nodeContext" : "holder.restImplementationClass.constructor(JMod.PUBLIC)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 84,
        "startColumnNumber" : 10,
        "endLineNumber" : 84,
        "endColumnNumber" : 91
      },
      "nodeContext" : "restTemplateConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 84,
        "startColumnNumber" : 2,
        "endLineNumber" : 84,
        "endColumnNumber" : 92
      },
      "nodeContext" : "JMethod restTemplateConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3504,
        "startLineNumber" : 57,
        "startColumnNumber" : 108,
        "endLineNumber" : 124,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RestImplementationHolder holder=restImplementationHolder.create(element);\n  TypeElement typeElement=(TypeElement)element;\n  holder.urlPrefix=typeElement.getAnnotation(Rest.class).value();\n  String interfaceName=typeElement.getQualifiedName().toString();\n  String implementationName=interfaceName + ModelConstants.GENERATION_SUFFIX;\n  holder.restImplementationClass=codeModel._class(JMod.PUBLIC,implementationName,ClassType.CLASS);\n  JClass interfaceClass=holder.refClass(interfaceName);\n  holder.restImplementationClass._implements(interfaceClass);\n  JClass restTemplateClass=holder.refClass(SPRING_REST_TEMPLATE_QUALIFIED_NAME);\n  holder.restTemplateField=holder.restImplementationClass.field(JMod.PRIVATE,restTemplateClass,\"restTemplate\");\n  JMethod defaultConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  defaultConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass));\n  JMethod restTemplateConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JVar restTemplateParam=restTemplateConstructor.param(restTemplateClass,\"restTemplate\");\n  restTemplateConstructor.body().assign(JExpr._this().ref(holder.restTemplateField),restTemplateParam);\n  JMethod requestFactoryConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JClass requestFactoryClass=holder.refClass(\"org.springframework.http.client.ClientHttpRequestFactory\");\n  JVar requestFactoryParam=requestFactoryConstructor.param(requestFactoryClass,\"requestFactory\");\n  requestFactoryConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass).arg(requestFactoryParam));\n  List<? extends Element> enclosedElements=typeElement.getEnclosedElements();\n  List<ExecutableElement> methods=ElementFilter.methodsIn(enclosedElements);\n  for (  ExecutableElement method : methods) {\n    if (method.getParameters().size() == 0 && method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n      String methodName=method.getSimpleName().toString();\n      JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n      getRestTemplateMethod.annotate(Override.class);\n      getRestTemplateMethod.body()._return(holder.restTemplateField);\n      break;\n    }\n  }\n  for (  ExecutableElement method : methods) {\n    List<? extends VariableElement> parameters=method.getParameters();\n    if (parameters.size() == 1 && method.getReturnType().getKind() == TypeKind.VOID) {\n      VariableElement firstParameter=parameters.get(0);\n      if (firstParameter.asType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n        String methodName=method.getSimpleName().toString();\n        JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n        setRestTemplateMethod.annotate(Override.class);\n        JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n        setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 428,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3622,
        "startLineNumber" : 56,
        "startColumnNumber" : 1,
        "endLineNumber" : 124,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void process(Element element,JCodeModel codeModel,EBeansHolder activitiesHolder) throws Exception {\n  RestImplementationHolder holder=restImplementationHolder.create(element);\n  TypeElement typeElement=(TypeElement)element;\n  holder.urlPrefix=typeElement.getAnnotation(Rest.class).value();\n  String interfaceName=typeElement.getQualifiedName().toString();\n  String implementationName=interfaceName + ModelConstants.GENERATION_SUFFIX;\n  holder.restImplementationClass=codeModel._class(JMod.PUBLIC,implementationName,ClassType.CLASS);\n  JClass interfaceClass=holder.refClass(interfaceName);\n  holder.restImplementationClass._implements(interfaceClass);\n  JClass restTemplateClass=holder.refClass(SPRING_REST_TEMPLATE_QUALIFIED_NAME);\n  holder.restTemplateField=holder.restImplementationClass.field(JMod.PRIVATE,restTemplateClass,\"restTemplate\");\n  JMethod defaultConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  defaultConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass));\n  JMethod restTemplateConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JVar restTemplateParam=restTemplateConstructor.param(restTemplateClass,\"restTemplate\");\n  restTemplateConstructor.body().assign(JExpr._this().ref(holder.restTemplateField),restTemplateParam);\n  JMethod requestFactoryConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JClass requestFactoryClass=holder.refClass(\"org.springframework.http.client.ClientHttpRequestFactory\");\n  JVar requestFactoryParam=requestFactoryConstructor.param(requestFactoryClass,\"requestFactory\");\n  requestFactoryConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass).arg(requestFactoryParam));\n  List<? extends Element> enclosedElements=typeElement.getEnclosedElements();\n  List<ExecutableElement> methods=ElementFilter.methodsIn(enclosedElements);\n  for (  ExecutableElement method : methods) {\n    if (method.getParameters().size() == 0 && method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n      String methodName=method.getSimpleName().toString();\n      JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n      getRestTemplateMethod.annotate(Override.class);\n      getRestTemplateMethod.body()._return(holder.restTemplateField);\n      break;\n    }\n  }\n  for (  ExecutableElement method : methods) {\n    List<? extends VariableElement> parameters=method.getParameters();\n    if (parameters.size() == 1 && method.getReturnType().getKind() == TypeKind.VOID) {\n      VariableElement firstParameter=parameters.get(0);\n      if (firstParameter.asType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n        String methodName=method.getSimpleName().toString();\n        JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n        setRestTemplateMethod.annotate(Override.class);\n        JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n        setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 448,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 84,
        "startColumnNumber" : 2,
        "endLineNumber" : 84,
        "endColumnNumber" : 92
      },
      "nodeContext" : "JMethod restTemplateConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.googlecode.androidannotations.processing.rest.RestImplementationHolder"
  }, {
    "nodeContext" : "holder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 86,
      "startColumnNumber" : 58,
      "endLineNumber" : 86,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 86,
        "startColumnNumber" : 58,
        "endLineNumber" : 86,
        "endColumnNumber" : 82
      },
      "nodeContext" : "holder.restTemplateField",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 86,
        "startColumnNumber" : 40,
        "endLineNumber" : 86,
        "endColumnNumber" : 83
      },
      "nodeContext" : "JExpr._this().ref(holder.restTemplateField)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 86,
        "startColumnNumber" : 2,
        "endLineNumber" : 86,
        "endColumnNumber" : 103
      },
      "nodeContext" : "restTemplateConstructor.body().assign(JExpr._this().ref(holder.restTemplateField),restTemplateParam)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 86,
        "startColumnNumber" : 2,
        "endLineNumber" : 86,
        "endColumnNumber" : 104
      },
      "nodeContext" : "restTemplateConstructor.body().assign(JExpr._this().ref(holder.restTemplateField),restTemplateParam);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3504,
        "startLineNumber" : 57,
        "startColumnNumber" : 108,
        "endLineNumber" : 124,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RestImplementationHolder holder=restImplementationHolder.create(element);\n  TypeElement typeElement=(TypeElement)element;\n  holder.urlPrefix=typeElement.getAnnotation(Rest.class).value();\n  String interfaceName=typeElement.getQualifiedName().toString();\n  String implementationName=interfaceName + ModelConstants.GENERATION_SUFFIX;\n  holder.restImplementationClass=codeModel._class(JMod.PUBLIC,implementationName,ClassType.CLASS);\n  JClass interfaceClass=holder.refClass(interfaceName);\n  holder.restImplementationClass._implements(interfaceClass);\n  JClass restTemplateClass=holder.refClass(SPRING_REST_TEMPLATE_QUALIFIED_NAME);\n  holder.restTemplateField=holder.restImplementationClass.field(JMod.PRIVATE,restTemplateClass,\"restTemplate\");\n  JMethod defaultConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  defaultConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass));\n  JMethod restTemplateConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JVar restTemplateParam=restTemplateConstructor.param(restTemplateClass,\"restTemplate\");\n  restTemplateConstructor.body().assign(JExpr._this().ref(holder.restTemplateField),restTemplateParam);\n  JMethod requestFactoryConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JClass requestFactoryClass=holder.refClass(\"org.springframework.http.client.ClientHttpRequestFactory\");\n  JVar requestFactoryParam=requestFactoryConstructor.param(requestFactoryClass,\"requestFactory\");\n  requestFactoryConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass).arg(requestFactoryParam));\n  List<? extends Element> enclosedElements=typeElement.getEnclosedElements();\n  List<ExecutableElement> methods=ElementFilter.methodsIn(enclosedElements);\n  for (  ExecutableElement method : methods) {\n    if (method.getParameters().size() == 0 && method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n      String methodName=method.getSimpleName().toString();\n      JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n      getRestTemplateMethod.annotate(Override.class);\n      getRestTemplateMethod.body()._return(holder.restTemplateField);\n      break;\n    }\n  }\n  for (  ExecutableElement method : methods) {\n    List<? extends VariableElement> parameters=method.getParameters();\n    if (parameters.size() == 1 && method.getReturnType().getKind() == TypeKind.VOID) {\n      VariableElement firstParameter=parameters.get(0);\n      if (firstParameter.asType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n        String methodName=method.getSimpleName().toString();\n        JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n        setRestTemplateMethod.annotate(Override.class);\n        JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n        setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 428,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3622,
        "startLineNumber" : 56,
        "startColumnNumber" : 1,
        "endLineNumber" : 124,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void process(Element element,JCodeModel codeModel,EBeansHolder activitiesHolder) throws Exception {\n  RestImplementationHolder holder=restImplementationHolder.create(element);\n  TypeElement typeElement=(TypeElement)element;\n  holder.urlPrefix=typeElement.getAnnotation(Rest.class).value();\n  String interfaceName=typeElement.getQualifiedName().toString();\n  String implementationName=interfaceName + ModelConstants.GENERATION_SUFFIX;\n  holder.restImplementationClass=codeModel._class(JMod.PUBLIC,implementationName,ClassType.CLASS);\n  JClass interfaceClass=holder.refClass(interfaceName);\n  holder.restImplementationClass._implements(interfaceClass);\n  JClass restTemplateClass=holder.refClass(SPRING_REST_TEMPLATE_QUALIFIED_NAME);\n  holder.restTemplateField=holder.restImplementationClass.field(JMod.PRIVATE,restTemplateClass,\"restTemplate\");\n  JMethod defaultConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  defaultConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass));\n  JMethod restTemplateConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JVar restTemplateParam=restTemplateConstructor.param(restTemplateClass,\"restTemplate\");\n  restTemplateConstructor.body().assign(JExpr._this().ref(holder.restTemplateField),restTemplateParam);\n  JMethod requestFactoryConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JClass requestFactoryClass=holder.refClass(\"org.springframework.http.client.ClientHttpRequestFactory\");\n  JVar requestFactoryParam=requestFactoryConstructor.param(requestFactoryClass,\"requestFactory\");\n  requestFactoryConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass).arg(requestFactoryParam));\n  List<? extends Element> enclosedElements=typeElement.getEnclosedElements();\n  List<ExecutableElement> methods=ElementFilter.methodsIn(enclosedElements);\n  for (  ExecutableElement method : methods) {\n    if (method.getParameters().size() == 0 && method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n      String methodName=method.getSimpleName().toString();\n      JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n      getRestTemplateMethod.annotate(Override.class);\n      getRestTemplateMethod.body()._return(holder.restTemplateField);\n      break;\n    }\n  }\n  for (  ExecutableElement method : methods) {\n    List<? extends VariableElement> parameters=method.getParameters();\n    if (parameters.size() == 1 && method.getReturnType().getKind() == TypeKind.VOID) {\n      VariableElement firstParameter=parameters.get(0);\n      if (firstParameter.asType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n        String methodName=method.getSimpleName().toString();\n        JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n        setRestTemplateMethod.annotate(Override.class);\n        JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n        setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 448,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 86,
        "startColumnNumber" : 2,
        "endLineNumber" : 86,
        "endColumnNumber" : 104
      },
      "nodeContext" : "restTemplateConstructor.body().assign(JExpr._this().ref(holder.restTemplateField),restTemplateParam);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.googlecode.androidannotations.processing.rest.RestImplementationHolder"
  }, {
    "nodeContext" : "holder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 89,
      "startColumnNumber" : 38,
      "endLineNumber" : 89,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 89,
        "startColumnNumber" : 38,
        "endLineNumber" : 89,
        "endColumnNumber" : 68
      },
      "nodeContext" : "holder.restImplementationClass",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 89,
        "startColumnNumber" : 38,
        "endLineNumber" : 89,
        "endColumnNumber" : 93
      },
      "nodeContext" : "holder.restImplementationClass.constructor(JMod.PUBLIC)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 89,
        "startColumnNumber" : 10,
        "endLineNumber" : 89,
        "endColumnNumber" : 93
      },
      "nodeContext" : "requestFactoryConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 89,
        "startColumnNumber" : 2,
        "endLineNumber" : 89,
        "endColumnNumber" : 94
      },
      "nodeContext" : "JMethod requestFactoryConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3504,
        "startLineNumber" : 57,
        "startColumnNumber" : 108,
        "endLineNumber" : 124,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RestImplementationHolder holder=restImplementationHolder.create(element);\n  TypeElement typeElement=(TypeElement)element;\n  holder.urlPrefix=typeElement.getAnnotation(Rest.class).value();\n  String interfaceName=typeElement.getQualifiedName().toString();\n  String implementationName=interfaceName + ModelConstants.GENERATION_SUFFIX;\n  holder.restImplementationClass=codeModel._class(JMod.PUBLIC,implementationName,ClassType.CLASS);\n  JClass interfaceClass=holder.refClass(interfaceName);\n  holder.restImplementationClass._implements(interfaceClass);\n  JClass restTemplateClass=holder.refClass(SPRING_REST_TEMPLATE_QUALIFIED_NAME);\n  holder.restTemplateField=holder.restImplementationClass.field(JMod.PRIVATE,restTemplateClass,\"restTemplate\");\n  JMethod defaultConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  defaultConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass));\n  JMethod restTemplateConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JVar restTemplateParam=restTemplateConstructor.param(restTemplateClass,\"restTemplate\");\n  restTemplateConstructor.body().assign(JExpr._this().ref(holder.restTemplateField),restTemplateParam);\n  JMethod requestFactoryConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JClass requestFactoryClass=holder.refClass(\"org.springframework.http.client.ClientHttpRequestFactory\");\n  JVar requestFactoryParam=requestFactoryConstructor.param(requestFactoryClass,\"requestFactory\");\n  requestFactoryConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass).arg(requestFactoryParam));\n  List<? extends Element> enclosedElements=typeElement.getEnclosedElements();\n  List<ExecutableElement> methods=ElementFilter.methodsIn(enclosedElements);\n  for (  ExecutableElement method : methods) {\n    if (method.getParameters().size() == 0 && method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n      String methodName=method.getSimpleName().toString();\n      JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n      getRestTemplateMethod.annotate(Override.class);\n      getRestTemplateMethod.body()._return(holder.restTemplateField);\n      break;\n    }\n  }\n  for (  ExecutableElement method : methods) {\n    List<? extends VariableElement> parameters=method.getParameters();\n    if (parameters.size() == 1 && method.getReturnType().getKind() == TypeKind.VOID) {\n      VariableElement firstParameter=parameters.get(0);\n      if (firstParameter.asType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n        String methodName=method.getSimpleName().toString();\n        JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n        setRestTemplateMethod.annotate(Override.class);\n        JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n        setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 428,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3622,
        "startLineNumber" : 56,
        "startColumnNumber" : 1,
        "endLineNumber" : 124,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void process(Element element,JCodeModel codeModel,EBeansHolder activitiesHolder) throws Exception {\n  RestImplementationHolder holder=restImplementationHolder.create(element);\n  TypeElement typeElement=(TypeElement)element;\n  holder.urlPrefix=typeElement.getAnnotation(Rest.class).value();\n  String interfaceName=typeElement.getQualifiedName().toString();\n  String implementationName=interfaceName + ModelConstants.GENERATION_SUFFIX;\n  holder.restImplementationClass=codeModel._class(JMod.PUBLIC,implementationName,ClassType.CLASS);\n  JClass interfaceClass=holder.refClass(interfaceName);\n  holder.restImplementationClass._implements(interfaceClass);\n  JClass restTemplateClass=holder.refClass(SPRING_REST_TEMPLATE_QUALIFIED_NAME);\n  holder.restTemplateField=holder.restImplementationClass.field(JMod.PRIVATE,restTemplateClass,\"restTemplate\");\n  JMethod defaultConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  defaultConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass));\n  JMethod restTemplateConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JVar restTemplateParam=restTemplateConstructor.param(restTemplateClass,\"restTemplate\");\n  restTemplateConstructor.body().assign(JExpr._this().ref(holder.restTemplateField),restTemplateParam);\n  JMethod requestFactoryConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JClass requestFactoryClass=holder.refClass(\"org.springframework.http.client.ClientHttpRequestFactory\");\n  JVar requestFactoryParam=requestFactoryConstructor.param(requestFactoryClass,\"requestFactory\");\n  requestFactoryConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass).arg(requestFactoryParam));\n  List<? extends Element> enclosedElements=typeElement.getEnclosedElements();\n  List<ExecutableElement> methods=ElementFilter.methodsIn(enclosedElements);\n  for (  ExecutableElement method : methods) {\n    if (method.getParameters().size() == 0 && method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n      String methodName=method.getSimpleName().toString();\n      JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n      getRestTemplateMethod.annotate(Override.class);\n      getRestTemplateMethod.body()._return(holder.restTemplateField);\n      break;\n    }\n  }\n  for (  ExecutableElement method : methods) {\n    List<? extends VariableElement> parameters=method.getParameters();\n    if (parameters.size() == 1 && method.getReturnType().getKind() == TypeKind.VOID) {\n      VariableElement firstParameter=parameters.get(0);\n      if (firstParameter.asType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n        String methodName=method.getSimpleName().toString();\n        JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n        setRestTemplateMethod.annotate(Override.class);\n        JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n        setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 448,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 89,
        "startColumnNumber" : 2,
        "endLineNumber" : 89,
        "endColumnNumber" : 94
      },
      "nodeContext" : "JMethod requestFactoryConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.googlecode.androidannotations.processing.rest.RestImplementationHolder"
  }, {
    "nodeContext" : "holder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 90,
      "startColumnNumber" : 31,
      "endLineNumber" : 90,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 90,
        "startColumnNumber" : 31,
        "endLineNumber" : 90,
        "endColumnNumber" : 106
      },
      "nodeContext" : "holder.refClass(\"org.springframework.http.client.ClientHttpRequestFactory\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 90,
        "startColumnNumber" : 9,
        "endLineNumber" : 90,
        "endColumnNumber" : 106
      },
      "nodeContext" : "requestFactoryClass=holder.refClass(\"org.springframework.http.client.ClientHttpRequestFactory\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 90,
        "startColumnNumber" : 2,
        "endLineNumber" : 90,
        "endColumnNumber" : 107
      },
      "nodeContext" : "JClass requestFactoryClass=holder.refClass(\"org.springframework.http.client.ClientHttpRequestFactory\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3504,
        "startLineNumber" : 57,
        "startColumnNumber" : 108,
        "endLineNumber" : 124,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RestImplementationHolder holder=restImplementationHolder.create(element);\n  TypeElement typeElement=(TypeElement)element;\n  holder.urlPrefix=typeElement.getAnnotation(Rest.class).value();\n  String interfaceName=typeElement.getQualifiedName().toString();\n  String implementationName=interfaceName + ModelConstants.GENERATION_SUFFIX;\n  holder.restImplementationClass=codeModel._class(JMod.PUBLIC,implementationName,ClassType.CLASS);\n  JClass interfaceClass=holder.refClass(interfaceName);\n  holder.restImplementationClass._implements(interfaceClass);\n  JClass restTemplateClass=holder.refClass(SPRING_REST_TEMPLATE_QUALIFIED_NAME);\n  holder.restTemplateField=holder.restImplementationClass.field(JMod.PRIVATE,restTemplateClass,\"restTemplate\");\n  JMethod defaultConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  defaultConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass));\n  JMethod restTemplateConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JVar restTemplateParam=restTemplateConstructor.param(restTemplateClass,\"restTemplate\");\n  restTemplateConstructor.body().assign(JExpr._this().ref(holder.restTemplateField),restTemplateParam);\n  JMethod requestFactoryConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JClass requestFactoryClass=holder.refClass(\"org.springframework.http.client.ClientHttpRequestFactory\");\n  JVar requestFactoryParam=requestFactoryConstructor.param(requestFactoryClass,\"requestFactory\");\n  requestFactoryConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass).arg(requestFactoryParam));\n  List<? extends Element> enclosedElements=typeElement.getEnclosedElements();\n  List<ExecutableElement> methods=ElementFilter.methodsIn(enclosedElements);\n  for (  ExecutableElement method : methods) {\n    if (method.getParameters().size() == 0 && method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n      String methodName=method.getSimpleName().toString();\n      JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n      getRestTemplateMethod.annotate(Override.class);\n      getRestTemplateMethod.body()._return(holder.restTemplateField);\n      break;\n    }\n  }\n  for (  ExecutableElement method : methods) {\n    List<? extends VariableElement> parameters=method.getParameters();\n    if (parameters.size() == 1 && method.getReturnType().getKind() == TypeKind.VOID) {\n      VariableElement firstParameter=parameters.get(0);\n      if (firstParameter.asType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n        String methodName=method.getSimpleName().toString();\n        JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n        setRestTemplateMethod.annotate(Override.class);\n        JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n        setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 428,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3622,
        "startLineNumber" : 56,
        "startColumnNumber" : 1,
        "endLineNumber" : 124,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void process(Element element,JCodeModel codeModel,EBeansHolder activitiesHolder) throws Exception {\n  RestImplementationHolder holder=restImplementationHolder.create(element);\n  TypeElement typeElement=(TypeElement)element;\n  holder.urlPrefix=typeElement.getAnnotation(Rest.class).value();\n  String interfaceName=typeElement.getQualifiedName().toString();\n  String implementationName=interfaceName + ModelConstants.GENERATION_SUFFIX;\n  holder.restImplementationClass=codeModel._class(JMod.PUBLIC,implementationName,ClassType.CLASS);\n  JClass interfaceClass=holder.refClass(interfaceName);\n  holder.restImplementationClass._implements(interfaceClass);\n  JClass restTemplateClass=holder.refClass(SPRING_REST_TEMPLATE_QUALIFIED_NAME);\n  holder.restTemplateField=holder.restImplementationClass.field(JMod.PRIVATE,restTemplateClass,\"restTemplate\");\n  JMethod defaultConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  defaultConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass));\n  JMethod restTemplateConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JVar restTemplateParam=restTemplateConstructor.param(restTemplateClass,\"restTemplate\");\n  restTemplateConstructor.body().assign(JExpr._this().ref(holder.restTemplateField),restTemplateParam);\n  JMethod requestFactoryConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JClass requestFactoryClass=holder.refClass(\"org.springframework.http.client.ClientHttpRequestFactory\");\n  JVar requestFactoryParam=requestFactoryConstructor.param(requestFactoryClass,\"requestFactory\");\n  requestFactoryConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass).arg(requestFactoryParam));\n  List<? extends Element> enclosedElements=typeElement.getEnclosedElements();\n  List<ExecutableElement> methods=ElementFilter.methodsIn(enclosedElements);\n  for (  ExecutableElement method : methods) {\n    if (method.getParameters().size() == 0 && method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n      String methodName=method.getSimpleName().toString();\n      JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n      getRestTemplateMethod.annotate(Override.class);\n      getRestTemplateMethod.body()._return(holder.restTemplateField);\n      break;\n    }\n  }\n  for (  ExecutableElement method : methods) {\n    List<? extends VariableElement> parameters=method.getParameters();\n    if (parameters.size() == 1 && method.getReturnType().getKind() == TypeKind.VOID) {\n      VariableElement firstParameter=parameters.get(0);\n      if (firstParameter.asType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n        String methodName=method.getSimpleName().toString();\n        JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n        setRestTemplateMethod.annotate(Override.class);\n        JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n        setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 448,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 90,
        "startColumnNumber" : 2,
        "endLineNumber" : 90,
        "endColumnNumber" : 107
      },
      "nodeContext" : "JClass requestFactoryClass=holder.refClass(\"org.springframework.http.client.ClientHttpRequestFactory\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.googlecode.androidannotations.processing.rest.RestImplementationHolder"
  }, {
    "nodeContext" : "holder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 92,
      "startColumnNumber" : 42,
      "endLineNumber" : 92,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 92,
        "startColumnNumber" : 42,
        "endLineNumber" : 92,
        "endColumnNumber" : 66
      },
      "nodeContext" : "holder.restTemplateField",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 121,
        "startLineNumber" : 92,
        "startColumnNumber" : 2,
        "endLineNumber" : 92,
        "endColumnNumber" : 123
      },
      "nodeContext" : "requestFactoryConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass).arg(requestFactoryParam))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 122,
        "startLineNumber" : 92,
        "startColumnNumber" : 2,
        "endLineNumber" : 92,
        "endColumnNumber" : 124
      },
      "nodeContext" : "requestFactoryConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass).arg(requestFactoryParam));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3504,
        "startLineNumber" : 57,
        "startColumnNumber" : 108,
        "endLineNumber" : 124,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RestImplementationHolder holder=restImplementationHolder.create(element);\n  TypeElement typeElement=(TypeElement)element;\n  holder.urlPrefix=typeElement.getAnnotation(Rest.class).value();\n  String interfaceName=typeElement.getQualifiedName().toString();\n  String implementationName=interfaceName + ModelConstants.GENERATION_SUFFIX;\n  holder.restImplementationClass=codeModel._class(JMod.PUBLIC,implementationName,ClassType.CLASS);\n  JClass interfaceClass=holder.refClass(interfaceName);\n  holder.restImplementationClass._implements(interfaceClass);\n  JClass restTemplateClass=holder.refClass(SPRING_REST_TEMPLATE_QUALIFIED_NAME);\n  holder.restTemplateField=holder.restImplementationClass.field(JMod.PRIVATE,restTemplateClass,\"restTemplate\");\n  JMethod defaultConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  defaultConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass));\n  JMethod restTemplateConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JVar restTemplateParam=restTemplateConstructor.param(restTemplateClass,\"restTemplate\");\n  restTemplateConstructor.body().assign(JExpr._this().ref(holder.restTemplateField),restTemplateParam);\n  JMethod requestFactoryConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JClass requestFactoryClass=holder.refClass(\"org.springframework.http.client.ClientHttpRequestFactory\");\n  JVar requestFactoryParam=requestFactoryConstructor.param(requestFactoryClass,\"requestFactory\");\n  requestFactoryConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass).arg(requestFactoryParam));\n  List<? extends Element> enclosedElements=typeElement.getEnclosedElements();\n  List<ExecutableElement> methods=ElementFilter.methodsIn(enclosedElements);\n  for (  ExecutableElement method : methods) {\n    if (method.getParameters().size() == 0 && method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n      String methodName=method.getSimpleName().toString();\n      JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n      getRestTemplateMethod.annotate(Override.class);\n      getRestTemplateMethod.body()._return(holder.restTemplateField);\n      break;\n    }\n  }\n  for (  ExecutableElement method : methods) {\n    List<? extends VariableElement> parameters=method.getParameters();\n    if (parameters.size() == 1 && method.getReturnType().getKind() == TypeKind.VOID) {\n      VariableElement firstParameter=parameters.get(0);\n      if (firstParameter.asType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n        String methodName=method.getSimpleName().toString();\n        JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n        setRestTemplateMethod.annotate(Override.class);\n        JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n        setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 428,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3622,
        "startLineNumber" : 56,
        "startColumnNumber" : 1,
        "endLineNumber" : 124,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void process(Element element,JCodeModel codeModel,EBeansHolder activitiesHolder) throws Exception {\n  RestImplementationHolder holder=restImplementationHolder.create(element);\n  TypeElement typeElement=(TypeElement)element;\n  holder.urlPrefix=typeElement.getAnnotation(Rest.class).value();\n  String interfaceName=typeElement.getQualifiedName().toString();\n  String implementationName=interfaceName + ModelConstants.GENERATION_SUFFIX;\n  holder.restImplementationClass=codeModel._class(JMod.PUBLIC,implementationName,ClassType.CLASS);\n  JClass interfaceClass=holder.refClass(interfaceName);\n  holder.restImplementationClass._implements(interfaceClass);\n  JClass restTemplateClass=holder.refClass(SPRING_REST_TEMPLATE_QUALIFIED_NAME);\n  holder.restTemplateField=holder.restImplementationClass.field(JMod.PRIVATE,restTemplateClass,\"restTemplate\");\n  JMethod defaultConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  defaultConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass));\n  JMethod restTemplateConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JVar restTemplateParam=restTemplateConstructor.param(restTemplateClass,\"restTemplate\");\n  restTemplateConstructor.body().assign(JExpr._this().ref(holder.restTemplateField),restTemplateParam);\n  JMethod requestFactoryConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JClass requestFactoryClass=holder.refClass(\"org.springframework.http.client.ClientHttpRequestFactory\");\n  JVar requestFactoryParam=requestFactoryConstructor.param(requestFactoryClass,\"requestFactory\");\n  requestFactoryConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass).arg(requestFactoryParam));\n  List<? extends Element> enclosedElements=typeElement.getEnclosedElements();\n  List<ExecutableElement> methods=ElementFilter.methodsIn(enclosedElements);\n  for (  ExecutableElement method : methods) {\n    if (method.getParameters().size() == 0 && method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n      String methodName=method.getSimpleName().toString();\n      JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n      getRestTemplateMethod.annotate(Override.class);\n      getRestTemplateMethod.body()._return(holder.restTemplateField);\n      break;\n    }\n  }\n  for (  ExecutableElement method : methods) {\n    List<? extends VariableElement> parameters=method.getParameters();\n    if (parameters.size() == 1 && method.getReturnType().getKind() == TypeKind.VOID) {\n      VariableElement firstParameter=parameters.get(0);\n      if (firstParameter.asType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n        String methodName=method.getSimpleName().toString();\n        JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n        setRestTemplateMethod.annotate(Override.class);\n        JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n        setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 448,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 122,
        "startLineNumber" : 92,
        "startColumnNumber" : 2,
        "endLineNumber" : 92,
        "endColumnNumber" : 124
      },
      "nodeContext" : "requestFactoryConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass).arg(requestFactoryParam));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.googlecode.androidannotations.processing.rest.RestImplementationHolder"
  }, {
    "nodeContext" : "holder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 100,
      "startColumnNumber" : 36,
      "endLineNumber" : 100,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 100,
        "startColumnNumber" : 36,
        "endLineNumber" : 100,
        "endColumnNumber" : 66
      },
      "nodeContext" : "holder.restImplementationClass",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 100,
        "startColumnNumber" : 36,
        "endLineNumber" : 100,
        "endColumnNumber" : 117
      },
      "nodeContext" : "holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 100,
        "startColumnNumber" : 12,
        "endLineNumber" : 100,
        "endColumnNumber" : 117
      },
      "nodeContext" : "getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 100,
        "startColumnNumber" : 4,
        "endLineNumber" : 100,
        "endColumnNumber" : 118
      },
      "nodeContext" : "JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 342,
        "startLineNumber" : 98,
        "startColumnNumber" : 124,
        "endLineNumber" : 104,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  String methodName=method.getSimpleName().toString();\n  JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n  getRestTemplateMethod.annotate(Override.class);\n  getRestTemplateMethod.body()._return(holder.restTemplateField);\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 43,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 463,
        "startLineNumber" : 98,
        "startColumnNumber" : 3,
        "endLineNumber" : 104,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (method.getParameters().size() == 0 && method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n  String methodName=method.getSimpleName().toString();\n  JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n  getRestTemplateMethod.annotate(Override.class);\n  getRestTemplateMethod.body()._return(holder.restTemplateField);\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 60,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 472,
        "startLineNumber" : 97,
        "startColumnNumber" : 43,
        "endLineNumber" : 105,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (method.getParameters().size() == 0 && method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n    String methodName=method.getSimpleName().toString();\n    JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n    getRestTemplateMethod.annotate(Override.class);\n    getRestTemplateMethod.body()._return(holder.restTemplateField);\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 61,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 513,
        "startLineNumber" : 97,
        "startColumnNumber" : 2,
        "endLineNumber" : 105,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (ExecutableElement method : methods) {\n  if (method.getParameters().size() == 0 && method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n    String methodName=method.getSimpleName().toString();\n    JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n    getRestTemplateMethod.annotate(Override.class);\n    getRestTemplateMethod.body()._return(holder.restTemplateField);\n    break;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 67,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3504,
        "startLineNumber" : 57,
        "startColumnNumber" : 108,
        "endLineNumber" : 124,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RestImplementationHolder holder=restImplementationHolder.create(element);\n  TypeElement typeElement=(TypeElement)element;\n  holder.urlPrefix=typeElement.getAnnotation(Rest.class).value();\n  String interfaceName=typeElement.getQualifiedName().toString();\n  String implementationName=interfaceName + ModelConstants.GENERATION_SUFFIX;\n  holder.restImplementationClass=codeModel._class(JMod.PUBLIC,implementationName,ClassType.CLASS);\n  JClass interfaceClass=holder.refClass(interfaceName);\n  holder.restImplementationClass._implements(interfaceClass);\n  JClass restTemplateClass=holder.refClass(SPRING_REST_TEMPLATE_QUALIFIED_NAME);\n  holder.restTemplateField=holder.restImplementationClass.field(JMod.PRIVATE,restTemplateClass,\"restTemplate\");\n  JMethod defaultConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  defaultConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass));\n  JMethod restTemplateConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JVar restTemplateParam=restTemplateConstructor.param(restTemplateClass,\"restTemplate\");\n  restTemplateConstructor.body().assign(JExpr._this().ref(holder.restTemplateField),restTemplateParam);\n  JMethod requestFactoryConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JClass requestFactoryClass=holder.refClass(\"org.springframework.http.client.ClientHttpRequestFactory\");\n  JVar requestFactoryParam=requestFactoryConstructor.param(requestFactoryClass,\"requestFactory\");\n  requestFactoryConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass).arg(requestFactoryParam));\n  List<? extends Element> enclosedElements=typeElement.getEnclosedElements();\n  List<ExecutableElement> methods=ElementFilter.methodsIn(enclosedElements);\n  for (  ExecutableElement method : methods) {\n    if (method.getParameters().size() == 0 && method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n      String methodName=method.getSimpleName().toString();\n      JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n      getRestTemplateMethod.annotate(Override.class);\n      getRestTemplateMethod.body()._return(holder.restTemplateField);\n      break;\n    }\n  }\n  for (  ExecutableElement method : methods) {\n    List<? extends VariableElement> parameters=method.getParameters();\n    if (parameters.size() == 1 && method.getReturnType().getKind() == TypeKind.VOID) {\n      VariableElement firstParameter=parameters.get(0);\n      if (firstParameter.asType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n        String methodName=method.getSimpleName().toString();\n        JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n        setRestTemplateMethod.annotate(Override.class);\n        JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n        setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 428,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3622,
        "startLineNumber" : 56,
        "startColumnNumber" : 1,
        "endLineNumber" : 124,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void process(Element element,JCodeModel codeModel,EBeansHolder activitiesHolder) throws Exception {\n  RestImplementationHolder holder=restImplementationHolder.create(element);\n  TypeElement typeElement=(TypeElement)element;\n  holder.urlPrefix=typeElement.getAnnotation(Rest.class).value();\n  String interfaceName=typeElement.getQualifiedName().toString();\n  String implementationName=interfaceName + ModelConstants.GENERATION_SUFFIX;\n  holder.restImplementationClass=codeModel._class(JMod.PUBLIC,implementationName,ClassType.CLASS);\n  JClass interfaceClass=holder.refClass(interfaceName);\n  holder.restImplementationClass._implements(interfaceClass);\n  JClass restTemplateClass=holder.refClass(SPRING_REST_TEMPLATE_QUALIFIED_NAME);\n  holder.restTemplateField=holder.restImplementationClass.field(JMod.PRIVATE,restTemplateClass,\"restTemplate\");\n  JMethod defaultConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  defaultConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass));\n  JMethod restTemplateConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JVar restTemplateParam=restTemplateConstructor.param(restTemplateClass,\"restTemplate\");\n  restTemplateConstructor.body().assign(JExpr._this().ref(holder.restTemplateField),restTemplateParam);\n  JMethod requestFactoryConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JClass requestFactoryClass=holder.refClass(\"org.springframework.http.client.ClientHttpRequestFactory\");\n  JVar requestFactoryParam=requestFactoryConstructor.param(requestFactoryClass,\"requestFactory\");\n  requestFactoryConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass).arg(requestFactoryParam));\n  List<? extends Element> enclosedElements=typeElement.getEnclosedElements();\n  List<ExecutableElement> methods=ElementFilter.methodsIn(enclosedElements);\n  for (  ExecutableElement method : methods) {\n    if (method.getParameters().size() == 0 && method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n      String methodName=method.getSimpleName().toString();\n      JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n      getRestTemplateMethod.annotate(Override.class);\n      getRestTemplateMethod.body()._return(holder.restTemplateField);\n      break;\n    }\n  }\n  for (  ExecutableElement method : methods) {\n    List<? extends VariableElement> parameters=method.getParameters();\n    if (parameters.size() == 1 && method.getReturnType().getKind() == TypeKind.VOID) {\n      VariableElement firstParameter=parameters.get(0);\n      if (firstParameter.asType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n        String methodName=method.getSimpleName().toString();\n        JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n        setRestTemplateMethod.annotate(Override.class);\n        JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n        setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 448,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 100,
        "startColumnNumber" : 4,
        "endLineNumber" : 100,
        "endColumnNumber" : 118
      },
      "nodeContext" : "JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.googlecode.androidannotations.processing.rest.RestImplementationHolder"
  }, {
    "nodeContext" : "holder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 102,
      "startColumnNumber" : 41,
      "endLineNumber" : 102,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 102,
        "startColumnNumber" : 41,
        "endLineNumber" : 102,
        "endColumnNumber" : 65
      },
      "nodeContext" : "holder.restTemplateField",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 102,
        "startColumnNumber" : 4,
        "endLineNumber" : 102,
        "endColumnNumber" : 66
      },
      "nodeContext" : "getRestTemplateMethod.body()._return(holder.restTemplateField)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 102,
        "startColumnNumber" : 4,
        "endLineNumber" : 102,
        "endColumnNumber" : 67
      },
      "nodeContext" : "getRestTemplateMethod.body()._return(holder.restTemplateField);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 342,
        "startLineNumber" : 98,
        "startColumnNumber" : 124,
        "endLineNumber" : 104,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  String methodName=method.getSimpleName().toString();\n  JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n  getRestTemplateMethod.annotate(Override.class);\n  getRestTemplateMethod.body()._return(holder.restTemplateField);\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 43,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 463,
        "startLineNumber" : 98,
        "startColumnNumber" : 3,
        "endLineNumber" : 104,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (method.getParameters().size() == 0 && method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n  String methodName=method.getSimpleName().toString();\n  JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n  getRestTemplateMethod.annotate(Override.class);\n  getRestTemplateMethod.body()._return(holder.restTemplateField);\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 60,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 472,
        "startLineNumber" : 97,
        "startColumnNumber" : 43,
        "endLineNumber" : 105,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (method.getParameters().size() == 0 && method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n    String methodName=method.getSimpleName().toString();\n    JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n    getRestTemplateMethod.annotate(Override.class);\n    getRestTemplateMethod.body()._return(holder.restTemplateField);\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 61,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 513,
        "startLineNumber" : 97,
        "startColumnNumber" : 2,
        "endLineNumber" : 105,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (ExecutableElement method : methods) {\n  if (method.getParameters().size() == 0 && method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n    String methodName=method.getSimpleName().toString();\n    JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n    getRestTemplateMethod.annotate(Override.class);\n    getRestTemplateMethod.body()._return(holder.restTemplateField);\n    break;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 67,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3504,
        "startLineNumber" : 57,
        "startColumnNumber" : 108,
        "endLineNumber" : 124,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RestImplementationHolder holder=restImplementationHolder.create(element);\n  TypeElement typeElement=(TypeElement)element;\n  holder.urlPrefix=typeElement.getAnnotation(Rest.class).value();\n  String interfaceName=typeElement.getQualifiedName().toString();\n  String implementationName=interfaceName + ModelConstants.GENERATION_SUFFIX;\n  holder.restImplementationClass=codeModel._class(JMod.PUBLIC,implementationName,ClassType.CLASS);\n  JClass interfaceClass=holder.refClass(interfaceName);\n  holder.restImplementationClass._implements(interfaceClass);\n  JClass restTemplateClass=holder.refClass(SPRING_REST_TEMPLATE_QUALIFIED_NAME);\n  holder.restTemplateField=holder.restImplementationClass.field(JMod.PRIVATE,restTemplateClass,\"restTemplate\");\n  JMethod defaultConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  defaultConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass));\n  JMethod restTemplateConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JVar restTemplateParam=restTemplateConstructor.param(restTemplateClass,\"restTemplate\");\n  restTemplateConstructor.body().assign(JExpr._this().ref(holder.restTemplateField),restTemplateParam);\n  JMethod requestFactoryConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JClass requestFactoryClass=holder.refClass(\"org.springframework.http.client.ClientHttpRequestFactory\");\n  JVar requestFactoryParam=requestFactoryConstructor.param(requestFactoryClass,\"requestFactory\");\n  requestFactoryConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass).arg(requestFactoryParam));\n  List<? extends Element> enclosedElements=typeElement.getEnclosedElements();\n  List<ExecutableElement> methods=ElementFilter.methodsIn(enclosedElements);\n  for (  ExecutableElement method : methods) {\n    if (method.getParameters().size() == 0 && method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n      String methodName=method.getSimpleName().toString();\n      JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n      getRestTemplateMethod.annotate(Override.class);\n      getRestTemplateMethod.body()._return(holder.restTemplateField);\n      break;\n    }\n  }\n  for (  ExecutableElement method : methods) {\n    List<? extends VariableElement> parameters=method.getParameters();\n    if (parameters.size() == 1 && method.getReturnType().getKind() == TypeKind.VOID) {\n      VariableElement firstParameter=parameters.get(0);\n      if (firstParameter.asType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n        String methodName=method.getSimpleName().toString();\n        JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n        setRestTemplateMethod.annotate(Override.class);\n        JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n        setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 428,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3622,
        "startLineNumber" : 56,
        "startColumnNumber" : 1,
        "endLineNumber" : 124,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void process(Element element,JCodeModel codeModel,EBeansHolder activitiesHolder) throws Exception {\n  RestImplementationHolder holder=restImplementationHolder.create(element);\n  TypeElement typeElement=(TypeElement)element;\n  holder.urlPrefix=typeElement.getAnnotation(Rest.class).value();\n  String interfaceName=typeElement.getQualifiedName().toString();\n  String implementationName=interfaceName + ModelConstants.GENERATION_SUFFIX;\n  holder.restImplementationClass=codeModel._class(JMod.PUBLIC,implementationName,ClassType.CLASS);\n  JClass interfaceClass=holder.refClass(interfaceName);\n  holder.restImplementationClass._implements(interfaceClass);\n  JClass restTemplateClass=holder.refClass(SPRING_REST_TEMPLATE_QUALIFIED_NAME);\n  holder.restTemplateField=holder.restImplementationClass.field(JMod.PRIVATE,restTemplateClass,\"restTemplate\");\n  JMethod defaultConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  defaultConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass));\n  JMethod restTemplateConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JVar restTemplateParam=restTemplateConstructor.param(restTemplateClass,\"restTemplate\");\n  restTemplateConstructor.body().assign(JExpr._this().ref(holder.restTemplateField),restTemplateParam);\n  JMethod requestFactoryConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JClass requestFactoryClass=holder.refClass(\"org.springframework.http.client.ClientHttpRequestFactory\");\n  JVar requestFactoryParam=requestFactoryConstructor.param(requestFactoryClass,\"requestFactory\");\n  requestFactoryConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass).arg(requestFactoryParam));\n  List<? extends Element> enclosedElements=typeElement.getEnclosedElements();\n  List<ExecutableElement> methods=ElementFilter.methodsIn(enclosedElements);\n  for (  ExecutableElement method : methods) {\n    if (method.getParameters().size() == 0 && method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n      String methodName=method.getSimpleName().toString();\n      JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n      getRestTemplateMethod.annotate(Override.class);\n      getRestTemplateMethod.body()._return(holder.restTemplateField);\n      break;\n    }\n  }\n  for (  ExecutableElement method : methods) {\n    List<? extends VariableElement> parameters=method.getParameters();\n    if (parameters.size() == 1 && method.getReturnType().getKind() == TypeKind.VOID) {\n      VariableElement firstParameter=parameters.get(0);\n      if (firstParameter.asType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n        String methodName=method.getSimpleName().toString();\n        JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n        setRestTemplateMethod.annotate(Override.class);\n        JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n        setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 448,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 102,
        "startColumnNumber" : 4,
        "endLineNumber" : 102,
        "endColumnNumber" : 67
      },
      "nodeContext" : "getRestTemplateMethod.body()._return(holder.restTemplateField);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.googlecode.androidannotations.processing.rest.RestImplementationHolder"
  }, {
    "nodeContext" : "holder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 113,
      "startColumnNumber" : 37,
      "endLineNumber" : 113,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 113,
        "startColumnNumber" : 37,
        "endLineNumber" : 113,
        "endColumnNumber" : 67
      },
      "nodeContext" : "holder.restImplementationClass",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 113,
        "startColumnNumber" : 37,
        "endLineNumber" : 113,
        "endColumnNumber" : 115
      },
      "nodeContext" : "holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 113,
        "startColumnNumber" : 13,
        "endLineNumber" : 113,
        "endColumnNumber" : 115
      },
      "nodeContext" : "setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 113,
        "startColumnNumber" : 5,
        "endLineNumber" : 113,
        "endColumnNumber" : 116
      },
      "nodeContext" : "JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 511,
        "startLineNumber" : 111,
        "startColumnNumber" : 88,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String methodName=method.getSimpleName().toString();\n  JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n  setRestTemplateMethod.annotate(Override.class);\n  JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n  setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 64,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 595,
        "startLineNumber" : 111,
        "startColumnNumber" : 4,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (firstParameter.asType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n  String methodName=method.getSimpleName().toString();\n  JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n  setRestTemplateMethod.annotate(Override.class);\n  JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n  setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 73,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 662,
        "startLineNumber" : 109,
        "startColumnNumber" : 84,
        "endLineNumber" : 121,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  VariableElement firstParameter=parameters.get(0);\n  if (firstParameter.asType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n    String methodName=method.getSimpleName().toString();\n    JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n    setRestTemplateMethod.annotate(Override.class);\n    JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n    setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 83,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 743,
        "startLineNumber" : 109,
        "startColumnNumber" : 3,
        "endLineNumber" : 121,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (parameters.size() == 1 && method.getReturnType().getKind() == TypeKind.VOID) {\n  VariableElement firstParameter=parameters.get(0);\n  if (firstParameter.asType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n    String methodName=method.getSimpleName().toString();\n    JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n    setRestTemplateMethod.annotate(Override.class);\n    JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n    setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n    break;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 99,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 824,
        "startLineNumber" : 107,
        "startColumnNumber" : 43,
        "endLineNumber" : 122,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<? extends VariableElement> parameters=method.getParameters();\n  if (parameters.size() == 1 && method.getReturnType().getKind() == TypeKind.VOID) {\n    VariableElement firstParameter=parameters.get(0);\n    if (firstParameter.asType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n      String methodName=method.getSimpleName().toString();\n      JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n      setRestTemplateMethod.annotate(Override.class);\n      JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n      setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n      break;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 112,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 865,
        "startLineNumber" : 107,
        "startColumnNumber" : 2,
        "endLineNumber" : 122,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (ExecutableElement method : methods) {\n  List<? extends VariableElement> parameters=method.getParameters();\n  if (parameters.size() == 1 && method.getReturnType().getKind() == TypeKind.VOID) {\n    VariableElement firstParameter=parameters.get(0);\n    if (firstParameter.asType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n      String methodName=method.getSimpleName().toString();\n      JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n      setRestTemplateMethod.annotate(Override.class);\n      JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n      setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n      break;\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 118,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3504,
        "startLineNumber" : 57,
        "startColumnNumber" : 108,
        "endLineNumber" : 124,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RestImplementationHolder holder=restImplementationHolder.create(element);\n  TypeElement typeElement=(TypeElement)element;\n  holder.urlPrefix=typeElement.getAnnotation(Rest.class).value();\n  String interfaceName=typeElement.getQualifiedName().toString();\n  String implementationName=interfaceName + ModelConstants.GENERATION_SUFFIX;\n  holder.restImplementationClass=codeModel._class(JMod.PUBLIC,implementationName,ClassType.CLASS);\n  JClass interfaceClass=holder.refClass(interfaceName);\n  holder.restImplementationClass._implements(interfaceClass);\n  JClass restTemplateClass=holder.refClass(SPRING_REST_TEMPLATE_QUALIFIED_NAME);\n  holder.restTemplateField=holder.restImplementationClass.field(JMod.PRIVATE,restTemplateClass,\"restTemplate\");\n  JMethod defaultConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  defaultConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass));\n  JMethod restTemplateConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JVar restTemplateParam=restTemplateConstructor.param(restTemplateClass,\"restTemplate\");\n  restTemplateConstructor.body().assign(JExpr._this().ref(holder.restTemplateField),restTemplateParam);\n  JMethod requestFactoryConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JClass requestFactoryClass=holder.refClass(\"org.springframework.http.client.ClientHttpRequestFactory\");\n  JVar requestFactoryParam=requestFactoryConstructor.param(requestFactoryClass,\"requestFactory\");\n  requestFactoryConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass).arg(requestFactoryParam));\n  List<? extends Element> enclosedElements=typeElement.getEnclosedElements();\n  List<ExecutableElement> methods=ElementFilter.methodsIn(enclosedElements);\n  for (  ExecutableElement method : methods) {\n    if (method.getParameters().size() == 0 && method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n      String methodName=method.getSimpleName().toString();\n      JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n      getRestTemplateMethod.annotate(Override.class);\n      getRestTemplateMethod.body()._return(holder.restTemplateField);\n      break;\n    }\n  }\n  for (  ExecutableElement method : methods) {\n    List<? extends VariableElement> parameters=method.getParameters();\n    if (parameters.size() == 1 && method.getReturnType().getKind() == TypeKind.VOID) {\n      VariableElement firstParameter=parameters.get(0);\n      if (firstParameter.asType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n        String methodName=method.getSimpleName().toString();\n        JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n        setRestTemplateMethod.annotate(Override.class);\n        JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n        setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 428,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3622,
        "startLineNumber" : 56,
        "startColumnNumber" : 1,
        "endLineNumber" : 124,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void process(Element element,JCodeModel codeModel,EBeansHolder activitiesHolder) throws Exception {\n  RestImplementationHolder holder=restImplementationHolder.create(element);\n  TypeElement typeElement=(TypeElement)element;\n  holder.urlPrefix=typeElement.getAnnotation(Rest.class).value();\n  String interfaceName=typeElement.getQualifiedName().toString();\n  String implementationName=interfaceName + ModelConstants.GENERATION_SUFFIX;\n  holder.restImplementationClass=codeModel._class(JMod.PUBLIC,implementationName,ClassType.CLASS);\n  JClass interfaceClass=holder.refClass(interfaceName);\n  holder.restImplementationClass._implements(interfaceClass);\n  JClass restTemplateClass=holder.refClass(SPRING_REST_TEMPLATE_QUALIFIED_NAME);\n  holder.restTemplateField=holder.restImplementationClass.field(JMod.PRIVATE,restTemplateClass,\"restTemplate\");\n  JMethod defaultConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  defaultConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass));\n  JMethod restTemplateConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JVar restTemplateParam=restTemplateConstructor.param(restTemplateClass,\"restTemplate\");\n  restTemplateConstructor.body().assign(JExpr._this().ref(holder.restTemplateField),restTemplateParam);\n  JMethod requestFactoryConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JClass requestFactoryClass=holder.refClass(\"org.springframework.http.client.ClientHttpRequestFactory\");\n  JVar requestFactoryParam=requestFactoryConstructor.param(requestFactoryClass,\"requestFactory\");\n  requestFactoryConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass).arg(requestFactoryParam));\n  List<? extends Element> enclosedElements=typeElement.getEnclosedElements();\n  List<ExecutableElement> methods=ElementFilter.methodsIn(enclosedElements);\n  for (  ExecutableElement method : methods) {\n    if (method.getParameters().size() == 0 && method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n      String methodName=method.getSimpleName().toString();\n      JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n      getRestTemplateMethod.annotate(Override.class);\n      getRestTemplateMethod.body()._return(holder.restTemplateField);\n      break;\n    }\n  }\n  for (  ExecutableElement method : methods) {\n    List<? extends VariableElement> parameters=method.getParameters();\n    if (parameters.size() == 1 && method.getReturnType().getKind() == TypeKind.VOID) {\n      VariableElement firstParameter=parameters.get(0);\n      if (firstParameter.asType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n        String methodName=method.getSimpleName().toString();\n        JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n        setRestTemplateMethod.annotate(Override.class);\n        JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n        setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 448,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 113,
        "startColumnNumber" : 5,
        "endLineNumber" : 113,
        "endColumnNumber" : 116
      },
      "nodeContext" : "JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.googlecode.androidannotations.processing.rest.RestImplementationHolder"
  }, {
    "nodeContext" : "holder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 118,
      "startColumnNumber" : 53,
      "endLineNumber" : 118,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 118,
        "startColumnNumber" : 53,
        "endLineNumber" : 118,
        "endColumnNumber" : 77
      },
      "nodeContext" : "holder.restTemplateField",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 118,
        "startColumnNumber" : 41,
        "endLineNumber" : 118,
        "endColumnNumber" : 78
      },
      "nodeContext" : "_this().ref(holder.restTemplateField)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 118,
        "startColumnNumber" : 5,
        "endLineNumber" : 118,
        "endColumnNumber" : 104
      },
      "nodeContext" : "setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 118,
        "startColumnNumber" : 5,
        "endLineNumber" : 118,
        "endColumnNumber" : 105
      },
      "nodeContext" : "setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 511,
        "startLineNumber" : 111,
        "startColumnNumber" : 88,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String methodName=method.getSimpleName().toString();\n  JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n  setRestTemplateMethod.annotate(Override.class);\n  JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n  setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 64,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 595,
        "startLineNumber" : 111,
        "startColumnNumber" : 4,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (firstParameter.asType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n  String methodName=method.getSimpleName().toString();\n  JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n  setRestTemplateMethod.annotate(Override.class);\n  JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n  setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 73,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 662,
        "startLineNumber" : 109,
        "startColumnNumber" : 84,
        "endLineNumber" : 121,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  VariableElement firstParameter=parameters.get(0);\n  if (firstParameter.asType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n    String methodName=method.getSimpleName().toString();\n    JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n    setRestTemplateMethod.annotate(Override.class);\n    JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n    setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 83,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 743,
        "startLineNumber" : 109,
        "startColumnNumber" : 3,
        "endLineNumber" : 121,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (parameters.size() == 1 && method.getReturnType().getKind() == TypeKind.VOID) {\n  VariableElement firstParameter=parameters.get(0);\n  if (firstParameter.asType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n    String methodName=method.getSimpleName().toString();\n    JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n    setRestTemplateMethod.annotate(Override.class);\n    JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n    setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n    break;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 99,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 824,
        "startLineNumber" : 107,
        "startColumnNumber" : 43,
        "endLineNumber" : 122,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<? extends VariableElement> parameters=method.getParameters();\n  if (parameters.size() == 1 && method.getReturnType().getKind() == TypeKind.VOID) {\n    VariableElement firstParameter=parameters.get(0);\n    if (firstParameter.asType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n      String methodName=method.getSimpleName().toString();\n      JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n      setRestTemplateMethod.annotate(Override.class);\n      JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n      setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n      break;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 112,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 865,
        "startLineNumber" : 107,
        "startColumnNumber" : 2,
        "endLineNumber" : 122,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (ExecutableElement method : methods) {\n  List<? extends VariableElement> parameters=method.getParameters();\n  if (parameters.size() == 1 && method.getReturnType().getKind() == TypeKind.VOID) {\n    VariableElement firstParameter=parameters.get(0);\n    if (firstParameter.asType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n      String methodName=method.getSimpleName().toString();\n      JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n      setRestTemplateMethod.annotate(Override.class);\n      JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n      setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n      break;\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 118,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3504,
        "startLineNumber" : 57,
        "startColumnNumber" : 108,
        "endLineNumber" : 124,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RestImplementationHolder holder=restImplementationHolder.create(element);\n  TypeElement typeElement=(TypeElement)element;\n  holder.urlPrefix=typeElement.getAnnotation(Rest.class).value();\n  String interfaceName=typeElement.getQualifiedName().toString();\n  String implementationName=interfaceName + ModelConstants.GENERATION_SUFFIX;\n  holder.restImplementationClass=codeModel._class(JMod.PUBLIC,implementationName,ClassType.CLASS);\n  JClass interfaceClass=holder.refClass(interfaceName);\n  holder.restImplementationClass._implements(interfaceClass);\n  JClass restTemplateClass=holder.refClass(SPRING_REST_TEMPLATE_QUALIFIED_NAME);\n  holder.restTemplateField=holder.restImplementationClass.field(JMod.PRIVATE,restTemplateClass,\"restTemplate\");\n  JMethod defaultConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  defaultConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass));\n  JMethod restTemplateConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JVar restTemplateParam=restTemplateConstructor.param(restTemplateClass,\"restTemplate\");\n  restTemplateConstructor.body().assign(JExpr._this().ref(holder.restTemplateField),restTemplateParam);\n  JMethod requestFactoryConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JClass requestFactoryClass=holder.refClass(\"org.springframework.http.client.ClientHttpRequestFactory\");\n  JVar requestFactoryParam=requestFactoryConstructor.param(requestFactoryClass,\"requestFactory\");\n  requestFactoryConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass).arg(requestFactoryParam));\n  List<? extends Element> enclosedElements=typeElement.getEnclosedElements();\n  List<ExecutableElement> methods=ElementFilter.methodsIn(enclosedElements);\n  for (  ExecutableElement method : methods) {\n    if (method.getParameters().size() == 0 && method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n      String methodName=method.getSimpleName().toString();\n      JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n      getRestTemplateMethod.annotate(Override.class);\n      getRestTemplateMethod.body()._return(holder.restTemplateField);\n      break;\n    }\n  }\n  for (  ExecutableElement method : methods) {\n    List<? extends VariableElement> parameters=method.getParameters();\n    if (parameters.size() == 1 && method.getReturnType().getKind() == TypeKind.VOID) {\n      VariableElement firstParameter=parameters.get(0);\n      if (firstParameter.asType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n        String methodName=method.getSimpleName().toString();\n        JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n        setRestTemplateMethod.annotate(Override.class);\n        JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n        setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 428,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3622,
        "startLineNumber" : 56,
        "startColumnNumber" : 1,
        "endLineNumber" : 124,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void process(Element element,JCodeModel codeModel,EBeansHolder activitiesHolder) throws Exception {\n  RestImplementationHolder holder=restImplementationHolder.create(element);\n  TypeElement typeElement=(TypeElement)element;\n  holder.urlPrefix=typeElement.getAnnotation(Rest.class).value();\n  String interfaceName=typeElement.getQualifiedName().toString();\n  String implementationName=interfaceName + ModelConstants.GENERATION_SUFFIX;\n  holder.restImplementationClass=codeModel._class(JMod.PUBLIC,implementationName,ClassType.CLASS);\n  JClass interfaceClass=holder.refClass(interfaceName);\n  holder.restImplementationClass._implements(interfaceClass);\n  JClass restTemplateClass=holder.refClass(SPRING_REST_TEMPLATE_QUALIFIED_NAME);\n  holder.restTemplateField=holder.restImplementationClass.field(JMod.PRIVATE,restTemplateClass,\"restTemplate\");\n  JMethod defaultConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  defaultConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass));\n  JMethod restTemplateConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JVar restTemplateParam=restTemplateConstructor.param(restTemplateClass,\"restTemplate\");\n  restTemplateConstructor.body().assign(JExpr._this().ref(holder.restTemplateField),restTemplateParam);\n  JMethod requestFactoryConstructor=holder.restImplementationClass.constructor(JMod.PUBLIC);\n  JClass requestFactoryClass=holder.refClass(\"org.springframework.http.client.ClientHttpRequestFactory\");\n  JVar requestFactoryParam=requestFactoryConstructor.param(requestFactoryClass,\"requestFactory\");\n  requestFactoryConstructor.body().assign(holder.restTemplateField,JExpr._new(restTemplateClass).arg(requestFactoryParam));\n  List<? extends Element> enclosedElements=typeElement.getEnclosedElements();\n  List<ExecutableElement> methods=ElementFilter.methodsIn(enclosedElements);\n  for (  ExecutableElement method : methods) {\n    if (method.getParameters().size() == 0 && method.getReturnType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n      String methodName=method.getSimpleName().toString();\n      JMethod getRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,restTemplateClass,methodName);\n      getRestTemplateMethod.annotate(Override.class);\n      getRestTemplateMethod.body()._return(holder.restTemplateField);\n      break;\n    }\n  }\n  for (  ExecutableElement method : methods) {\n    List<? extends VariableElement> parameters=method.getParameters();\n    if (parameters.size() == 1 && method.getReturnType().getKind() == TypeKind.VOID) {\n      VariableElement firstParameter=parameters.get(0);\n      if (firstParameter.asType().toString().equals(SPRING_REST_TEMPLATE_QUALIFIED_NAME)) {\n        String methodName=method.getSimpleName().toString();\n        JMethod setRestTemplateMethod=holder.restImplementationClass.method(JMod.PUBLIC,codeModel.VOID,methodName);\n        setRestTemplateMethod.annotate(Override.class);\n        JVar restTemplateSetterParam=setRestTemplateMethod.param(restTemplateClass,firstParameter.getSimpleName().toString());\n        setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 448,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 118,
        "startColumnNumber" : 5,
        "endLineNumber" : 118,
        "endColumnNumber" : 105
      },
      "nodeContext" : "setRestTemplateMethod.body().assign(_this().ref(holder.restTemplateField),restTemplateSetterParam);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.googlecode.androidannotations.processing.rest.RestImplementationHolder"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 63,
    "startColumnNumber" : 2,
    "endLineNumber" : 63,
    "endColumnNumber" : 8
  }, {
    "charLength" : 6,
    "startLineNumber" : 71,
    "startColumnNumber" : 2,
    "endLineNumber" : 71,
    "endColumnNumber" : 8
  }, {
    "charLength" : 6,
    "startLineNumber" : 72,
    "startColumnNumber" : 26,
    "endLineNumber" : 72,
    "endColumnNumber" : 32
  }, {
    "charLength" : 6,
    "startLineNumber" : 73,
    "startColumnNumber" : 2,
    "endLineNumber" : 73,
    "endColumnNumber" : 8
  }, {
    "charLength" : 6,
    "startLineNumber" : 76,
    "startColumnNumber" : 29,
    "endLineNumber" : 76,
    "endColumnNumber" : 35
  }, {
    "charLength" : 6,
    "startLineNumber" : 77,
    "startColumnNumber" : 2,
    "endLineNumber" : 77,
    "endColumnNumber" : 8
  }, {
    "charLength" : 6,
    "startLineNumber" : 77,
    "startColumnNumber" : 29,
    "endLineNumber" : 77,
    "endColumnNumber" : 35
  }, {
    "charLength" : 6,
    "startLineNumber" : 80,
    "startColumnNumber" : 31,
    "endLineNumber" : 80,
    "endColumnNumber" : 37
  }, {
    "charLength" : 6,
    "startLineNumber" : 81,
    "startColumnNumber" : 35,
    "endLineNumber" : 81,
    "endColumnNumber" : 41
  }, {
    "charLength" : 6,
    "startLineNumber" : 84,
    "startColumnNumber" : 36,
    "endLineNumber" : 84,
    "endColumnNumber" : 42
  }, {
    "charLength" : 6,
    "startLineNumber" : 86,
    "startColumnNumber" : 58,
    "endLineNumber" : 86,
    "endColumnNumber" : 64
  }, {
    "charLength" : 6,
    "startLineNumber" : 89,
    "startColumnNumber" : 38,
    "endLineNumber" : 89,
    "endColumnNumber" : 44
  }, {
    "charLength" : 6,
    "startLineNumber" : 90,
    "startColumnNumber" : 31,
    "endLineNumber" : 90,
    "endColumnNumber" : 37
  }, {
    "charLength" : 6,
    "startLineNumber" : 92,
    "startColumnNumber" : 42,
    "endLineNumber" : 92,
    "endColumnNumber" : 48
  }, {
    "charLength" : 6,
    "startLineNumber" : 100,
    "startColumnNumber" : 36,
    "endLineNumber" : 100,
    "endColumnNumber" : 42
  }, {
    "charLength" : 6,
    "startLineNumber" : 102,
    "startColumnNumber" : 41,
    "endLineNumber" : 102,
    "endColumnNumber" : 47
  }, {
    "charLength" : 6,
    "startLineNumber" : 113,
    "startColumnNumber" : 37,
    "endLineNumber" : 113,
    "endColumnNumber" : 43
  }, {
    "charLength" : 6,
    "startLineNumber" : 118,
    "startColumnNumber" : 53,
    "endLineNumber" : 118,
    "endColumnNumber" : 59
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 17,
    "layout" : 8
  }, {
    "firstKey" : 15,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 16,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 16,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 16,
    "secondKey" : 3,
    "layout" : 10
  }, {
    "firstKey" : 16,
    "secondKey" : 4,
    "layout" : 10
  }, {
    "firstKey" : 16,
    "secondKey" : 5,
    "layout" : 10
  }, {
    "firstKey" : 16,
    "secondKey" : 6,
    "layout" : 10
  }, {
    "firstKey" : 16,
    "secondKey" : 7,
    "layout" : 10
  }, {
    "firstKey" : 16,
    "secondKey" : 8,
    "layout" : 10
  }, {
    "firstKey" : 16,
    "secondKey" : 9,
    "layout" : 10
  }, {
    "firstKey" : 16,
    "secondKey" : 10,
    "layout" : 10
  }, {
    "firstKey" : 16,
    "secondKey" : 11,
    "layout" : 10
  }, {
    "firstKey" : 16,
    "secondKey" : 12,
    "layout" : 10
  }, {
    "firstKey" : 16,
    "secondKey" : 13,
    "layout" : 10
  }, {
    "firstKey" : 16,
    "secondKey" : 14,
    "layout" : 10
  }, {
    "firstKey" : 16,
    "secondKey" : 15,
    "layout" : 10
  }, {
    "firstKey" : 16,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 17,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 17,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 17,
    "secondKey" : 3,
    "layout" : 10
  }, {
    "firstKey" : 17,
    "secondKey" : 4,
    "layout" : 10
  }, {
    "firstKey" : 17,
    "secondKey" : 5,
    "layout" : 10
  }, {
    "firstKey" : 17,
    "secondKey" : 6,
    "layout" : 10
  }, {
    "firstKey" : 17,
    "secondKey" : 7,
    "layout" : 10
  }, {
    "firstKey" : 17,
    "secondKey" : 8,
    "layout" : 10
  }, {
    "firstKey" : 17,
    "secondKey" : 9,
    "layout" : 10
  }, {
    "firstKey" : 17,
    "secondKey" : 10,
    "layout" : 10
  }, {
    "firstKey" : 17,
    "secondKey" : 11,
    "layout" : 10
  }, {
    "firstKey" : 17,
    "secondKey" : 12,
    "layout" : 10
  }, {
    "firstKey" : 17,
    "secondKey" : 13,
    "layout" : 10
  }, {
    "firstKey" : 17,
    "secondKey" : 14,
    "layout" : 10
  }, {
    "firstKey" : 17,
    "secondKey" : 15,
    "layout" : 10
  }, {
    "firstKey" : 17,
    "secondKey" : 16,
    "layout" : 4
  } ]
}