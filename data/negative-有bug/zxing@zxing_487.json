{
  "id" : 487,
  "expression" : "i >= 0 && !image.get(centerJ,i)",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/core/src/main/java/com/google/zxing/qrcode/detector/AlignmentPatternFinder.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i >= 0 && !image.get(centerJ,i)",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 32,
      "startLineNumber" : 211,
      "startColumnNumber" : 11,
      "endLineNumber" : 211,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 10,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 211,
        "startColumnNumber" : 11,
        "endLineNumber" : 211,
        "endColumnNumber" : 72
      },
      "nodeContext" : "i >= 0 && !image.get(centerJ,i) && stateCount[0] <= maxCount",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 211,
        "startColumnNumber" : 4,
        "endLineNumber" : 214,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (i >= 0 && !image.get(centerJ,i) && stateCount[0] <= maxCount) {\n  stateCount[0]++;\n  i--;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 26,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1466,
        "startLineNumber" : 192,
        "startColumnNumber" : 35,
        "endLineNumber" : 242,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  BitMatrix image=this.image;\n  int maxI=image.getHeight();\n  int[] stateCount=crossCheckStateCount;\n  stateCount[0]=0;\n  stateCount[1]=0;\n  stateCount[2]=0;\n  int i=startI;\n  while (i >= 0 && image.get(centerJ,i) && stateCount[1] <= maxCount) {\n    stateCount[1]++;\n    i--;\n  }\n  if (i < 0 || stateCount[1] > maxCount) {\n    return Float.NaN;\n  }\n  while (i >= 0 && !image.get(centerJ,i) && stateCount[0] <= maxCount) {\n    stateCount[0]++;\n    i--;\n  }\n  if (stateCount[0] > maxCount) {\n    return Float.NaN;\n  }\n  i=startI + 1;\n  while (i < maxI && image.get(centerJ,i) && stateCount[1] <= maxCount) {\n    stateCount[1]++;\n    i++;\n  }\n  if (i == maxI || stateCount[1] > maxCount) {\n    return Float.NaN;\n  }\n  while (i < maxI && !image.get(centerJ,i) && stateCount[2] <= maxCount) {\n    stateCount[2]++;\n    i++;\n  }\n  if (stateCount[2] > maxCount) {\n    return Float.NaN;\n  }\n  int stateCountTotal=stateCount[0] + stateCount[1] + stateCount[2];\n  if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= 2 * originalStateCountTotal) {\n    return Float.NaN;\n  }\n  return foundPatternCross(stateCount) ? centerFromEnd(stateCount,i) : Float.NaN;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 250,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2222,
        "startLineNumber" : 180,
        "startColumnNumber" : 2,
        "endLineNumber" : 242,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * <p>After a horizontal scan finds a potential alignment pattern, this method \"cross-checks\" by scanning down vertically through the center of the possible alignment pattern to see if the same proportion is detected.</p>\n * @param startI row where an alignment pattern was detected\n * @param centerJ center of the section that appears to cross an alignment pattern\n * @param maxCount maximum reasonable number of modules that should beobserved in any reading state, based on the results of the horizontal scan\n * @return vertical center of alignment pattern, or {@link Float#NaN} if not found\n */\nprivate float crossCheckVertical(int startI,int centerJ,int maxCount,int originalStateCountTotal){\n  BitMatrix image=this.image;\n  int maxI=image.getHeight();\n  int[] stateCount=crossCheckStateCount;\n  stateCount[0]=0;\n  stateCount[1]=0;\n  stateCount[2]=0;\n  int i=startI;\n  while (i >= 0 && image.get(centerJ,i) && stateCount[1] <= maxCount) {\n    stateCount[1]++;\n    i--;\n  }\n  if (i < 0 || stateCount[1] > maxCount) {\n    return Float.NaN;\n  }\n  while (i >= 0 && !image.get(centerJ,i) && stateCount[0] <= maxCount) {\n    stateCount[0]++;\n    i--;\n  }\n  if (stateCount[0] > maxCount) {\n    return Float.NaN;\n  }\n  i=startI + 1;\n  while (i < maxI && image.get(centerJ,i) && stateCount[1] <= maxCount) {\n    stateCount[1]++;\n    i++;\n  }\n  if (i == maxI || stateCount[1] > maxCount) {\n    return Float.NaN;\n  }\n  while (i < maxI && !image.get(centerJ,i) && stateCount[2] <= maxCount) {\n    stateCount[2]++;\n    i++;\n  }\n  if (stateCount[2] > maxCount) {\n    return Float.NaN;\n  }\n  int stateCountTotal=stateCount[0] + stateCount[1] + stateCount[2];\n  if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= 2 * originalStateCountTotal) {\n    return Float.NaN;\n  }\n  return foundPatternCross(stateCount) ? centerFromEnd(stateCount,i) : Float.NaN;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 267,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 211,
        "startColumnNumber" : 11,
        "endLineNumber" : 211,
        "endColumnNumber" : 72
      },
      "nodeContext" : "i >= 0 && !image.get(centerJ,i) && stateCount[0] <= maxCount",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 8,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 32,
    "startLineNumber" : 211,
    "startColumnNumber" : 11,
    "endLineNumber" : 211,
    "endColumnNumber" : 43
  } ],
  "layoutRelationDataList" : [ ]
}