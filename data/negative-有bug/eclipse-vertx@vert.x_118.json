{
  "id" : 118,
  "expression" : "subStr",
  "projectName" : "eclipse-vertx@vert.x",
  "commitID" : "665e20a715caff0cbaa72adfd1bb374c543281f0",
  "filePath" : "/src/main/java/io/vertx/core/impl/launcher/commands/FileSelector.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "subStr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 165,
      "startColumnNumber" : 29,
      "endLineNumber" : 165,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 165,
        "startColumnNumber" : 15,
        "endLineNumber" : 165,
        "endColumnNumber" : 53
      },
      "nodeContext" : "match(subPat,subStr,isCaseSensitive)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 165,
        "startColumnNumber" : 14,
        "endLineNumber" : 165,
        "endColumnNumber" : 53
      },
      "nodeContext" : "!match(subPat,subStr,isCaseSensitive)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 165,
        "startColumnNumber" : 10,
        "endLineNumber" : 167,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (!match(subPat,subStr,isCaseSensitive)) {\n  continue strLoop;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 222,
        "startLineNumber" : 162,
        "startColumnNumber" : 44,
        "endLineNumber" : 168,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String subPat=patDirs[patIdxStart + j + 1];\n  String subStr=strDirs[strIdxStart + i + j];\n  if (!match(subPat,subStr,isCaseSensitive)) {\n    continue strLoop;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 33,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 258,
        "startLineNumber" : 162,
        "startColumnNumber" : 8,
        "endLineNumber" : 168,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int j=0; j < patLength; j++) {\n  String subPat=patDirs[patIdxStart + j + 1];\n  String subStr=strDirs[strIdxStart + i + j];\n  if (!match(subPat,subStr,isCaseSensitive)) {\n    continue strLoop;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 44,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 328,
        "startLineNumber" : 161,
        "startColumnNumber" : 55,
        "endLineNumber" : 172,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  for (int j=0; j < patLength; j++) {\n    String subPat=patDirs[patIdxStart + j + 1];\n    String subStr=strDirs[strIdxStart + i + j];\n    if (!match(subPat,subStr,isCaseSensitive)) {\n      continue strLoop;\n    }\n  }\n  foundIdx=strIdxStart + i;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 52,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LabeledStatement,body]",
      "nodePosition" : {
        "charLength" : 377,
        "startLineNumber" : 161,
        "startColumnNumber" : 6,
        "endLineNumber" : 172,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i <= strLength - patLength; i++) {\n  for (int j=0; j < patLength; j++) {\n    String subPat=patDirs[patIdxStart + j + 1];\n    String subStr=strDirs[strIdxStart + i + j];\n    if (!match(subPat,subStr,isCaseSensitive)) {\n      continue strLoop;\n    }\n  }\n  foundIdx=strIdxStart + i;\n  break;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 65,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 392,
        "startLineNumber" : 160,
        "startColumnNumber" : 6,
        "endLineNumber" : 172,
        "endColumnNumber" : 7
      },
      "nodeContext" : "strLoop: for (int i=0; i <= strLength - patLength; i++) {\n  for (int j=0; j < patLength; j++) {\n    String subPat=patDirs[patIdxStart + j + 1];\n    String subStr=strDirs[strIdxStart + i + j];\n    if (!match(subPat,subStr,isCaseSensitive)) {\n      continue strLoop;\n    }\n  }\n  foundIdx=strIdxStart + i;\n  break;\n}\n",
      "nodeType" : "LabeledStatement",
      "astNodeNumber" : 67,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1093,
        "startLineNumber" : 142,
        "startColumnNumber" : 65,
        "endLineNumber" : 180,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int patIdxTmp=-1;\n  for (int i=patIdxStart + 1; i <= patIdxEnd; i++) {\n    if (patDirs[i].equals(\"**\")) {\n      patIdxTmp=i;\n      break;\n    }\n  }\n  if (patIdxTmp == patIdxStart + 1) {\n    patIdxStart++;\n    continue;\n  }\n  int patLength=(patIdxTmp - patIdxStart - 1);\n  int strLength=(strIdxEnd - strIdxStart + 1);\n  int foundIdx=-1;\n  strLoop:   for (int i=0; i <= strLength - patLength; i++) {\n    for (int j=0; j < patLength; j++) {\n      String subPat=patDirs[patIdxStart + j + 1];\n      String subStr=strDirs[strIdxStart + i + j];\n      if (!match(subPat,subStr,isCaseSensitive)) {\n        continue strLoop;\n      }\n    }\n    foundIdx=strIdxStart + i;\n    break;\n  }\n  if (foundIdx == -1) {\n    return false;\n  }\n  patIdxStart=patIdxTmp;\n  strIdxStart=foundIdx + patLength;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 155,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1154,
        "startLineNumber" : 142,
        "startColumnNumber" : 4,
        "endLineNumber" : 180,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (patIdxStart != patIdxEnd && strIdxStart <= strIdxEnd) {\n  int patIdxTmp=-1;\n  for (int i=patIdxStart + 1; i <= patIdxEnd; i++) {\n    if (patDirs[i].equals(\"**\")) {\n      patIdxTmp=i;\n      break;\n    }\n  }\n  if (patIdxTmp == patIdxStart + 1) {\n    patIdxStart++;\n    continue;\n  }\n  int patLength=(patIdxTmp - patIdxStart - 1);\n  int strLength=(strIdxEnd - strIdxStart + 1);\n  int foundIdx=-1;\n  strLoop:   for (int i=0; i <= strLength - patLength; i++) {\n    for (int j=0; j < patLength; j++) {\n      String subPat=patDirs[patIdxStart + j + 1];\n      String subStr=strDirs[strIdxStart + i + j];\n      if (!match(subPat,subStr,isCaseSensitive)) {\n        continue strLoop;\n      }\n    }\n    foundIdx=strIdxStart + i;\n    break;\n  }\n  if (foundIdx == -1) {\n    return false;\n  }\n  patIdxStart=patIdxTmp;\n  strIdxStart=foundIdx + patLength;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 163,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2696,
        "startLineNumber" : 87,
        "startColumnNumber" : 103,
        "endLineNumber" : 189,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int patIdxStart=0;\n  int patIdxEnd=patDirs.length - 1;\n  int strIdxStart=0;\n  int strIdxEnd=strDirs.length - 1;\n  while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {\n    String patDir=patDirs[patIdxStart];\n    if (patDir.equals(\"**\")) {\n      break;\n    }\n    if (!match(patDir,strDirs[strIdxStart],isCaseSensitive)) {\n      return false;\n    }\n    patIdxStart++;\n    strIdxStart++;\n  }\n  if (strIdxStart > strIdxEnd) {\n    for (int i=patIdxStart; i <= patIdxEnd; i++) {\n      if (!patDirs[i].equals(\"**\")) {\n        return false;\n      }\n    }\n    return true;\n  }\n else {\n    if (patIdxStart > patIdxEnd) {\n      return false;\n    }\n  }\n  while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {\n    String patDir=patDirs[patIdxEnd];\n    if (patDir.equals(\"**\")) {\n      break;\n    }\n    if (!match(patDir,strDirs[strIdxEnd],isCaseSensitive)) {\n      return false;\n    }\n    patIdxEnd--;\n    strIdxEnd--;\n  }\n  if (strIdxStart > strIdxEnd) {\n    for (int i=patIdxStart; i <= patIdxEnd; i++) {\n      if (!patDirs[i].equals(\"**\")) {\n        return false;\n      }\n    }\n    return true;\n  }\n  while (patIdxStart != patIdxEnd && strIdxStart <= strIdxEnd) {\n    int patIdxTmp=-1;\n    for (int i=patIdxStart + 1; i <= patIdxEnd; i++) {\n      if (patDirs[i].equals(\"**\")) {\n        patIdxTmp=i;\n        break;\n      }\n    }\n    if (patIdxTmp == patIdxStart + 1) {\n      patIdxStart++;\n      continue;\n    }\n    int patLength=(patIdxTmp - patIdxStart - 1);\n    int strLength=(strIdxEnd - strIdxStart + 1);\n    int foundIdx=-1;\n    strLoop:     for (int i=0; i <= strLength - patLength; i++) {\n      for (int j=0; j < patLength; j++) {\n        String subPat=patDirs[patIdxStart + j + 1];\n        String subStr=strDirs[strIdxStart + i + j];\n        if (!match(subPat,subStr,isCaseSensitive)) {\n          continue strLoop;\n        }\n      }\n      foundIdx=strIdxStart + i;\n      break;\n    }\n    if (foundIdx == -1) {\n      return false;\n    }\n    patIdxStart=patIdxTmp;\n    strIdxStart=foundIdx + patLength;\n  }\n  for (int i=patIdxStart; i <= patIdxEnd; i++) {\n    if (!patDirs[i].equals(\"**\")) {\n      return false;\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 369,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2797,
        "startLineNumber" : 87,
        "startColumnNumber" : 2,
        "endLineNumber" : 189,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static boolean matchPathPattern(String[] patDirs,String[] strDirs,boolean isCaseSensitive){\n  int patIdxStart=0;\n  int patIdxEnd=patDirs.length - 1;\n  int strIdxStart=0;\n  int strIdxEnd=strDirs.length - 1;\n  while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {\n    String patDir=patDirs[patIdxStart];\n    if (patDir.equals(\"**\")) {\n      break;\n    }\n    if (!match(patDir,strDirs[strIdxStart],isCaseSensitive)) {\n      return false;\n    }\n    patIdxStart++;\n    strIdxStart++;\n  }\n  if (strIdxStart > strIdxEnd) {\n    for (int i=patIdxStart; i <= patIdxEnd; i++) {\n      if (!patDirs[i].equals(\"**\")) {\n        return false;\n      }\n    }\n    return true;\n  }\n else {\n    if (patIdxStart > patIdxEnd) {\n      return false;\n    }\n  }\n  while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {\n    String patDir=patDirs[patIdxEnd];\n    if (patDir.equals(\"**\")) {\n      break;\n    }\n    if (!match(patDir,strDirs[strIdxEnd],isCaseSensitive)) {\n      return false;\n    }\n    patIdxEnd--;\n    strIdxEnd--;\n  }\n  if (strIdxStart > strIdxEnd) {\n    for (int i=patIdxStart; i <= patIdxEnd; i++) {\n      if (!patDirs[i].equals(\"**\")) {\n        return false;\n      }\n    }\n    return true;\n  }\n  while (patIdxStart != patIdxEnd && strIdxStart <= strIdxEnd) {\n    int patIdxTmp=-1;\n    for (int i=patIdxStart + 1; i <= patIdxEnd; i++) {\n      if (patDirs[i].equals(\"**\")) {\n        patIdxTmp=i;\n        break;\n      }\n    }\n    if (patIdxTmp == patIdxStart + 1) {\n      patIdxStart++;\n      continue;\n    }\n    int patLength=(patIdxTmp - patIdxStart - 1);\n    int strLength=(strIdxEnd - strIdxStart + 1);\n    int foundIdx=-1;\n    strLoop:     for (int i=0; i <= strLength - patLength; i++) {\n      for (int j=0; j < patLength; j++) {\n        String subPat=patDirs[patIdxStart + j + 1];\n        String subStr=strDirs[strIdxStart + i + j];\n        if (!match(subPat,subStr,isCaseSensitive)) {\n          continue strLoop;\n        }\n      }\n      foundIdx=strIdxStart + i;\n      break;\n    }\n    if (foundIdx == -1) {\n      return false;\n    }\n    patIdxStart=patIdxTmp;\n    strIdxStart=foundIdx + patLength;\n  }\n  for (int i=patIdxStart; i <= patIdxEnd; i++) {\n    if (!patDirs[i].equals(\"**\")) {\n      return false;\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 389,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 165,
        "startColumnNumber" : 14,
        "endLineNumber" : 165,
        "endColumnNumber" : 53
      },
      "nodeContext" : "!match(subPat,subStr,isCaseSensitive)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 165,
    "startColumnNumber" : 29,
    "endLineNumber" : 165,
    "endColumnNumber" : 35
  } ],
  "layoutRelationDataList" : [ ]
}