{
  "id" : 105,
  "expression" : "field",
  "projectName" : "quarkusio@quarkus",
  "commitID" : "2862b200ee266332150317795b9fe315be51d68b",
  "filePath" : "/core/deployment/src/main/java/io/quarkus/deployment/steps/ReflectiveHierarchyStep.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "field",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 230,
      "startColumnNumber" : 76,
      "endLineNumber" : 230,
      "endColumnNumber" : 81
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 230,
        "startColumnNumber" : 16,
        "endLineNumber" : 230,
        "endColumnNumber" : 82
      },
      "nodeContext" : "reflectiveHierarchyBuildItem.getIgnoreFieldPredicate().test(field)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 406,
        "startLineNumber" : 230,
        "startColumnNumber" : 16,
        "endLineNumber" : 234,
        "endColumnNumber" : 87
      },
      "nodeContext" : "reflectiveHierarchyBuildItem.getIgnoreFieldPredicate().test(field) || Modifier.isStatic(field.flags()) || field.name().startsWith(\"this$\")|| field.name().startsWith(\"val$\")",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 25,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 453,
        "startLineNumber" : 230,
        "startColumnNumber" : 12,
        "endLineNumber" : 236,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (reflectiveHierarchyBuildItem.getIgnoreFieldPredicate().test(field) || Modifier.isStatic(field.flags()) || field.name().startsWith(\"this$\")|| field.name().startsWith(\"val$\")) {\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 28,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 880,
        "startLineNumber" : 229,
        "startColumnNumber" : 46,
        "endLineNumber" : 242,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (reflectiveHierarchyBuildItem.getIgnoreFieldPredicate().test(field) || Modifier.isStatic(field.flags()) || field.name().startsWith(\"this$\")|| field.name().startsWith(\"val$\")) {\n    continue;\n  }\n  final Type fieldType=getFieldType(combinedIndexBuildItem,initialName,info,field);\n  visits.addLast(() -> addReflectiveHierarchy(combinedIndexBuildItem,reflectiveHierarchyBuildItem,source,fieldType,processedReflectiveHierarchies,unindexedClasses,finalFieldsWritable,reflectiveClass,visits));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 57,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 918,
        "startLineNumber" : 229,
        "startColumnNumber" : 8,
        "endLineNumber" : 242,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (FieldInfo field : info.fields()) {\n  if (reflectiveHierarchyBuildItem.getIgnoreFieldPredicate().test(field) || Modifier.isStatic(field.flags()) || field.name().startsWith(\"this$\")|| field.name().startsWith(\"val$\")) {\n    continue;\n  }\n  final Type fieldType=getFieldType(combinedIndexBuildItem,initialName,info,field);\n  visits.addLast(() -> addReflectiveHierarchy(combinedIndexBuildItem,reflectiveHierarchyBuildItem,source,fieldType,processedReflectiveHierarchies,unindexedClasses,finalFieldsWritable,reflectiveClass,visits));\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 65,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3085,
        "startLineNumber" : 190,
        "startColumnNumber" : 54,
        "endLineNumber" : 256,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (name == null) {\n    return;\n  }\n  if (reflectiveHierarchyBuildItem.getIgnoreTypePredicate().test(name)) {\n    return;\n  }\n  ClassInfo info=(reflectiveHierarchyBuildItem.getIndex() != null ? reflectiveHierarchyBuildItem.getIndex() : combinedIndexBuildItem.getIndex()).getClassByName(name);\n  if (info == null) {\n    unindexedClasses.putIfAbsent(name,new TreeSet<>());\n    unindexedClasses.get(name).add(source);\n  }\n  if (processedReflectiveHierarchies.contains(name)) {\n    return;\n  }\n  reflectiveClass.produce(ReflectiveClassBuildItem.builder(name.toString()).methods(true).fields(true).finalFieldsWritable(doFinalFieldsNeedToBeWritable(info,finalFieldsWritable)).serialization(reflectiveHierarchyBuildItem.isSerialization()).build());\n  processedReflectiveHierarchies.add(name);\n  if (info == null) {\n    return;\n  }\n  visits.addLast(() -> addClassTypeHierarchy(combinedIndexBuildItem,reflectiveHierarchyBuildItem,source,info.superName(),initialName,processedReflectiveHierarchies,unindexedClasses,finalFieldsWritable,reflectiveClass,visits));\n  for (  FieldInfo field : info.fields()) {\n    if (reflectiveHierarchyBuildItem.getIgnoreFieldPredicate().test(field) || Modifier.isStatic(field.flags()) || field.name().startsWith(\"this$\")|| field.name().startsWith(\"val$\")) {\n      continue;\n    }\n    final Type fieldType=getFieldType(combinedIndexBuildItem,initialName,info,field);\n    visits.addLast(() -> addReflectiveHierarchy(combinedIndexBuildItem,reflectiveHierarchyBuildItem,source,fieldType,processedReflectiveHierarchies,unindexedClasses,finalFieldsWritable,reflectiveClass,visits));\n  }\n  for (  MethodInfo method : info.methods()) {\n    if (reflectiveHierarchyBuildItem.getIgnoreMethodPredicate().test(method) || method.parameters().size() > 0 || Modifier.isStatic(method.flags()) || method.returnType().kind() == Kind.VOID) {\n      continue;\n    }\n    visits.addLast(() -> addReflectiveHierarchy(combinedIndexBuildItem,reflectiveHierarchyBuildItem,source,method.returnType(),processedReflectiveHierarchies,unindexedClasses,finalFieldsWritable,reflectiveClass,visits));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 251,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3614,
        "startLineNumber" : 181,
        "startColumnNumber" : 4,
        "endLineNumber" : 256,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void addClassTypeHierarchy(CombinedIndexBuildItem combinedIndexBuildItem,ReflectiveHierarchyBuildItem reflectiveHierarchyBuildItem,String source,DotName name,DotName initialName,Set<DotName> processedReflectiveHierarchies,Map<DotName,Set<String>> unindexedClasses,Predicate<ClassInfo> finalFieldsWritable,BuildProducer<ReflectiveClassBuildItem> reflectiveClass,Deque<ReflectiveHierarchyVisitor> visits){\n  if (name == null) {\n    return;\n  }\n  if (reflectiveHierarchyBuildItem.getIgnoreTypePredicate().test(name)) {\n    return;\n  }\n  ClassInfo info=(reflectiveHierarchyBuildItem.getIndex() != null ? reflectiveHierarchyBuildItem.getIndex() : combinedIndexBuildItem.getIndex()).getClassByName(name);\n  if (info == null) {\n    unindexedClasses.putIfAbsent(name,new TreeSet<>());\n    unindexedClasses.get(name).add(source);\n  }\n  if (processedReflectiveHierarchies.contains(name)) {\n    return;\n  }\n  reflectiveClass.produce(ReflectiveClassBuildItem.builder(name.toString()).methods(true).fields(true).finalFieldsWritable(doFinalFieldsNeedToBeWritable(info,finalFieldsWritable)).serialization(reflectiveHierarchyBuildItem.isSerialization()).build());\n  processedReflectiveHierarchies.add(name);\n  if (info == null) {\n    return;\n  }\n  visits.addLast(() -> addClassTypeHierarchy(combinedIndexBuildItem,reflectiveHierarchyBuildItem,source,info.superName(),initialName,processedReflectiveHierarchies,unindexedClasses,finalFieldsWritable,reflectiveClass,visits));\n  for (  FieldInfo field : info.fields()) {\n    if (reflectiveHierarchyBuildItem.getIgnoreFieldPredicate().test(field) || Modifier.isStatic(field.flags()) || field.name().startsWith(\"this$\")|| field.name().startsWith(\"val$\")) {\n      continue;\n    }\n    final Type fieldType=getFieldType(combinedIndexBuildItem,initialName,info,field);\n    visits.addLast(() -> addReflectiveHierarchy(combinedIndexBuildItem,reflectiveHierarchyBuildItem,source,fieldType,processedReflectiveHierarchies,unindexedClasses,finalFieldsWritable,reflectiveClass,visits));\n  }\n  for (  MethodInfo method : info.methods()) {\n    if (reflectiveHierarchyBuildItem.getIgnoreMethodPredicate().test(method) || method.parameters().size() > 0 || Modifier.isStatic(method.flags()) || method.returnType().kind() == Kind.VOID) {\n      continue;\n    }\n    visits.addLast(() -> addReflectiveHierarchy(combinedIndexBuildItem,reflectiveHierarchyBuildItem,source,method.returnType(),processedReflectiveHierarchies,unindexedClasses,finalFieldsWritable,reflectiveClass,visits));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 315,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 230,
        "startColumnNumber" : 16,
        "endLineNumber" : 230,
        "endColumnNumber" : 82
      },
      "nodeContext" : "reflectiveHierarchyBuildItem.getIgnoreFieldPredicate().test(field)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "io.quarkus.deployment.steps.FieldInfo"
  }, {
    "nodeContext" : "field",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 232,
      "startColumnNumber" : 38,
      "endLineNumber" : 232,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 232,
        "startColumnNumber" : 38,
        "endLineNumber" : 232,
        "endColumnNumber" : 51
      },
      "nodeContext" : "field.flags()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 232,
        "startColumnNumber" : 20,
        "endLineNumber" : 232,
        "endColumnNumber" : 52
      },
      "nodeContext" : "Modifier.isStatic(field.flags())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 406,
        "startLineNumber" : 230,
        "startColumnNumber" : 16,
        "endLineNumber" : 234,
        "endColumnNumber" : 87
      },
      "nodeContext" : "reflectiveHierarchyBuildItem.getIgnoreFieldPredicate().test(field) || Modifier.isStatic(field.flags()) || field.name().startsWith(\"this$\")|| field.name().startsWith(\"val$\")",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 25,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 453,
        "startLineNumber" : 230,
        "startColumnNumber" : 12,
        "endLineNumber" : 236,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (reflectiveHierarchyBuildItem.getIgnoreFieldPredicate().test(field) || Modifier.isStatic(field.flags()) || field.name().startsWith(\"this$\")|| field.name().startsWith(\"val$\")) {\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 28,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 880,
        "startLineNumber" : 229,
        "startColumnNumber" : 46,
        "endLineNumber" : 242,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (reflectiveHierarchyBuildItem.getIgnoreFieldPredicate().test(field) || Modifier.isStatic(field.flags()) || field.name().startsWith(\"this$\")|| field.name().startsWith(\"val$\")) {\n    continue;\n  }\n  final Type fieldType=getFieldType(combinedIndexBuildItem,initialName,info,field);\n  visits.addLast(() -> addReflectiveHierarchy(combinedIndexBuildItem,reflectiveHierarchyBuildItem,source,fieldType,processedReflectiveHierarchies,unindexedClasses,finalFieldsWritable,reflectiveClass,visits));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 57,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 918,
        "startLineNumber" : 229,
        "startColumnNumber" : 8,
        "endLineNumber" : 242,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (FieldInfo field : info.fields()) {\n  if (reflectiveHierarchyBuildItem.getIgnoreFieldPredicate().test(field) || Modifier.isStatic(field.flags()) || field.name().startsWith(\"this$\")|| field.name().startsWith(\"val$\")) {\n    continue;\n  }\n  final Type fieldType=getFieldType(combinedIndexBuildItem,initialName,info,field);\n  visits.addLast(() -> addReflectiveHierarchy(combinedIndexBuildItem,reflectiveHierarchyBuildItem,source,fieldType,processedReflectiveHierarchies,unindexedClasses,finalFieldsWritable,reflectiveClass,visits));\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 65,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3085,
        "startLineNumber" : 190,
        "startColumnNumber" : 54,
        "endLineNumber" : 256,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (name == null) {\n    return;\n  }\n  if (reflectiveHierarchyBuildItem.getIgnoreTypePredicate().test(name)) {\n    return;\n  }\n  ClassInfo info=(reflectiveHierarchyBuildItem.getIndex() != null ? reflectiveHierarchyBuildItem.getIndex() : combinedIndexBuildItem.getIndex()).getClassByName(name);\n  if (info == null) {\n    unindexedClasses.putIfAbsent(name,new TreeSet<>());\n    unindexedClasses.get(name).add(source);\n  }\n  if (processedReflectiveHierarchies.contains(name)) {\n    return;\n  }\n  reflectiveClass.produce(ReflectiveClassBuildItem.builder(name.toString()).methods(true).fields(true).finalFieldsWritable(doFinalFieldsNeedToBeWritable(info,finalFieldsWritable)).serialization(reflectiveHierarchyBuildItem.isSerialization()).build());\n  processedReflectiveHierarchies.add(name);\n  if (info == null) {\n    return;\n  }\n  visits.addLast(() -> addClassTypeHierarchy(combinedIndexBuildItem,reflectiveHierarchyBuildItem,source,info.superName(),initialName,processedReflectiveHierarchies,unindexedClasses,finalFieldsWritable,reflectiveClass,visits));\n  for (  FieldInfo field : info.fields()) {\n    if (reflectiveHierarchyBuildItem.getIgnoreFieldPredicate().test(field) || Modifier.isStatic(field.flags()) || field.name().startsWith(\"this$\")|| field.name().startsWith(\"val$\")) {\n      continue;\n    }\n    final Type fieldType=getFieldType(combinedIndexBuildItem,initialName,info,field);\n    visits.addLast(() -> addReflectiveHierarchy(combinedIndexBuildItem,reflectiveHierarchyBuildItem,source,fieldType,processedReflectiveHierarchies,unindexedClasses,finalFieldsWritable,reflectiveClass,visits));\n  }\n  for (  MethodInfo method : info.methods()) {\n    if (reflectiveHierarchyBuildItem.getIgnoreMethodPredicate().test(method) || method.parameters().size() > 0 || Modifier.isStatic(method.flags()) || method.returnType().kind() == Kind.VOID) {\n      continue;\n    }\n    visits.addLast(() -> addReflectiveHierarchy(combinedIndexBuildItem,reflectiveHierarchyBuildItem,source,method.returnType(),processedReflectiveHierarchies,unindexedClasses,finalFieldsWritable,reflectiveClass,visits));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 251,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3614,
        "startLineNumber" : 181,
        "startColumnNumber" : 4,
        "endLineNumber" : 256,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void addClassTypeHierarchy(CombinedIndexBuildItem combinedIndexBuildItem,ReflectiveHierarchyBuildItem reflectiveHierarchyBuildItem,String source,DotName name,DotName initialName,Set<DotName> processedReflectiveHierarchies,Map<DotName,Set<String>> unindexedClasses,Predicate<ClassInfo> finalFieldsWritable,BuildProducer<ReflectiveClassBuildItem> reflectiveClass,Deque<ReflectiveHierarchyVisitor> visits){\n  if (name == null) {\n    return;\n  }\n  if (reflectiveHierarchyBuildItem.getIgnoreTypePredicate().test(name)) {\n    return;\n  }\n  ClassInfo info=(reflectiveHierarchyBuildItem.getIndex() != null ? reflectiveHierarchyBuildItem.getIndex() : combinedIndexBuildItem.getIndex()).getClassByName(name);\n  if (info == null) {\n    unindexedClasses.putIfAbsent(name,new TreeSet<>());\n    unindexedClasses.get(name).add(source);\n  }\n  if (processedReflectiveHierarchies.contains(name)) {\n    return;\n  }\n  reflectiveClass.produce(ReflectiveClassBuildItem.builder(name.toString()).methods(true).fields(true).finalFieldsWritable(doFinalFieldsNeedToBeWritable(info,finalFieldsWritable)).serialization(reflectiveHierarchyBuildItem.isSerialization()).build());\n  processedReflectiveHierarchies.add(name);\n  if (info == null) {\n    return;\n  }\n  visits.addLast(() -> addClassTypeHierarchy(combinedIndexBuildItem,reflectiveHierarchyBuildItem,source,info.superName(),initialName,processedReflectiveHierarchies,unindexedClasses,finalFieldsWritable,reflectiveClass,visits));\n  for (  FieldInfo field : info.fields()) {\n    if (reflectiveHierarchyBuildItem.getIgnoreFieldPredicate().test(field) || Modifier.isStatic(field.flags()) || field.name().startsWith(\"this$\")|| field.name().startsWith(\"val$\")) {\n      continue;\n    }\n    final Type fieldType=getFieldType(combinedIndexBuildItem,initialName,info,field);\n    visits.addLast(() -> addReflectiveHierarchy(combinedIndexBuildItem,reflectiveHierarchyBuildItem,source,fieldType,processedReflectiveHierarchies,unindexedClasses,finalFieldsWritable,reflectiveClass,visits));\n  }\n  for (  MethodInfo method : info.methods()) {\n    if (reflectiveHierarchyBuildItem.getIgnoreMethodPredicate().test(method) || method.parameters().size() > 0 || Modifier.isStatic(method.flags()) || method.returnType().kind() == Kind.VOID) {\n      continue;\n    }\n    visits.addLast(() -> addReflectiveHierarchy(combinedIndexBuildItem,reflectiveHierarchyBuildItem,source,method.returnType(),processedReflectiveHierarchies,unindexedClasses,finalFieldsWritable,reflectiveClass,visits));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 315,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 232,
        "startColumnNumber" : 20,
        "endLineNumber" : 232,
        "endColumnNumber" : 52
      },
      "nodeContext" : "Modifier.isStatic(field.flags())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "io.quarkus.deployment.steps.FieldInfo"
  }, {
    "nodeContext" : "field",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 234,
      "startColumnNumber" : 20,
      "endLineNumber" : 234,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 234,
        "startColumnNumber" : 20,
        "endLineNumber" : 234,
        "endColumnNumber" : 32
      },
      "nodeContext" : "field.name()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 234,
        "startColumnNumber" : 20,
        "endLineNumber" : 234,
        "endColumnNumber" : 52
      },
      "nodeContext" : "field.name().startsWith(\"this$\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 406,
        "startLineNumber" : 230,
        "startColumnNumber" : 16,
        "endLineNumber" : 234,
        "endColumnNumber" : 87
      },
      "nodeContext" : "reflectiveHierarchyBuildItem.getIgnoreFieldPredicate().test(field) || Modifier.isStatic(field.flags()) || field.name().startsWith(\"this$\")|| field.name().startsWith(\"val$\")",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 25,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 453,
        "startLineNumber" : 230,
        "startColumnNumber" : 12,
        "endLineNumber" : 236,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (reflectiveHierarchyBuildItem.getIgnoreFieldPredicate().test(field) || Modifier.isStatic(field.flags()) || field.name().startsWith(\"this$\")|| field.name().startsWith(\"val$\")) {\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 28,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 880,
        "startLineNumber" : 229,
        "startColumnNumber" : 46,
        "endLineNumber" : 242,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (reflectiveHierarchyBuildItem.getIgnoreFieldPredicate().test(field) || Modifier.isStatic(field.flags()) || field.name().startsWith(\"this$\")|| field.name().startsWith(\"val$\")) {\n    continue;\n  }\n  final Type fieldType=getFieldType(combinedIndexBuildItem,initialName,info,field);\n  visits.addLast(() -> addReflectiveHierarchy(combinedIndexBuildItem,reflectiveHierarchyBuildItem,source,fieldType,processedReflectiveHierarchies,unindexedClasses,finalFieldsWritable,reflectiveClass,visits));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 57,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 918,
        "startLineNumber" : 229,
        "startColumnNumber" : 8,
        "endLineNumber" : 242,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (FieldInfo field : info.fields()) {\n  if (reflectiveHierarchyBuildItem.getIgnoreFieldPredicate().test(field) || Modifier.isStatic(field.flags()) || field.name().startsWith(\"this$\")|| field.name().startsWith(\"val$\")) {\n    continue;\n  }\n  final Type fieldType=getFieldType(combinedIndexBuildItem,initialName,info,field);\n  visits.addLast(() -> addReflectiveHierarchy(combinedIndexBuildItem,reflectiveHierarchyBuildItem,source,fieldType,processedReflectiveHierarchies,unindexedClasses,finalFieldsWritable,reflectiveClass,visits));\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 65,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3085,
        "startLineNumber" : 190,
        "startColumnNumber" : 54,
        "endLineNumber" : 256,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (name == null) {\n    return;\n  }\n  if (reflectiveHierarchyBuildItem.getIgnoreTypePredicate().test(name)) {\n    return;\n  }\n  ClassInfo info=(reflectiveHierarchyBuildItem.getIndex() != null ? reflectiveHierarchyBuildItem.getIndex() : combinedIndexBuildItem.getIndex()).getClassByName(name);\n  if (info == null) {\n    unindexedClasses.putIfAbsent(name,new TreeSet<>());\n    unindexedClasses.get(name).add(source);\n  }\n  if (processedReflectiveHierarchies.contains(name)) {\n    return;\n  }\n  reflectiveClass.produce(ReflectiveClassBuildItem.builder(name.toString()).methods(true).fields(true).finalFieldsWritable(doFinalFieldsNeedToBeWritable(info,finalFieldsWritable)).serialization(reflectiveHierarchyBuildItem.isSerialization()).build());\n  processedReflectiveHierarchies.add(name);\n  if (info == null) {\n    return;\n  }\n  visits.addLast(() -> addClassTypeHierarchy(combinedIndexBuildItem,reflectiveHierarchyBuildItem,source,info.superName(),initialName,processedReflectiveHierarchies,unindexedClasses,finalFieldsWritable,reflectiveClass,visits));\n  for (  FieldInfo field : info.fields()) {\n    if (reflectiveHierarchyBuildItem.getIgnoreFieldPredicate().test(field) || Modifier.isStatic(field.flags()) || field.name().startsWith(\"this$\")|| field.name().startsWith(\"val$\")) {\n      continue;\n    }\n    final Type fieldType=getFieldType(combinedIndexBuildItem,initialName,info,field);\n    visits.addLast(() -> addReflectiveHierarchy(combinedIndexBuildItem,reflectiveHierarchyBuildItem,source,fieldType,processedReflectiveHierarchies,unindexedClasses,finalFieldsWritable,reflectiveClass,visits));\n  }\n  for (  MethodInfo method : info.methods()) {\n    if (reflectiveHierarchyBuildItem.getIgnoreMethodPredicate().test(method) || method.parameters().size() > 0 || Modifier.isStatic(method.flags()) || method.returnType().kind() == Kind.VOID) {\n      continue;\n    }\n    visits.addLast(() -> addReflectiveHierarchy(combinedIndexBuildItem,reflectiveHierarchyBuildItem,source,method.returnType(),processedReflectiveHierarchies,unindexedClasses,finalFieldsWritable,reflectiveClass,visits));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 251,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3614,
        "startLineNumber" : 181,
        "startColumnNumber" : 4,
        "endLineNumber" : 256,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void addClassTypeHierarchy(CombinedIndexBuildItem combinedIndexBuildItem,ReflectiveHierarchyBuildItem reflectiveHierarchyBuildItem,String source,DotName name,DotName initialName,Set<DotName> processedReflectiveHierarchies,Map<DotName,Set<String>> unindexedClasses,Predicate<ClassInfo> finalFieldsWritable,BuildProducer<ReflectiveClassBuildItem> reflectiveClass,Deque<ReflectiveHierarchyVisitor> visits){\n  if (name == null) {\n    return;\n  }\n  if (reflectiveHierarchyBuildItem.getIgnoreTypePredicate().test(name)) {\n    return;\n  }\n  ClassInfo info=(reflectiveHierarchyBuildItem.getIndex() != null ? reflectiveHierarchyBuildItem.getIndex() : combinedIndexBuildItem.getIndex()).getClassByName(name);\n  if (info == null) {\n    unindexedClasses.putIfAbsent(name,new TreeSet<>());\n    unindexedClasses.get(name).add(source);\n  }\n  if (processedReflectiveHierarchies.contains(name)) {\n    return;\n  }\n  reflectiveClass.produce(ReflectiveClassBuildItem.builder(name.toString()).methods(true).fields(true).finalFieldsWritable(doFinalFieldsNeedToBeWritable(info,finalFieldsWritable)).serialization(reflectiveHierarchyBuildItem.isSerialization()).build());\n  processedReflectiveHierarchies.add(name);\n  if (info == null) {\n    return;\n  }\n  visits.addLast(() -> addClassTypeHierarchy(combinedIndexBuildItem,reflectiveHierarchyBuildItem,source,info.superName(),initialName,processedReflectiveHierarchies,unindexedClasses,finalFieldsWritable,reflectiveClass,visits));\n  for (  FieldInfo field : info.fields()) {\n    if (reflectiveHierarchyBuildItem.getIgnoreFieldPredicate().test(field) || Modifier.isStatic(field.flags()) || field.name().startsWith(\"this$\")|| field.name().startsWith(\"val$\")) {\n      continue;\n    }\n    final Type fieldType=getFieldType(combinedIndexBuildItem,initialName,info,field);\n    visits.addLast(() -> addReflectiveHierarchy(combinedIndexBuildItem,reflectiveHierarchyBuildItem,source,fieldType,processedReflectiveHierarchies,unindexedClasses,finalFieldsWritable,reflectiveClass,visits));\n  }\n  for (  MethodInfo method : info.methods()) {\n    if (reflectiveHierarchyBuildItem.getIgnoreMethodPredicate().test(method) || method.parameters().size() > 0 || Modifier.isStatic(method.flags()) || method.returnType().kind() == Kind.VOID) {\n      continue;\n    }\n    visits.addLast(() -> addReflectiveHierarchy(combinedIndexBuildItem,reflectiveHierarchyBuildItem,source,method.returnType(),processedReflectiveHierarchies,unindexedClasses,finalFieldsWritable,reflectiveClass,visits));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 315,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 234,
        "startColumnNumber" : 20,
        "endLineNumber" : 234,
        "endColumnNumber" : 52
      },
      "nodeContext" : "field.name().startsWith(\"this$\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "io.quarkus.deployment.steps.FieldInfo"
  }, {
    "nodeContext" : "field",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 234,
      "startColumnNumber" : 56,
      "endLineNumber" : 234,
      "endColumnNumber" : 61
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 234,
        "startColumnNumber" : 56,
        "endLineNumber" : 234,
        "endColumnNumber" : 68
      },
      "nodeContext" : "field.name()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 234,
        "startColumnNumber" : 56,
        "endLineNumber" : 234,
        "endColumnNumber" : 87
      },
      "nodeContext" : "field.name().startsWith(\"val$\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 406,
        "startLineNumber" : 230,
        "startColumnNumber" : 16,
        "endLineNumber" : 234,
        "endColumnNumber" : 87
      },
      "nodeContext" : "reflectiveHierarchyBuildItem.getIgnoreFieldPredicate().test(field) || Modifier.isStatic(field.flags()) || field.name().startsWith(\"this$\")|| field.name().startsWith(\"val$\")",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 25,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 453,
        "startLineNumber" : 230,
        "startColumnNumber" : 12,
        "endLineNumber" : 236,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (reflectiveHierarchyBuildItem.getIgnoreFieldPredicate().test(field) || Modifier.isStatic(field.flags()) || field.name().startsWith(\"this$\")|| field.name().startsWith(\"val$\")) {\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 28,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 880,
        "startLineNumber" : 229,
        "startColumnNumber" : 46,
        "endLineNumber" : 242,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (reflectiveHierarchyBuildItem.getIgnoreFieldPredicate().test(field) || Modifier.isStatic(field.flags()) || field.name().startsWith(\"this$\")|| field.name().startsWith(\"val$\")) {\n    continue;\n  }\n  final Type fieldType=getFieldType(combinedIndexBuildItem,initialName,info,field);\n  visits.addLast(() -> addReflectiveHierarchy(combinedIndexBuildItem,reflectiveHierarchyBuildItem,source,fieldType,processedReflectiveHierarchies,unindexedClasses,finalFieldsWritable,reflectiveClass,visits));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 57,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 918,
        "startLineNumber" : 229,
        "startColumnNumber" : 8,
        "endLineNumber" : 242,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (FieldInfo field : info.fields()) {\n  if (reflectiveHierarchyBuildItem.getIgnoreFieldPredicate().test(field) || Modifier.isStatic(field.flags()) || field.name().startsWith(\"this$\")|| field.name().startsWith(\"val$\")) {\n    continue;\n  }\n  final Type fieldType=getFieldType(combinedIndexBuildItem,initialName,info,field);\n  visits.addLast(() -> addReflectiveHierarchy(combinedIndexBuildItem,reflectiveHierarchyBuildItem,source,fieldType,processedReflectiveHierarchies,unindexedClasses,finalFieldsWritable,reflectiveClass,visits));\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 65,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3085,
        "startLineNumber" : 190,
        "startColumnNumber" : 54,
        "endLineNumber" : 256,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (name == null) {\n    return;\n  }\n  if (reflectiveHierarchyBuildItem.getIgnoreTypePredicate().test(name)) {\n    return;\n  }\n  ClassInfo info=(reflectiveHierarchyBuildItem.getIndex() != null ? reflectiveHierarchyBuildItem.getIndex() : combinedIndexBuildItem.getIndex()).getClassByName(name);\n  if (info == null) {\n    unindexedClasses.putIfAbsent(name,new TreeSet<>());\n    unindexedClasses.get(name).add(source);\n  }\n  if (processedReflectiveHierarchies.contains(name)) {\n    return;\n  }\n  reflectiveClass.produce(ReflectiveClassBuildItem.builder(name.toString()).methods(true).fields(true).finalFieldsWritable(doFinalFieldsNeedToBeWritable(info,finalFieldsWritable)).serialization(reflectiveHierarchyBuildItem.isSerialization()).build());\n  processedReflectiveHierarchies.add(name);\n  if (info == null) {\n    return;\n  }\n  visits.addLast(() -> addClassTypeHierarchy(combinedIndexBuildItem,reflectiveHierarchyBuildItem,source,info.superName(),initialName,processedReflectiveHierarchies,unindexedClasses,finalFieldsWritable,reflectiveClass,visits));\n  for (  FieldInfo field : info.fields()) {\n    if (reflectiveHierarchyBuildItem.getIgnoreFieldPredicate().test(field) || Modifier.isStatic(field.flags()) || field.name().startsWith(\"this$\")|| field.name().startsWith(\"val$\")) {\n      continue;\n    }\n    final Type fieldType=getFieldType(combinedIndexBuildItem,initialName,info,field);\n    visits.addLast(() -> addReflectiveHierarchy(combinedIndexBuildItem,reflectiveHierarchyBuildItem,source,fieldType,processedReflectiveHierarchies,unindexedClasses,finalFieldsWritable,reflectiveClass,visits));\n  }\n  for (  MethodInfo method : info.methods()) {\n    if (reflectiveHierarchyBuildItem.getIgnoreMethodPredicate().test(method) || method.parameters().size() > 0 || Modifier.isStatic(method.flags()) || method.returnType().kind() == Kind.VOID) {\n      continue;\n    }\n    visits.addLast(() -> addReflectiveHierarchy(combinedIndexBuildItem,reflectiveHierarchyBuildItem,source,method.returnType(),processedReflectiveHierarchies,unindexedClasses,finalFieldsWritable,reflectiveClass,visits));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 251,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3614,
        "startLineNumber" : 181,
        "startColumnNumber" : 4,
        "endLineNumber" : 256,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void addClassTypeHierarchy(CombinedIndexBuildItem combinedIndexBuildItem,ReflectiveHierarchyBuildItem reflectiveHierarchyBuildItem,String source,DotName name,DotName initialName,Set<DotName> processedReflectiveHierarchies,Map<DotName,Set<String>> unindexedClasses,Predicate<ClassInfo> finalFieldsWritable,BuildProducer<ReflectiveClassBuildItem> reflectiveClass,Deque<ReflectiveHierarchyVisitor> visits){\n  if (name == null) {\n    return;\n  }\n  if (reflectiveHierarchyBuildItem.getIgnoreTypePredicate().test(name)) {\n    return;\n  }\n  ClassInfo info=(reflectiveHierarchyBuildItem.getIndex() != null ? reflectiveHierarchyBuildItem.getIndex() : combinedIndexBuildItem.getIndex()).getClassByName(name);\n  if (info == null) {\n    unindexedClasses.putIfAbsent(name,new TreeSet<>());\n    unindexedClasses.get(name).add(source);\n  }\n  if (processedReflectiveHierarchies.contains(name)) {\n    return;\n  }\n  reflectiveClass.produce(ReflectiveClassBuildItem.builder(name.toString()).methods(true).fields(true).finalFieldsWritable(doFinalFieldsNeedToBeWritable(info,finalFieldsWritable)).serialization(reflectiveHierarchyBuildItem.isSerialization()).build());\n  processedReflectiveHierarchies.add(name);\n  if (info == null) {\n    return;\n  }\n  visits.addLast(() -> addClassTypeHierarchy(combinedIndexBuildItem,reflectiveHierarchyBuildItem,source,info.superName(),initialName,processedReflectiveHierarchies,unindexedClasses,finalFieldsWritable,reflectiveClass,visits));\n  for (  FieldInfo field : info.fields()) {\n    if (reflectiveHierarchyBuildItem.getIgnoreFieldPredicate().test(field) || Modifier.isStatic(field.flags()) || field.name().startsWith(\"this$\")|| field.name().startsWith(\"val$\")) {\n      continue;\n    }\n    final Type fieldType=getFieldType(combinedIndexBuildItem,initialName,info,field);\n    visits.addLast(() -> addReflectiveHierarchy(combinedIndexBuildItem,reflectiveHierarchyBuildItem,source,fieldType,processedReflectiveHierarchies,unindexedClasses,finalFieldsWritable,reflectiveClass,visits));\n  }\n  for (  MethodInfo method : info.methods()) {\n    if (reflectiveHierarchyBuildItem.getIgnoreMethodPredicate().test(method) || method.parameters().size() > 0 || Modifier.isStatic(method.flags()) || method.returnType().kind() == Kind.VOID) {\n      continue;\n    }\n    visits.addLast(() -> addReflectiveHierarchy(combinedIndexBuildItem,reflectiveHierarchyBuildItem,source,method.returnType(),processedReflectiveHierarchies,unindexedClasses,finalFieldsWritable,reflectiveClass,visits));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 315,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 234,
        "startColumnNumber" : 56,
        "endLineNumber" : 234,
        "endColumnNumber" : 87
      },
      "nodeContext" : "field.name().startsWith(\"val$\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "io.quarkus.deployment.steps.FieldInfo"
  }, {
    "nodeContext" : "field",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 237,
      "startColumnNumber" : 91,
      "endLineNumber" : 237,
      "endColumnNumber" : 96
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 237,
        "startColumnNumber" : 35,
        "endLineNumber" : 237,
        "endColumnNumber" : 97
      },
      "nodeContext" : "getFieldType(combinedIndexBuildItem,initialName,info,field)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 237,
        "startColumnNumber" : 23,
        "endLineNumber" : 237,
        "endColumnNumber" : 97
      },
      "nodeContext" : "fieldType=getFieldType(combinedIndexBuildItem,initialName,info,field)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 237,
        "startColumnNumber" : 12,
        "endLineNumber" : 237,
        "endColumnNumber" : 98
      },
      "nodeContext" : "final Type fieldType=getFieldType(combinedIndexBuildItem,initialName,info,field);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 880,
        "startLineNumber" : 229,
        "startColumnNumber" : 46,
        "endLineNumber" : 242,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (reflectiveHierarchyBuildItem.getIgnoreFieldPredicate().test(field) || Modifier.isStatic(field.flags()) || field.name().startsWith(\"this$\")|| field.name().startsWith(\"val$\")) {\n    continue;\n  }\n  final Type fieldType=getFieldType(combinedIndexBuildItem,initialName,info,field);\n  visits.addLast(() -> addReflectiveHierarchy(combinedIndexBuildItem,reflectiveHierarchyBuildItem,source,fieldType,processedReflectiveHierarchies,unindexedClasses,finalFieldsWritable,reflectiveClass,visits));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 57,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 918,
        "startLineNumber" : 229,
        "startColumnNumber" : 8,
        "endLineNumber" : 242,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (FieldInfo field : info.fields()) {\n  if (reflectiveHierarchyBuildItem.getIgnoreFieldPredicate().test(field) || Modifier.isStatic(field.flags()) || field.name().startsWith(\"this$\")|| field.name().startsWith(\"val$\")) {\n    continue;\n  }\n  final Type fieldType=getFieldType(combinedIndexBuildItem,initialName,info,field);\n  visits.addLast(() -> addReflectiveHierarchy(combinedIndexBuildItem,reflectiveHierarchyBuildItem,source,fieldType,processedReflectiveHierarchies,unindexedClasses,finalFieldsWritable,reflectiveClass,visits));\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 65,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3085,
        "startLineNumber" : 190,
        "startColumnNumber" : 54,
        "endLineNumber" : 256,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (name == null) {\n    return;\n  }\n  if (reflectiveHierarchyBuildItem.getIgnoreTypePredicate().test(name)) {\n    return;\n  }\n  ClassInfo info=(reflectiveHierarchyBuildItem.getIndex() != null ? reflectiveHierarchyBuildItem.getIndex() : combinedIndexBuildItem.getIndex()).getClassByName(name);\n  if (info == null) {\n    unindexedClasses.putIfAbsent(name,new TreeSet<>());\n    unindexedClasses.get(name).add(source);\n  }\n  if (processedReflectiveHierarchies.contains(name)) {\n    return;\n  }\n  reflectiveClass.produce(ReflectiveClassBuildItem.builder(name.toString()).methods(true).fields(true).finalFieldsWritable(doFinalFieldsNeedToBeWritable(info,finalFieldsWritable)).serialization(reflectiveHierarchyBuildItem.isSerialization()).build());\n  processedReflectiveHierarchies.add(name);\n  if (info == null) {\n    return;\n  }\n  visits.addLast(() -> addClassTypeHierarchy(combinedIndexBuildItem,reflectiveHierarchyBuildItem,source,info.superName(),initialName,processedReflectiveHierarchies,unindexedClasses,finalFieldsWritable,reflectiveClass,visits));\n  for (  FieldInfo field : info.fields()) {\n    if (reflectiveHierarchyBuildItem.getIgnoreFieldPredicate().test(field) || Modifier.isStatic(field.flags()) || field.name().startsWith(\"this$\")|| field.name().startsWith(\"val$\")) {\n      continue;\n    }\n    final Type fieldType=getFieldType(combinedIndexBuildItem,initialName,info,field);\n    visits.addLast(() -> addReflectiveHierarchy(combinedIndexBuildItem,reflectiveHierarchyBuildItem,source,fieldType,processedReflectiveHierarchies,unindexedClasses,finalFieldsWritable,reflectiveClass,visits));\n  }\n  for (  MethodInfo method : info.methods()) {\n    if (reflectiveHierarchyBuildItem.getIgnoreMethodPredicate().test(method) || method.parameters().size() > 0 || Modifier.isStatic(method.flags()) || method.returnType().kind() == Kind.VOID) {\n      continue;\n    }\n    visits.addLast(() -> addReflectiveHierarchy(combinedIndexBuildItem,reflectiveHierarchyBuildItem,source,method.returnType(),processedReflectiveHierarchies,unindexedClasses,finalFieldsWritable,reflectiveClass,visits));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 251,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3614,
        "startLineNumber" : 181,
        "startColumnNumber" : 4,
        "endLineNumber" : 256,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void addClassTypeHierarchy(CombinedIndexBuildItem combinedIndexBuildItem,ReflectiveHierarchyBuildItem reflectiveHierarchyBuildItem,String source,DotName name,DotName initialName,Set<DotName> processedReflectiveHierarchies,Map<DotName,Set<String>> unindexedClasses,Predicate<ClassInfo> finalFieldsWritable,BuildProducer<ReflectiveClassBuildItem> reflectiveClass,Deque<ReflectiveHierarchyVisitor> visits){\n  if (name == null) {\n    return;\n  }\n  if (reflectiveHierarchyBuildItem.getIgnoreTypePredicate().test(name)) {\n    return;\n  }\n  ClassInfo info=(reflectiveHierarchyBuildItem.getIndex() != null ? reflectiveHierarchyBuildItem.getIndex() : combinedIndexBuildItem.getIndex()).getClassByName(name);\n  if (info == null) {\n    unindexedClasses.putIfAbsent(name,new TreeSet<>());\n    unindexedClasses.get(name).add(source);\n  }\n  if (processedReflectiveHierarchies.contains(name)) {\n    return;\n  }\n  reflectiveClass.produce(ReflectiveClassBuildItem.builder(name.toString()).methods(true).fields(true).finalFieldsWritable(doFinalFieldsNeedToBeWritable(info,finalFieldsWritable)).serialization(reflectiveHierarchyBuildItem.isSerialization()).build());\n  processedReflectiveHierarchies.add(name);\n  if (info == null) {\n    return;\n  }\n  visits.addLast(() -> addClassTypeHierarchy(combinedIndexBuildItem,reflectiveHierarchyBuildItem,source,info.superName(),initialName,processedReflectiveHierarchies,unindexedClasses,finalFieldsWritable,reflectiveClass,visits));\n  for (  FieldInfo field : info.fields()) {\n    if (reflectiveHierarchyBuildItem.getIgnoreFieldPredicate().test(field) || Modifier.isStatic(field.flags()) || field.name().startsWith(\"this$\")|| field.name().startsWith(\"val$\")) {\n      continue;\n    }\n    final Type fieldType=getFieldType(combinedIndexBuildItem,initialName,info,field);\n    visits.addLast(() -> addReflectiveHierarchy(combinedIndexBuildItem,reflectiveHierarchyBuildItem,source,fieldType,processedReflectiveHierarchies,unindexedClasses,finalFieldsWritable,reflectiveClass,visits));\n  }\n  for (  MethodInfo method : info.methods()) {\n    if (reflectiveHierarchyBuildItem.getIgnoreMethodPredicate().test(method) || method.parameters().size() > 0 || Modifier.isStatic(method.flags()) || method.returnType().kind() == Kind.VOID) {\n      continue;\n    }\n    visits.addLast(() -> addReflectiveHierarchy(combinedIndexBuildItem,reflectiveHierarchyBuildItem,source,method.returnType(),processedReflectiveHierarchies,unindexedClasses,finalFieldsWritable,reflectiveClass,visits));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 315,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 237,
        "startColumnNumber" : 12,
        "endLineNumber" : 237,
        "endColumnNumber" : 98
      },
      "nodeContext" : "final Type fieldType=getFieldType(combinedIndexBuildItem,initialName,info,field);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.quarkus.deployment.steps.FieldInfo"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 230,
    "startColumnNumber" : 76,
    "endLineNumber" : 230,
    "endColumnNumber" : 81
  }, {
    "charLength" : 5,
    "startLineNumber" : 232,
    "startColumnNumber" : 38,
    "endLineNumber" : 232,
    "endColumnNumber" : 43
  }, {
    "charLength" : 5,
    "startLineNumber" : 234,
    "startColumnNumber" : 20,
    "endLineNumber" : 234,
    "endColumnNumber" : 25
  }, {
    "charLength" : 5,
    "startLineNumber" : 234,
    "startColumnNumber" : 56,
    "endLineNumber" : 234,
    "endColumnNumber" : 61
  }, {
    "charLength" : 5,
    "startLineNumber" : 237,
    "startColumnNumber" : 91,
    "endLineNumber" : 237,
    "endColumnNumber" : 96
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  } ]
}