{
  "id" : 27,
  "expression" : "s1.getPeerCredentials()",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/transport-native-epoll/src/test/java/io/netty/channel/epoll/EpollSocketTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "s1.getPeerCredentials()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 57,
      "startColumnNumber" : 33,
      "endLineNumber" : 57,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 57,
        "startColumnNumber" : 28,
        "endLineNumber" : 57,
        "endColumnNumber" : 56
      },
      "nodeContext" : "pc=s1.getPeerCredentials()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 57,
        "startColumnNumber" : 12,
        "endLineNumber" : 57,
        "endColumnNumber" : 57
      },
      "nodeContext" : "PeerCredentials pc=s1.getPeerCredentials();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 364,
        "startLineNumber" : 49,
        "startColumnNumber" : 12,
        "endLineNumber" : 59,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  DomainSocketAddress dsa=UnixTestUtils.newDomainSocketAddress();\n  s1.bind(dsa);\n  s1.listen(1);\n  assertTrue(s2.connect(dsa));\n  byte[] addr=new byte[64];\n  s1.accept(addr);\n  PeerCredentials pc=s1.getPeerCredentials();\n  assertNotEquals(pc.uid(),-1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 58,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 439,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 62,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  DomainSocketAddress dsa=UnixTestUtils.newDomainSocketAddress();\n  s1.bind(dsa);\n  s1.listen(1);\n  assertTrue(s2.connect(dsa));\n  byte[] addr=new byte[64];\n  s1.accept(addr);\n  PeerCredentials pc=s1.getPeerCredentials();\n  assertNotEquals(pc.uid(),-1);\n}\n  finally {\n  s1.close();\n  s2.close();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 68,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 573,
        "startLineNumber" : 45,
        "startColumnNumber" : 51,
        "endLineNumber" : 63,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  LinuxSocket s1=LinuxSocket.newSocketDomain();\n  LinuxSocket s2=LinuxSocket.newSocketDomain();\n  try {\n    DomainSocketAddress dsa=UnixTestUtils.newDomainSocketAddress();\n    s1.bind(dsa);\n    s1.listen(1);\n    assertTrue(s2.connect(dsa));\n    byte[] addr=new byte[64];\n    s1.accept(addr);\n    PeerCredentials pc=s1.getPeerCredentials();\n    assertNotEquals(pc.uid(),-1);\n  }\n  finally {\n    s1.close();\n    s2.close();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 85,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 631,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 63,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testPeerCreds() throws IOException {\n  LinuxSocket s1=LinuxSocket.newSocketDomain();\n  LinuxSocket s2=LinuxSocket.newSocketDomain();\n  try {\n    DomainSocketAddress dsa=UnixTestUtils.newDomainSocketAddress();\n    s1.bind(dsa);\n    s1.listen(1);\n    assertTrue(s2.connect(dsa));\n    byte[] addr=new byte[64];\n    s1.accept(addr);\n    PeerCredentials pc=s1.getPeerCredentials();\n    assertNotEquals(pc.uid(),-1);\n  }\n  finally {\n    s1.close();\n    s2.close();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 93,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 57,
        "startColumnNumber" : 12,
        "endLineNumber" : 57,
        "endColumnNumber" : 57
      },
      "nodeContext" : "PeerCredentials pc=s1.getPeerCredentials();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "io.netty.channel.unix.PeerCredentials"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 57,
    "startColumnNumber" : 33,
    "endLineNumber" : 57,
    "endColumnNumber" : 56
  } ],
  "layoutRelationDataList" : [ ]
}