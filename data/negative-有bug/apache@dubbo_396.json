{
  "id" : 396,
  "expression" : "m.getReturnType()",
  "projectName" : "apache@dubbo",
  "commitID" : "4ea0a09846fa74b7b1a6a1a548f31859a2cddcc8",
  "filePath" : "/dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Wrapper.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "m.getReturnType()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 187,
      "startColumnNumber" : 20,
      "endLineNumber" : 187,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 187,
        "startColumnNumber" : 20,
        "endLineNumber" : 187,
        "endColumnNumber" : 50
      },
      "nodeContext" : "m.getReturnType() == Void.TYPE",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 351,
        "startLineNumber" : 187,
        "startColumnNumber" : 16,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (m.getReturnType() == Void.TYPE) {\n  c3.append(\" w.\").append(mn).append('(').append(args(m.getParameterTypes(),\"$4\")).append(\");\").append(\" return null;\");\n}\n else {\n  c3.append(\" return ($w)w.\").append(mn).append('(').append(args(m.getParameterTypes(),\"$4\")).append(\");\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 57,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1731,
        "startLineNumber" : 158,
        "startColumnNumber" : 37,
        "endLineNumber" : 200,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (m.getDeclaringClass() == Object.class) {\n    continue;\n  }\n  String mn=m.getName();\n  c3.append(\" if( \\\"\").append(mn).append(\"\\\".equals( $2 ) \");\n  int len=m.getParameterTypes().length;\n  c3.append(\" && \").append(\" $3.length == \").append(len);\n  boolean override=false;\n  for (  Method m2 : methods) {\n    if (m != m2 && m.getName().equals(m2.getName())) {\n      override=true;\n      break;\n    }\n  }\n  if (override) {\n    if (len > 0) {\n      for (int l=0; l < len; l++) {\n        c3.append(\" && \").append(\" $3[\").append(l).append(\"].getName().equals(\\\"\").append(m.getParameterTypes()[l].getName()).append(\"\\\")\");\n      }\n    }\n  }\n  c3.append(\" ) { \");\n  if (m.getReturnType() == Void.TYPE) {\n    c3.append(\" w.\").append(mn).append('(').append(args(m.getParameterTypes(),\"$4\")).append(\");\").append(\" return null;\");\n  }\n else {\n    c3.append(\" return ($w)w.\").append(mn).append('(').append(args(m.getParameterTypes(),\"$4\")).append(\");\");\n  }\n  c3.append(\" }\");\n  mns.add(mn);\n  if (m.getDeclaringClass() == c) {\n    dmns.add(mn);\n  }\n  ms.put(ReflectUtils.getDesc(m),m);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 220,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1756,
        "startLineNumber" : 158,
        "startColumnNumber" : 12,
        "endLineNumber" : 200,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Method m : methods) {\n  if (m.getDeclaringClass() == Object.class) {\n    continue;\n  }\n  String mn=m.getName();\n  c3.append(\" if( \\\"\").append(mn).append(\"\\\".equals( $2 ) \");\n  int len=m.getParameterTypes().length;\n  c3.append(\" && \").append(\" $3.length == \").append(len);\n  boolean override=false;\n  for (  Method m2 : methods) {\n    if (m != m2 && m.getName().equals(m2.getName())) {\n      override=true;\n      break;\n    }\n  }\n  if (override) {\n    if (len > 0) {\n      for (int l=0; l < len; l++) {\n        c3.append(\" && \").append(\" $3[\").append(l).append(\"].getName().equals(\\\"\").append(m.getParameterTypes()[l].getName()).append(\"\\\")\");\n      }\n    }\n  }\n  c3.append(\" ) { \");\n  if (m.getReturnType() == Void.TYPE) {\n    c3.append(\" w.\").append(mn).append('(').append(args(m.getParameterTypes(),\"$4\")).append(\");\").append(\" return null;\");\n  }\n else {\n    c3.append(\" return ($w)w.\").append(mn).append('(').append(args(m.getParameterTypes(),\"$4\")).append(\");\");\n  }\n  c3.append(\" }\");\n  mns.add(mn);\n  if (m.getDeclaringClass() == c) {\n    dmns.add(mn);\n  }\n  ms.put(ReflectUtils.getDesc(m),m);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 226,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1988,
        "startLineNumber" : 156,
        "startColumnNumber" : 23,
        "endLineNumber" : 204,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  c3.append(\" try{\");\n  for (  Method m : methods) {\n    if (m.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    String mn=m.getName();\n    c3.append(\" if( \\\"\").append(mn).append(\"\\\".equals( $2 ) \");\n    int len=m.getParameterTypes().length;\n    c3.append(\" && \").append(\" $3.length == \").append(len);\n    boolean override=false;\n    for (    Method m2 : methods) {\n      if (m != m2 && m.getName().equals(m2.getName())) {\n        override=true;\n        break;\n      }\n    }\n    if (override) {\n      if (len > 0) {\n        for (int l=0; l < len; l++) {\n          c3.append(\" && \").append(\" $3[\").append(l).append(\"].getName().equals(\\\"\").append(m.getParameterTypes()[l].getName()).append(\"\\\")\");\n        }\n      }\n    }\n    c3.append(\" ) { \");\n    if (m.getReturnType() == Void.TYPE) {\n      c3.append(\" w.\").append(mn).append('(').append(args(m.getParameterTypes(),\"$4\")).append(\");\").append(\" return null;\");\n    }\n else {\n      c3.append(\" return ($w)w.\").append(mn).append('(').append(args(m.getParameterTypes(),\"$4\")).append(\");\");\n    }\n    c3.append(\" }\");\n    mns.add(mn);\n    if (m.getDeclaringClass() == c) {\n      dmns.add(mn);\n    }\n    ms.put(ReflectUtils.getDesc(m),m);\n  }\n  c3.append(\" } catch(Throwable e) { \");\n  c3.append(\"     throw new java.lang.reflect.InvocationTargetException(e); \");\n  c3.append(\" }\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 247,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2003,
        "startLineNumber" : 156,
        "startColumnNumber" : 8,
        "endLineNumber" : 204,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (hasMethod) {\n  c3.append(\" try{\");\n  for (  Method m : methods) {\n    if (m.getDeclaringClass() == Object.class) {\n      continue;\n    }\n    String mn=m.getName();\n    c3.append(\" if( \\\"\").append(mn).append(\"\\\".equals( $2 ) \");\n    int len=m.getParameterTypes().length;\n    c3.append(\" && \").append(\" $3.length == \").append(len);\n    boolean override=false;\n    for (    Method m2 : methods) {\n      if (m != m2 && m.getName().equals(m2.getName())) {\n        override=true;\n        break;\n      }\n    }\n    if (override) {\n      if (len > 0) {\n        for (int l=0; l < len; l++) {\n          c3.append(\" && \").append(\" $3[\").append(l).append(\"].getName().equals(\\\"\").append(m.getParameterTypes()[l].getName()).append(\"\\\")\");\n        }\n      }\n    }\n    c3.append(\" ) { \");\n    if (m.getReturnType() == Void.TYPE) {\n      c3.append(\" w.\").append(mn).append('(').append(args(m.getParameterTypes(),\"$4\")).append(\");\").append(\" return null;\");\n    }\n else {\n      c3.append(\" return ($w)w.\").append(mn).append('(').append(args(m.getParameterTypes(),\"$4\")).append(\");\");\n    }\n    c3.append(\" }\");\n    mns.add(mn);\n    if (m.getDeclaringClass() == c) {\n      dmns.add(mn);\n    }\n    ms.put(ReflectUtils.getDesc(m),m);\n  }\n  c3.append(\" } catch(Throwable e) { \");\n  c3.append(\"     throw new java.lang.reflect.InvocationTargetException(e); \");\n  c3.append(\" }\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 249,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8218,
        "startLineNumber" : 119,
        "startColumnNumber" : 51,
        "endLineNumber" : 277,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (c.isPrimitive()) {\n    throw new IllegalArgumentException(\"Can not create wrapper for primitive type: \" + c);\n  }\n  String name=c.getName();\n  ClassLoader cl=ClassUtils.getClassLoader(c);\n  StringBuilder c1=new StringBuilder(\"public void setPropertyValue(Object o, String n, Object v){ \");\n  StringBuilder c2=new StringBuilder(\"public Object getPropertyValue(Object o, String n){ \");\n  StringBuilder c3=new StringBuilder(\"public Object invokeMethod(Object o, String n, Class[] p, Object[] v) throws \" + InvocationTargetException.class.getName() + \"{ \");\n  c1.append(name).append(\" w; try{ w = ((\").append(name).append(\")$1); }catch(Throwable e){ throw new IllegalArgumentException(e); }\");\n  c2.append(name).append(\" w; try{ w = ((\").append(name).append(\")$1); }catch(Throwable e){ throw new IllegalArgumentException(e); }\");\n  c3.append(name).append(\" w; try{ w = ((\").append(name).append(\")$1); }catch(Throwable e){ throw new IllegalArgumentException(e); }\");\n  Map<String,Class<?>> pts=new HashMap<>();\n  Map<String,Method> ms=new LinkedHashMap<>();\n  List<String> mns=new ArrayList<>();\n  List<String> dmns=new ArrayList<>();\n  for (  Field f : c.getFields()) {\n    String fn=f.getName();\n    Class<?> ft=f.getType();\n    if (Modifier.isStatic(f.getModifiers()) || Modifier.isTransient(f.getModifiers())) {\n      continue;\n    }\n    c1.append(\" if( $2.equals(\\\"\").append(fn).append(\"\\\") ){ w.\").append(fn).append(\"=\").append(arg(ft,\"$3\")).append(\"; return; }\");\n    c2.append(\" if( $2.equals(\\\"\").append(fn).append(\"\\\") ){ return ($w)w.\").append(fn).append(\"; }\");\n    pts.put(fn,ft);\n  }\n  Method[] methods=c.getMethods();\n  boolean hasMethod=hasMethods(methods);\n  if (hasMethod) {\n    c3.append(\" try{\");\n    for (    Method m : methods) {\n      if (m.getDeclaringClass() == Object.class) {\n        continue;\n      }\n      String mn=m.getName();\n      c3.append(\" if( \\\"\").append(mn).append(\"\\\".equals( $2 ) \");\n      int len=m.getParameterTypes().length;\n      c3.append(\" && \").append(\" $3.length == \").append(len);\n      boolean override=false;\n      for (      Method m2 : methods) {\n        if (m != m2 && m.getName().equals(m2.getName())) {\n          override=true;\n          break;\n        }\n      }\n      if (override) {\n        if (len > 0) {\n          for (int l=0; l < len; l++) {\n            c3.append(\" && \").append(\" $3[\").append(l).append(\"].getName().equals(\\\"\").append(m.getParameterTypes()[l].getName()).append(\"\\\")\");\n          }\n        }\n      }\n      c3.append(\" ) { \");\n      if (m.getReturnType() == Void.TYPE) {\n        c3.append(\" w.\").append(mn).append('(').append(args(m.getParameterTypes(),\"$4\")).append(\");\").append(\" return null;\");\n      }\n else {\n        c3.append(\" return ($w)w.\").append(mn).append('(').append(args(m.getParameterTypes(),\"$4\")).append(\");\");\n      }\n      c3.append(\" }\");\n      mns.add(mn);\n      if (m.getDeclaringClass() == c) {\n        dmns.add(mn);\n      }\n      ms.put(ReflectUtils.getDesc(m),m);\n    }\n    c3.append(\" } catch(Throwable e) { \");\n    c3.append(\"     throw new java.lang.reflect.InvocationTargetException(e); \");\n    c3.append(\" }\");\n  }\n  c3.append(\" throw new \" + NoSuchMethodException.class.getName() + \"(\\\"Not found method \\\\\\\"\\\"+$2+\\\"\\\\\\\" in class \"+ c.getName()+ \".\\\"); }\");\n  Matcher matcher;\n  for (  Map.Entry<String,Method> entry : ms.entrySet()) {\n    String md=entry.getKey();\n    Method method=entry.getValue();\n    if ((matcher=ReflectUtils.GETTER_METHOD_DESC_PATTERN.matcher(md)).matches()) {\n      String pn=propertyName(matcher.group(1));\n      c2.append(\" if( $2.equals(\\\"\").append(pn).append(\"\\\") ){ return ($w)w.\").append(method.getName()).append(\"(); }\");\n      pts.put(pn,method.getReturnType());\n    }\n else     if ((matcher=ReflectUtils.IS_HAS_CAN_METHOD_DESC_PATTERN.matcher(md)).matches()) {\n      String pn=propertyName(matcher.group(1));\n      c2.append(\" if( $2.equals(\\\"\").append(pn).append(\"\\\") ){ return ($w)w.\").append(method.getName()).append(\"(); }\");\n      pts.put(pn,method.getReturnType());\n    }\n else     if ((matcher=ReflectUtils.SETTER_METHOD_DESC_PATTERN.matcher(md)).matches()) {\n      Class<?> pt=method.getParameterTypes()[0];\n      String pn=propertyName(matcher.group(1));\n      c1.append(\" if( $2.equals(\\\"\").append(pn).append(\"\\\") ){ w.\").append(method.getName()).append(\"(\").append(arg(pt,\"$3\")).append(\"); return; }\");\n      pts.put(pn,pt);\n    }\n  }\n  c1.append(\" throw new \" + NoSuchPropertyException.class.getName() + \"(\\\"Not found property \\\\\\\"\\\"+$2+\\\"\\\\\\\" field or setter method in class \"+ c.getName()+ \".\\\"); }\");\n  c2.append(\" throw new \" + NoSuchPropertyException.class.getName() + \"(\\\"Not found property \\\\\\\"\\\"+$2+\\\"\\\\\\\" field or setter method in class \"+ c.getName()+ \".\\\"); }\");\n  long id=WRAPPER_CLASS_COUNTER.getAndIncrement();\n  ClassGenerator cc=ClassGenerator.newInstance(cl);\n  cc.setClassName((Modifier.isPublic(c.getModifiers()) ? Wrapper.class.getName() : c.getName() + \"$sw\") + id);\n  cc.setSuperClass(Wrapper.class);\n  cc.addDefaultConstructor();\n  cc.addField(\"public static String[] pns;\");\n  cc.addField(\"public static \" + Map.class.getName() + \" pts;\");\n  cc.addField(\"public static String[] mns;\");\n  cc.addField(\"public static String[] dmns;\");\n  for (int i=0, len=ms.size(); i < len; i++) {\n    cc.addField(\"public static Class[] mts\" + i + \";\");\n  }\n  cc.addMethod(\"public String[] getPropertyNames(){ return pns; }\");\n  cc.addMethod(\"public boolean hasProperty(String n){ return pts.containsKey($1); }\");\n  cc.addMethod(\"public Class getPropertyType(String n){ return (Class)pts.get($1); }\");\n  cc.addMethod(\"public String[] getMethodNames(){ return mns; }\");\n  cc.addMethod(\"public String[] getDeclaredMethodNames(){ return dmns; }\");\n  cc.addMethod(c1.toString());\n  cc.addMethod(c2.toString());\n  cc.addMethod(c3.toString());\n  try {\n    Class<?> wc=cc.toClass();\n    wc.getField(\"pts\").set(null,pts);\n    wc.getField(\"pns\").set(null,pts.keySet().toArray(new String[0]));\n    wc.getField(\"mns\").set(null,mns.toArray(new String[0]));\n    wc.getField(\"dmns\").set(null,dmns.toArray(new String[0]));\n    int ix=0;\n    for (    Method m : ms.values()) {\n      wc.getField(\"mts\" + ix++).set(null,m.getParameterTypes());\n    }\n    return (Wrapper)wc.newInstance();\n  }\n catch (  RuntimeException e) {\n    throw e;\n  }\ncatch (  Throwable e) {\n    throw new RuntimeException(e.getMessage(),e);\n  }\n finally {\n    cc.release();\n    ms.clear();\n    mns.clear();\n    dmns.clear();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1072,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8265,
        "startLineNumber" : 119,
        "startColumnNumber" : 4,
        "endLineNumber" : 277,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static Wrapper makeWrapper(Class<?> c){\n  if (c.isPrimitive()) {\n    throw new IllegalArgumentException(\"Can not create wrapper for primitive type: \" + c);\n  }\n  String name=c.getName();\n  ClassLoader cl=ClassUtils.getClassLoader(c);\n  StringBuilder c1=new StringBuilder(\"public void setPropertyValue(Object o, String n, Object v){ \");\n  StringBuilder c2=new StringBuilder(\"public Object getPropertyValue(Object o, String n){ \");\n  StringBuilder c3=new StringBuilder(\"public Object invokeMethod(Object o, String n, Class[] p, Object[] v) throws \" + InvocationTargetException.class.getName() + \"{ \");\n  c1.append(name).append(\" w; try{ w = ((\").append(name).append(\")$1); }catch(Throwable e){ throw new IllegalArgumentException(e); }\");\n  c2.append(name).append(\" w; try{ w = ((\").append(name).append(\")$1); }catch(Throwable e){ throw new IllegalArgumentException(e); }\");\n  c3.append(name).append(\" w; try{ w = ((\").append(name).append(\")$1); }catch(Throwable e){ throw new IllegalArgumentException(e); }\");\n  Map<String,Class<?>> pts=new HashMap<>();\n  Map<String,Method> ms=new LinkedHashMap<>();\n  List<String> mns=new ArrayList<>();\n  List<String> dmns=new ArrayList<>();\n  for (  Field f : c.getFields()) {\n    String fn=f.getName();\n    Class<?> ft=f.getType();\n    if (Modifier.isStatic(f.getModifiers()) || Modifier.isTransient(f.getModifiers())) {\n      continue;\n    }\n    c1.append(\" if( $2.equals(\\\"\").append(fn).append(\"\\\") ){ w.\").append(fn).append(\"=\").append(arg(ft,\"$3\")).append(\"; return; }\");\n    c2.append(\" if( $2.equals(\\\"\").append(fn).append(\"\\\") ){ return ($w)w.\").append(fn).append(\"; }\");\n    pts.put(fn,ft);\n  }\n  Method[] methods=c.getMethods();\n  boolean hasMethod=hasMethods(methods);\n  if (hasMethod) {\n    c3.append(\" try{\");\n    for (    Method m : methods) {\n      if (m.getDeclaringClass() == Object.class) {\n        continue;\n      }\n      String mn=m.getName();\n      c3.append(\" if( \\\"\").append(mn).append(\"\\\".equals( $2 ) \");\n      int len=m.getParameterTypes().length;\n      c3.append(\" && \").append(\" $3.length == \").append(len);\n      boolean override=false;\n      for (      Method m2 : methods) {\n        if (m != m2 && m.getName().equals(m2.getName())) {\n          override=true;\n          break;\n        }\n      }\n      if (override) {\n        if (len > 0) {\n          for (int l=0; l < len; l++) {\n            c3.append(\" && \").append(\" $3[\").append(l).append(\"].getName().equals(\\\"\").append(m.getParameterTypes()[l].getName()).append(\"\\\")\");\n          }\n        }\n      }\n      c3.append(\" ) { \");\n      if (m.getReturnType() == Void.TYPE) {\n        c3.append(\" w.\").append(mn).append('(').append(args(m.getParameterTypes(),\"$4\")).append(\");\").append(\" return null;\");\n      }\n else {\n        c3.append(\" return ($w)w.\").append(mn).append('(').append(args(m.getParameterTypes(),\"$4\")).append(\");\");\n      }\n      c3.append(\" }\");\n      mns.add(mn);\n      if (m.getDeclaringClass() == c) {\n        dmns.add(mn);\n      }\n      ms.put(ReflectUtils.getDesc(m),m);\n    }\n    c3.append(\" } catch(Throwable e) { \");\n    c3.append(\"     throw new java.lang.reflect.InvocationTargetException(e); \");\n    c3.append(\" }\");\n  }\n  c3.append(\" throw new \" + NoSuchMethodException.class.getName() + \"(\\\"Not found method \\\\\\\"\\\"+$2+\\\"\\\\\\\" in class \"+ c.getName()+ \".\\\"); }\");\n  Matcher matcher;\n  for (  Map.Entry<String,Method> entry : ms.entrySet()) {\n    String md=entry.getKey();\n    Method method=entry.getValue();\n    if ((matcher=ReflectUtils.GETTER_METHOD_DESC_PATTERN.matcher(md)).matches()) {\n      String pn=propertyName(matcher.group(1));\n      c2.append(\" if( $2.equals(\\\"\").append(pn).append(\"\\\") ){ return ($w)w.\").append(method.getName()).append(\"(); }\");\n      pts.put(pn,method.getReturnType());\n    }\n else     if ((matcher=ReflectUtils.IS_HAS_CAN_METHOD_DESC_PATTERN.matcher(md)).matches()) {\n      String pn=propertyName(matcher.group(1));\n      c2.append(\" if( $2.equals(\\\"\").append(pn).append(\"\\\") ){ return ($w)w.\").append(method.getName()).append(\"(); }\");\n      pts.put(pn,method.getReturnType());\n    }\n else     if ((matcher=ReflectUtils.SETTER_METHOD_DESC_PATTERN.matcher(md)).matches()) {\n      Class<?> pt=method.getParameterTypes()[0];\n      String pn=propertyName(matcher.group(1));\n      c1.append(\" if( $2.equals(\\\"\").append(pn).append(\"\\\") ){ w.\").append(method.getName()).append(\"(\").append(arg(pt,\"$3\")).append(\"); return; }\");\n      pts.put(pn,pt);\n    }\n  }\n  c1.append(\" throw new \" + NoSuchPropertyException.class.getName() + \"(\\\"Not found property \\\\\\\"\\\"+$2+\\\"\\\\\\\" field or setter method in class \"+ c.getName()+ \".\\\"); }\");\n  c2.append(\" throw new \" + NoSuchPropertyException.class.getName() + \"(\\\"Not found property \\\\\\\"\\\"+$2+\\\"\\\\\\\" field or setter method in class \"+ c.getName()+ \".\\\"); }\");\n  long id=WRAPPER_CLASS_COUNTER.getAndIncrement();\n  ClassGenerator cc=ClassGenerator.newInstance(cl);\n  cc.setClassName((Modifier.isPublic(c.getModifiers()) ? Wrapper.class.getName() : c.getName() + \"$sw\") + id);\n  cc.setSuperClass(Wrapper.class);\n  cc.addDefaultConstructor();\n  cc.addField(\"public static String[] pns;\");\n  cc.addField(\"public static \" + Map.class.getName() + \" pts;\");\n  cc.addField(\"public static String[] mns;\");\n  cc.addField(\"public static String[] dmns;\");\n  for (int i=0, len=ms.size(); i < len; i++) {\n    cc.addField(\"public static Class[] mts\" + i + \";\");\n  }\n  cc.addMethod(\"public String[] getPropertyNames(){ return pns; }\");\n  cc.addMethod(\"public boolean hasProperty(String n){ return pts.containsKey($1); }\");\n  cc.addMethod(\"public Class getPropertyType(String n){ return (Class)pts.get($1); }\");\n  cc.addMethod(\"public String[] getMethodNames(){ return mns; }\");\n  cc.addMethod(\"public String[] getDeclaredMethodNames(){ return dmns; }\");\n  cc.addMethod(c1.toString());\n  cc.addMethod(c2.toString());\n  cc.addMethod(c3.toString());\n  try {\n    Class<?> wc=cc.toClass();\n    wc.getField(\"pts\").set(null,pts);\n    wc.getField(\"pns\").set(null,pts.keySet().toArray(new String[0]));\n    wc.getField(\"mns\").set(null,mns.toArray(new String[0]));\n    wc.getField(\"dmns\").set(null,dmns.toArray(new String[0]));\n    int ix=0;\n    for (    Method m : ms.values()) {\n      wc.getField(\"mts\" + ix++).set(null,m.getParameterTypes());\n    }\n    return (Wrapper)wc.newInstance();\n  }\n catch (  RuntimeException e) {\n    throw e;\n  }\ncatch (  Throwable e) {\n    throw new RuntimeException(e.getMessage(),e);\n  }\n finally {\n    cc.release();\n    ms.clear();\n    mns.clear();\n    dmns.clear();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1084,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 187,
        "startColumnNumber" : 20,
        "endLineNumber" : 187,
        "endColumnNumber" : 50
      },
      "nodeContext" : "m.getReturnType() == Void.TYPE",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "java.lang.Class<>"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 187,
    "startColumnNumber" : 20,
    "endLineNumber" : 187,
    "endColumnNumber" : 37
  } ],
  "layoutRelationDataList" : [ ]
}