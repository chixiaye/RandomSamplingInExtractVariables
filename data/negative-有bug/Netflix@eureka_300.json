{
  "id" : 300,
  "expression" : "info1.getId()",
  "projectName" : "Netflix@eureka",
  "commitID" : "2f6d04dae7f6fca2a17e85fc53020e13272a79b2",
  "filePath" : "/eureka-server/src/test/java/com/netflix/eureka2/server/service/SelfInfoResolverChainTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "info1.getId()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 93,
      "startColumnNumber" : 34,
      "endLineNumber" : 93,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 93,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 48
      },
      "nodeContext" : "Assert.assertEquals(\"id\",info1.getId())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 93,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 49
      },
      "nodeContext" : "Assert.assertEquals(\"id\",info1.getId());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2425,
        "startLineNumber" : 51,
        "startColumnNumber" : 58,
        "endLineNumber" : 103,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ChainableSelfInfoResolver one=new ChainableSelfInfoResolver(){\n    @Override protected Observable<InstanceInfo.Builder> resolveMutable(){\n      return Observable.just(new InstanceInfo.Builder().withId(\"id\").withApp(\"appName\"));\n    }\n  }\n;\n  ChainableSelfInfoResolver two=new ChainableSelfInfoResolver(){\n    @Override protected Observable<InstanceInfo.Builder> resolveMutable(){\n      return Observable.from(Arrays.asList(new InstanceInfo.Builder().withStatus(InstanceInfo.Status.STARTING),new InstanceInfo.Builder().withStatus(InstanceInfo.Status.UP),new InstanceInfo.Builder().withStatus(InstanceInfo.Status.DOWN))).delay(500,TimeUnit.MILLISECONDS);\n    }\n  }\n;\n  ChainableSelfInfoResolver three=new ChainableSelfInfoResolver(){\n    @Override protected Observable<InstanceInfo.Builder> resolveMutable(){\n      return Observable.just(new InstanceInfo.Builder().withVipAddress(\"vip\"));\n    }\n  }\n;\n  SelfInfoResolverChain chain=new SelfInfoResolverChain(one,two,three);\n  List<InstanceInfo> result=chain.resolve().toList().toBlocking().firstOrDefault(null);\n  System.out.println(result);\n  Assert.assertEquals(3,result.size());\n  InstanceInfo info0=result.get(0);\n  Assert.assertEquals(\"id\",info0.getId());\n  Assert.assertEquals(\"appName\",info0.getApp());\n  Assert.assertEquals(InstanceInfo.Status.STARTING,info0.getStatus());\n  Assert.assertEquals(\"vip\",info0.getVipAddress());\n  InstanceInfo info1=result.get(1);\n  Assert.assertEquals(\"id\",info1.getId());\n  Assert.assertEquals(\"appName\",info1.getApp());\n  Assert.assertEquals(InstanceInfo.Status.UP,info1.getStatus());\n  Assert.assertEquals(\"vip\",info1.getVipAddress());\n  InstanceInfo info2=result.get(2);\n  Assert.assertEquals(\"id\",info2.getId());\n  Assert.assertEquals(\"appName\",info2.getApp());\n  Assert.assertEquals(InstanceInfo.Status.DOWN,info2.getStatus());\n  Assert.assertEquals(\"vip\",info2.getVipAddress());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 322,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2506,
        "startLineNumber" : 50,
        "startColumnNumber" : 4,
        "endLineNumber" : 103,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(timeout=30000) public void testLastObservableCompletesBeforeMiddle(){\n  ChainableSelfInfoResolver one=new ChainableSelfInfoResolver(){\n    @Override protected Observable<InstanceInfo.Builder> resolveMutable(){\n      return Observable.just(new InstanceInfo.Builder().withId(\"id\").withApp(\"appName\"));\n    }\n  }\n;\n  ChainableSelfInfoResolver two=new ChainableSelfInfoResolver(){\n    @Override protected Observable<InstanceInfo.Builder> resolveMutable(){\n      return Observable.from(Arrays.asList(new InstanceInfo.Builder().withStatus(InstanceInfo.Status.STARTING),new InstanceInfo.Builder().withStatus(InstanceInfo.Status.UP),new InstanceInfo.Builder().withStatus(InstanceInfo.Status.DOWN))).delay(500,TimeUnit.MILLISECONDS);\n    }\n  }\n;\n  ChainableSelfInfoResolver three=new ChainableSelfInfoResolver(){\n    @Override protected Observable<InstanceInfo.Builder> resolveMutable(){\n      return Observable.just(new InstanceInfo.Builder().withVipAddress(\"vip\"));\n    }\n  }\n;\n  SelfInfoResolverChain chain=new SelfInfoResolverChain(one,two,three);\n  List<InstanceInfo> result=chain.resolve().toList().toBlocking().firstOrDefault(null);\n  System.out.println(result);\n  Assert.assertEquals(3,result.size());\n  InstanceInfo info0=result.get(0);\n  Assert.assertEquals(\"id\",info0.getId());\n  Assert.assertEquals(\"appName\",info0.getApp());\n  Assert.assertEquals(InstanceInfo.Status.STARTING,info0.getStatus());\n  Assert.assertEquals(\"vip\",info0.getVipAddress());\n  InstanceInfo info1=result.get(1);\n  Assert.assertEquals(\"id\",info1.getId());\n  Assert.assertEquals(\"appName\",info1.getApp());\n  Assert.assertEquals(InstanceInfo.Status.UP,info1.getStatus());\n  Assert.assertEquals(\"vip\",info1.getVipAddress());\n  InstanceInfo info2=result.get(2);\n  Assert.assertEquals(\"id\",info2.getId());\n  Assert.assertEquals(\"appName\",info2.getApp());\n  Assert.assertEquals(InstanceInfo.Status.DOWN,info2.getStatus());\n  Assert.assertEquals(\"vip\",info2.getVipAddress());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 331,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 93,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 49
      },
      "nodeContext" : "Assert.assertEquals(\"id\",info1.getId());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 93,
    "startColumnNumber" : 34,
    "endLineNumber" : 93,
    "endColumnNumber" : 47
  } ],
  "layoutRelationDataList" : [ ]
}