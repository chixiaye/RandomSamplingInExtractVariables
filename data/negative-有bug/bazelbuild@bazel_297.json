{
  "id" : 297,
  "expression" : "\"the '%s' attribute does not specify an existing file (%s does not exist)\"",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/main/java/com/google/devtools/build/lib/rules/repository/NewRepositoryFileHandler.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"the '%s' attribute does not specify an existing file (%s does not exist)\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 74,
      "startLineNumber" : 224,
      "startColumnNumber" : 18,
      "endLineNumber" : 224,
      "endColumnNumber" : 92
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 159,
        "startLineNumber" : 223,
        "startColumnNumber" : 14,
        "endLineNumber" : 225,
        "endColumnNumber" : 48
      },
      "nodeContext" : "Starlark.errorf(\"the '%s' attribute does not specify an existing file (%s does not exist)\",getFileAttrName(),fileTarget)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 244,
        "startLineNumber" : 222,
        "startColumnNumber" : 16,
        "endLineNumber" : 226,
        "endColumnNumber" : 36
      },
      "nodeContext" : "new RepositoryFunctionException(Starlark.errorf(\"the '%s' attribute does not specify an existing file (%s does not exist)\",getFileAttrName(),fileTarget),Transience.PERSISTENT)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 251,
        "startLineNumber" : 222,
        "startColumnNumber" : 10,
        "endLineNumber" : 226,
        "endColumnNumber" : 37
      },
      "nodeContext" : "throw new RepositoryFunctionException(Starlark.errorf(\"the '%s' attribute does not specify an existing file (%s does not exist)\",getFileAttrName(),fileTarget),Transience.PERSISTENT);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 273,
        "startLineNumber" : 221,
        "startColumnNumber" : 34,
        "endLineNumber" : 227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  throw new RepositoryFunctionException(Starlark.errorf(\"the '%s' attribute does not specify an existing file (%s does not exist)\",getFileAttrName(),fileTarget),Transience.PERSISTENT);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 299,
        "startLineNumber" : 221,
        "startColumnNumber" : 8,
        "endLineNumber" : 227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!fileTarget.exists()) {\n  throw new RepositoryFunctionException(Starlark.errorf(\"the '%s' attribute does not specify an existing file (%s does not exist)\",getFileAttrName(),fileTarget),Transience.PERSISTENT);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 863,
        "startLineNumber" : 217,
        "startColumnNumber" : 13,
        "endLineNumber" : 237,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  PathFragment file=PathFragment.create(fileAttribute);\n  Path fileTarget=workspacePath.getRelative(file);\n  if (!fileTarget.exists()) {\n    throw new RepositoryFunctionException(Starlark.errorf(\"the '%s' attribute does not specify an existing file (%s does not exist)\",getFileAttrName(),fileTarget),Transience.PERSISTENT);\n  }\n  if (file.isAbsolute()) {\n    rootedFile=RootedPath.toRootedPath(Root.fromPath(fileTarget.getParentDirectory()),PathFragment.create(fileTarget.getBaseName()));\n  }\n else {\n    rootedFile=RootedPath.toRootedPath(Root.fromPath(workspacePath),file);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 74,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1623,
        "startLineNumber" : 201,
        "startColumnNumber" : 6,
        "endLineNumber" : 237,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (LabelValidator.isAbsolute(fileAttribute)) {\n  Label label=getFileAttributeAsLabel(rule);\n  SkyKey pkgSkyKey=PackageLookupValue.key(label.getPackageIdentifier());\n  PackageLookupValue pkgLookupValue=(PackageLookupValue)env.getValue(pkgSkyKey);\n  if (pkgLookupValue == null) {\n    return null;\n  }\n  if (!pkgLookupValue.packageExists()) {\n    throw new RepositoryFunctionException(Starlark.errorf(\"Unable to load package for %s: not found.\",fileAttribute),Transience.PERSISTENT);\n  }\n  Root packageRoot=pkgLookupValue.getRoot();\n  rootedFile=RootedPath.toRootedPath(packageRoot,label.toPathFragment());\n}\n else {\n  PathFragment file=PathFragment.create(fileAttribute);\n  Path fileTarget=workspacePath.getRelative(file);\n  if (!fileTarget.exists()) {\n    throw new RepositoryFunctionException(Starlark.errorf(\"the '%s' attribute does not specify an existing file (%s does not exist)\",getFileAttrName(),fileTarget),Transience.PERSISTENT);\n  }\n  if (file.isAbsolute()) {\n    rootedFile=RootedPath.toRootedPath(Root.fromPath(fileTarget.getParentDirectory()),PathFragment.create(fileTarget.getBaseName()));\n  }\n else {\n    rootedFile=RootedPath.toRootedPath(Root.fromPath(workspacePath),file);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 154,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3015,
        "startLineNumber" : 197,
        "startColumnNumber" : 65,
        "endLineNumber" : 264,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String fileAttribute=getFileAttributeValue(rule);\n  RootedPath rootedFile;\n  if (LabelValidator.isAbsolute(fileAttribute)) {\n    Label label=getFileAttributeAsLabel(rule);\n    SkyKey pkgSkyKey=PackageLookupValue.key(label.getPackageIdentifier());\n    PackageLookupValue pkgLookupValue=(PackageLookupValue)env.getValue(pkgSkyKey);\n    if (pkgLookupValue == null) {\n      return null;\n    }\n    if (!pkgLookupValue.packageExists()) {\n      throw new RepositoryFunctionException(Starlark.errorf(\"Unable to load package for %s: not found.\",fileAttribute),Transience.PERSISTENT);\n    }\n    Root packageRoot=pkgLookupValue.getRoot();\n    rootedFile=RootedPath.toRootedPath(packageRoot,label.toPathFragment());\n  }\n else {\n    PathFragment file=PathFragment.create(fileAttribute);\n    Path fileTarget=workspacePath.getRelative(file);\n    if (!fileTarget.exists()) {\n      throw new RepositoryFunctionException(Starlark.errorf(\"the '%s' attribute does not specify an existing file (%s does not exist)\",getFileAttrName(),fileTarget),Transience.PERSISTENT);\n    }\n    if (file.isAbsolute()) {\n      rootedFile=RootedPath.toRootedPath(Root.fromPath(fileTarget.getParentDirectory()),PathFragment.create(fileTarget.getBaseName()));\n    }\n else {\n      rootedFile=RootedPath.toRootedPath(Root.fromPath(workspacePath),file);\n    }\n  }\n  SkyKey fileKey=FileValue.key(rootedFile);\n  FileValue fileValue;\n  try {\n    fileValue=(FileValue)env.getValueOrThrow(fileKey,IOException.class);\n    if (fileValue == null) {\n      return null;\n    }\n  }\n catch (  IOException e) {\n    throw new RepositoryFunctionException(new IOException(\"Cannot lookup \" + fileAttribute + \": \"+ e.getMessage()),Transience.TRANSIENT);\n  }\n  if (!fileValue.isFile() || fileValue.isSpecialFile()) {\n    throw new RepositoryFunctionException(Starlark.errorf(\"%s is not a regular file\",rootedFile.asPath()),Transience.PERSISTENT);\n  }\n  return fileValue;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 253,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3139,
        "startLineNumber" : 196,
        "startColumnNumber" : 4,
        "endLineNumber" : 264,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private FileValue getFileValue(Rule rule,Environment env) throws RepositoryFunctionException, InterruptedException {\n  String fileAttribute=getFileAttributeValue(rule);\n  RootedPath rootedFile;\n  if (LabelValidator.isAbsolute(fileAttribute)) {\n    Label label=getFileAttributeAsLabel(rule);\n    SkyKey pkgSkyKey=PackageLookupValue.key(label.getPackageIdentifier());\n    PackageLookupValue pkgLookupValue=(PackageLookupValue)env.getValue(pkgSkyKey);\n    if (pkgLookupValue == null) {\n      return null;\n    }\n    if (!pkgLookupValue.packageExists()) {\n      throw new RepositoryFunctionException(Starlark.errorf(\"Unable to load package for %s: not found.\",fileAttribute),Transience.PERSISTENT);\n    }\n    Root packageRoot=pkgLookupValue.getRoot();\n    rootedFile=RootedPath.toRootedPath(packageRoot,label.toPathFragment());\n  }\n else {\n    PathFragment file=PathFragment.create(fileAttribute);\n    Path fileTarget=workspacePath.getRelative(file);\n    if (!fileTarget.exists()) {\n      throw new RepositoryFunctionException(Starlark.errorf(\"the '%s' attribute does not specify an existing file (%s does not exist)\",getFileAttrName(),fileTarget),Transience.PERSISTENT);\n    }\n    if (file.isAbsolute()) {\n      rootedFile=RootedPath.toRootedPath(Root.fromPath(fileTarget.getParentDirectory()),PathFragment.create(fileTarget.getBaseName()));\n    }\n else {\n      rootedFile=RootedPath.toRootedPath(Root.fromPath(workspacePath),file);\n    }\n  }\n  SkyKey fileKey=FileValue.key(rootedFile);\n  FileValue fileValue;\n  try {\n    fileValue=(FileValue)env.getValueOrThrow(fileKey,IOException.class);\n    if (fileValue == null) {\n      return null;\n    }\n  }\n catch (  IOException e) {\n    throw new RepositoryFunctionException(new IOException(\"Cannot lookup \" + fileAttribute + \": \"+ e.getMessage()),Transience.TRANSIENT);\n  }\n  if (!fileValue.isFile() || fileValue.isSpecialFile()) {\n    throw new RepositoryFunctionException(Starlark.errorf(\"%s is not a regular file\",rootedFile.asPath()),Transience.PERSISTENT);\n  }\n  return fileValue;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 270,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 159,
        "startLineNumber" : 223,
        "startColumnNumber" : 14,
        "endLineNumber" : 225,
        "endColumnNumber" : 48
      },
      "nodeContext" : "Starlark.errorf(\"the '%s' attribute does not specify an existing file (%s does not exist)\",getFileAttrName(),fileTarget)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 13,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 74,
    "startLineNumber" : 224,
    "startColumnNumber" : 18,
    "endLineNumber" : 224,
    "endColumnNumber" : 92
  } ],
  "layoutRelationDataList" : [ ]
}