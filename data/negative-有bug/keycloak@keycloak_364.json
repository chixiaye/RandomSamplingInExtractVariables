{
  "id" : 364,
  "expression" : "context.getRealm().getIdentityProvidersStream().filter(IdentityProviderModel::isEnabled).filter(identityProvider -> Objects.equals(providerId,identityProvider.getAlias()))",
  "projectName" : "keycloak@keycloak",
  "commitID" : "aacae9b9acb0fbedc49d4f88c9fbd7aa11922dce",
  "filePath" : "/services/src/main/java/org/keycloak/authentication/authenticators/browser/IdentityProviderAuthenticator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "context.getRealm().getIdentityProvidersStream().filter(IdentityProviderModel::isEnabled).filter(identityProvider -> Objects.equals(providerId,identityProvider.getAlias()))",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 206,
      "startLineNumber" : 78,
      "startColumnNumber" : 46,
      "endLineNumber" : 80,
      "endColumnNumber" : 100
    },
    "astNodeNumber" : 22,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 235,
        "startLineNumber" : 78,
        "startColumnNumber" : 46,
        "endLineNumber" : 81,
        "endColumnNumber" : 28
      },
      "nodeContext" : "context.getRealm().getIdentityProvidersStream().filter(IdentityProviderModel::isEnabled).filter(identityProvider -> Objects.equals(providerId,identityProvider.getAlias())).findFirst()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 24,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 241,
        "startLineNumber" : 78,
        "startColumnNumber" : 40,
        "endLineNumber" : 81,
        "endColumnNumber" : 28
      },
      "nodeContext" : "idp=context.getRealm().getIdentityProvidersStream().filter(IdentityProviderModel::isEnabled).filter(identityProvider -> Objects.equals(providerId,identityProvider.getAlias())).findFirst()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 26,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 274,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 81,
        "endColumnNumber" : 29
      },
      "nodeContext" : "Optional<IdentityProviderModel> idp=context.getRealm().getIdentityProvidersStream().filter(IdentityProviderModel::isEnabled).filter(identityProvider -> Objects.equals(providerId,identityProvider.getAlias())).findFirst();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 32,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1886,
        "startLineNumber" : 77,
        "startColumnNumber" : 80,
        "endLineNumber" : 104,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Optional<IdentityProviderModel> idp=context.getRealm().getIdentityProvidersStream().filter(IdentityProviderModel::isEnabled).filter(identityProvider -> Objects.equals(providerId,identityProvider.getAlias())).findFirst();\n  if (idp.isPresent()) {\n    String accessCode=new ClientSessionCode<>(context.getSession(),context.getRealm(),context.getAuthenticationSession()).getOrGenerateCode();\n    String clientId=context.getAuthenticationSession().getClient().getClientId();\n    String tabId=context.getAuthenticationSession().getTabId();\n    URI location=Urls.identityProviderAuthnRequest(context.getUriInfo().getBaseUri(),providerId,context.getRealm().getName(),accessCode,clientId,tabId);\n    if (context.getAuthenticationSession().getClientNote(OAuth2Constants.DISPLAY) != null) {\n      location=UriBuilder.fromUri(location).queryParam(OAuth2Constants.DISPLAY,context.getAuthenticationSession().getClientNote(OAuth2Constants.DISPLAY)).build();\n    }\n    Response response=Response.seeOther(location).build();\n    if (\"none\".equals(context.getAuthenticationSession().getClientNote(OIDCLoginProtocol.PROMPT_PARAM)) && Boolean.valueOf(idp.get().getConfig().get(ACCEPTS_PROMPT_NONE))) {\n      context.getAuthenticationSession().setAuthNote(AuthenticationProcessor.FORWARDED_PASSIVE_LOGIN,\"true\");\n    }\n    LOG.debugf(\"Redirecting to %s\",providerId);\n    context.forceChallenge(response);\n    return;\n  }\n  LOG.warnf(\"Provider not found or not enabled for realm %s\",providerId);\n  context.attempted();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1962,
        "startLineNumber" : 77,
        "startColumnNumber" : 4,
        "endLineNumber" : 104,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void redirect(AuthenticationFlowContext context,String providerId){\n  Optional<IdentityProviderModel> idp=context.getRealm().getIdentityProvidersStream().filter(IdentityProviderModel::isEnabled).filter(identityProvider -> Objects.equals(providerId,identityProvider.getAlias())).findFirst();\n  if (idp.isPresent()) {\n    String accessCode=new ClientSessionCode<>(context.getSession(),context.getRealm(),context.getAuthenticationSession()).getOrGenerateCode();\n    String clientId=context.getAuthenticationSession().getClient().getClientId();\n    String tabId=context.getAuthenticationSession().getTabId();\n    URI location=Urls.identityProviderAuthnRequest(context.getUriInfo().getBaseUri(),providerId,context.getRealm().getName(),accessCode,clientId,tabId);\n    if (context.getAuthenticationSession().getClientNote(OAuth2Constants.DISPLAY) != null) {\n      location=UriBuilder.fromUri(location).queryParam(OAuth2Constants.DISPLAY,context.getAuthenticationSession().getClientNote(OAuth2Constants.DISPLAY)).build();\n    }\n    Response response=Response.seeOther(location).build();\n    if (\"none\".equals(context.getAuthenticationSession().getClientNote(OIDCLoginProtocol.PROMPT_PARAM)) && Boolean.valueOf(idp.get().getConfig().get(ACCEPTS_PROMPT_NONE))) {\n      context.getAuthenticationSession().setAuthNote(AuthenticationProcessor.FORWARDED_PASSIVE_LOGIN,\"true\");\n    }\n    LOG.debugf(\"Redirecting to %s\",providerId);\n    context.forceChallenge(response);\n    return;\n  }\n  LOG.warnf(\"Provider not found or not enabled for realm %s\",providerId);\n  context.attempted();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 216,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 235,
        "startLineNumber" : 78,
        "startColumnNumber" : 46,
        "endLineNumber" : 81,
        "endColumnNumber" : 28
      },
      "nodeContext" : "context.getRealm().getIdentityProvidersStream().filter(IdentityProviderModel::isEnabled).filter(identityProvider -> Objects.equals(providerId,identityProvider.getAlias())).findFirst()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 24,
      "astHeight" : 6
    },
    "tokenLength" : 14,
    "type" : "java.util.stream.Stream<org.keycloak.models.IdentityProviderModel>"
  } ],
  "positionList" : [ {
    "charLength" : 206,
    "startLineNumber" : 78,
    "startColumnNumber" : 46,
    "endLineNumber" : 80,
    "endColumnNumber" : 100
  } ],
  "layoutRelationDataList" : [ ]
}