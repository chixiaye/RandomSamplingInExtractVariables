{
  "id" : 228,
  "expression" : "catchExcVarName",
  "projectName" : "skylot@jadx",
  "commitID" : "eb2a1734d3e02c19814f628e10bf80de5fb19772",
  "filePath" : "/jadx-core/src/test/java/jadx/tests/integration/trycatch/TestTryCatch7.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "catchExcVarName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 35,
      "startColumnNumber" : 55,
      "endLineNumber" : 35,
      "endColumnNumber" : 70
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 35,
        "startColumnNumber" : 31,
        "endLineNumber" : 35,
        "endColumnNumber" : 78
      },
      "nodeContext" : "\"} catch (Exception \" + catchExcVarName + \") {\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 35,
        "startColumnNumber" : 19,
        "endLineNumber" : 35,
        "endColumnNumber" : 79
      },
      "nodeContext" : "containsOne(\"} catch (Exception \" + catchExcVarName + \") {\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 35,
        "startColumnNumber" : 2,
        "endLineNumber" : 35,
        "endColumnNumber" : 80
      },
      "nodeContext" : "assertThat(code,containsOne(\"} catch (Exception \" + catchExcVarName + \") {\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 35,
        "startColumnNumber" : 2,
        "endLineNumber" : 35,
        "endColumnNumber" : 81
      },
      "nodeContext" : "assertThat(code,containsOne(\"} catch (Exception \" + catchExcVarName + \") {\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 546,
        "startLineNumber" : 27,
        "startColumnNumber" : 20,
        "endLineNumber" : 39,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  noDebugInfo();\n  ClassNode cls=getClassNode(TestCls.class);\n  String code=cls.getCode().toString();\n  String excVarName=\"e\";\n  String catchExcVarName=\"e2\";\n  assertThat(code,containsOne(\"Exception \" + excVarName + \" = new Exception();\"));\n  assertThat(code,containsOne(\"} catch (Exception \" + catchExcVarName + \") {\"));\n  assertThat(code,containsOne(excVarName + \" = \" + catchExcVarName+ \";\"));\n  assertThat(code,containsOne(excVarName + \".printStackTrace();\"));\n  assertThat(code,containsOne(\"return \" + excVarName + \";\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 572,
        "startLineNumber" : 26,
        "startColumnNumber" : 1,
        "endLineNumber" : 39,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void test(){\n  noDebugInfo();\n  ClassNode cls=getClassNode(TestCls.class);\n  String code=cls.getCode().toString();\n  String excVarName=\"e\";\n  String catchExcVarName=\"e2\";\n  assertThat(code,containsOne(\"Exception \" + excVarName + \" = new Exception();\"));\n  assertThat(code,containsOne(\"} catch (Exception \" + catchExcVarName + \") {\"));\n  assertThat(code,containsOne(excVarName + \" = \" + catchExcVarName+ \";\"));\n  assertThat(code,containsOne(excVarName + \".printStackTrace();\"));\n  assertThat(code,containsOne(\"return \" + excVarName + \";\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 92,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 35,
        "startColumnNumber" : 2,
        "endLineNumber" : 35,
        "endColumnNumber" : 81
      },
      "nodeContext" : "assertThat(code,containsOne(\"} catch (Exception \" + catchExcVarName + \") {\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "catchExcVarName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 36,
      "startColumnNumber" : 52,
      "endLineNumber" : 36,
      "endColumnNumber" : 67
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 36,
        "startColumnNumber" : 31,
        "endLineNumber" : 36,
        "endColumnNumber" : 73
      },
      "nodeContext" : "excVarName + \" = \" + catchExcVarName+ \";\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 36,
        "startColumnNumber" : 19,
        "endLineNumber" : 36,
        "endColumnNumber" : 74
      },
      "nodeContext" : "containsOne(excVarName + \" = \" + catchExcVarName+ \";\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 36,
        "startColumnNumber" : 2,
        "endLineNumber" : 36,
        "endColumnNumber" : 75
      },
      "nodeContext" : "assertThat(code,containsOne(excVarName + \" = \" + catchExcVarName+ \";\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 36,
        "startColumnNumber" : 2,
        "endLineNumber" : 36,
        "endColumnNumber" : 76
      },
      "nodeContext" : "assertThat(code,containsOne(excVarName + \" = \" + catchExcVarName+ \";\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 546,
        "startLineNumber" : 27,
        "startColumnNumber" : 20,
        "endLineNumber" : 39,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  noDebugInfo();\n  ClassNode cls=getClassNode(TestCls.class);\n  String code=cls.getCode().toString();\n  String excVarName=\"e\";\n  String catchExcVarName=\"e2\";\n  assertThat(code,containsOne(\"Exception \" + excVarName + \" = new Exception();\"));\n  assertThat(code,containsOne(\"} catch (Exception \" + catchExcVarName + \") {\"));\n  assertThat(code,containsOne(excVarName + \" = \" + catchExcVarName+ \";\"));\n  assertThat(code,containsOne(excVarName + \".printStackTrace();\"));\n  assertThat(code,containsOne(\"return \" + excVarName + \";\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 572,
        "startLineNumber" : 26,
        "startColumnNumber" : 1,
        "endLineNumber" : 39,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void test(){\n  noDebugInfo();\n  ClassNode cls=getClassNode(TestCls.class);\n  String code=cls.getCode().toString();\n  String excVarName=\"e\";\n  String catchExcVarName=\"e2\";\n  assertThat(code,containsOne(\"Exception \" + excVarName + \" = new Exception();\"));\n  assertThat(code,containsOne(\"} catch (Exception \" + catchExcVarName + \") {\"));\n  assertThat(code,containsOne(excVarName + \" = \" + catchExcVarName+ \";\"));\n  assertThat(code,containsOne(excVarName + \".printStackTrace();\"));\n  assertThat(code,containsOne(\"return \" + excVarName + \";\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 92,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 36,
        "startColumnNumber" : 2,
        "endLineNumber" : 36,
        "endColumnNumber" : 76
      },
      "nodeContext" : "assertThat(code,containsOne(excVarName + \" = \" + catchExcVarName+ \";\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 35,
    "startColumnNumber" : 55,
    "endLineNumber" : 35,
    "endColumnNumber" : 70
  }, {
    "charLength" : 15,
    "startLineNumber" : 36,
    "startColumnNumber" : 52,
    "endLineNumber" : 36,
    "endColumnNumber" : 67
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}