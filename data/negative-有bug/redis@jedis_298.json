{
  "id" : 298,
  "expression" : "25L",
  "projectName" : "redis@jedis",
  "commitID" : "eaa5b16af93d575cd1f340c2cd23595dc29d5638",
  "filePath" : "/src/test/java/redis/clients/jedis/modules/bloom/CMSTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "25L",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 87,
      "startColumnNumber" : 17,
      "endLineNumber" : 87,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 87,
        "startColumnNumber" : 4,
        "endLineNumber" : 87,
        "endColumnNumber" : 40
      },
      "nodeContext" : "assertEquals(25L,info.get(\"count\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 87,
        "startColumnNumber" : 4,
        "endLineNumber" : 87,
        "endColumnNumber" : 41
      },
      "nodeContext" : "assertEquals(25L,info.get(\"count\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 614,
        "startLineNumber" : 72,
        "startColumnNumber" : 39,
        "endLineNumber" : 88,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  client.cmsInitByDim(\"cms4\",1000L,5L);\n  client.cmsIncrBy(\"cms4\",\"foo\",5L);\n  Map<String,Long> itemIncrements=new LinkedHashMap<>();\n  itemIncrements.put(\"foo\",5L);\n  itemIncrements.put(\"bar\",15L);\n  List<Long> resp=client.cmsIncrBy(\"cms4\",itemIncrements);\n  assertEquals(Arrays.asList(10L,15L),resp);\n  Map<String,Object> info=client.cmsInfo(\"cms4\");\n  assertEquals(1000L,info.get(\"width\"));\n  assertEquals(5L,info.get(\"depth\"));\n  assertEquals(25L,info.get(\"count\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 101,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 660,
        "startLineNumber" : 71,
        "startColumnNumber" : 2,
        "endLineNumber" : 88,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testIncrByMultipleArgs(){\n  client.cmsInitByDim(\"cms4\",1000L,5L);\n  client.cmsIncrBy(\"cms4\",\"foo\",5L);\n  Map<String,Long> itemIncrements=new LinkedHashMap<>();\n  itemIncrements.put(\"foo\",5L);\n  itemIncrements.put(\"bar\",15L);\n  List<Long> resp=client.cmsIncrBy(\"cms4\",itemIncrements);\n  assertEquals(Arrays.asList(10L,15L),resp);\n  Map<String,Object> info=client.cmsInfo(\"cms4\");\n  assertEquals(1000L,info.get(\"width\"));\n  assertEquals(5L,info.get(\"depth\"));\n  assertEquals(25L,info.get(\"count\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 107,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 87,
        "startColumnNumber" : 4,
        "endLineNumber" : 87,
        "endColumnNumber" : 41
      },
      "nodeContext" : "assertEquals(25L,info.get(\"count\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 87,
    "startColumnNumber" : 17,
    "endLineNumber" : 87,
    "endColumnNumber" : 20
  } ],
  "layoutRelationDataList" : [ ]
}