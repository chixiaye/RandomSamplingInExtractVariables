{
  "id" : 479,
  "expression" : "\"1\"",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/clients/src/test/java/org/apache/kafka/common/network/SslSelectorTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"1\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 200,
      "startColumnNumber" : 23,
      "endLineNumber" : 200,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 200,
        "startColumnNumber" : 15,
        "endLineNumber" : 200,
        "endColumnNumber" : 26
      },
      "nodeContext" : "node1=\"1\"",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 200,
        "startColumnNumber" : 8,
        "endLineNumber" : 200,
        "endColumnNumber" : 27
      },
      "nodeContext" : "String node1=\"1\";\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2536,
        "startLineNumber" : 197,
        "startColumnNumber" : 29,
        "endLineNumber" : 250,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.selector.close();\n  String node1=\"1\";\n  String node2=\"2\";\n  final AtomicInteger node1Polls=new AtomicInteger();\n  this.channelBuilder=new TestSslChannelBuilder(Mode.CLIENT);\n  this.channelBuilder.configure(sslClientConfigs);\n  this.selector=new Selector(5000,metrics,time,\"MetricGroup\",channelBuilder,new LogContext()){\n    @Override void pollSelectionKeys(    Set<SelectionKey> selectionKeys,    boolean isImmediatelyConnected,    long currentTimeNanos){\n      for (      SelectionKey key : selectionKeys) {\n        KafkaChannel channel=(KafkaChannel)key.attachment();\n        if (channel != null && channel.id().equals(node1))         node1Polls.incrementAndGet();\n      }\n      super.pollSelectionKeys(selectionKeys,isImmediatelyConnected,currentTimeNanos);\n    }\n  }\n;\n  int largeRequestSize=100 * 1024;\n  connect(node1,new InetSocketAddress(\"localhost\",server.port));\n  selector.send(createSend(node1,TestUtils.randomString(largeRequestSize)));\n  waitForBytesBuffered(selector,node1);\n  TestSslChannelBuilder.TestSslTransportLayer.transportLayers.get(node1).truncateReadBuffer();\n  disableRead.accept(selector.channel(node1).selectionKey());\n  node1Polls.set(0);\n  connect(node2,new InetSocketAddress(\"localhost\",server.port));\n  int received=0;\n  String request=TestUtils.randomString(10);\n  selector.send(createSend(node2,request));\n  while (received < 100) {\n    received+=selector.completedReceives().size();\n    if (!selector.completedSends().isEmpty()) {\n      selector.send(createSend(node2,request));\n    }\n    selector.poll(5);\n  }\n  assertEquals(1,node1Polls.get());\n  selector.close(node1);\n  selector.close(node2);\n  verifySelectorEmpty();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 268,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2655,
        "startLineNumber" : 196,
        "startColumnNumber" : 4,
        "endLineNumber" : 250,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void verifyNoUnnecessaryPollWithBytesBuffered(Consumer<SelectionKey> disableRead) throws Exception {\n  this.selector.close();\n  String node1=\"1\";\n  String node2=\"2\";\n  final AtomicInteger node1Polls=new AtomicInteger();\n  this.channelBuilder=new TestSslChannelBuilder(Mode.CLIENT);\n  this.channelBuilder.configure(sslClientConfigs);\n  this.selector=new Selector(5000,metrics,time,\"MetricGroup\",channelBuilder,new LogContext()){\n    @Override void pollSelectionKeys(    Set<SelectionKey> selectionKeys,    boolean isImmediatelyConnected,    long currentTimeNanos){\n      for (      SelectionKey key : selectionKeys) {\n        KafkaChannel channel=(KafkaChannel)key.attachment();\n        if (channel != null && channel.id().equals(node1))         node1Polls.incrementAndGet();\n      }\n      super.pollSelectionKeys(selectionKeys,isImmediatelyConnected,currentTimeNanos);\n    }\n  }\n;\n  int largeRequestSize=100 * 1024;\n  connect(node1,new InetSocketAddress(\"localhost\",server.port));\n  selector.send(createSend(node1,TestUtils.randomString(largeRequestSize)));\n  waitForBytesBuffered(selector,node1);\n  TestSslChannelBuilder.TestSslTransportLayer.transportLayers.get(node1).truncateReadBuffer();\n  disableRead.accept(selector.channel(node1).selectionKey());\n  node1Polls.set(0);\n  connect(node2,new InetSocketAddress(\"localhost\",server.port));\n  int received=0;\n  String request=TestUtils.randomString(10);\n  selector.send(createSend(node2,request));\n  while (received < 100) {\n    received+=selector.completedReceives().size();\n    if (!selector.completedSends().isEmpty()) {\n      selector.send(createSend(node2,request));\n    }\n    selector.poll(5);\n  }\n  assertEquals(1,node1Polls.get());\n  selector.close(node1);\n  selector.close(node2);\n  verifySelectorEmpty();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 281,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 200,
        "startColumnNumber" : 8,
        "endLineNumber" : 200,
        "endColumnNumber" : 27
      },
      "nodeContext" : "String node1=\"1\";\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 200,
    "startColumnNumber" : 23,
    "endLineNumber" : 200,
    "endColumnNumber" : 26
  } ],
  "layoutRelationDataList" : [ ]
}