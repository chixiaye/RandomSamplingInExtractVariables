{
  "id" : 113,
  "expression" : "druidServer.getType()",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/server/src/test/java/org/apache/druid/server/coordinator/duty/UnloadUnusedSegmentsTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "druidServer.getType()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 311,
      "startColumnNumber" : 20,
      "endLineNumber" : 311,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 311,
        "startColumnNumber" : 4,
        "endLineNumber" : 311,
        "endColumnNumber" : 42
      },
      "nodeContext" : "EasyMock.expect(druidServer.getType())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 311,
        "startColumnNumber" : 4,
        "endLineNumber" : 311,
        "endColumnNumber" : 64
      },
      "nodeContext" : "EasyMock.expect(druidServer.getType()).andReturn(serverType)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 311,
        "startColumnNumber" : 4,
        "endLineNumber" : 311,
        "endColumnNumber" : 75
      },
      "nodeContext" : "EasyMock.expect(druidServer.getType()).andReturn(serverType).anyTimes()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 311,
        "startColumnNumber" : 4,
        "endLineNumber" : 311,
        "endColumnNumber" : 76
      },
      "nodeContext" : "EasyMock.expect(druidServer.getType()).andReturn(serverType).anyTimes();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 896,
        "startLineNumber" : 304,
        "startColumnNumber" : 2,
        "endLineNumber" : 320,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  EasyMock.expect(druidServer.getName()).andReturn(name).anyTimes();\n  EasyMock.expect(druidServer.getTier()).andReturn(tier).anyTimes();\n  EasyMock.expect(druidServer.getCurrSize()).andReturn(currentSize).anyTimes();\n  EasyMock.expect(druidServer.getMaxSize()).andReturn(maxSize).anyTimes();\n  ImmutableDruidServerTests.expectSegments(druidServer,segments);\n  EasyMock.expect(druidServer.getHost()).andReturn(name).anyTimes();\n  EasyMock.expect(druidServer.getType()).andReturn(serverType).anyTimes();\n  EasyMock.expect(druidServer.getDataSources()).andReturn(dataSources).anyTimes();\n  if (!segments.isEmpty()) {\n    segments.forEach(s -> EasyMock.expect(druidServer.getSegment(s.getId())).andReturn(s).anyTimes());\n  }\n  EasyMock.expect(druidServer.getSegment(EasyMock.anyObject())).andReturn(null).anyTimes();\n  EasyMock.replay(druidServer);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 138,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1173,
        "startLineNumber" : 294,
        "startColumnNumber" : 2,
        "endLineNumber" : 320,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static void mockDruidServer(ImmutableDruidServer druidServer,ServerType serverType,String name,String tier,long currentSize,long maxSize,List<DataSegment> segments,List<ImmutableDruidDataSource> dataSources){\n  EasyMock.expect(druidServer.getName()).andReturn(name).anyTimes();\n  EasyMock.expect(druidServer.getTier()).andReturn(tier).anyTimes();\n  EasyMock.expect(druidServer.getCurrSize()).andReturn(currentSize).anyTimes();\n  EasyMock.expect(druidServer.getMaxSize()).andReturn(maxSize).anyTimes();\n  ImmutableDruidServerTests.expectSegments(druidServer,segments);\n  EasyMock.expect(druidServer.getHost()).andReturn(name).anyTimes();\n  EasyMock.expect(druidServer.getType()).andReturn(serverType).anyTimes();\n  EasyMock.expect(druidServer.getDataSources()).andReturn(dataSources).anyTimes();\n  if (!segments.isEmpty()) {\n    segments.forEach(s -> EasyMock.expect(druidServer.getSegment(s.getId())).andReturn(s).anyTimes());\n  }\n  EasyMock.expect(druidServer.getSegment(EasyMock.anyObject())).andReturn(null).anyTimes();\n  EasyMock.replay(druidServer);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 179,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 311,
        "startColumnNumber" : 4,
        "endLineNumber" : 311,
        "endColumnNumber" : 76
      },
      "nodeContext" : "EasyMock.expect(druidServer.getType()).andReturn(serverType).anyTimes();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "org.apache.druid.server.coordination.ServerType"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 311,
    "startColumnNumber" : 20,
    "endLineNumber" : 311,
    "endColumnNumber" : 41
  } ],
  "layoutRelationDataList" : [ ]
}