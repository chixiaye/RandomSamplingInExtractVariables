{
  "id" : 144,
  "expression" : "toEvict",
  "projectName" : "nostra13@Android-Universal-Image-Loader",
  "commitID" : "7637abf7df1394f71dbc04644be86791959d1313",
  "filePath" : "/library/src/main/java/com/nostra13/universalimageloader/cache/memory/impl/LruMemoryCache.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "toEvict",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 92,
      "startColumnNumber" : 8,
      "endLineNumber" : 92,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 92,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 23
      },
      "nodeContext" : "toEvict == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 92,
        "startColumnNumber" : 4,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (toEvict == null) {\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 486,
        "startLineNumber" : 82,
        "startColumnNumber" : 23,
        "endLineNumber" : 99,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  if (size < 0 || (map.isEmpty() && size != 0)) {\n    throw new IllegalStateException(getClass().getName() + \".sizeOf() is reporting inconsistent results!\");\n  }\n  if (size <= maxSize || map.isEmpty()) {\n    break;\n  }\n  Map.Entry<String,Bitmap> toEvict=map.entrySet().iterator().next();\n  if (toEvict == null) {\n    break;\n  }\n  key=toEvict.getKey();\n  value=toEvict.getValue();\n  map.remove(key);\n  size-=sizeOf(key,value);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 84,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 506,
        "startLineNumber" : 82,
        "startColumnNumber" : 3,
        "endLineNumber" : 99,
        "endColumnNumber" : 4
      },
      "nodeContext" : "synchronized (this) {\n  if (size < 0 || (map.isEmpty() && size != 0)) {\n    throw new IllegalStateException(getClass().getName() + \".sizeOf() is reporting inconsistent results!\");\n  }\n  if (size <= maxSize || map.isEmpty()) {\n    break;\n  }\n  Map.Entry<String,Bitmap> toEvict=map.entrySet().iterator().next();\n  if (toEvict == null) {\n    break;\n  }\n  key=toEvict.getKey();\n  value=toEvict.getValue();\n  map.remove(key);\n  size-=sizeOf(key,value);\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 86,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 551,
        "startLineNumber" : 79,
        "startColumnNumber" : 15,
        "endLineNumber" : 100,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String key;\n  Bitmap value;\nsynchronized (this) {\n    if (size < 0 || (map.isEmpty() && size != 0)) {\n      throw new IllegalStateException(getClass().getName() + \".sizeOf() is reporting inconsistent results!\");\n    }\n    if (size <= maxSize || map.isEmpty()) {\n      break;\n    }\n    Map.Entry<String,Bitmap> toEvict=map.entrySet().iterator().next();\n    if (toEvict == null) {\n      break;\n    }\n    key=toEvict.getKey();\n    value=toEvict.getValue();\n    map.remove(key);\n    size-=sizeOf(key,value);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 97,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 564,
        "startLineNumber" : 79,
        "startColumnNumber" : 2,
        "endLineNumber" : 100,
        "endColumnNumber" : 3
      },
      "nodeContext" : "while (true) {\n  String key;\n  Bitmap value;\nsynchronized (this) {\n    if (size < 0 || (map.isEmpty() && size != 0)) {\n      throw new IllegalStateException(getClass().getName() + \".sizeOf() is reporting inconsistent results!\");\n    }\n    if (size <= maxSize || map.isEmpty()) {\n      break;\n    }\n    Map.Entry<String,Bitmap> toEvict=map.entrySet().iterator().next();\n    if (toEvict == null) {\n      break;\n    }\n    key=toEvict.getKey();\n    value=toEvict.getValue();\n    map.remove(key);\n    size-=sizeOf(key,value);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 99,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 573,
        "startLineNumber" : 78,
        "startColumnNumber" : 38,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  while (true) {\n    String key;\n    Bitmap value;\nsynchronized (this) {\n      if (size < 0 || (map.isEmpty() && size != 0)) {\n        throw new IllegalStateException(getClass().getName() + \".sizeOf() is reporting inconsistent results!\");\n      }\n      if (size <= maxSize || map.isEmpty()) {\n        break;\n      }\n      Map.Entry<String,Bitmap> toEvict=map.entrySet().iterator().next();\n      if (toEvict == null) {\n        break;\n      }\n      key=toEvict.getKey();\n      value=toEvict.getValue();\n      map.remove(key);\n      size-=sizeOf(key,value);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 100,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 840,
        "startLineNumber" : 73,
        "startColumnNumber" : 1,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Remove the eldest entries until the total of remaining entries is at or below the requested size.\n * @param maxSize the maximum size of the cache before returning. May be -1 to evict even 0-sized elements.\n */\nprivate void trimToSize(int maxSize){\n  while (true) {\n    String key;\n    Bitmap value;\nsynchronized (this) {\n      if (size < 0 || (map.isEmpty() && size != 0)) {\n        throw new IllegalStateException(getClass().getName() + \".sizeOf() is reporting inconsistent results!\");\n      }\n      if (size <= maxSize || map.isEmpty()) {\n        break;\n      }\n      Map.Entry<String,Bitmap> toEvict=map.entrySet().iterator().next();\n      if (toEvict == null) {\n        break;\n      }\n      key=toEvict.getKey();\n      value=toEvict.getValue();\n      map.remove(key);\n      size-=sizeOf(key,value);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 108,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 92,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 23
      },
      "nodeContext" : "toEvict == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.util.Map.Entry<java.lang.String,com.nostra13.universalimageloader.cache.memory.impl.Bitmap>"
  }, {
    "nodeContext" : "toEvict",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 95,
      "startColumnNumber" : 10,
      "endLineNumber" : 95,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 95,
        "startColumnNumber" : 10,
        "endLineNumber" : 95,
        "endColumnNumber" : 26
      },
      "nodeContext" : "toEvict.getKey()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 95,
        "startColumnNumber" : 4,
        "endLineNumber" : 95,
        "endColumnNumber" : 26
      },
      "nodeContext" : "key=toEvict.getKey()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 95,
        "startColumnNumber" : 4,
        "endLineNumber" : 95,
        "endColumnNumber" : 27
      },
      "nodeContext" : "key=toEvict.getKey();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 486,
        "startLineNumber" : 82,
        "startColumnNumber" : 23,
        "endLineNumber" : 99,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  if (size < 0 || (map.isEmpty() && size != 0)) {\n    throw new IllegalStateException(getClass().getName() + \".sizeOf() is reporting inconsistent results!\");\n  }\n  if (size <= maxSize || map.isEmpty()) {\n    break;\n  }\n  Map.Entry<String,Bitmap> toEvict=map.entrySet().iterator().next();\n  if (toEvict == null) {\n    break;\n  }\n  key=toEvict.getKey();\n  value=toEvict.getValue();\n  map.remove(key);\n  size-=sizeOf(key,value);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 84,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 506,
        "startLineNumber" : 82,
        "startColumnNumber" : 3,
        "endLineNumber" : 99,
        "endColumnNumber" : 4
      },
      "nodeContext" : "synchronized (this) {\n  if (size < 0 || (map.isEmpty() && size != 0)) {\n    throw new IllegalStateException(getClass().getName() + \".sizeOf() is reporting inconsistent results!\");\n  }\n  if (size <= maxSize || map.isEmpty()) {\n    break;\n  }\n  Map.Entry<String,Bitmap> toEvict=map.entrySet().iterator().next();\n  if (toEvict == null) {\n    break;\n  }\n  key=toEvict.getKey();\n  value=toEvict.getValue();\n  map.remove(key);\n  size-=sizeOf(key,value);\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 86,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 551,
        "startLineNumber" : 79,
        "startColumnNumber" : 15,
        "endLineNumber" : 100,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String key;\n  Bitmap value;\nsynchronized (this) {\n    if (size < 0 || (map.isEmpty() && size != 0)) {\n      throw new IllegalStateException(getClass().getName() + \".sizeOf() is reporting inconsistent results!\");\n    }\n    if (size <= maxSize || map.isEmpty()) {\n      break;\n    }\n    Map.Entry<String,Bitmap> toEvict=map.entrySet().iterator().next();\n    if (toEvict == null) {\n      break;\n    }\n    key=toEvict.getKey();\n    value=toEvict.getValue();\n    map.remove(key);\n    size-=sizeOf(key,value);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 97,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 564,
        "startLineNumber" : 79,
        "startColumnNumber" : 2,
        "endLineNumber" : 100,
        "endColumnNumber" : 3
      },
      "nodeContext" : "while (true) {\n  String key;\n  Bitmap value;\nsynchronized (this) {\n    if (size < 0 || (map.isEmpty() && size != 0)) {\n      throw new IllegalStateException(getClass().getName() + \".sizeOf() is reporting inconsistent results!\");\n    }\n    if (size <= maxSize || map.isEmpty()) {\n      break;\n    }\n    Map.Entry<String,Bitmap> toEvict=map.entrySet().iterator().next();\n    if (toEvict == null) {\n      break;\n    }\n    key=toEvict.getKey();\n    value=toEvict.getValue();\n    map.remove(key);\n    size-=sizeOf(key,value);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 99,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 573,
        "startLineNumber" : 78,
        "startColumnNumber" : 38,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  while (true) {\n    String key;\n    Bitmap value;\nsynchronized (this) {\n      if (size < 0 || (map.isEmpty() && size != 0)) {\n        throw new IllegalStateException(getClass().getName() + \".sizeOf() is reporting inconsistent results!\");\n      }\n      if (size <= maxSize || map.isEmpty()) {\n        break;\n      }\n      Map.Entry<String,Bitmap> toEvict=map.entrySet().iterator().next();\n      if (toEvict == null) {\n        break;\n      }\n      key=toEvict.getKey();\n      value=toEvict.getValue();\n      map.remove(key);\n      size-=sizeOf(key,value);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 100,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 840,
        "startLineNumber" : 73,
        "startColumnNumber" : 1,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Remove the eldest entries until the total of remaining entries is at or below the requested size.\n * @param maxSize the maximum size of the cache before returning. May be -1 to evict even 0-sized elements.\n */\nprivate void trimToSize(int maxSize){\n  while (true) {\n    String key;\n    Bitmap value;\nsynchronized (this) {\n      if (size < 0 || (map.isEmpty() && size != 0)) {\n        throw new IllegalStateException(getClass().getName() + \".sizeOf() is reporting inconsistent results!\");\n      }\n      if (size <= maxSize || map.isEmpty()) {\n        break;\n      }\n      Map.Entry<String,Bitmap> toEvict=map.entrySet().iterator().next();\n      if (toEvict == null) {\n        break;\n      }\n      key=toEvict.getKey();\n      value=toEvict.getValue();\n      map.remove(key);\n      size-=sizeOf(key,value);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 108,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 95,
        "startColumnNumber" : 4,
        "endLineNumber" : 95,
        "endColumnNumber" : 27
      },
      "nodeContext" : "key=toEvict.getKey();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.Map.Entry<java.lang.String,com.nostra13.universalimageloader.cache.memory.impl.Bitmap>"
  }, {
    "nodeContext" : "toEvict",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 96,
      "startColumnNumber" : 12,
      "endLineNumber" : 96,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 96,
        "startColumnNumber" : 12,
        "endLineNumber" : 96,
        "endColumnNumber" : 30
      },
      "nodeContext" : "toEvict.getValue()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 96,
        "endColumnNumber" : 30
      },
      "nodeContext" : "value=toEvict.getValue()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 96,
        "endColumnNumber" : 31
      },
      "nodeContext" : "value=toEvict.getValue();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 486,
        "startLineNumber" : 82,
        "startColumnNumber" : 23,
        "endLineNumber" : 99,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  if (size < 0 || (map.isEmpty() && size != 0)) {\n    throw new IllegalStateException(getClass().getName() + \".sizeOf() is reporting inconsistent results!\");\n  }\n  if (size <= maxSize || map.isEmpty()) {\n    break;\n  }\n  Map.Entry<String,Bitmap> toEvict=map.entrySet().iterator().next();\n  if (toEvict == null) {\n    break;\n  }\n  key=toEvict.getKey();\n  value=toEvict.getValue();\n  map.remove(key);\n  size-=sizeOf(key,value);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 84,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 506,
        "startLineNumber" : 82,
        "startColumnNumber" : 3,
        "endLineNumber" : 99,
        "endColumnNumber" : 4
      },
      "nodeContext" : "synchronized (this) {\n  if (size < 0 || (map.isEmpty() && size != 0)) {\n    throw new IllegalStateException(getClass().getName() + \".sizeOf() is reporting inconsistent results!\");\n  }\n  if (size <= maxSize || map.isEmpty()) {\n    break;\n  }\n  Map.Entry<String,Bitmap> toEvict=map.entrySet().iterator().next();\n  if (toEvict == null) {\n    break;\n  }\n  key=toEvict.getKey();\n  value=toEvict.getValue();\n  map.remove(key);\n  size-=sizeOf(key,value);\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 86,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 551,
        "startLineNumber" : 79,
        "startColumnNumber" : 15,
        "endLineNumber" : 100,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String key;\n  Bitmap value;\nsynchronized (this) {\n    if (size < 0 || (map.isEmpty() && size != 0)) {\n      throw new IllegalStateException(getClass().getName() + \".sizeOf() is reporting inconsistent results!\");\n    }\n    if (size <= maxSize || map.isEmpty()) {\n      break;\n    }\n    Map.Entry<String,Bitmap> toEvict=map.entrySet().iterator().next();\n    if (toEvict == null) {\n      break;\n    }\n    key=toEvict.getKey();\n    value=toEvict.getValue();\n    map.remove(key);\n    size-=sizeOf(key,value);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 97,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 564,
        "startLineNumber" : 79,
        "startColumnNumber" : 2,
        "endLineNumber" : 100,
        "endColumnNumber" : 3
      },
      "nodeContext" : "while (true) {\n  String key;\n  Bitmap value;\nsynchronized (this) {\n    if (size < 0 || (map.isEmpty() && size != 0)) {\n      throw new IllegalStateException(getClass().getName() + \".sizeOf() is reporting inconsistent results!\");\n    }\n    if (size <= maxSize || map.isEmpty()) {\n      break;\n    }\n    Map.Entry<String,Bitmap> toEvict=map.entrySet().iterator().next();\n    if (toEvict == null) {\n      break;\n    }\n    key=toEvict.getKey();\n    value=toEvict.getValue();\n    map.remove(key);\n    size-=sizeOf(key,value);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 99,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 573,
        "startLineNumber" : 78,
        "startColumnNumber" : 38,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  while (true) {\n    String key;\n    Bitmap value;\nsynchronized (this) {\n      if (size < 0 || (map.isEmpty() && size != 0)) {\n        throw new IllegalStateException(getClass().getName() + \".sizeOf() is reporting inconsistent results!\");\n      }\n      if (size <= maxSize || map.isEmpty()) {\n        break;\n      }\n      Map.Entry<String,Bitmap> toEvict=map.entrySet().iterator().next();\n      if (toEvict == null) {\n        break;\n      }\n      key=toEvict.getKey();\n      value=toEvict.getValue();\n      map.remove(key);\n      size-=sizeOf(key,value);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 100,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 840,
        "startLineNumber" : 73,
        "startColumnNumber" : 1,
        "endLineNumber" : 101,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Remove the eldest entries until the total of remaining entries is at or below the requested size.\n * @param maxSize the maximum size of the cache before returning. May be -1 to evict even 0-sized elements.\n */\nprivate void trimToSize(int maxSize){\n  while (true) {\n    String key;\n    Bitmap value;\nsynchronized (this) {\n      if (size < 0 || (map.isEmpty() && size != 0)) {\n        throw new IllegalStateException(getClass().getName() + \".sizeOf() is reporting inconsistent results!\");\n      }\n      if (size <= maxSize || map.isEmpty()) {\n        break;\n      }\n      Map.Entry<String,Bitmap> toEvict=map.entrySet().iterator().next();\n      if (toEvict == null) {\n        break;\n      }\n      key=toEvict.getKey();\n      value=toEvict.getValue();\n      map.remove(key);\n      size-=sizeOf(key,value);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 108,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 96,
        "endColumnNumber" : 31
      },
      "nodeContext" : "value=toEvict.getValue();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.Map.Entry<java.lang.String,com.nostra13.universalimageloader.cache.memory.impl.Bitmap>"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 92,
    "startColumnNumber" : 8,
    "endLineNumber" : 92,
    "endColumnNumber" : 15
  }, {
    "charLength" : 7,
    "startLineNumber" : 95,
    "startColumnNumber" : 10,
    "endLineNumber" : 95,
    "endColumnNumber" : 17
  }, {
    "charLength" : 7,
    "startLineNumber" : 96,
    "startColumnNumber" : 12,
    "endLineNumber" : 96,
    "endColumnNumber" : 19
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}