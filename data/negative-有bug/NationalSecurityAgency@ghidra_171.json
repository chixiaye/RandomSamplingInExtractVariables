{
  "id" : 171,
  "expression" : "events1.length - 1",
  "projectName" : "NationalSecurityAgency@ghidra",
  "commitID" : "a54d0e28d652c48502551a88278808549aed5f98",
  "filePath" : "/Ghidra/Features/Base/src/test.slow/java/ghidra/framework/data/PairedTransactionTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "events1.length - 1",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 201,
      "startColumnNumber" : 43,
      "endLineNumber" : 201,
      "endColumnNumber" : 61
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 201,
        "startColumnNumber" : 35,
        "endLineNumber" : 201,
        "endColumnNumber" : 62
      },
      "nodeContext" : "events1[events1.length - 1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 201,
        "startColumnNumber" : 2,
        "endLineNumber" : 201,
        "endColumnNumber" : 63
      },
      "nodeContext" : "assertEquals(UNDO_STATE_CHANGE1,events1[events1.length - 1])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 201,
        "startColumnNumber" : 2,
        "endLineNumber" : 201,
        "endColumnNumber" : 64
      },
      "nodeContext" : "assertEquals(UNDO_STATE_CHANGE1,events1[events1.length - 1]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 9751,
        "startLineNumber" : 152,
        "startColumnNumber" : 66,
        "endLineNumber" : 450,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  assertNull(obj1.getCurrentTransaction());\n  assertNull(obj2.getCurrentTransaction());\n  assertEquals(1,obj1.getUndoStackDepth());\n  assertEquals(1,obj2.getUndoStackDepth());\n  assertTrue(obj1.canUndo());\n  assertTrue(obj2.canUndo());\n  assertFalse(obj1.canRedo());\n  assertFalse(obj2.canRedo());\n  Transaction tx=obj1Listener.getLastTransaction();\n  obj1Listener.getEvents();\n  assertNotNull(tx);\n  tx=obj2Listener.getLastTransaction();\n  obj2Listener.getEvents();\n  assertNotNull(tx);\n  assertNull(obj1.getSynchronizedDomainObjects());\n  assertNull(obj2.getSynchronizedDomainObjects());\n  try {\n    obj1.addSynchronizedDomainObject(obj2);\n  }\n catch (  LockException e) {\n    e.printStackTrace();\n    Assert.fail(e.getMessage());\n  }\n  DomainObject[] synchronizedDomainObjects=obj1.getSynchronizedDomainObjects();\n  assertNotNull(synchronizedDomainObjects);\n  assertEquals(2,synchronizedDomainObjects.length);\n  assertEquals(obj1,synchronizedDomainObjects[0]);\n  assertEquals(obj2,synchronizedDomainObjects[1]);\n  assertArrayEquals(synchronizedDomainObjects,obj2.getSynchronizedDomainObjects());\n  assertEquals(0,obj1.getUndoStackDepth());\n  assertEquals(0,obj2.getUndoStackDepth());\n  assertFalse(obj1.canUndo());\n  assertFalse(obj2.canUndo());\n  assertFalse(obj1.canRedo());\n  assertFalse(obj2.canRedo());\n  String[] events1=obj1Listener.getEvents();\n  assertEquals(UNDO_STATE_CHANGE1,events1[events1.length - 1]);\n  String[] events2=obj2Listener.getEvents();\n  assertEquals(UNDO_STATE_CHANGE2,events2[events2.length - 1]);\n  int txId1=obj1.startTransaction(\"Test1\");\n  try {\n    assertNotNull(obj2.getCurrentTransaction());\n    propertyList1.setString(\"A1.B1\",\"TestB1\");\n    events1=obj1Listener.getEvents();\n    events2=obj2Listener.getEvents();\n    assertTrue(Arrays.equals(new String[]{START,UNDO_STATE_CHANGE1},events1));\n    assertTrue(Arrays.equals(new String[]{START,UNDO_STATE_CHANGE2},events2));\n    int txId2=obj2.startTransaction(\"Test2\");\n    try {\n      propertyList2.setString(\"A2.B2\",\"TestB2\");\n      events1=obj1Listener.getEvents();\n      events2=obj2Listener.getEvents();\n      assertTrue(Arrays.equals(new String[]{START,UNDO_STATE_CHANGE1},events1));\n      assertTrue(Arrays.equals(new String[]{START,UNDO_STATE_CHANGE2},events2));\n    }\n  finally {\n      obj2.endTransaction(txId2,true);\n    }\n    events1=obj1Listener.getEvents();\n    events2=obj2Listener.getEvents();\n    assertTrue(Arrays.equals(new String[]{},events1));\n    assertTrue(Arrays.equals(new String[]{},events2));\n    assertEquals(\"TestB1\",propertyList1.getString(\"A1.B1\",\"NULL\"));\n    assertEquals(\"TestB2\",propertyList2.getString(\"A2.B2\",\"NULL\"));\n  }\n  finally {\n    obj1.endTransaction(txId1,false);\n  }\n  assertEquals(\"NULL\",propertyList1.getString(\"A1.B1\",\"NULL\"));\n  assertEquals(\"NULL\",propertyList2.getString(\"A2.B2\",\"NULL\"));\n  assertNull(obj1.getCurrentTransaction());\n  assertEquals(0,obj1.getUndoStackDepth());\n  assertEquals(0,obj2.getUndoStackDepth());\n  assertFalse(obj1.canUndo());\n  assertFalse(obj2.canUndo());\n  assertFalse(obj1.canRedo());\n  assertFalse(obj2.canRedo());\n  events1=obj1Listener.getEvents();\n  events2=obj2Listener.getEvents();\n  assertTrue(Arrays.equals(new String[]{END,UNDO_STATE_CHANGE1},events1));\n  assertTrue(Arrays.equals(new String[]{END,UNDO_STATE_CHANGE2},events2));\n  txId1=obj1.startTransaction(\"Test1\");\n  try {\n    assertNotNull(obj2.getCurrentTransaction());\n    propertyList1.setString(\"A1.B1\",\"TestB1\");\n    events1=obj1Listener.getEvents();\n    events2=obj2Listener.getEvents();\n    assertTrue(Arrays.equals(new String[]{START,UNDO_STATE_CHANGE1},events1));\n    assertTrue(Arrays.equals(new String[]{START,UNDO_STATE_CHANGE2},events2));\n    int txId2=obj2.startTransaction(\"Test2\");\n    try {\n      propertyList2.setString(\"A2.B2\",\"TestB2\");\n      events1=obj1Listener.getEvents();\n      events2=obj2Listener.getEvents();\n      assertTrue(Arrays.equals(new String[]{START,UNDO_STATE_CHANGE1},events1));\n      assertTrue(Arrays.equals(new String[]{START,UNDO_STATE_CHANGE2},events2));\n    }\n  finally {\n      obj2.endTransaction(txId2,true);\n    }\n    events1=obj1Listener.getEvents();\n    events2=obj2Listener.getEvents();\n    assertTrue(Arrays.equals(new String[]{},events1));\n    assertTrue(Arrays.equals(new String[]{},events2));\n    assertEquals(\"TestB1\",propertyList1.getString(\"A1.B1\",\"NULL\"));\n    assertEquals(\"TestB2\",propertyList2.getString(\"A2.B2\",\"NULL\"));\n  }\n  finally {\n    obj1.endTransaction(txId1,true);\n  }\n  assertEquals(\"TestB1\",propertyList1.getString(\"A1.B1\",\"NULL\"));\n  assertEquals(\"TestB2\",propertyList2.getString(\"A2.B2\",\"NULL\"));\n  assertNull(obj1.getCurrentTransaction());\n  assertEquals(1,obj1.getUndoStackDepth());\n  assertEquals(1,obj2.getUndoStackDepth());\n  assertTrue(obj1.canUndo());\n  assertTrue(obj2.canUndo());\n  assertFalse(obj1.canRedo());\n  assertFalse(obj2.canRedo());\n  events1=obj1Listener.getEvents();\n  events2=obj2Listener.getEvents();\n  assertTrue(Arrays.equals(new String[]{END,UNDO_STATE_CHANGE1},events1));\n  assertTrue(Arrays.equals(new String[]{END,UNDO_STATE_CHANGE2},events2));\n  assertEquals(\"obj1: Test1\\nobj2: Test2\",obj1.getUndoName());\n  assertEquals(\"obj1: Test1\\nobj2: Test2\",obj2.getUndoName());\n  assertEquals(\"\",obj1.getRedoName());\n  assertEquals(\"\",obj2.getRedoName());\n  obj1.undo();\n  assertFalse(obj1.canUndo());\n  assertFalse(obj2.canUndo());\n  assertTrue(obj1.canRedo());\n  assertTrue(obj2.canRedo());\n  events1=obj1Listener.getEvents();\n  events2=obj2Listener.getEvents();\n  assertTrue(Arrays.equals(new String[]{UNDO_STATE_CHANGE1},events1));\n  assertTrue(Arrays.equals(new String[]{UNDO_STATE_CHANGE2},events2));\n  assertEquals(\"NULL\",propertyList1.getString(\"A1.B1\",\"NULL\"));\n  assertEquals(\"NULL\",propertyList2.getString(\"A2.B2\",\"NULL\"));\n  assertEquals(\"\",obj1.getUndoName());\n  assertEquals(\"\",obj2.getUndoName());\n  assertEquals(\"obj1: Test1\\nobj2: Test2\",obj1.getRedoName());\n  assertEquals(\"obj1: Test1\\nobj2: Test2\",obj2.getRedoName());\n  obj1.redo();\n  assertTrue(obj1.canUndo());\n  assertTrue(obj2.canUndo());\n  assertFalse(obj1.canRedo());\n  assertFalse(obj2.canRedo());\n  events1=obj1Listener.getEvents();\n  events2=obj2Listener.getEvents();\n  assertTrue(Arrays.equals(new String[]{UNDO_STATE_CHANGE1},events1));\n  assertTrue(Arrays.equals(new String[]{UNDO_STATE_CHANGE2},events2));\n  assertEquals(\"TestB1\",propertyList1.getString(\"A1.B1\",\"NULL\"));\n  assertEquals(\"TestB2\",propertyList2.getString(\"A2.B2\",\"NULL\"));\n  try {\n    obj1.releaseSynchronizedDomainObject();\n  }\n catch (  LockException e) {\n    e.printStackTrace();\n    Assert.fail();\n  }\n  assertEquals(0,obj1.getUndoStackDepth());\n  assertEquals(0,obj2.getUndoStackDepth());\n  assertFalse(obj1.canUndo());\n  assertFalse(obj2.canUndo());\n  assertFalse(obj1.canRedo());\n  assertFalse(obj2.canRedo());\n  events1=obj1Listener.getEvents();\n  events2=obj2Listener.getEvents();\n  assertTrue(Arrays.equals(new String[]{UNDO_STATE_CHANGE1},events1));\n  assertTrue(Arrays.equals(new String[]{UNDO_STATE_CHANGE2},events2));\n  assertEquals(\"TestB1\",propertyList1.getString(\"A1.B1\",\"NULL\"));\n  assertEquals(\"TestB2\",propertyList2.getString(\"A2.B2\",\"NULL\"));\n  txId1=obj1.startTransaction(\"Test1\");\n  try {\n    assertNull(obj2.getCurrentTransaction());\n    propertyList1.setString(\"A1.C1\",\"TestC1\");\n    events1=obj1Listener.getEvents();\n    events2=obj2Listener.getEvents();\n    assertTrue(Arrays.equals(new String[]{START,UNDO_STATE_CHANGE1},events1));\n    assertTrue(Arrays.equals(new String[]{},events2));\n    int txId2=obj2.startTransaction(\"Test2\");\n    try {\n      propertyList2.setString(\"A2.C2\",\"TestC2\");\n      events1=obj1Listener.getEvents();\n      events2=obj2Listener.getEvents();\n      assertTrue(Arrays.equals(new String[]{},events1));\n      assertTrue(Arrays.equals(new String[]{START,UNDO_STATE_CHANGE2},events2));\n    }\n  finally {\n      obj2.endTransaction(txId2,true);\n    }\n    events1=obj1Listener.getEvents();\n    events2=obj2Listener.getEvents();\n    assertTrue(Arrays.equals(new String[]{},events1));\n    assertTrue(Arrays.equals(new String[]{END,UNDO_STATE_CHANGE2},events2));\n    assertEquals(\"TestC1\",propertyList1.getString(\"A1.C1\",\"NULL\"));\n    assertEquals(\"TestC2\",propertyList2.getString(\"A2.C2\",\"NULL\"));\n  }\n  finally {\n    obj1.endTransaction(txId1,false);\n  }\n  assertEquals(\"NULL\",propertyList1.getString(\"A1.C1\",\"NULL\"));\n  assertEquals(\"TestC2\",propertyList2.getString(\"A2.C2\",\"NULL\"));\n  assertNull(obj1.getCurrentTransaction());\n  assertEquals(0,obj1.getUndoStackDepth());\n  assertEquals(1,obj2.getUndoStackDepth());\n  assertFalse(obj1.canUndo());\n  assertTrue(obj2.canUndo());\n  assertFalse(obj1.canRedo());\n  assertFalse(obj2.canRedo());\n  events1=obj1Listener.getEvents();\n  events2=obj2Listener.getEvents();\n  assertTrue(Arrays.equals(new String[]{END,UNDO_STATE_CHANGE1},events1));\n  assertTrue(Arrays.equals(new String[]{},events2));\n  assertEquals(\"\",obj1.getUndoName());\n  assertEquals(\"obj2: Test2\",obj2.getUndoName());\n  assertEquals(\"\",obj1.getRedoName());\n  assertEquals(\"\",obj2.getRedoName());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1493,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9824,
        "startLineNumber" : 151,
        "startColumnNumber" : 1,
        "endLineNumber" : 450,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testAddSynchronizedDomainObject() throws IOException {\n  assertNull(obj1.getCurrentTransaction());\n  assertNull(obj2.getCurrentTransaction());\n  assertEquals(1,obj1.getUndoStackDepth());\n  assertEquals(1,obj2.getUndoStackDepth());\n  assertTrue(obj1.canUndo());\n  assertTrue(obj2.canUndo());\n  assertFalse(obj1.canRedo());\n  assertFalse(obj2.canRedo());\n  Transaction tx=obj1Listener.getLastTransaction();\n  obj1Listener.getEvents();\n  assertNotNull(tx);\n  tx=obj2Listener.getLastTransaction();\n  obj2Listener.getEvents();\n  assertNotNull(tx);\n  assertNull(obj1.getSynchronizedDomainObjects());\n  assertNull(obj2.getSynchronizedDomainObjects());\n  try {\n    obj1.addSynchronizedDomainObject(obj2);\n  }\n catch (  LockException e) {\n    e.printStackTrace();\n    Assert.fail(e.getMessage());\n  }\n  DomainObject[] synchronizedDomainObjects=obj1.getSynchronizedDomainObjects();\n  assertNotNull(synchronizedDomainObjects);\n  assertEquals(2,synchronizedDomainObjects.length);\n  assertEquals(obj1,synchronizedDomainObjects[0]);\n  assertEquals(obj2,synchronizedDomainObjects[1]);\n  assertArrayEquals(synchronizedDomainObjects,obj2.getSynchronizedDomainObjects());\n  assertEquals(0,obj1.getUndoStackDepth());\n  assertEquals(0,obj2.getUndoStackDepth());\n  assertFalse(obj1.canUndo());\n  assertFalse(obj2.canUndo());\n  assertFalse(obj1.canRedo());\n  assertFalse(obj2.canRedo());\n  String[] events1=obj1Listener.getEvents();\n  assertEquals(UNDO_STATE_CHANGE1,events1[events1.length - 1]);\n  String[] events2=obj2Listener.getEvents();\n  assertEquals(UNDO_STATE_CHANGE2,events2[events2.length - 1]);\n  int txId1=obj1.startTransaction(\"Test1\");\n  try {\n    assertNotNull(obj2.getCurrentTransaction());\n    propertyList1.setString(\"A1.B1\",\"TestB1\");\n    events1=obj1Listener.getEvents();\n    events2=obj2Listener.getEvents();\n    assertTrue(Arrays.equals(new String[]{START,UNDO_STATE_CHANGE1},events1));\n    assertTrue(Arrays.equals(new String[]{START,UNDO_STATE_CHANGE2},events2));\n    int txId2=obj2.startTransaction(\"Test2\");\n    try {\n      propertyList2.setString(\"A2.B2\",\"TestB2\");\n      events1=obj1Listener.getEvents();\n      events2=obj2Listener.getEvents();\n      assertTrue(Arrays.equals(new String[]{START,UNDO_STATE_CHANGE1},events1));\n      assertTrue(Arrays.equals(new String[]{START,UNDO_STATE_CHANGE2},events2));\n    }\n  finally {\n      obj2.endTransaction(txId2,true);\n    }\n    events1=obj1Listener.getEvents();\n    events2=obj2Listener.getEvents();\n    assertTrue(Arrays.equals(new String[]{},events1));\n    assertTrue(Arrays.equals(new String[]{},events2));\n    assertEquals(\"TestB1\",propertyList1.getString(\"A1.B1\",\"NULL\"));\n    assertEquals(\"TestB2\",propertyList2.getString(\"A2.B2\",\"NULL\"));\n  }\n  finally {\n    obj1.endTransaction(txId1,false);\n  }\n  assertEquals(\"NULL\",propertyList1.getString(\"A1.B1\",\"NULL\"));\n  assertEquals(\"NULL\",propertyList2.getString(\"A2.B2\",\"NULL\"));\n  assertNull(obj1.getCurrentTransaction());\n  assertEquals(0,obj1.getUndoStackDepth());\n  assertEquals(0,obj2.getUndoStackDepth());\n  assertFalse(obj1.canUndo());\n  assertFalse(obj2.canUndo());\n  assertFalse(obj1.canRedo());\n  assertFalse(obj2.canRedo());\n  events1=obj1Listener.getEvents();\n  events2=obj2Listener.getEvents();\n  assertTrue(Arrays.equals(new String[]{END,UNDO_STATE_CHANGE1},events1));\n  assertTrue(Arrays.equals(new String[]{END,UNDO_STATE_CHANGE2},events2));\n  txId1=obj1.startTransaction(\"Test1\");\n  try {\n    assertNotNull(obj2.getCurrentTransaction());\n    propertyList1.setString(\"A1.B1\",\"TestB1\");\n    events1=obj1Listener.getEvents();\n    events2=obj2Listener.getEvents();\n    assertTrue(Arrays.equals(new String[]{START,UNDO_STATE_CHANGE1},events1));\n    assertTrue(Arrays.equals(new String[]{START,UNDO_STATE_CHANGE2},events2));\n    int txId2=obj2.startTransaction(\"Test2\");\n    try {\n      propertyList2.setString(\"A2.B2\",\"TestB2\");\n      events1=obj1Listener.getEvents();\n      events2=obj2Listener.getEvents();\n      assertTrue(Arrays.equals(new String[]{START,UNDO_STATE_CHANGE1},events1));\n      assertTrue(Arrays.equals(new String[]{START,UNDO_STATE_CHANGE2},events2));\n    }\n  finally {\n      obj2.endTransaction(txId2,true);\n    }\n    events1=obj1Listener.getEvents();\n    events2=obj2Listener.getEvents();\n    assertTrue(Arrays.equals(new String[]{},events1));\n    assertTrue(Arrays.equals(new String[]{},events2));\n    assertEquals(\"TestB1\",propertyList1.getString(\"A1.B1\",\"NULL\"));\n    assertEquals(\"TestB2\",propertyList2.getString(\"A2.B2\",\"NULL\"));\n  }\n  finally {\n    obj1.endTransaction(txId1,true);\n  }\n  assertEquals(\"TestB1\",propertyList1.getString(\"A1.B1\",\"NULL\"));\n  assertEquals(\"TestB2\",propertyList2.getString(\"A2.B2\",\"NULL\"));\n  assertNull(obj1.getCurrentTransaction());\n  assertEquals(1,obj1.getUndoStackDepth());\n  assertEquals(1,obj2.getUndoStackDepth());\n  assertTrue(obj1.canUndo());\n  assertTrue(obj2.canUndo());\n  assertFalse(obj1.canRedo());\n  assertFalse(obj2.canRedo());\n  events1=obj1Listener.getEvents();\n  events2=obj2Listener.getEvents();\n  assertTrue(Arrays.equals(new String[]{END,UNDO_STATE_CHANGE1},events1));\n  assertTrue(Arrays.equals(new String[]{END,UNDO_STATE_CHANGE2},events2));\n  assertEquals(\"obj1: Test1\\nobj2: Test2\",obj1.getUndoName());\n  assertEquals(\"obj1: Test1\\nobj2: Test2\",obj2.getUndoName());\n  assertEquals(\"\",obj1.getRedoName());\n  assertEquals(\"\",obj2.getRedoName());\n  obj1.undo();\n  assertFalse(obj1.canUndo());\n  assertFalse(obj2.canUndo());\n  assertTrue(obj1.canRedo());\n  assertTrue(obj2.canRedo());\n  events1=obj1Listener.getEvents();\n  events2=obj2Listener.getEvents();\n  assertTrue(Arrays.equals(new String[]{UNDO_STATE_CHANGE1},events1));\n  assertTrue(Arrays.equals(new String[]{UNDO_STATE_CHANGE2},events2));\n  assertEquals(\"NULL\",propertyList1.getString(\"A1.B1\",\"NULL\"));\n  assertEquals(\"NULL\",propertyList2.getString(\"A2.B2\",\"NULL\"));\n  assertEquals(\"\",obj1.getUndoName());\n  assertEquals(\"\",obj2.getUndoName());\n  assertEquals(\"obj1: Test1\\nobj2: Test2\",obj1.getRedoName());\n  assertEquals(\"obj1: Test1\\nobj2: Test2\",obj2.getRedoName());\n  obj1.redo();\n  assertTrue(obj1.canUndo());\n  assertTrue(obj2.canUndo());\n  assertFalse(obj1.canRedo());\n  assertFalse(obj2.canRedo());\n  events1=obj1Listener.getEvents();\n  events2=obj2Listener.getEvents();\n  assertTrue(Arrays.equals(new String[]{UNDO_STATE_CHANGE1},events1));\n  assertTrue(Arrays.equals(new String[]{UNDO_STATE_CHANGE2},events2));\n  assertEquals(\"TestB1\",propertyList1.getString(\"A1.B1\",\"NULL\"));\n  assertEquals(\"TestB2\",propertyList2.getString(\"A2.B2\",\"NULL\"));\n  try {\n    obj1.releaseSynchronizedDomainObject();\n  }\n catch (  LockException e) {\n    e.printStackTrace();\n    Assert.fail();\n  }\n  assertEquals(0,obj1.getUndoStackDepth());\n  assertEquals(0,obj2.getUndoStackDepth());\n  assertFalse(obj1.canUndo());\n  assertFalse(obj2.canUndo());\n  assertFalse(obj1.canRedo());\n  assertFalse(obj2.canRedo());\n  events1=obj1Listener.getEvents();\n  events2=obj2Listener.getEvents();\n  assertTrue(Arrays.equals(new String[]{UNDO_STATE_CHANGE1},events1));\n  assertTrue(Arrays.equals(new String[]{UNDO_STATE_CHANGE2},events2));\n  assertEquals(\"TestB1\",propertyList1.getString(\"A1.B1\",\"NULL\"));\n  assertEquals(\"TestB2\",propertyList2.getString(\"A2.B2\",\"NULL\"));\n  txId1=obj1.startTransaction(\"Test1\");\n  try {\n    assertNull(obj2.getCurrentTransaction());\n    propertyList1.setString(\"A1.C1\",\"TestC1\");\n    events1=obj1Listener.getEvents();\n    events2=obj2Listener.getEvents();\n    assertTrue(Arrays.equals(new String[]{START,UNDO_STATE_CHANGE1},events1));\n    assertTrue(Arrays.equals(new String[]{},events2));\n    int txId2=obj2.startTransaction(\"Test2\");\n    try {\n      propertyList2.setString(\"A2.C2\",\"TestC2\");\n      events1=obj1Listener.getEvents();\n      events2=obj2Listener.getEvents();\n      assertTrue(Arrays.equals(new String[]{},events1));\n      assertTrue(Arrays.equals(new String[]{START,UNDO_STATE_CHANGE2},events2));\n    }\n  finally {\n      obj2.endTransaction(txId2,true);\n    }\n    events1=obj1Listener.getEvents();\n    events2=obj2Listener.getEvents();\n    assertTrue(Arrays.equals(new String[]{},events1));\n    assertTrue(Arrays.equals(new String[]{END,UNDO_STATE_CHANGE2},events2));\n    assertEquals(\"TestC1\",propertyList1.getString(\"A1.C1\",\"NULL\"));\n    assertEquals(\"TestC2\",propertyList2.getString(\"A2.C2\",\"NULL\"));\n  }\n  finally {\n    obj1.endTransaction(txId1,false);\n  }\n  assertEquals(\"NULL\",propertyList1.getString(\"A1.C1\",\"NULL\"));\n  assertEquals(\"TestC2\",propertyList2.getString(\"A2.C2\",\"NULL\"));\n  assertNull(obj1.getCurrentTransaction());\n  assertEquals(0,obj1.getUndoStackDepth());\n  assertEquals(1,obj2.getUndoStackDepth());\n  assertFalse(obj1.canUndo());\n  assertTrue(obj2.canUndo());\n  assertFalse(obj1.canRedo());\n  assertFalse(obj2.canRedo());\n  events1=obj1Listener.getEvents();\n  events2=obj2Listener.getEvents();\n  assertTrue(Arrays.equals(new String[]{END,UNDO_STATE_CHANGE1},events1));\n  assertTrue(Arrays.equals(new String[]{},events2));\n  assertEquals(\"\",obj1.getUndoName());\n  assertEquals(\"obj2: Test2\",obj2.getUndoName());\n  assertEquals(\"\",obj1.getRedoName());\n  assertEquals(\"\",obj2.getRedoName());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1501,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 201,
        "startColumnNumber" : 2,
        "endLineNumber" : 201,
        "endColumnNumber" : 64
      },
      "nodeContext" : "assertEquals(UNDO_STATE_CHANGE1,events1[events1.length - 1]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    },
    "tokenLength" : 4,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 201,
    "startColumnNumber" : 43,
    "endLineNumber" : 201,
    "endColumnNumber" : 61
  } ],
  "layoutRelationDataList" : [ ]
}