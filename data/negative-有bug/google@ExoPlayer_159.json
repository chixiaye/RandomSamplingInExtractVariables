{
  "id" : 159,
  "expression" : "result != NO_ERROR",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "/extensions/vp9/src/main/java/com/google/android/exoplayer2/ext/vp9/VpxDecoder.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "result != NO_ERROR",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 142,
      "startColumnNumber" : 8,
      "endLineNumber" : 142,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 407,
        "startLineNumber" : 142,
        "startColumnNumber" : 4,
        "endLineNumber" : 150,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (result != NO_ERROR) {\n  if (result == DRM_ERROR) {\n    String message=\"Drm error: \" + vpxGetErrorMessage(vpxDecContext);\n    CryptoException cause=new CryptoException(vpxGetErrorCode(vpxDecContext),message);\n    return new VpxDecoderException(message,cause);\n  }\n else {\n    return new VpxDecoderException(\"Decode error: \" + vpxGetErrorMessage(vpxDecContext));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 48,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2288,
        "startLineNumber" : 119,
        "startColumnNumber" : 92,
        "endLineNumber" : 177,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (reset && lastSupplementalData != null) {\n    lastSupplementalData.clear();\n  }\n  ByteBuffer inputData=Util.castNonNull(inputBuffer.data);\n  int inputSize=inputData.limit();\n  CryptoInfo cryptoInfo=inputBuffer.cryptoInfo;\n  final long result=inputBuffer.isEncrypted() ? vpxSecureDecode(vpxDecContext,inputData,inputSize,cryptoConfig,cryptoInfo.mode,Assertions.checkNotNull(cryptoInfo.key),Assertions.checkNotNull(cryptoInfo.iv),cryptoInfo.numSubSamples,cryptoInfo.numBytesOfClearData,cryptoInfo.numBytesOfEncryptedData) : vpxDecode(vpxDecContext,inputData,inputSize);\n  if (result != NO_ERROR) {\n    if (result == DRM_ERROR) {\n      String message=\"Drm error: \" + vpxGetErrorMessage(vpxDecContext);\n      CryptoException cause=new CryptoException(vpxGetErrorCode(vpxDecContext),message);\n      return new VpxDecoderException(message,cause);\n    }\n else {\n      return new VpxDecoderException(\"Decode error: \" + vpxGetErrorMessage(vpxDecContext));\n    }\n  }\n  if (inputBuffer.hasSupplementalData()) {\n    ByteBuffer supplementalData=Assertions.checkNotNull(inputBuffer.supplementalData);\n    int size=supplementalData.remaining();\n    if (size > 0) {\n      if (lastSupplementalData == null || lastSupplementalData.capacity() < size) {\n        lastSupplementalData=ByteBuffer.allocate(size);\n      }\n else {\n        lastSupplementalData.clear();\n      }\n      lastSupplementalData.put(supplementalData);\n      lastSupplementalData.flip();\n    }\n  }\n  if (!inputBuffer.isDecodeOnly()) {\n    outputBuffer.init(inputBuffer.timeUs,outputMode,lastSupplementalData);\n    int getFrameResult=vpxGetFrame(vpxDecContext,outputBuffer);\n    if (getFrameResult == 1) {\n      outputBuffer.addFlag(C.BUFFER_FLAG_DECODE_ONLY);\n    }\n else     if (getFrameResult == -1) {\n      return new VpxDecoderException(\"Buffer initialization failed.\");\n    }\n    outputBuffer.format=inputBuffer.format;\n  }\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 246,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2442,
        "startLineNumber" : 116,
        "startColumnNumber" : 2,
        "endLineNumber" : 177,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override @Nullable protected VpxDecoderException decode(DecoderInputBuffer inputBuffer,VideoDecoderOutputBuffer outputBuffer,boolean reset){\n  if (reset && lastSupplementalData != null) {\n    lastSupplementalData.clear();\n  }\n  ByteBuffer inputData=Util.castNonNull(inputBuffer.data);\n  int inputSize=inputData.limit();\n  CryptoInfo cryptoInfo=inputBuffer.cryptoInfo;\n  final long result=inputBuffer.isEncrypted() ? vpxSecureDecode(vpxDecContext,inputData,inputSize,cryptoConfig,cryptoInfo.mode,Assertions.checkNotNull(cryptoInfo.key),Assertions.checkNotNull(cryptoInfo.iv),cryptoInfo.numSubSamples,cryptoInfo.numBytesOfClearData,cryptoInfo.numBytesOfEncryptedData) : vpxDecode(vpxDecContext,inputData,inputSize);\n  if (result != NO_ERROR) {\n    if (result == DRM_ERROR) {\n      String message=\"Drm error: \" + vpxGetErrorMessage(vpxDecContext);\n      CryptoException cause=new CryptoException(vpxGetErrorCode(vpxDecContext),message);\n      return new VpxDecoderException(message,cause);\n    }\n else {\n      return new VpxDecoderException(\"Decode error: \" + vpxGetErrorMessage(vpxDecContext));\n    }\n  }\n  if (inputBuffer.hasSupplementalData()) {\n    ByteBuffer supplementalData=Assertions.checkNotNull(inputBuffer.supplementalData);\n    int size=supplementalData.remaining();\n    if (size > 0) {\n      if (lastSupplementalData == null || lastSupplementalData.capacity() < size) {\n        lastSupplementalData=ByteBuffer.allocate(size);\n      }\n else {\n        lastSupplementalData.clear();\n      }\n      lastSupplementalData.put(supplementalData);\n      lastSupplementalData.flip();\n    }\n  }\n  if (!inputBuffer.isDecodeOnly()) {\n    outputBuffer.init(inputBuffer.timeUs,outputMode,lastSupplementalData);\n    int getFrameResult=vpxGetFrame(vpxDecContext,outputBuffer);\n    if (getFrameResult == 1) {\n      outputBuffer.addFlag(C.BUFFER_FLAG_DECODE_ONLY);\n    }\n else     if (getFrameResult == -1) {\n      return new VpxDecoderException(\"Buffer initialization failed.\");\n    }\n    outputBuffer.format=inputBuffer.format;\n  }\n  return null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 266,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 407,
        "startLineNumber" : 142,
        "startColumnNumber" : 4,
        "endLineNumber" : 150,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (result != NO_ERROR) {\n  if (result == DRM_ERROR) {\n    String message=\"Drm error: \" + vpxGetErrorMessage(vpxDecContext);\n    CryptoException cause=new CryptoException(vpxGetErrorCode(vpxDecContext),message);\n    return new VpxDecoderException(message,cause);\n  }\n else {\n    return new VpxDecoderException(\"Decode error: \" + vpxGetErrorMessage(vpxDecContext));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 48,
      "astHeight" : 9
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 142,
    "startColumnNumber" : 8,
    "endLineNumber" : 142,
    "endColumnNumber" : 26
  } ],
  "layoutRelationDataList" : [ ]
}