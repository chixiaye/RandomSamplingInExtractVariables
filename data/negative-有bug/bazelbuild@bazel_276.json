{
  "id" : 276,
  "expression" : "new IllegalArgumentException(\"path must not be absolute: '\" + path + \"'\")",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/main/java/com/google/devtools/build/lib/rules/java/JavaUtil.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new IllegalArgumentException(\"path must not be absolute: '\" + path + \"'\")",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 73,
      "startLineNumber" : 80,
      "startColumnNumber" : 12,
      "endLineNumber" : 80,
      "endColumnNumber" : 85
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 80,
        "startColumnNumber" : 6,
        "endLineNumber" : 80,
        "endColumnNumber" : 86
      },
      "nodeContext" : "throw new IllegalArgumentException(\"path must not be absolute: '\" + path + \"'\");\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 79,
        "startColumnNumber" : 27,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  throw new IllegalArgumentException(\"path must not be absolute: '\" + path + \"'\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (path.isAbsolute()) {\n  throw new IllegalArgumentException(\"path must not be absolute: '\" + path + \"'\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1610,
        "startLineNumber" : 78,
        "startColumnNumber" : 57,
        "endLineNumber" : 117,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (path.isAbsolute()) {\n    throw new IllegalArgumentException(\"path must not be absolute: '\" + path + \"'\");\n  }\n  int rootIndex=Iterables.indexOf(path.segments(),KNOWN_SOURCE_ROOTS::contains);\n  if (rootIndex == -1) {\n    return -1;\n  }\n  final boolean isSrc=\"src\".equals(path.getSegment(rootIndex));\n  int checkMavenIndex=isSrc ? rootIndex : -1;\n  if (rootIndex == 0 || isSrc) {\n    for (int i=rootIndex + 1, max=path.segmentCount() - 2; i <= max; i++) {\n      String segment=path.getSegment(i);\n      if (\"src\".equals(segment) || (isSrc && (\"javatests\".equals(segment) || \"java\".equals(segment)))) {\n        String next=path.getSegment(i + 1);\n        if (\"com\".equals(next) || \"org\".equals(next) || \"net\".equals(next)) {\n          rootIndex=i;\n        }\n else         if (\"src\".equals(segment)) {\n          checkMavenIndex=i;\n        }\n        break;\n      }\n    }\n  }\n  if (checkMavenIndex >= 0 && checkMavenIndex + 2 < path.segmentCount()) {\n    String next=path.getSegment(checkMavenIndex + 1);\n    if (\"main\".equals(next) || \"test\".equals(next)) {\n      next=path.getSegment(checkMavenIndex + 2);\n      if (\"java\".equals(next) || \"resources\".equals(next)) {\n        rootIndex=checkMavenIndex + 2;\n      }\n    }\n  }\n  return rootIndex;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 218,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2398,
        "startLineNumber" : 66,
        "startColumnNumber" : 2,
        "endLineNumber" : 117,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Finds the index of the segment in a Java path fragment that precedes the source root. Starts from the first \"java\" or \"javatests\" or \"src\" or \"testsrc\" segment. If the found item was \"src\", check if this is followed by \"main\" or \"test\" and then \"java\" or \"resources\" (maven layout). If the found item was \"src\", or \"java\"/\"javatests\" at the first segment, check for a nested root directory (src, java or javatests). A nested root must be followed by (com|net|org), or matching maven structure for nested \"src\", to be accepted, to avoid false positives.\n * @param path a Java source dir or file path\n * @return the index of the java segment or -1 iff no java segment was found.\n */\nprivate static int javaSegmentIndex(PathFragment path){\n  if (path.isAbsolute()) {\n    throw new IllegalArgumentException(\"path must not be absolute: '\" + path + \"'\");\n  }\n  int rootIndex=Iterables.indexOf(path.segments(),KNOWN_SOURCE_ROOTS::contains);\n  if (rootIndex == -1) {\n    return -1;\n  }\n  final boolean isSrc=\"src\".equals(path.getSegment(rootIndex));\n  int checkMavenIndex=isSrc ? rootIndex : -1;\n  if (rootIndex == 0 || isSrc) {\n    for (int i=rootIndex + 1, max=path.segmentCount() - 2; i <= max; i++) {\n      String segment=path.getSegment(i);\n      if (\"src\".equals(segment) || (isSrc && (\"javatests\".equals(segment) || \"java\".equals(segment)))) {\n        String next=path.getSegment(i + 1);\n        if (\"com\".equals(next) || \"org\".equals(next) || \"net\".equals(next)) {\n          rootIndex=i;\n        }\n else         if (\"src\".equals(segment)) {\n          checkMavenIndex=i;\n        }\n        break;\n      }\n    }\n  }\n  if (checkMavenIndex >= 0 && checkMavenIndex + 2 < path.segmentCount()) {\n    String next=path.getSegment(checkMavenIndex + 1);\n    if (\"main\".equals(next) || \"test\".equals(next)) {\n      next=path.getSegment(checkMavenIndex + 2);\n      if (\"java\".equals(next) || \"resources\".equals(next)) {\n        rootIndex=checkMavenIndex + 2;\n      }\n    }\n  }\n  return rootIndex;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 228,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 80,
        "startColumnNumber" : 6,
        "endLineNumber" : 80,
        "endColumnNumber" : 86
      },
      "nodeContext" : "throw new IllegalArgumentException(\"path must not be absolute: '\" + path + \"'\");\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 9,
    "type" : "java.lang.IllegalArgumentException"
  } ],
  "positionList" : [ {
    "charLength" : 73,
    "startLineNumber" : 80,
    "startColumnNumber" : 12,
    "endLineNumber" : 80,
    "endColumnNumber" : 85
  } ],
  "layoutRelationDataList" : [ ]
}