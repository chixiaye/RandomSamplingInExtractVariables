{
  "id" : 21,
  "expression" : "BuilderFactory.DOUBLE.build(\"+inf\".getBytes())",
  "projectName" : "redis@jedis",
  "commitID" : "eaa5b16af93d575cd1f340c2cd23595dc29d5638",
  "filePath" : "/src/test/java/redis/clients/jedis/BuilderTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "BuilderFactory.DOUBLE.build(\"+inf\".getBytes())",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 46,
      "startLineNumber" : 16,
      "startColumnNumber" : 12,
      "endLineNumber" : 16,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 8,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 16,
        "startColumnNumber" : 4,
        "endLineNumber" : 16,
        "endColumnNumber" : 58
      },
      "nodeContext" : "build=BuilderFactory.DOUBLE.build(\"+inf\".getBytes())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 16,
        "startColumnNumber" : 4,
        "endLineNumber" : 16,
        "endColumnNumber" : 59
      },
      "nodeContext" : "build=BuilderFactory.DOUBLE.build(\"+inf\".getBytes());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 764,
        "startLineNumber" : 11,
        "startColumnNumber" : 28,
        "endLineNumber" : 27,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Double build=BuilderFactory.DOUBLE.build(\"1.0\".getBytes());\n  assertEquals(Double.valueOf(1.0),build);\n  build=BuilderFactory.DOUBLE.build(\"inf\".getBytes());\n  assertEquals(Double.valueOf(Double.POSITIVE_INFINITY),build);\n  build=BuilderFactory.DOUBLE.build(\"+inf\".getBytes());\n  assertEquals(Double.valueOf(Double.POSITIVE_INFINITY),build);\n  build=BuilderFactory.DOUBLE.build(\"-inf\".getBytes());\n  assertEquals(Double.valueOf(Double.NEGATIVE_INFINITY),build);\n  try {\n    BuilderFactory.DOUBLE.build(\"\".getBytes());\n    Assert.fail(\"Empty String should throw NumberFormatException.\");\n  }\n catch (  NumberFormatException expected) {\n    Assert.assertEquals(\"empty String\",expected.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 115,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 799,
        "startLineNumber" : 10,
        "startColumnNumber" : 2,
        "endLineNumber" : 27,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void buildDouble(){\n  Double build=BuilderFactory.DOUBLE.build(\"1.0\".getBytes());\n  assertEquals(Double.valueOf(1.0),build);\n  build=BuilderFactory.DOUBLE.build(\"inf\".getBytes());\n  assertEquals(Double.valueOf(Double.POSITIVE_INFINITY),build);\n  build=BuilderFactory.DOUBLE.build(\"+inf\".getBytes());\n  assertEquals(Double.valueOf(Double.POSITIVE_INFINITY),build);\n  build=BuilderFactory.DOUBLE.build(\"-inf\".getBytes());\n  assertEquals(Double.valueOf(Double.NEGATIVE_INFINITY),build);\n  try {\n    BuilderFactory.DOUBLE.build(\"\".getBytes());\n    Assert.fail(\"Empty String should throw NumberFormatException.\");\n  }\n catch (  NumberFormatException expected) {\n    Assert.assertEquals(\"empty String\",expected.getMessage());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 121,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 16,
        "startColumnNumber" : 4,
        "endLineNumber" : 16,
        "endColumnNumber" : 59
      },
      "nodeContext" : "build=BuilderFactory.DOUBLE.build(\"+inf\".getBytes());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 5,
    "type" : "java.lang.Double"
  } ],
  "positionList" : [ {
    "charLength" : 46,
    "startLineNumber" : 16,
    "startColumnNumber" : 12,
    "endLineNumber" : 16,
    "endColumnNumber" : 58
  } ],
  "layoutRelationDataList" : [ ]
}