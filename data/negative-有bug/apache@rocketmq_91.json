{
  "id" : 91,
  "expression" : "i < MESSAGE_COUNT",
  "projectName" : "apache@rocketmq",
  "commitID" : "7692d466e1fda6c29d52a61617cab1d82de8b884",
  "filePath" : "/test/src/test/java/org/apache/rocketmq/test/container/ScheduleSlaveActingMasterIT.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i < MESSAGE_COUNT",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 101,
      "startColumnNumber" : 24,
      "endLineNumber" : 101,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 339,
        "startLineNumber" : 101,
        "startColumnNumber" : 8,
        "endLineNumber" : 108,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < MESSAGE_COUNT; i++) {\n  Message msg=new Message(topic,MESSAGE_BODY);\n  msg.setDelayTimeLevel(4);\n  SendResult sendResult=producer.send(msg,messageQueue);\n  if (sendResult.getSendStatus() == SendStatus.SEND_OK) {\n    sendSuccess++;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 49,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2735,
        "startLineNumber" : 80,
        "startColumnNumber" : 60,
        "endLineNumber" : 136,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  awaitUntilSlaveOK();\n  String topic=ScheduleSlaveActingMasterIT.class.getSimpleName() + random.nextInt(65535);\n  createTopic(topic);\n  DefaultMQPushConsumer pushConsumer=createPushConsumer(CONSUME_GROUP);\n  pushConsumer.subscribe(topic,\"*\");\n  AtomicInteger receivedMsgCount=new AtomicInteger(0);\n  AtomicInteger inTimeMsgCount=new AtomicInteger(0);\n  pushConsumer.registerMessageListener((MessageListenerConcurrently)(msgs,context) -> {\n    long period=System.currentTimeMillis() - msgs.get(0).getBornTimestamp();\n    if (Math.abs(period - 30000) <= 4000) {\n      inTimeMsgCount.addAndGet(msgs.size());\n    }\n    receivedMsgCount.addAndGet(msgs.size());\n    msgs.forEach(x -> System.out.printf(x + \"%n\"));\n    return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n  }\n);\n  pushConsumer.start();\n  MessageQueue messageQueue=new MessageQueue(topic,master1With3Replicas.getBrokerConfig().getBrokerName(),0);\n  int sendSuccess=0;\n  for (int i=0; i < MESSAGE_COUNT; i++) {\n    Message msg=new Message(topic,MESSAGE_BODY);\n    msg.setDelayTimeLevel(4);\n    SendResult sendResult=producer.send(msg,messageQueue);\n    if (sendResult.getSendStatus() == SendStatus.SEND_OK) {\n      sendSuccess++;\n    }\n  }\n  final int finalSendSuccess=sendSuccess;\n  await().atMost(Duration.ofMinutes(1)).until(() -> finalSendSuccess >= MESSAGE_COUNT);\n  System.out.printf(\"send success%n\");\n  isolateBroker(master1With3Replicas);\n  brokerContainer1.removeBroker(new BrokerIdentity(master1With3Replicas.getBrokerConfig().getBrokerClusterName(),master1With3Replicas.getBrokerConfig().getBrokerName(),master1With3Replicas.getBrokerConfig().getBrokerId()));\n  System.out.printf(\"Remove master1%n\");\n  await().atMost(Duration.ofMinutes(1)).until(() -> receivedMsgCount.get() >= MESSAGE_COUNT && inTimeMsgCount.get() >= MESSAGE_COUNT * 0.95);\n  System.out.printf(\"consumer received %d msg, %d in time%n\",receivedMsgCount.get(),inTimeMsgCount.get());\n  pushConsumer.shutdown();\n  master1With3Replicas=brokerContainer1.addBroker(master1With3Replicas.getBrokerConfig(),master1With3Replicas.getMessageStoreConfig());\n  master1With3Replicas.start();\n  cancelIsolatedBroker(master1With3Replicas);\n  System.out.printf(\"Add back master1%n\");\n  awaitUntilSlaveOK();\n  Thread.sleep(30000);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 336,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2802,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 136,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testLocalActing_delayMsg() throws Exception {\n  awaitUntilSlaveOK();\n  String topic=ScheduleSlaveActingMasterIT.class.getSimpleName() + random.nextInt(65535);\n  createTopic(topic);\n  DefaultMQPushConsumer pushConsumer=createPushConsumer(CONSUME_GROUP);\n  pushConsumer.subscribe(topic,\"*\");\n  AtomicInteger receivedMsgCount=new AtomicInteger(0);\n  AtomicInteger inTimeMsgCount=new AtomicInteger(0);\n  pushConsumer.registerMessageListener((MessageListenerConcurrently)(msgs,context) -> {\n    long period=System.currentTimeMillis() - msgs.get(0).getBornTimestamp();\n    if (Math.abs(period - 30000) <= 4000) {\n      inTimeMsgCount.addAndGet(msgs.size());\n    }\n    receivedMsgCount.addAndGet(msgs.size());\n    msgs.forEach(x -> System.out.printf(x + \"%n\"));\n    return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n  }\n);\n  pushConsumer.start();\n  MessageQueue messageQueue=new MessageQueue(topic,master1With3Replicas.getBrokerConfig().getBrokerName(),0);\n  int sendSuccess=0;\n  for (int i=0; i < MESSAGE_COUNT; i++) {\n    Message msg=new Message(topic,MESSAGE_BODY);\n    msg.setDelayTimeLevel(4);\n    SendResult sendResult=producer.send(msg,messageQueue);\n    if (sendResult.getSendStatus() == SendStatus.SEND_OK) {\n      sendSuccess++;\n    }\n  }\n  final int finalSendSuccess=sendSuccess;\n  await().atMost(Duration.ofMinutes(1)).until(() -> finalSendSuccess >= MESSAGE_COUNT);\n  System.out.printf(\"send success%n\");\n  isolateBroker(master1With3Replicas);\n  brokerContainer1.removeBroker(new BrokerIdentity(master1With3Replicas.getBrokerConfig().getBrokerClusterName(),master1With3Replicas.getBrokerConfig().getBrokerName(),master1With3Replicas.getBrokerConfig().getBrokerId()));\n  System.out.printf(\"Remove master1%n\");\n  await().atMost(Duration.ofMinutes(1)).until(() -> receivedMsgCount.get() >= MESSAGE_COUNT && inTimeMsgCount.get() >= MESSAGE_COUNT * 0.95);\n  System.out.printf(\"consumer received %d msg, %d in time%n\",receivedMsgCount.get(),inTimeMsgCount.get());\n  pushConsumer.shutdown();\n  master1With3Replicas=brokerContainer1.addBroker(master1With3Replicas.getBrokerConfig(),master1With3Replicas.getMessageStoreConfig());\n  master1With3Replicas.start();\n  cancelIsolatedBroker(master1With3Replicas);\n  System.out.printf(\"Add back master1%n\");\n  awaitUntilSlaveOK();\n  Thread.sleep(30000);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 344,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 339,
        "startLineNumber" : 101,
        "startColumnNumber" : 8,
        "endLineNumber" : 108,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < MESSAGE_COUNT; i++) {\n  Message msg=new Message(topic,MESSAGE_BODY);\n  msg.setDelayTimeLevel(4);\n  SendResult sendResult=producer.send(msg,messageQueue);\n  if (sendResult.getSendStatus() == SendStatus.SEND_OK) {\n    sendSuccess++;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 49,
      "astHeight" : 7
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 101,
    "startColumnNumber" : 24,
    "endLineNumber" : 101,
    "endColumnNumber" : 41
  } ],
  "layoutRelationDataList" : [ ]
}