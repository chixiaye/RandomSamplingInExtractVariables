{
  "id" : 333,
  "expression" : "i < size",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/tool/src/org/antlr/v4/codegen/model/SerializedJavaATN.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i < size",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 26,
      "startColumnNumber" : 18,
      "endLineNumber" : 26,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 316,
        "startLineNumber" : 26,
        "startColumnNumber" : 2,
        "endLineNumber" : 33,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < size; i+=segmentLimit) {\n  int segmentSize=Math.min(i + segmentLimit,size) - i;\n  String[] segment=new String[segmentSize];\n  segments[segmentIndex++]=segment;\n  for (int j=0; j < segmentSize; j++) {\n    segment[j]=target.encodeInt16AsCharEscape(data.get(i + j));\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 72,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 803,
        "startLineNumber" : 15,
        "startColumnNumber" : 63,
        "endLineNumber" : 36,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  super(factory);\n  IntegerList data=ATNSerializer.getSerialized(atn);\n  data=ATNDeserializer.encodeIntsWith16BitWords(data);\n  int size=data.size();\n  Target target=factory.getGenerator().getTarget();\n  int segmentLimit=target.getSerializedATNSegmentLimit();\n  segments=new String[(int)(((long)size + segmentLimit - 1) / segmentLimit)][];\n  int segmentIndex=0;\n  for (int i=0; i < size; i+=segmentLimit) {\n    int segmentSize=Math.min(i + segmentLimit,size) - i;\n    String[] segment=new String[segmentSize];\n    segments[segmentIndex++]=segment;\n    for (int j=0; j < segmentSize; j++) {\n      segment[j]=target.encodeInt16AsCharEscape(data.get(i + j));\n    }\n  }\n  serializedAsString=segments[0];\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 148,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 865,
        "startLineNumber" : 15,
        "startColumnNumber" : 1,
        "endLineNumber" : 36,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public SerializedJavaATN(OutputModelFactory factory,ATN atn){\n  super(factory);\n  IntegerList data=ATNSerializer.getSerialized(atn);\n  data=ATNDeserializer.encodeIntsWith16BitWords(data);\n  int size=data.size();\n  Target target=factory.getGenerator().getTarget();\n  int segmentLimit=target.getSerializedATNSegmentLimit();\n  segments=new String[(int)(((long)size + segmentLimit - 1) / segmentLimit)][];\n  int segmentIndex=0;\n  for (int i=0; i < size; i+=segmentLimit) {\n    int segmentSize=Math.min(i + segmentLimit,size) - i;\n    String[] segment=new String[segmentSize];\n    segments[segmentIndex++]=segment;\n    for (int j=0; j < segmentSize; j++) {\n      segment[j]=target.encodeInt16AsCharEscape(data.get(i + j));\n    }\n  }\n  serializedAsString=segments[0];\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 159,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 316,
        "startLineNumber" : 26,
        "startColumnNumber" : 2,
        "endLineNumber" : 33,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < size; i+=segmentLimit) {\n  int segmentSize=Math.min(i + segmentLimit,size) - i;\n  String[] segment=new String[segmentSize];\n  segments[segmentIndex++]=segment;\n  for (int j=0; j < segmentSize; j++) {\n    segment[j]=target.encodeInt16AsCharEscape(data.get(i + j));\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 72,
      "astHeight" : 10
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 26,
    "startColumnNumber" : 18,
    "endLineNumber" : 26,
    "endColumnNumber" : 26
  } ],
  "layoutRelationDataList" : [ ]
}