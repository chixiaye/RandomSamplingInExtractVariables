{
  "id" : 234,
  "expression" : "from.getDirectoryEntries()",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/main/java/com/google/devtools/build/lib/vfs/FileSystemUtils.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "from.getDirectoryEntries()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 569,
      "startColumnNumber" : 31,
      "endLineNumber" : 569,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 569,
        "startColumnNumber" : 21,
        "endLineNumber" : 569,
        "endColumnNumber" : 57
      },
      "nodeContext" : "entries=from.getDirectoryEntries()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 569,
        "startColumnNumber" : 4,
        "endLineNumber" : 569,
        "endColumnNumber" : 58
      },
      "nodeContext" : "Collection<Path> entries=from.getDirectoryEntries();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 600,
        "startLineNumber" : 564,
        "startColumnNumber" : 25,
        "endLineNumber" : 581,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (to.startsWith(from)) {\n    throw new IllegalArgumentException(to + \" is a subdirectory of \" + from);\n  }\n  Collection<Path> entries=from.getDirectoryEntries();\n  for (  Path entry : entries) {\n    Path toPath=to.getChild(entry.getBaseName());\n    if (!followSymlinks.toBoolean() && entry.isSymbolicLink()) {\n      FileSystemUtils.ensureSymbolicLink(toPath,entry.readSymbolicLink());\n    }\n else     if (entry.isFile()) {\n      copyFile(entry,toPath);\n    }\n else {\n      toPath.createDirectory();\n      copyTreesBelow(entry,toPath,followSymlinks);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 83,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1404,
        "startLineNumber" : 549,
        "startColumnNumber" : 2,
        "endLineNumber" : 581,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Copies all dir trees under a given 'from' dir to location 'to', while overwriting all files in the potentially existing 'to'. Resolves symbolic links if  {@code followSymlinks ==Symlinks#FOLLOW}. Otherwise copies symlinks as-is. <p>The source and the destination must be non-overlapping, otherwise an IllegalArgumentException will be thrown. This method cannot be used to copy a dir tree to a sub tree of itself. <p>If no error occurs, the method returns normally. If the given 'from' does not exist, a FileNotFoundException is thrown. An IOException is thrown when other erroneous situations occur. (e.g. read errors)\n */\n@ThreadSafe public static void copyTreesBelow(Path from,Path to,Symlinks followSymlinks) throws IOException {\n  if (to.startsWith(from)) {\n    throw new IllegalArgumentException(to + \" is a subdirectory of \" + from);\n  }\n  Collection<Path> entries=from.getDirectoryEntries();\n  for (  Path entry : entries) {\n    Path toPath=to.getChild(entry.getBaseName());\n    if (!followSymlinks.toBoolean() && entry.isSymbolicLink()) {\n      FileSystemUtils.ensureSymbolicLink(toPath,entry.readSymbolicLink());\n    }\n else     if (entry.isFile()) {\n      copyFile(entry,toPath);\n    }\n else {\n      toPath.createDirectory();\n      copyTreesBelow(entry,toPath,followSymlinks);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 105,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 569,
        "startColumnNumber" : 4,
        "endLineNumber" : 569,
        "endColumnNumber" : 58
      },
      "nodeContext" : "Collection<Path> entries=from.getDirectoryEntries();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.util.Collection<com.google.devtools.build.lib.vfs.Path>"
  } ],
  "positionList" : [ {
    "charLength" : 26,
    "startLineNumber" : 569,
    "startColumnNumber" : 31,
    "endLineNumber" : 569,
    "endColumnNumber" : 57
  } ],
  "layoutRelationDataList" : [ ]
}