{
  "id" : 26,
  "expression" : "10",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-broker/src/test/java/org/apache/pulsar/broker/service/schema/PartitionedTopicsSchemaTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "10",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 53,
      "startColumnNumber" : 16,
      "endLineNumber" : 53,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 6,
        "startLineNumber" : 53,
        "startColumnNumber" : 12,
        "endLineNumber" : 53,
        "endColumnNumber" : 18
      },
      "nodeContext" : "N=10",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 53,
        "startColumnNumber" : 8,
        "endLineNumber" : 53,
        "endColumnNumber" : 19
      },
      "nodeContext" : "int N=10;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2143,
        "startLineNumber" : 46,
        "startColumnNumber" : 62,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  admin.namespaces().createNamespace(\"prop/my-test\",Collections.singleton(\"usc\"));\n  String topicName=\"prop/my-test/my-topic\";\n  admin.topics().createPartitionedTopic(topicName,16);\n  int N=10;\n  @Cleanup PulsarClient client=PulsarClient.builder().serviceUrl(pulsar.getBrokerServiceUrl()).build();\n  CompletableFuture<Producer<String>> producerFuture=client.newProducer(Schema.STRING).topic(topicName).createAsync();\n  CompletableFuture<Consumer<String>> consumerFuture=client.newConsumer(Schema.STRING).topic(topicName).subscriptionName(\"sub\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribeAsync();\n  CompletableFuture.allOf(producerFuture,consumerFuture).get();\n  Producer<String> producer=producerFuture.get();\n  Consumer<String> consumer=consumerFuture.get();\n  for (int i=0; i < N; i++) {\n    producer.send(\"Hello-\" + i);\n  }\n  consumer.close();\n  producer.close();\n  admin.namespaces().unload(\"prop/my-test\");\n  producerFuture=client.newProducer(Schema.STRING).topic(topicName).createAsync();\n  consumerFuture=client.newConsumer(Schema.STRING).topic(topicName).subscriptionName(\"sub\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribeAsync();\n  CompletableFuture.allOf(producerFuture,consumerFuture).get();\n  consumer=consumerFuture.get();\n  Set<String> messages=new TreeSet<>();\n  for (int i=0; i < N; i++) {\n    Message<String> msg=consumer.receive();\n    messages.add(msg.getValue());\n    consumer.acknowledge(msg);\n  }\n  assertEquals(messages.size(),N);\n  for (int i=0; i < N; i++) {\n    assertTrue(messages.contains(\"Hello-\" + i));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 289,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2310,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Test that sequence id from a producer is correct when there are send errors\n */\n@Test public void partitionedTopicWithSchema() throws Exception {\n  admin.namespaces().createNamespace(\"prop/my-test\",Collections.singleton(\"usc\"));\n  String topicName=\"prop/my-test/my-topic\";\n  admin.topics().createPartitionedTopic(topicName,16);\n  int N=10;\n  @Cleanup PulsarClient client=PulsarClient.builder().serviceUrl(pulsar.getBrokerServiceUrl()).build();\n  CompletableFuture<Producer<String>> producerFuture=client.newProducer(Schema.STRING).topic(topicName).createAsync();\n  CompletableFuture<Consumer<String>> consumerFuture=client.newConsumer(Schema.STRING).topic(topicName).subscriptionName(\"sub\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribeAsync();\n  CompletableFuture.allOf(producerFuture,consumerFuture).get();\n  Producer<String> producer=producerFuture.get();\n  Consumer<String> consumer=consumerFuture.get();\n  for (int i=0; i < N; i++) {\n    producer.send(\"Hello-\" + i);\n  }\n  consumer.close();\n  producer.close();\n  admin.namespaces().unload(\"prop/my-test\");\n  producerFuture=client.newProducer(Schema.STRING).topic(topicName).createAsync();\n  consumerFuture=client.newConsumer(Schema.STRING).topic(topicName).subscriptionName(\"sub\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribeAsync();\n  CompletableFuture.allOf(producerFuture,consumerFuture).get();\n  consumer=consumerFuture.get();\n  Set<String> messages=new TreeSet<>();\n  for (int i=0; i < N; i++) {\n    Message<String> msg=consumer.receive();\n    messages.add(msg.getValue());\n    consumer.acknowledge(msg);\n  }\n  assertEquals(messages.size(),N);\n  for (int i=0; i < N; i++) {\n    assertTrue(messages.contains(\"Hello-\" + i));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 298,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 53,
        "startColumnNumber" : 8,
        "endLineNumber" : 53,
        "endColumnNumber" : 19
      },
      "nodeContext" : "int N=10;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 53,
    "startColumnNumber" : 16,
    "endLineNumber" : 53,
    "endColumnNumber" : 18
  } ],
  "layoutRelationDataList" : [ ]
}