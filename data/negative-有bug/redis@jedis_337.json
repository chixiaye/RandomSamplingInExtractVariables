{
  "id" : 337,
  "expression" : "DuplicatePolicy.valueOf(((String)value).toUpperCase())",
  "projectName" : "redis@jedis",
  "commitID" : "eaa5b16af93d575cd1f340c2cd23595dc29d5638",
  "filePath" : "/src/main/java/redis/clients/jedis/timeseries/TSInfo.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "DuplicatePolicy.valueOf(((String)value).toUpperCase())",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 55,
      "startLineNumber" : 118,
      "startColumnNumber" : 22,
      "endLineNumber" : 118,
      "endColumnNumber" : 77
    },
    "astNodeNumber" : 10,
    "astHeight" : 6,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 118,
        "startColumnNumber" : 14,
        "endLineNumber" : 118,
        "endColumnNumber" : 77
      },
      "nodeContext" : "value=DuplicatePolicy.valueOf(((String)value).toUpperCase())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 12,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 118,
        "startColumnNumber" : 14,
        "endLineNumber" : 118,
        "endColumnNumber" : 78
      },
      "nodeContext" : "value=DuplicatePolicy.valueOf(((String)value).toUpperCase());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 117,
        "startColumnNumber" : 16,
        "endLineNumber" : 119,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  value=DuplicatePolicy.valueOf(((String)value).toUpperCase());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 117,
        "startColumnNumber" : 12,
        "endLineNumber" : 119,
        "endColumnNumber" : 37
      },
      "nodeContext" : "try {\n  value=DuplicatePolicy.valueOf(((String)value).toUpperCase());\n}\n catch (Exception e) {\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 21,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 152,
        "startLineNumber" : 116,
        "startColumnNumber" : 54,
        "endLineNumber" : 120,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  try {\n    value=DuplicatePolicy.valueOf(((String)value).toUpperCase());\n  }\n catch (  Exception e) {\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 196,
        "startLineNumber" : 116,
        "startColumnNumber" : 10,
        "endLineNumber" : 120,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (DUPLICATE_POLICY_PROPERTY.equals(prop)) {\n  try {\n    value=DuplicatePolicy.valueOf(((String)value).toUpperCase());\n  }\n catch (  Exception e) {\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 275,
        "startLineNumber" : 114,
        "startColumnNumber" : 44,
        "endLineNumber" : 121,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  value=SafeEncoder.encode((byte[])value);\n  if (DUPLICATE_POLICY_PROPERTY.equals(prop)) {\n    try {\n      value=DuplicatePolicy.valueOf(((String)value).toUpperCase());\n    }\n catch (    Exception e) {\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 39,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 304,
        "startLineNumber" : 114,
        "startColumnNumber" : 15,
        "endLineNumber" : 121,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (value instanceof byte[]) {\n  value=SafeEncoder.encode((byte[])value);\n  if (DUPLICATE_POLICY_PROPERTY.equals(prop)) {\n    try {\n      value=DuplicatePolicy.valueOf(((String)value).toUpperCase());\n    }\n catch (    Exception e) {\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 45,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2281,
        "startLineNumber" : 77,
        "startColumnNumber" : 8,
        "endLineNumber" : 121,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (value instanceof List) {\nswitch (prop) {\ncase LABELS_PROPERTY:    labels=BuilderFactory.STRING_MAP_FROM_PAIRS.build(value);\n  value=labels;\nbreak;\ncase RULES_PROPERTY:List<Object> rulesDataList=(List<Object>)value;\nList<List<Object>> rulesValueList=new ArrayList<>(rulesDataList.size());\nrules=new HashMap<>(rulesDataList.size());\nfor (Object ruleData : rulesDataList) {\nList<Object> encodedRule=(List<Object>)SafeEncoder.encodeObject(ruleData);\nrulesValueList.add(encodedRule);\nrules.put((String)encodedRule.get(0),new Rule((String)encodedRule.get(0),(Long)encodedRule.get(1),AggregationType.safeValueOf((String)encodedRule.get(2)),(Long)encodedRule.get(3)));\n}\nvalue=rulesValueList;\nbreak;\ncase CHUNKS_PROPERTY:List<Object> chunksDataList=(List<Object>)value;\nList<Map<String,Object>> chunksValueList=new ArrayList<>(chunksDataList.size());\nchunks=new ArrayList<>(chunksDataList.size());\nfor (Object chunkData : chunksDataList) {\nMap<String,Object> chunk=BuilderFactory.ENCODED_OBJECT_MAP.build(chunkData);\nchunksValueList.add(new HashMap<>(chunk));\nif (chunk.containsKey(CHUNKS_BYTES_PER_SAMPLE_PROPERTY)) {\nchunk.put(CHUNKS_BYTES_PER_SAMPLE_PROPERTY,DoublePrecision.parseFloatingPointNumber((String)chunk.get(CHUNKS_BYTES_PER_SAMPLE_PROPERTY)));\n}\nchunks.add(chunk);\n}\nvalue=chunksValueList;\nbreak;\ndefault:value=SafeEncoder.encodeObject(value);\nbreak;\n}\n}\n else if (value instanceof byte[]) {\nvalue=SafeEncoder.encode((byte[])value);\nif (DUPLICATE_POLICY_PROPERTY.equals(prop)) {\ntry {\nvalue=DuplicatePolicy.valueOf(((String)value).toUpperCase());\n}\n catch (Exception e) {\n}\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 313,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2445,
        "startLineNumber" : 74,
        "startColumnNumber" : 47,
        "endLineNumber" : 123,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  String prop=SafeEncoder.encode((byte[])list.get(i));\n  Object value=list.get(i + 1);\n  if (value instanceof List) {\nswitch (prop) {\ncase LABELS_PROPERTY:      labels=BuilderFactory.STRING_MAP_FROM_PAIRS.build(value);\n    value=labels;\n  break;\ncase RULES_PROPERTY:List<Object> rulesDataList=(List<Object>)value;\nList<List<Object>> rulesValueList=new ArrayList<>(rulesDataList.size());\nrules=new HashMap<>(rulesDataList.size());\nfor (Object ruleData : rulesDataList) {\nList<Object> encodedRule=(List<Object>)SafeEncoder.encodeObject(ruleData);\nrulesValueList.add(encodedRule);\nrules.put((String)encodedRule.get(0),new Rule((String)encodedRule.get(0),(Long)encodedRule.get(1),AggregationType.safeValueOf((String)encodedRule.get(2)),(Long)encodedRule.get(3)));\n}\nvalue=rulesValueList;\nbreak;\ncase CHUNKS_PROPERTY:List<Object> chunksDataList=(List<Object>)value;\nList<Map<String,Object>> chunksValueList=new ArrayList<>(chunksDataList.size());\nchunks=new ArrayList<>(chunksDataList.size());\nfor (Object chunkData : chunksDataList) {\nMap<String,Object> chunk=BuilderFactory.ENCODED_OBJECT_MAP.build(chunkData);\nchunksValueList.add(new HashMap<>(chunk));\nif (chunk.containsKey(CHUNKS_BYTES_PER_SAMPLE_PROPERTY)) {\nchunk.put(CHUNKS_BYTES_PER_SAMPLE_PROPERTY,DoublePrecision.parseFloatingPointNumber((String)chunk.get(CHUNKS_BYTES_PER_SAMPLE_PROPERTY)));\n}\nchunks.add(chunk);\n}\nvalue=chunksValueList;\nbreak;\ndefault:value=SafeEncoder.encodeObject(value);\nbreak;\n}\n}\n else if (value instanceof byte[]) {\nvalue=SafeEncoder.encode((byte[])value);\nif (DUPLICATE_POLICY_PROPERTY.equals(prop)) {\ntry {\nvalue=DuplicatePolicy.valueOf(((String)value).toUpperCase());\n}\n catch (Exception e) {\n}\n}\n}\nproperties.put(prop,value);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 347,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2486,
        "startLineNumber" : 74,
        "startColumnNumber" : 6,
        "endLineNumber" : 123,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < list.size(); i+=2) {\n  String prop=SafeEncoder.encode((byte[])list.get(i));\n  Object value=list.get(i + 1);\n  if (value instanceof List) {\nswitch (prop) {\ncase LABELS_PROPERTY:      labels=BuilderFactory.STRING_MAP_FROM_PAIRS.build(value);\n    value=labels;\n  break;\ncase RULES_PROPERTY:List<Object> rulesDataList=(List<Object>)value;\nList<List<Object>> rulesValueList=new ArrayList<>(rulesDataList.size());\nrules=new HashMap<>(rulesDataList.size());\nfor (Object ruleData : rulesDataList) {\nList<Object> encodedRule=(List<Object>)SafeEncoder.encodeObject(ruleData);\nrulesValueList.add(encodedRule);\nrules.put((String)encodedRule.get(0),new Rule((String)encodedRule.get(0),(Long)encodedRule.get(1),AggregationType.safeValueOf((String)encodedRule.get(2)),(Long)encodedRule.get(3)));\n}\nvalue=rulesValueList;\nbreak;\ncase CHUNKS_PROPERTY:List<Object> chunksDataList=(List<Object>)value;\nList<Map<String,Object>> chunksValueList=new ArrayList<>(chunksDataList.size());\nchunks=new ArrayList<>(chunksDataList.size());\nfor (Object chunkData : chunksDataList) {\nMap<String,Object> chunk=BuilderFactory.ENCODED_OBJECT_MAP.build(chunkData);\nchunksValueList.add(new HashMap<>(chunk));\nif (chunk.containsKey(CHUNKS_BYTES_PER_SAMPLE_PROPERTY)) {\nchunk.put(CHUNKS_BYTES_PER_SAMPLE_PROPERTY,DoublePrecision.parseFloatingPointNumber((String)chunk.get(CHUNKS_BYTES_PER_SAMPLE_PROPERTY)));\n}\nchunks.add(chunk);\n}\nvalue=chunksValueList;\nbreak;\ndefault:value=SafeEncoder.encodeObject(value);\nbreak;\n}\n}\n else if (value instanceof byte[]) {\nvalue=SafeEncoder.encode((byte[])value);\nif (DUPLICATE_POLICY_PROPERTY.equals(prop)) {\ntry {\nvalue=DuplicatePolicy.valueOf(((String)value).toUpperCase());\n}\n catch (Exception e) {\n}\n}\n}\nproperties.put(prop,value);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 361,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2801,
        "startLineNumber" : 67,
        "startColumnNumber" : 37,
        "endLineNumber" : 126,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<Object> list=(List<Object>)data;\n  Map<String,Object> properties=new HashMap<>();\n  Map<String,String> labels=null;\n  Map<String,Rule> rules=null;\n  List<Map<String,Object>> chunks=null;\n  for (int i=0; i < list.size(); i+=2) {\n    String prop=SafeEncoder.encode((byte[])list.get(i));\n    Object value=list.get(i + 1);\n    if (value instanceof List) {\nswitch (prop) {\ncase LABELS_PROPERTY:        labels=BuilderFactory.STRING_MAP_FROM_PAIRS.build(value);\n      value=labels;\n    break;\ncase RULES_PROPERTY:  List<Object> rulesDataList=(List<Object>)value;\nList<List<Object>> rulesValueList=new ArrayList<>(rulesDataList.size());\nrules=new HashMap<>(rulesDataList.size());\nfor (Object ruleData : rulesDataList) {\nList<Object> encodedRule=(List<Object>)SafeEncoder.encodeObject(ruleData);\nrulesValueList.add(encodedRule);\nrules.put((String)encodedRule.get(0),new Rule((String)encodedRule.get(0),(Long)encodedRule.get(1),AggregationType.safeValueOf((String)encodedRule.get(2)),(Long)encodedRule.get(3)));\n}\nvalue=rulesValueList;\nbreak;\ncase CHUNKS_PROPERTY:List<Object> chunksDataList=(List<Object>)value;\nList<Map<String,Object>> chunksValueList=new ArrayList<>(chunksDataList.size());\nchunks=new ArrayList<>(chunksDataList.size());\nfor (Object chunkData : chunksDataList) {\nMap<String,Object> chunk=BuilderFactory.ENCODED_OBJECT_MAP.build(chunkData);\nchunksValueList.add(new HashMap<>(chunk));\nif (chunk.containsKey(CHUNKS_BYTES_PER_SAMPLE_PROPERTY)) {\nchunk.put(CHUNKS_BYTES_PER_SAMPLE_PROPERTY,DoublePrecision.parseFloatingPointNumber((String)chunk.get(CHUNKS_BYTES_PER_SAMPLE_PROPERTY)));\n}\nchunks.add(chunk);\n}\nvalue=chunksValueList;\nbreak;\ndefault:value=SafeEncoder.encodeObject(value);\nbreak;\n}\n}\n else if (value instanceof byte[]) {\nvalue=SafeEncoder.encode((byte[])value);\nif (DUPLICATE_POLICY_PROPERTY.equals(prop)) {\ntry {\nvalue=DuplicatePolicy.valueOf(((String)value).toUpperCase());\n}\n catch (Exception e) {\n}\n}\n}\nproperties.put(prop,value);\n}\nreturn new TSInfo(properties,labels,rules,chunks);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 435,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.AnonymousClassDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2849,
        "startLineNumber" : 66,
        "startColumnNumber" : 4,
        "endLineNumber" : 126,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public TSInfo build(Object data){\n  List<Object> list=(List<Object>)data;\n  Map<String,Object> properties=new HashMap<>();\n  Map<String,String> labels=null;\n  Map<String,Rule> rules=null;\n  List<Map<String,Object>> chunks=null;\n  for (int i=0; i < list.size(); i+=2) {\n    String prop=SafeEncoder.encode((byte[])list.get(i));\n    Object value=list.get(i + 1);\n    if (value instanceof List) {\nswitch (prop) {\ncase LABELS_PROPERTY:        labels=BuilderFactory.STRING_MAP_FROM_PAIRS.build(value);\n      value=labels;\n    break;\ncase RULES_PROPERTY:  List<Object> rulesDataList=(List<Object>)value;\nList<List<Object>> rulesValueList=new ArrayList<>(rulesDataList.size());\nrules=new HashMap<>(rulesDataList.size());\nfor (Object ruleData : rulesDataList) {\nList<Object> encodedRule=(List<Object>)SafeEncoder.encodeObject(ruleData);\nrulesValueList.add(encodedRule);\nrules.put((String)encodedRule.get(0),new Rule((String)encodedRule.get(0),(Long)encodedRule.get(1),AggregationType.safeValueOf((String)encodedRule.get(2)),(Long)encodedRule.get(3)));\n}\nvalue=rulesValueList;\nbreak;\ncase CHUNKS_PROPERTY:List<Object> chunksDataList=(List<Object>)value;\nList<Map<String,Object>> chunksValueList=new ArrayList<>(chunksDataList.size());\nchunks=new ArrayList<>(chunksDataList.size());\nfor (Object chunkData : chunksDataList) {\nMap<String,Object> chunk=BuilderFactory.ENCODED_OBJECT_MAP.build(chunkData);\nchunksValueList.add(new HashMap<>(chunk));\nif (chunk.containsKey(CHUNKS_BYTES_PER_SAMPLE_PROPERTY)) {\nchunk.put(CHUNKS_BYTES_PER_SAMPLE_PROPERTY,DoublePrecision.parseFloatingPointNumber((String)chunk.get(CHUNKS_BYTES_PER_SAMPLE_PROPERTY)));\n}\nchunks.add(chunk);\n}\nvalue=chunksValueList;\nbreak;\ndefault:value=SafeEncoder.encodeObject(value);\nbreak;\n}\n}\n else if (value instanceof byte[]) {\nvalue=SafeEncoder.encode((byte[])value);\nif (DUPLICATE_POLICY_PROPERTY.equals(prop)) {\ntry {\nvalue=DuplicatePolicy.valueOf(((String)value).toUpperCase());\n}\n catch (Exception e) {\n}\n}\n}\nproperties.put(prop,value);\n}\nreturn new TSInfo(properties,labels,rules,chunks);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 446,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 118,
        "startColumnNumber" : 14,
        "endLineNumber" : 118,
        "endColumnNumber" : 78
      },
      "nodeContext" : "value=DuplicatePolicy.valueOf(((String)value).toUpperCase());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 8
    },
    "tokenLength" : 5,
    "type" : "redis.clients.jedis.timeseries.DuplicatePolicy"
  } ],
  "positionList" : [ {
    "charLength" : 55,
    "startLineNumber" : 118,
    "startColumnNumber" : 22,
    "endLineNumber" : 118,
    "endColumnNumber" : 77
  } ],
  "layoutRelationDataList" : [ ]
}