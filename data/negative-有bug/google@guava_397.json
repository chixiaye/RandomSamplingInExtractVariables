{
  "id" : 397,
  "expression" : "putIfAbsent(key,newValue) == 0L",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/android/guava/src/com/google/common/util/concurrent/AtomicLongMap.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "putIfAbsent(key,newValue) == 0L",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 32,
      "startLineNumber" : 444,
      "startColumnNumber" : 13,
      "endLineNumber" : 444,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 444,
        "startColumnNumber" : 6,
        "endLineNumber" : 444,
        "endColumnNumber" : 46
      },
      "nodeContext" : "return putIfAbsent(key,newValue) == 0L;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 443,
        "startColumnNumber" : 32,
        "endLineNumber" : 445,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  return putIfAbsent(key,newValue) == 0L;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 230,
        "startLineNumber" : 443,
        "startColumnNumber" : 4,
        "endLineNumber" : 448,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (expectedOldValue == 0L) {\n  return putIfAbsent(key,newValue) == 0L;\n}\n else {\n  AtomicLong atomic=map.get(key);\n  return (atomic == null) ? false : atomic.compareAndSet(expectedOldValue,newValue);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 34,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 242,
        "startLineNumber" : 442,
        "startColumnNumber" : 63,
        "endLineNumber" : 449,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (expectedOldValue == 0L) {\n    return putIfAbsent(key,newValue) == 0L;\n  }\n else {\n    AtomicLong atomic=map.get(key);\n    return (atomic == null) ? false : atomic.compareAndSet(expectedOldValue,newValue);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 35,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 688,
        "startLineNumber" : 435,
        "startColumnNumber" : 2,
        "endLineNumber" : 449,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * If  {@code (key, expectedOldValue)} is currently in the map, this method replaces {@code expectedOldValue} with {@code newValue} and returns true; otherwise, this method returns false.<p>If  {@code expectedOldValue} is zero, this method will succeed if {@code (key, zero)} iscurrently in the map, or if  {@code key} is not in the map at all.\n */\nboolean replace(K key,long expectedOldValue,long newValue){\n  if (expectedOldValue == 0L) {\n    return putIfAbsent(key,newValue) == 0L;\n  }\n else {\n    AtomicLong atomic=map.get(key);\n    return (atomic == null) ? false : atomic.compareAndSet(expectedOldValue,newValue);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 49,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 444,
        "startColumnNumber" : 6,
        "endLineNumber" : 444,
        "endColumnNumber" : 46
      },
      "nodeContext" : "return putIfAbsent(key,newValue) == 0L;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 5,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 32,
    "startLineNumber" : 444,
    "startColumnNumber" : 13,
    "endLineNumber" : 444,
    "endColumnNumber" : 45
  } ],
  "layoutRelationDataList" : [ ]
}