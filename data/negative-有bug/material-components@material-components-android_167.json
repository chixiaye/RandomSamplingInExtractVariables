{
  "id" : 167,
  "expression" : "TEST_KEY",
  "projectName" : "material-components@material-components-android",
  "commitID" : "79bf9d0e8e62eea9c2f2620d4e1a0a2ca0e12017",
  "filePath" : "/lib/javatests/com/google/android/material/internal/ParcelableSparseBooleanArrayTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "TEST_KEY",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 39,
      "startColumnNumber" : 17,
      "endLineNumber" : 39,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 39,
        "startColumnNumber" : 4,
        "endLineNumber" : 39,
        "endColumnNumber" : 36
      },
      "nodeContext" : "array.append(TEST_KEY,TEST_VAL)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 39,
        "startColumnNumber" : 4,
        "endLineNumber" : 39,
        "endColumnNumber" : 37
      },
      "nodeContext" : "array.append(TEST_KEY,TEST_VAL);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 476,
        "startLineNumber" : 37,
        "startColumnNumber" : 26,
        "endLineNumber" : 49,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ParcelableSparseBooleanArray array=new ParcelableSparseBooleanArray();\n  array.append(TEST_KEY,TEST_VAL);\n  Parcel parcel=Parcel.obtain();\n  array.writeToParcel(parcel,array.describeContents());\n  parcel.setDataPosition(0);\n  ParcelableSparseBooleanArray createdFromParcel=ParcelableSparseBooleanArray.CREATOR.createFromParcel(parcel);\n  boolean val=createdFromParcel.get(TEST_KEY);\n  Assert.assertEquals(TEST_VAL,val);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 61,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 509,
        "startLineNumber" : 36,
        "startColumnNumber" : 2,
        "endLineNumber" : 49,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testArray(){\n  ParcelableSparseBooleanArray array=new ParcelableSparseBooleanArray();\n  array.append(TEST_KEY,TEST_VAL);\n  Parcel parcel=Parcel.obtain();\n  array.writeToParcel(parcel,array.describeContents());\n  parcel.setDataPosition(0);\n  ParcelableSparseBooleanArray createdFromParcel=ParcelableSparseBooleanArray.CREATOR.createFromParcel(parcel);\n  boolean val=createdFromParcel.get(TEST_KEY);\n  Assert.assertEquals(TEST_VAL,val);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 67,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 39,
        "startColumnNumber" : 4,
        "endLineNumber" : 39,
        "endColumnNumber" : 37
      },
      "nodeContext" : "array.append(TEST_KEY,TEST_VAL);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "TEST_KEY",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 47,
      "startColumnNumber" : 40,
      "endLineNumber" : 47,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 47,
        "startColumnNumber" : 18,
        "endLineNumber" : 47,
        "endColumnNumber" : 49
      },
      "nodeContext" : "createdFromParcel.get(TEST_KEY)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 47,
        "startColumnNumber" : 12,
        "endLineNumber" : 47,
        "endColumnNumber" : 49
      },
      "nodeContext" : "val=createdFromParcel.get(TEST_KEY)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 47,
        "endColumnNumber" : 50
      },
      "nodeContext" : "boolean val=createdFromParcel.get(TEST_KEY);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 476,
        "startLineNumber" : 37,
        "startColumnNumber" : 26,
        "endLineNumber" : 49,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ParcelableSparseBooleanArray array=new ParcelableSparseBooleanArray();\n  array.append(TEST_KEY,TEST_VAL);\n  Parcel parcel=Parcel.obtain();\n  array.writeToParcel(parcel,array.describeContents());\n  parcel.setDataPosition(0);\n  ParcelableSparseBooleanArray createdFromParcel=ParcelableSparseBooleanArray.CREATOR.createFromParcel(parcel);\n  boolean val=createdFromParcel.get(TEST_KEY);\n  Assert.assertEquals(TEST_VAL,val);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 61,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 509,
        "startLineNumber" : 36,
        "startColumnNumber" : 2,
        "endLineNumber" : 49,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testArray(){\n  ParcelableSparseBooleanArray array=new ParcelableSparseBooleanArray();\n  array.append(TEST_KEY,TEST_VAL);\n  Parcel parcel=Parcel.obtain();\n  array.writeToParcel(parcel,array.describeContents());\n  parcel.setDataPosition(0);\n  ParcelableSparseBooleanArray createdFromParcel=ParcelableSparseBooleanArray.CREATOR.createFromParcel(parcel);\n  boolean val=createdFromParcel.get(TEST_KEY);\n  Assert.assertEquals(TEST_VAL,val);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 67,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 47,
        "endColumnNumber" : 50
      },
      "nodeContext" : "boolean val=createdFromParcel.get(TEST_KEY);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 39,
    "startColumnNumber" : 17,
    "endLineNumber" : 39,
    "endColumnNumber" : 25
  }, {
    "charLength" : 8,
    "startLineNumber" : 47,
    "startColumnNumber" : 40,
    "endLineNumber" : 47,
    "endColumnNumber" : 48
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}