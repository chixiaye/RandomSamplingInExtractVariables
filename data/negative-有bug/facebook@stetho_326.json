{
  "id" : 326,
  "expression" : "maskingKey",
  "projectName" : "facebook@stetho",
  "commitID" : "fee68519d93899dc5cfe6b992f56916a03b279f2",
  "filePath" : "/stetho/src/main/java/com/facebook/stetho/websocket/Frame.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "maskingKey",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 46,
      "startColumnNumber" : 25,
      "endLineNumber" : 46,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 46,
        "startColumnNumber" : 4,
        "endLineNumber" : 46,
        "endColumnNumber" : 69
      },
      "nodeContext" : "MaskingHelper.unmask(maskingKey,payloadData,0,(int)payloadLen)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 46,
        "startColumnNumber" : 4,
        "endLineNumber" : 46,
        "endColumnNumber" : 70
      },
      "nodeContext" : "MaskingHelper.unmask(maskingKey,payloadData,0,(int)payloadLen);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 475,
        "startLineNumber" : 38,
        "startColumnNumber" : 69,
        "endLineNumber" : 47,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  decodeFirstByte(readByteOrThrow(input));\n  byte maskAndFirstLengthBits=readByteOrThrow(input);\n  hasMask=(maskAndFirstLengthBits & 0x80) != 0;\n  payloadLen=decodeLength((byte)(maskAndFirstLengthBits & ~0x80),input);\n  maskingKey=hasMask ? decodeMaskingKey(input) : null;\n  payloadData=new byte[(int)payloadLen];\n  readBytesOrThrow(input,payloadData,0,(int)payloadLen);\n  MaskingHelper.unmask(maskingKey,payloadData,0,(int)payloadLen);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 74,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 542,
        "startLineNumber" : 38,
        "startColumnNumber" : 2,
        "endLineNumber" : 47,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public void readFrom(BufferedInputStream input) throws IOException {\n  decodeFirstByte(readByteOrThrow(input));\n  byte maskAndFirstLengthBits=readByteOrThrow(input);\n  hasMask=(maskAndFirstLengthBits & 0x80) != 0;\n  payloadLen=decodeLength((byte)(maskAndFirstLengthBits & ~0x80),input);\n  maskingKey=hasMask ? decodeMaskingKey(input) : null;\n  payloadData=new byte[(int)payloadLen];\n  readBytesOrThrow(input,payloadData,0,(int)payloadLen);\n  MaskingHelper.unmask(maskingKey,payloadData,0,(int)payloadLen);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 84,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 46,
        "startColumnNumber" : 4,
        "endLineNumber" : 46,
        "endColumnNumber" : 70
      },
      "nodeContext" : "MaskingHelper.unmask(maskingKey,payloadData,0,(int)payloadLen);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "byte[]"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 46,
    "startColumnNumber" : 25,
    "endLineNumber" : 46,
    "endColumnNumber" : 35
  } ],
  "layoutRelationDataList" : [ ]
}