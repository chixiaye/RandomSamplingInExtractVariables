{
  "id" : 376,
  "expression" : "-1",
  "projectName" : "DrKLO@Telegram",
  "commitID" : "11fbfb1329df700b203e1852a71c4c11b5ab12f4",
  "filePath" : "/TMessagesProj/src/main/java/org/webrtc/audio/WebRtcAudioRecord.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "-1",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 264,
      "startColumnNumber" : 13,
      "endLineNumber" : 264,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 2,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 264,
        "startColumnNumber" : 6,
        "endLineNumber" : 264,
        "endColumnNumber" : 16
      },
      "nodeContext" : "return -1;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 3,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 262,
        "startColumnNumber" : 29,
        "endLineNumber" : 265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  reportWebRtcAudioRecordInitError(\"InitRecording called twice without StopRecording.\");\n  return -1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 142,
        "startLineNumber" : 262,
        "startColumnNumber" : 4,
        "endLineNumber" : 265,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (audioRecord != null) {\n  reportWebRtcAudioRecordInitError(\"InitRecording called twice without StopRecording.\");\n  return -1;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4025,
        "startLineNumber" : 260,
        "startColumnNumber" : 58,
        "endLineNumber" : 336,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Logging.d(TAG,\"initRecording(sampleRate=\" + sampleRate + \", channels=\"+ channels+ \")\");\n  if (audioRecord != null) {\n    reportWebRtcAudioRecordInitError(\"InitRecording called twice without StopRecording.\");\n    return -1;\n  }\n  final int bytesPerFrame=channels * getBytesPerSample(audioFormat);\n  final int framesPerBuffer=sampleRate / BUFFERS_PER_SECOND;\n  byteBuffer=ByteBuffer.allocateDirect(bytesPerFrame * framesPerBuffer);\n  if (!(byteBuffer.hasArray())) {\n    reportWebRtcAudioRecordInitError(\"ByteBuffer does not have backing array.\");\n    return -1;\n  }\n  Logging.d(TAG,\"byteBuffer.capacity: \" + byteBuffer.capacity());\n  emptyBytes=new byte[byteBuffer.capacity()];\n  nativeCacheDirectBufferAddress(nativeAudioRecord,byteBuffer);\n  final int channelConfig=channelCountToConfiguration(channels);\n  int minBufferSize=AudioRecord.getMinBufferSize(sampleRate,channelConfig,audioFormat);\n  if (minBufferSize == AudioRecord.ERROR || minBufferSize == AudioRecord.ERROR_BAD_VALUE) {\n    reportWebRtcAudioRecordInitError(\"AudioRecord.getMinBufferSize failed: \" + minBufferSize);\n    return -1;\n  }\n  Logging.d(TAG,\"AudioRecord.getMinBufferSize: \" + minBufferSize);\n  int bufferSizeInBytes=Math.max(BUFFER_SIZE_FACTOR * minBufferSize,byteBuffer.capacity());\n  Logging.d(TAG,\"bufferSizeInBytes: \" + bufferSizeInBytes);\n  try {\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n      audioRecord=createAudioRecordOnMOrHigher(audioSource,sampleRate,channelConfig,audioFormat,bufferSizeInBytes);\n      if (preferredDevice != null) {\n        setPreferredDevice(preferredDevice);\n      }\n    }\n else {\n      audioRecord=createAudioRecordOnLowerThanM(audioSource,sampleRate,channelConfig,audioFormat,bufferSizeInBytes);\n    }\n  }\n catch (  IllegalArgumentException|UnsupportedOperationException e) {\n    reportWebRtcAudioRecordInitError(e.getMessage());\n    releaseAudioResources();\n    return -1;\n  }\n  if (audioRecord == null || audioRecord.getState() != AudioRecord.STATE_INITIALIZED) {\n    reportWebRtcAudioRecordInitError(\"Creation or initialization of audio recorder failed.\");\n    releaseAudioResources();\n    return -1;\n  }\n  effects.enable(audioRecord.getAudioSessionId());\n  logMainParameters();\n  logMainParametersExtended();\n  final int numActiveRecordingSessions=logRecordingConfigurations(false);\n  if (numActiveRecordingSessions != 0) {\n    Logging.w(TAG,\"Potential microphone conflict. Active sessions: \" + numActiveRecordingSessions);\n  }\n  return framesPerBuffer;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 284,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4099,
        "startLineNumber" : 259,
        "startColumnNumber" : 2,
        "endLineNumber" : 336,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@CalledByNative private int initRecording(int sampleRate,int channels){\n  Logging.d(TAG,\"initRecording(sampleRate=\" + sampleRate + \", channels=\"+ channels+ \")\");\n  if (audioRecord != null) {\n    reportWebRtcAudioRecordInitError(\"InitRecording called twice without StopRecording.\");\n    return -1;\n  }\n  final int bytesPerFrame=channels * getBytesPerSample(audioFormat);\n  final int framesPerBuffer=sampleRate / BUFFERS_PER_SECOND;\n  byteBuffer=ByteBuffer.allocateDirect(bytesPerFrame * framesPerBuffer);\n  if (!(byteBuffer.hasArray())) {\n    reportWebRtcAudioRecordInitError(\"ByteBuffer does not have backing array.\");\n    return -1;\n  }\n  Logging.d(TAG,\"byteBuffer.capacity: \" + byteBuffer.capacity());\n  emptyBytes=new byte[byteBuffer.capacity()];\n  nativeCacheDirectBufferAddress(nativeAudioRecord,byteBuffer);\n  final int channelConfig=channelCountToConfiguration(channels);\n  int minBufferSize=AudioRecord.getMinBufferSize(sampleRate,channelConfig,audioFormat);\n  if (minBufferSize == AudioRecord.ERROR || minBufferSize == AudioRecord.ERROR_BAD_VALUE) {\n    reportWebRtcAudioRecordInitError(\"AudioRecord.getMinBufferSize failed: \" + minBufferSize);\n    return -1;\n  }\n  Logging.d(TAG,\"AudioRecord.getMinBufferSize: \" + minBufferSize);\n  int bufferSizeInBytes=Math.max(BUFFER_SIZE_FACTOR * minBufferSize,byteBuffer.capacity());\n  Logging.d(TAG,\"bufferSizeInBytes: \" + bufferSizeInBytes);\n  try {\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n      audioRecord=createAudioRecordOnMOrHigher(audioSource,sampleRate,channelConfig,audioFormat,bufferSizeInBytes);\n      if (preferredDevice != null) {\n        setPreferredDevice(preferredDevice);\n      }\n    }\n else {\n      audioRecord=createAudioRecordOnLowerThanM(audioSource,sampleRate,channelConfig,audioFormat,bufferSizeInBytes);\n    }\n  }\n catch (  IllegalArgumentException|UnsupportedOperationException e) {\n    reportWebRtcAudioRecordInitError(e.getMessage());\n    releaseAudioResources();\n    return -1;\n  }\n  if (audioRecord == null || audioRecord.getState() != AudioRecord.STATE_INITIALIZED) {\n    reportWebRtcAudioRecordInitError(\"Creation or initialization of audio recorder failed.\");\n    releaseAudioResources();\n    return -1;\n  }\n  effects.enable(audioRecord.getAudioSessionId());\n  logMainParameters();\n  logMainParametersExtended();\n  final int numActiveRecordingSessions=logRecordingConfigurations(false);\n  if (numActiveRecordingSessions != 0) {\n    Logging.w(TAG,\"Potential microphone conflict. Active sessions: \" + numActiveRecordingSessions);\n  }\n  return framesPerBuffer;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 296,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 264,
        "startColumnNumber" : 6,
        "endLineNumber" : 264,
        "endColumnNumber" : 16
      },
      "nodeContext" : "return -1;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 3,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "-1",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 271,
      "startColumnNumber" : 13,
      "endLineNumber" : 271,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 2,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 271,
        "startColumnNumber" : 6,
        "endLineNumber" : 271,
        "endColumnNumber" : 16
      },
      "nodeContext" : "return -1;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 3,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 269,
        "startColumnNumber" : 34,
        "endLineNumber" : 272,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  reportWebRtcAudioRecordInitError(\"ByteBuffer does not have backing array.\");\n  return -1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 137,
        "startLineNumber" : 269,
        "startColumnNumber" : 4,
        "endLineNumber" : 272,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!(byteBuffer.hasArray())) {\n  reportWebRtcAudioRecordInitError(\"ByteBuffer does not have backing array.\");\n  return -1;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4025,
        "startLineNumber" : 260,
        "startColumnNumber" : 58,
        "endLineNumber" : 336,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Logging.d(TAG,\"initRecording(sampleRate=\" + sampleRate + \", channels=\"+ channels+ \")\");\n  if (audioRecord != null) {\n    reportWebRtcAudioRecordInitError(\"InitRecording called twice without StopRecording.\");\n    return -1;\n  }\n  final int bytesPerFrame=channels * getBytesPerSample(audioFormat);\n  final int framesPerBuffer=sampleRate / BUFFERS_PER_SECOND;\n  byteBuffer=ByteBuffer.allocateDirect(bytesPerFrame * framesPerBuffer);\n  if (!(byteBuffer.hasArray())) {\n    reportWebRtcAudioRecordInitError(\"ByteBuffer does not have backing array.\");\n    return -1;\n  }\n  Logging.d(TAG,\"byteBuffer.capacity: \" + byteBuffer.capacity());\n  emptyBytes=new byte[byteBuffer.capacity()];\n  nativeCacheDirectBufferAddress(nativeAudioRecord,byteBuffer);\n  final int channelConfig=channelCountToConfiguration(channels);\n  int minBufferSize=AudioRecord.getMinBufferSize(sampleRate,channelConfig,audioFormat);\n  if (minBufferSize == AudioRecord.ERROR || minBufferSize == AudioRecord.ERROR_BAD_VALUE) {\n    reportWebRtcAudioRecordInitError(\"AudioRecord.getMinBufferSize failed: \" + minBufferSize);\n    return -1;\n  }\n  Logging.d(TAG,\"AudioRecord.getMinBufferSize: \" + minBufferSize);\n  int bufferSizeInBytes=Math.max(BUFFER_SIZE_FACTOR * minBufferSize,byteBuffer.capacity());\n  Logging.d(TAG,\"bufferSizeInBytes: \" + bufferSizeInBytes);\n  try {\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n      audioRecord=createAudioRecordOnMOrHigher(audioSource,sampleRate,channelConfig,audioFormat,bufferSizeInBytes);\n      if (preferredDevice != null) {\n        setPreferredDevice(preferredDevice);\n      }\n    }\n else {\n      audioRecord=createAudioRecordOnLowerThanM(audioSource,sampleRate,channelConfig,audioFormat,bufferSizeInBytes);\n    }\n  }\n catch (  IllegalArgumentException|UnsupportedOperationException e) {\n    reportWebRtcAudioRecordInitError(e.getMessage());\n    releaseAudioResources();\n    return -1;\n  }\n  if (audioRecord == null || audioRecord.getState() != AudioRecord.STATE_INITIALIZED) {\n    reportWebRtcAudioRecordInitError(\"Creation or initialization of audio recorder failed.\");\n    releaseAudioResources();\n    return -1;\n  }\n  effects.enable(audioRecord.getAudioSessionId());\n  logMainParameters();\n  logMainParametersExtended();\n  final int numActiveRecordingSessions=logRecordingConfigurations(false);\n  if (numActiveRecordingSessions != 0) {\n    Logging.w(TAG,\"Potential microphone conflict. Active sessions: \" + numActiveRecordingSessions);\n  }\n  return framesPerBuffer;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 284,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4099,
        "startLineNumber" : 259,
        "startColumnNumber" : 2,
        "endLineNumber" : 336,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@CalledByNative private int initRecording(int sampleRate,int channels){\n  Logging.d(TAG,\"initRecording(sampleRate=\" + sampleRate + \", channels=\"+ channels+ \")\");\n  if (audioRecord != null) {\n    reportWebRtcAudioRecordInitError(\"InitRecording called twice without StopRecording.\");\n    return -1;\n  }\n  final int bytesPerFrame=channels * getBytesPerSample(audioFormat);\n  final int framesPerBuffer=sampleRate / BUFFERS_PER_SECOND;\n  byteBuffer=ByteBuffer.allocateDirect(bytesPerFrame * framesPerBuffer);\n  if (!(byteBuffer.hasArray())) {\n    reportWebRtcAudioRecordInitError(\"ByteBuffer does not have backing array.\");\n    return -1;\n  }\n  Logging.d(TAG,\"byteBuffer.capacity: \" + byteBuffer.capacity());\n  emptyBytes=new byte[byteBuffer.capacity()];\n  nativeCacheDirectBufferAddress(nativeAudioRecord,byteBuffer);\n  final int channelConfig=channelCountToConfiguration(channels);\n  int minBufferSize=AudioRecord.getMinBufferSize(sampleRate,channelConfig,audioFormat);\n  if (minBufferSize == AudioRecord.ERROR || minBufferSize == AudioRecord.ERROR_BAD_VALUE) {\n    reportWebRtcAudioRecordInitError(\"AudioRecord.getMinBufferSize failed: \" + minBufferSize);\n    return -1;\n  }\n  Logging.d(TAG,\"AudioRecord.getMinBufferSize: \" + minBufferSize);\n  int bufferSizeInBytes=Math.max(BUFFER_SIZE_FACTOR * minBufferSize,byteBuffer.capacity());\n  Logging.d(TAG,\"bufferSizeInBytes: \" + bufferSizeInBytes);\n  try {\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n      audioRecord=createAudioRecordOnMOrHigher(audioSource,sampleRate,channelConfig,audioFormat,bufferSizeInBytes);\n      if (preferredDevice != null) {\n        setPreferredDevice(preferredDevice);\n      }\n    }\n else {\n      audioRecord=createAudioRecordOnLowerThanM(audioSource,sampleRate,channelConfig,audioFormat,bufferSizeInBytes);\n    }\n  }\n catch (  IllegalArgumentException|UnsupportedOperationException e) {\n    reportWebRtcAudioRecordInitError(e.getMessage());\n    releaseAudioResources();\n    return -1;\n  }\n  if (audioRecord == null || audioRecord.getState() != AudioRecord.STATE_INITIALIZED) {\n    reportWebRtcAudioRecordInitError(\"Creation or initialization of audio recorder failed.\");\n    releaseAudioResources();\n    return -1;\n  }\n  effects.enable(audioRecord.getAudioSessionId());\n  logMainParameters();\n  logMainParametersExtended();\n  final int numActiveRecordingSessions=logRecordingConfigurations(false);\n  if (numActiveRecordingSessions != 0) {\n    Logging.w(TAG,\"Potential microphone conflict. Active sessions: \" + numActiveRecordingSessions);\n  }\n  return framesPerBuffer;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 296,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 271,
        "startColumnNumber" : 6,
        "endLineNumber" : 271,
        "endColumnNumber" : 16
      },
      "nodeContext" : "return -1;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 3,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "-1",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 287,
      "startColumnNumber" : 13,
      "endLineNumber" : 287,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 2,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 287,
        "startColumnNumber" : 6,
        "endLineNumber" : 287,
        "endColumnNumber" : 16
      },
      "nodeContext" : "return -1;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 3,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 121,
        "startLineNumber" : 285,
        "startColumnNumber" : 92,
        "endLineNumber" : 288,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  reportWebRtcAudioRecordInitError(\"AudioRecord.getMinBufferSize failed: \" + minBufferSize);\n  return -1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 209,
        "startLineNumber" : 285,
        "startColumnNumber" : 4,
        "endLineNumber" : 288,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (minBufferSize == AudioRecord.ERROR || minBufferSize == AudioRecord.ERROR_BAD_VALUE) {\n  reportWebRtcAudioRecordInitError(\"AudioRecord.getMinBufferSize failed: \" + minBufferSize);\n  return -1;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4025,
        "startLineNumber" : 260,
        "startColumnNumber" : 58,
        "endLineNumber" : 336,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Logging.d(TAG,\"initRecording(sampleRate=\" + sampleRate + \", channels=\"+ channels+ \")\");\n  if (audioRecord != null) {\n    reportWebRtcAudioRecordInitError(\"InitRecording called twice without StopRecording.\");\n    return -1;\n  }\n  final int bytesPerFrame=channels * getBytesPerSample(audioFormat);\n  final int framesPerBuffer=sampleRate / BUFFERS_PER_SECOND;\n  byteBuffer=ByteBuffer.allocateDirect(bytesPerFrame * framesPerBuffer);\n  if (!(byteBuffer.hasArray())) {\n    reportWebRtcAudioRecordInitError(\"ByteBuffer does not have backing array.\");\n    return -1;\n  }\n  Logging.d(TAG,\"byteBuffer.capacity: \" + byteBuffer.capacity());\n  emptyBytes=new byte[byteBuffer.capacity()];\n  nativeCacheDirectBufferAddress(nativeAudioRecord,byteBuffer);\n  final int channelConfig=channelCountToConfiguration(channels);\n  int minBufferSize=AudioRecord.getMinBufferSize(sampleRate,channelConfig,audioFormat);\n  if (minBufferSize == AudioRecord.ERROR || minBufferSize == AudioRecord.ERROR_BAD_VALUE) {\n    reportWebRtcAudioRecordInitError(\"AudioRecord.getMinBufferSize failed: \" + minBufferSize);\n    return -1;\n  }\n  Logging.d(TAG,\"AudioRecord.getMinBufferSize: \" + minBufferSize);\n  int bufferSizeInBytes=Math.max(BUFFER_SIZE_FACTOR * minBufferSize,byteBuffer.capacity());\n  Logging.d(TAG,\"bufferSizeInBytes: \" + bufferSizeInBytes);\n  try {\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n      audioRecord=createAudioRecordOnMOrHigher(audioSource,sampleRate,channelConfig,audioFormat,bufferSizeInBytes);\n      if (preferredDevice != null) {\n        setPreferredDevice(preferredDevice);\n      }\n    }\n else {\n      audioRecord=createAudioRecordOnLowerThanM(audioSource,sampleRate,channelConfig,audioFormat,bufferSizeInBytes);\n    }\n  }\n catch (  IllegalArgumentException|UnsupportedOperationException e) {\n    reportWebRtcAudioRecordInitError(e.getMessage());\n    releaseAudioResources();\n    return -1;\n  }\n  if (audioRecord == null || audioRecord.getState() != AudioRecord.STATE_INITIALIZED) {\n    reportWebRtcAudioRecordInitError(\"Creation or initialization of audio recorder failed.\");\n    releaseAudioResources();\n    return -1;\n  }\n  effects.enable(audioRecord.getAudioSessionId());\n  logMainParameters();\n  logMainParametersExtended();\n  final int numActiveRecordingSessions=logRecordingConfigurations(false);\n  if (numActiveRecordingSessions != 0) {\n    Logging.w(TAG,\"Potential microphone conflict. Active sessions: \" + numActiveRecordingSessions);\n  }\n  return framesPerBuffer;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 284,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4099,
        "startLineNumber" : 259,
        "startColumnNumber" : 2,
        "endLineNumber" : 336,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@CalledByNative private int initRecording(int sampleRate,int channels){\n  Logging.d(TAG,\"initRecording(sampleRate=\" + sampleRate + \", channels=\"+ channels+ \")\");\n  if (audioRecord != null) {\n    reportWebRtcAudioRecordInitError(\"InitRecording called twice without StopRecording.\");\n    return -1;\n  }\n  final int bytesPerFrame=channels * getBytesPerSample(audioFormat);\n  final int framesPerBuffer=sampleRate / BUFFERS_PER_SECOND;\n  byteBuffer=ByteBuffer.allocateDirect(bytesPerFrame * framesPerBuffer);\n  if (!(byteBuffer.hasArray())) {\n    reportWebRtcAudioRecordInitError(\"ByteBuffer does not have backing array.\");\n    return -1;\n  }\n  Logging.d(TAG,\"byteBuffer.capacity: \" + byteBuffer.capacity());\n  emptyBytes=new byte[byteBuffer.capacity()];\n  nativeCacheDirectBufferAddress(nativeAudioRecord,byteBuffer);\n  final int channelConfig=channelCountToConfiguration(channels);\n  int minBufferSize=AudioRecord.getMinBufferSize(sampleRate,channelConfig,audioFormat);\n  if (minBufferSize == AudioRecord.ERROR || minBufferSize == AudioRecord.ERROR_BAD_VALUE) {\n    reportWebRtcAudioRecordInitError(\"AudioRecord.getMinBufferSize failed: \" + minBufferSize);\n    return -1;\n  }\n  Logging.d(TAG,\"AudioRecord.getMinBufferSize: \" + minBufferSize);\n  int bufferSizeInBytes=Math.max(BUFFER_SIZE_FACTOR * minBufferSize,byteBuffer.capacity());\n  Logging.d(TAG,\"bufferSizeInBytes: \" + bufferSizeInBytes);\n  try {\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n      audioRecord=createAudioRecordOnMOrHigher(audioSource,sampleRate,channelConfig,audioFormat,bufferSizeInBytes);\n      if (preferredDevice != null) {\n        setPreferredDevice(preferredDevice);\n      }\n    }\n else {\n      audioRecord=createAudioRecordOnLowerThanM(audioSource,sampleRate,channelConfig,audioFormat,bufferSizeInBytes);\n    }\n  }\n catch (  IllegalArgumentException|UnsupportedOperationException e) {\n    reportWebRtcAudioRecordInitError(e.getMessage());\n    releaseAudioResources();\n    return -1;\n  }\n  if (audioRecord == null || audioRecord.getState() != AudioRecord.STATE_INITIALIZED) {\n    reportWebRtcAudioRecordInitError(\"Creation or initialization of audio recorder failed.\");\n    releaseAudioResources();\n    return -1;\n  }\n  effects.enable(audioRecord.getAudioSessionId());\n  logMainParameters();\n  logMainParametersExtended();\n  final int numActiveRecordingSessions=logRecordingConfigurations(false);\n  if (numActiveRecordingSessions != 0) {\n    Logging.w(TAG,\"Potential microphone conflict. Active sessions: \" + numActiveRecordingSessions);\n  }\n  return framesPerBuffer;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 296,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 287,
        "startColumnNumber" : 6,
        "endLineNumber" : 287,
        "endColumnNumber" : 16
      },
      "nodeContext" : "return -1;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 3,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "-1",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 315,
      "startColumnNumber" : 13,
      "endLineNumber" : 315,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 2,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 315,
        "startColumnNumber" : 6,
        "endLineNumber" : 315,
        "endColumnNumber" : 16
      },
      "nodeContext" : "return -1;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 3,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 201,
        "startLineNumber" : 311,
        "startColumnNumber" : 73,
        "endLineNumber" : 316,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  reportWebRtcAudioRecordInitError(e.getMessage());\n  releaseAudioResources();\n  return -1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 268,
        "startLineNumber" : 311,
        "startColumnNumber" : 6,
        "endLineNumber" : 316,
        "endColumnNumber" : 5
      },
      "nodeContext" : "catch (IllegalArgumentException|UnsupportedOperationException e) {\n  reportWebRtcAudioRecordInitError(e.getMessage());\n  releaseAudioResources();\n  return -1;\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 973,
        "startLineNumber" : 296,
        "startColumnNumber" : 4,
        "endLineNumber" : 316,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n    audioRecord=createAudioRecordOnMOrHigher(audioSource,sampleRate,channelConfig,audioFormat,bufferSizeInBytes);\n    if (preferredDevice != null) {\n      setPreferredDevice(preferredDevice);\n    }\n  }\n else {\n    audioRecord=createAudioRecordOnLowerThanM(audioSource,sampleRate,channelConfig,audioFormat,bufferSizeInBytes);\n  }\n}\n catch (IllegalArgumentException|UnsupportedOperationException e) {\n  reportWebRtcAudioRecordInitError(e.getMessage());\n  releaseAudioResources();\n  return -1;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 66,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4025,
        "startLineNumber" : 260,
        "startColumnNumber" : 58,
        "endLineNumber" : 336,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Logging.d(TAG,\"initRecording(sampleRate=\" + sampleRate + \", channels=\"+ channels+ \")\");\n  if (audioRecord != null) {\n    reportWebRtcAudioRecordInitError(\"InitRecording called twice without StopRecording.\");\n    return -1;\n  }\n  final int bytesPerFrame=channels * getBytesPerSample(audioFormat);\n  final int framesPerBuffer=sampleRate / BUFFERS_PER_SECOND;\n  byteBuffer=ByteBuffer.allocateDirect(bytesPerFrame * framesPerBuffer);\n  if (!(byteBuffer.hasArray())) {\n    reportWebRtcAudioRecordInitError(\"ByteBuffer does not have backing array.\");\n    return -1;\n  }\n  Logging.d(TAG,\"byteBuffer.capacity: \" + byteBuffer.capacity());\n  emptyBytes=new byte[byteBuffer.capacity()];\n  nativeCacheDirectBufferAddress(nativeAudioRecord,byteBuffer);\n  final int channelConfig=channelCountToConfiguration(channels);\n  int minBufferSize=AudioRecord.getMinBufferSize(sampleRate,channelConfig,audioFormat);\n  if (minBufferSize == AudioRecord.ERROR || minBufferSize == AudioRecord.ERROR_BAD_VALUE) {\n    reportWebRtcAudioRecordInitError(\"AudioRecord.getMinBufferSize failed: \" + minBufferSize);\n    return -1;\n  }\n  Logging.d(TAG,\"AudioRecord.getMinBufferSize: \" + minBufferSize);\n  int bufferSizeInBytes=Math.max(BUFFER_SIZE_FACTOR * minBufferSize,byteBuffer.capacity());\n  Logging.d(TAG,\"bufferSizeInBytes: \" + bufferSizeInBytes);\n  try {\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n      audioRecord=createAudioRecordOnMOrHigher(audioSource,sampleRate,channelConfig,audioFormat,bufferSizeInBytes);\n      if (preferredDevice != null) {\n        setPreferredDevice(preferredDevice);\n      }\n    }\n else {\n      audioRecord=createAudioRecordOnLowerThanM(audioSource,sampleRate,channelConfig,audioFormat,bufferSizeInBytes);\n    }\n  }\n catch (  IllegalArgumentException|UnsupportedOperationException e) {\n    reportWebRtcAudioRecordInitError(e.getMessage());\n    releaseAudioResources();\n    return -1;\n  }\n  if (audioRecord == null || audioRecord.getState() != AudioRecord.STATE_INITIALIZED) {\n    reportWebRtcAudioRecordInitError(\"Creation or initialization of audio recorder failed.\");\n    releaseAudioResources();\n    return -1;\n  }\n  effects.enable(audioRecord.getAudioSessionId());\n  logMainParameters();\n  logMainParametersExtended();\n  final int numActiveRecordingSessions=logRecordingConfigurations(false);\n  if (numActiveRecordingSessions != 0) {\n    Logging.w(TAG,\"Potential microphone conflict. Active sessions: \" + numActiveRecordingSessions);\n  }\n  return framesPerBuffer;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 284,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4099,
        "startLineNumber" : 259,
        "startColumnNumber" : 2,
        "endLineNumber" : 336,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@CalledByNative private int initRecording(int sampleRate,int channels){\n  Logging.d(TAG,\"initRecording(sampleRate=\" + sampleRate + \", channels=\"+ channels+ \")\");\n  if (audioRecord != null) {\n    reportWebRtcAudioRecordInitError(\"InitRecording called twice without StopRecording.\");\n    return -1;\n  }\n  final int bytesPerFrame=channels * getBytesPerSample(audioFormat);\n  final int framesPerBuffer=sampleRate / BUFFERS_PER_SECOND;\n  byteBuffer=ByteBuffer.allocateDirect(bytesPerFrame * framesPerBuffer);\n  if (!(byteBuffer.hasArray())) {\n    reportWebRtcAudioRecordInitError(\"ByteBuffer does not have backing array.\");\n    return -1;\n  }\n  Logging.d(TAG,\"byteBuffer.capacity: \" + byteBuffer.capacity());\n  emptyBytes=new byte[byteBuffer.capacity()];\n  nativeCacheDirectBufferAddress(nativeAudioRecord,byteBuffer);\n  final int channelConfig=channelCountToConfiguration(channels);\n  int minBufferSize=AudioRecord.getMinBufferSize(sampleRate,channelConfig,audioFormat);\n  if (minBufferSize == AudioRecord.ERROR || minBufferSize == AudioRecord.ERROR_BAD_VALUE) {\n    reportWebRtcAudioRecordInitError(\"AudioRecord.getMinBufferSize failed: \" + minBufferSize);\n    return -1;\n  }\n  Logging.d(TAG,\"AudioRecord.getMinBufferSize: \" + minBufferSize);\n  int bufferSizeInBytes=Math.max(BUFFER_SIZE_FACTOR * minBufferSize,byteBuffer.capacity());\n  Logging.d(TAG,\"bufferSizeInBytes: \" + bufferSizeInBytes);\n  try {\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n      audioRecord=createAudioRecordOnMOrHigher(audioSource,sampleRate,channelConfig,audioFormat,bufferSizeInBytes);\n      if (preferredDevice != null) {\n        setPreferredDevice(preferredDevice);\n      }\n    }\n else {\n      audioRecord=createAudioRecordOnLowerThanM(audioSource,sampleRate,channelConfig,audioFormat,bufferSizeInBytes);\n    }\n  }\n catch (  IllegalArgumentException|UnsupportedOperationException e) {\n    reportWebRtcAudioRecordInitError(e.getMessage());\n    releaseAudioResources();\n    return -1;\n  }\n  if (audioRecord == null || audioRecord.getState() != AudioRecord.STATE_INITIALIZED) {\n    reportWebRtcAudioRecordInitError(\"Creation or initialization of audio recorder failed.\");\n    releaseAudioResources();\n    return -1;\n  }\n  effects.enable(audioRecord.getAudioSessionId());\n  logMainParameters();\n  logMainParametersExtended();\n  final int numActiveRecordingSessions=logRecordingConfigurations(false);\n  if (numActiveRecordingSessions != 0) {\n    Logging.w(TAG,\"Potential microphone conflict. Active sessions: \" + numActiveRecordingSessions);\n  }\n  return framesPerBuffer;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 296,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 315,
        "startColumnNumber" : 6,
        "endLineNumber" : 315,
        "endColumnNumber" : 16
      },
      "nodeContext" : "return -1;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 3,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "-1",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 320,
      "startColumnNumber" : 13,
      "endLineNumber" : 320,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 2,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 320,
        "startColumnNumber" : 6,
        "endLineNumber" : 320,
        "endColumnNumber" : 16
      },
      "nodeContext" : "return -1;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 3,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 151,
        "startLineNumber" : 317,
        "startColumnNumber" : 88,
        "endLineNumber" : 321,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  reportWebRtcAudioRecordInitError(\"Creation or initialization of audio recorder failed.\");\n  releaseAudioResources();\n  return -1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 235,
        "startLineNumber" : 317,
        "startColumnNumber" : 4,
        "endLineNumber" : 321,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (audioRecord == null || audioRecord.getState() != AudioRecord.STATE_INITIALIZED) {\n  reportWebRtcAudioRecordInitError(\"Creation or initialization of audio recorder failed.\");\n  releaseAudioResources();\n  return -1;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4025,
        "startLineNumber" : 260,
        "startColumnNumber" : 58,
        "endLineNumber" : 336,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Logging.d(TAG,\"initRecording(sampleRate=\" + sampleRate + \", channels=\"+ channels+ \")\");\n  if (audioRecord != null) {\n    reportWebRtcAudioRecordInitError(\"InitRecording called twice without StopRecording.\");\n    return -1;\n  }\n  final int bytesPerFrame=channels * getBytesPerSample(audioFormat);\n  final int framesPerBuffer=sampleRate / BUFFERS_PER_SECOND;\n  byteBuffer=ByteBuffer.allocateDirect(bytesPerFrame * framesPerBuffer);\n  if (!(byteBuffer.hasArray())) {\n    reportWebRtcAudioRecordInitError(\"ByteBuffer does not have backing array.\");\n    return -1;\n  }\n  Logging.d(TAG,\"byteBuffer.capacity: \" + byteBuffer.capacity());\n  emptyBytes=new byte[byteBuffer.capacity()];\n  nativeCacheDirectBufferAddress(nativeAudioRecord,byteBuffer);\n  final int channelConfig=channelCountToConfiguration(channels);\n  int minBufferSize=AudioRecord.getMinBufferSize(sampleRate,channelConfig,audioFormat);\n  if (minBufferSize == AudioRecord.ERROR || minBufferSize == AudioRecord.ERROR_BAD_VALUE) {\n    reportWebRtcAudioRecordInitError(\"AudioRecord.getMinBufferSize failed: \" + minBufferSize);\n    return -1;\n  }\n  Logging.d(TAG,\"AudioRecord.getMinBufferSize: \" + minBufferSize);\n  int bufferSizeInBytes=Math.max(BUFFER_SIZE_FACTOR * minBufferSize,byteBuffer.capacity());\n  Logging.d(TAG,\"bufferSizeInBytes: \" + bufferSizeInBytes);\n  try {\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n      audioRecord=createAudioRecordOnMOrHigher(audioSource,sampleRate,channelConfig,audioFormat,bufferSizeInBytes);\n      if (preferredDevice != null) {\n        setPreferredDevice(preferredDevice);\n      }\n    }\n else {\n      audioRecord=createAudioRecordOnLowerThanM(audioSource,sampleRate,channelConfig,audioFormat,bufferSizeInBytes);\n    }\n  }\n catch (  IllegalArgumentException|UnsupportedOperationException e) {\n    reportWebRtcAudioRecordInitError(e.getMessage());\n    releaseAudioResources();\n    return -1;\n  }\n  if (audioRecord == null || audioRecord.getState() != AudioRecord.STATE_INITIALIZED) {\n    reportWebRtcAudioRecordInitError(\"Creation or initialization of audio recorder failed.\");\n    releaseAudioResources();\n    return -1;\n  }\n  effects.enable(audioRecord.getAudioSessionId());\n  logMainParameters();\n  logMainParametersExtended();\n  final int numActiveRecordingSessions=logRecordingConfigurations(false);\n  if (numActiveRecordingSessions != 0) {\n    Logging.w(TAG,\"Potential microphone conflict. Active sessions: \" + numActiveRecordingSessions);\n  }\n  return framesPerBuffer;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 284,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4099,
        "startLineNumber" : 259,
        "startColumnNumber" : 2,
        "endLineNumber" : 336,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@CalledByNative private int initRecording(int sampleRate,int channels){\n  Logging.d(TAG,\"initRecording(sampleRate=\" + sampleRate + \", channels=\"+ channels+ \")\");\n  if (audioRecord != null) {\n    reportWebRtcAudioRecordInitError(\"InitRecording called twice without StopRecording.\");\n    return -1;\n  }\n  final int bytesPerFrame=channels * getBytesPerSample(audioFormat);\n  final int framesPerBuffer=sampleRate / BUFFERS_PER_SECOND;\n  byteBuffer=ByteBuffer.allocateDirect(bytesPerFrame * framesPerBuffer);\n  if (!(byteBuffer.hasArray())) {\n    reportWebRtcAudioRecordInitError(\"ByteBuffer does not have backing array.\");\n    return -1;\n  }\n  Logging.d(TAG,\"byteBuffer.capacity: \" + byteBuffer.capacity());\n  emptyBytes=new byte[byteBuffer.capacity()];\n  nativeCacheDirectBufferAddress(nativeAudioRecord,byteBuffer);\n  final int channelConfig=channelCountToConfiguration(channels);\n  int minBufferSize=AudioRecord.getMinBufferSize(sampleRate,channelConfig,audioFormat);\n  if (minBufferSize == AudioRecord.ERROR || minBufferSize == AudioRecord.ERROR_BAD_VALUE) {\n    reportWebRtcAudioRecordInitError(\"AudioRecord.getMinBufferSize failed: \" + minBufferSize);\n    return -1;\n  }\n  Logging.d(TAG,\"AudioRecord.getMinBufferSize: \" + minBufferSize);\n  int bufferSizeInBytes=Math.max(BUFFER_SIZE_FACTOR * minBufferSize,byteBuffer.capacity());\n  Logging.d(TAG,\"bufferSizeInBytes: \" + bufferSizeInBytes);\n  try {\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n      audioRecord=createAudioRecordOnMOrHigher(audioSource,sampleRate,channelConfig,audioFormat,bufferSizeInBytes);\n      if (preferredDevice != null) {\n        setPreferredDevice(preferredDevice);\n      }\n    }\n else {\n      audioRecord=createAudioRecordOnLowerThanM(audioSource,sampleRate,channelConfig,audioFormat,bufferSizeInBytes);\n    }\n  }\n catch (  IllegalArgumentException|UnsupportedOperationException e) {\n    reportWebRtcAudioRecordInitError(e.getMessage());\n    releaseAudioResources();\n    return -1;\n  }\n  if (audioRecord == null || audioRecord.getState() != AudioRecord.STATE_INITIALIZED) {\n    reportWebRtcAudioRecordInitError(\"Creation or initialization of audio recorder failed.\");\n    releaseAudioResources();\n    return -1;\n  }\n  effects.enable(audioRecord.getAudioSessionId());\n  logMainParameters();\n  logMainParametersExtended();\n  final int numActiveRecordingSessions=logRecordingConfigurations(false);\n  if (numActiveRecordingSessions != 0) {\n    Logging.w(TAG,\"Potential microphone conflict. Active sessions: \" + numActiveRecordingSessions);\n  }\n  return framesPerBuffer;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 296,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 320,
        "startColumnNumber" : 6,
        "endLineNumber" : 320,
        "endColumnNumber" : 16
      },
      "nodeContext" : "return -1;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 3,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 264,
    "startColumnNumber" : 13,
    "endLineNumber" : 264,
    "endColumnNumber" : 15
  }, {
    "charLength" : 2,
    "startLineNumber" : 271,
    "startColumnNumber" : 13,
    "endLineNumber" : 271,
    "endColumnNumber" : 15
  }, {
    "charLength" : 2,
    "startLineNumber" : 287,
    "startColumnNumber" : 13,
    "endLineNumber" : 287,
    "endColumnNumber" : 15
  }, {
    "charLength" : 2,
    "startLineNumber" : 315,
    "startColumnNumber" : 13,
    "endLineNumber" : 315,
    "endColumnNumber" : 15
  }, {
    "charLength" : 2,
    "startLineNumber" : 320,
    "startColumnNumber" : 13,
    "endLineNumber" : 320,
    "endColumnNumber" : 15
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  } ]
}