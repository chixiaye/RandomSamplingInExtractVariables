{
  "id" : 404,
  "expression" : "Domain.create(ValueSet.ofRanges(Range.lessThan(BIGINT,0L),Range.equal(BIGINT,1L),Range.range(BIGINT,2L,true,3L,true)),true)",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-common/src/test/java/com/facebook/presto/common/predicate/TestDomain.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Domain.create(ValueSet.ofRanges(Range.lessThan(BIGINT,0L),Range.equal(BIGINT,1L),Range.range(BIGINT,2L,true,3L,true)),true)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 132,
      "startLineNumber" : 554,
      "startColumnNumber" : 17,
      "endLineNumber" : 554,
      "endColumnNumber" : 149
    },
    "astNodeNumber" : 25,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 141,
        "startLineNumber" : 554,
        "startColumnNumber" : 8,
        "endLineNumber" : 554,
        "endColumnNumber" : 149
      },
      "nodeContext" : "domain=Domain.create(ValueSet.ofRanges(Range.lessThan(BIGINT,0L),Range.equal(BIGINT,1L),Range.range(BIGINT,2L,true,3L,true)),true)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 27,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 142,
        "startLineNumber" : 554,
        "startColumnNumber" : 8,
        "endLineNumber" : 554,
        "endColumnNumber" : 150
      },
      "nodeContext" : "domain=Domain.create(ValueSet.ofRanges(Range.lessThan(BIGINT,0L),Range.equal(BIGINT,1L),Range.range(BIGINT,2L,true,3L,true)),true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 28,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2017,
        "startLineNumber" : 520,
        "startColumnNumber" : 4,
        "endLineNumber" : 556,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TestingTypeManager typeManager=new TestingTypeManager();\n  TestingBlockEncodingSerde blockEncodingSerde=new TestingBlockEncodingSerde();\n  ObjectMapper mapper=new JsonObjectMapperProvider().get().registerModule(new SimpleModule().addDeserializer(Type.class,new TestingTypeDeserializer(typeManager)).addSerializer(Block.class,new TestingBlockJsonSerde.Serializer(blockEncodingSerde)).addDeserializer(Block.class,new TestingBlockJsonSerde.Deserializer(blockEncodingSerde)));\n  Domain domain=Domain.all(BIGINT);\n  assertEquals(domain,mapper.readValue(mapper.writeValueAsString(domain),Domain.class));\n  domain=Domain.none(DOUBLE);\n  assertEquals(domain,mapper.readValue(mapper.writeValueAsString(domain),Domain.class));\n  domain=Domain.notNull(BOOLEAN);\n  assertEquals(domain,mapper.readValue(mapper.writeValueAsString(domain),Domain.class));\n  domain=Domain.notNull(HYPER_LOG_LOG);\n  assertEquals(domain,mapper.readValue(mapper.writeValueAsString(domain),Domain.class));\n  domain=Domain.onlyNull(VARCHAR);\n  assertEquals(domain,mapper.readValue(mapper.writeValueAsString(domain),Domain.class));\n  domain=Domain.onlyNull(HYPER_LOG_LOG);\n  assertEquals(domain,mapper.readValue(mapper.writeValueAsString(domain),Domain.class));\n  domain=Domain.singleValue(BIGINT,Long.MIN_VALUE);\n  assertEquals(domain,mapper.readValue(mapper.writeValueAsString(domain),Domain.class));\n  domain=Domain.singleValue(ID,Long.MIN_VALUE);\n  assertEquals(domain,mapper.readValue(mapper.writeValueAsString(domain),Domain.class));\n  domain=Domain.create(ValueSet.ofRanges(Range.lessThan(BIGINT,0L),Range.equal(BIGINT,1L),Range.range(BIGINT,2L,true,3L,true)),true);\n  assertEquals(domain,mapper.readValue(mapper.writeValueAsString(domain),Domain.class));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 281,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2096,
        "startLineNumber" : 517,
        "startColumnNumber" : 4,
        "endLineNumber" : 556,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testJsonSerialization() throws Exception {\n  TestingTypeManager typeManager=new TestingTypeManager();\n  TestingBlockEncodingSerde blockEncodingSerde=new TestingBlockEncodingSerde();\n  ObjectMapper mapper=new JsonObjectMapperProvider().get().registerModule(new SimpleModule().addDeserializer(Type.class,new TestingTypeDeserializer(typeManager)).addSerializer(Block.class,new TestingBlockJsonSerde.Serializer(blockEncodingSerde)).addDeserializer(Block.class,new TestingBlockJsonSerde.Deserializer(blockEncodingSerde)));\n  Domain domain=Domain.all(BIGINT);\n  assertEquals(domain,mapper.readValue(mapper.writeValueAsString(domain),Domain.class));\n  domain=Domain.none(DOUBLE);\n  assertEquals(domain,mapper.readValue(mapper.writeValueAsString(domain),Domain.class));\n  domain=Domain.notNull(BOOLEAN);\n  assertEquals(domain,mapper.readValue(mapper.writeValueAsString(domain),Domain.class));\n  domain=Domain.notNull(HYPER_LOG_LOG);\n  assertEquals(domain,mapper.readValue(mapper.writeValueAsString(domain),Domain.class));\n  domain=Domain.onlyNull(VARCHAR);\n  assertEquals(domain,mapper.readValue(mapper.writeValueAsString(domain),Domain.class));\n  domain=Domain.onlyNull(HYPER_LOG_LOG);\n  assertEquals(domain,mapper.readValue(mapper.writeValueAsString(domain),Domain.class));\n  domain=Domain.singleValue(BIGINT,Long.MIN_VALUE);\n  assertEquals(domain,mapper.readValue(mapper.writeValueAsString(domain),Domain.class));\n  domain=Domain.singleValue(ID,Long.MIN_VALUE);\n  assertEquals(domain,mapper.readValue(mapper.writeValueAsString(domain),Domain.class));\n  domain=Domain.create(ValueSet.ofRanges(Range.lessThan(BIGINT,0L),Range.equal(BIGINT,1L),Range.range(BIGINT,2L,true,3L,true)),true);\n  assertEquals(domain,mapper.readValue(mapper.writeValueAsString(domain),Domain.class));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 289,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 142,
        "startLineNumber" : 554,
        "startColumnNumber" : 8,
        "endLineNumber" : 554,
        "endColumnNumber" : 150
      },
      "nodeContext" : "domain=Domain.create(ValueSet.ofRanges(Range.lessThan(BIGINT,0L),Range.equal(BIGINT,1L),Range.range(BIGINT,2L,true,3L,true)),true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 28,
      "astHeight" : 6
    },
    "tokenLength" : 20,
    "type" : "com.facebook.presto.common.predicate.Domain"
  } ],
  "positionList" : [ {
    "charLength" : 132,
    "startLineNumber" : 554,
    "startColumnNumber" : 17,
    "endLineNumber" : 554,
    "endColumnNumber" : 149
  } ],
  "layoutRelationDataList" : [ ]
}