{
  "id" : 49,
  "expression" : "a",
  "projectName" : "NationalSecurityAgency@ghidra",
  "commitID" : "a54d0e28d652c48502551a88278808549aed5f98",
  "filePath" : "/Ghidra/Framework/SoftwareModeling/src/test/java/ghidra/pcode/opbehavior/OpBehaviorFloatEqualTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "a",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 65,
      "startColumnNumber" : 42,
      "endLineNumber" : 65,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 65,
        "startColumnNumber" : 27,
        "endLineNumber" : 65,
        "endColumnNumber" : 44
      },
      "nodeContext" : "ff.getEncoding(a)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 65,
        "startColumnNumber" : 3,
        "endLineNumber" : 65,
        "endColumnNumber" : 64
      },
      "nodeContext" : "op.evaluateBinary(8,8,ff.getEncoding(a),ff.getEncoding(a))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 64,
        "startColumnNumber" : 2,
        "endLineNumber" : 65,
        "endColumnNumber" : 65
      },
      "nodeContext" : "Assert.assertEquals(BigInteger.ONE,op.evaluateBinary(8,8,ff.getEncoding(a),ff.getEncoding(a)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 64,
        "startColumnNumber" : 2,
        "endLineNumber" : 65,
        "endColumnNumber" : 66
      },
      "nodeContext" : "Assert.assertEquals(BigInteger.ONE,op.evaluateBinary(8,8,ff.getEncoding(a),ff.getEncoding(a)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1073,
        "startLineNumber" : 56,
        "startColumnNumber" : 44,
        "endLineNumber" : 79,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  OpBehaviorFloatEqual op=new OpBehaviorFloatEqual();\n  FloatFormat ff=FloatFormatFactory.getFloatFormat(8);\n  BigFloat a=ff.getBigFloat(1.234d);\n  BigFloat b=ff.getBigFloat(-1.234d);\n  Assert.assertEquals(BigInteger.ONE,op.evaluateBinary(8,8,ff.getEncoding(a),ff.getEncoding(a)));\n  Assert.assertEquals(BigInteger.ONE,op.evaluateBinary(8,8,ff.getEncoding(b),ff.getEncoding(b)));\n  Assert.assertEquals(BigInteger.ZERO,op.evaluateBinary(8,8,ff.getEncoding(b),ff.getEncoding(a)));\n  Assert.assertEquals(BigInteger.ONE,op.evaluateBinary(8,8,ff.getBigInfinityEncoding(false),ff.getBigInfinityEncoding(false)));\n  Assert.assertEquals(BigInteger.ZERO,op.evaluateBinary(8,8,ff.getBigInfinityEncoding(false),ff.getBigInfinityEncoding(true)));\n  Assert.assertEquals(BigInteger.ONE,op.evaluateBinary(8,8,ff.getBigInfinityEncoding(true),ff.getBigInfinityEncoding(true)));\n  Assert.assertEquals(BigInteger.ZERO,op.evaluateBinary(8,8,ff.getBigInfinityEncoding(false),ff.getBigNaNEncoding(false)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 177,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1124,
        "startLineNumber" : 55,
        "startColumnNumber" : 1,
        "endLineNumber" : 79,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testEvaluateBinaryBigInteger(){\n  OpBehaviorFloatEqual op=new OpBehaviorFloatEqual();\n  FloatFormat ff=FloatFormatFactory.getFloatFormat(8);\n  BigFloat a=ff.getBigFloat(1.234d);\n  BigFloat b=ff.getBigFloat(-1.234d);\n  Assert.assertEquals(BigInteger.ONE,op.evaluateBinary(8,8,ff.getEncoding(a),ff.getEncoding(a)));\n  Assert.assertEquals(BigInteger.ONE,op.evaluateBinary(8,8,ff.getEncoding(b),ff.getEncoding(b)));\n  Assert.assertEquals(BigInteger.ZERO,op.evaluateBinary(8,8,ff.getEncoding(b),ff.getEncoding(a)));\n  Assert.assertEquals(BigInteger.ONE,op.evaluateBinary(8,8,ff.getBigInfinityEncoding(false),ff.getBigInfinityEncoding(false)));\n  Assert.assertEquals(BigInteger.ZERO,op.evaluateBinary(8,8,ff.getBigInfinityEncoding(false),ff.getBigInfinityEncoding(true)));\n  Assert.assertEquals(BigInteger.ONE,op.evaluateBinary(8,8,ff.getBigInfinityEncoding(true),ff.getBigInfinityEncoding(true)));\n  Assert.assertEquals(BigInteger.ZERO,op.evaluateBinary(8,8,ff.getBigInfinityEncoding(false),ff.getBigNaNEncoding(false)));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 183,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 65,
        "startColumnNumber" : 3,
        "endLineNumber" : 65,
        "endColumnNumber" : 64
      },
      "nodeContext" : "op.evaluateBinary(8,8,ff.getEncoding(a),ff.getEncoding(a))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "ghidra.pcode.floatformat.BigFloat"
  }, {
    "nodeContext" : "a",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 65,
      "startColumnNumber" : 61,
      "endLineNumber" : 65,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 65,
        "startColumnNumber" : 46,
        "endLineNumber" : 65,
        "endColumnNumber" : 63
      },
      "nodeContext" : "ff.getEncoding(a)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 65,
        "startColumnNumber" : 3,
        "endLineNumber" : 65,
        "endColumnNumber" : 64
      },
      "nodeContext" : "op.evaluateBinary(8,8,ff.getEncoding(a),ff.getEncoding(a))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 64,
        "startColumnNumber" : 2,
        "endLineNumber" : 65,
        "endColumnNumber" : 65
      },
      "nodeContext" : "Assert.assertEquals(BigInteger.ONE,op.evaluateBinary(8,8,ff.getEncoding(a),ff.getEncoding(a)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 64,
        "startColumnNumber" : 2,
        "endLineNumber" : 65,
        "endColumnNumber" : 66
      },
      "nodeContext" : "Assert.assertEquals(BigInteger.ONE,op.evaluateBinary(8,8,ff.getEncoding(a),ff.getEncoding(a)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1073,
        "startLineNumber" : 56,
        "startColumnNumber" : 44,
        "endLineNumber" : 79,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  OpBehaviorFloatEqual op=new OpBehaviorFloatEqual();\n  FloatFormat ff=FloatFormatFactory.getFloatFormat(8);\n  BigFloat a=ff.getBigFloat(1.234d);\n  BigFloat b=ff.getBigFloat(-1.234d);\n  Assert.assertEquals(BigInteger.ONE,op.evaluateBinary(8,8,ff.getEncoding(a),ff.getEncoding(a)));\n  Assert.assertEquals(BigInteger.ONE,op.evaluateBinary(8,8,ff.getEncoding(b),ff.getEncoding(b)));\n  Assert.assertEquals(BigInteger.ZERO,op.evaluateBinary(8,8,ff.getEncoding(b),ff.getEncoding(a)));\n  Assert.assertEquals(BigInteger.ONE,op.evaluateBinary(8,8,ff.getBigInfinityEncoding(false),ff.getBigInfinityEncoding(false)));\n  Assert.assertEquals(BigInteger.ZERO,op.evaluateBinary(8,8,ff.getBigInfinityEncoding(false),ff.getBigInfinityEncoding(true)));\n  Assert.assertEquals(BigInteger.ONE,op.evaluateBinary(8,8,ff.getBigInfinityEncoding(true),ff.getBigInfinityEncoding(true)));\n  Assert.assertEquals(BigInteger.ZERO,op.evaluateBinary(8,8,ff.getBigInfinityEncoding(false),ff.getBigNaNEncoding(false)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 177,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1124,
        "startLineNumber" : 55,
        "startColumnNumber" : 1,
        "endLineNumber" : 79,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testEvaluateBinaryBigInteger(){\n  OpBehaviorFloatEqual op=new OpBehaviorFloatEqual();\n  FloatFormat ff=FloatFormatFactory.getFloatFormat(8);\n  BigFloat a=ff.getBigFloat(1.234d);\n  BigFloat b=ff.getBigFloat(-1.234d);\n  Assert.assertEquals(BigInteger.ONE,op.evaluateBinary(8,8,ff.getEncoding(a),ff.getEncoding(a)));\n  Assert.assertEquals(BigInteger.ONE,op.evaluateBinary(8,8,ff.getEncoding(b),ff.getEncoding(b)));\n  Assert.assertEquals(BigInteger.ZERO,op.evaluateBinary(8,8,ff.getEncoding(b),ff.getEncoding(a)));\n  Assert.assertEquals(BigInteger.ONE,op.evaluateBinary(8,8,ff.getBigInfinityEncoding(false),ff.getBigInfinityEncoding(false)));\n  Assert.assertEquals(BigInteger.ZERO,op.evaluateBinary(8,8,ff.getBigInfinityEncoding(false),ff.getBigInfinityEncoding(true)));\n  Assert.assertEquals(BigInteger.ONE,op.evaluateBinary(8,8,ff.getBigInfinityEncoding(true),ff.getBigInfinityEncoding(true)));\n  Assert.assertEquals(BigInteger.ZERO,op.evaluateBinary(8,8,ff.getBigInfinityEncoding(false),ff.getBigNaNEncoding(false)));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 183,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 65,
        "startColumnNumber" : 3,
        "endLineNumber" : 65,
        "endColumnNumber" : 64
      },
      "nodeContext" : "op.evaluateBinary(8,8,ff.getEncoding(a),ff.getEncoding(a))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "ghidra.pcode.floatformat.BigFloat"
  }, {
    "nodeContext" : "a",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 69,
      "startColumnNumber" : 61,
      "endLineNumber" : 69,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 69,
        "startColumnNumber" : 46,
        "endLineNumber" : 69,
        "endColumnNumber" : 63
      },
      "nodeContext" : "ff.getEncoding(a)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 69,
        "startColumnNumber" : 3,
        "endLineNumber" : 69,
        "endColumnNumber" : 64
      },
      "nodeContext" : "op.evaluateBinary(8,8,ff.getEncoding(b),ff.getEncoding(a))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 68,
        "startColumnNumber" : 2,
        "endLineNumber" : 69,
        "endColumnNumber" : 65
      },
      "nodeContext" : "Assert.assertEquals(BigInteger.ZERO,op.evaluateBinary(8,8,ff.getEncoding(b),ff.getEncoding(a)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 68,
        "startColumnNumber" : 2,
        "endLineNumber" : 69,
        "endColumnNumber" : 66
      },
      "nodeContext" : "Assert.assertEquals(BigInteger.ZERO,op.evaluateBinary(8,8,ff.getEncoding(b),ff.getEncoding(a)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1073,
        "startLineNumber" : 56,
        "startColumnNumber" : 44,
        "endLineNumber" : 79,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  OpBehaviorFloatEqual op=new OpBehaviorFloatEqual();\n  FloatFormat ff=FloatFormatFactory.getFloatFormat(8);\n  BigFloat a=ff.getBigFloat(1.234d);\n  BigFloat b=ff.getBigFloat(-1.234d);\n  Assert.assertEquals(BigInteger.ONE,op.evaluateBinary(8,8,ff.getEncoding(a),ff.getEncoding(a)));\n  Assert.assertEquals(BigInteger.ONE,op.evaluateBinary(8,8,ff.getEncoding(b),ff.getEncoding(b)));\n  Assert.assertEquals(BigInteger.ZERO,op.evaluateBinary(8,8,ff.getEncoding(b),ff.getEncoding(a)));\n  Assert.assertEquals(BigInteger.ONE,op.evaluateBinary(8,8,ff.getBigInfinityEncoding(false),ff.getBigInfinityEncoding(false)));\n  Assert.assertEquals(BigInteger.ZERO,op.evaluateBinary(8,8,ff.getBigInfinityEncoding(false),ff.getBigInfinityEncoding(true)));\n  Assert.assertEquals(BigInteger.ONE,op.evaluateBinary(8,8,ff.getBigInfinityEncoding(true),ff.getBigInfinityEncoding(true)));\n  Assert.assertEquals(BigInteger.ZERO,op.evaluateBinary(8,8,ff.getBigInfinityEncoding(false),ff.getBigNaNEncoding(false)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 177,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1124,
        "startLineNumber" : 55,
        "startColumnNumber" : 1,
        "endLineNumber" : 79,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testEvaluateBinaryBigInteger(){\n  OpBehaviorFloatEqual op=new OpBehaviorFloatEqual();\n  FloatFormat ff=FloatFormatFactory.getFloatFormat(8);\n  BigFloat a=ff.getBigFloat(1.234d);\n  BigFloat b=ff.getBigFloat(-1.234d);\n  Assert.assertEquals(BigInteger.ONE,op.evaluateBinary(8,8,ff.getEncoding(a),ff.getEncoding(a)));\n  Assert.assertEquals(BigInteger.ONE,op.evaluateBinary(8,8,ff.getEncoding(b),ff.getEncoding(b)));\n  Assert.assertEquals(BigInteger.ZERO,op.evaluateBinary(8,8,ff.getEncoding(b),ff.getEncoding(a)));\n  Assert.assertEquals(BigInteger.ONE,op.evaluateBinary(8,8,ff.getBigInfinityEncoding(false),ff.getBigInfinityEncoding(false)));\n  Assert.assertEquals(BigInteger.ZERO,op.evaluateBinary(8,8,ff.getBigInfinityEncoding(false),ff.getBigInfinityEncoding(true)));\n  Assert.assertEquals(BigInteger.ONE,op.evaluateBinary(8,8,ff.getBigInfinityEncoding(true),ff.getBigInfinityEncoding(true)));\n  Assert.assertEquals(BigInteger.ZERO,op.evaluateBinary(8,8,ff.getBigInfinityEncoding(false),ff.getBigNaNEncoding(false)));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 183,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 69,
        "startColumnNumber" : 3,
        "endLineNumber" : 69,
        "endColumnNumber" : 64
      },
      "nodeContext" : "op.evaluateBinary(8,8,ff.getEncoding(b),ff.getEncoding(a))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "ghidra.pcode.floatformat.BigFloat"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 65,
    "startColumnNumber" : 42,
    "endLineNumber" : 65,
    "endColumnNumber" : 43
  }, {
    "charLength" : 1,
    "startLineNumber" : 65,
    "startColumnNumber" : 61,
    "endLineNumber" : 65,
    "endColumnNumber" : 62
  }, {
    "charLength" : 1,
    "startLineNumber" : 69,
    "startColumnNumber" : 61,
    "endLineNumber" : 69,
    "endColumnNumber" : 62
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  } ]
}