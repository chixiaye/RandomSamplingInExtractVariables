{
  "id" : 64,
  "expression" : "new byte[]{1,2,3}",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/test/java/com/google/devtools/build/android/r8/DexingKeyR8Test.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new byte[]{1,2,3}",
    "nodeType" : "ArrayCreation",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 42,
      "startColumnNumber" : 63,
      "endLineNumber" : 42,
      "endColumnNumber" : 83
    },
    "astNodeNumber" : 8,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 42,
        "startColumnNumber" : 15,
        "endLineNumber" : 42,
        "endColumnNumber" : 84
      },
      "nodeContext" : "DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3})",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 42,
        "endColumnNumber" : 85
      },
      "nodeContext" : "assertThat(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3}))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 172,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 43,
        "endColumnNumber" : 89
      },
      "nodeContext" : "assertThat(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3})).isEqualTo(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3}))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 34,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 173,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 43,
        "endColumnNumber" : 90
      },
      "nodeContext" : "assertThat(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3})).isEqualTo(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3}));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 35,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 629,
        "startLineNumber" : 40,
        "startColumnNumber" : 35,
        "endLineNumber" : 50,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  assertThat(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3})).isEqualTo(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3}));\n  assertThat(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3})).isNotEqualTo(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,3,3}));\n  assertThat(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3})).isNotEqualTo(DexingKeyR8.create(CompilationMode.DEBUG,21,new byte[]{1,2,3}));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 106,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 870,
        "startLineNumber" : 35,
        "startColumnNumber" : 2,
        "endLineNumber" : 50,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Makes sure that arrays are compared by content. Auto-value promises that but I want to be really sure as we'd never get any cache hits if arrays were compared by reference.\n */\n@Test public void testContentMatters(){\n  assertThat(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3})).isEqualTo(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3}));\n  assertThat(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3})).isNotEqualTo(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,3,3}));\n  assertThat(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3})).isNotEqualTo(DexingKeyR8.create(CompilationMode.DEBUG,21,new byte[]{1,2,3}));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 113,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 42,
        "endColumnNumber" : 85
      },
      "nodeContext" : "assertThat(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3}))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "byte[]"
  }, {
    "nodeContext" : "new byte[]{1,2,3}",
    "nodeType" : "ArrayCreation",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 43,
      "startColumnNumber" : 67,
      "endLineNumber" : 43,
      "endColumnNumber" : 87
    },
    "astNodeNumber" : 8,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 43,
        "startColumnNumber" : 19,
        "endLineNumber" : 43,
        "endColumnNumber" : 88
      },
      "nodeContext" : "DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3})",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 172,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 43,
        "endColumnNumber" : 89
      },
      "nodeContext" : "assertThat(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3})).isEqualTo(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3}))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 34,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 173,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 43,
        "endColumnNumber" : 90
      },
      "nodeContext" : "assertThat(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3})).isEqualTo(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3}));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 35,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 629,
        "startLineNumber" : 40,
        "startColumnNumber" : 35,
        "endLineNumber" : 50,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  assertThat(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3})).isEqualTo(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3}));\n  assertThat(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3})).isNotEqualTo(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,3,3}));\n  assertThat(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3})).isNotEqualTo(DexingKeyR8.create(CompilationMode.DEBUG,21,new byte[]{1,2,3}));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 106,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 870,
        "startLineNumber" : 35,
        "startColumnNumber" : 2,
        "endLineNumber" : 50,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Makes sure that arrays are compared by content. Auto-value promises that but I want to be really sure as we'd never get any cache hits if arrays were compared by reference.\n */\n@Test public void testContentMatters(){\n  assertThat(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3})).isEqualTo(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3}));\n  assertThat(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3})).isNotEqualTo(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,3,3}));\n  assertThat(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3})).isNotEqualTo(DexingKeyR8.create(CompilationMode.DEBUG,21,new byte[]{1,2,3}));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 113,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 43,
        "startColumnNumber" : 19,
        "endLineNumber" : 43,
        "endColumnNumber" : 88
      },
      "nodeContext" : "DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3})",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "byte[]"
  }, {
    "nodeContext" : "new byte[]{1,2,3}",
    "nodeType" : "ArrayCreation",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 45,
      "startColumnNumber" : 63,
      "endLineNumber" : 45,
      "endColumnNumber" : 83
    },
    "astNodeNumber" : 8,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 45,
        "startColumnNumber" : 15,
        "endLineNumber" : 45,
        "endColumnNumber" : 84
      },
      "nodeContext" : "DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3})",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 45,
        "endColumnNumber" : 85
      },
      "nodeContext" : "assertThat(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3}))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 175,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 46,
        "endColumnNumber" : 92
      },
      "nodeContext" : "assertThat(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3})).isNotEqualTo(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,3,3}))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 34,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 176,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 46,
        "endColumnNumber" : 93
      },
      "nodeContext" : "assertThat(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3})).isNotEqualTo(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,3,3}));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 35,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 629,
        "startLineNumber" : 40,
        "startColumnNumber" : 35,
        "endLineNumber" : 50,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  assertThat(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3})).isEqualTo(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3}));\n  assertThat(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3})).isNotEqualTo(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,3,3}));\n  assertThat(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3})).isNotEqualTo(DexingKeyR8.create(CompilationMode.DEBUG,21,new byte[]{1,2,3}));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 106,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 870,
        "startLineNumber" : 35,
        "startColumnNumber" : 2,
        "endLineNumber" : 50,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Makes sure that arrays are compared by content. Auto-value promises that but I want to be really sure as we'd never get any cache hits if arrays were compared by reference.\n */\n@Test public void testContentMatters(){\n  assertThat(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3})).isEqualTo(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3}));\n  assertThat(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3})).isNotEqualTo(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,3,3}));\n  assertThat(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3})).isNotEqualTo(DexingKeyR8.create(CompilationMode.DEBUG,21,new byte[]{1,2,3}));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 113,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 45,
        "endColumnNumber" : 85
      },
      "nodeContext" : "assertThat(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3}))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "byte[]"
  }, {
    "nodeContext" : "new byte[]{1,2,3}",
    "nodeType" : "ArrayCreation",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 48,
      "startColumnNumber" : 63,
      "endLineNumber" : 48,
      "endColumnNumber" : 83
    },
    "astNodeNumber" : 8,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 48,
        "startColumnNumber" : 15,
        "endLineNumber" : 48,
        "endColumnNumber" : 84
      },
      "nodeContext" : "DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3})",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 48,
        "startColumnNumber" : 4,
        "endLineNumber" : 48,
        "endColumnNumber" : 85
      },
      "nodeContext" : "assertThat(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3}))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 173,
        "startLineNumber" : 48,
        "startColumnNumber" : 4,
        "endLineNumber" : 49,
        "endColumnNumber" : 90
      },
      "nodeContext" : "assertThat(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3})).isNotEqualTo(DexingKeyR8.create(CompilationMode.DEBUG,21,new byte[]{1,2,3}))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 34,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 174,
        "startLineNumber" : 48,
        "startColumnNumber" : 4,
        "endLineNumber" : 49,
        "endColumnNumber" : 91
      },
      "nodeContext" : "assertThat(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3})).isNotEqualTo(DexingKeyR8.create(CompilationMode.DEBUG,21,new byte[]{1,2,3}));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 35,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 629,
        "startLineNumber" : 40,
        "startColumnNumber" : 35,
        "endLineNumber" : 50,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  assertThat(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3})).isEqualTo(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3}));\n  assertThat(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3})).isNotEqualTo(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,3,3}));\n  assertThat(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3})).isNotEqualTo(DexingKeyR8.create(CompilationMode.DEBUG,21,new byte[]{1,2,3}));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 106,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 870,
        "startLineNumber" : 35,
        "startColumnNumber" : 2,
        "endLineNumber" : 50,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Makes sure that arrays are compared by content. Auto-value promises that but I want to be really sure as we'd never get any cache hits if arrays were compared by reference.\n */\n@Test public void testContentMatters(){\n  assertThat(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3})).isEqualTo(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3}));\n  assertThat(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3})).isNotEqualTo(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,3,3}));\n  assertThat(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3})).isNotEqualTo(DexingKeyR8.create(CompilationMode.DEBUG,21,new byte[]{1,2,3}));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 113,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 48,
        "startColumnNumber" : 4,
        "endLineNumber" : 48,
        "endColumnNumber" : 85
      },
      "nodeContext" : "assertThat(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3}))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "byte[]"
  }, {
    "nodeContext" : "new byte[]{1,2,3}",
    "nodeType" : "ArrayCreation",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 49,
      "startColumnNumber" : 68,
      "endLineNumber" : 49,
      "endColumnNumber" : 88
    },
    "astNodeNumber" : 8,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 49,
        "startColumnNumber" : 22,
        "endLineNumber" : 49,
        "endColumnNumber" : 89
      },
      "nodeContext" : "DexingKeyR8.create(CompilationMode.DEBUG,21,new byte[]{1,2,3})",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 173,
        "startLineNumber" : 48,
        "startColumnNumber" : 4,
        "endLineNumber" : 49,
        "endColumnNumber" : 90
      },
      "nodeContext" : "assertThat(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3})).isNotEqualTo(DexingKeyR8.create(CompilationMode.DEBUG,21,new byte[]{1,2,3}))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 34,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 174,
        "startLineNumber" : 48,
        "startColumnNumber" : 4,
        "endLineNumber" : 49,
        "endColumnNumber" : 91
      },
      "nodeContext" : "assertThat(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3})).isNotEqualTo(DexingKeyR8.create(CompilationMode.DEBUG,21,new byte[]{1,2,3}));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 35,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 629,
        "startLineNumber" : 40,
        "startColumnNumber" : 35,
        "endLineNumber" : 50,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  assertThat(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3})).isEqualTo(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3}));\n  assertThat(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3})).isNotEqualTo(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,3,3}));\n  assertThat(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3})).isNotEqualTo(DexingKeyR8.create(CompilationMode.DEBUG,21,new byte[]{1,2,3}));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 106,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 870,
        "startLineNumber" : 35,
        "startColumnNumber" : 2,
        "endLineNumber" : 50,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Makes sure that arrays are compared by content. Auto-value promises that but I want to be really sure as we'd never get any cache hits if arrays were compared by reference.\n */\n@Test public void testContentMatters(){\n  assertThat(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3})).isEqualTo(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3}));\n  assertThat(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3})).isNotEqualTo(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,3,3}));\n  assertThat(DexingKeyR8.create(CompilationMode.RELEASE,21,new byte[]{1,2,3})).isNotEqualTo(DexingKeyR8.create(CompilationMode.DEBUG,21,new byte[]{1,2,3}));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 113,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 49,
        "startColumnNumber" : 22,
        "endLineNumber" : 49,
        "endColumnNumber" : 89
      },
      "nodeContext" : "DexingKeyR8.create(CompilationMode.DEBUG,21,new byte[]{1,2,3})",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "byte[]"
  } ],
  "positionList" : [ {
    "charLength" : 20,
    "startLineNumber" : 42,
    "startColumnNumber" : 63,
    "endLineNumber" : 42,
    "endColumnNumber" : 83
  }, {
    "charLength" : 20,
    "startLineNumber" : 43,
    "startColumnNumber" : 67,
    "endLineNumber" : 43,
    "endColumnNumber" : 87
  }, {
    "charLength" : 20,
    "startLineNumber" : 45,
    "startColumnNumber" : 63,
    "endLineNumber" : 45,
    "endColumnNumber" : 83
  }, {
    "charLength" : 20,
    "startLineNumber" : 48,
    "startColumnNumber" : 63,
    "endLineNumber" : 48,
    "endColumnNumber" : 83
  }, {
    "charLength" : 20,
    "startLineNumber" : 49,
    "startColumnNumber" : 68,
    "endLineNumber" : 49,
    "endColumnNumber" : 88
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 1
  } ]
}