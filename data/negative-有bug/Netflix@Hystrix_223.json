{
  "id" : 223,
  "expression" : "HystrixRequestLog",
  "projectName" : "Netflix@Hystrix",
  "commitID" : "45d7875c3e51f6d6152b667db31e4fe435711917",
  "filePath" : "/hystrix-core/src/test/java/com/netflix/hystrix/HystrixCommandTimeoutConcurrencyTesting.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "HystrixRequestLog",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 54,
      "startColumnNumber" : 50,
      "endLineNumber" : 54,
      "endColumnNumber" : 67
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 54,
        "startColumnNumber" : 50,
        "endLineNumber" : 54,
        "endColumnNumber" : 87
      },
      "nodeContext" : "HystrixRequestLog.getCurrentRequest()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 54,
        "startColumnNumber" : 50,
        "endLineNumber" : 54,
        "endColumnNumber" : 112
      },
      "nodeContext" : "HystrixRequestLog.getCurrentRequest().getAllExecutedCommands()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 644,
        "startLineNumber" : 54,
        "startColumnNumber" : 16,
        "endLineNumber" : 63,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (HystrixInvokableInfo<?> hi : HystrixRequestLog.getCurrentRequest().getAllExecutedCommands()) {\n  if (!hi.isResponseTimedOut()) {\n    System.err.println(\"Timeout not found in executed command\");\n    throw new RuntimeException(\"Timeout not found in executed command\");\n  }\n  if (hi.isResponseTimedOut() && hi.getExecutionEvents().size() == 1) {\n    System.err.println(\"Missing fallback status!\");\n    throw new RuntimeException(\"Missing fallback status on timeout.\");\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 56,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1343,
        "startLineNumber" : 37,
        "startColumnNumber" : 16,
        "endLineNumber" : 65,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  context=HystrixRequestContext.initializeContext();\n  for (int j=0; j < NUM_CONCURRENT_COMMANDS; j++) {\n    observables.add(new TestCommand().observe());\n  }\n  Observable<String> overall=Observable.merge(observables);\n  List<String> results=overall.toList().toBlocking().first();\n  for (  String s : results) {\n    if (s == null) {\n      System.err.println(\"Received NULL!\");\n      throw new RuntimeException(\"Received NULL\");\n    }\n  }\n  for (  HystrixInvokableInfo<?> hi : HystrixRequestLog.getCurrentRequest().getAllExecutedCommands()) {\n    if (!hi.isResponseTimedOut()) {\n      System.err.println(\"Timeout not found in executed command\");\n      throw new RuntimeException(\"Timeout not found in executed command\");\n    }\n    if (hi.isResponseTimedOut() && hi.getExecutionEvents().size() == 1) {\n      System.err.println(\"Missing fallback status!\");\n      throw new RuntimeException(\"Missing fallback status on timeout.\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 135,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1757,
        "startLineNumber" : 37,
        "startColumnNumber" : 12,
        "endLineNumber" : 74,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  context=HystrixRequestContext.initializeContext();\n  for (int j=0; j < NUM_CONCURRENT_COMMANDS; j++) {\n    observables.add(new TestCommand().observe());\n  }\n  Observable<String> overall=Observable.merge(observables);\n  List<String> results=overall.toList().toBlocking().first();\n  for (  String s : results) {\n    if (s == null) {\n      System.err.println(\"Received NULL!\");\n      throw new RuntimeException(\"Received NULL\");\n    }\n  }\n  for (  HystrixInvokableInfo<?> hi : HystrixRequestLog.getCurrentRequest().getAllExecutedCommands()) {\n    if (!hi.isResponseTimedOut()) {\n      System.err.println(\"Timeout not found in executed command\");\n      throw new RuntimeException(\"Timeout not found in executed command\");\n    }\n    if (hi.isResponseTimedOut() && hi.getExecutionEvents().size() == 1) {\n      System.err.println(\"Missing fallback status!\");\n      throw new RuntimeException(\"Missing fallback status on timeout.\");\n    }\n  }\n}\n catch (Exception e) {\n  System.err.println(\"Error: \" + e.getMessage());\n  e.printStackTrace();\n  throw new RuntimeException(e);\n}\n finally {\n  System.out.println(HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());\n  if (context != null) {\n    context.shutdown();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 183,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2071,
        "startLineNumber" : 33,
        "startColumnNumber" : 45,
        "endLineNumber" : 79,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  List<Observable<String>> observables=new ArrayList<Observable<String>>();\n  HystrixRequestContext context=null;\n  try {\n    context=HystrixRequestContext.initializeContext();\n    for (int j=0; j < NUM_CONCURRENT_COMMANDS; j++) {\n      observables.add(new TestCommand().observe());\n    }\n    Observable<String> overall=Observable.merge(observables);\n    List<String> results=overall.toList().toBlocking().first();\n    for (    String s : results) {\n      if (s == null) {\n        System.err.println(\"Received NULL!\");\n        throw new RuntimeException(\"Received NULL\");\n      }\n    }\n    for (    HystrixInvokableInfo<?> hi : HystrixRequestLog.getCurrentRequest().getAllExecutedCommands()) {\n      if (!hi.isResponseTimedOut()) {\n        System.err.println(\"Timeout not found in executed command\");\n        throw new RuntimeException(\"Timeout not found in executed command\");\n      }\n      if (hi.isResponseTimedOut() && hi.getExecutionEvents().size() == 1) {\n        System.err.println(\"Missing fallback status!\");\n        throw new RuntimeException(\"Missing fallback status on timeout.\");\n      }\n    }\n  }\n catch (  Exception e) {\n    System.err.println(\"Error: \" + e.getMessage());\n    e.printStackTrace();\n    throw new RuntimeException(e);\n  }\n finally {\n    System.out.println(HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());\n    if (context != null) {\n      context.shutdown();\n    }\n  }\n  System.out.println(\"*************** TRIAL \" + i + \" ******************\");\n  System.out.println();\n  Thread.sleep(50);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 231,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2108,
        "startLineNumber" : 33,
        "startColumnNumber" : 8,
        "endLineNumber" : 79,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < NUM_TRIALS; i++) {\n  List<Observable<String>> observables=new ArrayList<Observable<String>>();\n  HystrixRequestContext context=null;\n  try {\n    context=HystrixRequestContext.initializeContext();\n    for (int j=0; j < NUM_CONCURRENT_COMMANDS; j++) {\n      observables.add(new TestCommand().observe());\n    }\n    Observable<String> overall=Observable.merge(observables);\n    List<String> results=overall.toList().toBlocking().first();\n    for (    String s : results) {\n      if (s == null) {\n        System.err.println(\"Received NULL!\");\n        throw new RuntimeException(\"Received NULL\");\n      }\n    }\n    for (    HystrixInvokableInfo<?> hi : HystrixRequestLog.getCurrentRequest().getAllExecutedCommands()) {\n      if (!hi.isResponseTimedOut()) {\n        System.err.println(\"Timeout not found in executed command\");\n        throw new RuntimeException(\"Timeout not found in executed command\");\n      }\n      if (hi.isResponseTimedOut() && hi.getExecutionEvents().size() == 1) {\n        System.err.println(\"Missing fallback status!\");\n        throw new RuntimeException(\"Missing fallback status on timeout.\");\n      }\n    }\n  }\n catch (  Exception e) {\n    System.err.println(\"Error: \" + e.getMessage());\n    e.printStackTrace();\n    throw new RuntimeException(e);\n  }\n finally {\n    System.out.println(HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());\n    if (context != null) {\n      context.shutdown();\n    }\n  }\n  System.out.println(\"*************** TRIAL \" + i + \" ******************\");\n  System.out.println();\n  Thread.sleep(50);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 242,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2186,
        "startLineNumber" : 30,
        "startColumnNumber" : 62,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int NUM_TRIALS=10;\n  for (int i=0; i < NUM_TRIALS; i++) {\n    List<Observable<String>> observables=new ArrayList<Observable<String>>();\n    HystrixRequestContext context=null;\n    try {\n      context=HystrixRequestContext.initializeContext();\n      for (int j=0; j < NUM_CONCURRENT_COMMANDS; j++) {\n        observables.add(new TestCommand().observe());\n      }\n      Observable<String> overall=Observable.merge(observables);\n      List<String> results=overall.toList().toBlocking().first();\n      for (      String s : results) {\n        if (s == null) {\n          System.err.println(\"Received NULL!\");\n          throw new RuntimeException(\"Received NULL\");\n        }\n      }\n      for (      HystrixInvokableInfo<?> hi : HystrixRequestLog.getCurrentRequest().getAllExecutedCommands()) {\n        if (!hi.isResponseTimedOut()) {\n          System.err.println(\"Timeout not found in executed command\");\n          throw new RuntimeException(\"Timeout not found in executed command\");\n        }\n        if (hi.isResponseTimedOut() && hi.getExecutionEvents().size() == 1) {\n          System.err.println(\"Missing fallback status!\");\n          throw new RuntimeException(\"Missing fallback status on timeout.\");\n        }\n      }\n    }\n catch (    Exception e) {\n      System.err.println(\"Error: \" + e.getMessage());\n      e.printStackTrace();\n      throw new RuntimeException(e);\n    }\n finally {\n      System.out.println(HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());\n      if (context != null) {\n        context.shutdown();\n      }\n    }\n    System.out.println(\"*************** TRIAL \" + i + \" ******************\");\n    System.out.println();\n    Thread.sleep(50);\n  }\n  Hystrix.reset();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 253,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2254,
        "startLineNumber" : 29,
        "startColumnNumber" : 4,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testTimeoutRace() throws InterruptedException {\n  final int NUM_TRIALS=10;\n  for (int i=0; i < NUM_TRIALS; i++) {\n    List<Observable<String>> observables=new ArrayList<Observable<String>>();\n    HystrixRequestContext context=null;\n    try {\n      context=HystrixRequestContext.initializeContext();\n      for (int j=0; j < NUM_CONCURRENT_COMMANDS; j++) {\n        observables.add(new TestCommand().observe());\n      }\n      Observable<String> overall=Observable.merge(observables);\n      List<String> results=overall.toList().toBlocking().first();\n      for (      String s : results) {\n        if (s == null) {\n          System.err.println(\"Received NULL!\");\n          throw new RuntimeException(\"Received NULL\");\n        }\n      }\n      for (      HystrixInvokableInfo<?> hi : HystrixRequestLog.getCurrentRequest().getAllExecutedCommands()) {\n        if (!hi.isResponseTimedOut()) {\n          System.err.println(\"Timeout not found in executed command\");\n          throw new RuntimeException(\"Timeout not found in executed command\");\n        }\n        if (hi.isResponseTimedOut() && hi.getExecutionEvents().size() == 1) {\n          System.err.println(\"Missing fallback status!\");\n          throw new RuntimeException(\"Missing fallback status on timeout.\");\n        }\n      }\n    }\n catch (    Exception e) {\n      System.err.println(\"Error: \" + e.getMessage());\n      e.printStackTrace();\n      throw new RuntimeException(e);\n    }\n finally {\n      System.out.println(HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());\n      if (context != null) {\n        context.shutdown();\n      }\n    }\n    System.out.println(\"*************** TRIAL \" + i + \" ******************\");\n    System.out.println();\n    Thread.sleep(50);\n  }\n  Hystrix.reset();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 261,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 54,
        "startColumnNumber" : 50,
        "endLineNumber" : 54,
        "endColumnNumber" : 112
      },
      "nodeContext" : "HystrixRequestLog.getCurrentRequest().getAllExecutedCommands()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.netflix.hystrix.HystrixRequestLog"
  }, {
    "nodeContext" : "HystrixRequestLog",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 70,
      "startColumnNumber" : 35,
      "endLineNumber" : 70,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 70,
        "startColumnNumber" : 35,
        "endLineNumber" : 70,
        "endColumnNumber" : 72
      },
      "nodeContext" : "HystrixRequestLog.getCurrentRequest()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 70,
        "startColumnNumber" : 35,
        "endLineNumber" : 70,
        "endColumnNumber" : 102
      },
      "nodeContext" : "HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 70,
        "startColumnNumber" : 16,
        "endLineNumber" : 70,
        "endColumnNumber" : 103
      },
      "nodeContext" : "System.out.println(HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 70,
        "startColumnNumber" : 16,
        "endLineNumber" : 70,
        "endColumnNumber" : 104
      },
      "nodeContext" : "System.out.println(HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,finally]",
      "nodePosition" : {
        "charLength" : 217,
        "startLineNumber" : 69,
        "startColumnNumber" : 22,
        "endLineNumber" : 74,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  System.out.println(HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());\n  if (context != null) {\n    context.shutdown();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1757,
        "startLineNumber" : 37,
        "startColumnNumber" : 12,
        "endLineNumber" : 74,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  context=HystrixRequestContext.initializeContext();\n  for (int j=0; j < NUM_CONCURRENT_COMMANDS; j++) {\n    observables.add(new TestCommand().observe());\n  }\n  Observable<String> overall=Observable.merge(observables);\n  List<String> results=overall.toList().toBlocking().first();\n  for (  String s : results) {\n    if (s == null) {\n      System.err.println(\"Received NULL!\");\n      throw new RuntimeException(\"Received NULL\");\n    }\n  }\n  for (  HystrixInvokableInfo<?> hi : HystrixRequestLog.getCurrentRequest().getAllExecutedCommands()) {\n    if (!hi.isResponseTimedOut()) {\n      System.err.println(\"Timeout not found in executed command\");\n      throw new RuntimeException(\"Timeout not found in executed command\");\n    }\n    if (hi.isResponseTimedOut() && hi.getExecutionEvents().size() == 1) {\n      System.err.println(\"Missing fallback status!\");\n      throw new RuntimeException(\"Missing fallback status on timeout.\");\n    }\n  }\n}\n catch (Exception e) {\n  System.err.println(\"Error: \" + e.getMessage());\n  e.printStackTrace();\n  throw new RuntimeException(e);\n}\n finally {\n  System.out.println(HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());\n  if (context != null) {\n    context.shutdown();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 183,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2071,
        "startLineNumber" : 33,
        "startColumnNumber" : 45,
        "endLineNumber" : 79,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  List<Observable<String>> observables=new ArrayList<Observable<String>>();\n  HystrixRequestContext context=null;\n  try {\n    context=HystrixRequestContext.initializeContext();\n    for (int j=0; j < NUM_CONCURRENT_COMMANDS; j++) {\n      observables.add(new TestCommand().observe());\n    }\n    Observable<String> overall=Observable.merge(observables);\n    List<String> results=overall.toList().toBlocking().first();\n    for (    String s : results) {\n      if (s == null) {\n        System.err.println(\"Received NULL!\");\n        throw new RuntimeException(\"Received NULL\");\n      }\n    }\n    for (    HystrixInvokableInfo<?> hi : HystrixRequestLog.getCurrentRequest().getAllExecutedCommands()) {\n      if (!hi.isResponseTimedOut()) {\n        System.err.println(\"Timeout not found in executed command\");\n        throw new RuntimeException(\"Timeout not found in executed command\");\n      }\n      if (hi.isResponseTimedOut() && hi.getExecutionEvents().size() == 1) {\n        System.err.println(\"Missing fallback status!\");\n        throw new RuntimeException(\"Missing fallback status on timeout.\");\n      }\n    }\n  }\n catch (  Exception e) {\n    System.err.println(\"Error: \" + e.getMessage());\n    e.printStackTrace();\n    throw new RuntimeException(e);\n  }\n finally {\n    System.out.println(HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());\n    if (context != null) {\n      context.shutdown();\n    }\n  }\n  System.out.println(\"*************** TRIAL \" + i + \" ******************\");\n  System.out.println();\n  Thread.sleep(50);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 231,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2108,
        "startLineNumber" : 33,
        "startColumnNumber" : 8,
        "endLineNumber" : 79,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < NUM_TRIALS; i++) {\n  List<Observable<String>> observables=new ArrayList<Observable<String>>();\n  HystrixRequestContext context=null;\n  try {\n    context=HystrixRequestContext.initializeContext();\n    for (int j=0; j < NUM_CONCURRENT_COMMANDS; j++) {\n      observables.add(new TestCommand().observe());\n    }\n    Observable<String> overall=Observable.merge(observables);\n    List<String> results=overall.toList().toBlocking().first();\n    for (    String s : results) {\n      if (s == null) {\n        System.err.println(\"Received NULL!\");\n        throw new RuntimeException(\"Received NULL\");\n      }\n    }\n    for (    HystrixInvokableInfo<?> hi : HystrixRequestLog.getCurrentRequest().getAllExecutedCommands()) {\n      if (!hi.isResponseTimedOut()) {\n        System.err.println(\"Timeout not found in executed command\");\n        throw new RuntimeException(\"Timeout not found in executed command\");\n      }\n      if (hi.isResponseTimedOut() && hi.getExecutionEvents().size() == 1) {\n        System.err.println(\"Missing fallback status!\");\n        throw new RuntimeException(\"Missing fallback status on timeout.\");\n      }\n    }\n  }\n catch (  Exception e) {\n    System.err.println(\"Error: \" + e.getMessage());\n    e.printStackTrace();\n    throw new RuntimeException(e);\n  }\n finally {\n    System.out.println(HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());\n    if (context != null) {\n      context.shutdown();\n    }\n  }\n  System.out.println(\"*************** TRIAL \" + i + \" ******************\");\n  System.out.println();\n  Thread.sleep(50);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 242,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2186,
        "startLineNumber" : 30,
        "startColumnNumber" : 62,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int NUM_TRIALS=10;\n  for (int i=0; i < NUM_TRIALS; i++) {\n    List<Observable<String>> observables=new ArrayList<Observable<String>>();\n    HystrixRequestContext context=null;\n    try {\n      context=HystrixRequestContext.initializeContext();\n      for (int j=0; j < NUM_CONCURRENT_COMMANDS; j++) {\n        observables.add(new TestCommand().observe());\n      }\n      Observable<String> overall=Observable.merge(observables);\n      List<String> results=overall.toList().toBlocking().first();\n      for (      String s : results) {\n        if (s == null) {\n          System.err.println(\"Received NULL!\");\n          throw new RuntimeException(\"Received NULL\");\n        }\n      }\n      for (      HystrixInvokableInfo<?> hi : HystrixRequestLog.getCurrentRequest().getAllExecutedCommands()) {\n        if (!hi.isResponseTimedOut()) {\n          System.err.println(\"Timeout not found in executed command\");\n          throw new RuntimeException(\"Timeout not found in executed command\");\n        }\n        if (hi.isResponseTimedOut() && hi.getExecutionEvents().size() == 1) {\n          System.err.println(\"Missing fallback status!\");\n          throw new RuntimeException(\"Missing fallback status on timeout.\");\n        }\n      }\n    }\n catch (    Exception e) {\n      System.err.println(\"Error: \" + e.getMessage());\n      e.printStackTrace();\n      throw new RuntimeException(e);\n    }\n finally {\n      System.out.println(HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());\n      if (context != null) {\n        context.shutdown();\n      }\n    }\n    System.out.println(\"*************** TRIAL \" + i + \" ******************\");\n    System.out.println();\n    Thread.sleep(50);\n  }\n  Hystrix.reset();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 253,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2254,
        "startLineNumber" : 29,
        "startColumnNumber" : 4,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testTimeoutRace() throws InterruptedException {\n  final int NUM_TRIALS=10;\n  for (int i=0; i < NUM_TRIALS; i++) {\n    List<Observable<String>> observables=new ArrayList<Observable<String>>();\n    HystrixRequestContext context=null;\n    try {\n      context=HystrixRequestContext.initializeContext();\n      for (int j=0; j < NUM_CONCURRENT_COMMANDS; j++) {\n        observables.add(new TestCommand().observe());\n      }\n      Observable<String> overall=Observable.merge(observables);\n      List<String> results=overall.toList().toBlocking().first();\n      for (      String s : results) {\n        if (s == null) {\n          System.err.println(\"Received NULL!\");\n          throw new RuntimeException(\"Received NULL\");\n        }\n      }\n      for (      HystrixInvokableInfo<?> hi : HystrixRequestLog.getCurrentRequest().getAllExecutedCommands()) {\n        if (!hi.isResponseTimedOut()) {\n          System.err.println(\"Timeout not found in executed command\");\n          throw new RuntimeException(\"Timeout not found in executed command\");\n        }\n        if (hi.isResponseTimedOut() && hi.getExecutionEvents().size() == 1) {\n          System.err.println(\"Missing fallback status!\");\n          throw new RuntimeException(\"Missing fallback status on timeout.\");\n        }\n      }\n    }\n catch (    Exception e) {\n      System.err.println(\"Error: \" + e.getMessage());\n      e.printStackTrace();\n      throw new RuntimeException(e);\n    }\n finally {\n      System.out.println(HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());\n      if (context != null) {\n        context.shutdown();\n      }\n    }\n    System.out.println(\"*************** TRIAL \" + i + \" ******************\");\n    System.out.println();\n    Thread.sleep(50);\n  }\n  Hystrix.reset();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 261,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 70,
        "startColumnNumber" : 16,
        "endLineNumber" : 70,
        "endColumnNumber" : 104
      },
      "nodeContext" : "System.out.println(HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.netflix.hystrix.HystrixRequestLog"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 54,
    "startColumnNumber" : 50,
    "endLineNumber" : 54,
    "endColumnNumber" : 67
  }, {
    "charLength" : 17,
    "startLineNumber" : 70,
    "startColumnNumber" : 35,
    "endLineNumber" : 70,
    "endColumnNumber" : 52
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  } ]
}