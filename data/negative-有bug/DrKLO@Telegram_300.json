{
  "id" : 300,
  "expression" : "ecBlocks.getECCodewordsPerBlock() + numDataCodewords",
  "projectName" : "DrKLO@Telegram",
  "commitID" : "11fbfb1329df700b203e1852a71c4c11b5ab12f4",
  "filePath" : "/TMessagesProj/src/main/java/com/google/zxing/qrcode/decoder/DataBlock.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ecBlocks.getECCodewordsPerBlock() + numDataCodewords",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 52,
      "startLineNumber" : 72,
      "startColumnNumber" : 32,
      "endLineNumber" : 72,
      "endColumnNumber" : 84
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 72,
        "startColumnNumber" : 12,
        "endLineNumber" : 72,
        "endColumnNumber" : 84
      },
      "nodeContext" : "numBlockCodewords=ecBlocks.getECCodewordsPerBlock() + numDataCodewords",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 72,
        "startColumnNumber" : 8,
        "endLineNumber" : 72,
        "endColumnNumber" : 85
      },
      "nodeContext" : "int numBlockCodewords=ecBlocks.getECCodewordsPerBlock() + numDataCodewords;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 252,
        "startLineNumber" : 70,
        "startColumnNumber" : 51,
        "endLineNumber" : 74,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  int numDataCodewords=ecBlock.getDataCodewords();\n  int numBlockCodewords=ecBlocks.getECCodewordsPerBlock() + numDataCodewords;\n  result[numResultBlocks++]=new DataBlock(numDataCodewords,new byte[numBlockCodewords]);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 32,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 297,
        "startLineNumber" : 70,
        "startColumnNumber" : 6,
        "endLineNumber" : 74,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < ecBlock.getCount(); i++) {\n  int numDataCodewords=ecBlock.getDataCodewords();\n  int numBlockCodewords=ecBlocks.getECCodewordsPerBlock() + numDataCodewords;\n  result[numResultBlocks++]=new DataBlock(numDataCodewords,new byte[numBlockCodewords]);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 45,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 311,
        "startLineNumber" : 69,
        "startColumnNumber" : 45,
        "endLineNumber" : 75,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  for (int i=0; i < ecBlock.getCount(); i++) {\n    int numDataCodewords=ecBlock.getDataCodewords();\n    int numBlockCodewords=ecBlocks.getECCodewordsPerBlock() + numDataCodewords;\n    result[numResultBlocks++]=new DataBlock(numDataCodewords,new byte[numBlockCodewords]);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 46,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 352,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 75,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Version.ECB ecBlock : ecBlockArray) {\n  for (int i=0; i < ecBlock.getCount(); i++) {\n    int numDataCodewords=ecBlock.getDataCodewords();\n    int numBlockCodewords=ecBlocks.getECCodewordsPerBlock() + numDataCodewords;\n    result[numResultBlocks++]=new DataBlock(numDataCodewords,new byte[numBlockCodewords]);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 54,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2602,
        "startLineNumber" : 49,
        "startColumnNumber" : 65,
        "endLineNumber" : 112,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (rawCodewords.length != version.getTotalCodewords()) {\n    throw new IllegalArgumentException();\n  }\n  Version.ECBlocks ecBlocks=version.getECBlocksForLevel(ecLevel);\n  int totalBlocks=0;\n  Version.ECB[] ecBlockArray=ecBlocks.getECBlocks();\n  for (  Version.ECB ecBlock : ecBlockArray) {\n    totalBlocks+=ecBlock.getCount();\n  }\n  DataBlock[] result=new DataBlock[totalBlocks];\n  int numResultBlocks=0;\n  for (  Version.ECB ecBlock : ecBlockArray) {\n    for (int i=0; i < ecBlock.getCount(); i++) {\n      int numDataCodewords=ecBlock.getDataCodewords();\n      int numBlockCodewords=ecBlocks.getECCodewordsPerBlock() + numDataCodewords;\n      result[numResultBlocks++]=new DataBlock(numDataCodewords,new byte[numBlockCodewords]);\n    }\n  }\n  int shorterBlocksTotalCodewords=result[0].codewords.length;\n  int longerBlocksStartAt=result.length - 1;\n  while (longerBlocksStartAt >= 0) {\n    int numCodewords=result[longerBlocksStartAt].codewords.length;\n    if (numCodewords == shorterBlocksTotalCodewords) {\n      break;\n    }\n    longerBlocksStartAt--;\n  }\n  longerBlocksStartAt++;\n  int shorterBlocksNumDataCodewords=shorterBlocksTotalCodewords - ecBlocks.getECCodewordsPerBlock();\n  int rawCodewordsOffset=0;\n  for (int i=0; i < shorterBlocksNumDataCodewords; i++) {\n    for (int j=0; j < numResultBlocks; j++) {\n      result[j].codewords[i]=rawCodewords[rawCodewordsOffset++];\n    }\n  }\n  for (int j=longerBlocksStartAt; j < numResultBlocks; j++) {\n    result[j].codewords[shorterBlocksNumDataCodewords]=rawCodewords[rawCodewordsOffset++];\n  }\n  int max=result[0].codewords.length;\n  for (int i=shorterBlocksNumDataCodewords; i < max; i++) {\n    for (int j=0; j < numResultBlocks; j++) {\n      int iOffset=j < longerBlocksStartAt ? i : i + 1;\n      result[j].codewords[iOffset]=rawCodewords[rawCodewordsOffset++];\n    }\n  }\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 315,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3313,
        "startLineNumber" : 36,
        "startColumnNumber" : 2,
        "endLineNumber" : 112,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * <p>When QR Codes use multiple data blocks, they are actually interleaved. That is, the first byte of data block 1 to n is written, then the second bytes, and so on. This method will separate the data into original blocks.</p>\n * @param rawCodewords bytes as read directly from the QR Code\n * @param version version of the QR Code\n * @param ecLevel error-correction level of the QR Code\n * @return DataBlocks containing original bytes, \"de-interleaved\" from representation in theQR Code\n */\nstatic DataBlock[] getDataBlocks(byte[] rawCodewords,Version version,ErrorCorrectionLevel ecLevel){\n  if (rawCodewords.length != version.getTotalCodewords()) {\n    throw new IllegalArgumentException();\n  }\n  Version.ECBlocks ecBlocks=version.getECBlocksForLevel(ecLevel);\n  int totalBlocks=0;\n  Version.ECB[] ecBlockArray=ecBlocks.getECBlocks();\n  for (  Version.ECB ecBlock : ecBlockArray) {\n    totalBlocks+=ecBlock.getCount();\n  }\n  DataBlock[] result=new DataBlock[totalBlocks];\n  int numResultBlocks=0;\n  for (  Version.ECB ecBlock : ecBlockArray) {\n    for (int i=0; i < ecBlock.getCount(); i++) {\n      int numDataCodewords=ecBlock.getDataCodewords();\n      int numBlockCodewords=ecBlocks.getECCodewordsPerBlock() + numDataCodewords;\n      result[numResultBlocks++]=new DataBlock(numDataCodewords,new byte[numBlockCodewords]);\n    }\n  }\n  int shorterBlocksTotalCodewords=result[0].codewords.length;\n  int longerBlocksStartAt=result.length - 1;\n  while (longerBlocksStartAt >= 0) {\n    int numCodewords=result[longerBlocksStartAt].codewords.length;\n    if (numCodewords == shorterBlocksTotalCodewords) {\n      break;\n    }\n    longerBlocksStartAt--;\n  }\n  longerBlocksStartAt++;\n  int shorterBlocksNumDataCodewords=shorterBlocksTotalCodewords - ecBlocks.getECCodewordsPerBlock();\n  int rawCodewordsOffset=0;\n  for (int i=0; i < shorterBlocksNumDataCodewords; i++) {\n    for (int j=0; j < numResultBlocks; j++) {\n      result[j].codewords[i]=rawCodewords[rawCodewordsOffset++];\n    }\n  }\n  for (int j=longerBlocksStartAt; j < numResultBlocks; j++) {\n    result[j].codewords[shorterBlocksNumDataCodewords]=rawCodewords[rawCodewordsOffset++];\n  }\n  int max=result[0].codewords.length;\n  for (int i=shorterBlocksNumDataCodewords; i < max; i++) {\n    for (int j=0; j < numResultBlocks; j++) {\n      int iOffset=j < longerBlocksStartAt ? i : i + 1;\n      result[j].codewords[iOffset]=rawCodewords[rawCodewordsOffset++];\n    }\n  }\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 336,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 72,
        "startColumnNumber" : 8,
        "endLineNumber" : 72,
        "endColumnNumber" : 85
      },
      "nodeContext" : "int numBlockCodewords=ecBlocks.getECCodewordsPerBlock() + numDataCodewords;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 52,
    "startLineNumber" : 72,
    "startColumnNumber" : 32,
    "endLineNumber" : 72,
    "endColumnNumber" : 84
  } ],
  "layoutRelationDataList" : [ ]
}