{
  "id" : 144,
  "expression" : "this.oldDex.getTableOfContents().fieldIds.isElementFourByteAligned",
  "projectName" : "Tencent@tinker",
  "commitID" : "df9e1d29420d53a650ab73569d828a22e3cfe728",
  "filePath" : "/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/dexpatcher/DexPatchGenerator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "this.oldDex.getTableOfContents().fieldIds.isElementFourByteAligned",
    "nodeType" : "FieldAccess",
    "nodePosition" : {
      "charLength" : 66,
      "startLineNumber" : 394,
      "startColumnNumber" : 12,
      "endLineNumber" : 394,
      "endColumnNumber" : 78
    },
    "astNodeNumber" : 9,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 179,
        "startLineNumber" : 394,
        "startColumnNumber" : 8,
        "endLineNumber" : 396,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (this.oldDex.getTableOfContents().fieldIds.isElementFourByteAligned) {\n  this.patchedFieldIdsOffset=SizeOf.roundToTimesOfFour(this.patchedFieldIdsOffset);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 12146,
        "startLineNumber" : 286,
        "startColumnNumber" : 70,
        "endLineNumber" : 512,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Pattern[] classNamePatterns=new Pattern[this.additionalRemovingClassPatternSet.size()];\n  int classNamePatternCount=0;\n  for (  String regExStr : this.additionalRemovingClassPatternSet) {\n    classNamePatterns[classNamePatternCount++]=Pattern.compile(regExStr);\n  }\n  List<Integer> typeIdOfClassDefsToRemove=new ArrayList<>(classNamePatternCount);\n  List<Integer> offsetOfClassDatasToRemove=new ArrayList<>(classNamePatternCount);\n  for (  ClassDef classDef : this.newDex.classDefs()) {\n    String typeName=this.newDex.typeNames().get(classDef.typeIndex);\n    for (    Pattern pattern : classNamePatterns) {\n      if (pattern.matcher(typeName).matches()) {\n        typeIdOfClassDefsToRemove.add(classDef.typeIndex);\n        offsetOfClassDatasToRemove.add(classDef.classDataOffset);\n        break;\n      }\n    }\n  }\n  ((ClassDefSectionDiffAlgorithm)this.classDefSectionDiffAlg).setTypeIdOfClassDefsToRemove(typeIdOfClassDefsToRemove);\n  ((ClassDataSectionDiffAlgorithm)this.classDataSectionDiffAlg).setOffsetOfClassDatasToRemove(offsetOfClassDatasToRemove);\n  int patchedheaderSize=SizeOf.HEADER_ITEM;\n  int patchedStringIdsSize=newDex.getTableOfContents().stringIds.size * SizeOf.STRING_ID_ITEM;\n  int patchedTypeIdsSize=newDex.getTableOfContents().typeIds.size * SizeOf.TYPE_ID_ITEM;\n  int patchedProtoIdsSize=newDex.getTableOfContents().protoIds.size * SizeOf.PROTO_ID_ITEM;\n  int patchedFieldIdsSize=newDex.getTableOfContents().fieldIds.size * SizeOf.MEMBER_ID_ITEM;\n  int patchedMethodIdsSize=newDex.getTableOfContents().methodIds.size * SizeOf.MEMBER_ID_ITEM;\n  int patchedClassDefsSize=newDex.getTableOfContents().classDefs.size * SizeOf.CLASS_DEF_ITEM;\n  int patchedIdSectionSize=patchedStringIdsSize + patchedTypeIdsSize + patchedProtoIdsSize+ patchedFieldIdsSize+ patchedMethodIdsSize+ patchedClassDefsSize;\n  this.patchedHeaderOffset=0;\n  this.patchedStringIdsOffset=patchedHeaderOffset + patchedheaderSize;\n  if (this.oldDex.getTableOfContents().stringIds.isElementFourByteAligned) {\n    this.patchedStringIdsOffset=SizeOf.roundToTimesOfFour(this.patchedStringIdsOffset);\n  }\n  this.stringDataSectionDiffAlg.execute();\n  this.patchedStringDataItemsOffset=patchedheaderSize + patchedIdSectionSize;\n  if (this.oldDex.getTableOfContents().stringDatas.isElementFourByteAligned) {\n    this.patchedStringDataItemsOffset=SizeOf.roundToTimesOfFour(this.patchedStringDataItemsOffset);\n  }\n  this.stringDataSectionDiffAlg.simulatePatchOperation(this.patchedStringDataItemsOffset);\n  this.typeIdSectionDiffAlg.execute();\n  this.patchedTypeIdsOffset=this.patchedStringIdsOffset + patchedStringIdsSize;\n  if (this.oldDex.getTableOfContents().typeIds.isElementFourByteAligned) {\n    this.patchedTypeIdsOffset=SizeOf.roundToTimesOfFour(this.patchedTypeIdsOffset);\n  }\n  this.typeIdSectionDiffAlg.simulatePatchOperation(this.patchedTypeIdsOffset);\n  this.typeListSectionDiffAlg.execute();\n  this.patchedTypeListsOffset=patchedheaderSize + patchedIdSectionSize + this.stringDataSectionDiffAlg.getPatchedSectionSize();\n  if (this.oldDex.getTableOfContents().typeLists.isElementFourByteAligned) {\n    this.patchedTypeListsOffset=SizeOf.roundToTimesOfFour(this.patchedTypeListsOffset);\n  }\n  this.typeListSectionDiffAlg.simulatePatchOperation(this.patchedTypeListsOffset);\n  this.protoIdSectionDiffAlg.execute();\n  this.patchedProtoIdsOffset=this.patchedTypeIdsOffset + patchedTypeIdsSize;\n  if (this.oldDex.getTableOfContents().protoIds.isElementFourByteAligned) {\n    this.patchedProtoIdsOffset=SizeOf.roundToTimesOfFour(this.patchedProtoIdsOffset);\n  }\n  this.protoIdSectionDiffAlg.simulatePatchOperation(this.patchedProtoIdsOffset);\n  this.fieldIdSectionDiffAlg.execute();\n  this.patchedFieldIdsOffset=this.patchedProtoIdsOffset + patchedProtoIdsSize;\n  if (this.oldDex.getTableOfContents().fieldIds.isElementFourByteAligned) {\n    this.patchedFieldIdsOffset=SizeOf.roundToTimesOfFour(this.patchedFieldIdsOffset);\n  }\n  this.fieldIdSectionDiffAlg.simulatePatchOperation(this.patchedFieldIdsOffset);\n  this.methodIdSectionDiffAlg.execute();\n  this.patchedMethodIdsOffset=this.patchedFieldIdsOffset + patchedFieldIdsSize;\n  if (this.oldDex.getTableOfContents().methodIds.isElementFourByteAligned) {\n    this.patchedMethodIdsOffset=SizeOf.roundToTimesOfFour(this.patchedMethodIdsOffset);\n  }\n  this.methodIdSectionDiffAlg.simulatePatchOperation(this.patchedMethodIdsOffset);\n  this.annotationSectionDiffAlg.execute();\n  this.patchedAnnotationItemsOffset=this.patchedTypeListsOffset + this.typeListSectionDiffAlg.getPatchedSectionSize();\n  if (this.oldDex.getTableOfContents().annotations.isElementFourByteAligned) {\n    this.patchedAnnotationItemsOffset=SizeOf.roundToTimesOfFour(this.patchedAnnotationItemsOffset);\n  }\n  this.annotationSectionDiffAlg.simulatePatchOperation(this.patchedAnnotationItemsOffset);\n  this.annotationSetSectionDiffAlg.execute();\n  this.patchedAnnotationSetItemsOffset=this.patchedAnnotationItemsOffset + this.annotationSectionDiffAlg.getPatchedSectionSize();\n  if (this.oldDex.getTableOfContents().annotationSets.isElementFourByteAligned) {\n    this.patchedAnnotationSetItemsOffset=SizeOf.roundToTimesOfFour(this.patchedAnnotationSetItemsOffset);\n  }\n  this.annotationSetSectionDiffAlg.simulatePatchOperation(this.patchedAnnotationSetItemsOffset);\n  this.annotationSetRefListSectionDiffAlg.execute();\n  this.patchedAnnotationSetRefListItemsOffset=this.patchedAnnotationSetItemsOffset + this.annotationSetSectionDiffAlg.getPatchedSectionSize();\n  if (this.oldDex.getTableOfContents().annotationSetRefLists.isElementFourByteAligned) {\n    this.patchedAnnotationSetRefListItemsOffset=SizeOf.roundToTimesOfFour(this.patchedAnnotationSetRefListItemsOffset);\n  }\n  this.annotationSetRefListSectionDiffAlg.simulatePatchOperation(this.patchedAnnotationSetRefListItemsOffset);\n  this.annotationsDirectorySectionDiffAlg.execute();\n  this.patchedAnnotationsDirectoryItemsOffset=this.patchedAnnotationSetRefListItemsOffset + this.annotationSetRefListSectionDiffAlg.getPatchedSectionSize();\n  if (this.oldDex.getTableOfContents().annotationsDirectories.isElementFourByteAligned) {\n    this.patchedAnnotationsDirectoryItemsOffset=SizeOf.roundToTimesOfFour(this.patchedAnnotationsDirectoryItemsOffset);\n  }\n  this.annotationsDirectorySectionDiffAlg.simulatePatchOperation(this.patchedAnnotationsDirectoryItemsOffset);\n  this.debugInfoSectionDiffAlg.execute();\n  this.patchedDebugInfoItemsOffset=this.patchedAnnotationsDirectoryItemsOffset + this.annotationsDirectorySectionDiffAlg.getPatchedSectionSize();\n  if (this.oldDex.getTableOfContents().debugInfos.isElementFourByteAligned) {\n    this.patchedDebugInfoItemsOffset=SizeOf.roundToTimesOfFour(this.patchedDebugInfoItemsOffset);\n  }\n  this.debugInfoSectionDiffAlg.simulatePatchOperation(this.patchedDebugInfoItemsOffset);\n  this.codeSectionDiffAlg.execute();\n  this.patchedCodeItemsOffset=this.patchedDebugInfoItemsOffset + this.debugInfoSectionDiffAlg.getPatchedSectionSize();\n  if (this.oldDex.getTableOfContents().codes.isElementFourByteAligned) {\n    this.patchedCodeItemsOffset=SizeOf.roundToTimesOfFour(this.patchedCodeItemsOffset);\n  }\n  this.codeSectionDiffAlg.simulatePatchOperation(this.patchedCodeItemsOffset);\n  this.classDataSectionDiffAlg.execute();\n  this.patchedClassDataItemsOffset=this.patchedCodeItemsOffset + this.codeSectionDiffAlg.getPatchedSectionSize();\n  if (this.oldDex.getTableOfContents().classDatas.isElementFourByteAligned) {\n    this.patchedClassDataItemsOffset=SizeOf.roundToTimesOfFour(this.patchedClassDataItemsOffset);\n  }\n  this.classDataSectionDiffAlg.simulatePatchOperation(this.patchedClassDataItemsOffset);\n  this.encodedArraySectionDiffAlg.execute();\n  this.patchedEncodedArrayItemsOffset=this.patchedClassDataItemsOffset + this.classDataSectionDiffAlg.getPatchedSectionSize();\n  if (this.oldDex.getTableOfContents().encodedArrays.isElementFourByteAligned) {\n    this.patchedEncodedArrayItemsOffset=SizeOf.roundToTimesOfFour(this.patchedEncodedArrayItemsOffset);\n  }\n  this.encodedArraySectionDiffAlg.simulatePatchOperation(this.patchedEncodedArrayItemsOffset);\n  this.classDefSectionDiffAlg.execute();\n  this.patchedClassDefsOffset=this.patchedMethodIdsOffset + patchedMethodIdsSize;\n  if (this.oldDex.getTableOfContents().classDefs.isElementFourByteAligned) {\n    this.patchedClassDefsOffset=SizeOf.roundToTimesOfFour(this.patchedClassDefsOffset);\n  }\n  this.patchedMapListOffset=this.patchedEncodedArrayItemsOffset + this.encodedArraySectionDiffAlg.getPatchedSectionSize();\n  if (this.oldDex.getTableOfContents().mapList.isElementFourByteAligned) {\n    this.patchedMapListOffset=SizeOf.roundToTimesOfFour(this.patchedMapListOffset);\n  }\n  int patchedMapListSize=newDex.getTableOfContents().mapList.byteCount;\n  this.patchedDexSize=this.patchedMapListOffset + patchedMapListSize;\n  writeResultToStream(out);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1080,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 12212,
        "startLineNumber" : 286,
        "startColumnNumber" : 4,
        "endLineNumber" : 512,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void executeAndSaveTo(OutputStream out) throws IOException {\n  Pattern[] classNamePatterns=new Pattern[this.additionalRemovingClassPatternSet.size()];\n  int classNamePatternCount=0;\n  for (  String regExStr : this.additionalRemovingClassPatternSet) {\n    classNamePatterns[classNamePatternCount++]=Pattern.compile(regExStr);\n  }\n  List<Integer> typeIdOfClassDefsToRemove=new ArrayList<>(classNamePatternCount);\n  List<Integer> offsetOfClassDatasToRemove=new ArrayList<>(classNamePatternCount);\n  for (  ClassDef classDef : this.newDex.classDefs()) {\n    String typeName=this.newDex.typeNames().get(classDef.typeIndex);\n    for (    Pattern pattern : classNamePatterns) {\n      if (pattern.matcher(typeName).matches()) {\n        typeIdOfClassDefsToRemove.add(classDef.typeIndex);\n        offsetOfClassDatasToRemove.add(classDef.classDataOffset);\n        break;\n      }\n    }\n  }\n  ((ClassDefSectionDiffAlgorithm)this.classDefSectionDiffAlg).setTypeIdOfClassDefsToRemove(typeIdOfClassDefsToRemove);\n  ((ClassDataSectionDiffAlgorithm)this.classDataSectionDiffAlg).setOffsetOfClassDatasToRemove(offsetOfClassDatasToRemove);\n  int patchedheaderSize=SizeOf.HEADER_ITEM;\n  int patchedStringIdsSize=newDex.getTableOfContents().stringIds.size * SizeOf.STRING_ID_ITEM;\n  int patchedTypeIdsSize=newDex.getTableOfContents().typeIds.size * SizeOf.TYPE_ID_ITEM;\n  int patchedProtoIdsSize=newDex.getTableOfContents().protoIds.size * SizeOf.PROTO_ID_ITEM;\n  int patchedFieldIdsSize=newDex.getTableOfContents().fieldIds.size * SizeOf.MEMBER_ID_ITEM;\n  int patchedMethodIdsSize=newDex.getTableOfContents().methodIds.size * SizeOf.MEMBER_ID_ITEM;\n  int patchedClassDefsSize=newDex.getTableOfContents().classDefs.size * SizeOf.CLASS_DEF_ITEM;\n  int patchedIdSectionSize=patchedStringIdsSize + patchedTypeIdsSize + patchedProtoIdsSize+ patchedFieldIdsSize+ patchedMethodIdsSize+ patchedClassDefsSize;\n  this.patchedHeaderOffset=0;\n  this.patchedStringIdsOffset=patchedHeaderOffset + patchedheaderSize;\n  if (this.oldDex.getTableOfContents().stringIds.isElementFourByteAligned) {\n    this.patchedStringIdsOffset=SizeOf.roundToTimesOfFour(this.patchedStringIdsOffset);\n  }\n  this.stringDataSectionDiffAlg.execute();\n  this.patchedStringDataItemsOffset=patchedheaderSize + patchedIdSectionSize;\n  if (this.oldDex.getTableOfContents().stringDatas.isElementFourByteAligned) {\n    this.patchedStringDataItemsOffset=SizeOf.roundToTimesOfFour(this.patchedStringDataItemsOffset);\n  }\n  this.stringDataSectionDiffAlg.simulatePatchOperation(this.patchedStringDataItemsOffset);\n  this.typeIdSectionDiffAlg.execute();\n  this.patchedTypeIdsOffset=this.patchedStringIdsOffset + patchedStringIdsSize;\n  if (this.oldDex.getTableOfContents().typeIds.isElementFourByteAligned) {\n    this.patchedTypeIdsOffset=SizeOf.roundToTimesOfFour(this.patchedTypeIdsOffset);\n  }\n  this.typeIdSectionDiffAlg.simulatePatchOperation(this.patchedTypeIdsOffset);\n  this.typeListSectionDiffAlg.execute();\n  this.patchedTypeListsOffset=patchedheaderSize + patchedIdSectionSize + this.stringDataSectionDiffAlg.getPatchedSectionSize();\n  if (this.oldDex.getTableOfContents().typeLists.isElementFourByteAligned) {\n    this.patchedTypeListsOffset=SizeOf.roundToTimesOfFour(this.patchedTypeListsOffset);\n  }\n  this.typeListSectionDiffAlg.simulatePatchOperation(this.patchedTypeListsOffset);\n  this.protoIdSectionDiffAlg.execute();\n  this.patchedProtoIdsOffset=this.patchedTypeIdsOffset + patchedTypeIdsSize;\n  if (this.oldDex.getTableOfContents().protoIds.isElementFourByteAligned) {\n    this.patchedProtoIdsOffset=SizeOf.roundToTimesOfFour(this.patchedProtoIdsOffset);\n  }\n  this.protoIdSectionDiffAlg.simulatePatchOperation(this.patchedProtoIdsOffset);\n  this.fieldIdSectionDiffAlg.execute();\n  this.patchedFieldIdsOffset=this.patchedProtoIdsOffset + patchedProtoIdsSize;\n  if (this.oldDex.getTableOfContents().fieldIds.isElementFourByteAligned) {\n    this.patchedFieldIdsOffset=SizeOf.roundToTimesOfFour(this.patchedFieldIdsOffset);\n  }\n  this.fieldIdSectionDiffAlg.simulatePatchOperation(this.patchedFieldIdsOffset);\n  this.methodIdSectionDiffAlg.execute();\n  this.patchedMethodIdsOffset=this.patchedFieldIdsOffset + patchedFieldIdsSize;\n  if (this.oldDex.getTableOfContents().methodIds.isElementFourByteAligned) {\n    this.patchedMethodIdsOffset=SizeOf.roundToTimesOfFour(this.patchedMethodIdsOffset);\n  }\n  this.methodIdSectionDiffAlg.simulatePatchOperation(this.patchedMethodIdsOffset);\n  this.annotationSectionDiffAlg.execute();\n  this.patchedAnnotationItemsOffset=this.patchedTypeListsOffset + this.typeListSectionDiffAlg.getPatchedSectionSize();\n  if (this.oldDex.getTableOfContents().annotations.isElementFourByteAligned) {\n    this.patchedAnnotationItemsOffset=SizeOf.roundToTimesOfFour(this.patchedAnnotationItemsOffset);\n  }\n  this.annotationSectionDiffAlg.simulatePatchOperation(this.patchedAnnotationItemsOffset);\n  this.annotationSetSectionDiffAlg.execute();\n  this.patchedAnnotationSetItemsOffset=this.patchedAnnotationItemsOffset + this.annotationSectionDiffAlg.getPatchedSectionSize();\n  if (this.oldDex.getTableOfContents().annotationSets.isElementFourByteAligned) {\n    this.patchedAnnotationSetItemsOffset=SizeOf.roundToTimesOfFour(this.patchedAnnotationSetItemsOffset);\n  }\n  this.annotationSetSectionDiffAlg.simulatePatchOperation(this.patchedAnnotationSetItemsOffset);\n  this.annotationSetRefListSectionDiffAlg.execute();\n  this.patchedAnnotationSetRefListItemsOffset=this.patchedAnnotationSetItemsOffset + this.annotationSetSectionDiffAlg.getPatchedSectionSize();\n  if (this.oldDex.getTableOfContents().annotationSetRefLists.isElementFourByteAligned) {\n    this.patchedAnnotationSetRefListItemsOffset=SizeOf.roundToTimesOfFour(this.patchedAnnotationSetRefListItemsOffset);\n  }\n  this.annotationSetRefListSectionDiffAlg.simulatePatchOperation(this.patchedAnnotationSetRefListItemsOffset);\n  this.annotationsDirectorySectionDiffAlg.execute();\n  this.patchedAnnotationsDirectoryItemsOffset=this.patchedAnnotationSetRefListItemsOffset + this.annotationSetRefListSectionDiffAlg.getPatchedSectionSize();\n  if (this.oldDex.getTableOfContents().annotationsDirectories.isElementFourByteAligned) {\n    this.patchedAnnotationsDirectoryItemsOffset=SizeOf.roundToTimesOfFour(this.patchedAnnotationsDirectoryItemsOffset);\n  }\n  this.annotationsDirectorySectionDiffAlg.simulatePatchOperation(this.patchedAnnotationsDirectoryItemsOffset);\n  this.debugInfoSectionDiffAlg.execute();\n  this.patchedDebugInfoItemsOffset=this.patchedAnnotationsDirectoryItemsOffset + this.annotationsDirectorySectionDiffAlg.getPatchedSectionSize();\n  if (this.oldDex.getTableOfContents().debugInfos.isElementFourByteAligned) {\n    this.patchedDebugInfoItemsOffset=SizeOf.roundToTimesOfFour(this.patchedDebugInfoItemsOffset);\n  }\n  this.debugInfoSectionDiffAlg.simulatePatchOperation(this.patchedDebugInfoItemsOffset);\n  this.codeSectionDiffAlg.execute();\n  this.patchedCodeItemsOffset=this.patchedDebugInfoItemsOffset + this.debugInfoSectionDiffAlg.getPatchedSectionSize();\n  if (this.oldDex.getTableOfContents().codes.isElementFourByteAligned) {\n    this.patchedCodeItemsOffset=SizeOf.roundToTimesOfFour(this.patchedCodeItemsOffset);\n  }\n  this.codeSectionDiffAlg.simulatePatchOperation(this.patchedCodeItemsOffset);\n  this.classDataSectionDiffAlg.execute();\n  this.patchedClassDataItemsOffset=this.patchedCodeItemsOffset + this.codeSectionDiffAlg.getPatchedSectionSize();\n  if (this.oldDex.getTableOfContents().classDatas.isElementFourByteAligned) {\n    this.patchedClassDataItemsOffset=SizeOf.roundToTimesOfFour(this.patchedClassDataItemsOffset);\n  }\n  this.classDataSectionDiffAlg.simulatePatchOperation(this.patchedClassDataItemsOffset);\n  this.encodedArraySectionDiffAlg.execute();\n  this.patchedEncodedArrayItemsOffset=this.patchedClassDataItemsOffset + this.classDataSectionDiffAlg.getPatchedSectionSize();\n  if (this.oldDex.getTableOfContents().encodedArrays.isElementFourByteAligned) {\n    this.patchedEncodedArrayItemsOffset=SizeOf.roundToTimesOfFour(this.patchedEncodedArrayItemsOffset);\n  }\n  this.encodedArraySectionDiffAlg.simulatePatchOperation(this.patchedEncodedArrayItemsOffset);\n  this.classDefSectionDiffAlg.execute();\n  this.patchedClassDefsOffset=this.patchedMethodIdsOffset + patchedMethodIdsSize;\n  if (this.oldDex.getTableOfContents().classDefs.isElementFourByteAligned) {\n    this.patchedClassDefsOffset=SizeOf.roundToTimesOfFour(this.patchedClassDefsOffset);\n  }\n  this.patchedMapListOffset=this.patchedEncodedArrayItemsOffset + this.encodedArraySectionDiffAlg.getPatchedSectionSize();\n  if (this.oldDex.getTableOfContents().mapList.isElementFourByteAligned) {\n    this.patchedMapListOffset=SizeOf.roundToTimesOfFour(this.patchedMapListOffset);\n  }\n  int patchedMapListSize=newDex.getTableOfContents().mapList.byteCount;\n  this.patchedDexSize=this.patchedMapListOffset + patchedMapListSize;\n  writeResultToStream(out);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1090,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 179,
        "startLineNumber" : 394,
        "startColumnNumber" : 8,
        "endLineNumber" : 396,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (this.oldDex.getTableOfContents().fieldIds.isElementFourByteAligned) {\n  this.patchedFieldIdsOffset=SizeOf.roundToTimesOfFour(this.patchedFieldIdsOffset);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 7
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 66,
    "startLineNumber" : 394,
    "startColumnNumber" : 12,
    "endLineNumber" : 394,
    "endColumnNumber" : 78
  } ],
  "layoutRelationDataList" : [ ]
}