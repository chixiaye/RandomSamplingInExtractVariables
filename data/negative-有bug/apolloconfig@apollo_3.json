{
  "id" : 3,
  "expression" : "item0.getDataChangeLastModifiedBy()",
  "projectName" : "apolloconfig@apollo",
  "commitID" : "7b7d753f78e444f9cf97b0f238f7e33f585cb277",
  "filePath" : "/apollo-adminservice/src/test/java/com/ctrip/framework/apollo/adminservice/controller/ItemSetControllerTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "item0.getDataChangeLastModifiedBy()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 35,
      "startLineNumber" : 146,
      "startColumnNumber" : 35,
      "endLineNumber" : 146,
      "endColumnNumber" : 70
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 146,
        "startColumnNumber" : 4,
        "endLineNumber" : 146,
        "endColumnNumber" : 71
      },
      "nodeContext" : "Assert.assertEquals(\"updated\",item0.getDataChangeLastModifiedBy())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 146,
        "startColumnNumber" : 4,
        "endLineNumber" : 146,
        "endColumnNumber" : 72
      },
      "nodeContext" : "Assert.assertEquals(\"updated\",item0.getDataChangeLastModifiedBy());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3241,
        "startLineNumber" : 80,
        "startColumnNumber" : 35,
        "endLineNumber" : 149,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String appId=\"someAppId\";\n  AppDTO app=restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\"+ appId,AppDTO.class);\n  ClusterDTO cluster=restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\"+ app.getAppId()+ \"/clusters/default\",ClusterDTO.class);\n  NamespaceDTO namespace=restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\"+ app.getAppId()+ \"/clusters/\"+ cluster.getName()+ \"/namespaces/application\",NamespaceDTO.class);\n  Assert.assertEquals(\"someAppId\",app.getAppId());\n  Assert.assertEquals(\"default\",cluster.getName());\n  Assert.assertEquals(\"application\",namespace.getNamespaceName());\n  ItemChangeSets createChangeSet=new ItemChangeSets();\n  createChangeSet.setDataChangeLastModifiedBy(\"created\");\n  RestTemplate createdRestTemplate=new TestRestTemplate(\"created\",\"\");\n  createdRestTemplate.setMessageConverters(restTemplate.getMessageConverters());\n  int createdSize=3;\n  for (int i=0; i < createdSize; i++) {\n    ItemDTO item=new ItemDTO();\n    item.setNamespaceId(namespace.getId());\n    item.setKey(\"key_\" + i);\n    item.setValue(\"created_value_\" + i);\n    createChangeSet.addCreateItem(item);\n  }\n  ResponseEntity<Void> response=createdRestTemplate.postForEntity(\"http://localhost:\" + port + \"/apps/\"+ app.getAppId()+ \"/clusters/\"+ cluster.getName()+ \"/namespaces/\"+ namespace.getNamespaceName()+ \"/itemset\",createChangeSet,Void.class);\n  Assert.assertEquals(HttpStatus.OK,response.getStatusCode());\n  ItemDTO[] items=createdRestTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\"+ app.getAppId()+ \"/clusters/\"+ cluster.getName()+ \"/namespaces/\"+ namespace.getNamespaceName()+ \"/items\",ItemDTO[].class);\n  ItemChangeSets updateChangeSet=new ItemChangeSets();\n  updateChangeSet.setDataChangeLastModifiedBy(\"updated\");\n  RestTemplate updatedRestTemplate=new TestRestTemplate(\"updated\",\"\");\n  updatedRestTemplate.setMessageConverters(restTemplate.getMessageConverters());\n  int updatedSize=2;\n  for (int i=0; i < updatedSize; i++) {\n    items[i].setValue(\"updated_value_\" + i);\n    updateChangeSet.addUpdateItem(items[i]);\n  }\n  response=updatedRestTemplate.postForEntity(\"http://localhost:\" + port + \"/apps/\"+ app.getAppId()+ \"/clusters/\"+ cluster.getName()+ \"/namespaces/\"+ namespace.getNamespaceName()+ \"/itemset\",updateChangeSet,Void.class);\n  Assert.assertEquals(HttpStatus.OK,response.getStatusCode());\n  List<Item> savedItems=itemRepository.findByNamespaceIdOrderByLineNumAsc(namespace.getId());\n  Assert.assertEquals(createdSize,savedItems.size());\n  Item item0=savedItems.get(0);\n  Assert.assertEquals(\"key_0\",item0.getKey());\n  Assert.assertEquals(\"updated_value_0\",item0.getValue());\n  Assert.assertEquals(\"created\",item0.getDataChangeCreatedBy());\n  Assert.assertEquals(\"updated\",item0.getDataChangeLastModifiedBy());\n  Assert.assertNotNull(item0.getDataChangeCreatedTime());\n  Assert.assertNotNull(item0.getDataChangeLastModifiedTime());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 418,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3478,
        "startLineNumber" : 77,
        "startColumnNumber" : 2,
        "endLineNumber" : 149,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test @Sql(scripts=\"/controller/test-itemset.sql\",executionPhase=ExecutionPhase.BEFORE_TEST_METHOD) @Sql(scripts=\"/controller/cleanup.sql\",executionPhase=ExecutionPhase.AFTER_TEST_METHOD) public void testItemSetUpdated(){\n  String appId=\"someAppId\";\n  AppDTO app=restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\"+ appId,AppDTO.class);\n  ClusterDTO cluster=restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\"+ app.getAppId()+ \"/clusters/default\",ClusterDTO.class);\n  NamespaceDTO namespace=restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\"+ app.getAppId()+ \"/clusters/\"+ cluster.getName()+ \"/namespaces/application\",NamespaceDTO.class);\n  Assert.assertEquals(\"someAppId\",app.getAppId());\n  Assert.assertEquals(\"default\",cluster.getName());\n  Assert.assertEquals(\"application\",namespace.getNamespaceName());\n  ItemChangeSets createChangeSet=new ItemChangeSets();\n  createChangeSet.setDataChangeLastModifiedBy(\"created\");\n  RestTemplate createdRestTemplate=new TestRestTemplate(\"created\",\"\");\n  createdRestTemplate.setMessageConverters(restTemplate.getMessageConverters());\n  int createdSize=3;\n  for (int i=0; i < createdSize; i++) {\n    ItemDTO item=new ItemDTO();\n    item.setNamespaceId(namespace.getId());\n    item.setKey(\"key_\" + i);\n    item.setValue(\"created_value_\" + i);\n    createChangeSet.addCreateItem(item);\n  }\n  ResponseEntity<Void> response=createdRestTemplate.postForEntity(\"http://localhost:\" + port + \"/apps/\"+ app.getAppId()+ \"/clusters/\"+ cluster.getName()+ \"/namespaces/\"+ namespace.getNamespaceName()+ \"/itemset\",createChangeSet,Void.class);\n  Assert.assertEquals(HttpStatus.OK,response.getStatusCode());\n  ItemDTO[] items=createdRestTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\"+ app.getAppId()+ \"/clusters/\"+ cluster.getName()+ \"/namespaces/\"+ namespace.getNamespaceName()+ \"/items\",ItemDTO[].class);\n  ItemChangeSets updateChangeSet=new ItemChangeSets();\n  updateChangeSet.setDataChangeLastModifiedBy(\"updated\");\n  RestTemplate updatedRestTemplate=new TestRestTemplate(\"updated\",\"\");\n  updatedRestTemplate.setMessageConverters(restTemplate.getMessageConverters());\n  int updatedSize=2;\n  for (int i=0; i < updatedSize; i++) {\n    items[i].setValue(\"updated_value_\" + i);\n    updateChangeSet.addUpdateItem(items[i]);\n  }\n  response=updatedRestTemplate.postForEntity(\"http://localhost:\" + port + \"/apps/\"+ app.getAppId()+ \"/clusters/\"+ cluster.getName()+ \"/namespaces/\"+ namespace.getNamespaceName()+ \"/itemset\",updateChangeSet,Void.class);\n  Assert.assertEquals(HttpStatus.OK,response.getStatusCode());\n  List<Item> savedItems=itemRepository.findByNamespaceIdOrderByLineNumAsc(namespace.getId());\n  Assert.assertEquals(createdSize,savedItems.size());\n  Item item0=savedItems.get(0);\n  Assert.assertEquals(\"key_0\",item0.getKey());\n  Assert.assertEquals(\"updated_value_0\",item0.getValue());\n  Assert.assertEquals(\"created\",item0.getDataChangeCreatedBy());\n  Assert.assertEquals(\"updated\",item0.getDataChangeLastModifiedBy());\n  Assert.assertNotNull(item0.getDataChangeCreatedTime());\n  Assert.assertNotNull(item0.getDataChangeLastModifiedTime());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 444,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 146,
        "startColumnNumber" : 4,
        "endLineNumber" : 146,
        "endColumnNumber" : 72
      },
      "nodeContext" : "Assert.assertEquals(\"updated\",item0.getDataChangeLastModifiedBy());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 35,
    "startLineNumber" : 146,
    "startColumnNumber" : 35,
    "endLineNumber" : 146,
    "endColumnNumber" : 70
  } ],
  "layoutRelationDataList" : [ ]
}