{
  "id" : 176,
  "expression" : "rowKey5.get()",
  "projectName" : "realm@realm-java",
  "commitID" : "9da3b229a46407f73e2003fb40857cadf062086b",
  "filePath" : "/realm/realm-library/src/androidTest/java/io/realm/internal/JNITableTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "rowKey5.get()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 344,
      "startColumnNumber" : 57,
      "endLineNumber" : 344,
      "endColumnNumber" : 70
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 344,
        "startColumnNumber" : 30,
        "endLineNumber" : 344,
        "endColumnNumber" : 71
      },
      "nodeContext" : "t.getDouble(colKey2.get(),rowKey5.get())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 344,
        "startColumnNumber" : 8,
        "endLineNumber" : 344,
        "endColumnNumber" : 72
      },
      "nodeContext" : "assertEquals(2000.0D,t.getDouble(colKey2.get(),rowKey5.get()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 344,
        "startColumnNumber" : 8,
        "endLineNumber" : 344,
        "endColumnNumber" : 73
      },
      "nodeContext" : "assertEquals(2000.0D,t.getDouble(colKey2.get(),rowKey5.get()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3684,
        "startLineNumber" : 291,
        "startColumnNumber" : 31,
        "endLineNumber" : 351,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final AtomicLong colKey1=new AtomicLong(-1);\n  final AtomicLong colKey2=new AtomicLong(-1);\n  final AtomicLong colKey3=new AtomicLong(-1);\n  final AtomicLong colKey4=new AtomicLong(-1);\n  final AtomicLong rowKey0=new AtomicLong(-1);\n  final AtomicLong rowKey1=new AtomicLong(-1);\n  final AtomicLong rowKey2=new AtomicLong(-1);\n  final AtomicLong rowKey3=new AtomicLong(-1);\n  final AtomicLong rowKey4=new AtomicLong(-1);\n  final AtomicLong rowKey5=new AtomicLong(-1);\n  final AtomicLong rowKey6=new AtomicLong(-1);\n  Table t=TestHelper.createTable(sharedRealm,\"temp\",new TestHelper.AdditionalTableSetup(){\n    @Override public void execute(    Table t){\n      colKey1.set(t.addColumn(RealmFieldType.INTEGER,\"intCol\"));\n      colKey2.set(t.addColumn(RealmFieldType.DOUBLE,\"doubleCol\"));\n      colKey3.set(t.addColumn(RealmFieldType.FLOAT,\"floatCol\"));\n      colKey4.set(t.addColumn(RealmFieldType.STRING,\"StringCol\"));\n      rowKey0.set(TestHelper.addRowWithValues(t,new long[]{colKey1.get(),colKey2.get(),colKey3.get(),colKey4.get()},new Object[]{1,2.0D,3.0F,\"s1\"}));\n      rowKey1.set(TestHelper.addRowWithValues(t,new long[]{colKey1.get(),colKey2.get(),colKey3.get(),colKey4.get()},new Object[]{1,2.0D,3.0F,\"s1\"}));\n      rowKey2.set(TestHelper.addRowWithValues(t,new long[]{colKey1.get(),colKey2.get(),colKey3.get(),colKey4.get()},new Object[]{1,2.0D,3.0F,\"s1\"}));\n      rowKey3.set(TestHelper.addRowWithValues(t,new long[]{colKey1.get(),colKey2.get(),colKey3.get(),colKey4.get()},new Object[]{10,20.0D,30.0F,\"s10\"}));\n      rowKey4.set(TestHelper.addRowWithValues(t,new long[]{colKey1.get(),colKey2.get(),colKey3.get(),colKey4.get()},new Object[]{100,200.0D,300.0F,\"s100\"}));\n      rowKey5.set(TestHelper.addRowWithValues(t,new long[]{colKey1.get(),colKey2.get(),colKey3.get(),colKey4.get()},new Object[]{1000,2000.0D,3000.0F,\"s1000\"}));\n    }\n  }\n);\n  assertEquals(3,t.count(colKey1.get(),1));\n  assertEquals(3,t.count(colKey2.get(),2.0D));\n  assertEquals(3,t.count(colKey3.get(),3.0F));\n  assertEquals(3,t.count(colKey4.get(),\"s1\"));\n  assertEquals(3,t.findFirstDouble(colKey2.get(),20.0D));\n  assertEquals(4,t.findFirstFloat(colKey3.get(),300.0F));\n  sharedRealm.beginTransaction();\n  t.setDouble(colKey2.get(),rowKey2.get(),-2.0D,false);\n  t.setFloat(colKey3.get(),rowKey2.get(),-3.0F,false);\n  sharedRealm.commitTransaction();\n  assertEquals(-2.0D,t.getDouble(colKey2.get(),rowKey2.get()));\n  assertEquals(20.0D,t.getDouble(colKey2.get(),rowKey3.get()));\n  assertEquals(200.0D,t.getDouble(colKey2.get(),rowKey4.get()));\n  assertEquals(2000.0D,t.getDouble(colKey2.get(),rowKey5.get()));\n  assertEquals(-3.0F,t.getFloat(colKey3.get(),rowKey2.get()));\n  assertEquals(30.0F,t.getFloat(colKey3.get(),rowKey3.get()));\n  assertEquals(300.0F,t.getFloat(colKey3.get(),rowKey4.get()));\n  assertEquals(3000.0F,t.getFloat(colKey3.get(),rowKey5.get()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 609,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3721,
        "startLineNumber" : 290,
        "startColumnNumber" : 4,
        "endLineNumber" : 351,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void tableNumbers(){\n  final AtomicLong colKey1=new AtomicLong(-1);\n  final AtomicLong colKey2=new AtomicLong(-1);\n  final AtomicLong colKey3=new AtomicLong(-1);\n  final AtomicLong colKey4=new AtomicLong(-1);\n  final AtomicLong rowKey0=new AtomicLong(-1);\n  final AtomicLong rowKey1=new AtomicLong(-1);\n  final AtomicLong rowKey2=new AtomicLong(-1);\n  final AtomicLong rowKey3=new AtomicLong(-1);\n  final AtomicLong rowKey4=new AtomicLong(-1);\n  final AtomicLong rowKey5=new AtomicLong(-1);\n  final AtomicLong rowKey6=new AtomicLong(-1);\n  Table t=TestHelper.createTable(sharedRealm,\"temp\",new TestHelper.AdditionalTableSetup(){\n    @Override public void execute(    Table t){\n      colKey1.set(t.addColumn(RealmFieldType.INTEGER,\"intCol\"));\n      colKey2.set(t.addColumn(RealmFieldType.DOUBLE,\"doubleCol\"));\n      colKey3.set(t.addColumn(RealmFieldType.FLOAT,\"floatCol\"));\n      colKey4.set(t.addColumn(RealmFieldType.STRING,\"StringCol\"));\n      rowKey0.set(TestHelper.addRowWithValues(t,new long[]{colKey1.get(),colKey2.get(),colKey3.get(),colKey4.get()},new Object[]{1,2.0D,3.0F,\"s1\"}));\n      rowKey1.set(TestHelper.addRowWithValues(t,new long[]{colKey1.get(),colKey2.get(),colKey3.get(),colKey4.get()},new Object[]{1,2.0D,3.0F,\"s1\"}));\n      rowKey2.set(TestHelper.addRowWithValues(t,new long[]{colKey1.get(),colKey2.get(),colKey3.get(),colKey4.get()},new Object[]{1,2.0D,3.0F,\"s1\"}));\n      rowKey3.set(TestHelper.addRowWithValues(t,new long[]{colKey1.get(),colKey2.get(),colKey3.get(),colKey4.get()},new Object[]{10,20.0D,30.0F,\"s10\"}));\n      rowKey4.set(TestHelper.addRowWithValues(t,new long[]{colKey1.get(),colKey2.get(),colKey3.get(),colKey4.get()},new Object[]{100,200.0D,300.0F,\"s100\"}));\n      rowKey5.set(TestHelper.addRowWithValues(t,new long[]{colKey1.get(),colKey2.get(),colKey3.get(),colKey4.get()},new Object[]{1000,2000.0D,3000.0F,\"s1000\"}));\n    }\n  }\n);\n  assertEquals(3,t.count(colKey1.get(),1));\n  assertEquals(3,t.count(colKey2.get(),2.0D));\n  assertEquals(3,t.count(colKey3.get(),3.0F));\n  assertEquals(3,t.count(colKey4.get(),\"s1\"));\n  assertEquals(3,t.findFirstDouble(colKey2.get(),20.0D));\n  assertEquals(4,t.findFirstFloat(colKey3.get(),300.0F));\n  sharedRealm.beginTransaction();\n  t.setDouble(colKey2.get(),rowKey2.get(),-2.0D,false);\n  t.setFloat(colKey3.get(),rowKey2.get(),-3.0F,false);\n  sharedRealm.commitTransaction();\n  assertEquals(-2.0D,t.getDouble(colKey2.get(),rowKey2.get()));\n  assertEquals(20.0D,t.getDouble(colKey2.get(),rowKey3.get()));\n  assertEquals(200.0D,t.getDouble(colKey2.get(),rowKey4.get()));\n  assertEquals(2000.0D,t.getDouble(colKey2.get(),rowKey5.get()));\n  assertEquals(-3.0F,t.getFloat(colKey3.get(),rowKey2.get()));\n  assertEquals(30.0F,t.getFloat(colKey3.get(),rowKey3.get()));\n  assertEquals(300.0F,t.getFloat(colKey3.get(),rowKey4.get()));\n  assertEquals(3000.0F,t.getFloat(colKey3.get(),rowKey5.get()));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 615,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 344,
        "startColumnNumber" : 8,
        "endLineNumber" : 344,
        "endColumnNumber" : 73
      },
      "nodeContext" : "assertEquals(2000.0D,t.getDouble(colKey2.get(),rowKey5.get()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "long"
  }, {
    "nodeContext" : "rowKey5.get()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 350,
      "startColumnNumber" : 56,
      "endLineNumber" : 350,
      "endColumnNumber" : 69
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 350,
        "startColumnNumber" : 30,
        "endLineNumber" : 350,
        "endColumnNumber" : 70
      },
      "nodeContext" : "t.getFloat(colKey3.get(),rowKey5.get())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 350,
        "startColumnNumber" : 8,
        "endLineNumber" : 350,
        "endColumnNumber" : 71
      },
      "nodeContext" : "assertEquals(3000.0F,t.getFloat(colKey3.get(),rowKey5.get()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 350,
        "startColumnNumber" : 8,
        "endLineNumber" : 350,
        "endColumnNumber" : 72
      },
      "nodeContext" : "assertEquals(3000.0F,t.getFloat(colKey3.get(),rowKey5.get()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3684,
        "startLineNumber" : 291,
        "startColumnNumber" : 31,
        "endLineNumber" : 351,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final AtomicLong colKey1=new AtomicLong(-1);\n  final AtomicLong colKey2=new AtomicLong(-1);\n  final AtomicLong colKey3=new AtomicLong(-1);\n  final AtomicLong colKey4=new AtomicLong(-1);\n  final AtomicLong rowKey0=new AtomicLong(-1);\n  final AtomicLong rowKey1=new AtomicLong(-1);\n  final AtomicLong rowKey2=new AtomicLong(-1);\n  final AtomicLong rowKey3=new AtomicLong(-1);\n  final AtomicLong rowKey4=new AtomicLong(-1);\n  final AtomicLong rowKey5=new AtomicLong(-1);\n  final AtomicLong rowKey6=new AtomicLong(-1);\n  Table t=TestHelper.createTable(sharedRealm,\"temp\",new TestHelper.AdditionalTableSetup(){\n    @Override public void execute(    Table t){\n      colKey1.set(t.addColumn(RealmFieldType.INTEGER,\"intCol\"));\n      colKey2.set(t.addColumn(RealmFieldType.DOUBLE,\"doubleCol\"));\n      colKey3.set(t.addColumn(RealmFieldType.FLOAT,\"floatCol\"));\n      colKey4.set(t.addColumn(RealmFieldType.STRING,\"StringCol\"));\n      rowKey0.set(TestHelper.addRowWithValues(t,new long[]{colKey1.get(),colKey2.get(),colKey3.get(),colKey4.get()},new Object[]{1,2.0D,3.0F,\"s1\"}));\n      rowKey1.set(TestHelper.addRowWithValues(t,new long[]{colKey1.get(),colKey2.get(),colKey3.get(),colKey4.get()},new Object[]{1,2.0D,3.0F,\"s1\"}));\n      rowKey2.set(TestHelper.addRowWithValues(t,new long[]{colKey1.get(),colKey2.get(),colKey3.get(),colKey4.get()},new Object[]{1,2.0D,3.0F,\"s1\"}));\n      rowKey3.set(TestHelper.addRowWithValues(t,new long[]{colKey1.get(),colKey2.get(),colKey3.get(),colKey4.get()},new Object[]{10,20.0D,30.0F,\"s10\"}));\n      rowKey4.set(TestHelper.addRowWithValues(t,new long[]{colKey1.get(),colKey2.get(),colKey3.get(),colKey4.get()},new Object[]{100,200.0D,300.0F,\"s100\"}));\n      rowKey5.set(TestHelper.addRowWithValues(t,new long[]{colKey1.get(),colKey2.get(),colKey3.get(),colKey4.get()},new Object[]{1000,2000.0D,3000.0F,\"s1000\"}));\n    }\n  }\n);\n  assertEquals(3,t.count(colKey1.get(),1));\n  assertEquals(3,t.count(colKey2.get(),2.0D));\n  assertEquals(3,t.count(colKey3.get(),3.0F));\n  assertEquals(3,t.count(colKey4.get(),\"s1\"));\n  assertEquals(3,t.findFirstDouble(colKey2.get(),20.0D));\n  assertEquals(4,t.findFirstFloat(colKey3.get(),300.0F));\n  sharedRealm.beginTransaction();\n  t.setDouble(colKey2.get(),rowKey2.get(),-2.0D,false);\n  t.setFloat(colKey3.get(),rowKey2.get(),-3.0F,false);\n  sharedRealm.commitTransaction();\n  assertEquals(-2.0D,t.getDouble(colKey2.get(),rowKey2.get()));\n  assertEquals(20.0D,t.getDouble(colKey2.get(),rowKey3.get()));\n  assertEquals(200.0D,t.getDouble(colKey2.get(),rowKey4.get()));\n  assertEquals(2000.0D,t.getDouble(colKey2.get(),rowKey5.get()));\n  assertEquals(-3.0F,t.getFloat(colKey3.get(),rowKey2.get()));\n  assertEquals(30.0F,t.getFloat(colKey3.get(),rowKey3.get()));\n  assertEquals(300.0F,t.getFloat(colKey3.get(),rowKey4.get()));\n  assertEquals(3000.0F,t.getFloat(colKey3.get(),rowKey5.get()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 609,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3721,
        "startLineNumber" : 290,
        "startColumnNumber" : 4,
        "endLineNumber" : 351,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void tableNumbers(){\n  final AtomicLong colKey1=new AtomicLong(-1);\n  final AtomicLong colKey2=new AtomicLong(-1);\n  final AtomicLong colKey3=new AtomicLong(-1);\n  final AtomicLong colKey4=new AtomicLong(-1);\n  final AtomicLong rowKey0=new AtomicLong(-1);\n  final AtomicLong rowKey1=new AtomicLong(-1);\n  final AtomicLong rowKey2=new AtomicLong(-1);\n  final AtomicLong rowKey3=new AtomicLong(-1);\n  final AtomicLong rowKey4=new AtomicLong(-1);\n  final AtomicLong rowKey5=new AtomicLong(-1);\n  final AtomicLong rowKey6=new AtomicLong(-1);\n  Table t=TestHelper.createTable(sharedRealm,\"temp\",new TestHelper.AdditionalTableSetup(){\n    @Override public void execute(    Table t){\n      colKey1.set(t.addColumn(RealmFieldType.INTEGER,\"intCol\"));\n      colKey2.set(t.addColumn(RealmFieldType.DOUBLE,\"doubleCol\"));\n      colKey3.set(t.addColumn(RealmFieldType.FLOAT,\"floatCol\"));\n      colKey4.set(t.addColumn(RealmFieldType.STRING,\"StringCol\"));\n      rowKey0.set(TestHelper.addRowWithValues(t,new long[]{colKey1.get(),colKey2.get(),colKey3.get(),colKey4.get()},new Object[]{1,2.0D,3.0F,\"s1\"}));\n      rowKey1.set(TestHelper.addRowWithValues(t,new long[]{colKey1.get(),colKey2.get(),colKey3.get(),colKey4.get()},new Object[]{1,2.0D,3.0F,\"s1\"}));\n      rowKey2.set(TestHelper.addRowWithValues(t,new long[]{colKey1.get(),colKey2.get(),colKey3.get(),colKey4.get()},new Object[]{1,2.0D,3.0F,\"s1\"}));\n      rowKey3.set(TestHelper.addRowWithValues(t,new long[]{colKey1.get(),colKey2.get(),colKey3.get(),colKey4.get()},new Object[]{10,20.0D,30.0F,\"s10\"}));\n      rowKey4.set(TestHelper.addRowWithValues(t,new long[]{colKey1.get(),colKey2.get(),colKey3.get(),colKey4.get()},new Object[]{100,200.0D,300.0F,\"s100\"}));\n      rowKey5.set(TestHelper.addRowWithValues(t,new long[]{colKey1.get(),colKey2.get(),colKey3.get(),colKey4.get()},new Object[]{1000,2000.0D,3000.0F,\"s1000\"}));\n    }\n  }\n);\n  assertEquals(3,t.count(colKey1.get(),1));\n  assertEquals(3,t.count(colKey2.get(),2.0D));\n  assertEquals(3,t.count(colKey3.get(),3.0F));\n  assertEquals(3,t.count(colKey4.get(),\"s1\"));\n  assertEquals(3,t.findFirstDouble(colKey2.get(),20.0D));\n  assertEquals(4,t.findFirstFloat(colKey3.get(),300.0F));\n  sharedRealm.beginTransaction();\n  t.setDouble(colKey2.get(),rowKey2.get(),-2.0D,false);\n  t.setFloat(colKey3.get(),rowKey2.get(),-3.0F,false);\n  sharedRealm.commitTransaction();\n  assertEquals(-2.0D,t.getDouble(colKey2.get(),rowKey2.get()));\n  assertEquals(20.0D,t.getDouble(colKey2.get(),rowKey3.get()));\n  assertEquals(200.0D,t.getDouble(colKey2.get(),rowKey4.get()));\n  assertEquals(2000.0D,t.getDouble(colKey2.get(),rowKey5.get()));\n  assertEquals(-3.0F,t.getFloat(colKey3.get(),rowKey2.get()));\n  assertEquals(30.0F,t.getFloat(colKey3.get(),rowKey3.get()));\n  assertEquals(300.0F,t.getFloat(colKey3.get(),rowKey4.get()));\n  assertEquals(3000.0F,t.getFloat(colKey3.get(),rowKey5.get()));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 615,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 350,
        "startColumnNumber" : 8,
        "endLineNumber" : 350,
        "endColumnNumber" : 72
      },
      "nodeContext" : "assertEquals(3000.0F,t.getFloat(colKey3.get(),rowKey5.get()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 344,
    "startColumnNumber" : 57,
    "endLineNumber" : 344,
    "endColumnNumber" : 70
  }, {
    "charLength" : 13,
    "startLineNumber" : 350,
    "startColumnNumber" : 56,
    "endLineNumber" : 350,
    "endColumnNumber" : 69
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}