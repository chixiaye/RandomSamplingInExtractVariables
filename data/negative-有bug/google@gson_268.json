{
  "id" : 268,
  "expression" : "Set.class",
  "projectName" : "google@gson",
  "commitID" : "c3d0f200b352f411b9ebe45c3bf49d4328b2c51f",
  "filePath" : "/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Set.class",
    "nodeType" : "TypeLiteral",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 153,
      "startColumnNumber" : 17,
      "endLineNumber" : 153,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 153,
        "startColumnNumber" : 17,
        "endLineNumber" : 153,
        "endColumnNumber" : 52
      },
      "nodeContext" : "Set.class.isAssignableFrom(rawType)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 572,
        "startLineNumber" : 153,
        "startColumnNumber" : 13,
        "endLineNumber" : 171,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (Set.class.isAssignableFrom(rawType)) {\n  return new ObjectConstructor<T>(){\n    public T construct(){\n      return (T)new LinkedHashSet<Object>();\n    }\n  }\n;\n}\n else if (Queue.class.isAssignableFrom(rawType)) {\n  return new ObjectConstructor<T>(){\n    public T construct(){\n      return (T)new LinkedList<Object>();\n    }\n  }\n;\n}\n else {\n  return new ObjectConstructor<T>(){\n    public T construct(){\n      return (T)new ArrayList<Object>();\n    }\n  }\n;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 89,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1273,
        "startLineNumber" : 137,
        "startColumnNumber" : 13,
        "endLineNumber" : 171,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (EnumSet.class.isAssignableFrom(rawType)) {\n  return new ObjectConstructor<T>(){\n    @SuppressWarnings(\"rawtypes\") public T construct(){\n      if (type instanceof ParameterizedType) {\n        Type elementType=((ParameterizedType)type).getActualTypeArguments()[0];\n        if (elementType instanceof Class) {\n          return (T)EnumSet.noneOf((Class)elementType);\n        }\n else {\n          throw new JsonIOException(\"Invalid EnumSet type: \" + type.toString());\n        }\n      }\n else {\n        throw new JsonIOException(\"Invalid EnumSet type: \" + type.toString());\n      }\n    }\n  }\n;\n}\n else if (Set.class.isAssignableFrom(rawType)) {\n  return new ObjectConstructor<T>(){\n    public T construct(){\n      return (T)new LinkedHashSet<Object>();\n    }\n  }\n;\n}\n else if (Queue.class.isAssignableFrom(rawType)) {\n  return new ObjectConstructor<T>(){\n    public T construct(){\n      return (T)new LinkedList<Object>();\n    }\n  }\n;\n}\n else {\n  return new ObjectConstructor<T>(){\n    public T construct(){\n      return (T)new ArrayList<Object>();\n    }\n  }\n;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 171,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1481,
        "startLineNumber" : 131,
        "startColumnNumber" : 6,
        "endLineNumber" : 171,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (SortedSet.class.isAssignableFrom(rawType)) {\n  return new ObjectConstructor<T>(){\n    public T construct(){\n      return (T)new TreeSet<Object>();\n    }\n  }\n;\n}\n else if (EnumSet.class.isAssignableFrom(rawType)) {\n  return new ObjectConstructor<T>(){\n    @SuppressWarnings(\"rawtypes\") public T construct(){\n      if (type instanceof ParameterizedType) {\n        Type elementType=((ParameterizedType)type).getActualTypeArguments()[0];\n        if (elementType instanceof Class) {\n          return (T)EnumSet.noneOf((Class)elementType);\n        }\n else {\n          throw new JsonIOException(\"Invalid EnumSet type: \" + type.toString());\n        }\n      }\n else {\n        throw new JsonIOException(\"Invalid EnumSet type: \" + type.toString());\n      }\n    }\n  }\n;\n}\n else if (Set.class.isAssignableFrom(rawType)) {\n  return new ObjectConstructor<T>(){\n    public T construct(){\n      return (T)new LinkedHashSet<Object>();\n    }\n  }\n;\n}\n else if (Queue.class.isAssignableFrom(rawType)) {\n  return new ObjectConstructor<T>(){\n    public T construct(){\n      return (T)new LinkedList<Object>();\n    }\n  }\n;\n}\n else {\n  return new ObjectConstructor<T>(){\n    public T construct(){\n      return (T)new ArrayList<Object>();\n    }\n  }\n;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 203,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1495,
        "startLineNumber" : 130,
        "startColumnNumber" : 52,
        "endLineNumber" : 172,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (SortedSet.class.isAssignableFrom(rawType)) {\n    return new ObjectConstructor<T>(){\n      public T construct(){\n        return (T)new TreeSet<Object>();\n      }\n    }\n;\n  }\n else   if (EnumSet.class.isAssignableFrom(rawType)) {\n    return new ObjectConstructor<T>(){\n      @SuppressWarnings(\"rawtypes\") public T construct(){\n        if (type instanceof ParameterizedType) {\n          Type elementType=((ParameterizedType)type).getActualTypeArguments()[0];\n          if (elementType instanceof Class) {\n            return (T)EnumSet.noneOf((Class)elementType);\n          }\n else {\n            throw new JsonIOException(\"Invalid EnumSet type: \" + type.toString());\n          }\n        }\n else {\n          throw new JsonIOException(\"Invalid EnumSet type: \" + type.toString());\n        }\n      }\n    }\n;\n  }\n else   if (Set.class.isAssignableFrom(rawType)) {\n    return new ObjectConstructor<T>(){\n      public T construct(){\n        return (T)new LinkedHashSet<Object>();\n      }\n    }\n;\n  }\n else   if (Queue.class.isAssignableFrom(rawType)) {\n    return new ObjectConstructor<T>(){\n      public T construct(){\n        return (T)new LinkedList<Object>();\n      }\n    }\n;\n  }\n else {\n    return new ObjectConstructor<T>(){\n      public T construct(){\n        return (T)new ArrayList<Object>();\n      }\n    }\n;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1543,
        "startLineNumber" : 130,
        "startColumnNumber" : 4,
        "endLineNumber" : 172,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (Collection.class.isAssignableFrom(rawType)) {\n  if (SortedSet.class.isAssignableFrom(rawType)) {\n    return new ObjectConstructor<T>(){\n      public T construct(){\n        return (T)new TreeSet<Object>();\n      }\n    }\n;\n  }\n else   if (EnumSet.class.isAssignableFrom(rawType)) {\n    return new ObjectConstructor<T>(){\n      @SuppressWarnings(\"rawtypes\") public T construct(){\n        if (type instanceof ParameterizedType) {\n          Type elementType=((ParameterizedType)type).getActualTypeArguments()[0];\n          if (elementType instanceof Class) {\n            return (T)EnumSet.noneOf((Class)elementType);\n          }\n else {\n            throw new JsonIOException(\"Invalid EnumSet type: \" + type.toString());\n          }\n        }\n else {\n          throw new JsonIOException(\"Invalid EnumSet type: \" + type.toString());\n        }\n      }\n    }\n;\n  }\n else   if (Set.class.isAssignableFrom(rawType)) {\n    return new ObjectConstructor<T>(){\n      public T construct(){\n        return (T)new LinkedHashSet<Object>();\n      }\n    }\n;\n  }\n else   if (Queue.class.isAssignableFrom(rawType)) {\n    return new ObjectConstructor<T>(){\n      public T construct(){\n        return (T)new LinkedList<Object>();\n      }\n    }\n;\n  }\n else {\n    return new ObjectConstructor<T>(){\n      public T construct(){\n        return (T)new ArrayList<Object>();\n      }\n    }\n;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 211,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2362,
        "startLineNumber" : 129,
        "startColumnNumber" : 49,
        "endLineNumber" : 198,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (Collection.class.isAssignableFrom(rawType)) {\n    if (SortedSet.class.isAssignableFrom(rawType)) {\n      return new ObjectConstructor<T>(){\n        public T construct(){\n          return (T)new TreeSet<Object>();\n        }\n      }\n;\n    }\n else     if (EnumSet.class.isAssignableFrom(rawType)) {\n      return new ObjectConstructor<T>(){\n        @SuppressWarnings(\"rawtypes\") public T construct(){\n          if (type instanceof ParameterizedType) {\n            Type elementType=((ParameterizedType)type).getActualTypeArguments()[0];\n            if (elementType instanceof Class) {\n              return (T)EnumSet.noneOf((Class)elementType);\n            }\n else {\n              throw new JsonIOException(\"Invalid EnumSet type: \" + type.toString());\n            }\n          }\n else {\n            throw new JsonIOException(\"Invalid EnumSet type: \" + type.toString());\n          }\n        }\n      }\n;\n    }\n else     if (Set.class.isAssignableFrom(rawType)) {\n      return new ObjectConstructor<T>(){\n        public T construct(){\n          return (T)new LinkedHashSet<Object>();\n        }\n      }\n;\n    }\n else     if (Queue.class.isAssignableFrom(rawType)) {\n      return new ObjectConstructor<T>(){\n        public T construct(){\n          return (T)new LinkedList<Object>();\n        }\n      }\n;\n    }\n else {\n      return new ObjectConstructor<T>(){\n        public T construct(){\n          return (T)new ArrayList<Object>();\n        }\n      }\n;\n    }\n  }\n  if (Map.class.isAssignableFrom(rawType)) {\n    if (SortedMap.class.isAssignableFrom(rawType)) {\n      return new ObjectConstructor<T>(){\n        public T construct(){\n          return (T)new TreeMap<Object,Object>();\n        }\n      }\n;\n    }\n else     if (type instanceof ParameterizedType && !(String.class.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))) {\n      return new ObjectConstructor<T>(){\n        public T construct(){\n          return (T)new LinkedHashMap<Object,Object>();\n        }\n      }\n;\n    }\n else {\n      return new ObjectConstructor<T>(){\n        public T construct(){\n          return (T)new LinkedTreeMap<String,Object>();\n        }\n      }\n;\n    }\n  }\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 337,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2672,
        "startLineNumber" : 123,
        "startColumnNumber" : 2,
        "endLineNumber" : 198,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Constructors for common interface types like Map and List and their subytpes.\n */\n@SuppressWarnings(\"unchecked\") private <T>ObjectConstructor<T> newDefaultImplementationConstructor(final Type type,Class<? super T> rawType){\n  if (Collection.class.isAssignableFrom(rawType)) {\n    if (SortedSet.class.isAssignableFrom(rawType)) {\n      return new ObjectConstructor<T>(){\n        public T construct(){\n          return (T)new TreeSet<Object>();\n        }\n      }\n;\n    }\n else     if (EnumSet.class.isAssignableFrom(rawType)) {\n      return new ObjectConstructor<T>(){\n        @SuppressWarnings(\"rawtypes\") public T construct(){\n          if (type instanceof ParameterizedType) {\n            Type elementType=((ParameterizedType)type).getActualTypeArguments()[0];\n            if (elementType instanceof Class) {\n              return (T)EnumSet.noneOf((Class)elementType);\n            }\n else {\n              throw new JsonIOException(\"Invalid EnumSet type: \" + type.toString());\n            }\n          }\n else {\n            throw new JsonIOException(\"Invalid EnumSet type: \" + type.toString());\n          }\n        }\n      }\n;\n    }\n else     if (Set.class.isAssignableFrom(rawType)) {\n      return new ObjectConstructor<T>(){\n        public T construct(){\n          return (T)new LinkedHashSet<Object>();\n        }\n      }\n;\n    }\n else     if (Queue.class.isAssignableFrom(rawType)) {\n      return new ObjectConstructor<T>(){\n        public T construct(){\n          return (T)new LinkedList<Object>();\n        }\n      }\n;\n    }\n else {\n      return new ObjectConstructor<T>(){\n        public T construct(){\n          return (T)new ArrayList<Object>();\n        }\n      }\n;\n    }\n  }\n  if (Map.class.isAssignableFrom(rawType)) {\n    if (SortedMap.class.isAssignableFrom(rawType)) {\n      return new ObjectConstructor<T>(){\n        public T construct(){\n          return (T)new TreeMap<Object,Object>();\n        }\n      }\n;\n    }\n else     if (type instanceof ParameterizedType && !(String.class.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))) {\n      return new ObjectConstructor<T>(){\n        public T construct(){\n          return (T)new LinkedHashMap<Object,Object>();\n        }\n      }\n;\n    }\n else {\n      return new ObjectConstructor<T>(){\n        public T construct(){\n          return (T)new LinkedTreeMap<String,Object>();\n        }\n      }\n;\n    }\n  }\n  return null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 364,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 153,
        "startColumnNumber" : 17,
        "endLineNumber" : 153,
        "endColumnNumber" : 52
      },
      "nodeContext" : "Set.class.isAssignableFrom(rawType)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<java.util.Set>"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 153,
    "startColumnNumber" : 17,
    "endLineNumber" : 153,
    "endColumnNumber" : 26
  } ],
  "layoutRelationDataList" : [ ]
}