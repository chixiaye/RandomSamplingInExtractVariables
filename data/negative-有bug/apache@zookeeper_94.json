{
  "id" : 94,
  "expression" : "request.txn instanceof CreateSessionTxn",
  "projectName" : "apache@zookeeper",
  "commitID" : "c6639c9842973a7954c8baa412d6825cb833d51f",
  "filePath" : "/src/java/main/org/apache/zookeeper/server/FinalRequestProcessor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "request.txn instanceof CreateSessionTxn",
    "nodeType" : "InstanceofExpression",
    "nodePosition" : {
      "charLength" : 39,
      "startLineNumber" : 96,
      "startColumnNumber" : 24,
      "endLineNumber" : 96,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 474,
        "startLineNumber" : 96,
        "startColumnNumber" : 20,
        "endLineNumber" : 104,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (request.txn instanceof CreateSessionTxn) {\n  CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n  zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n}\n else {\n  LOG.warn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 49,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 514,
        "startLineNumber" : 95,
        "startColumnNumber" : 58,
        "endLineNumber" : 105,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (request.txn instanceof CreateSessionTxn) {\n    CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n    zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n  }\n else {\n    LOG.warn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 50,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 695,
        "startLineNumber" : 95,
        "startColumnNumber" : 16,
        "endLineNumber" : 107,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (request.type == OpCode.createSession) {\n  if (request.txn instanceof CreateSessionTxn) {\n    CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n    zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n  }\n else {\n    LOG.warn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n  }\n}\n else if (request.type == OpCode.closeSession) {\n  zks.sessionTracker.removeSession(request.sessionId);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 76,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 799,
        "startLineNumber" : 93,
        "startColumnNumber" : 37,
        "endLineNumber" : 108,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  rc=zks.dataTree.processTxn(request.hdr,request.txn);\n  if (request.type == OpCode.createSession) {\n    if (request.txn instanceof CreateSessionTxn) {\n      CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n      zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n    }\n else {\n      LOG.warn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n    }\n  }\n else   if (request.type == OpCode.closeSession) {\n    zks.sessionTracker.removeSession(request.sessionId);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 824,
        "startLineNumber" : 93,
        "startColumnNumber" : 12,
        "endLineNumber" : 108,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (request.hdr != null) {\n  rc=zks.dataTree.processTxn(request.hdr,request.txn);\n  if (request.type == OpCode.createSession) {\n    if (request.txn instanceof CreateSessionTxn) {\n      CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n      zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n    }\n else {\n      LOG.warn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n    }\n  }\n else   if (request.type == OpCode.closeSession) {\n    zks.sessionTracker.removeSession(request.sessionId);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 97,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 1493,
        "startLineNumber" : 83,
        "startColumnNumber" : 46,
        "endLineNumber" : 113,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n    if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n      LOG.warn(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n    }\n    zks.outstandingChanges.remove(0);\n  }\n  if (request.hdr != null) {\n    rc=zks.dataTree.processTxn(request.hdr,request.txn);\n    if (request.type == OpCode.createSession) {\n      if (request.txn instanceof CreateSessionTxn) {\n        CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n        zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n      }\n else {\n        LOG.warn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n      }\n    }\n else     if (request.type == OpCode.closeSession) {\n      zks.sessionTracker.removeSession(request.sessionId);\n    }\n  }\n  if (Request.isQuorum(request.type)) {\n    zks.addCommittedProposal(request);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 171,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1531,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 113,
        "endColumnNumber" : 9
      },
      "nodeContext" : "synchronized (zks.outstandingChanges) {\n  while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n    if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n      LOG.warn(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n    }\n    zks.outstandingChanges.remove(0);\n  }\n  if (request.hdr != null) {\n    rc=zks.dataTree.processTxn(request.hdr,request.txn);\n    if (request.type == OpCode.createSession) {\n      if (request.txn instanceof CreateSessionTxn) {\n        CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n        zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n      }\n else {\n        LOG.warn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n      }\n    }\n else     if (request.type == OpCode.closeSession) {\n      zks.sessionTracker.removeSession(request.sessionId);\n    }\n  }\n  if (Request.isQuorum(request.type)) {\n    zks.addCommittedProposal(request);\n  }\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 175,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8461,
        "startLineNumber" : 72,
        "startColumnNumber" : 48,
        "endLineNumber" : 261,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (LOG.isDebugEnabled()) {\n    LOG.debug(\"Processing request:: \" + request);\n  }\n  long traceMask=ZooTrace.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooTrace.SERVER_PING_TRACE_MASK;\n  }\n  ZooTrace.logRequest(LOG,traceMask,'E',request,\"\");\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        LOG.warn(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          LOG.warn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  Code err=Code.OK;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw KeeperException.create(KeeperException.Code.get(((ErrorTxn)request.txn).getErr()));\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(request);\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=Code.get(rc.err);\nbreak;\ncase OpCode.delete:err=Code.get(rc.err);\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=Code.get(rc.err);\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=Code.get(rc.err);\nbreak;\ncase OpCode.closeSession:err=Code.get(rc.err);\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException.BadArgumentsException();\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException.NoNodeException();\n}\nPrepRequestProcessor.checkACL(zks,zks.dataTree.convertLong(n.acl),ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.setWatches:SetWatches setWatches=new SetWatches();\nrequest.request.rewind();\nZooKeeperServer.byteBuffer2Record(request.request,setWatches);\nlong relativeZxid=setWatches.getRelativeZxid();\nzks.dataTree.setWatches(relativeZxid,setWatches.getDataWatches(),setWatches.getExistWatches(),setWatches.getChildWatches(),request.cnxn);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException.NoNodeException();\n}\nPrepRequestProcessor.checkACL(zks,zks.dataTree.convertLong(n.acl),ZooDefs.Perms.READ,request.authInfo);\nList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.code();\n}\ncatch (Exception e) {\nLOG.error(\"Failed to process \" + request,e);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nLOG.error(\"Dumping request buffer: 0x\" + sb.toString());\nerr=Code.MARSHALLINGERROR;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err.intValue());\nzks.serverStats().updateLatency(request.createTime);\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nLOG.error(\"FIXMSG\",e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1008,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8505,
        "startLineNumber" : 72,
        "startColumnNumber" : 4,
        "endLineNumber" : 261,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void processRequest(Request request){\n  if (LOG.isDebugEnabled()) {\n    LOG.debug(\"Processing request:: \" + request);\n  }\n  long traceMask=ZooTrace.CLIENT_REQUEST_TRACE_MASK;\n  if (request.type == OpCode.ping) {\n    traceMask=ZooTrace.SERVER_PING_TRACE_MASK;\n  }\n  ZooTrace.logRequest(LOG,traceMask,'E',request,\"\");\n  ProcessTxnResult rc=null;\nsynchronized (zks.outstandingChanges) {\n    while (!zks.outstandingChanges.isEmpty() && zks.outstandingChanges.get(0).zxid <= request.zxid) {\n      if (zks.outstandingChanges.get(0).zxid < request.zxid) {\n        LOG.warn(\"Zxid outstanding \" + zks.outstandingChanges.get(0).zxid + \" is less than current \"+ request.zxid);\n      }\n      zks.outstandingChanges.remove(0);\n    }\n    if (request.hdr != null) {\n      rc=zks.dataTree.processTxn(request.hdr,request.txn);\n      if (request.type == OpCode.createSession) {\n        if (request.txn instanceof CreateSessionTxn) {\n          CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n          zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n        }\n else {\n          LOG.warn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n        }\n      }\n else       if (request.type == OpCode.closeSession) {\n        zks.sessionTracker.removeSession(request.sessionId);\n      }\n    }\n    if (Request.isQuorum(request.type)) {\n      zks.addCommittedProposal(request);\n    }\n  }\n  if (request.hdr != null && request.hdr.getType() == OpCode.closeSession) {\n    Factory scxn=zks.getServerCnxnFactory();\n    if (scxn != null) {\n      scxn.closeSession(request.sessionId);\n    }\n  }\n  if (request.cnxn == null) {\n    return;\n  }\n  zks.decInProcess();\n  Code err=Code.OK;\n  Record rsp=null;\n  try {\n    if (request.hdr != null && request.hdr.getType() == OpCode.error) {\n      throw KeeperException.create(KeeperException.Code.get(((ErrorTxn)request.txn).getErr()));\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(request);\n    }\nswitch (request.type) {\ncase OpCode.ping:      request.cnxn.sendResponse(new ReplyHeader(-2,zks.dataTree.lastProcessedZxid,0),null,\"response\");\n    return;\ncase OpCode.createSession:  request.cnxn.finishSessionInit(true);\nreturn;\ncase OpCode.create:rsp=new CreateResponse(rc.path);\nerr=Code.get(rc.err);\nbreak;\ncase OpCode.delete:err=Code.get(rc.err);\nbreak;\ncase OpCode.setData:rsp=new SetDataResponse(rc.stat);\nerr=Code.get(rc.err);\nbreak;\ncase OpCode.setACL:rsp=new SetACLResponse(rc.stat);\nerr=Code.get(rc.err);\nbreak;\ncase OpCode.closeSession:err=Code.get(rc.err);\nbreak;\ncase OpCode.sync:SyncRequest syncRequest=new SyncRequest();\nZooKeeperServer.byteBuffer2Record(request.request,syncRequest);\nrsp=new SyncResponse(syncRequest.getPath());\nbreak;\ncase OpCode.exists:ExistsRequest existsRequest=new ExistsRequest();\nZooKeeperServer.byteBuffer2Record(request.request,existsRequest);\nString path=existsRequest.getPath();\nif (path.indexOf('\\0') != -1) {\nthrow new KeeperException.BadArgumentsException();\n}\nStat stat=zks.dataTree.statNode(path,existsRequest.getWatch() ? request.cnxn : null);\nrsp=new ExistsResponse(stat);\nbreak;\ncase OpCode.getData:GetDataRequest getDataRequest=new GetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getDataRequest);\nDataNode n=zks.dataTree.getNode(getDataRequest.getPath());\nif (n == null) {\nthrow new KeeperException.NoNodeException();\n}\nPrepRequestProcessor.checkACL(zks,zks.dataTree.convertLong(n.acl),ZooDefs.Perms.READ,request.authInfo);\nstat=new Stat();\nbyte b[]=zks.dataTree.getData(getDataRequest.getPath(),stat,getDataRequest.getWatch() ? request.cnxn : null);\nrsp=new GetDataResponse(b,stat);\nbreak;\ncase OpCode.setWatches:SetWatches setWatches=new SetWatches();\nrequest.request.rewind();\nZooKeeperServer.byteBuffer2Record(request.request,setWatches);\nlong relativeZxid=setWatches.getRelativeZxid();\nzks.dataTree.setWatches(relativeZxid,setWatches.getDataWatches(),setWatches.getExistWatches(),setWatches.getChildWatches(),request.cnxn);\nbreak;\ncase OpCode.getACL:GetACLRequest getACLRequest=new GetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getACLRequest);\nstat=new Stat();\nList<ACL> acl=zks.dataTree.getACL(getACLRequest.getPath(),stat);\nrsp=new GetACLResponse(acl,stat);\nbreak;\ncase OpCode.getChildren:GetChildrenRequest getChildrenRequest=new GetChildrenRequest();\nZooKeeperServer.byteBuffer2Record(request.request,getChildrenRequest);\nstat=new Stat();\nn=zks.dataTree.getNode(getChildrenRequest.getPath());\nif (n == null) {\nthrow new KeeperException.NoNodeException();\n}\nPrepRequestProcessor.checkACL(zks,zks.dataTree.convertLong(n.acl),ZooDefs.Perms.READ,request.authInfo);\nList<String> children=zks.dataTree.getChildren(getChildrenRequest.getPath(),stat,getChildrenRequest.getWatch() ? request.cnxn : null);\nrsp=new GetChildrenResponse(children);\nbreak;\n}\n}\n catch (KeeperException e) {\nerr=e.code();\n}\ncatch (Exception e) {\nLOG.error(\"Failed to process \" + request,e);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\nLOG.error(\"Dumping request buffer: 0x\" + sb.toString());\nerr=Code.MARSHALLINGERROR;\n}\nReplyHeader hdr=new ReplyHeader(request.cxid,request.zxid,err.intValue());\nzks.serverStats().updateLatency(request.createTime);\ntry {\nrequest.cnxn.sendResponse(hdr,rsp,\"response\");\n}\n catch (IOException e) {\nLOG.error(\"FIXMSG\",e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1016,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 474,
        "startLineNumber" : 96,
        "startColumnNumber" : 20,
        "endLineNumber" : 104,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (request.txn instanceof CreateSessionTxn) {\n  CreateSessionTxn cst=(CreateSessionTxn)request.txn;\n  zks.sessionTracker.addSession(request.sessionId,cst.getTimeOut());\n}\n else {\n  LOG.warn(\"*****>>>>> Got \" + request.txn.getClass() + \" \"+ request.txn.toString());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 49,
      "astHeight" : 8
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 39,
    "startLineNumber" : 96,
    "startColumnNumber" : 24,
    "endLineNumber" : 96,
    "endColumnNumber" : 63
  } ],
  "layoutRelationDataList" : [ ]
}