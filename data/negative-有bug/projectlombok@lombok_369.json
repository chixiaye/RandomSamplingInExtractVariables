{
  "id" : 369,
  "expression" : "methodType",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/core/lombok/javac/handlers/HandleSetter.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "methodType",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 243,
      "startColumnNumber" : 6,
      "endLineNumber" : 243,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 243,
        "startColumnNumber" : 6,
        "endLineNumber" : 243,
        "endColumnNumber" : 24
      },
      "nodeContext" : "methodType == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 274,
        "startLineNumber" : 243,
        "startColumnNumber" : 2,
        "endLineNumber" : 247,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (methodType == null) {\n  methodType=treeMaker.Type(new JCNoType(getCtcInt(TypeTags.class,\"VOID\")));\n  returnThis=false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 24,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2942,
        "startLineNumber" : 198,
        "startColumnNumber" : 101,
        "endLineNumber" : 266,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String setterName=toSetterName(field);\n  boolean returnThis=shouldReturnThis(field);\n  if (setterName == null)   return null;\n  JCVariableDecl fieldDecl=(JCVariableDecl)field.get();\n  JCExpression fieldRef=createFieldAccessor(treeMaker,field,FieldAccess.ALWAYS_FIELD);\n  JCAssign assign=treeMaker.Assign(fieldRef,treeMaker.Ident(fieldDecl.name));\n  ListBuffer<JCStatement> statements=ListBuffer.lb();\n  List<JCAnnotation> nonNulls=findAnnotations(field,TransformationsUtil.NON_NULL_PATTERN);\n  List<JCAnnotation> nullables=findAnnotations(field,TransformationsUtil.NULLABLE_PATTERN);\n  Name methodName=field.toName(setterName);\n  List<JCAnnotation> annsOnParam=nonNulls.appendList(nullables);\n  JCVariableDecl param=treeMaker.VarDef(treeMaker.Modifiers(Flags.FINAL,annsOnParam),fieldDecl.name,fieldDecl.vartype,null);\n  if (nonNulls.isEmpty()) {\n    statements.append(treeMaker.Exec(assign));\n  }\n else {\n    JCStatement nullCheck=generateNullCheck(treeMaker,field);\n    if (nullCheck != null)     statements.append(nullCheck);\n    statements.append(treeMaker.Exec(assign));\n  }\n  JCExpression methodType=null;\n  if (returnThis) {\n    JavacNode typeNode=field;\n    while (typeNode != null && typeNode.getKind() != Kind.TYPE)     typeNode=typeNode.up();\n    if (typeNode != null && typeNode.get() instanceof JCClassDecl) {\n      JCClassDecl type=(JCClassDecl)typeNode.get();\n      ListBuffer<JCExpression> typeArgs=ListBuffer.lb();\n      if (!type.typarams.isEmpty()) {\n        for (        JCTypeParameter tp : type.typarams) {\n          typeArgs.append(treeMaker.Ident(tp.name));\n        }\n        methodType=treeMaker.TypeApply(treeMaker.Ident(type.name),typeArgs.toList());\n      }\n else {\n        methodType=treeMaker.Ident(type.name);\n      }\n    }\n  }\n  if (methodType == null) {\n    methodType=treeMaker.Type(new JCNoType(getCtcInt(TypeTags.class,\"VOID\")));\n    returnThis=false;\n  }\n  if (returnThis) {\n    JCReturn returnStatement=treeMaker.Return(treeMaker.Ident(field.toName(\"this\")));\n    statements.append(returnStatement);\n  }\n  JCBlock methodBody=treeMaker.Block(0,statements.toList());\n  List<JCTypeParameter> methodGenericParams=List.nil();\n  List<JCVariableDecl> parameters=List.of(param);\n  List<JCExpression> throwsClauses=List.nil();\n  JCExpression annotationMethodDefaultValue=null;\n  List<JCAnnotation> annsOnMethod=List.nil();\n  if (isFieldDeprecated(field)) {\n    annsOnMethod=annsOnMethod.prepend(treeMaker.Annotation(chainDots(field,\"java\",\"lang\",\"Deprecated\"),List.<JCExpression>nil()));\n  }\n  return recursiveSetGeneratedBy(treeMaker.MethodDef(treeMaker.Modifiers(access,annsOnMethod),methodName,methodType,methodGenericParams,parameters,throwsClauses,methodBody,annotationMethodDefaultValue),source);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 455,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3042,
        "startLineNumber" : 198,
        "startColumnNumber" : 1,
        "endLineNumber" : 266,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private JCMethodDecl createSetter(long access,JavacNode field,TreeMaker treeMaker,JCTree source){\n  String setterName=toSetterName(field);\n  boolean returnThis=shouldReturnThis(field);\n  if (setterName == null)   return null;\n  JCVariableDecl fieldDecl=(JCVariableDecl)field.get();\n  JCExpression fieldRef=createFieldAccessor(treeMaker,field,FieldAccess.ALWAYS_FIELD);\n  JCAssign assign=treeMaker.Assign(fieldRef,treeMaker.Ident(fieldDecl.name));\n  ListBuffer<JCStatement> statements=ListBuffer.lb();\n  List<JCAnnotation> nonNulls=findAnnotations(field,TransformationsUtil.NON_NULL_PATTERN);\n  List<JCAnnotation> nullables=findAnnotations(field,TransformationsUtil.NULLABLE_PATTERN);\n  Name methodName=field.toName(setterName);\n  List<JCAnnotation> annsOnParam=nonNulls.appendList(nullables);\n  JCVariableDecl param=treeMaker.VarDef(treeMaker.Modifiers(Flags.FINAL,annsOnParam),fieldDecl.name,fieldDecl.vartype,null);\n  if (nonNulls.isEmpty()) {\n    statements.append(treeMaker.Exec(assign));\n  }\n else {\n    JCStatement nullCheck=generateNullCheck(treeMaker,field);\n    if (nullCheck != null)     statements.append(nullCheck);\n    statements.append(treeMaker.Exec(assign));\n  }\n  JCExpression methodType=null;\n  if (returnThis) {\n    JavacNode typeNode=field;\n    while (typeNode != null && typeNode.getKind() != Kind.TYPE)     typeNode=typeNode.up();\n    if (typeNode != null && typeNode.get() instanceof JCClassDecl) {\n      JCClassDecl type=(JCClassDecl)typeNode.get();\n      ListBuffer<JCExpression> typeArgs=ListBuffer.lb();\n      if (!type.typarams.isEmpty()) {\n        for (        JCTypeParameter tp : type.typarams) {\n          typeArgs.append(treeMaker.Ident(tp.name));\n        }\n        methodType=treeMaker.TypeApply(treeMaker.Ident(type.name),typeArgs.toList());\n      }\n else {\n        methodType=treeMaker.Ident(type.name);\n      }\n    }\n  }\n  if (methodType == null) {\n    methodType=treeMaker.Type(new JCNoType(getCtcInt(TypeTags.class,\"VOID\")));\n    returnThis=false;\n  }\n  if (returnThis) {\n    JCReturn returnStatement=treeMaker.Return(treeMaker.Ident(field.toName(\"this\")));\n    statements.append(returnStatement);\n  }\n  JCBlock methodBody=treeMaker.Block(0,statements.toList());\n  List<JCTypeParameter> methodGenericParams=List.nil();\n  List<JCVariableDecl> parameters=List.of(param);\n  List<JCExpression> throwsClauses=List.nil();\n  JCExpression annotationMethodDefaultValue=null;\n  List<JCAnnotation> annsOnMethod=List.nil();\n  if (isFieldDeprecated(field)) {\n    annsOnMethod=annsOnMethod.prepend(treeMaker.Annotation(chainDots(field,\"java\",\"lang\",\"Deprecated\"),List.<JCExpression>nil()));\n  }\n  return recursiveSetGeneratedBy(treeMaker.MethodDef(treeMaker.Modifiers(access,annsOnMethod),methodName,methodType,methodGenericParams,parameters,throwsClauses,methodBody,annotationMethodDefaultValue),source);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 475,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 243,
        "startColumnNumber" : 6,
        "endLineNumber" : 243,
        "endColumnNumber" : 24
      },
      "nodeContext" : "methodType == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "lombok.javac.handlers.JCExpression"
  }, {
    "nodeContext" : "methodType",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 264,
      "startColumnNumber" : 108,
      "endLineNumber" : 264,
      "endColumnNumber" : 118
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 180,
        "startLineNumber" : 264,
        "startColumnNumber" : 33,
        "endLineNumber" : 265,
        "endColumnNumber" : 93
      },
      "nodeContext" : "treeMaker.MethodDef(treeMaker.Modifiers(access,annsOnMethod),methodName,methodType,methodGenericParams,parameters,throwsClauses,methodBody,annotationMethodDefaultValue)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 213,
        "startLineNumber" : 264,
        "startColumnNumber" : 9,
        "endLineNumber" : 265,
        "endColumnNumber" : 102
      },
      "nodeContext" : "recursiveSetGeneratedBy(treeMaker.MethodDef(treeMaker.Modifiers(access,annsOnMethod),methodName,methodType,methodGenericParams,parameters,throwsClauses,methodBody,annotationMethodDefaultValue),source)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 221,
        "startLineNumber" : 264,
        "startColumnNumber" : 2,
        "endLineNumber" : 265,
        "endColumnNumber" : 103
      },
      "nodeContext" : "return recursiveSetGeneratedBy(treeMaker.MethodDef(treeMaker.Modifiers(access,annsOnMethod),methodName,methodType,methodGenericParams,parameters,throwsClauses,methodBody,annotationMethodDefaultValue),source);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2942,
        "startLineNumber" : 198,
        "startColumnNumber" : 101,
        "endLineNumber" : 266,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String setterName=toSetterName(field);\n  boolean returnThis=shouldReturnThis(field);\n  if (setterName == null)   return null;\n  JCVariableDecl fieldDecl=(JCVariableDecl)field.get();\n  JCExpression fieldRef=createFieldAccessor(treeMaker,field,FieldAccess.ALWAYS_FIELD);\n  JCAssign assign=treeMaker.Assign(fieldRef,treeMaker.Ident(fieldDecl.name));\n  ListBuffer<JCStatement> statements=ListBuffer.lb();\n  List<JCAnnotation> nonNulls=findAnnotations(field,TransformationsUtil.NON_NULL_PATTERN);\n  List<JCAnnotation> nullables=findAnnotations(field,TransformationsUtil.NULLABLE_PATTERN);\n  Name methodName=field.toName(setterName);\n  List<JCAnnotation> annsOnParam=nonNulls.appendList(nullables);\n  JCVariableDecl param=treeMaker.VarDef(treeMaker.Modifiers(Flags.FINAL,annsOnParam),fieldDecl.name,fieldDecl.vartype,null);\n  if (nonNulls.isEmpty()) {\n    statements.append(treeMaker.Exec(assign));\n  }\n else {\n    JCStatement nullCheck=generateNullCheck(treeMaker,field);\n    if (nullCheck != null)     statements.append(nullCheck);\n    statements.append(treeMaker.Exec(assign));\n  }\n  JCExpression methodType=null;\n  if (returnThis) {\n    JavacNode typeNode=field;\n    while (typeNode != null && typeNode.getKind() != Kind.TYPE)     typeNode=typeNode.up();\n    if (typeNode != null && typeNode.get() instanceof JCClassDecl) {\n      JCClassDecl type=(JCClassDecl)typeNode.get();\n      ListBuffer<JCExpression> typeArgs=ListBuffer.lb();\n      if (!type.typarams.isEmpty()) {\n        for (        JCTypeParameter tp : type.typarams) {\n          typeArgs.append(treeMaker.Ident(tp.name));\n        }\n        methodType=treeMaker.TypeApply(treeMaker.Ident(type.name),typeArgs.toList());\n      }\n else {\n        methodType=treeMaker.Ident(type.name);\n      }\n    }\n  }\n  if (methodType == null) {\n    methodType=treeMaker.Type(new JCNoType(getCtcInt(TypeTags.class,\"VOID\")));\n    returnThis=false;\n  }\n  if (returnThis) {\n    JCReturn returnStatement=treeMaker.Return(treeMaker.Ident(field.toName(\"this\")));\n    statements.append(returnStatement);\n  }\n  JCBlock methodBody=treeMaker.Block(0,statements.toList());\n  List<JCTypeParameter> methodGenericParams=List.nil();\n  List<JCVariableDecl> parameters=List.of(param);\n  List<JCExpression> throwsClauses=List.nil();\n  JCExpression annotationMethodDefaultValue=null;\n  List<JCAnnotation> annsOnMethod=List.nil();\n  if (isFieldDeprecated(field)) {\n    annsOnMethod=annsOnMethod.prepend(treeMaker.Annotation(chainDots(field,\"java\",\"lang\",\"Deprecated\"),List.<JCExpression>nil()));\n  }\n  return recursiveSetGeneratedBy(treeMaker.MethodDef(treeMaker.Modifiers(access,annsOnMethod),methodName,methodType,methodGenericParams,parameters,throwsClauses,methodBody,annotationMethodDefaultValue),source);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 455,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3042,
        "startLineNumber" : 198,
        "startColumnNumber" : 1,
        "endLineNumber" : 266,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private JCMethodDecl createSetter(long access,JavacNode field,TreeMaker treeMaker,JCTree source){\n  String setterName=toSetterName(field);\n  boolean returnThis=shouldReturnThis(field);\n  if (setterName == null)   return null;\n  JCVariableDecl fieldDecl=(JCVariableDecl)field.get();\n  JCExpression fieldRef=createFieldAccessor(treeMaker,field,FieldAccess.ALWAYS_FIELD);\n  JCAssign assign=treeMaker.Assign(fieldRef,treeMaker.Ident(fieldDecl.name));\n  ListBuffer<JCStatement> statements=ListBuffer.lb();\n  List<JCAnnotation> nonNulls=findAnnotations(field,TransformationsUtil.NON_NULL_PATTERN);\n  List<JCAnnotation> nullables=findAnnotations(field,TransformationsUtil.NULLABLE_PATTERN);\n  Name methodName=field.toName(setterName);\n  List<JCAnnotation> annsOnParam=nonNulls.appendList(nullables);\n  JCVariableDecl param=treeMaker.VarDef(treeMaker.Modifiers(Flags.FINAL,annsOnParam),fieldDecl.name,fieldDecl.vartype,null);\n  if (nonNulls.isEmpty()) {\n    statements.append(treeMaker.Exec(assign));\n  }\n else {\n    JCStatement nullCheck=generateNullCheck(treeMaker,field);\n    if (nullCheck != null)     statements.append(nullCheck);\n    statements.append(treeMaker.Exec(assign));\n  }\n  JCExpression methodType=null;\n  if (returnThis) {\n    JavacNode typeNode=field;\n    while (typeNode != null && typeNode.getKind() != Kind.TYPE)     typeNode=typeNode.up();\n    if (typeNode != null && typeNode.get() instanceof JCClassDecl) {\n      JCClassDecl type=(JCClassDecl)typeNode.get();\n      ListBuffer<JCExpression> typeArgs=ListBuffer.lb();\n      if (!type.typarams.isEmpty()) {\n        for (        JCTypeParameter tp : type.typarams) {\n          typeArgs.append(treeMaker.Ident(tp.name));\n        }\n        methodType=treeMaker.TypeApply(treeMaker.Ident(type.name),typeArgs.toList());\n      }\n else {\n        methodType=treeMaker.Ident(type.name);\n      }\n    }\n  }\n  if (methodType == null) {\n    methodType=treeMaker.Type(new JCNoType(getCtcInt(TypeTags.class,\"VOID\")));\n    returnThis=false;\n  }\n  if (returnThis) {\n    JCReturn returnStatement=treeMaker.Return(treeMaker.Ident(field.toName(\"this\")));\n    statements.append(returnStatement);\n  }\n  JCBlock methodBody=treeMaker.Block(0,statements.toList());\n  List<JCTypeParameter> methodGenericParams=List.nil();\n  List<JCVariableDecl> parameters=List.of(param);\n  List<JCExpression> throwsClauses=List.nil();\n  JCExpression annotationMethodDefaultValue=null;\n  List<JCAnnotation> annsOnMethod=List.nil();\n  if (isFieldDeprecated(field)) {\n    annsOnMethod=annsOnMethod.prepend(treeMaker.Annotation(chainDots(field,\"java\",\"lang\",\"Deprecated\"),List.<JCExpression>nil()));\n  }\n  return recursiveSetGeneratedBy(treeMaker.MethodDef(treeMaker.Modifiers(access,annsOnMethod),methodName,methodType,methodGenericParams,parameters,throwsClauses,methodBody,annotationMethodDefaultValue),source);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 475,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 180,
        "startLineNumber" : 264,
        "startColumnNumber" : 33,
        "endLineNumber" : 265,
        "endColumnNumber" : 93
      },
      "nodeContext" : "treeMaker.MethodDef(treeMaker.Modifiers(access,annsOnMethod),methodName,methodType,methodGenericParams,parameters,throwsClauses,methodBody,annotationMethodDefaultValue)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "lombok.javac.handlers.JCExpression"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 243,
    "startColumnNumber" : 6,
    "endLineNumber" : 243,
    "endColumnNumber" : 16
  }, {
    "charLength" : 10,
    "startLineNumber" : 264,
    "startColumnNumber" : 108,
    "endLineNumber" : 264,
    "endColumnNumber" : 118
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}