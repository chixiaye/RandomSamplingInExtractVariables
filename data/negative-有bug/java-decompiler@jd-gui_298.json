{
  "id" : 298,
  "expression" : "potentialOuterTypePaths.size() == 0",
  "projectName" : "java-decompiler@jd-gui",
  "commitID" : "fbc5b14d66b37b88bf1dc18386b530e874550240",
  "filePath" : "/services/src/main/java/org/jd/gui/util/container/JarContainerEntryUtil.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "potentialOuterTypePaths.size() == 0",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 35,
      "startLineNumber" : 43,
      "startColumnNumber" : 12,
      "endLineNumber" : 43,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1682,
        "startLineNumber" : 43,
        "startColumnNumber" : 8,
        "endLineNumber" : 85,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (potentialOuterTypePaths.size() == 0) {\n  filtredSubEntries=entries;\n}\n else {\n  HashSet<String> innerTypePaths=new HashSet<>();\n  for (  Container.Entry e : entries) {\n    if (!e.isDirectory() && potentialOuterTypePaths.contains(e.getPath())) {\n      populateInnerTypePaths(innerTypePaths,e);\n    }\n  }\n  filtredSubEntries=new ArrayList<>();\n  for (  Container.Entry e : entries) {\n    if (!e.isDirectory()) {\n      String p=e.getPath();\n      if (p.toLowerCase().endsWith(\".class\")) {\n        int indexDollar=p.lastIndexOf('$');\n        if (indexDollar != -1) {\n          int indexSeparator=p.lastIndexOf('/');\n          if (indexDollar > indexSeparator) {\n            if (innerTypePaths.contains(p)) {\n              continue;\n            }\n else {\n              populateInnerTypePaths(innerTypePaths,e);\n              if (innerTypePaths.contains(p)) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n    }\n    filtredSubEntries.add(e);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 141,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2553,
        "startLineNumber" : 24,
        "startColumnNumber" : 106,
        "endLineNumber" : 91,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  HashSet<String> potentialOuterTypePaths=new HashSet<>();\n  Collection<Container.Entry> filtredSubEntries;\n  for (  Container.Entry e : entries) {\n    if (!e.isDirectory()) {\n      String p=e.getPath();\n      if (p.toLowerCase().endsWith(\".class\")) {\n        int lastSeparatorIndex=p.lastIndexOf('/');\n        int dollarIndex=p.substring(lastSeparatorIndex + 1).indexOf('$');\n        if (dollarIndex != -1) {\n          potentialOuterTypePaths.add(p.substring(0,lastSeparatorIndex + 1 + dollarIndex) + \".class\");\n        }\n      }\n    }\n  }\n  if (potentialOuterTypePaths.size() == 0) {\n    filtredSubEntries=entries;\n  }\n else {\n    HashSet<String> innerTypePaths=new HashSet<>();\n    for (    Container.Entry e : entries) {\n      if (!e.isDirectory() && potentialOuterTypePaths.contains(e.getPath())) {\n        populateInnerTypePaths(innerTypePaths,e);\n      }\n    }\n    filtredSubEntries=new ArrayList<>();\n    for (    Container.Entry e : entries) {\n      if (!e.isDirectory()) {\n        String p=e.getPath();\n        if (p.toLowerCase().endsWith(\".class\")) {\n          int indexDollar=p.lastIndexOf('$');\n          if (indexDollar != -1) {\n            int indexSeparator=p.lastIndexOf('/');\n            if (indexDollar > indexSeparator) {\n              if (innerTypePaths.contains(p)) {\n                continue;\n              }\n else {\n                populateInnerTypePaths(innerTypePaths,e);\n                if (innerTypePaths.contains(p)) {\n                  continue;\n                }\n              }\n            }\n          }\n        }\n      }\n      filtredSubEntries.add(e);\n    }\n  }\n  List<Container.Entry> list=new ArrayList<>(filtredSubEntries);\n  list.sort(ContainerEntryComparator.COMPARATOR);\n  return list;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 260,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2655,
        "startLineNumber" : 24,
        "startColumnNumber" : 4,
        "endLineNumber" : 91,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static Collection<Container.Entry> removeInnerTypeEntries(Collection<Container.Entry> entries){\n  HashSet<String> potentialOuterTypePaths=new HashSet<>();\n  Collection<Container.Entry> filtredSubEntries;\n  for (  Container.Entry e : entries) {\n    if (!e.isDirectory()) {\n      String p=e.getPath();\n      if (p.toLowerCase().endsWith(\".class\")) {\n        int lastSeparatorIndex=p.lastIndexOf('/');\n        int dollarIndex=p.substring(lastSeparatorIndex + 1).indexOf('$');\n        if (dollarIndex != -1) {\n          potentialOuterTypePaths.add(p.substring(0,lastSeparatorIndex + 1 + dollarIndex) + \".class\");\n        }\n      }\n    }\n  }\n  if (potentialOuterTypePaths.size() == 0) {\n    filtredSubEntries=entries;\n  }\n else {\n    HashSet<String> innerTypePaths=new HashSet<>();\n    for (    Container.Entry e : entries) {\n      if (!e.isDirectory() && potentialOuterTypePaths.contains(e.getPath())) {\n        populateInnerTypePaths(innerTypePaths,e);\n      }\n    }\n    filtredSubEntries=new ArrayList<>();\n    for (    Container.Entry e : entries) {\n      if (!e.isDirectory()) {\n        String p=e.getPath();\n        if (p.toLowerCase().endsWith(\".class\")) {\n          int indexDollar=p.lastIndexOf('$');\n          if (indexDollar != -1) {\n            int indexSeparator=p.lastIndexOf('/');\n            if (indexDollar > indexSeparator) {\n              if (innerTypePaths.contains(p)) {\n                continue;\n              }\n else {\n                populateInnerTypePaths(innerTypePaths,e);\n                if (innerTypePaths.contains(p)) {\n                  continue;\n                }\n              }\n            }\n          }\n        }\n      }\n      filtredSubEntries.add(e);\n    }\n  }\n  List<Container.Entry> list=new ArrayList<>(filtredSubEntries);\n  list.sort(ContainerEntryComparator.COMPARATOR);\n  return list;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 280,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1682,
        "startLineNumber" : 43,
        "startColumnNumber" : 8,
        "endLineNumber" : 85,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (potentialOuterTypePaths.size() == 0) {\n  filtredSubEntries=entries;\n}\n else {\n  HashSet<String> innerTypePaths=new HashSet<>();\n  for (  Container.Entry e : entries) {\n    if (!e.isDirectory() && potentialOuterTypePaths.contains(e.getPath())) {\n      populateInnerTypePaths(innerTypePaths,e);\n    }\n  }\n  filtredSubEntries=new ArrayList<>();\n  for (  Container.Entry e : entries) {\n    if (!e.isDirectory()) {\n      String p=e.getPath();\n      if (p.toLowerCase().endsWith(\".class\")) {\n        int indexDollar=p.lastIndexOf('$');\n        if (indexDollar != -1) {\n          int indexSeparator=p.lastIndexOf('/');\n          if (indexDollar > indexSeparator) {\n            if (innerTypePaths.contains(p)) {\n              continue;\n            }\n else {\n              populateInnerTypePaths(innerTypePaths,e);\n              if (innerTypePaths.contains(p)) {\n                continue;\n              }\n            }\n          }\n        }\n      }\n    }\n    filtredSubEntries.add(e);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 141,
      "astHeight" : 17
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 35,
    "startLineNumber" : 43,
    "startColumnNumber" : 12,
    "endLineNumber" : 43,
    "endColumnNumber" : 47
  } ],
  "layoutRelationDataList" : [ ]
}