{
  "id" : 272,
  "expression" : "new Supplier<List<Integer>>(){\n  @Override public List<Integer> get(){\n    return new ArrayList<Integer>();\n  }\n}\n",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/internal/operators/flowable/FlowableScanTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new Supplier<List<Integer>>(){\n  @Override public List<Integer> get(){\n    return new ArrayList<Integer>();\n  }\n}\n",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 236,
      "startLineNumber" : 257,
      "startColumnNumber" : 25,
      "endLineNumber" : 264,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 28,
    "astHeight" : 9,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 519,
        "startLineNumber" : 256,
        "startColumnNumber" : 36,
        "endLineNumber" : 271,
        "endColumnNumber" : 18
      },
      "nodeContext" : "Flowable.range(1,10).collect(new Supplier<List<Integer>>(){\n  @Override public List<Integer> get(){\n    return new ArrayList<Integer>();\n  }\n}\n,new BiConsumer<List<Integer>,Integer>(){\n  @Override public void accept(  List<Integer> list,  Integer t2){\n    list.add(t2);\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 70,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 531,
        "startLineNumber" : 256,
        "startColumnNumber" : 36,
        "endLineNumber" : 271,
        "endColumnNumber" : 30
      },
      "nodeContext" : "Flowable.range(1,10).collect(new Supplier<List<Integer>>(){\n  @Override public List<Integer> get(){\n    return new ArrayList<Integer>();\n  }\n}\n,new BiConsumer<List<Integer>,Integer>(){\n  @Override public void accept(  List<Integer> list,  Integer t2){\n    list.add(t2);\n  }\n}\n).takeLast(1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 73,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 535,
        "startLineNumber" : 256,
        "startColumnNumber" : 32,
        "endLineNumber" : 271,
        "endColumnNumber" : 30
      },
      "nodeContext" : "o=Flowable.range(1,10).collect(new Supplier<List<Integer>>(){\n  @Override public List<Integer> get(){\n    return new ArrayList<Integer>();\n  }\n}\n,new BiConsumer<List<Integer>,Integer>(){\n  @Override public void accept(  List<Integer> list,  Integer t2){\n    list.add(t2);\n  }\n}\n).takeLast(1)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 75,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 560,
        "startLineNumber" : 256,
        "startColumnNumber" : 8,
        "endLineNumber" : 271,
        "endColumnNumber" : 31
      },
      "nodeContext" : "Flowable<List<Integer>> o=Flowable.range(1,10).collect(new Supplier<List<Integer>>(){\n  @Override public List<Integer> get(){\n    return new ArrayList<Integer>();\n  }\n}\n,new BiConsumer<List<Integer>,Integer>(){\n  @Override public void accept(  List<Integer> list,  Integer t2){\n    list.add(t2);\n  }\n}\n).takeLast(1);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 84,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 768,
        "startLineNumber" : 255,
        "startColumnNumber" : 34,
        "endLineNumber" : 275,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Flowable<List<Integer>> o=Flowable.range(1,10).collect(new Supplier<List<Integer>>(){\n    @Override public List<Integer> get(){\n      return new ArrayList<Integer>();\n    }\n  }\n,new BiConsumer<List<Integer>,Integer>(){\n    @Override public void accept(    List<Integer> list,    Integer t2){\n      list.add(t2);\n    }\n  }\n).takeLast(1);\n  assertEquals(Arrays.asList(1,2,3,4,5,6,7,8,9,10),o.toBlocking().single());\n  assertEquals(Arrays.asList(1,2,3,4,5,6,7,8,9,10),o.toBlocking().single());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 127,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 902,
        "startLineNumber" : 251,
        "startColumnNumber" : 4,
        "endLineNumber" : 275,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * This uses the public API collect which uses scan under the covers.\n */\n@Test public void testSeedFactory(){\n  Flowable<List<Integer>> o=Flowable.range(1,10).collect(new Supplier<List<Integer>>(){\n    @Override public List<Integer> get(){\n      return new ArrayList<Integer>();\n    }\n  }\n,new BiConsumer<List<Integer>,Integer>(){\n    @Override public void accept(    List<Integer> list,    Integer t2){\n      list.add(t2);\n    }\n  }\n).takeLast(1);\n  assertEquals(Arrays.asList(1,2,3,4,5,6,7,8,9,10),o.toBlocking().single());\n  assertEquals(Arrays.asList(1,2,3,4,5,6,7,8,9,10),o.toBlocking().single());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 134,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 519,
        "startLineNumber" : 256,
        "startColumnNumber" : 36,
        "endLineNumber" : 271,
        "endColumnNumber" : 18
      },
      "nodeContext" : "Flowable.range(1,10).collect(new Supplier<List<Integer>>(){\n  @Override public List<Integer> get(){\n    return new ArrayList<Integer>();\n  }\n}\n,new BiConsumer<List<Integer>,Integer>(){\n  @Override public void accept(  List<Integer> list,  Integer t2){\n    list.add(t2);\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 70,
      "astHeight" : 10
    },
    "tokenLength" : 5,
    "type" : ""
  } ],
  "positionList" : [ {
    "charLength" : 236,
    "startLineNumber" : 257,
    "startColumnNumber" : 25,
    "endLineNumber" : 264,
    "endColumnNumber" : 17
  } ],
  "layoutRelationDataList" : [ ]
}