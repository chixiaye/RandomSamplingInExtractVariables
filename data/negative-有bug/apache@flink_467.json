{
  "id" : 467,
  "expression" : "PluginLoader.create(pluginDescriptorA,PARENT_CLASS_LOADER,new String[0])",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-tests/src/test/java/org/apache/flink/test/plugin/PluginLoaderTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "PluginLoader.create(pluginDescriptorA,PARENT_CLASS_LOADER,new String[0])",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 74,
      "startLineNumber" : 74,
      "startColumnNumber" : 16,
      "endLineNumber" : 74,
      "endColumnNumber" : 90
    },
    "astNodeNumber" : 11,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 112,
        "startLineNumber" : 73,
        "startColumnNumber" : 27,
        "endLineNumber" : 74,
        "endColumnNumber" : 90
      },
      "nodeContext" : "secondPluginLoaderA=PluginLoader.create(pluginDescriptorA,PARENT_CLASS_LOADER,new String[0])",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 91
      },
      "nodeContext" : "final PluginLoader secondPluginLoaderA=PluginLoader.create(pluginDescriptorA,PARENT_CLASS_LOADER,new String[0]);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2340,
        "startLineNumber" : 37,
        "startColumnNumber" : 53,
        "endLineNumber" : 84,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final URL classpathA=createPluginJarURLFromString(PLUGIN_A);\n  String[] parentPatterns={TestSpi.class.getName(),OtherTestSpi.class.getName()};\n  PluginDescriptor pluginDescriptorA=new PluginDescriptor(\"A\",new URL[]{classpathA},parentPatterns);\n  URLClassLoader pluginClassLoaderA=PluginLoader.createPluginClassLoader(pluginDescriptorA,PARENT_CLASS_LOADER,new String[0]);\n  Assert.assertNotEquals(PARENT_CLASS_LOADER,pluginClassLoaderA);\n  final PluginLoader pluginLoaderA=new PluginLoader(\"test-plugin\",pluginClassLoaderA);\n  Iterator<TestSpi> testSpiIteratorA=pluginLoaderA.load(TestSpi.class);\n  Assert.assertTrue(testSpiIteratorA.hasNext());\n  TestSpi testSpiA=testSpiIteratorA.next();\n  Assert.assertFalse(testSpiIteratorA.hasNext());\n  Assert.assertNotNull(testSpiA.testMethod());\n  Assert.assertEquals(TestServiceA.class.getCanonicalName(),testSpiA.getClass().getCanonicalName());\n  Assert.assertEquals(pluginClassLoaderA,testSpiA.getClassLoader());\n  Assert.assertEquals(pluginClassLoaderA,testSpiA.getClass().getClassLoader());\n  Assert.assertFalse(testSpiA instanceof TestServiceA);\n  final PluginLoader secondPluginLoaderA=PluginLoader.create(pluginDescriptorA,PARENT_CLASS_LOADER,new String[0]);\n  TestSpi secondTestSpiA=secondPluginLoaderA.load(TestSpi.class).next();\n  Assert.assertNotNull(secondTestSpiA.testMethod());\n  Assert.assertEquals(testSpiA.getClass().getCanonicalName(),secondTestSpiA.getClass().getCanonicalName());\n  Assert.assertNotEquals(testSpiA.getClass(),secondTestSpiA.getClass());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 222,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2399,
        "startLineNumber" : 36,
        "startColumnNumber" : 4,
        "endLineNumber" : 84,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testPluginLoading() throws Exception {\n  final URL classpathA=createPluginJarURLFromString(PLUGIN_A);\n  String[] parentPatterns={TestSpi.class.getName(),OtherTestSpi.class.getName()};\n  PluginDescriptor pluginDescriptorA=new PluginDescriptor(\"A\",new URL[]{classpathA},parentPatterns);\n  URLClassLoader pluginClassLoaderA=PluginLoader.createPluginClassLoader(pluginDescriptorA,PARENT_CLASS_LOADER,new String[0]);\n  Assert.assertNotEquals(PARENT_CLASS_LOADER,pluginClassLoaderA);\n  final PluginLoader pluginLoaderA=new PluginLoader(\"test-plugin\",pluginClassLoaderA);\n  Iterator<TestSpi> testSpiIteratorA=pluginLoaderA.load(TestSpi.class);\n  Assert.assertTrue(testSpiIteratorA.hasNext());\n  TestSpi testSpiA=testSpiIteratorA.next();\n  Assert.assertFalse(testSpiIteratorA.hasNext());\n  Assert.assertNotNull(testSpiA.testMethod());\n  Assert.assertEquals(TestServiceA.class.getCanonicalName(),testSpiA.getClass().getCanonicalName());\n  Assert.assertEquals(pluginClassLoaderA,testSpiA.getClassLoader());\n  Assert.assertEquals(pluginClassLoaderA,testSpiA.getClass().getClassLoader());\n  Assert.assertFalse(testSpiA instanceof TestServiceA);\n  final PluginLoader secondPluginLoaderA=PluginLoader.create(pluginDescriptorA,PARENT_CLASS_LOADER,new String[0]);\n  TestSpi secondTestSpiA=secondPluginLoaderA.load(TestSpi.class).next();\n  Assert.assertNotNull(secondTestSpiA.testMethod());\n  Assert.assertEquals(testSpiA.getClass().getCanonicalName(),secondTestSpiA.getClass().getCanonicalName());\n  Assert.assertNotEquals(testSpiA.getClass(),secondTestSpiA.getClass());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 230,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 112,
        "startLineNumber" : 73,
        "startColumnNumber" : 27,
        "endLineNumber" : 74,
        "endColumnNumber" : 90
      },
      "nodeContext" : "secondPluginLoaderA=PluginLoader.create(pluginDescriptorA,PARENT_CLASS_LOADER,new String[0])",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 8,
    "type" : "org.apache.flink.core.plugin.PluginLoader"
  } ],
  "positionList" : [ {
    "charLength" : 74,
    "startLineNumber" : 74,
    "startColumnNumber" : 16,
    "endLineNumber" : 74,
    "endColumnNumber" : 90
  } ],
  "layoutRelationDataList" : [ ]
}