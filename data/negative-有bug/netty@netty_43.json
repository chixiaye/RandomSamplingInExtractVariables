{
  "id" : 43,
  "expression" : "\"Meow\".getBytes()",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/handler/src/test/java/io/netty/handler/pcap/PcapWriteHandlerTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Meow\".getBytes()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 75,
      "startColumnNumber" : 70,
      "endLineNumber" : 75,
      "endColumnNumber" : 87
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 75,
        "startColumnNumber" : 47,
        "endLineNumber" : 75,
        "endColumnNumber" : 88
      },
      "nodeContext" : "Unpooled.wrappedBuffer(\"Meow\".getBytes())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 75,
        "startColumnNumber" : 19,
        "endLineNumber" : 75,
        "endColumnNumber" : 89
      },
      "nodeContext" : "channelClient.writeAndFlush(Unpooled.wrappedBuffer(\"Meow\".getBytes()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 75,
        "startColumnNumber" : 19,
        "endLineNumber" : 75,
        "endColumnNumber" : 96
      },
      "nodeContext" : "channelClient.writeAndFlush(Unpooled.wrappedBuffer(\"Meow\".getBytes())).sync()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 75,
        "startColumnNumber" : 19,
        "endLineNumber" : 75,
        "endColumnNumber" : 108
      },
      "nodeContext" : "channelClient.writeAndFlush(Unpooled.wrappedBuffer(\"Meow\".getBytes())).sync().isSuccess()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 75,
        "endColumnNumber" : 109
      },
      "nodeContext" : "assertTrue(channelClient.writeAndFlush(Unpooled.wrappedBuffer(\"Meow\".getBytes())).sync().isSuccess())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 75,
        "endColumnNumber" : 110
      },
      "nodeContext" : "assertTrue(channelClient.writeAndFlush(Unpooled.wrappedBuffer(\"Meow\".getBytes())).sync().isSuccess());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4999,
        "startLineNumber" : 45,
        "startColumnNumber" : 41,
        "endLineNumber" : 138,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ByteBuf byteBuf=Unpooled.buffer();\n  InetSocketAddress srvReqAddr=new InetSocketAddress(\"127.0.0.1\",0);\n  InetSocketAddress cltReqAddr=new InetSocketAddress(\"127.0.0.1\",0);\n  EventLoopGroup eventLoopGroup=new MultithreadEventLoopGroup(2,NioHandler.newFactory());\n  Bootstrap server=new Bootstrap().group(eventLoopGroup).channel(NioDatagramChannel.class).handler(new SimpleChannelInboundHandler<DatagramPacket>(){\n    @Override protected void messageReceived(    ChannelHandlerContext ctx,    DatagramPacket msg){\n    }\n  }\n);\n  Channel channelServer=server.bind(srvReqAddr).get();\n  Bootstrap client=new Bootstrap().group(eventLoopGroup).channel(NioDatagramChannel.class).handler(new PcapWriteHandler(new ByteBufOutputStream(byteBuf)));\n  Channel channelClient=client.connect(channelServer.localAddress(),cltReqAddr).get();\n  assertTrue(channelClient.writeAndFlush(Unpooled.wrappedBuffer(\"Meow\".getBytes())).sync().isSuccess());\n  assertTrue(eventLoopGroup.shutdownGracefully().sync().isSuccess());\n  assertEquals(0xa1b2c3d4,byteBuf.readInt());\n  assertEquals(2,byteBuf.readShort());\n  assertEquals(4,byteBuf.readShort());\n  assertEquals(0,byteBuf.readInt());\n  assertEquals(0,byteBuf.readInt());\n  assertEquals(0xffff,byteBuf.readInt());\n  assertEquals(1,byteBuf.readInt());\n  byteBuf.readInt();\n  byteBuf.readInt();\n  assertEquals(46,byteBuf.readInt());\n  assertEquals(46,byteBuf.readInt());\n  ByteBuf ethernetPacket=byteBuf.readBytes(46);\n  ByteBuf dstMac=ethernetPacket.readBytes(6);\n  ByteBuf srcMac=ethernetPacket.readBytes(6);\n  assertArrayEquals(new byte[]{0,0,94,0,83,-1},ByteBufUtil.getBytes(dstMac));\n  assertArrayEquals(new byte[]{0,0,94,0,83,0},ByteBufUtil.getBytes(srcMac));\n  assertEquals(0x0800,ethernetPacket.readShort());\n  ByteBuf ipv4Packet=ethernetPacket.readBytes(32);\n  assertEquals(0x45,ipv4Packet.readByte());\n  assertEquals(0x00,ipv4Packet.readByte());\n  assertEquals(32,ipv4Packet.readShort());\n  assertEquals(0x0000,ipv4Packet.readShort());\n  assertEquals(0x0000,ipv4Packet.readShort());\n  assertEquals((byte)0xff,ipv4Packet.readByte());\n  assertEquals((byte)17,ipv4Packet.readByte());\n  assertEquals(0,ipv4Packet.readShort());\n  InetSocketAddress localAddr=(InetSocketAddress)channelClient.remoteAddress();\n  assertEquals(NetUtil.ipv4AddressToInt((Inet4Address)localAddr.getAddress()),ipv4Packet.readInt());\n  InetSocketAddress remoteAddr=(InetSocketAddress)channelClient.localAddress();\n  assertEquals(NetUtil.ipv4AddressToInt((Inet4Address)remoteAddr.getAddress()),ipv4Packet.readInt());\n  ByteBuf udpPacket=ipv4Packet.readBytes(12);\n  assertEquals(remoteAddr.getPort() & 0xffff,udpPacket.readUnsignedShort());\n  assertEquals(localAddr.getPort() & 0xffff,udpPacket.readUnsignedShort());\n  assertEquals(12,udpPacket.readShort());\n  assertEquals(0x0001,udpPacket.readShort());\n  ByteBuf payload=udpPacket.readBytes(4);\n  assertArrayEquals(\"Meow\".getBytes(CharsetUtil.UTF_8),ByteBufUtil.getBytes(payload));\n  assertTrue(dstMac.release());\n  assertTrue(srcMac.release());\n  assertTrue(payload.release());\n  assertTrue(byteBuf.release());\n  assertTrue(ethernetPacket.release());\n  assertTrue(ipv4Packet.release());\n  assertTrue(udpPacket.release());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 529,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5047,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 138,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void udpV4() throws Exception {\n  ByteBuf byteBuf=Unpooled.buffer();\n  InetSocketAddress srvReqAddr=new InetSocketAddress(\"127.0.0.1\",0);\n  InetSocketAddress cltReqAddr=new InetSocketAddress(\"127.0.0.1\",0);\n  EventLoopGroup eventLoopGroup=new MultithreadEventLoopGroup(2,NioHandler.newFactory());\n  Bootstrap server=new Bootstrap().group(eventLoopGroup).channel(NioDatagramChannel.class).handler(new SimpleChannelInboundHandler<DatagramPacket>(){\n    @Override protected void messageReceived(    ChannelHandlerContext ctx,    DatagramPacket msg){\n    }\n  }\n);\n  Channel channelServer=server.bind(srvReqAddr).get();\n  Bootstrap client=new Bootstrap().group(eventLoopGroup).channel(NioDatagramChannel.class).handler(new PcapWriteHandler(new ByteBufOutputStream(byteBuf)));\n  Channel channelClient=client.connect(channelServer.localAddress(),cltReqAddr).get();\n  assertTrue(channelClient.writeAndFlush(Unpooled.wrappedBuffer(\"Meow\".getBytes())).sync().isSuccess());\n  assertTrue(eventLoopGroup.shutdownGracefully().sync().isSuccess());\n  assertEquals(0xa1b2c3d4,byteBuf.readInt());\n  assertEquals(2,byteBuf.readShort());\n  assertEquals(4,byteBuf.readShort());\n  assertEquals(0,byteBuf.readInt());\n  assertEquals(0,byteBuf.readInt());\n  assertEquals(0xffff,byteBuf.readInt());\n  assertEquals(1,byteBuf.readInt());\n  byteBuf.readInt();\n  byteBuf.readInt();\n  assertEquals(46,byteBuf.readInt());\n  assertEquals(46,byteBuf.readInt());\n  ByteBuf ethernetPacket=byteBuf.readBytes(46);\n  ByteBuf dstMac=ethernetPacket.readBytes(6);\n  ByteBuf srcMac=ethernetPacket.readBytes(6);\n  assertArrayEquals(new byte[]{0,0,94,0,83,-1},ByteBufUtil.getBytes(dstMac));\n  assertArrayEquals(new byte[]{0,0,94,0,83,0},ByteBufUtil.getBytes(srcMac));\n  assertEquals(0x0800,ethernetPacket.readShort());\n  ByteBuf ipv4Packet=ethernetPacket.readBytes(32);\n  assertEquals(0x45,ipv4Packet.readByte());\n  assertEquals(0x00,ipv4Packet.readByte());\n  assertEquals(32,ipv4Packet.readShort());\n  assertEquals(0x0000,ipv4Packet.readShort());\n  assertEquals(0x0000,ipv4Packet.readShort());\n  assertEquals((byte)0xff,ipv4Packet.readByte());\n  assertEquals((byte)17,ipv4Packet.readByte());\n  assertEquals(0,ipv4Packet.readShort());\n  InetSocketAddress localAddr=(InetSocketAddress)channelClient.remoteAddress();\n  assertEquals(NetUtil.ipv4AddressToInt((Inet4Address)localAddr.getAddress()),ipv4Packet.readInt());\n  InetSocketAddress remoteAddr=(InetSocketAddress)channelClient.localAddress();\n  assertEquals(NetUtil.ipv4AddressToInt((Inet4Address)remoteAddr.getAddress()),ipv4Packet.readInt());\n  ByteBuf udpPacket=ipv4Packet.readBytes(12);\n  assertEquals(remoteAddr.getPort() & 0xffff,udpPacket.readUnsignedShort());\n  assertEquals(localAddr.getPort() & 0xffff,udpPacket.readUnsignedShort());\n  assertEquals(12,udpPacket.readShort());\n  assertEquals(0x0001,udpPacket.readShort());\n  ByteBuf payload=udpPacket.readBytes(4);\n  assertArrayEquals(\"Meow\".getBytes(CharsetUtil.UTF_8),ByteBufUtil.getBytes(payload));\n  assertTrue(dstMac.release());\n  assertTrue(srcMac.release());\n  assertTrue(payload.release());\n  assertTrue(byteBuf.release());\n  assertTrue(ethernetPacket.release());\n  assertTrue(ipv4Packet.release());\n  assertTrue(udpPacket.release());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 537,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 75,
        "endColumnNumber" : 110
      },
      "nodeContext" : "assertTrue(channelClient.writeAndFlush(Unpooled.wrappedBuffer(\"Meow\".getBytes())).sync().isSuccess());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 8
    },
    "tokenLength" : 2,
    "type" : "byte[]"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 75,
    "startColumnNumber" : 70,
    "endLineNumber" : 75,
    "endColumnNumber" : 87
  } ],
  "layoutRelationDataList" : [ ]
}