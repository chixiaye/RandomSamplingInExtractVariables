{
  "id" : 37,
  "expression" : "bytecode[0]",
  "projectName" : "iluwatar@java-design-patterns",
  "commitID" : "428efc7d53449a51d25dfda4141742629ecbb0b2",
  "filePath" : "/bytecode/src/test/java/com/iluwatar/bytecode/util/InstructionConverterUtilTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "bytecode[0]",
    "nodeType" : "ArrayAccess",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 52,
      "startColumnNumber" : 63,
      "endLineNumber" : 52,
      "endColumnNumber" : 74
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 52,
        "startColumnNumber" : 4,
        "endLineNumber" : 52,
        "endColumnNumber" : 75
      },
      "nodeContext" : "Assertions.assertEquals(Instruction.LITERAL.getIntValue(),bytecode[0])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 52,
        "startColumnNumber" : 4,
        "endLineNumber" : 52,
        "endColumnNumber" : 76
      },
      "nodeContext" : "Assertions.assertEquals(Instruction.LITERAL.getIntValue(),bytecode[0]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1025,
        "startLineNumber" : 45,
        "startColumnNumber" : 33,
        "endLineNumber" : 62,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  var instructions=\"LITERAL 35 SET_HEALTH SET_WISDOM SET_AGILITY PLAY_SOUND\" + \" SPAWN_PARTICLES GET_HEALTH ADD DIVIDE\";\n  var bytecode=InstructionConverterUtil.convertToByteCode(instructions);\n  Assertions.assertEquals(10,bytecode.length);\n  Assertions.assertEquals(Instruction.LITERAL.getIntValue(),bytecode[0]);\n  Assertions.assertEquals(35,bytecode[1]);\n  Assertions.assertEquals(Instruction.SET_HEALTH.getIntValue(),bytecode[2]);\n  Assertions.assertEquals(Instruction.SET_WISDOM.getIntValue(),bytecode[3]);\n  Assertions.assertEquals(Instruction.SET_AGILITY.getIntValue(),bytecode[4]);\n  Assertions.assertEquals(Instruction.PLAY_SOUND.getIntValue(),bytecode[5]);\n  Assertions.assertEquals(Instruction.SPAWN_PARTICLES.getIntValue(),bytecode[6]);\n  Assertions.assertEquals(Instruction.GET_HEALTH.getIntValue(),bytecode[7]);\n  Assertions.assertEquals(Instruction.ADD.getIntValue(),bytecode[8]);\n  Assertions.assertEquals(Instruction.DIVIDE.getIntValue(),bytecode[9]);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 142,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1064,
        "startLineNumber" : 44,
        "startColumnNumber" : 2,
        "endLineNumber" : 62,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testInstructions(){\n  var instructions=\"LITERAL 35 SET_HEALTH SET_WISDOM SET_AGILITY PLAY_SOUND\" + \" SPAWN_PARTICLES GET_HEALTH ADD DIVIDE\";\n  var bytecode=InstructionConverterUtil.convertToByteCode(instructions);\n  Assertions.assertEquals(10,bytecode.length);\n  Assertions.assertEquals(Instruction.LITERAL.getIntValue(),bytecode[0]);\n  Assertions.assertEquals(35,bytecode[1]);\n  Assertions.assertEquals(Instruction.SET_HEALTH.getIntValue(),bytecode[2]);\n  Assertions.assertEquals(Instruction.SET_WISDOM.getIntValue(),bytecode[3]);\n  Assertions.assertEquals(Instruction.SET_AGILITY.getIntValue(),bytecode[4]);\n  Assertions.assertEquals(Instruction.PLAY_SOUND.getIntValue(),bytecode[5]);\n  Assertions.assertEquals(Instruction.SPAWN_PARTICLES.getIntValue(),bytecode[6]);\n  Assertions.assertEquals(Instruction.GET_HEALTH.getIntValue(),bytecode[7]);\n  Assertions.assertEquals(Instruction.ADD.getIntValue(),bytecode[8]);\n  Assertions.assertEquals(Instruction.DIVIDE.getIntValue(),bytecode[9]);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 148,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 52,
        "startColumnNumber" : 4,
        "endLineNumber" : 52,
        "endColumnNumber" : 76
      },
      "nodeContext" : "Assertions.assertEquals(Instruction.LITERAL.getIntValue(),bytecode[0]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 52,
    "startColumnNumber" : 63,
    "endLineNumber" : 52,
    "endColumnNumber" : 74
  } ],
  "layoutRelationDataList" : [ ]
}