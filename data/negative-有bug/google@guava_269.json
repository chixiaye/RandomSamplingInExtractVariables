{
  "id" : 269,
  "expression" : "interfaceType",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/guava/src/com/google/common/util/concurrent/TimeLimiter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "interfaceType",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 127,
      "startColumnNumber" : 28,
      "endLineNumber" : 127,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 127,
        "startColumnNumber" : 11,
        "endLineNumber" : 127,
        "endColumnNumber" : 91
      },
      "nodeContext" : "newProxy(target,interfaceType,toNanosSaturated(timeout),TimeUnit.NANOSECONDS)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 127,
        "endColumnNumber" : 92
      },
      "nodeContext" : "return newProxy(target,interfaceType,toNanosSaturated(timeout),TimeUnit.NANOSECONDS);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 126,
        "startColumnNumber" : 77,
        "endLineNumber" : 128,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  return newProxy(target,interfaceType,toNanosSaturated(timeout),TimeUnit.NANOSECONDS);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2238,
        "startLineNumber" : 87,
        "startColumnNumber" : 2,
        "endLineNumber" : 128,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Returns an instance of  {@code interfaceType} that delegates all method calls to the {@code target} object, enforcing the specified time limit on each call. This time-limited delegationis also performed for calls to  {@link Object#equals},  {@link Object#hashCode}, and  {@link Object#toString}. <p>If the target method call finishes before the limit is reached, the return value or exception is propagated to the caller exactly as-is. If, on the other hand, the time limit is reached, the proxy will attempt to abort the call to the target, and will throw an  {@link UncheckedTimeoutException} to the caller.<p>It is important to note that the primary purpose of the proxy object is to return control to the caller when the timeout elapses; aborting the target method call is of secondary concern. The particular nature and strength of the guarantees made by the proxy is implementation-dependent. However, it is important that each of the methods on the target object behaves appropriately when its thread is interrupted. <p>For example, to return the value of  {@code target.someMethod()}, but substitute  {@code DEFAULT_VALUE} if this method call takes over 50 ms, you can use this code:<pre> TimeLimiter limiter = . . .; TargetType proxy = limiter.newProxy(target, TargetType.class, Duration.ofMillis(50)); try { return proxy.someMethod(); } catch (UncheckedTimeoutException e) { return DEFAULT_VALUE; } </pre>\n * @param target the object to proxy\n * @param interfaceType the interface you wish the returned proxy to implement\n * @param timeout the maximum length of time that callers are willing to wait on each method callto the proxy\n * @return a time-limiting proxy\n * @throws IllegalArgumentException if {@code interfaceType} is a regular class, enum, orannotation type, rather than an interface\n * @since 28.0\n */\ndefault <T>T newProxy(T target,Class<T> interfaceType,Duration timeout){\n  return newProxy(target,interfaceType,toNanosSaturated(timeout),TimeUnit.NANOSECONDS);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 35,
      "astHeight" : 6
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 127,
        "endColumnNumber" : 92
      },
      "nodeContext" : "return newProxy(target,interfaceType,toNanosSaturated(timeout),TimeUnit.NANOSECONDS);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<T>"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 127,
    "startColumnNumber" : 28,
    "endLineNumber" : 127,
    "endColumnNumber" : 41
  } ],
  "layoutRelationDataList" : [ ]
}