{
  "id" : 205,
  "expression" : "log",
  "projectName" : "thingsboard@thingsboard",
  "commitID" : "7c2b3a9fbf84cc58aa7546029c5c7c10a662c55a",
  "filePath" : "/application/src/main/java/org/thingsboard/server/service/security/device/DefaultDeviceAuthService.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "log",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 44,
      "startColumnNumber" : 8,
      "endLineNumber" : 44,
      "endColumnNumber" : 11
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 44,
        "startColumnNumber" : 8,
        "endLineNumber" : 44,
        "endColumnNumber" : 81
      },
      "nodeContext" : "log.trace(\"Lookup device credentials using filter {}\",credentialsFilter)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 44,
        "startColumnNumber" : 8,
        "endLineNumber" : 44,
        "endColumnNumber" : 82
      },
      "nodeContext" : "log.trace(\"Lookup device credentials using filter {}\",credentialsFilter);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1354,
        "startLineNumber" : 43,
        "startColumnNumber" : 79,
        "endLineNumber" : 68,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  log.trace(\"Lookup device credentials using filter {}\",credentialsFilter);\n  DeviceCredentials credentials=deviceCredentialsService.findDeviceCredentialsByCredentialsId(credentialsFilter.getCredentialsId());\n  if (credentials != null) {\n    log.trace(\"Credentials found {}\",credentials);\n    if (credentials.getCredentialsType() == credentialsFilter.getCredentialsType()) {\nswitch (credentials.getCredentialsType()) {\ncase ACCESS_TOKEN:        return DeviceAuthResult.of(credentials.getDeviceId());\ncase X509_CERTIFICATE:      return DeviceAuthResult.of(credentials.getDeviceId());\ncase LWM2M_CREDENTIALS:    return DeviceAuthResult.of(credentials.getDeviceId());\ndefault:  return DeviceAuthResult.of(\"Credentials Type is not supported yet!\");\n}\n}\n else {\nreturn DeviceAuthResult.of(\"Credentials Type mismatch!\");\n}\n}\n else {\nlog.trace(\"Credentials not found!\");\nreturn DeviceAuthResult.of(\"Credentials Not Found!\");\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 92,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1443,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 68,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public DeviceAuthResult process(DeviceCredentialsFilter credentialsFilter){\n  log.trace(\"Lookup device credentials using filter {}\",credentialsFilter);\n  DeviceCredentials credentials=deviceCredentialsService.findDeviceCredentialsByCredentialsId(credentialsFilter.getCredentialsId());\n  if (credentials != null) {\n    log.trace(\"Credentials found {}\",credentials);\n    if (credentials.getCredentialsType() == credentialsFilter.getCredentialsType()) {\nswitch (credentials.getCredentialsType()) {\ncase ACCESS_TOKEN:        return DeviceAuthResult.of(credentials.getDeviceId());\ncase X509_CERTIFICATE:      return DeviceAuthResult.of(credentials.getDeviceId());\ncase LWM2M_CREDENTIALS:    return DeviceAuthResult.of(credentials.getDeviceId());\ndefault:  return DeviceAuthResult.of(\"Credentials Type is not supported yet!\");\n}\n}\n else {\nreturn DeviceAuthResult.of(\"Credentials Type mismatch!\");\n}\n}\n else {\nlog.trace(\"Credentials not found!\");\nreturn DeviceAuthResult.of(\"Credentials Not Found!\");\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 103,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 44,
        "startColumnNumber" : 8,
        "endLineNumber" : 44,
        "endColumnNumber" : 82
      },
      "nodeContext" : "log.trace(\"Lookup device credentials using filter {}\",credentialsFilter);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "log",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 47,
      "startColumnNumber" : 12,
      "endLineNumber" : 47,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 47,
        "startColumnNumber" : 12,
        "endLineNumber" : 47,
        "endColumnNumber" : 58
      },
      "nodeContext" : "log.trace(\"Credentials found {}\",credentials)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 47,
        "startColumnNumber" : 12,
        "endLineNumber" : 47,
        "endColumnNumber" : 59
      },
      "nodeContext" : "log.trace(\"Credentials found {}\",credentials);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 957,
        "startLineNumber" : 46,
        "startColumnNumber" : 33,
        "endLineNumber" : 64,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  log.trace(\"Credentials found {}\",credentials);\n  if (credentials.getCredentialsType() == credentialsFilter.getCredentialsType()) {\nswitch (credentials.getCredentialsType()) {\ncase ACCESS_TOKEN:      return DeviceAuthResult.of(credentials.getDeviceId());\ncase X509_CERTIFICATE:    return DeviceAuthResult.of(credentials.getDeviceId());\ncase LWM2M_CREDENTIALS:  return DeviceAuthResult.of(credentials.getDeviceId());\ndefault:return DeviceAuthResult.of(\"Credentials Type is not supported yet!\");\n}\n}\n else {\nreturn DeviceAuthResult.of(\"Credentials Type mismatch!\");\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 59,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1114,
        "startLineNumber" : 46,
        "startColumnNumber" : 8,
        "endLineNumber" : 67,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (credentials != null) {\n  log.trace(\"Credentials found {}\",credentials);\n  if (credentials.getCredentialsType() == credentialsFilter.getCredentialsType()) {\nswitch (credentials.getCredentialsType()) {\ncase ACCESS_TOKEN:      return DeviceAuthResult.of(credentials.getDeviceId());\ncase X509_CERTIFICATE:    return DeviceAuthResult.of(credentials.getDeviceId());\ncase LWM2M_CREDENTIALS:  return DeviceAuthResult.of(credentials.getDeviceId());\ndefault:return DeviceAuthResult.of(\"Credentials Type is not supported yet!\");\n}\n}\n else {\nreturn DeviceAuthResult.of(\"Credentials Type mismatch!\");\n}\n}\n else {\nlog.trace(\"Credentials not found!\");\nreturn DeviceAuthResult.of(\"Credentials Not Found!\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 74,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1354,
        "startLineNumber" : 43,
        "startColumnNumber" : 79,
        "endLineNumber" : 68,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  log.trace(\"Lookup device credentials using filter {}\",credentialsFilter);\n  DeviceCredentials credentials=deviceCredentialsService.findDeviceCredentialsByCredentialsId(credentialsFilter.getCredentialsId());\n  if (credentials != null) {\n    log.trace(\"Credentials found {}\",credentials);\n    if (credentials.getCredentialsType() == credentialsFilter.getCredentialsType()) {\nswitch (credentials.getCredentialsType()) {\ncase ACCESS_TOKEN:        return DeviceAuthResult.of(credentials.getDeviceId());\ncase X509_CERTIFICATE:      return DeviceAuthResult.of(credentials.getDeviceId());\ncase LWM2M_CREDENTIALS:    return DeviceAuthResult.of(credentials.getDeviceId());\ndefault:  return DeviceAuthResult.of(\"Credentials Type is not supported yet!\");\n}\n}\n else {\nreturn DeviceAuthResult.of(\"Credentials Type mismatch!\");\n}\n}\n else {\nlog.trace(\"Credentials not found!\");\nreturn DeviceAuthResult.of(\"Credentials Not Found!\");\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 92,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1443,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 68,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public DeviceAuthResult process(DeviceCredentialsFilter credentialsFilter){\n  log.trace(\"Lookup device credentials using filter {}\",credentialsFilter);\n  DeviceCredentials credentials=deviceCredentialsService.findDeviceCredentialsByCredentialsId(credentialsFilter.getCredentialsId());\n  if (credentials != null) {\n    log.trace(\"Credentials found {}\",credentials);\n    if (credentials.getCredentialsType() == credentialsFilter.getCredentialsType()) {\nswitch (credentials.getCredentialsType()) {\ncase ACCESS_TOKEN:        return DeviceAuthResult.of(credentials.getDeviceId());\ncase X509_CERTIFICATE:      return DeviceAuthResult.of(credentials.getDeviceId());\ncase LWM2M_CREDENTIALS:    return DeviceAuthResult.of(credentials.getDeviceId());\ndefault:  return DeviceAuthResult.of(\"Credentials Type is not supported yet!\");\n}\n}\n else {\nreturn DeviceAuthResult.of(\"Credentials Type mismatch!\");\n}\n}\n else {\nlog.trace(\"Credentials not found!\");\nreturn DeviceAuthResult.of(\"Credentials Not Found!\");\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 103,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 47,
        "startColumnNumber" : 12,
        "endLineNumber" : 47,
        "endColumnNumber" : 59
      },
      "nodeContext" : "log.trace(\"Credentials found {}\",credentials);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "log",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 65,
      "startColumnNumber" : 12,
      "endLineNumber" : 65,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 65,
        "startColumnNumber" : 12,
        "endLineNumber" : 65,
        "endColumnNumber" : 47
      },
      "nodeContext" : "log.trace(\"Credentials not found!\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 65,
        "startColumnNumber" : 12,
        "endLineNumber" : 65,
        "endColumnNumber" : 48
      },
      "nodeContext" : "log.trace(\"Credentials not found!\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 126,
        "startLineNumber" : 64,
        "startColumnNumber" : 15,
        "endLineNumber" : 67,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  log.trace(\"Credentials not found!\");\n  return DeviceAuthResult.of(\"Credentials Not Found!\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1114,
        "startLineNumber" : 46,
        "startColumnNumber" : 8,
        "endLineNumber" : 67,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (credentials != null) {\n  log.trace(\"Credentials found {}\",credentials);\n  if (credentials.getCredentialsType() == credentialsFilter.getCredentialsType()) {\nswitch (credentials.getCredentialsType()) {\ncase ACCESS_TOKEN:      return DeviceAuthResult.of(credentials.getDeviceId());\ncase X509_CERTIFICATE:    return DeviceAuthResult.of(credentials.getDeviceId());\ncase LWM2M_CREDENTIALS:  return DeviceAuthResult.of(credentials.getDeviceId());\ndefault:return DeviceAuthResult.of(\"Credentials Type is not supported yet!\");\n}\n}\n else {\nreturn DeviceAuthResult.of(\"Credentials Type mismatch!\");\n}\n}\n else {\nlog.trace(\"Credentials not found!\");\nreturn DeviceAuthResult.of(\"Credentials Not Found!\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 74,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1354,
        "startLineNumber" : 43,
        "startColumnNumber" : 79,
        "endLineNumber" : 68,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  log.trace(\"Lookup device credentials using filter {}\",credentialsFilter);\n  DeviceCredentials credentials=deviceCredentialsService.findDeviceCredentialsByCredentialsId(credentialsFilter.getCredentialsId());\n  if (credentials != null) {\n    log.trace(\"Credentials found {}\",credentials);\n    if (credentials.getCredentialsType() == credentialsFilter.getCredentialsType()) {\nswitch (credentials.getCredentialsType()) {\ncase ACCESS_TOKEN:        return DeviceAuthResult.of(credentials.getDeviceId());\ncase X509_CERTIFICATE:      return DeviceAuthResult.of(credentials.getDeviceId());\ncase LWM2M_CREDENTIALS:    return DeviceAuthResult.of(credentials.getDeviceId());\ndefault:  return DeviceAuthResult.of(\"Credentials Type is not supported yet!\");\n}\n}\n else {\nreturn DeviceAuthResult.of(\"Credentials Type mismatch!\");\n}\n}\n else {\nlog.trace(\"Credentials not found!\");\nreturn DeviceAuthResult.of(\"Credentials Not Found!\");\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 92,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1443,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 68,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public DeviceAuthResult process(DeviceCredentialsFilter credentialsFilter){\n  log.trace(\"Lookup device credentials using filter {}\",credentialsFilter);\n  DeviceCredentials credentials=deviceCredentialsService.findDeviceCredentialsByCredentialsId(credentialsFilter.getCredentialsId());\n  if (credentials != null) {\n    log.trace(\"Credentials found {}\",credentials);\n    if (credentials.getCredentialsType() == credentialsFilter.getCredentialsType()) {\nswitch (credentials.getCredentialsType()) {\ncase ACCESS_TOKEN:        return DeviceAuthResult.of(credentials.getDeviceId());\ncase X509_CERTIFICATE:      return DeviceAuthResult.of(credentials.getDeviceId());\ncase LWM2M_CREDENTIALS:    return DeviceAuthResult.of(credentials.getDeviceId());\ndefault:  return DeviceAuthResult.of(\"Credentials Type is not supported yet!\");\n}\n}\n else {\nreturn DeviceAuthResult.of(\"Credentials Type mismatch!\");\n}\n}\n else {\nlog.trace(\"Credentials not found!\");\nreturn DeviceAuthResult.of(\"Credentials Not Found!\");\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 103,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 65,
        "startColumnNumber" : 12,
        "endLineNumber" : 65,
        "endColumnNumber" : 48
      },
      "nodeContext" : "log.trace(\"Credentials not found!\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 44,
    "startColumnNumber" : 8,
    "endLineNumber" : 44,
    "endColumnNumber" : 11
  }, {
    "charLength" : 3,
    "startLineNumber" : 47,
    "startColumnNumber" : 12,
    "endLineNumber" : 47,
    "endColumnNumber" : 15
  }, {
    "charLength" : 3,
    "startLineNumber" : 65,
    "startColumnNumber" : 12,
    "endLineNumber" : 65,
    "endColumnNumber" : 15
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}