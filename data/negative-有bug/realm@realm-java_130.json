{
  "id" : 130,
  "expression" : "table.where().notEqualTo(\"date\",distantPast)",
  "projectName" : "realm@realm-java",
  "commitID" : "9da3b229a46407f73e2003fb40857cadf062086b",
  "filePath" : "/realm/realm-library/src/androidTest/java/io/realm/internal/JNIQueryTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "table.where().notEqualTo(\"date\",distantPast)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 45,
      "startLineNumber" : 326,
      "startColumnNumber" : 25,
      "endLineNumber" : 326,
      "endColumnNumber" : 70
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 326,
        "startColumnNumber" : 25,
        "endLineNumber" : 326,
        "endColumnNumber" : 78
      },
      "nodeContext" : "table.where().notEqualTo(\"date\",distantPast).count()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 326,
        "startColumnNumber" : 8,
        "endLineNumber" : 326,
        "endColumnNumber" : 79
      },
      "nodeContext" : "assertEquals(6L,table.where().notEqualTo(\"date\",distantPast).count())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 326,
        "startColumnNumber" : 8,
        "endLineNumber" : 326,
        "endColumnNumber" : 80
      },
      "nodeContext" : "assertEquals(6L,table.where().notEqualTo(\"date\",distantPast).count());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7087,
        "startLineNumber" : 299,
        "startColumnNumber" : 45,
        "endLineNumber" : 403,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Mixed past=Mixed.valueOf(new Date(TimeUnit.SECONDS.toMillis(Integer.MIN_VALUE - 100L)));\n  final Mixed future=Mixed.valueOf(new Date(TimeUnit.SECONDS.toMillis(Integer.MAX_VALUE + 1L)));\n  final Mixed distantPast=Mixed.valueOf(new Date(Long.MIN_VALUE));\n  final Mixed distantFuture=Mixed.valueOf(new Date(Long.MAX_VALUE));\n  final Mixed date0=Mixed.valueOf(new Date(0));\n  final Mixed date10000=Mixed.valueOf(new Date(10000));\n  final AtomicLong columnKey=new AtomicLong(-1);\n  Table table=TestHelper.createTable(sharedRealm,\"temp\",new TestHelper.AdditionalTableSetup(){\n    @Override public void execute(    Table table){\n      columnKey.set(table.addColumn(RealmFieldType.DATE,\"date\"));\n      TestHelper.addRowWithValues(table,new long[]{columnKey.get()},new Object[]{new Date(10000)});\n      TestHelper.addRowWithValues(table,new long[]{columnKey.get()},new Object[]{new Date(0)});\n      TestHelper.addRowWithValues(table,new long[]{columnKey.get()},new Object[]{new Date(1000)});\n      TestHelper.addRowWithValues(table,new long[]{columnKey.get()},new Object[]{future.asDate()});\n      TestHelper.addRowWithValues(table,new long[]{columnKey.get()},new Object[]{distantFuture.asDate()});\n      TestHelper.addRowWithValues(table,new long[]{columnKey.get()},new Object[]{past.asDate()});\n      TestHelper.addRowWithValues(table,new long[]{columnKey.get()},new Object[]{distantPast.asDate()});\n    }\n  }\n);\n  assertEquals(1L,table.where().equalTo(\"date\",distantPast).count());\n  assertEquals(6L,table.where().notEqualTo(\"date\",distantPast).count());\n  assertEquals(0L,table.where().lessThan(\"date\",distantPast).count());\n  assertEquals(1L,table.where().lessThanOrEqual(\"date\",distantPast).count());\n  assertEquals(6L,table.where().greaterThan(\"date\",distantPast).count());\n  assertEquals(7L,table.where().greaterThanOrEqual(\"date\",distantPast).count());\n  assertEquals(1L,table.where().equalTo(\"date\",past).count());\n  assertEquals(6L,table.where().notEqualTo(\"date\",past).count());\n  assertEquals(1L,table.where().lessThan(\"date\",past).count());\n  assertEquals(2L,table.where().lessThanOrEqual(\"date\",past).count());\n  assertEquals(5L,table.where().greaterThan(\"date\",past).count());\n  assertEquals(6L,table.where().greaterThanOrEqual(\"date\",past).count());\n  assertEquals(1L,table.where().equalTo(\"date\",date0).count());\n  assertEquals(6L,table.where().notEqualTo(\"date\",date0).count());\n  assertEquals(2L,table.where().lessThan(\"date\",date0).count());\n  assertEquals(3L,table.where().lessThanOrEqual(\"date\",date0).count());\n  assertEquals(4L,table.where().greaterThan(\"date\",date0).count());\n  assertEquals(5L,table.where().greaterThanOrEqual(\"date\",date0).count());\n  assertEquals(1L,table.where().equalTo(\"date\",future).count());\n  assertEquals(6L,table.where().notEqualTo(\"date\",future).count());\n  assertEquals(5L,table.where().lessThan(\"date\",future).count());\n  assertEquals(6L,table.where().lessThanOrEqual(\"date\",future).count());\n  assertEquals(1L,table.where().greaterThan(\"date\",future).count());\n  assertEquals(2L,table.where().greaterThanOrEqual(\"date\",future).count());\n  assertEquals(1L,table.where().equalTo(\"date\",distantFuture).count());\n  assertEquals(6L,table.where().notEqualTo(\"date\",distantFuture).count());\n  assertEquals(6L,table.where().lessThan(\"date\",distantFuture).count());\n  assertEquals(7L,table.where().lessThanOrEqual(\"date\",distantFuture).count());\n  assertEquals(0L,table.where().greaterThan(\"date\",distantFuture).count());\n  assertEquals(1L,table.where().greaterThanOrEqual(\"date\",distantFuture).count());\n  assertEquals(1L,table.where().between(\"date\",distantPast,distantPast).count());\n  assertEquals(2L,table.where().between(\"date\",distantPast,past).count());\n  assertEquals(3L,table.where().between(\"date\",distantPast,date0).count());\n  assertEquals(5L,table.where().between(\"date\",distantPast,date10000).count());\n  assertEquals(6L,table.where().between(\"date\",distantPast,future).count());\n  assertEquals(7L,table.where().between(\"date\",distantPast,distantFuture).count());\n  assertEquals(0L,table.where().between(\"date\",past,distantPast).count());\n  assertEquals(1L,table.where().between(\"date\",past,past).count());\n  assertEquals(2L,table.where().between(\"date\",past,date0).count());\n  assertEquals(4L,table.where().between(\"date\",past,date10000).count());\n  assertEquals(5L,table.where().between(\"date\",past,future).count());\n  assertEquals(6L,table.where().between(\"date\",past,distantFuture).count());\n  assertEquals(0L,table.where().between(\"date\",date0,distantPast).count());\n  assertEquals(0L,table.where().between(\"date\",date0,past).count());\n  assertEquals(1L,table.where().between(\"date\",date0,date0).count());\n  assertEquals(3L,table.where().between(\"date\",date0,date10000).count());\n  assertEquals(4L,table.where().between(\"date\",date0,future).count());\n  assertEquals(5L,table.where().between(\"date\",date0,distantFuture).count());\n  assertEquals(0L,table.where().between(\"date\",date10000,distantPast).count());\n  assertEquals(0L,table.where().between(\"date\",date10000,past).count());\n  assertEquals(0L,table.where().between(\"date\",date10000,date0).count());\n  assertEquals(1L,table.where().between(\"date\",date10000,date10000).count());\n  assertEquals(2L,table.where().between(\"date\",date10000,future).count());\n  assertEquals(3L,table.where().between(\"date\",date10000,distantFuture).count());\n  assertEquals(0L,table.where().between(\"date\",future,distantPast).count());\n  assertEquals(0L,table.where().between(\"date\",future,past).count());\n  assertEquals(0L,table.where().between(\"date\",future,date0).count());\n  assertEquals(0L,table.where().between(\"date\",future,date10000).count());\n  assertEquals(1L,table.where().between(\"date\",future,future).count());\n  assertEquals(2L,table.where().between(\"date\",future,distantFuture).count());\n  assertEquals(0L,table.where().between(\"date\",distantFuture,distantPast).count());\n  assertEquals(0L,table.where().between(\"date\",distantFuture,past).count());\n  assertEquals(0L,table.where().between(\"date\",distantFuture,date0).count());\n  assertEquals(0L,table.where().between(\"date\",distantFuture,date10000).count());\n  assertEquals(0L,table.where().between(\"date\",distantFuture,future).count());\n  assertEquals(1L,table.where().between(\"date\",distantFuture,distantFuture).count());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1201,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7138,
        "startLineNumber" : 298,
        "startColumnNumber" : 4,
        "endLineNumber" : 403,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void dateQuery() throws Exception {\n  final Mixed past=Mixed.valueOf(new Date(TimeUnit.SECONDS.toMillis(Integer.MIN_VALUE - 100L)));\n  final Mixed future=Mixed.valueOf(new Date(TimeUnit.SECONDS.toMillis(Integer.MAX_VALUE + 1L)));\n  final Mixed distantPast=Mixed.valueOf(new Date(Long.MIN_VALUE));\n  final Mixed distantFuture=Mixed.valueOf(new Date(Long.MAX_VALUE));\n  final Mixed date0=Mixed.valueOf(new Date(0));\n  final Mixed date10000=Mixed.valueOf(new Date(10000));\n  final AtomicLong columnKey=new AtomicLong(-1);\n  Table table=TestHelper.createTable(sharedRealm,\"temp\",new TestHelper.AdditionalTableSetup(){\n    @Override public void execute(    Table table){\n      columnKey.set(table.addColumn(RealmFieldType.DATE,\"date\"));\n      TestHelper.addRowWithValues(table,new long[]{columnKey.get()},new Object[]{new Date(10000)});\n      TestHelper.addRowWithValues(table,new long[]{columnKey.get()},new Object[]{new Date(0)});\n      TestHelper.addRowWithValues(table,new long[]{columnKey.get()},new Object[]{new Date(1000)});\n      TestHelper.addRowWithValues(table,new long[]{columnKey.get()},new Object[]{future.asDate()});\n      TestHelper.addRowWithValues(table,new long[]{columnKey.get()},new Object[]{distantFuture.asDate()});\n      TestHelper.addRowWithValues(table,new long[]{columnKey.get()},new Object[]{past.asDate()});\n      TestHelper.addRowWithValues(table,new long[]{columnKey.get()},new Object[]{distantPast.asDate()});\n    }\n  }\n);\n  assertEquals(1L,table.where().equalTo(\"date\",distantPast).count());\n  assertEquals(6L,table.where().notEqualTo(\"date\",distantPast).count());\n  assertEquals(0L,table.where().lessThan(\"date\",distantPast).count());\n  assertEquals(1L,table.where().lessThanOrEqual(\"date\",distantPast).count());\n  assertEquals(6L,table.where().greaterThan(\"date\",distantPast).count());\n  assertEquals(7L,table.where().greaterThanOrEqual(\"date\",distantPast).count());\n  assertEquals(1L,table.where().equalTo(\"date\",past).count());\n  assertEquals(6L,table.where().notEqualTo(\"date\",past).count());\n  assertEquals(1L,table.where().lessThan(\"date\",past).count());\n  assertEquals(2L,table.where().lessThanOrEqual(\"date\",past).count());\n  assertEquals(5L,table.where().greaterThan(\"date\",past).count());\n  assertEquals(6L,table.where().greaterThanOrEqual(\"date\",past).count());\n  assertEquals(1L,table.where().equalTo(\"date\",date0).count());\n  assertEquals(6L,table.where().notEqualTo(\"date\",date0).count());\n  assertEquals(2L,table.where().lessThan(\"date\",date0).count());\n  assertEquals(3L,table.where().lessThanOrEqual(\"date\",date0).count());\n  assertEquals(4L,table.where().greaterThan(\"date\",date0).count());\n  assertEquals(5L,table.where().greaterThanOrEqual(\"date\",date0).count());\n  assertEquals(1L,table.where().equalTo(\"date\",future).count());\n  assertEquals(6L,table.where().notEqualTo(\"date\",future).count());\n  assertEquals(5L,table.where().lessThan(\"date\",future).count());\n  assertEquals(6L,table.where().lessThanOrEqual(\"date\",future).count());\n  assertEquals(1L,table.where().greaterThan(\"date\",future).count());\n  assertEquals(2L,table.where().greaterThanOrEqual(\"date\",future).count());\n  assertEquals(1L,table.where().equalTo(\"date\",distantFuture).count());\n  assertEquals(6L,table.where().notEqualTo(\"date\",distantFuture).count());\n  assertEquals(6L,table.where().lessThan(\"date\",distantFuture).count());\n  assertEquals(7L,table.where().lessThanOrEqual(\"date\",distantFuture).count());\n  assertEquals(0L,table.where().greaterThan(\"date\",distantFuture).count());\n  assertEquals(1L,table.where().greaterThanOrEqual(\"date\",distantFuture).count());\n  assertEquals(1L,table.where().between(\"date\",distantPast,distantPast).count());\n  assertEquals(2L,table.where().between(\"date\",distantPast,past).count());\n  assertEquals(3L,table.where().between(\"date\",distantPast,date0).count());\n  assertEquals(5L,table.where().between(\"date\",distantPast,date10000).count());\n  assertEquals(6L,table.where().between(\"date\",distantPast,future).count());\n  assertEquals(7L,table.where().between(\"date\",distantPast,distantFuture).count());\n  assertEquals(0L,table.where().between(\"date\",past,distantPast).count());\n  assertEquals(1L,table.where().between(\"date\",past,past).count());\n  assertEquals(2L,table.where().between(\"date\",past,date0).count());\n  assertEquals(4L,table.where().between(\"date\",past,date10000).count());\n  assertEquals(5L,table.where().between(\"date\",past,future).count());\n  assertEquals(6L,table.where().between(\"date\",past,distantFuture).count());\n  assertEquals(0L,table.where().between(\"date\",date0,distantPast).count());\n  assertEquals(0L,table.where().between(\"date\",date0,past).count());\n  assertEquals(1L,table.where().between(\"date\",date0,date0).count());\n  assertEquals(3L,table.where().between(\"date\",date0,date10000).count());\n  assertEquals(4L,table.where().between(\"date\",date0,future).count());\n  assertEquals(5L,table.where().between(\"date\",date0,distantFuture).count());\n  assertEquals(0L,table.where().between(\"date\",date10000,distantPast).count());\n  assertEquals(0L,table.where().between(\"date\",date10000,past).count());\n  assertEquals(0L,table.where().between(\"date\",date10000,date0).count());\n  assertEquals(1L,table.where().between(\"date\",date10000,date10000).count());\n  assertEquals(2L,table.where().between(\"date\",date10000,future).count());\n  assertEquals(3L,table.where().between(\"date\",date10000,distantFuture).count());\n  assertEquals(0L,table.where().between(\"date\",future,distantPast).count());\n  assertEquals(0L,table.where().between(\"date\",future,past).count());\n  assertEquals(0L,table.where().between(\"date\",future,date0).count());\n  assertEquals(0L,table.where().between(\"date\",future,date10000).count());\n  assertEquals(1L,table.where().between(\"date\",future,future).count());\n  assertEquals(2L,table.where().between(\"date\",future,distantFuture).count());\n  assertEquals(0L,table.where().between(\"date\",distantFuture,distantPast).count());\n  assertEquals(0L,table.where().between(\"date\",distantFuture,past).count());\n  assertEquals(0L,table.where().between(\"date\",distantFuture,date0).count());\n  assertEquals(0L,table.where().between(\"date\",distantFuture,date10000).count());\n  assertEquals(0L,table.where().between(\"date\",distantFuture,future).count());\n  assertEquals(1L,table.where().between(\"date\",distantFuture,distantFuture).count());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1209,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 326,
        "startColumnNumber" : 8,
        "endLineNumber" : 326,
        "endColumnNumber" : 80
      },
      "nodeContext" : "assertEquals(6L,table.where().notEqualTo(\"date\",distantPast).count());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 5,
    "type" : "io.realm.internal.TableQuery"
  } ],
  "positionList" : [ {
    "charLength" : 45,
    "startLineNumber" : 326,
    "startColumnNumber" : 25,
    "endLineNumber" : 326,
    "endColumnNumber" : 70
  } ],
  "layoutRelationDataList" : [ ]
}