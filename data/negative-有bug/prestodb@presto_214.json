{
  "id" : 214,
  "expression" : "valueFromString(keyValue.get(1),valueType)",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-accumulo/src/main/java/com/facebook/presto/accumulo/model/Row.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "valueFromString(keyValue.get(1),valueType)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 43,
      "startLineNumber" : 194,
      "startColumnNumber" : 74,
      "endLineNumber" : 194,
      "endColumnNumber" : 117
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 194,
        "startColumnNumber" : 16,
        "endLineNumber" : 194,
        "endColumnNumber" : 118
      },
      "nodeContext" : "mapBuilder.put(valueFromString(keyValue.get(0),keyType),valueFromString(keyValue.get(1),valueType))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 194,
        "startColumnNumber" : 16,
        "endLineNumber" : 194,
        "endColumnNumber" : 119
      },
      "nodeContext" : "mapBuilder.put(valueFromString(keyValue.get(0),keyType),valueFromString(keyValue.get(1),valueType));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 442,
        "startLineNumber" : 189,
        "startColumnNumber" : 63,
        "endLineNumber" : 195,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ImmutableList.Builder<String> builder=ImmutableList.builder();\n  List<String> keyValue=builder.addAll(Splitter.on(\"->\").split(element)).build();\n  checkArgument(keyValue.size() == 2,format(\"Map element %s has %d entries, not 2\",element,keyValue.size()));\n  mapBuilder.put(valueFromString(keyValue.get(0),keyType),valueFromString(keyValue.get(1),valueType));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 67,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 493,
        "startLineNumber" : 189,
        "startColumnNumber" : 12,
        "endLineNumber" : 195,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (String element : Splitter.on(',').split(str)) {\n  ImmutableList.Builder<String> builder=ImmutableList.builder();\n  List<String> keyValue=builder.addAll(Splitter.on(\"->\").split(element)).build();\n  checkArgument(keyValue.size() == 2,format(\"Map element %s has %d entries, not 2\",element,keyValue.size()));\n  mapBuilder.put(valueFromString(keyValue.get(0),keyType),valueFromString(keyValue.get(1),valueType));\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 79,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 793,
        "startLineNumber" : 185,
        "startColumnNumber" : 40,
        "endLineNumber" : 197,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Type keyType=Types.getKeyType(type);\n  Type valueType=Types.getValueType(type);\n  ImmutableMap.Builder<Object,Object> mapBuilder=ImmutableMap.builder();\n  for (  String element : Splitter.on(',').split(str)) {\n    ImmutableList.Builder<String> builder=ImmutableList.builder();\n    List<String> keyValue=builder.addAll(Splitter.on(\"->\").split(element)).build();\n    checkArgument(keyValue.size() == 2,format(\"Map element %s has %d entries, not 2\",element,keyValue.size()));\n    mapBuilder.put(valueFromString(keyValue.get(0),keyType),valueFromString(keyValue.get(1),valueType));\n  }\n  return AccumuloRowSerializer.getBlockFromMap(type,mapBuilder.build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 121,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2116,
        "startLineNumber" : 185,
        "startColumnNumber" : 13,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (Types.isMapType(type)) {\n  Type keyType=Types.getKeyType(type);\n  Type valueType=Types.getValueType(type);\n  ImmutableMap.Builder<Object,Object> mapBuilder=ImmutableMap.builder();\n  for (  String element : Splitter.on(',').split(str)) {\n    ImmutableList.Builder<String> builder=ImmutableList.builder();\n    List<String> keyValue=builder.addAll(Splitter.on(\"->\").split(element)).build();\n    checkArgument(keyValue.size() == 2,format(\"Map element %s has %d entries, not 2\",element,keyValue.size()));\n    mapBuilder.put(valueFromString(keyValue.get(0),keyType),valueFromString(keyValue.get(1),valueType));\n  }\n  return AccumuloRowSerializer.getBlockFromMap(type,mapBuilder.build());\n}\n else if (type.equals(BIGINT)) {\n  return Long.parseLong(str);\n}\n else if (type.equals(BOOLEAN)) {\n  return Boolean.parseBoolean(str);\n}\n else if (type.equals(DATE)) {\n  return Date.valueOf(LocalDate.parse(str,DATE_PARSER));\n}\n else if (type.equals(DOUBLE)) {\n  return Double.parseDouble(str);\n}\n else if (type.equals(INTEGER)) {\n  return Integer.parseInt(str);\n}\n else if (type.equals(REAL)) {\n  return Float.parseFloat(str);\n}\n else if (type.equals(SMALLINT)) {\n  return Short.parseShort(str);\n}\n else if (type.equals(TIME)) {\n  return Time.valueOf(LocalTime.parse(str,TIME_PARSER));\n}\n else if (type.equals(TIMESTAMP)) {\n  return Timestamp.valueOf(LocalDateTime.parse(str,TIMESTAMP_PARSER));\n}\n else if (type.equals(TINYINT)) {\n  return Byte.valueOf(str);\n}\n else if (type.equals(VARBINARY)) {\n  return str.getBytes(UTF_8);\n}\n else if (type instanceof VarcharType) {\n  return str;\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported type \" + type);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 276,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2555,
        "startLineNumber" : 177,
        "startColumnNumber" : 13,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (Types.isArrayType(type)) {\n  Type elementType=Types.getElementType(type);\n  ImmutableList.Builder<Object> listBuilder=ImmutableList.builder();\n  for (  String element : Splitter.on(',').split(str)) {\n    listBuilder.add(valueFromString(element,elementType));\n  }\n  return AccumuloRowSerializer.getBlockFromArray(elementType,listBuilder.build());\n}\n else if (Types.isMapType(type)) {\n  Type keyType=Types.getKeyType(type);\n  Type valueType=Types.getValueType(type);\n  ImmutableMap.Builder<Object,Object> mapBuilder=ImmutableMap.builder();\n  for (  String element : Splitter.on(',').split(str)) {\n    ImmutableList.Builder<String> builder=ImmutableList.builder();\n    List<String> keyValue=builder.addAll(Splitter.on(\"->\").split(element)).build();\n    checkArgument(keyValue.size() == 2,format(\"Map element %s has %d entries, not 2\",element,keyValue.size()));\n    mapBuilder.put(valueFromString(keyValue.get(0),keyType),valueFromString(keyValue.get(1),valueType));\n  }\n  return AccumuloRowSerializer.getBlockFromMap(type,mapBuilder.build());\n}\n else if (type.equals(BIGINT)) {\n  return Long.parseLong(str);\n}\n else if (type.equals(BOOLEAN)) {\n  return Boolean.parseBoolean(str);\n}\n else if (type.equals(DATE)) {\n  return Date.valueOf(LocalDate.parse(str,DATE_PARSER));\n}\n else if (type.equals(DOUBLE)) {\n  return Double.parseDouble(str);\n}\n else if (type.equals(INTEGER)) {\n  return Integer.parseInt(str);\n}\n else if (type.equals(REAL)) {\n  return Float.parseFloat(str);\n}\n else if (type.equals(SMALLINT)) {\n  return Short.parseShort(str);\n}\n else if (type.equals(TIME)) {\n  return Time.valueOf(LocalTime.parse(str,TIME_PARSER));\n}\n else if (type.equals(TIMESTAMP)) {\n  return Timestamp.valueOf(LocalDateTime.parse(str,TIMESTAMP_PARSER));\n}\n else if (type.equals(TINYINT)) {\n  return Byte.valueOf(str);\n}\n else if (type.equals(VARBINARY)) {\n  return str.getBytes(UTF_8);\n}\n else if (type instanceof VarcharType) {\n  return str;\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported type \" + type);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 333,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2639,
        "startLineNumber" : 174,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (str == null || str.isEmpty()) {\n  return null;\n}\n else if (Types.isArrayType(type)) {\n  Type elementType=Types.getElementType(type);\n  ImmutableList.Builder<Object> listBuilder=ImmutableList.builder();\n  for (  String element : Splitter.on(',').split(str)) {\n    listBuilder.add(valueFromString(element,elementType));\n  }\n  return AccumuloRowSerializer.getBlockFromArray(elementType,listBuilder.build());\n}\n else if (Types.isMapType(type)) {\n  Type keyType=Types.getKeyType(type);\n  Type valueType=Types.getValueType(type);\n  ImmutableMap.Builder<Object,Object> mapBuilder=ImmutableMap.builder();\n  for (  String element : Splitter.on(',').split(str)) {\n    ImmutableList.Builder<String> builder=ImmutableList.builder();\n    List<String> keyValue=builder.addAll(Splitter.on(\"->\").split(element)).build();\n    checkArgument(keyValue.size() == 2,format(\"Map element %s has %d entries, not 2\",element,keyValue.size()));\n    mapBuilder.put(valueFromString(keyValue.get(0),keyType),valueFromString(keyValue.get(1),valueType));\n  }\n  return AccumuloRowSerializer.getBlockFromMap(type,mapBuilder.build());\n}\n else if (type.equals(BIGINT)) {\n  return Long.parseLong(str);\n}\n else if (type.equals(BOOLEAN)) {\n  return Boolean.parseBoolean(str);\n}\n else if (type.equals(DATE)) {\n  return Date.valueOf(LocalDate.parse(str,DATE_PARSER));\n}\n else if (type.equals(DOUBLE)) {\n  return Double.parseDouble(str);\n}\n else if (type.equals(INTEGER)) {\n  return Integer.parseInt(str);\n}\n else if (type.equals(REAL)) {\n  return Float.parseFloat(str);\n}\n else if (type.equals(SMALLINT)) {\n  return Short.parseShort(str);\n}\n else if (type.equals(TIME)) {\n  return Time.valueOf(LocalTime.parse(str,TIME_PARSER));\n}\n else if (type.equals(TIMESTAMP)) {\n  return Timestamp.valueOf(LocalDateTime.parse(str,TIMESTAMP_PARSER));\n}\n else if (type.equals(TINYINT)) {\n  return Byte.valueOf(str);\n}\n else if (type.equals(VARBINARY)) {\n  return str.getBytes(UTF_8);\n}\n else if (type instanceof VarcharType) {\n  return str;\n}\n else {\n  throw new PrestoException(NOT_SUPPORTED,\"Unsupported type \" + type);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 344,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2655,
        "startLineNumber" : 173,
        "startColumnNumber" : 4,
        "endLineNumber" : 237,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (str == null || str.isEmpty()) {\n    return null;\n  }\n else   if (Types.isArrayType(type)) {\n    Type elementType=Types.getElementType(type);\n    ImmutableList.Builder<Object> listBuilder=ImmutableList.builder();\n    for (    String element : Splitter.on(',').split(str)) {\n      listBuilder.add(valueFromString(element,elementType));\n    }\n    return AccumuloRowSerializer.getBlockFromArray(elementType,listBuilder.build());\n  }\n else   if (Types.isMapType(type)) {\n    Type keyType=Types.getKeyType(type);\n    Type valueType=Types.getValueType(type);\n    ImmutableMap.Builder<Object,Object> mapBuilder=ImmutableMap.builder();\n    for (    String element : Splitter.on(',').split(str)) {\n      ImmutableList.Builder<String> builder=ImmutableList.builder();\n      List<String> keyValue=builder.addAll(Splitter.on(\"->\").split(element)).build();\n      checkArgument(keyValue.size() == 2,format(\"Map element %s has %d entries, not 2\",element,keyValue.size()));\n      mapBuilder.put(valueFromString(keyValue.get(0),keyType),valueFromString(keyValue.get(1),valueType));\n    }\n    return AccumuloRowSerializer.getBlockFromMap(type,mapBuilder.build());\n  }\n else   if (type.equals(BIGINT)) {\n    return Long.parseLong(str);\n  }\n else   if (type.equals(BOOLEAN)) {\n    return Boolean.parseBoolean(str);\n  }\n else   if (type.equals(DATE)) {\n    return Date.valueOf(LocalDate.parse(str,DATE_PARSER));\n  }\n else   if (type.equals(DOUBLE)) {\n    return Double.parseDouble(str);\n  }\n else   if (type.equals(INTEGER)) {\n    return Integer.parseInt(str);\n  }\n else   if (type.equals(REAL)) {\n    return Float.parseFloat(str);\n  }\n else   if (type.equals(SMALLINT)) {\n    return Short.parseShort(str);\n  }\n else   if (type.equals(TIME)) {\n    return Time.valueOf(LocalTime.parse(str,TIME_PARSER));\n  }\n else   if (type.equals(TIMESTAMP)) {\n    return Timestamp.valueOf(LocalDateTime.parse(str,TIMESTAMP_PARSER));\n  }\n else   if (type.equals(TINYINT)) {\n    return Byte.valueOf(str);\n  }\n else   if (type.equals(VARBINARY)) {\n    return str.getBytes(UTF_8);\n  }\n else   if (type instanceof VarcharType) {\n    return str;\n  }\n else {\n    throw new PrestoException(NOT_SUPPORTED,\"Unsupported type \" + type);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 345,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2996,
        "startLineNumber" : 164,
        "startColumnNumber" : 4,
        "endLineNumber" : 237,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Converts the given String into a Java object based on the given Presto type\n * @param str String to convert\n * @param type Presto Type\n * @return Java object\n * @throws PrestoException If the type is not supported by this function\n */\npublic static Object valueFromString(String str,Type type){\n  if (str == null || str.isEmpty()) {\n    return null;\n  }\n else   if (Types.isArrayType(type)) {\n    Type elementType=Types.getElementType(type);\n    ImmutableList.Builder<Object> listBuilder=ImmutableList.builder();\n    for (    String element : Splitter.on(',').split(str)) {\n      listBuilder.add(valueFromString(element,elementType));\n    }\n    return AccumuloRowSerializer.getBlockFromArray(elementType,listBuilder.build());\n  }\n else   if (Types.isMapType(type)) {\n    Type keyType=Types.getKeyType(type);\n    Type valueType=Types.getValueType(type);\n    ImmutableMap.Builder<Object,Object> mapBuilder=ImmutableMap.builder();\n    for (    String element : Splitter.on(',').split(str)) {\n      ImmutableList.Builder<String> builder=ImmutableList.builder();\n      List<String> keyValue=builder.addAll(Splitter.on(\"->\").split(element)).build();\n      checkArgument(keyValue.size() == 2,format(\"Map element %s has %d entries, not 2\",element,keyValue.size()));\n      mapBuilder.put(valueFromString(keyValue.get(0),keyType),valueFromString(keyValue.get(1),valueType));\n    }\n    return AccumuloRowSerializer.getBlockFromMap(type,mapBuilder.build());\n  }\n else   if (type.equals(BIGINT)) {\n    return Long.parseLong(str);\n  }\n else   if (type.equals(BOOLEAN)) {\n    return Boolean.parseBoolean(str);\n  }\n else   if (type.equals(DATE)) {\n    return Date.valueOf(LocalDate.parse(str,DATE_PARSER));\n  }\n else   if (type.equals(DOUBLE)) {\n    return Double.parseDouble(str);\n  }\n else   if (type.equals(INTEGER)) {\n    return Integer.parseInt(str);\n  }\n else   if (type.equals(REAL)) {\n    return Float.parseFloat(str);\n  }\n else   if (type.equals(SMALLINT)) {\n    return Short.parseShort(str);\n  }\n else   if (type.equals(TIME)) {\n    return Time.valueOf(LocalTime.parse(str,TIME_PARSER));\n  }\n else   if (type.equals(TIMESTAMP)) {\n    return Timestamp.valueOf(LocalDateTime.parse(str,TIMESTAMP_PARSER));\n  }\n else   if (type.equals(TINYINT)) {\n    return Byte.valueOf(str);\n  }\n else   if (type.equals(VARBINARY)) {\n    return str.getBytes(UTF_8);\n  }\n else   if (type instanceof VarcharType) {\n    return str;\n  }\n else {\n    throw new PrestoException(NOT_SUPPORTED,\"Unsupported type \" + type);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 360,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 194,
        "startColumnNumber" : 16,
        "endLineNumber" : 194,
        "endColumnNumber" : 119
      },
      "nodeContext" : "mapBuilder.put(valueFromString(keyValue.get(0),keyType),valueFromString(keyValue.get(1),valueType));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 5
    },
    "tokenLength" : 5,
    "type" : "java.lang.Object"
  } ],
  "positionList" : [ {
    "charLength" : 43,
    "startLineNumber" : 194,
    "startColumnNumber" : 74,
    "endLineNumber" : 194,
    "endColumnNumber" : 117
  } ],
  "layoutRelationDataList" : [ ]
}