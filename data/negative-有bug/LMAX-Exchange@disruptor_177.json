{
  "id" : 177,
  "expression" : "ringBuffer.getCursor()",
  "projectName" : "LMAX-Exchange@disruptor",
  "commitID" : "6d8500d39ac15cc2fdbc3dbf2e3a97fbe425b8fa",
  "filePath" : "/src/test/java/com/lmax/disruptor/RingBufferTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ringBuffer.getCursor()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 53,
      "startColumnNumber" : 67,
      "endLineNumber" : 53,
      "endColumnNumber" : 89
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 53,
        "startColumnNumber" : 8,
        "endLineNumber" : 53,
        "endColumnNumber" : 90
      },
      "nodeContext" : "assertEquals(SingleProducerSequencer.INITIAL_CURSOR_VALUE,ringBuffer.getCursor())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 53,
        "startColumnNumber" : 8,
        "endLineNumber" : 53,
        "endColumnNumber" : 91
      },
      "nodeContext" : "assertEquals(SingleProducerSequencer.INITIAL_CURSOR_VALUE,ringBuffer.getCursor());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 602,
        "startLineNumber" : 52,
        "startColumnNumber" : 4,
        "endLineNumber" : 69,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  assertEquals(SingleProducerSequencer.INITIAL_CURSOR_VALUE,ringBuffer.getCursor());\n  StubEvent expectedEvent=new StubEvent(2701);\n  long claimSequence=ringBuffer.next();\n  StubEvent oldEvent=ringBuffer.getPreallocated(claimSequence);\n  oldEvent.copy(expectedEvent);\n  ringBuffer.publish(claimSequence);\n  long sequence=sequenceBarrier.waitFor(0);\n  assertEquals(0,sequence);\n  StubEvent event=ringBuffer.getPublished(sequence);\n  assertEquals(expectedEvent,event);\n  assertEquals(0L,ringBuffer.getCursor());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 79,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 665,
        "startLineNumber" : 50,
        "startColumnNumber" : 4,
        "endLineNumber" : 69,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void shouldClaimAndGet() throws Exception {\n  assertEquals(SingleProducerSequencer.INITIAL_CURSOR_VALUE,ringBuffer.getCursor());\n  StubEvent expectedEvent=new StubEvent(2701);\n  long claimSequence=ringBuffer.next();\n  StubEvent oldEvent=ringBuffer.getPreallocated(claimSequence);\n  oldEvent.copy(expectedEvent);\n  ringBuffer.publish(claimSequence);\n  long sequence=sequenceBarrier.waitFor(0);\n  assertEquals(0,sequence);\n  StubEvent event=ringBuffer.getPublished(sequence);\n  assertEquals(expectedEvent,event);\n  assertEquals(0L,ringBuffer.getCursor());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 87,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 53,
        "startColumnNumber" : 8,
        "endLineNumber" : 53,
        "endColumnNumber" : 91
      },
      "nodeContext" : "assertEquals(SingleProducerSequencer.INITIAL_CURSOR_VALUE,ringBuffer.getCursor());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "long"
  }, {
    "nodeContext" : "ringBuffer.getCursor()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 68,
      "startColumnNumber" : 25,
      "endLineNumber" : 68,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 68,
        "startColumnNumber" : 8,
        "endLineNumber" : 68,
        "endColumnNumber" : 48
      },
      "nodeContext" : "assertEquals(0L,ringBuffer.getCursor())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 68,
        "startColumnNumber" : 8,
        "endLineNumber" : 68,
        "endColumnNumber" : 49
      },
      "nodeContext" : "assertEquals(0L,ringBuffer.getCursor());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 602,
        "startLineNumber" : 52,
        "startColumnNumber" : 4,
        "endLineNumber" : 69,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  assertEquals(SingleProducerSequencer.INITIAL_CURSOR_VALUE,ringBuffer.getCursor());\n  StubEvent expectedEvent=new StubEvent(2701);\n  long claimSequence=ringBuffer.next();\n  StubEvent oldEvent=ringBuffer.getPreallocated(claimSequence);\n  oldEvent.copy(expectedEvent);\n  ringBuffer.publish(claimSequence);\n  long sequence=sequenceBarrier.waitFor(0);\n  assertEquals(0,sequence);\n  StubEvent event=ringBuffer.getPublished(sequence);\n  assertEquals(expectedEvent,event);\n  assertEquals(0L,ringBuffer.getCursor());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 79,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 665,
        "startLineNumber" : 50,
        "startColumnNumber" : 4,
        "endLineNumber" : 69,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void shouldClaimAndGet() throws Exception {\n  assertEquals(SingleProducerSequencer.INITIAL_CURSOR_VALUE,ringBuffer.getCursor());\n  StubEvent expectedEvent=new StubEvent(2701);\n  long claimSequence=ringBuffer.next();\n  StubEvent oldEvent=ringBuffer.getPreallocated(claimSequence);\n  oldEvent.copy(expectedEvent);\n  ringBuffer.publish(claimSequence);\n  long sequence=sequenceBarrier.waitFor(0);\n  assertEquals(0,sequence);\n  StubEvent event=ringBuffer.getPublished(sequence);\n  assertEquals(expectedEvent,event);\n  assertEquals(0L,ringBuffer.getCursor());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 87,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 68,
        "startColumnNumber" : 8,
        "endLineNumber" : 68,
        "endColumnNumber" : 49
      },
      "nodeContext" : "assertEquals(0L,ringBuffer.getCursor());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 22,
    "startLineNumber" : 53,
    "startColumnNumber" : 67,
    "endLineNumber" : 53,
    "endColumnNumber" : 89
  }, {
    "charLength" : 22,
    "startLineNumber" : 68,
    "startColumnNumber" : 25,
    "endLineNumber" : 68,
    "endColumnNumber" : 47
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}