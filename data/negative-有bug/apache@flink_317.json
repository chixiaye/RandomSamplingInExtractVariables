{
  "id" : 317,
  "expression" : "currentBuffer.getBuffer().isEmpty()",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-runtime/src/main/java/org/apache/flink/runtime/operators/sort/SorterInputGateway.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "currentBuffer.getBuffer().isEmpty()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 35,
      "startLineNumber" : 69,
      "startColumnNumber" : 17,
      "endLineNumber" : 69,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 69,
        "startColumnNumber" : 16,
        "endLineNumber" : 69,
        "endColumnNumber" : 52
      },
      "nodeContext" : "!currentBuffer.getBuffer().isEmpty()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 69,
        "startColumnNumber" : 12,
        "endLineNumber" : 71,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!currentBuffer.getBuffer().isEmpty()) {\n  throw new IOException(\"New buffer is not empty.\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 219,
        "startLineNumber" : 67,
        "startColumnNumber" : 35,
        "endLineNumber" : 72,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  this.currentBuffer=this.dispatcher.take(SortStage.READ);\n  if (!currentBuffer.getBuffer().isEmpty()) {\n    throw new IOException(\"New buffer is not empty.\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 246,
        "startLineNumber" : 67,
        "startColumnNumber" : 8,
        "endLineNumber" : 72,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (currentBuffer == null) {\n  this.currentBuffer=this.dispatcher.take(SortStage.READ);\n  if (!currentBuffer.getBuffer().isEmpty()) {\n    throw new IOException(\"New buffer is not empty.\");\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 31,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1126,
        "startLineNumber" : 65,
        "startColumnNumber" : 79,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (currentBuffer == null) {\n    this.currentBuffer=this.dispatcher.take(SortStage.READ);\n    if (!currentBuffer.getBuffer().isEmpty()) {\n      throw new IOException(\"New buffer is not empty.\");\n    }\n  }\n  InMemorySorter<E> sorter=currentBuffer.getBuffer();\n  long occupancyPreWrite=sorter.getOccupancy();\n  if (!sorter.write(record)) {\n    long recordSize=sorter.getCapacity() - occupancyPreWrite;\n    signalSpillingIfNecessary(recordSize);\n    boolean isLarge=occupancyPreWrite == 0;\n    if (isLarge) {\n      writeLarge(record,sorter);\n      this.currentBuffer.getBuffer().reset();\n    }\n else {\n      this.dispatcher.send(SortStage.SORT,currentBuffer);\n      this.currentBuffer=null;\n      writeRecord(record);\n    }\n  }\n else {\n    long recordSize=sorter.getOccupancy() - occupancyPreWrite;\n    signalSpillingIfNecessary(recordSize);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 128,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1249,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Writes the given record for sorting. \n */\npublic void writeRecord(E record) throws IOException, InterruptedException {\n  if (currentBuffer == null) {\n    this.currentBuffer=this.dispatcher.take(SortStage.READ);\n    if (!currentBuffer.getBuffer().isEmpty()) {\n      throw new IOException(\"New buffer is not empty.\");\n    }\n  }\n  InMemorySorter<E> sorter=currentBuffer.getBuffer();\n  long occupancyPreWrite=sorter.getOccupancy();\n  if (!sorter.write(record)) {\n    long recordSize=sorter.getCapacity() - occupancyPreWrite;\n    signalSpillingIfNecessary(recordSize);\n    boolean isLarge=occupancyPreWrite == 0;\n    if (isLarge) {\n      writeLarge(record,sorter);\n      this.currentBuffer.getBuffer().reset();\n    }\n else {\n      this.dispatcher.send(SortStage.SORT,currentBuffer);\n      this.currentBuffer=null;\n      writeRecord(record);\n    }\n  }\n else {\n    long recordSize=sorter.getOccupancy() - occupancyPreWrite;\n    signalSpillingIfNecessary(recordSize);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 141,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 69,
        "startColumnNumber" : 16,
        "endLineNumber" : 69,
        "endColumnNumber" : 52
      },
      "nodeContext" : "!currentBuffer.getBuffer().isEmpty()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 35,
    "startLineNumber" : 69,
    "startColumnNumber" : 17,
    "endLineNumber" : 69,
    "endColumnNumber" : 52
  } ],
  "layoutRelationDataList" : [ ]
}