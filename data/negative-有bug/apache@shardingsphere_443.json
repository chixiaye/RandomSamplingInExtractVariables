{
  "id" : 443,
  "expression" : "0",
  "projectName" : "apache@shardingsphere",
  "commitID" : "897bcea9f4b0f5e33eb545470f28a35d68fccf60",
  "filePath" : "/shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/communication/jdbc/datasource/JDBCBackendDataSourceTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 97,
      "startColumnNumber" : 21,
      "endLineNumber" : 97,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 97,
        "startColumnNumber" : 17,
        "endLineNumber" : 97,
        "endColumnNumber" : 22
      },
      "nodeContext" : "i=0",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 97,
        "startColumnNumber" : 13,
        "endLineNumber" : 97,
        "endColumnNumber" : 22
      },
      "nodeContext" : "int i=0",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 137,
        "startLineNumber" : 97,
        "startColumnNumber" : 8,
        "endLineNumber" : 99,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < size; i++) {\n  result.put(String.format(DATA_SOURCE_PATTERN,i),new CallTimeRecordDataSource());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 24,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 241,
        "startLineNumber" : 95,
        "startColumnNumber" : 68,
        "endLineNumber" : 101,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,DataSource> result=new HashMap<>(size,1);\n  for (int i=0; i < size; i++) {\n    result.put(String.format(DATA_SOURCE_PATTERN,i),new CallTimeRecordDataSource());\n  }\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 43,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 305,
        "startLineNumber" : 95,
        "startColumnNumber" : 4,
        "endLineNumber" : 101,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private Map<String,DataSource> mockDataSources(final int size){\n  Map<String,DataSource> result=new HashMap<>(size,1);\n  for (int i=0; i < size; i++) {\n    result.put(String.format(DATA_SOURCE_PATTERN,i),new CallTimeRecordDataSource());\n  }\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 57,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 97,
        "startColumnNumber" : 13,
        "endLineNumber" : 97,
        "endColumnNumber" : 22
      },
      "nodeContext" : "int i=0",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 97,
    "startColumnNumber" : 21,
    "endLineNumber" : 97,
    "endColumnNumber" : 22
  } ],
  "layoutRelationDataList" : [ ]
}