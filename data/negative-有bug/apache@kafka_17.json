{
  "id" : 17,
  "expression" : "null",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/streams/src/main/java/org/apache/kafka/streams/processor/internals/RecordDeserializer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 100,
      "startColumnNumber" : 23,
      "endLineNumber" : 100,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 100,
        "startColumnNumber" : 16,
        "endLineNumber" : 100,
        "endColumnNumber" : 28
      },
      "nodeContext" : "return null;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 410,
        "startLineNumber" : 91,
        "startColumnNumber" : 19,
        "endLineNumber" : 101,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  log.warn(\"Skipping record due to deserialization error. topic=[{}] partition=[{}] offset=[{}]\",rawRecord.topic(),rawRecord.partition(),rawRecord.offset(),deserializationException);\n  droppedRecordsSensor.record();\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 939,
        "startLineNumber" : 85,
        "startColumnNumber" : 12,
        "endLineNumber" : 101,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (response == DeserializationExceptionHandler.DeserializationHandlerResponse.FAIL) {\n  throw new StreamsException(\"Deserialization exception handler is set to fail upon\" + \" a deserialization error. If you would rather have the streaming pipeline\" + \" continue after a deserialization error, please set the \" + DEFAULT_DESERIALIZATION_EXCEPTION_HANDLER_CLASS_CONFIG + \" appropriately.\",deserializationException);\n}\n else {\n  log.warn(\"Skipping record due to deserialization error. topic=[{}] partition=[{}] offset=[{}]\",rawRecord.topic(),rawRecord.partition(),rawRecord.offset(),deserializationException);\n  droppedRecordsSensor.record();\n  return null;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 43,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 1693,
        "startLineNumber" : 70,
        "startColumnNumber" : 59,
        "endLineNumber" : 102,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final DeserializationExceptionHandler.DeserializationHandlerResponse response;\n  try {\n    response=deserializationExceptionHandler.handle((InternalProcessorContext<?,?>)processorContext,rawRecord,deserializationException);\n  }\n catch (  final Exception fatalUserException) {\n    log.error(\"Deserialization error callback failed after deserialization error for record {}\",rawRecord,deserializationException);\n    throw new StreamsException(\"Fatal user code error in deserialization error callback\",fatalUserException);\n  }\n  if (response == DeserializationExceptionHandler.DeserializationHandlerResponse.FAIL) {\n    throw new StreamsException(\"Deserialization exception handler is set to fail upon\" + \" a deserialization error. If you would rather have the streaming pipeline\" + \" continue after a deserialization error, please set the \" + DEFAULT_DESERIALIZATION_EXCEPTION_HANDLER_CLASS_CONFIG + \" appropriately.\",deserializationException);\n  }\n else {\n    log.warn(\"Skipping record due to deserialization error. topic=[{}] partition=[{}] offset=[{}]\",rawRecord.topic(),rawRecord.partition(),rawRecord.offset(),deserializationException);\n    droppedRecordsSensor.record();\n    return null;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 89,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 1742,
        "startLineNumber" : 70,
        "startColumnNumber" : 10,
        "endLineNumber" : 102,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (final Exception deserializationException) {\n  final DeserializationExceptionHandler.DeserializationHandlerResponse response;\n  try {\n    response=deserializationExceptionHandler.handle((InternalProcessorContext<?,?>)processorContext,rawRecord,deserializationException);\n  }\n catch (  final Exception fatalUserException) {\n    log.error(\"Deserialization error callback failed after deserialization error for record {}\",rawRecord,deserializationException);\n    throw new StreamsException(\"Fatal user code error in deserialization error callback\",fatalUserException);\n  }\n  if (response == DeserializationExceptionHandler.DeserializationHandlerResponse.FAIL) {\n    throw new StreamsException(\"Deserialization exception handler is set to fail upon\" + \" a deserialization error. If you would rather have the streaming pipeline\" + \" continue after a deserialization error, please set the \" + DEFAULT_DESERIALIZATION_EXCEPTION_HANDLER_CLASS_CONFIG + \" appropriately.\",deserializationException);\n  }\n else {\n    log.warn(\"Skipping record due to deserialization error. topic=[{}] partition=[{}] offset=[{}]\",rawRecord.topic(),rawRecord.partition(),rawRecord.offset(),deserializationException);\n    droppedRecordsSensor.record();\n    return null;\n  }\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 95,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2376,
        "startLineNumber" : 56,
        "startColumnNumber" : 8,
        "endLineNumber" : 102,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  return new ConsumerRecord<>(rawRecord.topic(),rawRecord.partition(),rawRecord.offset(),rawRecord.timestamp(),TimestampType.CREATE_TIME,rawRecord.serializedKeySize(),rawRecord.serializedValueSize(),sourceNode.deserializeKey(rawRecord.topic(),rawRecord.headers(),rawRecord.key()),sourceNode.deserializeValue(rawRecord.topic(),rawRecord.headers(),rawRecord.value()),rawRecord.headers(),Optional.empty());\n}\n catch (final Exception deserializationException) {\n  final DeserializationExceptionHandler.DeserializationHandlerResponse response;\n  try {\n    response=deserializationExceptionHandler.handle((InternalProcessorContext<?,?>)processorContext,rawRecord,deserializationException);\n  }\n catch (  final Exception fatalUserException) {\n    log.error(\"Deserialization error callback failed after deserialization error for record {}\",rawRecord,deserializationException);\n    throw new StreamsException(\"Fatal user code error in deserialization error callback\",fatalUserException);\n  }\n  if (response == DeserializationExceptionHandler.DeserializationHandlerResponse.FAIL) {\n    throw new StreamsException(\"Deserialization exception handler is set to fail upon\" + \" a deserialization error. If you would rather have the streaming pipeline\" + \" continue after a deserialization error, please set the \" + DEFAULT_DESERIALIZATION_EXCEPTION_HANDLER_CLASS_CONFIG + \" appropriately.\",deserializationException);\n  }\n else {\n    log.warn(\"Skipping record due to deserialization error. topic=[{}] partition=[{}] offset=[{}]\",rawRecord.topic(),rawRecord.partition(),rawRecord.offset(),deserializationException);\n    droppedRecordsSensor.record();\n    return null;\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 153,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2393,
        "startLineNumber" : 54,
        "startColumnNumber" : 95,
        "endLineNumber" : 103,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    return new ConsumerRecord<>(rawRecord.topic(),rawRecord.partition(),rawRecord.offset(),rawRecord.timestamp(),TimestampType.CREATE_TIME,rawRecord.serializedKeySize(),rawRecord.serializedValueSize(),sourceNode.deserializeKey(rawRecord.topic(),rawRecord.headers(),rawRecord.key()),sourceNode.deserializeValue(rawRecord.topic(),rawRecord.headers(),rawRecord.value()),rawRecord.headers(),Optional.empty());\n  }\n catch (  final Exception deserializationException) {\n    final DeserializationExceptionHandler.DeserializationHandlerResponse response;\n    try {\n      response=deserializationExceptionHandler.handle((InternalProcessorContext<?,?>)processorContext,rawRecord,deserializationException);\n    }\n catch (    final Exception fatalUserException) {\n      log.error(\"Deserialization error callback failed after deserialization error for record {}\",rawRecord,deserializationException);\n      throw new StreamsException(\"Fatal user code error in deserialization error callback\",fatalUserException);\n    }\n    if (response == DeserializationExceptionHandler.DeserializationHandlerResponse.FAIL) {\n      throw new StreamsException(\"Deserialization exception handler is set to fail upon\" + \" a deserialization error. If you would rather have the streaming pipeline\" + \" continue after a deserialization error, please set the \" + DEFAULT_DESERIALIZATION_EXCEPTION_HANDLER_CLASS_CONFIG + \" appropriately.\",deserializationException);\n    }\n else {\n      log.warn(\"Skipping record due to deserialization error. topic=[{}] partition=[{}] offset=[{}]\",rawRecord.topic(),rawRecord.partition(),rawRecord.offset(),deserializationException);\n      droppedRecordsSensor.record();\n      return null;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 154,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2876,
        "startLineNumber" : 48,
        "startColumnNumber" : 4,
        "endLineNumber" : 103,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * @throws StreamsException if a deserialization error occurs and the deserialization callback returns{@link DeserializationExceptionHandler.DeserializationHandlerResponse#FAIL FAIL}or throws an exception itself\n */\nConsumerRecord<Object,Object> deserialize(final ProcessorContext<?,?> processorContext,final ConsumerRecord<byte[],byte[]> rawRecord){\n  try {\n    return new ConsumerRecord<>(rawRecord.topic(),rawRecord.partition(),rawRecord.offset(),rawRecord.timestamp(),TimestampType.CREATE_TIME,rawRecord.serializedKeySize(),rawRecord.serializedValueSize(),sourceNode.deserializeKey(rawRecord.topic(),rawRecord.headers(),rawRecord.key()),sourceNode.deserializeValue(rawRecord.topic(),rawRecord.headers(),rawRecord.value()),rawRecord.headers(),Optional.empty());\n  }\n catch (  final Exception deserializationException) {\n    final DeserializationExceptionHandler.DeserializationHandlerResponse response;\n    try {\n      response=deserializationExceptionHandler.handle((InternalProcessorContext<?,?>)processorContext,rawRecord,deserializationException);\n    }\n catch (    final Exception fatalUserException) {\n      log.error(\"Deserialization error callback failed after deserialization error for record {}\",rawRecord,deserializationException);\n      throw new StreamsException(\"Fatal user code error in deserialization error callback\",fatalUserException);\n    }\n    if (response == DeserializationExceptionHandler.DeserializationHandlerResponse.FAIL) {\n      throw new StreamsException(\"Deserialization exception handler is set to fail upon\" + \" a deserialization error. If you would rather have the streaming pipeline\" + \" continue after a deserialization error, please set the \" + DEFAULT_DESERIALIZATION_EXCEPTION_HANDLER_CLASS_CONFIG + \" appropriately.\",deserializationException);\n    }\n else {\n      log.warn(\"Skipping record due to deserialization error. topic=[{}] partition=[{}] offset=[{}]\",rawRecord.topic(),rawRecord.partition(),rawRecord.offset(),deserializationException);\n      droppedRecordsSensor.record();\n      return null;\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 184,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 100,
        "startColumnNumber" : 16,
        "endLineNumber" : 100,
        "endColumnNumber" : 28
      },
      "nodeContext" : "return null;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 100,
    "startColumnNumber" : 23,
    "endLineNumber" : 100,
    "endColumnNumber" : 27
  } ],
  "layoutRelationDataList" : [ ]
}