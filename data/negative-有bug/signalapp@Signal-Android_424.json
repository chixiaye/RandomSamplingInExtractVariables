{
  "id" : 424,
  "expression" : "false",
  "projectName" : "signalapp@Signal-Android",
  "commitID" : "7e91132e7ed62a58b5f347de252ab1eda3f43b90",
  "filePath" : "/app/src/main/java/org/thoughtcrime/securesms/util/IdentityUtil.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 76,
      "startColumnNumber" : 148,
      "endLineNumber" : 76,
      "endColumnNumber" : 153
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 76,
        "startColumnNumber" : 43,
        "endLineNumber" : 76,
        "endColumnNumber" : 160
      },
      "nodeContext" : "new IncomingTextMessage(recipient.getId(),1,time,-1,time,null,Optional.of(groupRecord.getId()),0,false,null)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 21,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 128,
        "startLineNumber" : 76,
        "startColumnNumber" : 32,
        "endLineNumber" : 76,
        "endColumnNumber" : 160
      },
      "nodeContext" : "incoming=new IncomingTextMessage(recipient.getId(),1,time,-1,time,null,Optional.of(groupRecord.getId()),0,false,null)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 23,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 149,
        "startLineNumber" : 76,
        "startColumnNumber" : 12,
        "endLineNumber" : 76,
        "endColumnNumber" : 161
      },
      "nodeContext" : "IncomingTextMessage incoming=new IncomingTextMessage(recipient.getId(),1,time,-1,time,null,Optional.of(groupRecord.getId()),0,false,null);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 26,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 398,
        "startLineNumber" : 75,
        "startColumnNumber" : 22,
        "endLineNumber" : 82,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  IncomingTextMessage incoming=new IncomingTextMessage(recipient.getId(),1,time,-1,time,null,Optional.of(groupRecord.getId()),0,false,null);\n  if (verified)   incoming=new IncomingIdentityVerifiedMessage(incoming);\n else   incoming=new IncomingIdentityDefaultMessage(incoming);\n  smsDatabase.insertMessageInbox(incoming);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 48,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1188,
        "startLineNumber" : 75,
        "startColumnNumber" : 10,
        "endLineNumber" : 93,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (remote) {\n  IncomingTextMessage incoming=new IncomingTextMessage(recipient.getId(),1,time,-1,time,null,Optional.of(groupRecord.getId()),0,false,null);\n  if (verified)   incoming=new IncomingIdentityVerifiedMessage(incoming);\n else   incoming=new IncomingIdentityDefaultMessage(incoming);\n  smsDatabase.insertMessageInbox(incoming);\n}\n else {\n  RecipientId recipientId=DatabaseFactory.getRecipientDatabase(context).getOrInsertFromGroupId(groupRecord.getId());\n  Recipient groupRecipient=Recipient.resolved(recipientId);\n  long threadId=DatabaseFactory.getThreadDatabase(context).getOrCreateThreadIdFor(groupRecipient);\n  OutgoingTextMessage outgoing;\n  if (verified)   outgoing=new OutgoingIdentityVerifiedMessage(recipient);\n else   outgoing=new OutgoingIdentityDefaultMessage(recipient);\n  DatabaseFactory.getSmsDatabase(context).insertMessageOutbox(threadId,outgoing,false,time,null);\n  DatabaseFactory.getThreadDatabase(context).update(threadId,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 127,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1211,
        "startLineNumber" : 73,
        "startColumnNumber" : 116,
        "endLineNumber" : 94,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (remote) {\n    IncomingTextMessage incoming=new IncomingTextMessage(recipient.getId(),1,time,-1,time,null,Optional.of(groupRecord.getId()),0,false,null);\n    if (verified)     incoming=new IncomingIdentityVerifiedMessage(incoming);\n else     incoming=new IncomingIdentityDefaultMessage(incoming);\n    smsDatabase.insertMessageInbox(incoming);\n  }\n else {\n    RecipientId recipientId=DatabaseFactory.getRecipientDatabase(context).getOrInsertFromGroupId(groupRecord.getId());\n    Recipient groupRecipient=Recipient.resolved(recipientId);\n    long threadId=DatabaseFactory.getThreadDatabase(context).getOrCreateThreadIdFor(groupRecipient);\n    OutgoingTextMessage outgoing;\n    if (verified)     outgoing=new OutgoingIdentityVerifiedMessage(recipient);\n else     outgoing=new OutgoingIdentityDefaultMessage(recipient);\n    DatabaseFactory.getSmsDatabase(context).insertMessageOutbox(threadId,outgoing,false,time,null);\n    DatabaseFactory.getThreadDatabase(context).update(threadId,true);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 128,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1319,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (groupRecord.getMembers().contains(recipient.getId()) && groupRecord.isActive() && !groupRecord.isMms()) {\n  if (remote) {\n    IncomingTextMessage incoming=new IncomingTextMessage(recipient.getId(),1,time,-1,time,null,Optional.of(groupRecord.getId()),0,false,null);\n    if (verified)     incoming=new IncomingIdentityVerifiedMessage(incoming);\n else     incoming=new IncomingIdentityDefaultMessage(incoming);\n    smsDatabase.insertMessageInbox(incoming);\n  }\n else {\n    RecipientId recipientId=DatabaseFactory.getRecipientDatabase(context).getOrInsertFromGroupId(groupRecord.getId());\n    Recipient groupRecipient=Recipient.resolved(recipientId);\n    long threadId=DatabaseFactory.getThreadDatabase(context).getOrCreateThreadIdFor(groupRecipient);\n    OutgoingTextMessage outgoing;\n    if (verified)     outgoing=new OutgoingIdentityVerifiedMessage(recipient);\n else     outgoing=new OutgoingIdentityDefaultMessage(recipient);\n    DatabaseFactory.getSmsDatabase(context).insertMessageOutbox(threadId,outgoing,false,time,null);\n    DatabaseFactory.getThreadDatabase(context).update(threadId,true);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 145,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1337,
        "startLineNumber" : 72,
        "startColumnNumber" : 55,
        "endLineNumber" : 95,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (groupRecord.getMembers().contains(recipient.getId()) && groupRecord.isActive() && !groupRecord.isMms()) {\n    if (remote) {\n      IncomingTextMessage incoming=new IncomingTextMessage(recipient.getId(),1,time,-1,time,null,Optional.of(groupRecord.getId()),0,false,null);\n      if (verified)       incoming=new IncomingIdentityVerifiedMessage(incoming);\n else       incoming=new IncomingIdentityDefaultMessage(incoming);\n      smsDatabase.insertMessageInbox(incoming);\n    }\n else {\n      RecipientId recipientId=DatabaseFactory.getRecipientDatabase(context).getOrInsertFromGroupId(groupRecord.getId());\n      Recipient groupRecipient=Recipient.resolved(recipientId);\n      long threadId=DatabaseFactory.getThreadDatabase(context).getOrCreateThreadIdFor(groupRecipient);\n      OutgoingTextMessage outgoing;\n      if (verified)       outgoing=new OutgoingIdentityVerifiedMessage(recipient);\n else       outgoing=new OutgoingIdentityDefaultMessage(recipient);\n      DatabaseFactory.getSmsDatabase(context).insertMessageOutbox(threadId,outgoing,false,time,null);\n      DatabaseFactory.getThreadDatabase(context).update(threadId,true);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 146,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1386,
        "startLineNumber" : 72,
        "startColumnNumber" : 6,
        "endLineNumber" : 95,
        "endColumnNumber" : 7
      },
      "nodeContext" : "while ((groupRecord=reader.getNext()) != null) {\n  if (groupRecord.getMembers().contains(recipient.getId()) && groupRecord.isActive() && !groupRecord.isMms()) {\n    if (remote) {\n      IncomingTextMessage incoming=new IncomingTextMessage(recipient.getId(),1,time,-1,time,null,Optional.of(groupRecord.getId()),0,false,null);\n      if (verified)       incoming=new IncomingIdentityVerifiedMessage(incoming);\n else       incoming=new IncomingIdentityDefaultMessage(incoming);\n      smsDatabase.insertMessageInbox(incoming);\n    }\n else {\n      RecipientId recipientId=DatabaseFactory.getRecipientDatabase(context).getOrInsertFromGroupId(groupRecord.getId());\n      Recipient groupRecipient=Recipient.resolved(recipientId);\n      long threadId=DatabaseFactory.getThreadDatabase(context).getOrCreateThreadIdFor(groupRecipient);\n      OutgoingTextMessage outgoing;\n      if (verified)       outgoing=new OutgoingIdentityVerifiedMessage(recipient);\n else       outgoing=new OutgoingIdentityDefaultMessage(recipient);\n      DatabaseFactory.getSmsDatabase(context).insertMessageOutbox(threadId,outgoing,false,time,null);\n      DatabaseFactory.getThreadDatabase(context).update(threadId,true);\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 155,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1447,
        "startLineNumber" : 68,
        "startColumnNumber" : 66,
        "endLineNumber" : 96,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  GroupDatabase.GroupRecord groupRecord;\n  while ((groupRecord=reader.getNext()) != null) {\n    if (groupRecord.getMembers().contains(recipient.getId()) && groupRecord.isActive() && !groupRecord.isMms()) {\n      if (remote) {\n        IncomingTextMessage incoming=new IncomingTextMessage(recipient.getId(),1,time,-1,time,null,Optional.of(groupRecord.getId()),0,false,null);\n        if (verified)         incoming=new IncomingIdentityVerifiedMessage(incoming);\n else         incoming=new IncomingIdentityDefaultMessage(incoming);\n        smsDatabase.insertMessageInbox(incoming);\n      }\n else {\n        RecipientId recipientId=DatabaseFactory.getRecipientDatabase(context).getOrInsertFromGroupId(groupRecord.getId());\n        Recipient groupRecipient=Recipient.resolved(recipientId);\n        long threadId=DatabaseFactory.getThreadDatabase(context).getOrCreateThreadIdFor(groupRecipient);\n        OutgoingTextMessage outgoing;\n        if (verified)         outgoing=new OutgoingIdentityVerifiedMessage(recipient);\n else         outgoing=new OutgoingIdentityDefaultMessage(recipient);\n        DatabaseFactory.getSmsDatabase(context).insertMessageOutbox(threadId,outgoing,false,time,null);\n        DatabaseFactory.getThreadDatabase(context).update(threadId,true);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 163,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1509,
        "startLineNumber" : 68,
        "startColumnNumber" : 4,
        "endLineNumber" : 96,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (GroupDatabase.Reader reader=groupDatabase.getGroups()){\n  GroupDatabase.GroupRecord groupRecord;\n  while ((groupRecord=reader.getNext()) != null) {\n    if (groupRecord.getMembers().contains(recipient.getId()) && groupRecord.isActive() && !groupRecord.isMms()) {\n      if (remote) {\n        IncomingTextMessage incoming=new IncomingTextMessage(recipient.getId(),1,time,-1,time,null,Optional.of(groupRecord.getId()),0,false,null);\n        if (verified)         incoming=new IncomingIdentityVerifiedMessage(incoming);\n else         incoming=new IncomingIdentityDefaultMessage(incoming);\n        smsDatabase.insertMessageInbox(incoming);\n      }\n else {\n        RecipientId recipientId=DatabaseFactory.getRecipientDatabase(context).getOrInsertFromGroupId(groupRecord.getId());\n        Recipient groupRecipient=Recipient.resolved(recipientId);\n        long threadId=DatabaseFactory.getThreadDatabase(context).getOrCreateThreadIdFor(groupRecipient);\n        OutgoingTextMessage outgoing;\n        if (verified)         outgoing=new OutgoingIdentityVerifiedMessage(recipient);\n else         outgoing=new OutgoingIdentityDefaultMessage(recipient);\n        DatabaseFactory.getSmsDatabase(context).insertMessageOutbox(threadId,outgoing,false,time,null);\n        DatabaseFactory.getThreadDatabase(context).update(threadId,true);\n      }\n    }\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 174,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2649,
        "startLineNumber" : 63,
        "startColumnNumber" : 2,
        "endLineNumber" : 117,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  long time=System.currentTimeMillis();\n  MessageDatabase smsDatabase=DatabaseFactory.getSmsDatabase(context);\n  GroupDatabase groupDatabase=DatabaseFactory.getGroupDatabase(context);\n  try (GroupDatabase.Reader reader=groupDatabase.getGroups()){\n    GroupDatabase.GroupRecord groupRecord;\n    while ((groupRecord=reader.getNext()) != null) {\n      if (groupRecord.getMembers().contains(recipient.getId()) && groupRecord.isActive() && !groupRecord.isMms()) {\n        if (remote) {\n          IncomingTextMessage incoming=new IncomingTextMessage(recipient.getId(),1,time,-1,time,null,Optional.of(groupRecord.getId()),0,false,null);\n          if (verified)           incoming=new IncomingIdentityVerifiedMessage(incoming);\n else           incoming=new IncomingIdentityDefaultMessage(incoming);\n          smsDatabase.insertMessageInbox(incoming);\n        }\n else {\n          RecipientId recipientId=DatabaseFactory.getRecipientDatabase(context).getOrInsertFromGroupId(groupRecord.getId());\n          Recipient groupRecipient=Recipient.resolved(recipientId);\n          long threadId=DatabaseFactory.getThreadDatabase(context).getOrCreateThreadIdFor(groupRecipient);\n          OutgoingTextMessage outgoing;\n          if (verified)           outgoing=new OutgoingIdentityVerifiedMessage(recipient);\n else           outgoing=new OutgoingIdentityDefaultMessage(recipient);\n          DatabaseFactory.getSmsDatabase(context).insertMessageOutbox(threadId,outgoing,false,time,null);\n          DatabaseFactory.getThreadDatabase(context).update(threadId,true);\n        }\n      }\n    }\n  }\n   if (remote) {\n    IncomingTextMessage incoming=new IncomingTextMessage(recipient.getId(),1,time,-1,time,null,Optional.absent(),0,false,null);\n    if (verified)     incoming=new IncomingIdentityVerifiedMessage(incoming);\n else     incoming=new IncomingIdentityDefaultMessage(incoming);\n    smsDatabase.insertMessageInbox(incoming);\n  }\n else {\n    OutgoingTextMessage outgoing;\n    if (verified)     outgoing=new OutgoingIdentityVerifiedMessage(recipient);\n else     outgoing=new OutgoingIdentityDefaultMessage(recipient);\n    long threadId=DatabaseFactory.getThreadDatabase(context).getOrCreateThreadIdFor(recipient);\n    Log.i(TAG,\"Inserting verified outbox...\");\n    DatabaseFactory.getSmsDatabase(context).insertMessageOutbox(threadId,outgoing,false,time,null);\n    DatabaseFactory.getThreadDatabase(context).update(threadId,true);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 307,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2763,
        "startLineNumber" : 62,
        "startColumnNumber" : 2,
        "endLineNumber" : 117,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static void markIdentityVerified(Context context,Recipient recipient,boolean verified,boolean remote){\n  long time=System.currentTimeMillis();\n  MessageDatabase smsDatabase=DatabaseFactory.getSmsDatabase(context);\n  GroupDatabase groupDatabase=DatabaseFactory.getGroupDatabase(context);\n  try (GroupDatabase.Reader reader=groupDatabase.getGroups()){\n    GroupDatabase.GroupRecord groupRecord;\n    while ((groupRecord=reader.getNext()) != null) {\n      if (groupRecord.getMembers().contains(recipient.getId()) && groupRecord.isActive() && !groupRecord.isMms()) {\n        if (remote) {\n          IncomingTextMessage incoming=new IncomingTextMessage(recipient.getId(),1,time,-1,time,null,Optional.of(groupRecord.getId()),0,false,null);\n          if (verified)           incoming=new IncomingIdentityVerifiedMessage(incoming);\n else           incoming=new IncomingIdentityDefaultMessage(incoming);\n          smsDatabase.insertMessageInbox(incoming);\n        }\n else {\n          RecipientId recipientId=DatabaseFactory.getRecipientDatabase(context).getOrInsertFromGroupId(groupRecord.getId());\n          Recipient groupRecipient=Recipient.resolved(recipientId);\n          long threadId=DatabaseFactory.getThreadDatabase(context).getOrCreateThreadIdFor(groupRecipient);\n          OutgoingTextMessage outgoing;\n          if (verified)           outgoing=new OutgoingIdentityVerifiedMessage(recipient);\n else           outgoing=new OutgoingIdentityDefaultMessage(recipient);\n          DatabaseFactory.getSmsDatabase(context).insertMessageOutbox(threadId,outgoing,false,time,null);\n          DatabaseFactory.getThreadDatabase(context).update(threadId,true);\n        }\n      }\n    }\n  }\n   if (remote) {\n    IncomingTextMessage incoming=new IncomingTextMessage(recipient.getId(),1,time,-1,time,null,Optional.absent(),0,false,null);\n    if (verified)     incoming=new IncomingIdentityVerifiedMessage(incoming);\n else     incoming=new IncomingIdentityDefaultMessage(incoming);\n    smsDatabase.insertMessageInbox(incoming);\n  }\n else {\n    OutgoingTextMessage outgoing;\n    if (verified)     outgoing=new OutgoingIdentityVerifiedMessage(recipient);\n else     outgoing=new OutgoingIdentityDefaultMessage(recipient);\n    long threadId=DatabaseFactory.getThreadDatabase(context).getOrCreateThreadIdFor(recipient);\n    Log.i(TAG,\"Inserting verified outbox...\");\n    DatabaseFactory.getSmsDatabase(context).insertMessageOutbox(threadId,outgoing,false,time,null);\n    DatabaseFactory.getThreadDatabase(context).update(threadId,true);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 326,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 149,
        "startLineNumber" : 76,
        "startColumnNumber" : 12,
        "endLineNumber" : 76,
        "endColumnNumber" : 161
      },
      "nodeContext" : "IncomingTextMessage incoming=new IncomingTextMessage(recipient.getId(),1,time,-1,time,null,Optional.of(groupRecord.getId()),0,false,null);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 26,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 91,
      "startColumnNumber" : 92,
      "endLineNumber" : 91,
      "endColumnNumber" : 97
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 91,
        "startColumnNumber" : 12,
        "endLineNumber" : 91,
        "endColumnNumber" : 110
      },
      "nodeContext" : "DatabaseFactory.getSmsDatabase(context).insertMessageOutbox(threadId,outgoing,false,time,null)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 91,
        "startColumnNumber" : 12,
        "endLineNumber" : 91,
        "endColumnNumber" : 111
      },
      "nodeContext" : "DatabaseFactory.getSmsDatabase(context).insertMessageOutbox(threadId,outgoing,false,time,null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 772,
        "startLineNumber" : 82,
        "startColumnNumber" : 17,
        "endLineNumber" : 93,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  RecipientId recipientId=DatabaseFactory.getRecipientDatabase(context).getOrInsertFromGroupId(groupRecord.getId());\n  Recipient groupRecipient=Recipient.resolved(recipientId);\n  long threadId=DatabaseFactory.getThreadDatabase(context).getOrCreateThreadIdFor(groupRecipient);\n  OutgoingTextMessage outgoing;\n  if (verified)   outgoing=new OutgoingIdentityVerifiedMessage(recipient);\n else   outgoing=new OutgoingIdentityDefaultMessage(recipient);\n  DatabaseFactory.getSmsDatabase(context).insertMessageOutbox(threadId,outgoing,false,time,null);\n  DatabaseFactory.getThreadDatabase(context).update(threadId,true);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 77,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1188,
        "startLineNumber" : 75,
        "startColumnNumber" : 10,
        "endLineNumber" : 93,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (remote) {\n  IncomingTextMessage incoming=new IncomingTextMessage(recipient.getId(),1,time,-1,time,null,Optional.of(groupRecord.getId()),0,false,null);\n  if (verified)   incoming=new IncomingIdentityVerifiedMessage(incoming);\n else   incoming=new IncomingIdentityDefaultMessage(incoming);\n  smsDatabase.insertMessageInbox(incoming);\n}\n else {\n  RecipientId recipientId=DatabaseFactory.getRecipientDatabase(context).getOrInsertFromGroupId(groupRecord.getId());\n  Recipient groupRecipient=Recipient.resolved(recipientId);\n  long threadId=DatabaseFactory.getThreadDatabase(context).getOrCreateThreadIdFor(groupRecipient);\n  OutgoingTextMessage outgoing;\n  if (verified)   outgoing=new OutgoingIdentityVerifiedMessage(recipient);\n else   outgoing=new OutgoingIdentityDefaultMessage(recipient);\n  DatabaseFactory.getSmsDatabase(context).insertMessageOutbox(threadId,outgoing,false,time,null);\n  DatabaseFactory.getThreadDatabase(context).update(threadId,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 127,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1211,
        "startLineNumber" : 73,
        "startColumnNumber" : 116,
        "endLineNumber" : 94,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (remote) {\n    IncomingTextMessage incoming=new IncomingTextMessage(recipient.getId(),1,time,-1,time,null,Optional.of(groupRecord.getId()),0,false,null);\n    if (verified)     incoming=new IncomingIdentityVerifiedMessage(incoming);\n else     incoming=new IncomingIdentityDefaultMessage(incoming);\n    smsDatabase.insertMessageInbox(incoming);\n  }\n else {\n    RecipientId recipientId=DatabaseFactory.getRecipientDatabase(context).getOrInsertFromGroupId(groupRecord.getId());\n    Recipient groupRecipient=Recipient.resolved(recipientId);\n    long threadId=DatabaseFactory.getThreadDatabase(context).getOrCreateThreadIdFor(groupRecipient);\n    OutgoingTextMessage outgoing;\n    if (verified)     outgoing=new OutgoingIdentityVerifiedMessage(recipient);\n else     outgoing=new OutgoingIdentityDefaultMessage(recipient);\n    DatabaseFactory.getSmsDatabase(context).insertMessageOutbox(threadId,outgoing,false,time,null);\n    DatabaseFactory.getThreadDatabase(context).update(threadId,true);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 128,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1319,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (groupRecord.getMembers().contains(recipient.getId()) && groupRecord.isActive() && !groupRecord.isMms()) {\n  if (remote) {\n    IncomingTextMessage incoming=new IncomingTextMessage(recipient.getId(),1,time,-1,time,null,Optional.of(groupRecord.getId()),0,false,null);\n    if (verified)     incoming=new IncomingIdentityVerifiedMessage(incoming);\n else     incoming=new IncomingIdentityDefaultMessage(incoming);\n    smsDatabase.insertMessageInbox(incoming);\n  }\n else {\n    RecipientId recipientId=DatabaseFactory.getRecipientDatabase(context).getOrInsertFromGroupId(groupRecord.getId());\n    Recipient groupRecipient=Recipient.resolved(recipientId);\n    long threadId=DatabaseFactory.getThreadDatabase(context).getOrCreateThreadIdFor(groupRecipient);\n    OutgoingTextMessage outgoing;\n    if (verified)     outgoing=new OutgoingIdentityVerifiedMessage(recipient);\n else     outgoing=new OutgoingIdentityDefaultMessage(recipient);\n    DatabaseFactory.getSmsDatabase(context).insertMessageOutbox(threadId,outgoing,false,time,null);\n    DatabaseFactory.getThreadDatabase(context).update(threadId,true);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 145,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1337,
        "startLineNumber" : 72,
        "startColumnNumber" : 55,
        "endLineNumber" : 95,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (groupRecord.getMembers().contains(recipient.getId()) && groupRecord.isActive() && !groupRecord.isMms()) {\n    if (remote) {\n      IncomingTextMessage incoming=new IncomingTextMessage(recipient.getId(),1,time,-1,time,null,Optional.of(groupRecord.getId()),0,false,null);\n      if (verified)       incoming=new IncomingIdentityVerifiedMessage(incoming);\n else       incoming=new IncomingIdentityDefaultMessage(incoming);\n      smsDatabase.insertMessageInbox(incoming);\n    }\n else {\n      RecipientId recipientId=DatabaseFactory.getRecipientDatabase(context).getOrInsertFromGroupId(groupRecord.getId());\n      Recipient groupRecipient=Recipient.resolved(recipientId);\n      long threadId=DatabaseFactory.getThreadDatabase(context).getOrCreateThreadIdFor(groupRecipient);\n      OutgoingTextMessage outgoing;\n      if (verified)       outgoing=new OutgoingIdentityVerifiedMessage(recipient);\n else       outgoing=new OutgoingIdentityDefaultMessage(recipient);\n      DatabaseFactory.getSmsDatabase(context).insertMessageOutbox(threadId,outgoing,false,time,null);\n      DatabaseFactory.getThreadDatabase(context).update(threadId,true);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 146,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1386,
        "startLineNumber" : 72,
        "startColumnNumber" : 6,
        "endLineNumber" : 95,
        "endColumnNumber" : 7
      },
      "nodeContext" : "while ((groupRecord=reader.getNext()) != null) {\n  if (groupRecord.getMembers().contains(recipient.getId()) && groupRecord.isActive() && !groupRecord.isMms()) {\n    if (remote) {\n      IncomingTextMessage incoming=new IncomingTextMessage(recipient.getId(),1,time,-1,time,null,Optional.of(groupRecord.getId()),0,false,null);\n      if (verified)       incoming=new IncomingIdentityVerifiedMessage(incoming);\n else       incoming=new IncomingIdentityDefaultMessage(incoming);\n      smsDatabase.insertMessageInbox(incoming);\n    }\n else {\n      RecipientId recipientId=DatabaseFactory.getRecipientDatabase(context).getOrInsertFromGroupId(groupRecord.getId());\n      Recipient groupRecipient=Recipient.resolved(recipientId);\n      long threadId=DatabaseFactory.getThreadDatabase(context).getOrCreateThreadIdFor(groupRecipient);\n      OutgoingTextMessage outgoing;\n      if (verified)       outgoing=new OutgoingIdentityVerifiedMessage(recipient);\n else       outgoing=new OutgoingIdentityDefaultMessage(recipient);\n      DatabaseFactory.getSmsDatabase(context).insertMessageOutbox(threadId,outgoing,false,time,null);\n      DatabaseFactory.getThreadDatabase(context).update(threadId,true);\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 155,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1447,
        "startLineNumber" : 68,
        "startColumnNumber" : 66,
        "endLineNumber" : 96,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  GroupDatabase.GroupRecord groupRecord;\n  while ((groupRecord=reader.getNext()) != null) {\n    if (groupRecord.getMembers().contains(recipient.getId()) && groupRecord.isActive() && !groupRecord.isMms()) {\n      if (remote) {\n        IncomingTextMessage incoming=new IncomingTextMessage(recipient.getId(),1,time,-1,time,null,Optional.of(groupRecord.getId()),0,false,null);\n        if (verified)         incoming=new IncomingIdentityVerifiedMessage(incoming);\n else         incoming=new IncomingIdentityDefaultMessage(incoming);\n        smsDatabase.insertMessageInbox(incoming);\n      }\n else {\n        RecipientId recipientId=DatabaseFactory.getRecipientDatabase(context).getOrInsertFromGroupId(groupRecord.getId());\n        Recipient groupRecipient=Recipient.resolved(recipientId);\n        long threadId=DatabaseFactory.getThreadDatabase(context).getOrCreateThreadIdFor(groupRecipient);\n        OutgoingTextMessage outgoing;\n        if (verified)         outgoing=new OutgoingIdentityVerifiedMessage(recipient);\n else         outgoing=new OutgoingIdentityDefaultMessage(recipient);\n        DatabaseFactory.getSmsDatabase(context).insertMessageOutbox(threadId,outgoing,false,time,null);\n        DatabaseFactory.getThreadDatabase(context).update(threadId,true);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 163,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1509,
        "startLineNumber" : 68,
        "startColumnNumber" : 4,
        "endLineNumber" : 96,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (GroupDatabase.Reader reader=groupDatabase.getGroups()){\n  GroupDatabase.GroupRecord groupRecord;\n  while ((groupRecord=reader.getNext()) != null) {\n    if (groupRecord.getMembers().contains(recipient.getId()) && groupRecord.isActive() && !groupRecord.isMms()) {\n      if (remote) {\n        IncomingTextMessage incoming=new IncomingTextMessage(recipient.getId(),1,time,-1,time,null,Optional.of(groupRecord.getId()),0,false,null);\n        if (verified)         incoming=new IncomingIdentityVerifiedMessage(incoming);\n else         incoming=new IncomingIdentityDefaultMessage(incoming);\n        smsDatabase.insertMessageInbox(incoming);\n      }\n else {\n        RecipientId recipientId=DatabaseFactory.getRecipientDatabase(context).getOrInsertFromGroupId(groupRecord.getId());\n        Recipient groupRecipient=Recipient.resolved(recipientId);\n        long threadId=DatabaseFactory.getThreadDatabase(context).getOrCreateThreadIdFor(groupRecipient);\n        OutgoingTextMessage outgoing;\n        if (verified)         outgoing=new OutgoingIdentityVerifiedMessage(recipient);\n else         outgoing=new OutgoingIdentityDefaultMessage(recipient);\n        DatabaseFactory.getSmsDatabase(context).insertMessageOutbox(threadId,outgoing,false,time,null);\n        DatabaseFactory.getThreadDatabase(context).update(threadId,true);\n      }\n    }\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 174,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2649,
        "startLineNumber" : 63,
        "startColumnNumber" : 2,
        "endLineNumber" : 117,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  long time=System.currentTimeMillis();\n  MessageDatabase smsDatabase=DatabaseFactory.getSmsDatabase(context);\n  GroupDatabase groupDatabase=DatabaseFactory.getGroupDatabase(context);\n  try (GroupDatabase.Reader reader=groupDatabase.getGroups()){\n    GroupDatabase.GroupRecord groupRecord;\n    while ((groupRecord=reader.getNext()) != null) {\n      if (groupRecord.getMembers().contains(recipient.getId()) && groupRecord.isActive() && !groupRecord.isMms()) {\n        if (remote) {\n          IncomingTextMessage incoming=new IncomingTextMessage(recipient.getId(),1,time,-1,time,null,Optional.of(groupRecord.getId()),0,false,null);\n          if (verified)           incoming=new IncomingIdentityVerifiedMessage(incoming);\n else           incoming=new IncomingIdentityDefaultMessage(incoming);\n          smsDatabase.insertMessageInbox(incoming);\n        }\n else {\n          RecipientId recipientId=DatabaseFactory.getRecipientDatabase(context).getOrInsertFromGroupId(groupRecord.getId());\n          Recipient groupRecipient=Recipient.resolved(recipientId);\n          long threadId=DatabaseFactory.getThreadDatabase(context).getOrCreateThreadIdFor(groupRecipient);\n          OutgoingTextMessage outgoing;\n          if (verified)           outgoing=new OutgoingIdentityVerifiedMessage(recipient);\n else           outgoing=new OutgoingIdentityDefaultMessage(recipient);\n          DatabaseFactory.getSmsDatabase(context).insertMessageOutbox(threadId,outgoing,false,time,null);\n          DatabaseFactory.getThreadDatabase(context).update(threadId,true);\n        }\n      }\n    }\n  }\n   if (remote) {\n    IncomingTextMessage incoming=new IncomingTextMessage(recipient.getId(),1,time,-1,time,null,Optional.absent(),0,false,null);\n    if (verified)     incoming=new IncomingIdentityVerifiedMessage(incoming);\n else     incoming=new IncomingIdentityDefaultMessage(incoming);\n    smsDatabase.insertMessageInbox(incoming);\n  }\n else {\n    OutgoingTextMessage outgoing;\n    if (verified)     outgoing=new OutgoingIdentityVerifiedMessage(recipient);\n else     outgoing=new OutgoingIdentityDefaultMessage(recipient);\n    long threadId=DatabaseFactory.getThreadDatabase(context).getOrCreateThreadIdFor(recipient);\n    Log.i(TAG,\"Inserting verified outbox...\");\n    DatabaseFactory.getSmsDatabase(context).insertMessageOutbox(threadId,outgoing,false,time,null);\n    DatabaseFactory.getThreadDatabase(context).update(threadId,true);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 307,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2763,
        "startLineNumber" : 62,
        "startColumnNumber" : 2,
        "endLineNumber" : 117,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static void markIdentityVerified(Context context,Recipient recipient,boolean verified,boolean remote){\n  long time=System.currentTimeMillis();\n  MessageDatabase smsDatabase=DatabaseFactory.getSmsDatabase(context);\n  GroupDatabase groupDatabase=DatabaseFactory.getGroupDatabase(context);\n  try (GroupDatabase.Reader reader=groupDatabase.getGroups()){\n    GroupDatabase.GroupRecord groupRecord;\n    while ((groupRecord=reader.getNext()) != null) {\n      if (groupRecord.getMembers().contains(recipient.getId()) && groupRecord.isActive() && !groupRecord.isMms()) {\n        if (remote) {\n          IncomingTextMessage incoming=new IncomingTextMessage(recipient.getId(),1,time,-1,time,null,Optional.of(groupRecord.getId()),0,false,null);\n          if (verified)           incoming=new IncomingIdentityVerifiedMessage(incoming);\n else           incoming=new IncomingIdentityDefaultMessage(incoming);\n          smsDatabase.insertMessageInbox(incoming);\n        }\n else {\n          RecipientId recipientId=DatabaseFactory.getRecipientDatabase(context).getOrInsertFromGroupId(groupRecord.getId());\n          Recipient groupRecipient=Recipient.resolved(recipientId);\n          long threadId=DatabaseFactory.getThreadDatabase(context).getOrCreateThreadIdFor(groupRecipient);\n          OutgoingTextMessage outgoing;\n          if (verified)           outgoing=new OutgoingIdentityVerifiedMessage(recipient);\n else           outgoing=new OutgoingIdentityDefaultMessage(recipient);\n          DatabaseFactory.getSmsDatabase(context).insertMessageOutbox(threadId,outgoing,false,time,null);\n          DatabaseFactory.getThreadDatabase(context).update(threadId,true);\n        }\n      }\n    }\n  }\n   if (remote) {\n    IncomingTextMessage incoming=new IncomingTextMessage(recipient.getId(),1,time,-1,time,null,Optional.absent(),0,false,null);\n    if (verified)     incoming=new IncomingIdentityVerifiedMessage(incoming);\n else     incoming=new IncomingIdentityDefaultMessage(incoming);\n    smsDatabase.insertMessageInbox(incoming);\n  }\n else {\n    OutgoingTextMessage outgoing;\n    if (verified)     outgoing=new OutgoingIdentityVerifiedMessage(recipient);\n else     outgoing=new OutgoingIdentityDefaultMessage(recipient);\n    long threadId=DatabaseFactory.getThreadDatabase(context).getOrCreateThreadIdFor(recipient);\n    Log.i(TAG,\"Inserting verified outbox...\");\n    DatabaseFactory.getSmsDatabase(context).insertMessageOutbox(threadId,outgoing,false,time,null);\n    DatabaseFactory.getThreadDatabase(context).update(threadId,true);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 326,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 91,
        "startColumnNumber" : 12,
        "endLineNumber" : 91,
        "endColumnNumber" : 111
      },
      "nodeContext" : "DatabaseFactory.getSmsDatabase(context).insertMessageOutbox(threadId,outgoing,false,time,null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 99,
      "startColumnNumber" : 127,
      "endLineNumber" : 99,
      "endColumnNumber" : 132
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 99,
        "startColumnNumber" : 37,
        "endLineNumber" : 99,
        "endColumnNumber" : 139
      },
      "nodeContext" : "new IncomingTextMessage(recipient.getId(),1,time,-1,time,null,Optional.absent(),0,false,null)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 18,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 99,
        "startColumnNumber" : 26,
        "endLineNumber" : 99,
        "endColumnNumber" : 139
      },
      "nodeContext" : "incoming=new IncomingTextMessage(recipient.getId(),1,time,-1,time,null,Optional.absent(),0,false,null)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 20,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 134,
        "startLineNumber" : 99,
        "startColumnNumber" : 6,
        "endLineNumber" : 99,
        "endColumnNumber" : 140
      },
      "nodeContext" : "IncomingTextMessage incoming=new IncomingTextMessage(recipient.getId(),1,time,-1,time,null,Optional.absent(),0,false,null);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 23,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 353,
        "startLineNumber" : 98,
        "startColumnNumber" : 16,
        "endLineNumber" : 105,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  IncomingTextMessage incoming=new IncomingTextMessage(recipient.getId(),1,time,-1,time,null,Optional.absent(),0,false,null);\n  if (verified)   incoming=new IncomingIdentityVerifiedMessage(incoming);\n else   incoming=new IncomingIdentityDefaultMessage(incoming);\n  smsDatabase.insertMessageInbox(incoming);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 45,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 903,
        "startLineNumber" : 98,
        "startColumnNumber" : 4,
        "endLineNumber" : 116,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (remote) {\n  IncomingTextMessage incoming=new IncomingTextMessage(recipient.getId(),1,time,-1,time,null,Optional.absent(),0,false,null);\n  if (verified)   incoming=new IncomingIdentityVerifiedMessage(incoming);\n else   incoming=new IncomingIdentityDefaultMessage(incoming);\n  smsDatabase.insertMessageInbox(incoming);\n}\n else {\n  OutgoingTextMessage outgoing;\n  if (verified)   outgoing=new OutgoingIdentityVerifiedMessage(recipient);\n else   outgoing=new OutgoingIdentityDefaultMessage(recipient);\n  long threadId=DatabaseFactory.getThreadDatabase(context).getOrCreateThreadIdFor(recipient);\n  Log.i(TAG,\"Inserting verified outbox...\");\n  DatabaseFactory.getSmsDatabase(context).insertMessageOutbox(threadId,outgoing,false,time,null);\n  DatabaseFactory.getThreadDatabase(context).update(threadId,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 107,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2649,
        "startLineNumber" : 63,
        "startColumnNumber" : 2,
        "endLineNumber" : 117,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  long time=System.currentTimeMillis();\n  MessageDatabase smsDatabase=DatabaseFactory.getSmsDatabase(context);\n  GroupDatabase groupDatabase=DatabaseFactory.getGroupDatabase(context);\n  try (GroupDatabase.Reader reader=groupDatabase.getGroups()){\n    GroupDatabase.GroupRecord groupRecord;\n    while ((groupRecord=reader.getNext()) != null) {\n      if (groupRecord.getMembers().contains(recipient.getId()) && groupRecord.isActive() && !groupRecord.isMms()) {\n        if (remote) {\n          IncomingTextMessage incoming=new IncomingTextMessage(recipient.getId(),1,time,-1,time,null,Optional.of(groupRecord.getId()),0,false,null);\n          if (verified)           incoming=new IncomingIdentityVerifiedMessage(incoming);\n else           incoming=new IncomingIdentityDefaultMessage(incoming);\n          smsDatabase.insertMessageInbox(incoming);\n        }\n else {\n          RecipientId recipientId=DatabaseFactory.getRecipientDatabase(context).getOrInsertFromGroupId(groupRecord.getId());\n          Recipient groupRecipient=Recipient.resolved(recipientId);\n          long threadId=DatabaseFactory.getThreadDatabase(context).getOrCreateThreadIdFor(groupRecipient);\n          OutgoingTextMessage outgoing;\n          if (verified)           outgoing=new OutgoingIdentityVerifiedMessage(recipient);\n else           outgoing=new OutgoingIdentityDefaultMessage(recipient);\n          DatabaseFactory.getSmsDatabase(context).insertMessageOutbox(threadId,outgoing,false,time,null);\n          DatabaseFactory.getThreadDatabase(context).update(threadId,true);\n        }\n      }\n    }\n  }\n   if (remote) {\n    IncomingTextMessage incoming=new IncomingTextMessage(recipient.getId(),1,time,-1,time,null,Optional.absent(),0,false,null);\n    if (verified)     incoming=new IncomingIdentityVerifiedMessage(incoming);\n else     incoming=new IncomingIdentityDefaultMessage(incoming);\n    smsDatabase.insertMessageInbox(incoming);\n  }\n else {\n    OutgoingTextMessage outgoing;\n    if (verified)     outgoing=new OutgoingIdentityVerifiedMessage(recipient);\n else     outgoing=new OutgoingIdentityDefaultMessage(recipient);\n    long threadId=DatabaseFactory.getThreadDatabase(context).getOrCreateThreadIdFor(recipient);\n    Log.i(TAG,\"Inserting verified outbox...\");\n    DatabaseFactory.getSmsDatabase(context).insertMessageOutbox(threadId,outgoing,false,time,null);\n    DatabaseFactory.getThreadDatabase(context).update(threadId,true);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 307,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2763,
        "startLineNumber" : 62,
        "startColumnNumber" : 2,
        "endLineNumber" : 117,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static void markIdentityVerified(Context context,Recipient recipient,boolean verified,boolean remote){\n  long time=System.currentTimeMillis();\n  MessageDatabase smsDatabase=DatabaseFactory.getSmsDatabase(context);\n  GroupDatabase groupDatabase=DatabaseFactory.getGroupDatabase(context);\n  try (GroupDatabase.Reader reader=groupDatabase.getGroups()){\n    GroupDatabase.GroupRecord groupRecord;\n    while ((groupRecord=reader.getNext()) != null) {\n      if (groupRecord.getMembers().contains(recipient.getId()) && groupRecord.isActive() && !groupRecord.isMms()) {\n        if (remote) {\n          IncomingTextMessage incoming=new IncomingTextMessage(recipient.getId(),1,time,-1,time,null,Optional.of(groupRecord.getId()),0,false,null);\n          if (verified)           incoming=new IncomingIdentityVerifiedMessage(incoming);\n else           incoming=new IncomingIdentityDefaultMessage(incoming);\n          smsDatabase.insertMessageInbox(incoming);\n        }\n else {\n          RecipientId recipientId=DatabaseFactory.getRecipientDatabase(context).getOrInsertFromGroupId(groupRecord.getId());\n          Recipient groupRecipient=Recipient.resolved(recipientId);\n          long threadId=DatabaseFactory.getThreadDatabase(context).getOrCreateThreadIdFor(groupRecipient);\n          OutgoingTextMessage outgoing;\n          if (verified)           outgoing=new OutgoingIdentityVerifiedMessage(recipient);\n else           outgoing=new OutgoingIdentityDefaultMessage(recipient);\n          DatabaseFactory.getSmsDatabase(context).insertMessageOutbox(threadId,outgoing,false,time,null);\n          DatabaseFactory.getThreadDatabase(context).update(threadId,true);\n        }\n      }\n    }\n  }\n   if (remote) {\n    IncomingTextMessage incoming=new IncomingTextMessage(recipient.getId(),1,time,-1,time,null,Optional.absent(),0,false,null);\n    if (verified)     incoming=new IncomingIdentityVerifiedMessage(incoming);\n else     incoming=new IncomingIdentityDefaultMessage(incoming);\n    smsDatabase.insertMessageInbox(incoming);\n  }\n else {\n    OutgoingTextMessage outgoing;\n    if (verified)     outgoing=new OutgoingIdentityVerifiedMessage(recipient);\n else     outgoing=new OutgoingIdentityDefaultMessage(recipient);\n    long threadId=DatabaseFactory.getThreadDatabase(context).getOrCreateThreadIdFor(recipient);\n    Log.i(TAG,\"Inserting verified outbox...\");\n    DatabaseFactory.getSmsDatabase(context).insertMessageOutbox(threadId,outgoing,false,time,null);\n    DatabaseFactory.getThreadDatabase(context).update(threadId,true);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 326,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 134,
        "startLineNumber" : 99,
        "startColumnNumber" : 6,
        "endLineNumber" : 99,
        "endColumnNumber" : 140
      },
      "nodeContext" : "IncomingTextMessage incoming=new IncomingTextMessage(recipient.getId(),1,time,-1,time,null,Optional.absent(),0,false,null);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 23,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 114,
      "startColumnNumber" : 86,
      "endLineNumber" : 114,
      "endColumnNumber" : 91
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 114,
        "startColumnNumber" : 6,
        "endLineNumber" : 114,
        "endColumnNumber" : 104
      },
      "nodeContext" : "DatabaseFactory.getSmsDatabase(context).insertMessageOutbox(threadId,outgoing,false,time,null)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 114,
        "startColumnNumber" : 6,
        "endLineNumber" : 114,
        "endColumnNumber" : 105
      },
      "nodeContext" : "DatabaseFactory.getSmsDatabase(context).insertMessageOutbox(threadId,outgoing,false,time,null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 532,
        "startLineNumber" : 105,
        "startColumnNumber" : 11,
        "endLineNumber" : 116,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  OutgoingTextMessage outgoing;\n  if (verified)   outgoing=new OutgoingIdentityVerifiedMessage(recipient);\n else   outgoing=new OutgoingIdentityDefaultMessage(recipient);\n  long threadId=DatabaseFactory.getThreadDatabase(context).getOrCreateThreadIdFor(recipient);\n  Log.i(TAG,\"Inserting verified outbox...\");\n  DatabaseFactory.getSmsDatabase(context).insertMessageOutbox(threadId,outgoing,false,time,null);\n  DatabaseFactory.getThreadDatabase(context).update(threadId,true);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 60,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 903,
        "startLineNumber" : 98,
        "startColumnNumber" : 4,
        "endLineNumber" : 116,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (remote) {\n  IncomingTextMessage incoming=new IncomingTextMessage(recipient.getId(),1,time,-1,time,null,Optional.absent(),0,false,null);\n  if (verified)   incoming=new IncomingIdentityVerifiedMessage(incoming);\n else   incoming=new IncomingIdentityDefaultMessage(incoming);\n  smsDatabase.insertMessageInbox(incoming);\n}\n else {\n  OutgoingTextMessage outgoing;\n  if (verified)   outgoing=new OutgoingIdentityVerifiedMessage(recipient);\n else   outgoing=new OutgoingIdentityDefaultMessage(recipient);\n  long threadId=DatabaseFactory.getThreadDatabase(context).getOrCreateThreadIdFor(recipient);\n  Log.i(TAG,\"Inserting verified outbox...\");\n  DatabaseFactory.getSmsDatabase(context).insertMessageOutbox(threadId,outgoing,false,time,null);\n  DatabaseFactory.getThreadDatabase(context).update(threadId,true);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 107,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2649,
        "startLineNumber" : 63,
        "startColumnNumber" : 2,
        "endLineNumber" : 117,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  long time=System.currentTimeMillis();\n  MessageDatabase smsDatabase=DatabaseFactory.getSmsDatabase(context);\n  GroupDatabase groupDatabase=DatabaseFactory.getGroupDatabase(context);\n  try (GroupDatabase.Reader reader=groupDatabase.getGroups()){\n    GroupDatabase.GroupRecord groupRecord;\n    while ((groupRecord=reader.getNext()) != null) {\n      if (groupRecord.getMembers().contains(recipient.getId()) && groupRecord.isActive() && !groupRecord.isMms()) {\n        if (remote) {\n          IncomingTextMessage incoming=new IncomingTextMessage(recipient.getId(),1,time,-1,time,null,Optional.of(groupRecord.getId()),0,false,null);\n          if (verified)           incoming=new IncomingIdentityVerifiedMessage(incoming);\n else           incoming=new IncomingIdentityDefaultMessage(incoming);\n          smsDatabase.insertMessageInbox(incoming);\n        }\n else {\n          RecipientId recipientId=DatabaseFactory.getRecipientDatabase(context).getOrInsertFromGroupId(groupRecord.getId());\n          Recipient groupRecipient=Recipient.resolved(recipientId);\n          long threadId=DatabaseFactory.getThreadDatabase(context).getOrCreateThreadIdFor(groupRecipient);\n          OutgoingTextMessage outgoing;\n          if (verified)           outgoing=new OutgoingIdentityVerifiedMessage(recipient);\n else           outgoing=new OutgoingIdentityDefaultMessage(recipient);\n          DatabaseFactory.getSmsDatabase(context).insertMessageOutbox(threadId,outgoing,false,time,null);\n          DatabaseFactory.getThreadDatabase(context).update(threadId,true);\n        }\n      }\n    }\n  }\n   if (remote) {\n    IncomingTextMessage incoming=new IncomingTextMessage(recipient.getId(),1,time,-1,time,null,Optional.absent(),0,false,null);\n    if (verified)     incoming=new IncomingIdentityVerifiedMessage(incoming);\n else     incoming=new IncomingIdentityDefaultMessage(incoming);\n    smsDatabase.insertMessageInbox(incoming);\n  }\n else {\n    OutgoingTextMessage outgoing;\n    if (verified)     outgoing=new OutgoingIdentityVerifiedMessage(recipient);\n else     outgoing=new OutgoingIdentityDefaultMessage(recipient);\n    long threadId=DatabaseFactory.getThreadDatabase(context).getOrCreateThreadIdFor(recipient);\n    Log.i(TAG,\"Inserting verified outbox...\");\n    DatabaseFactory.getSmsDatabase(context).insertMessageOutbox(threadId,outgoing,false,time,null);\n    DatabaseFactory.getThreadDatabase(context).update(threadId,true);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 307,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2763,
        "startLineNumber" : 62,
        "startColumnNumber" : 2,
        "endLineNumber" : 117,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static void markIdentityVerified(Context context,Recipient recipient,boolean verified,boolean remote){\n  long time=System.currentTimeMillis();\n  MessageDatabase smsDatabase=DatabaseFactory.getSmsDatabase(context);\n  GroupDatabase groupDatabase=DatabaseFactory.getGroupDatabase(context);\n  try (GroupDatabase.Reader reader=groupDatabase.getGroups()){\n    GroupDatabase.GroupRecord groupRecord;\n    while ((groupRecord=reader.getNext()) != null) {\n      if (groupRecord.getMembers().contains(recipient.getId()) && groupRecord.isActive() && !groupRecord.isMms()) {\n        if (remote) {\n          IncomingTextMessage incoming=new IncomingTextMessage(recipient.getId(),1,time,-1,time,null,Optional.of(groupRecord.getId()),0,false,null);\n          if (verified)           incoming=new IncomingIdentityVerifiedMessage(incoming);\n else           incoming=new IncomingIdentityDefaultMessage(incoming);\n          smsDatabase.insertMessageInbox(incoming);\n        }\n else {\n          RecipientId recipientId=DatabaseFactory.getRecipientDatabase(context).getOrInsertFromGroupId(groupRecord.getId());\n          Recipient groupRecipient=Recipient.resolved(recipientId);\n          long threadId=DatabaseFactory.getThreadDatabase(context).getOrCreateThreadIdFor(groupRecipient);\n          OutgoingTextMessage outgoing;\n          if (verified)           outgoing=new OutgoingIdentityVerifiedMessage(recipient);\n else           outgoing=new OutgoingIdentityDefaultMessage(recipient);\n          DatabaseFactory.getSmsDatabase(context).insertMessageOutbox(threadId,outgoing,false,time,null);\n          DatabaseFactory.getThreadDatabase(context).update(threadId,true);\n        }\n      }\n    }\n  }\n   if (remote) {\n    IncomingTextMessage incoming=new IncomingTextMessage(recipient.getId(),1,time,-1,time,null,Optional.absent(),0,false,null);\n    if (verified)     incoming=new IncomingIdentityVerifiedMessage(incoming);\n else     incoming=new IncomingIdentityDefaultMessage(incoming);\n    smsDatabase.insertMessageInbox(incoming);\n  }\n else {\n    OutgoingTextMessage outgoing;\n    if (verified)     outgoing=new OutgoingIdentityVerifiedMessage(recipient);\n else     outgoing=new OutgoingIdentityDefaultMessage(recipient);\n    long threadId=DatabaseFactory.getThreadDatabase(context).getOrCreateThreadIdFor(recipient);\n    Log.i(TAG,\"Inserting verified outbox...\");\n    DatabaseFactory.getSmsDatabase(context).insertMessageOutbox(threadId,outgoing,false,time,null);\n    DatabaseFactory.getThreadDatabase(context).update(threadId,true);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 326,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 114,
        "startColumnNumber" : 6,
        "endLineNumber" : 114,
        "endColumnNumber" : 105
      },
      "nodeContext" : "DatabaseFactory.getSmsDatabase(context).insertMessageOutbox(threadId,outgoing,false,time,null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 76,
    "startColumnNumber" : 148,
    "endLineNumber" : 76,
    "endColumnNumber" : 153
  }, {
    "charLength" : 5,
    "startLineNumber" : 91,
    "startColumnNumber" : 92,
    "endLineNumber" : 91,
    "endColumnNumber" : 97
  }, {
    "charLength" : 5,
    "startLineNumber" : 99,
    "startColumnNumber" : 127,
    "endLineNumber" : 99,
    "endColumnNumber" : 132
  }, {
    "charLength" : 5,
    "startLineNumber" : 114,
    "startColumnNumber" : 86,
    "endLineNumber" : 114,
    "endColumnNumber" : 91
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 11
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 11
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 10
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  } ]
}