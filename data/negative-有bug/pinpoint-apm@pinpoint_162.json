{
  "id" : 162,
  "expression" : "\"agentId\"",
  "projectName" : "pinpoint-apm@pinpoint",
  "commitID" : "cd51da314be7fe261d7dc630dd7c51ce6bb3cc0c",
  "filePath" : "/profiler/src/test/java/com/navercorp/pinpoint/profiler/monitor/AgentStatMonitorTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"agentId\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 70,
      "startColumnNumber" : 73,
      "endLineNumber" : 70,
      "endColumnNumber" : 82
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 165,
        "startLineNumber" : 70,
        "startColumnNumber" : 35,
        "endLineNumber" : 71,
        "endColumnNumber" : 88
      },
      "nodeContext" : "new AgentStatMonitor(this.dataSender,\"agentId\",System.currentTimeMillis(),agentStatCollectorFactory,collectionIntervalMs,numCollectionsPerBatch)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 13,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 175,
        "startLineNumber" : 70,
        "startColumnNumber" : 25,
        "endLineNumber" : 71,
        "endColumnNumber" : 88
      },
      "nodeContext" : "monitor=new AgentStatMonitor(this.dataSender,\"agentId\",System.currentTimeMillis(),agentStatCollectorFactory,collectionIntervalMs,numCollectionsPerBatch)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 193,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 71,
        "endColumnNumber" : 89
      },
      "nodeContext" : "AgentStatMonitor monitor=new AgentStatMonitor(this.dataSender,\"agentId\",System.currentTimeMillis(),agentStatCollectorFactory,collectionIntervalMs,numCollectionsPerBatch);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1153,
        "startLineNumber" : 59,
        "startColumnNumber" : 67,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final long collectionIntervalMs=1000 * 1;\n  final int numCollectionsPerBatch=2;\n  final int minNumBatchToTest=2;\n  final long totalTestDurationMs=collectionIntervalMs + collectionIntervalMs * numCollectionsPerBatch * minNumBatchToTest;\n  System.setProperty(\"pinpoint.log\",\"test.\");\n  TraceContext testTraceContext=new MockTraceContextFactory().create();\n  AgentStatCollectorFactory agentStatCollectorFactory=new AgentStatCollectorFactory(testTraceContext);\n  AgentStatMonitor monitor=new AgentStatMonitor(this.dataSender,\"agentId\",System.currentTimeMillis(),agentStatCollectorFactory,collectionIntervalMs,numCollectionsPerBatch);\n  monitor.start();\n  Thread.sleep(totalTestDurationMs);\n  monitor.stop();\n  assertTrue(tBaseRecorder.size() >= minNumBatchToTest);\n  for (  TAgentStatBatch agentStatBatch : tBaseRecorder) {\n    logger.debug(\"agentStatBatch:{}\",agentStatBatch);\n    assertTrue(agentStatBatch.getAgentStats().size() <= numCollectionsPerBatch);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 119,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1226,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testAgentStatMonitor() throws InterruptedException {\n  final long collectionIntervalMs=1000 * 1;\n  final int numCollectionsPerBatch=2;\n  final int minNumBatchToTest=2;\n  final long totalTestDurationMs=collectionIntervalMs + collectionIntervalMs * numCollectionsPerBatch * minNumBatchToTest;\n  System.setProperty(\"pinpoint.log\",\"test.\");\n  TraceContext testTraceContext=new MockTraceContextFactory().create();\n  AgentStatCollectorFactory agentStatCollectorFactory=new AgentStatCollectorFactory(testTraceContext);\n  AgentStatMonitor monitor=new AgentStatMonitor(this.dataSender,\"agentId\",System.currentTimeMillis(),agentStatCollectorFactory,collectionIntervalMs,numCollectionsPerBatch);\n  monitor.start();\n  Thread.sleep(totalTestDurationMs);\n  monitor.stop();\n  assertTrue(tBaseRecorder.size() >= minNumBatchToTest);\n  for (  TAgentStatBatch agentStatBatch : tBaseRecorder) {\n    logger.debug(\"agentStatBatch:{}\",agentStatBatch);\n    assertTrue(agentStatBatch.getAgentStats().size() <= numCollectionsPerBatch);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 127,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 165,
        "startLineNumber" : 70,
        "startColumnNumber" : 35,
        "endLineNumber" : 71,
        "endColumnNumber" : 88
      },
      "nodeContext" : "new AgentStatMonitor(this.dataSender,\"agentId\",System.currentTimeMillis(),agentStatCollectorFactory,collectionIntervalMs,numCollectionsPerBatch)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 13,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 70,
    "startColumnNumber" : 73,
    "endLineNumber" : 70,
    "endColumnNumber" : 82
  } ],
  "layoutRelationDataList" : [ ]
}