{
  "id" : 415,
  "expression" : "new Action0(){\n  @Override public void call(){\n    sendAckOnTransport().doOnError(new Action1<Throwable>(){\n      @Override public void call(      Throwable throwable){\n        logger.warn(\"Failed to send ack for register operation for instanceInfo {}\",instanceInfo);\n      }\n    }\n);\n  }\n}\n",
  "projectName" : "Netflix@eureka",
  "commitID" : "2f6d04dae7f6fca2a17e85fc53020e13272a79b2",
  "filePath" : "/eureka-write-server/src/main/java/com/netflix/eureka2/server/channel/RegistrationChannelImpl.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new Action0(){\n  @Override public void call(){\n    sendAckOnTransport().doOnError(new Action1<Throwable>(){\n      @Override public void call(      Throwable throwable){\n        logger.warn(\"Failed to send ack for register operation for instanceInfo {}\",instanceInfo);\n      }\n    }\n);\n  }\n}\n",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 496,
      "startLineNumber" : 164,
      "startColumnNumber" : 31,
      "endLineNumber" : 174,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 40,
    "astHeight" : 13,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 1097,
        "startLineNumber" : 150,
        "startColumnNumber" : 15,
        "endLineNumber" : 174,
        "endColumnNumber" : 18
      },
      "nodeContext" : "registry.register(instanceInfo,selfSource).ignoreElements().cast(Void.class).doOnError(new Action1<Throwable>(){\n  @Override public void call(  Throwable throwable){\n    sendErrorOnTransport(throwable).doOnTerminate(new Action0(){\n      @Override public void call(){\n        close();\n      }\n    }\n);\n  }\n}\n).doOnCompleted(new Action0(){\n  @Override public void call(){\n    sendAckOnTransport().doOnError(new Action1<Throwable>(){\n      @Override public void call(      Throwable throwable){\n        logger.warn(\"Failed to send ack for register operation for instanceInfo {}\",instanceInfo);\n      }\n    }\n);\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 94,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1105,
        "startLineNumber" : 150,
        "startColumnNumber" : 8,
        "endLineNumber" : 174,
        "endColumnNumber" : 19
      },
      "nodeContext" : "return registry.register(instanceInfo,selfSource).ignoreElements().cast(Void.class).doOnError(new Action1<Throwable>(){\n  @Override public void call(  Throwable throwable){\n    sendErrorOnTransport(throwable).doOnTerminate(new Action0(){\n      @Override public void call(){\n        close();\n      }\n    }\n);\n  }\n}\n).doOnCompleted(new Action0(){\n  @Override public void call(){\n    sendAckOnTransport().doOnError(new Action1<Throwable>(){\n      @Override public void call(      Throwable throwable){\n        logger.warn(\"Failed to send ack for register operation for instanceInfo {}\",instanceInfo);\n      }\n    }\n);\n  }\n}\n);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 95,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2168,
        "startLineNumber" : 127,
        "startColumnNumber" : 70,
        "endLineNumber" : 175,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!moveToState(STATES.Idle,STATES.Registered) && !moveToState(STATES.Registered,STATES.Registered)) {\n    STATES currentState=state.get();\n    if (STATES.Closed == currentState) {\n      return Observable.error(CHANNEL_CLOSED_EXCEPTION);\n    }\n else {\n      Exception exception=new IllegalStateException(\"Unknown state error when registering, current state: \" + currentState);\n      return sendErrorOnTransport(exception).doOnTerminate(new Action0(){\n        @Override public void call(){\n          close();\n        }\n      }\n);\n    }\n  }\n  logger.debug(\"Registering service in registry: {}\",instanceInfo);\n  instanceInfoRef.set(instanceInfo);\n  return registry.register(instanceInfo,selfSource).ignoreElements().cast(Void.class).doOnError(new Action1<Throwable>(){\n    @Override public void call(    Throwable throwable){\n      sendErrorOnTransport(throwable).doOnTerminate(new Action0(){\n        @Override public void call(){\n          close();\n        }\n      }\n);\n    }\n  }\n).doOnCompleted(new Action0(){\n    @Override public void call(){\n      sendAckOnTransport().doOnError(new Action1<Throwable>(){\n        @Override public void call(        Throwable throwable){\n          logger.warn(\"Failed to send ack for register operation for instanceInfo {}\",instanceInfo);\n        }\n      }\n);\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 180,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2757,
        "startLineNumber" : 117,
        "startColumnNumber" : 4,
        "endLineNumber" : 175,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Cases: 1. channel state is Idle. Call register on the registry and 1a. if successful, ack on the channel. If the ack fails, we ignore the failure and let the client deal with it 2b. if unsuccessful, send error on the transport and close the channel (client need to reconnect back) 2. channel state is Registered. This is the same as case 1. 3. channel state is Closed. send ChannelClosedException on the transport and re-close the channel.\n */\n@Override public Observable<Void> register(final InstanceInfo instanceInfo){\n  if (!moveToState(STATES.Idle,STATES.Registered) && !moveToState(STATES.Registered,STATES.Registered)) {\n    STATES currentState=state.get();\n    if (STATES.Closed == currentState) {\n      return Observable.error(CHANNEL_CLOSED_EXCEPTION);\n    }\n else {\n      Exception exception=new IllegalStateException(\"Unknown state error when registering, current state: \" + currentState);\n      return sendErrorOnTransport(exception).doOnTerminate(new Action0(){\n        @Override public void call(){\n          close();\n        }\n      }\n);\n    }\n  }\n  logger.debug(\"Registering service in registry: {}\",instanceInfo);\n  instanceInfoRef.set(instanceInfo);\n  return registry.register(instanceInfo,selfSource).ignoreElements().cast(Void.class).doOnError(new Action1<Throwable>(){\n    @Override public void call(    Throwable throwable){\n      sendErrorOnTransport(throwable).doOnTerminate(new Action0(){\n        @Override public void call(){\n          close();\n        }\n      }\n);\n    }\n  }\n).doOnCompleted(new Action0(){\n    @Override public void call(){\n      sendAckOnTransport().doOnError(new Action1<Throwable>(){\n        @Override public void call(        Throwable throwable){\n          logger.warn(\"Failed to send ack for register operation for instanceInfo {}\",instanceInfo);\n        }\n      }\n);\n    }\n  }\n);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 196,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 1097,
        "startLineNumber" : 150,
        "startColumnNumber" : 15,
        "endLineNumber" : 174,
        "endColumnNumber" : 18
      },
      "nodeContext" : "registry.register(instanceInfo,selfSource).ignoreElements().cast(Void.class).doOnError(new Action1<Throwable>(){\n  @Override public void call(  Throwable throwable){\n    sendErrorOnTransport(throwable).doOnTerminate(new Action0(){\n      @Override public void call(){\n        close();\n      }\n    }\n);\n  }\n}\n).doOnCompleted(new Action0(){\n  @Override public void call(){\n    sendAckOnTransport().doOnError(new Action1<Throwable>(){\n      @Override public void call(      Throwable throwable){\n        logger.warn(\"Failed to send ack for register operation for instanceInfo {}\",instanceInfo);\n      }\n    }\n);\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 94,
      "astHeight" : 15
    },
    "tokenLength" : 20,
    "type" : ""
  } ],
  "positionList" : [ {
    "charLength" : 496,
    "startLineNumber" : 164,
    "startColumnNumber" : 31,
    "endLineNumber" : 174,
    "endColumnNumber" : 17
  } ],
  "layoutRelationDataList" : [ ]
}