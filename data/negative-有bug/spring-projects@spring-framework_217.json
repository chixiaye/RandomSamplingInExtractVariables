{
  "id" : 217,
  "expression" : "Integer",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAttributeEditor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Integer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 73,
      "startColumnNumber" : 21,
      "endLineNumber" : 73,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 73,
        "startColumnNumber" : 21,
        "endLineNumber" : 73,
        "endColumnNumber" : 44
      },
      "nodeContext" : "Integer.parseInt(value)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 73,
        "startColumnNumber" : 5,
        "endLineNumber" : 73,
        "endColumnNumber" : 45
      },
      "nodeContext" : "attr.setTimeout(Integer.parseInt(value))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 73,
        "startColumnNumber" : 5,
        "endLineNumber" : 73,
        "endColumnNumber" : 46
      },
      "nodeContext" : "attr.setTimeout(Integer.parseInt(value));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 144,
        "startLineNumber" : 71,
        "startColumnNumber" : 77,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String value=token.substring(DefaultTransactionAttribute.PREFIX_TIMEOUT.length());\n  attr.setTimeout(Integer.parseInt(value));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 782,
        "startLineNumber" : 71,
        "startColumnNumber" : 9,
        "endLineNumber" : 86,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_TIMEOUT)) {\n  String value=token.substring(DefaultTransactionAttribute.PREFIX_TIMEOUT.length());\n  attr.setTimeout(Integer.parseInt(value));\n}\n else if (token.equals(RuleBasedTransactionAttribute.READ_ONLY_MARKER)) {\n  attr.setReadOnly(true);\n}\n else if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_COMMIT_RULE)) {\n  attr.getRollbackRules().add(new NoRollbackRuleAttribute(token.substring(1)));\n}\n else if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_ROLLBACK_RULE)) {\n  attr.getRollbackRules().add(new RollbackRuleAttribute(token.substring(1)));\n}\n else {\n  throw new IllegalArgumentException(\"Invalid transaction attribute token: [\" + token + \"]\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 93,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 909,
        "startLineNumber" : 68,
        "startColumnNumber" : 9,
        "endLineNumber" : 86,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_ISOLATION)) {\n  attr.setIsolationLevelName(token);\n}\n else if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_TIMEOUT)) {\n  String value=token.substring(DefaultTransactionAttribute.PREFIX_TIMEOUT.length());\n  attr.setTimeout(Integer.parseInt(value));\n}\n else if (token.equals(RuleBasedTransactionAttribute.READ_ONLY_MARKER)) {\n  attr.setReadOnly(true);\n}\n else if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_COMMIT_RULE)) {\n  attr.getRollbackRules().add(new NoRollbackRuleAttribute(token.substring(1)));\n}\n else if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_ROLLBACK_RULE)) {\n  attr.getRollbackRules().add(new RollbackRuleAttribute(token.substring(1)));\n}\n else {\n  throw new IllegalArgumentException(\"Invalid transaction attribute token: [\" + token + \"]\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 106,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1043,
        "startLineNumber" : 65,
        "startColumnNumber" : 4,
        "endLineNumber" : 86,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_PROPAGATION)) {\n  attr.setPropagationBehaviorName(token);\n}\n else if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_ISOLATION)) {\n  attr.setIsolationLevelName(token);\n}\n else if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_TIMEOUT)) {\n  String value=token.substring(DefaultTransactionAttribute.PREFIX_TIMEOUT.length());\n  attr.setTimeout(Integer.parseInt(value));\n}\n else if (token.equals(RuleBasedTransactionAttribute.READ_ONLY_MARKER)) {\n  attr.setReadOnly(true);\n}\n else if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_COMMIT_RULE)) {\n  attr.getRollbackRules().add(new NoRollbackRuleAttribute(token.substring(1)));\n}\n else if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_ROLLBACK_RULE)) {\n  attr.getRollbackRules().add(new RollbackRuleAttribute(token.substring(1)));\n}\n else {\n  throw new IllegalArgumentException(\"Invalid transaction attribute token: [\" + token + \"]\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 119,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1437,
        "startLineNumber" : 56,
        "startColumnNumber" : 43,
        "endLineNumber" : 87,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  String token=StringUtils.trimWhitespace(tokens[i].trim());\n  if (StringUtils.containsWhitespace(token)) {\n    throw new IllegalArgumentException(\"Transaction attribute token contains illegal whitespace: [\" + token + \"]\");\n  }\n  if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_PROPAGATION)) {\n    attr.setPropagationBehaviorName(token);\n  }\n else   if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_ISOLATION)) {\n    attr.setIsolationLevelName(token);\n  }\n else   if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_TIMEOUT)) {\n    String value=token.substring(DefaultTransactionAttribute.PREFIX_TIMEOUT.length());\n    attr.setTimeout(Integer.parseInt(value));\n  }\n else   if (token.equals(RuleBasedTransactionAttribute.READ_ONLY_MARKER)) {\n    attr.setReadOnly(true);\n  }\n else   if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_COMMIT_RULE)) {\n    attr.getRollbackRules().add(new NoRollbackRuleAttribute(token.substring(1)));\n  }\n else   if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_ROLLBACK_RULE)) {\n    attr.getRollbackRules().add(new RollbackRuleAttribute(token.substring(1)));\n  }\n else {\n    throw new IllegalArgumentException(\"Invalid transaction attribute token: [\" + token + \"]\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 147,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1477,
        "startLineNumber" : 56,
        "startColumnNumber" : 3,
        "endLineNumber" : 87,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (int i=0; i < tokens.length; i++) {\n  String token=StringUtils.trimWhitespace(tokens[i].trim());\n  if (StringUtils.containsWhitespace(token)) {\n    throw new IllegalArgumentException(\"Transaction attribute token contains illegal whitespace: [\" + token + \"]\");\n  }\n  if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_PROPAGATION)) {\n    attr.setPropagationBehaviorName(token);\n  }\n else   if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_ISOLATION)) {\n    attr.setIsolationLevelName(token);\n  }\n else   if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_TIMEOUT)) {\n    String value=token.substring(DefaultTransactionAttribute.PREFIX_TIMEOUT.length());\n    attr.setTimeout(Integer.parseInt(value));\n  }\n else   if (token.equals(RuleBasedTransactionAttribute.READ_ONLY_MARKER)) {\n    attr.setReadOnly(true);\n  }\n else   if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_COMMIT_RULE)) {\n    attr.getRollbackRules().add(new NoRollbackRuleAttribute(token.substring(1)));\n  }\n else   if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_ROLLBACK_RULE)) {\n    attr.getRollbackRules().add(new RollbackRuleAttribute(token.substring(1)));\n  }\n else {\n    throw new IllegalArgumentException(\"Invalid transaction attribute token: [\" + token + \"]\");\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 160,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1681,
        "startLineNumber" : 52,
        "startColumnNumber" : 35,
        "endLineNumber" : 89,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String[] tokens=StringUtils.commaDelimitedListToStringArray(text);\n  RuleBasedTransactionAttribute attr=new RuleBasedTransactionAttribute();\n  for (int i=0; i < tokens.length; i++) {\n    String token=StringUtils.trimWhitespace(tokens[i].trim());\n    if (StringUtils.containsWhitespace(token)) {\n      throw new IllegalArgumentException(\"Transaction attribute token contains illegal whitespace: [\" + token + \"]\");\n    }\n    if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_PROPAGATION)) {\n      attr.setPropagationBehaviorName(token);\n    }\n else     if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_ISOLATION)) {\n      attr.setIsolationLevelName(token);\n    }\n else     if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_TIMEOUT)) {\n      String value=token.substring(DefaultTransactionAttribute.PREFIX_TIMEOUT.length());\n      attr.setTimeout(Integer.parseInt(value));\n    }\n else     if (token.equals(RuleBasedTransactionAttribute.READ_ONLY_MARKER)) {\n      attr.setReadOnly(true);\n    }\n else     if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_COMMIT_RULE)) {\n      attr.getRollbackRules().add(new NoRollbackRuleAttribute(token.substring(1)));\n    }\n else     if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_ROLLBACK_RULE)) {\n      attr.getRollbackRules().add(new RollbackRuleAttribute(token.substring(1)));\n    }\n else {\n      throw new IllegalArgumentException(\"Invalid transaction attribute token: [\" + token + \"]\");\n    }\n  }\n  setValue(attr);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 184,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1746,
        "startLineNumber" : 52,
        "startColumnNumber" : 2,
        "endLineNumber" : 92,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (StringUtils.hasLength(text)) {\n  String[] tokens=StringUtils.commaDelimitedListToStringArray(text);\n  RuleBasedTransactionAttribute attr=new RuleBasedTransactionAttribute();\n  for (int i=0; i < tokens.length; i++) {\n    String token=StringUtils.trimWhitespace(tokens[i].trim());\n    if (StringUtils.containsWhitespace(token)) {\n      throw new IllegalArgumentException(\"Transaction attribute token contains illegal whitespace: [\" + token + \"]\");\n    }\n    if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_PROPAGATION)) {\n      attr.setPropagationBehaviorName(token);\n    }\n else     if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_ISOLATION)) {\n      attr.setIsolationLevelName(token);\n    }\n else     if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_TIMEOUT)) {\n      String value=token.substring(DefaultTransactionAttribute.PREFIX_TIMEOUT.length());\n      attr.setTimeout(Integer.parseInt(value));\n    }\n else     if (token.equals(RuleBasedTransactionAttribute.READ_ONLY_MARKER)) {\n      attr.setReadOnly(true);\n    }\n else     if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_COMMIT_RULE)) {\n      attr.getRollbackRules().add(new NoRollbackRuleAttribute(token.substring(1)));\n    }\n else     if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_ROLLBACK_RULE)) {\n      attr.getRollbackRules().add(new RollbackRuleAttribute(token.substring(1)));\n    }\n else {\n      throw new IllegalArgumentException(\"Invalid transaction attribute token: [\" + token + \"]\");\n    }\n  }\n  setValue(attr);\n}\n else {\n  setValue(null);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 194,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1753,
        "startLineNumber" : 51,
        "startColumnNumber" : 68,
        "endLineNumber" : 93,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (StringUtils.hasLength(text)) {\n    String[] tokens=StringUtils.commaDelimitedListToStringArray(text);\n    RuleBasedTransactionAttribute attr=new RuleBasedTransactionAttribute();\n    for (int i=0; i < tokens.length; i++) {\n      String token=StringUtils.trimWhitespace(tokens[i].trim());\n      if (StringUtils.containsWhitespace(token)) {\n        throw new IllegalArgumentException(\"Transaction attribute token contains illegal whitespace: [\" + token + \"]\");\n      }\n      if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_PROPAGATION)) {\n        attr.setPropagationBehaviorName(token);\n      }\n else       if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_ISOLATION)) {\n        attr.setIsolationLevelName(token);\n      }\n else       if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_TIMEOUT)) {\n        String value=token.substring(DefaultTransactionAttribute.PREFIX_TIMEOUT.length());\n        attr.setTimeout(Integer.parseInt(value));\n      }\n else       if (token.equals(RuleBasedTransactionAttribute.READ_ONLY_MARKER)) {\n        attr.setReadOnly(true);\n      }\n else       if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_COMMIT_RULE)) {\n        attr.getRollbackRules().add(new NoRollbackRuleAttribute(token.substring(1)));\n      }\n else       if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_ROLLBACK_RULE)) {\n        attr.getRollbackRules().add(new RollbackRuleAttribute(token.substring(1)));\n      }\n else {\n        throw new IllegalArgumentException(\"Invalid transaction attribute token: [\" + token + \"]\");\n      }\n    }\n    setValue(attr);\n  }\n else {\n    setValue(null);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 195,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2070,
        "startLineNumber" : 45,
        "startColumnNumber" : 1,
        "endLineNumber" : 93,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Format is PROPAGATION_NAME,ISOLATION_NAME,readOnly,timeout_NNNN,+Exception1,-Exception2. Null or the empty string means that the method is non transactional.\n * @see java.beans.PropertyEditor#setAsText(java.lang.String)\n */\n@Override public void setAsText(String text) throws IllegalArgumentException {\n  if (StringUtils.hasLength(text)) {\n    String[] tokens=StringUtils.commaDelimitedListToStringArray(text);\n    RuleBasedTransactionAttribute attr=new RuleBasedTransactionAttribute();\n    for (int i=0; i < tokens.length; i++) {\n      String token=StringUtils.trimWhitespace(tokens[i].trim());\n      if (StringUtils.containsWhitespace(token)) {\n        throw new IllegalArgumentException(\"Transaction attribute token contains illegal whitespace: [\" + token + \"]\");\n      }\n      if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_PROPAGATION)) {\n        attr.setPropagationBehaviorName(token);\n      }\n else       if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_ISOLATION)) {\n        attr.setIsolationLevelName(token);\n      }\n else       if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_TIMEOUT)) {\n        String value=token.substring(DefaultTransactionAttribute.PREFIX_TIMEOUT.length());\n        attr.setTimeout(Integer.parseInt(value));\n      }\n else       if (token.equals(RuleBasedTransactionAttribute.READ_ONLY_MARKER)) {\n        attr.setReadOnly(true);\n      }\n else       if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_COMMIT_RULE)) {\n        attr.getRollbackRules().add(new NoRollbackRuleAttribute(token.substring(1)));\n      }\n else       if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_ROLLBACK_RULE)) {\n        attr.getRollbackRules().add(new RollbackRuleAttribute(token.substring(1)));\n      }\n else {\n        throw new IllegalArgumentException(\"Invalid transaction attribute token: [\" + token + \"]\");\n      }\n    }\n    setValue(attr);\n  }\n else {\n    setValue(null);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 208,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 73,
        "startColumnNumber" : 5,
        "endLineNumber" : 73,
        "endColumnNumber" : 46
      },
      "nodeContext" : "attr.setTimeout(Integer.parseInt(value));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Integer"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 73,
    "startColumnNumber" : 21,
    "endLineNumber" : 73,
    "endColumnNumber" : 28
  } ],
  "layoutRelationDataList" : [ ]
}