{
  "id" : 172,
  "expression" : "\"put cluster node,the cluster name is \" + cluster + \"; the product name=\"+ product+ \"; the ip list=\"+ ips",
  "projectName" : "alibaba@nacos",
  "commitID" : "4e7346db1d6657ffe07c96bebd2d348229c2812f",
  "filePath" : "/address/src/main/java/com/alibaba/nacos/address/controller/AddressServerClusterController.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"put cluster node,the cluster name is \" + cluster + \"; the product name=\"+ product+ \"; the ip list=\"+ ips",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 124,
      "startLineNumber" : 79,
      "startColumnNumber" : 36,
      "endLineNumber" : 80,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 7,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 153,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 41
      },
      "nodeContext" : "Loggers.ADDRESS_LOGGER.info(\"put cluster node,the cluster name is \" + cluster + \"; the product name=\"+ product+ \"; the ip list=\"+ ips)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 154,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 42
      },
      "nodeContext" : "Loggers.ADDRESS_LOGGER.info(\"put cluster node,the cluster name is \" + cluster + \"; the product name=\"+ product+ \"; the ip list=\"+ ips);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2187,
        "startLineNumber" : 70,
        "startColumnNumber" : 100,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String productName=addressServerGeneratorManager.generateProductName(product);\n  String clusterName=addressServerManager.getDefaultClusterNameIfEmpty(cluster);\n  String rawProductName=addressServerManager.getRawProductName(product);\n  String rawClusterName=addressServerManager.getRawClusterName(cluster);\n  Loggers.ADDRESS_LOGGER.info(\"put cluster node,the cluster name is \" + cluster + \"; the product name=\"+ product+ \"; the ip list=\"+ ips);\n  ResponseEntity responseEntity;\n  try {\n    String serviceName=addressServerGeneratorManager.generateNacosServiceName(productName);\n    Cluster clusterObj=new Cluster();\n    clusterObj.setName(clusterName);\n    clusterObj.setHealthChecker(new AbstractHealthChecker.None());\n    serviceManager.createServiceIfAbsent(Constants.DEFAULT_NAMESPACE_ID,serviceName,false,clusterObj);\n    String[] ipArray=addressServerManager.splitIps(ips);\n    String checkResult=IPUtil.checkIPs(ipArray);\n    if (IPUtil.checkOK(checkResult)) {\n      List<Instance> instanceList=addressServerGeneratorManager.generateInstancesByIps(serviceName,rawProductName,clusterName,ipArray);\n      for (      Instance instance : instanceList) {\n        serviceManager.registerInstance(Constants.DEFAULT_NAMESPACE_ID,serviceName,instance);\n      }\n      responseEntity=ResponseEntity.ok(\"product=\" + rawProductName + \",cluster=\"+ rawClusterName+ \"; put success with size=\"+ instanceList.size());\n    }\n else {\n      responseEntity=ResponseEntity.status(HttpStatus.BAD_REQUEST).body(checkResult);\n    }\n  }\n catch (  Exception e) {\n    responseEntity=ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(e.getMessage());\n  }\n  return responseEntity;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 205,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2690,
        "startLineNumber" : 60,
        "startColumnNumber" : 4,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Create new cluster.\n * @param product Ip list of products to be associated\n * @param cluster Ip list of product cluster to be associated\n * @param ips     will post ip list.\n * @return result of create new cluster\n */\n@RequestMapping(value=\"\",method=RequestMethod.POST) public ResponseEntity postCluster(@RequestParam(required=false) String product,@RequestParam(required=false) String cluster,@RequestParam(name=\"ips\") String ips){\n  String productName=addressServerGeneratorManager.generateProductName(product);\n  String clusterName=addressServerManager.getDefaultClusterNameIfEmpty(cluster);\n  String rawProductName=addressServerManager.getRawProductName(product);\n  String rawClusterName=addressServerManager.getRawClusterName(cluster);\n  Loggers.ADDRESS_LOGGER.info(\"put cluster node,the cluster name is \" + cluster + \"; the product name=\"+ product+ \"; the ip list=\"+ ips);\n  ResponseEntity responseEntity;\n  try {\n    String serviceName=addressServerGeneratorManager.generateNacosServiceName(productName);\n    Cluster clusterObj=new Cluster();\n    clusterObj.setName(clusterName);\n    clusterObj.setHealthChecker(new AbstractHealthChecker.None());\n    serviceManager.createServiceIfAbsent(Constants.DEFAULT_NAMESPACE_ID,serviceName,false,clusterObj);\n    String[] ipArray=addressServerManager.splitIps(ips);\n    String checkResult=IPUtil.checkIPs(ipArray);\n    if (IPUtil.checkOK(checkResult)) {\n      List<Instance> instanceList=addressServerGeneratorManager.generateInstancesByIps(serviceName,rawProductName,clusterName,ipArray);\n      for (      Instance instance : instanceList) {\n        serviceManager.registerInstance(Constants.DEFAULT_NAMESPACE_ID,serviceName,instance);\n      }\n      responseEntity=ResponseEntity.ok(\"product=\" + rawProductName + \",cluster=\"+ rawClusterName+ \"; put success with size=\"+ instanceList.size());\n    }\n else {\n      responseEntity=ResponseEntity.status(HttpStatus.BAD_REQUEST).body(checkResult);\n    }\n  }\n catch (  Exception e) {\n    responseEntity=ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(e.getMessage());\n  }\n  return responseEntity;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 248,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 154,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 42
      },
      "nodeContext" : "Loggers.ADDRESS_LOGGER.info(\"put cluster node,the cluster name is \" + cluster + \"; the product name=\"+ product+ \"; the ip list=\"+ ips);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 20,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 124,
    "startLineNumber" : 79,
    "startColumnNumber" : 36,
    "endLineNumber" : 80,
    "endColumnNumber" : 40
  } ],
  "layoutRelationDataList" : [ ]
}