{
  "id" : 144,
  "expression" : "1.4285715f",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/extensions-contrib/moving-average-query/src/test/java/org/apache/druid/query/movingaverage/MovingAverageIterableTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "1.4285715f",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 221,
      "startColumnNumber" : 24,
      "endLineNumber" : 221,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 221,
        "startColumnNumber" : 4,
        "endLineNumber" : 221,
        "endColumnNumber" : 96
      },
      "nodeContext" : "Assert.assertEquals(1.4285715f,caResult.getMetric(\"movingAvgPageViews\").floatValue(),0.0f)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 221,
        "startColumnNumber" : 4,
        "endLineNumber" : 221,
        "endColumnNumber" : 97
      },
      "nodeContext" : "Assert.assertEquals(1.4285715f,caResult.getMetric(\"movingAvgPageViews\").floatValue(),0.0f);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2593,
        "startLineNumber" : 170,
        "startColumnNumber" : 2,
        "endLineNumber" : 240,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Map<String,Object> event1=new HashMap<>();\n  Map<String,Object> event2=new HashMap<>();\n  Map<String,Object> event3=new HashMap<>();\n  Map<String,Object> event4=new HashMap<>();\n  List<DimensionSpec> ds=new ArrayList<>();\n  ds.add(new DefaultDimensionSpec(\"gender\",\"gender\"));\n  event1.put(\"gender\",\"m\");\n  event1.put(\"pageViews\",10L);\n  Row row1=new MapBasedRow(JAN_1,event1);\n  event2.put(\"gender\",\"m\");\n  event2.put(\"pageViews\",20L);\n  Row row2=new MapBasedRow(JAN_2,event2);\n  event3.put(\"gender\",\"m\");\n  event3.put(\"pageViews\",30L);\n  Row row3=new MapBasedRow(JAN_3,event3);\n  event4.put(\"gender\",\"f\");\n  event4.put(\"pageViews\",40L);\n  Row row4=new MapBasedRow(JAN_3,event4);\n  float retval=14.5f;\n  Sequence<RowBucket> seq=Sequences.simple(Arrays.asList(new RowBucket(JAN_1,Collections.singletonList(row1)),new RowBucket(JAN_2,Collections.singletonList(row2)),new RowBucket(JAN_3,Arrays.asList(row3,row4))));\n  Iterator<Row> iter=new MovingAverageIterable(seq,ds,Arrays.asList(new ConstantAveragerFactory(\"costPageViews\",7,retval),new LongMeanAveragerFactory(\"movingAvgPageViews\",7,1,\"pageViews\")),Collections.emptyList(),Collections.singletonList(new LongSumAggregatorFactory(\"pageViews\",\"pageViews\"))).iterator();\n  Assert.assertTrue(iter.hasNext());\n  Row caResult=iter.next();\n  Assert.assertEquals(JAN_1,caResult.getTimestamp());\n  Assert.assertEquals(\"m\",(caResult.getDimension(\"gender\")).get(0));\n  Assert.assertEquals(retval,caResult.getMetric(\"costPageViews\").floatValue(),0.0f);\n  Assert.assertEquals(1.4285715f,caResult.getMetric(\"movingAvgPageViews\").floatValue(),0.0f);\n  Assert.assertTrue(iter.hasNext());\n  caResult=iter.next();\n  Assert.assertEquals(\"m\",(caResult.getDimension(\"gender\")).get(0));\n  Assert.assertEquals(4.285714f,caResult.getMetric(\"movingAvgPageViews\").floatValue(),0.0f);\n  Assert.assertTrue(iter.hasNext());\n  caResult=iter.next();\n  Assert.assertEquals(\"m\",(caResult.getDimension(\"gender\")).get(0));\n  Assert.assertEquals(8.571428f,caResult.getMetric(\"movingAvgPageViews\").floatValue(),0.0f);\n  Assert.assertTrue(iter.hasNext());\n  caResult=iter.next();\n  Assert.assertEquals(\"f\",(caResult.getDimension(\"gender\")).get(0));\n  Assert.assertEquals(5.714285850f,caResult.getMetric(\"movingAvgPageViews\").floatValue(),0.0f);\n  Assert.assertFalse(iter.hasNext());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 433,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2631,
        "startLineNumber" : 168,
        "startColumnNumber" : 2,
        "endLineNumber" : 240,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testAveraging(){\n  Map<String,Object> event1=new HashMap<>();\n  Map<String,Object> event2=new HashMap<>();\n  Map<String,Object> event3=new HashMap<>();\n  Map<String,Object> event4=new HashMap<>();\n  List<DimensionSpec> ds=new ArrayList<>();\n  ds.add(new DefaultDimensionSpec(\"gender\",\"gender\"));\n  event1.put(\"gender\",\"m\");\n  event1.put(\"pageViews\",10L);\n  Row row1=new MapBasedRow(JAN_1,event1);\n  event2.put(\"gender\",\"m\");\n  event2.put(\"pageViews\",20L);\n  Row row2=new MapBasedRow(JAN_2,event2);\n  event3.put(\"gender\",\"m\");\n  event3.put(\"pageViews\",30L);\n  Row row3=new MapBasedRow(JAN_3,event3);\n  event4.put(\"gender\",\"f\");\n  event4.put(\"pageViews\",40L);\n  Row row4=new MapBasedRow(JAN_3,event4);\n  float retval=14.5f;\n  Sequence<RowBucket> seq=Sequences.simple(Arrays.asList(new RowBucket(JAN_1,Collections.singletonList(row1)),new RowBucket(JAN_2,Collections.singletonList(row2)),new RowBucket(JAN_3,Arrays.asList(row3,row4))));\n  Iterator<Row> iter=new MovingAverageIterable(seq,ds,Arrays.asList(new ConstantAveragerFactory(\"costPageViews\",7,retval),new LongMeanAveragerFactory(\"movingAvgPageViews\",7,1,\"pageViews\")),Collections.emptyList(),Collections.singletonList(new LongSumAggregatorFactory(\"pageViews\",\"pageViews\"))).iterator();\n  Assert.assertTrue(iter.hasNext());\n  Row caResult=iter.next();\n  Assert.assertEquals(JAN_1,caResult.getTimestamp());\n  Assert.assertEquals(\"m\",(caResult.getDimension(\"gender\")).get(0));\n  Assert.assertEquals(retval,caResult.getMetric(\"costPageViews\").floatValue(),0.0f);\n  Assert.assertEquals(1.4285715f,caResult.getMetric(\"movingAvgPageViews\").floatValue(),0.0f);\n  Assert.assertTrue(iter.hasNext());\n  caResult=iter.next();\n  Assert.assertEquals(\"m\",(caResult.getDimension(\"gender\")).get(0));\n  Assert.assertEquals(4.285714f,caResult.getMetric(\"movingAvgPageViews\").floatValue(),0.0f);\n  Assert.assertTrue(iter.hasNext());\n  caResult=iter.next();\n  Assert.assertEquals(\"m\",(caResult.getDimension(\"gender\")).get(0));\n  Assert.assertEquals(8.571428f,caResult.getMetric(\"movingAvgPageViews\").floatValue(),0.0f);\n  Assert.assertTrue(iter.hasNext());\n  caResult=iter.next();\n  Assert.assertEquals(\"f\",(caResult.getDimension(\"gender\")).get(0));\n  Assert.assertEquals(5.714285850f,caResult.getMetric(\"movingAvgPageViews\").floatValue(),0.0f);\n  Assert.assertFalse(iter.hasNext());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 439,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 221,
        "startColumnNumber" : 4,
        "endLineNumber" : 221,
        "endColumnNumber" : 97
      },
      "nodeContext" : "Assert.assertEquals(1.4285715f,caResult.getMetric(\"movingAvgPageViews\").floatValue(),0.0f);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "float"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 221,
    "startColumnNumber" : 24,
    "endLineNumber" : 221,
    "endColumnNumber" : 34
  } ],
  "layoutRelationDataList" : [ ]
}