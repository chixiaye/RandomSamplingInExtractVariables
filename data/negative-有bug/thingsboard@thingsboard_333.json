{
  "id" : 333,
  "expression" : "pathsToSkip",
  "projectName" : "thingsboard@thingsboard",
  "commitID" : "7c2b3a9fbf84cc58aa7546029c5c7c10a662c55a",
  "filePath" : "/application/src/main/java/org/thingsboard/server/service/security/auth/jwt/SkipPathRequestMatcher.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "pathsToSkip",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 32,
      "startColumnNumber" : 23,
      "endLineNumber" : 32,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 32,
        "startColumnNumber" : 8,
        "endLineNumber" : 32,
        "endColumnNumber" : 73
      },
      "nodeContext" : "Assert.notNull(pathsToSkip,\"List of paths to skip is required.\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 32,
        "startColumnNumber" : 8,
        "endLineNumber" : 32,
        "endColumnNumber" : 74
      },
      "nodeContext" : "Assert.notNull(pathsToSkip,\"List of paths to skip is required.\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 326,
        "startLineNumber" : 31,
        "startColumnNumber" : 83,
        "endLineNumber" : 36,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Assert.notNull(pathsToSkip,\"List of paths to skip is required.\");\n  List<RequestMatcher> m=pathsToSkip.stream().map(path -> new AntPathRequestMatcher(path)).collect(Collectors.toList());\n  matchers=new OrRequestMatcher(m);\n  processingMatcher=new AntPathRequestMatcher(processingPath);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 46,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 405,
        "startLineNumber" : 31,
        "startColumnNumber" : 4,
        "endLineNumber" : 36,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public SkipPathRequestMatcher(List<String> pathsToSkip,String processingPath){\n  Assert.notNull(pathsToSkip,\"List of paths to skip is required.\");\n  List<RequestMatcher> m=pathsToSkip.stream().map(path -> new AntPathRequestMatcher(path)).collect(Collectors.toList());\n  matchers=new OrRequestMatcher(m);\n  processingMatcher=new AntPathRequestMatcher(processingPath);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 60,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 32,
        "startColumnNumber" : 8,
        "endLineNumber" : 32,
        "endColumnNumber" : 74
      },
      "nodeContext" : "Assert.notNull(pathsToSkip,\"List of paths to skip is required.\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.List<java.lang.String>"
  }, {
    "nodeContext" : "pathsToSkip",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 33,
      "startColumnNumber" : 33,
      "endLineNumber" : 33,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 33,
        "startColumnNumber" : 33,
        "endLineNumber" : 33,
        "endColumnNumber" : 53
      },
      "nodeContext" : "pathsToSkip.stream()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 33,
        "startColumnNumber" : 33,
        "endLineNumber" : 33,
        "endColumnNumber" : 98
      },
      "nodeContext" : "pathsToSkip.stream().map(path -> new AntPathRequestMatcher(path))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 33,
        "startColumnNumber" : 33,
        "endLineNumber" : 33,
        "endColumnNumber" : 127
      },
      "nodeContext" : "pathsToSkip.stream().map(path -> new AntPathRequestMatcher(path)).collect(Collectors.toList())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 33,
        "startColumnNumber" : 29,
        "endLineNumber" : 33,
        "endColumnNumber" : 127
      },
      "nodeContext" : "m=pathsToSkip.stream().map(path -> new AntPathRequestMatcher(path)).collect(Collectors.toList())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 33,
        "startColumnNumber" : 8,
        "endLineNumber" : 33,
        "endColumnNumber" : 128
      },
      "nodeContext" : "List<RequestMatcher> m=pathsToSkip.stream().map(path -> new AntPathRequestMatcher(path)).collect(Collectors.toList());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 25,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 326,
        "startLineNumber" : 31,
        "startColumnNumber" : 83,
        "endLineNumber" : 36,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Assert.notNull(pathsToSkip,\"List of paths to skip is required.\");\n  List<RequestMatcher> m=pathsToSkip.stream().map(path -> new AntPathRequestMatcher(path)).collect(Collectors.toList());\n  matchers=new OrRequestMatcher(m);\n  processingMatcher=new AntPathRequestMatcher(processingPath);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 46,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 405,
        "startLineNumber" : 31,
        "startColumnNumber" : 4,
        "endLineNumber" : 36,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public SkipPathRequestMatcher(List<String> pathsToSkip,String processingPath){\n  Assert.notNull(pathsToSkip,\"List of paths to skip is required.\");\n  List<RequestMatcher> m=pathsToSkip.stream().map(path -> new AntPathRequestMatcher(path)).collect(Collectors.toList());\n  matchers=new OrRequestMatcher(m);\n  processingMatcher=new AntPathRequestMatcher(processingPath);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 60,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 33,
        "startColumnNumber" : 8,
        "endLineNumber" : 33,
        "endColumnNumber" : 128
      },
      "nodeContext" : "List<RequestMatcher> m=pathsToSkip.stream().map(path -> new AntPathRequestMatcher(path)).collect(Collectors.toList());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 25,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "java.util.List<java.lang.String>"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 32,
    "startColumnNumber" : 23,
    "endLineNumber" : 32,
    "endColumnNumber" : 34
  }, {
    "charLength" : 11,
    "startLineNumber" : 33,
    "startColumnNumber" : 33,
    "endLineNumber" : 33,
    "endColumnNumber" : 44
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  } ]
}