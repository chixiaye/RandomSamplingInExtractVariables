{
  "id" : 215,
  "expression" : "rewritten != null",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-main/src/main/java/com/facebook/presto/sql/planner/EffectivePredicateExtractor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "rewritten != null",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 420,
      "startColumnNumber" : 24,
      "endLineNumber" : 420,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 420,
        "startColumnNumber" : 20,
        "endLineNumber" : 422,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (rewritten != null) {\n  effectiveConjuncts.add(rewritten);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 253,
        "startLineNumber" : 418,
        "startColumnNumber" : 68,
        "endLineNumber" : 423,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  RowExpression rewritten=equalityInference.rewriteExpression(conjunct,in(variables));\n  if (rewritten != null) {\n    effectiveConjuncts.add(rewritten);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 305,
        "startLineNumber" : 418,
        "startColumnNumber" : 16,
        "endLineNumber" : 423,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (determinismEvaluator.isDeterministic(conjunct)) {\n  RowExpression rewritten=equalityInference.rewriteExpression(conjunct,in(variables));\n  if (rewritten != null) {\n    effectiveConjuncts.add(rewritten);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 28,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 337,
        "startLineNumber" : 417,
        "startColumnNumber" : 123,
        "endLineNumber" : 424,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (determinismEvaluator.isDeterministic(conjunct)) {\n    RowExpression rewritten=equalityInference.rewriteExpression(conjunct,in(variables));\n    if (rewritten != null) {\n      effectiveConjuncts.add(rewritten);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 29,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 448,
        "startLineNumber" : 417,
        "startColumnNumber" : 12,
        "endLineNumber" : 424,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (RowExpression conjunct : new EqualityInference.Builder(functionManger).nonInferableConjuncts(expression)) {\n  if (determinismEvaluator.isDeterministic(conjunct)) {\n    RowExpression rewritten=equalityInference.rewriteExpression(conjunct,in(variables));\n    if (rewritten != null) {\n      effectiveConjuncts.add(rewritten);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 43,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 963,
        "startLineNumber" : 411,
        "startColumnNumber" : 8,
        "endLineNumber" : 429,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  EqualityInference equalityInference=new EqualityInference.Builder(functionManger).addEqualityInference(expression).build();\n  ImmutableList.Builder<RowExpression> effectiveConjuncts=ImmutableList.builder();\n  for (  RowExpression conjunct : new EqualityInference.Builder(functionManger).nonInferableConjuncts(expression)) {\n    if (determinismEvaluator.isDeterministic(conjunct)) {\n      RowExpression rewritten=equalityInference.rewriteExpression(conjunct,in(variables));\n      if (rewritten != null) {\n        effectiveConjuncts.add(rewritten);\n      }\n    }\n  }\n  effectiveConjuncts.addAll(equalityInference.generateEqualitiesPartitionedBy(in(variables)).getScopeEqualities());\n  return logicalRowExpressions.combineConjuncts(effectiveConjuncts.build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 92,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1101,
        "startLineNumber" : 410,
        "startColumnNumber" : 8,
        "endLineNumber" : 429,
        "endColumnNumber" : 9
      },
      "nodeContext" : "private RowExpression pullExpressionThroughVariables(RowExpression expression,Collection<VariableReferenceExpression> variables){\n  EqualityInference equalityInference=new EqualityInference.Builder(functionManger).addEqualityInference(expression).build();\n  ImmutableList.Builder<RowExpression> effectiveConjuncts=ImmutableList.builder();\n  for (  RowExpression conjunct : new EqualityInference.Builder(functionManger).nonInferableConjuncts(expression)) {\n    if (determinismEvaluator.isDeterministic(conjunct)) {\n      RowExpression rewritten=equalityInference.rewriteExpression(conjunct,in(variables));\n      if (rewritten != null) {\n        effectiveConjuncts.add(rewritten);\n      }\n    }\n  }\n  effectiveConjuncts.addAll(equalityInference.generateEqualitiesPartitionedBy(in(variables)).getScopeEqualities());\n  return logicalRowExpressions.combineConjuncts(effectiveConjuncts.build());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 108,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 420,
        "startColumnNumber" : 20,
        "endLineNumber" : 422,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (rewritten != null) {\n  effectiveConjuncts.add(rewritten);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 420,
    "startColumnNumber" : 24,
    "endLineNumber" : 420,
    "endColumnNumber" : 41
  } ],
  "layoutRelationDataList" : [ ]
}