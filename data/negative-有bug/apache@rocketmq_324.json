{
  "id" : 324,
  "expression" : "createContext()",
  "projectName" : "apache@rocketmq",
  "commitID" : "7692d466e1fda6c29d52a61617cab1d82de8b884",
  "filePath" : "/proxy/src/test/java/org/apache/rocketmq/proxy/processor/ConsumerProcessorTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "createContext()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 99,
      "startColumnNumber" : 12,
      "endLineNumber" : 99,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 2,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 885,
        "startLineNumber" : 98,
        "startColumnNumber" : 30,
        "endLineNumber" : 119,
        "endColumnNumber" : 9
      },
      "nodeContext" : "this.consumerProcessor.popMessage(createContext(),(ctx,messageQueueView) -> messageQueue,CONSUMER_GROUP,TOPIC,60,invisibleTime,Duration.ofSeconds(3).toMillis(),ConsumeInitMode.MAX,FilterAPI.build(TOPIC,tag,ExpressionType.TAG),false,(ctx,consumerGroup,subscriptionData,messageExt) -> {\n  if (!messageExt.getTags().equals(tag)) {\n    return PopMessageResultFilter.FilterResult.NO_MATCH;\n  }\n  if (messageExt.getReconsumeTimes() > 0) {\n    return PopMessageResultFilter.FilterResult.TO_DLQ;\n  }\n  return PopMessageResultFilter.FilterResult.MATCH;\n}\n,Duration.ofSeconds(3).toMillis())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 85,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 891,
        "startLineNumber" : 98,
        "startColumnNumber" : 30,
        "endLineNumber" : 119,
        "endColumnNumber" : 15
      },
      "nodeContext" : "this.consumerProcessor.popMessage(createContext(),(ctx,messageQueueView) -> messageQueue,CONSUMER_GROUP,TOPIC,60,invisibleTime,Duration.ofSeconds(3).toMillis(),ConsumeInitMode.MAX,FilterAPI.build(TOPIC,tag,ExpressionType.TAG),false,(ctx,consumerGroup,subscriptionData,messageExt) -> {\n  if (!messageExt.getTags().equals(tag)) {\n    return PopMessageResultFilter.FilterResult.NO_MATCH;\n  }\n  if (messageExt.getReconsumeTimes() > 0) {\n    return PopMessageResultFilter.FilterResult.TO_DLQ;\n  }\n  return PopMessageResultFilter.FilterResult.MATCH;\n}\n,Duration.ofSeconds(3).toMillis()).get()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 87,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 903,
        "startLineNumber" : 98,
        "startColumnNumber" : 18,
        "endLineNumber" : 119,
        "endColumnNumber" : 15
      },
      "nodeContext" : "popResult=this.consumerProcessor.popMessage(createContext(),(ctx,messageQueueView) -> messageQueue,CONSUMER_GROUP,TOPIC,60,invisibleTime,Duration.ofSeconds(3).toMillis(),ConsumeInitMode.MAX,FilterAPI.build(TOPIC,tag,ExpressionType.TAG),false,(ctx,consumerGroup,subscriptionData,messageExt) -> {\n  if (!messageExt.getTags().equals(tag)) {\n    return PopMessageResultFilter.FilterResult.NO_MATCH;\n  }\n  if (messageExt.getReconsumeTimes() > 0) {\n    return PopMessageResultFilter.FilterResult.TO_DLQ;\n  }\n  return PopMessageResultFilter.FilterResult.MATCH;\n}\n,Duration.ofSeconds(3).toMillis()).get()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 89,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 914,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 16
      },
      "nodeContext" : "PopResult popResult=this.consumerProcessor.popMessage(createContext(),(ctx,messageQueueView) -> messageQueue,CONSUMER_GROUP,TOPIC,60,invisibleTime,Duration.ofSeconds(3).toMillis(),ConsumeInitMode.MAX,FilterAPI.build(TOPIC,tag,ExpressionType.TAG),false,(ctx,consumerGroup,subscriptionData,messageExt) -> {\n  if (!messageExt.getTags().equals(tag)) {\n    return PopMessageResultFilter.FilterResult.NO_MATCH;\n  }\n  if (messageExt.getReconsumeTimes() > 0) {\n    return PopMessageResultFilter.FilterResult.TO_DLQ;\n  }\n  return PopMessageResultFilter.FilterResult.MATCH;\n}\n,Duration.ofSeconds(3).toMillis()).get();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 92,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3770,
        "startLineNumber" : 72,
        "startColumnNumber" : 50,
        "endLineNumber" : 134,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String tag=\"tag\";\n  final long invisibleTime=Duration.ofSeconds(15).toMillis();\n  ArgumentCaptor<AddressableMessageQueue> messageQueueArgumentCaptor=ArgumentCaptor.forClass(AddressableMessageQueue.class);\n  ArgumentCaptor<PopMessageRequestHeader> requestHeaderArgumentCaptor=ArgumentCaptor.forClass(PopMessageRequestHeader.class);\n  List<MessageExt> messageExtList=new ArrayList<>();\n  messageExtList.add(createMessageExt(TOPIC,\"noMatch\",0,invisibleTime));\n  messageExtList.add(createMessageExt(TOPIC,tag,0,invisibleTime));\n  messageExtList.add(createMessageExt(TOPIC,tag,1,invisibleTime));\n  PopResult innerPopResult=new PopResult(PopStatus.FOUND,messageExtList);\n  when(this.messageService.popMessage(any(),messageQueueArgumentCaptor.capture(),requestHeaderArgumentCaptor.capture(),anyLong())).thenReturn(CompletableFuture.completedFuture(innerPopResult));\n  when(this.topicRouteService.getCurrentMessageQueueView(anyString())).thenReturn(mock(MessageQueueView.class));\n  ArgumentCaptor<String> ackMessageIdArgumentCaptor=ArgumentCaptor.forClass(String.class);\n  when(this.messagingProcessor.ackMessage(any(),any(),ackMessageIdArgumentCaptor.capture(),anyString(),anyString(),anyLong())).thenReturn(CompletableFuture.completedFuture(mock(AckResult.class)));\n  ArgumentCaptor<String> toDLQMessageIdArgumentCaptor=ArgumentCaptor.forClass(String.class);\n  when(this.messagingProcessor.forwardMessageToDeadLetterQueue(any(),any(),toDLQMessageIdArgumentCaptor.capture(),anyString(),anyString(),anyLong())).thenReturn(CompletableFuture.completedFuture(mock(RemotingCommand.class)));\n  AddressableMessageQueue messageQueue=mock(AddressableMessageQueue.class);\n  PopResult popResult=this.consumerProcessor.popMessage(createContext(),(ctx,messageQueueView) -> messageQueue,CONSUMER_GROUP,TOPIC,60,invisibleTime,Duration.ofSeconds(3).toMillis(),ConsumeInitMode.MAX,FilterAPI.build(TOPIC,tag,ExpressionType.TAG),false,(ctx,consumerGroup,subscriptionData,messageExt) -> {\n    if (!messageExt.getTags().equals(tag)) {\n      return PopMessageResultFilter.FilterResult.NO_MATCH;\n    }\n    if (messageExt.getReconsumeTimes() > 0) {\n      return PopMessageResultFilter.FilterResult.TO_DLQ;\n    }\n    return PopMessageResultFilter.FilterResult.MATCH;\n  }\n,Duration.ofSeconds(3).toMillis()).get();\n  assertSame(messageQueue,messageQueueArgumentCaptor.getValue());\n  assertEquals(CONSUMER_GROUP,requestHeaderArgumentCaptor.getValue().getConsumerGroup());\n  assertEquals(TOPIC,requestHeaderArgumentCaptor.getValue().getTopic());\n  assertEquals(ProxyUtils.MAX_MSG_NUMS_FOR_POP_REQUEST,requestHeaderArgumentCaptor.getValue().getMaxMsgNums());\n  assertEquals(tag,requestHeaderArgumentCaptor.getValue().getExp());\n  assertEquals(ExpressionType.TAG,requestHeaderArgumentCaptor.getValue().getExpType());\n  assertEquals(PopStatus.FOUND,popResult.getPopStatus());\n  assertEquals(1,popResult.getMsgFoundList().size());\n  assertEquals(messageExtList.get(1),popResult.getMsgFoundList().get(0));\n  assertEquals(messageExtList.get(0).getMsgId(),ackMessageIdArgumentCaptor.getValue());\n  assertEquals(messageExtList.get(2).getMsgId(),toDLQMessageIdArgumentCaptor.getValue());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 445,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3827,
        "startLineNumber" : 71,
        "startColumnNumber" : 4,
        "endLineNumber" : 134,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testPopMessage() throws Throwable {\n  final String tag=\"tag\";\n  final long invisibleTime=Duration.ofSeconds(15).toMillis();\n  ArgumentCaptor<AddressableMessageQueue> messageQueueArgumentCaptor=ArgumentCaptor.forClass(AddressableMessageQueue.class);\n  ArgumentCaptor<PopMessageRequestHeader> requestHeaderArgumentCaptor=ArgumentCaptor.forClass(PopMessageRequestHeader.class);\n  List<MessageExt> messageExtList=new ArrayList<>();\n  messageExtList.add(createMessageExt(TOPIC,\"noMatch\",0,invisibleTime));\n  messageExtList.add(createMessageExt(TOPIC,tag,0,invisibleTime));\n  messageExtList.add(createMessageExt(TOPIC,tag,1,invisibleTime));\n  PopResult innerPopResult=new PopResult(PopStatus.FOUND,messageExtList);\n  when(this.messageService.popMessage(any(),messageQueueArgumentCaptor.capture(),requestHeaderArgumentCaptor.capture(),anyLong())).thenReturn(CompletableFuture.completedFuture(innerPopResult));\n  when(this.topicRouteService.getCurrentMessageQueueView(anyString())).thenReturn(mock(MessageQueueView.class));\n  ArgumentCaptor<String> ackMessageIdArgumentCaptor=ArgumentCaptor.forClass(String.class);\n  when(this.messagingProcessor.ackMessage(any(),any(),ackMessageIdArgumentCaptor.capture(),anyString(),anyString(),anyLong())).thenReturn(CompletableFuture.completedFuture(mock(AckResult.class)));\n  ArgumentCaptor<String> toDLQMessageIdArgumentCaptor=ArgumentCaptor.forClass(String.class);\n  when(this.messagingProcessor.forwardMessageToDeadLetterQueue(any(),any(),toDLQMessageIdArgumentCaptor.capture(),anyString(),anyString(),anyLong())).thenReturn(CompletableFuture.completedFuture(mock(RemotingCommand.class)));\n  AddressableMessageQueue messageQueue=mock(AddressableMessageQueue.class);\n  PopResult popResult=this.consumerProcessor.popMessage(createContext(),(ctx,messageQueueView) -> messageQueue,CONSUMER_GROUP,TOPIC,60,invisibleTime,Duration.ofSeconds(3).toMillis(),ConsumeInitMode.MAX,FilterAPI.build(TOPIC,tag,ExpressionType.TAG),false,(ctx,consumerGroup,subscriptionData,messageExt) -> {\n    if (!messageExt.getTags().equals(tag)) {\n      return PopMessageResultFilter.FilterResult.NO_MATCH;\n    }\n    if (messageExt.getReconsumeTimes() > 0) {\n      return PopMessageResultFilter.FilterResult.TO_DLQ;\n    }\n    return PopMessageResultFilter.FilterResult.MATCH;\n  }\n,Duration.ofSeconds(3).toMillis()).get();\n  assertSame(messageQueue,messageQueueArgumentCaptor.getValue());\n  assertEquals(CONSUMER_GROUP,requestHeaderArgumentCaptor.getValue().getConsumerGroup());\n  assertEquals(TOPIC,requestHeaderArgumentCaptor.getValue().getTopic());\n  assertEquals(ProxyUtils.MAX_MSG_NUMS_FOR_POP_REQUEST,requestHeaderArgumentCaptor.getValue().getMaxMsgNums());\n  assertEquals(tag,requestHeaderArgumentCaptor.getValue().getExp());\n  assertEquals(ExpressionType.TAG,requestHeaderArgumentCaptor.getValue().getExpType());\n  assertEquals(PopStatus.FOUND,popResult.getPopStatus());\n  assertEquals(1,popResult.getMsgFoundList().size());\n  assertEquals(messageExtList.get(1),popResult.getMsgFoundList().get(0));\n  assertEquals(messageExtList.get(0).getMsgId(),ackMessageIdArgumentCaptor.getValue());\n  assertEquals(messageExtList.get(2).getMsgId(),toDLQMessageIdArgumentCaptor.getValue());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 453,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 885,
        "startLineNumber" : 98,
        "startColumnNumber" : 30,
        "endLineNumber" : 119,
        "endColumnNumber" : 9
      },
      "nodeContext" : "this.consumerProcessor.popMessage(createContext(),(ctx,messageQueueView) -> messageQueue,CONSUMER_GROUP,TOPIC,60,invisibleTime,Duration.ofSeconds(3).toMillis(),ConsumeInitMode.MAX,FilterAPI.build(TOPIC,tag,ExpressionType.TAG),false,(ctx,consumerGroup,subscriptionData,messageExt) -> {\n  if (!messageExt.getTags().equals(tag)) {\n    return PopMessageResultFilter.FilterResult.NO_MATCH;\n  }\n  if (messageExt.getReconsumeTimes() > 0) {\n    return PopMessageResultFilter.FilterResult.TO_DLQ;\n  }\n  return PopMessageResultFilter.FilterResult.MATCH;\n}\n,Duration.ofSeconds(3).toMillis())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 85,
      "astHeight" : 9
    },
    "tokenLength" : 1,
    "type" : "org.apache.rocketmq.proxy.common.ProxyContext"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 99,
    "startColumnNumber" : 12,
    "endLineNumber" : 99,
    "endColumnNumber" : 27
  } ],
  "layoutRelationDataList" : [ ]
}