{
  "id" : 134,
  "expression" : "e",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/main/java/com/google/devtools/build/lib/bazel/rules/android/AndroidRepositoryFunction.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "e",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 73,
      "startColumnNumber" : 44,
      "endLineNumber" : 73,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 73,
        "startColumnNumber" : 12,
        "endLineNumber" : 73,
        "endColumnNumber" : 69
      },
      "nodeContext" : "new RepositoryFunctionException(e,Transience.PERSISTENT)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 73,
        "startColumnNumber" : 6,
        "endLineNumber" : 73,
        "endColumnNumber" : 70
      },
      "nodeContext" : "throw new RepositoryFunctionException(e,Transience.PERSISTENT);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 72,
        "startColumnNumber" : 28,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  throw new RepositoryFunctionException(e,Transience.PERSISTENT);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 72,
        "startColumnNumber" : 6,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "catch (IOException e) {\n  throw new RepositoryFunctionException(e,Transience.PERSISTENT);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 857,
        "startLineNumber" : 54,
        "startColumnNumber" : 4,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  FileValue dirFileValue=(FileValue)env.getValueOrThrow(FileValue.key(rootedPath),IOException.class);\n  if (dirFileValue == null) {\n    return null;\n  }\n  if (!dirFileValue.exists() || !dirFileValue.isDirectory()) {\n    throwInvalidPathException(root,new IOException(String.format(\"Expected directory at %s but it is not a directory or it does not exist.\",rootedPath.asPath().getPathString())));\n  }\n  return (DirectoryListingValue)env.getValueOrThrow(DirectoryListingValue.key(RootedPath.toRootedPath(Root.fromPath(root),dirPath)),InconsistentFilesystemException.class);\n}\n catch (IOException e) {\n  throw new RepositoryFunctionException(e,Transience.PERSISTENT);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 89,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 950,
        "startLineNumber" : 52,
        "startColumnNumber" : 63,
        "endLineNumber" : 75,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  RootedPath rootedPath=RootedPath.toRootedPath(Root.fromPath(root),dirPath);\n  try {\n    FileValue dirFileValue=(FileValue)env.getValueOrThrow(FileValue.key(rootedPath),IOException.class);\n    if (dirFileValue == null) {\n      return null;\n    }\n    if (!dirFileValue.exists() || !dirFileValue.isDirectory()) {\n      throwInvalidPathException(root,new IOException(String.format(\"Expected directory at %s but it is not a directory or it does not exist.\",rootedPath.asPath().getPathString())));\n    }\n    return (DirectoryListingValue)env.getValueOrThrow(DirectoryListingValue.key(RootedPath.toRootedPath(Root.fromPath(root),dirPath)),InconsistentFilesystemException.class);\n  }\n catch (  IOException e) {\n    throw new RepositoryFunctionException(e,Transience.PERSISTENT);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 103,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1341,
        "startLineNumber" : 45,
        "startColumnNumber" : 2,
        "endLineNumber" : 75,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Gets a  {@link DirectoryListingValue} for {@code dirPath} or returns null.<p>First, we get a  {@link FileValue} to check the {@code dirPath} exists and is a directory. Ifnot, we throw an exception.\n */\nfinal DirectoryListingValue getDirectoryListing(Path root,PathFragment dirPath,Environment env) throws RepositoryFunctionException, InterruptedException {\n  RootedPath rootedPath=RootedPath.toRootedPath(Root.fromPath(root),dirPath);\n  try {\n    FileValue dirFileValue=(FileValue)env.getValueOrThrow(FileValue.key(rootedPath),IOException.class);\n    if (dirFileValue == null) {\n      return null;\n    }\n    if (!dirFileValue.exists() || !dirFileValue.isDirectory()) {\n      throwInvalidPathException(root,new IOException(String.format(\"Expected directory at %s but it is not a directory or it does not exist.\",rootedPath.asPath().getPathString())));\n    }\n    return (DirectoryListingValue)env.getValueOrThrow(DirectoryListingValue.key(RootedPath.toRootedPath(Root.fromPath(root),dirPath)),InconsistentFilesystemException.class);\n  }\n catch (  IOException e) {\n    throw new RepositoryFunctionException(e,Transience.PERSISTENT);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 125,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 73,
        "startColumnNumber" : 6,
        "endLineNumber" : 73,
        "endColumnNumber" : 70
      },
      "nodeContext" : "throw new RepositoryFunctionException(e,Transience.PERSISTENT);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.io.IOException"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 73,
    "startColumnNumber" : 44,
    "endLineNumber" : 73,
    "endColumnNumber" : 45
  } ],
  "layoutRelationDataList" : [ ]
}