{
  "id" : 18,
  "expression" : "Blend.harmonize(RED,BLUE)",
  "projectName" : "material-components@material-components-android",
  "commitID" : "79bf9d0e8e62eea9c2f2620d4e1a0a2ca0e12017",
  "filePath" : "/lib/javatests/com/google/android/material/color/MaterialColorsTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Blend.harmonize(RED,BLUE)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 60,
      "startColumnNumber" : 62,
      "endLineNumber" : 60,
      "endColumnNumber" : 88
    },
    "astNodeNumber" : 5,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 60,
        "startColumnNumber" : 4,
        "endLineNumber" : 60,
        "endColumnNumber" : 89
      },
      "nodeContext" : "assertThat(MaterialColors.harmonize(RED,BLUE)).isEqualTo(Blend.harmonize(RED,BLUE))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 60,
        "startColumnNumber" : 4,
        "endLineNumber" : 60,
        "endColumnNumber" : 90
      },
      "nodeContext" : "assertThat(MaterialColors.harmonize(RED,BLUE)).isEqualTo(Blend.harmonize(RED,BLUE));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 59,
        "startColumnNumber" : 36,
        "endLineNumber" : 61,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  assertThat(MaterialColors.harmonize(RED,BLUE)).isEqualTo(Blend.harmonize(RED,BLUE));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 141,
        "startLineNumber" : 58,
        "startColumnNumber" : 2,
        "endLineNumber" : 61,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void harmonize_redToBlue(){\n  assertThat(MaterialColors.harmonize(RED,BLUE)).isEqualTo(Blend.harmonize(RED,BLUE));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 22,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 60,
        "startColumnNumber" : 4,
        "endLineNumber" : 60,
        "endColumnNumber" : 90
      },
      "nodeContext" : "assertThat(MaterialColors.harmonize(RED,BLUE)).isEqualTo(Blend.harmonize(RED,BLUE));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 26,
    "startLineNumber" : 60,
    "startColumnNumber" : 62,
    "endLineNumber" : 60,
    "endColumnNumber" : 88
  } ],
  "layoutRelationDataList" : [ ]
}