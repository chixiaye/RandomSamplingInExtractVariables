{
  "id" : 52,
  "expression" : "programOne.getListing().getCodeUnitAt(addr(programOne,0x331))",
  "projectName" : "NationalSecurityAgency@ghidra",
  "commitID" : "a54d0e28d652c48502551a88278808549aed5f98",
  "filePath" : "/Ghidra/Features/Base/src/test.slow/java/ghidra/app/plugin/core/clipboard/CopyPasteCommentsTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "programOne.getListing().getCodeUnitAt(addr(programOne,0x331))",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 62,
      "startLineNumber" : 539,
      "startColumnNumber" : 16,
      "endLineNumber" : 539,
      "endColumnNumber" : 78
    },
    "astNodeNumber" : 9,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 539,
        "startColumnNumber" : 11,
        "endLineNumber" : 539,
        "endColumnNumber" : 78
      },
      "nodeContext" : "cu=programOne.getListing().getCodeUnitAt(addr(programOne,0x331))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 539,
        "startColumnNumber" : 2,
        "endLineNumber" : 539,
        "endColumnNumber" : 79
      },
      "nodeContext" : "CodeUnit cu=programOne.getListing().getCodeUnitAt(addr(programOne,0x331));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2979,
        "startLineNumber" : 537,
        "startColumnNumber" : 64,
        "endLineNumber" : 618,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  CodeUnit cu=programOne.getListing().getCodeUnitAt(addr(programOne,0x331));\n  int transactionID=programOne.startTransaction(\"test\");\n  cu.setComment(CodeUnit.PRE_COMMENT,\"my pre comment for this test\");\n  programOne.endTransaction(transactionID,true);\n  waitForSwing();\n  goTo(toolTwo,0x031b);\n  AddressSet set=new AddressSet();\n  set.addRange(addr(programTwo,0x31b),addr(programTwo,0x31d));\n  set.addRange(addr(programTwo,0x331),addr(programTwo,0x333));\n  makeSelection(toolTwo,programTwo,set);\n  copyToolTwoLabels();\n  goTo(toolOne,0x31b);\n  pasteToolOne();\n  assertNull(programOne.getSymbolTable().getSymbol(\"LAB_0331\",addr(programOne,0x0331),null));\n  Symbol symbol=getUniqueSymbol(programOne,\"RSTOR()\",null);\n  assertNotNull(symbol);\n  assertEquals(addr(programOne,0x31b),symbol.getAddress());\n  assertNull(programOne.getSymbolTable().getSymbol(\"LAB_0331\",addr(programOne,0x0331),null));\n  symbol=getUniqueSymbol(programOne,\"RSR10\",null);\n  assertNotNull(symbol);\n  assertEquals(addr(programOne,0x331),symbol.getAddress());\n  cu=programOne.getListing().getCodeUnitAt(addr(programOne,0x331));\n  assertEquals(\"my pre comment for this test\",cu.getComment(CodeUnit.PRE_COMMENT));\n  cb.goToField(addr(programOne,0x0331),LabelFieldFactory.FIELD_NAME,0,0);\n  ListingTextField f=(ListingTextField)cb.getCurrentField();\n  assertEquals(\"RSR10\",f.getText());\n  cb.goToField(addr(programOne,0x031b),LabelFieldFactory.FIELD_NAME,0,0);\n  f=(ListingTextField)cb.getCurrentField();\n  assertEquals(\"RSTOR()\",f.getText());\n  cb.goToField(addr(programOne,0x0331),\"Pre-Comment\",0,0);\n  f=(ListingTextField)cb.getCurrentField();\n  assertEquals(\"my pre comment for this test\",f.getText());\n  undo(programOne);\n  cb.goToField(addr(programOne,0x0331),LabelFieldFactory.FIELD_NAME,0,0);\n  f=(ListingTextField)cb.getCurrentField();\n  assertEquals(programOne.getSymbolTable().getSymbol(\"LAB_00000331\",addr(programOne,0x0331),null).getName(),f.getText());\n  cb.goToField(addr(programOne,0x031b),LabelFieldFactory.FIELD_NAME,0,0);\n  f=(ListingTextField)cb.getCurrentField();\n  assertEquals(programOne.getSymbolTable().getSymbol(\"LAB_0000031b\",addr(programOne,0x031b),null).getName(),f.getText());\n  redo(programOne);\n  cb.goToField(addr(programOne,0x0331),LabelFieldFactory.FIELD_NAME,0,0);\n  f=(ListingTextField)cb.getCurrentField();\n  assertEquals(\"RSR10\",f.getText());\n  cb.goToField(addr(programOne,0x031b),LabelFieldFactory.FIELD_NAME,0,0);\n  f=(ListingTextField)cb.getCurrentField();\n  assertEquals(\"RSTOR()\",f.getText());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 425,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3050,
        "startLineNumber" : 536,
        "startColumnNumber" : 1,
        "endLineNumber" : 618,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testPasteNonContiguousSelection() throws Exception {\n  CodeUnit cu=programOne.getListing().getCodeUnitAt(addr(programOne,0x331));\n  int transactionID=programOne.startTransaction(\"test\");\n  cu.setComment(CodeUnit.PRE_COMMENT,\"my pre comment for this test\");\n  programOne.endTransaction(transactionID,true);\n  waitForSwing();\n  goTo(toolTwo,0x031b);\n  AddressSet set=new AddressSet();\n  set.addRange(addr(programTwo,0x31b),addr(programTwo,0x31d));\n  set.addRange(addr(programTwo,0x331),addr(programTwo,0x333));\n  makeSelection(toolTwo,programTwo,set);\n  copyToolTwoLabels();\n  goTo(toolOne,0x31b);\n  pasteToolOne();\n  assertNull(programOne.getSymbolTable().getSymbol(\"LAB_0331\",addr(programOne,0x0331),null));\n  Symbol symbol=getUniqueSymbol(programOne,\"RSTOR()\",null);\n  assertNotNull(symbol);\n  assertEquals(addr(programOne,0x31b),symbol.getAddress());\n  assertNull(programOne.getSymbolTable().getSymbol(\"LAB_0331\",addr(programOne,0x0331),null));\n  symbol=getUniqueSymbol(programOne,\"RSR10\",null);\n  assertNotNull(symbol);\n  assertEquals(addr(programOne,0x331),symbol.getAddress());\n  cu=programOne.getListing().getCodeUnitAt(addr(programOne,0x331));\n  assertEquals(\"my pre comment for this test\",cu.getComment(CodeUnit.PRE_COMMENT));\n  cb.goToField(addr(programOne,0x0331),LabelFieldFactory.FIELD_NAME,0,0);\n  ListingTextField f=(ListingTextField)cb.getCurrentField();\n  assertEquals(\"RSR10\",f.getText());\n  cb.goToField(addr(programOne,0x031b),LabelFieldFactory.FIELD_NAME,0,0);\n  f=(ListingTextField)cb.getCurrentField();\n  assertEquals(\"RSTOR()\",f.getText());\n  cb.goToField(addr(programOne,0x0331),\"Pre-Comment\",0,0);\n  f=(ListingTextField)cb.getCurrentField();\n  assertEquals(\"my pre comment for this test\",f.getText());\n  undo(programOne);\n  cb.goToField(addr(programOne,0x0331),LabelFieldFactory.FIELD_NAME,0,0);\n  f=(ListingTextField)cb.getCurrentField();\n  assertEquals(programOne.getSymbolTable().getSymbol(\"LAB_00000331\",addr(programOne,0x0331),null).getName(),f.getText());\n  cb.goToField(addr(programOne,0x031b),LabelFieldFactory.FIELD_NAME,0,0);\n  f=(ListingTextField)cb.getCurrentField();\n  assertEquals(programOne.getSymbolTable().getSymbol(\"LAB_0000031b\",addr(programOne,0x031b),null).getName(),f.getText());\n  redo(programOne);\n  cb.goToField(addr(programOne,0x0331),LabelFieldFactory.FIELD_NAME,0,0);\n  f=(ListingTextField)cb.getCurrentField();\n  assertEquals(\"RSR10\",f.getText());\n  cb.goToField(addr(programOne,0x031b),LabelFieldFactory.FIELD_NAME,0,0);\n  f=(ListingTextField)cb.getCurrentField();\n  assertEquals(\"RSTOR()\",f.getText());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 433,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 539,
        "startColumnNumber" : 2,
        "endLineNumber" : 539,
        "endColumnNumber" : 79
      },
      "nodeContext" : "CodeUnit cu=programOne.getListing().getCodeUnitAt(addr(programOne,0x331));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 6,
    "type" : "ghidra.program.model.listing.CodeUnit"
  }, {
    "nodeContext" : "programOne.getListing().getCodeUnitAt(addr(programOne,0x331))",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 62,
      "startLineNumber" : 574,
      "startColumnNumber" : 7,
      "endLineNumber" : 574,
      "endColumnNumber" : 69
    },
    "astNodeNumber" : 9,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 574,
        "startColumnNumber" : 2,
        "endLineNumber" : 574,
        "endColumnNumber" : 69
      },
      "nodeContext" : "cu=programOne.getListing().getCodeUnitAt(addr(programOne,0x331))",
      "nodeType" : "Assignment",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 574,
        "startColumnNumber" : 2,
        "endLineNumber" : 574,
        "endColumnNumber" : 70
      },
      "nodeContext" : "cu=programOne.getListing().getCodeUnitAt(addr(programOne,0x331));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2979,
        "startLineNumber" : 537,
        "startColumnNumber" : 64,
        "endLineNumber" : 618,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  CodeUnit cu=programOne.getListing().getCodeUnitAt(addr(programOne,0x331));\n  int transactionID=programOne.startTransaction(\"test\");\n  cu.setComment(CodeUnit.PRE_COMMENT,\"my pre comment for this test\");\n  programOne.endTransaction(transactionID,true);\n  waitForSwing();\n  goTo(toolTwo,0x031b);\n  AddressSet set=new AddressSet();\n  set.addRange(addr(programTwo,0x31b),addr(programTwo,0x31d));\n  set.addRange(addr(programTwo,0x331),addr(programTwo,0x333));\n  makeSelection(toolTwo,programTwo,set);\n  copyToolTwoLabels();\n  goTo(toolOne,0x31b);\n  pasteToolOne();\n  assertNull(programOne.getSymbolTable().getSymbol(\"LAB_0331\",addr(programOne,0x0331),null));\n  Symbol symbol=getUniqueSymbol(programOne,\"RSTOR()\",null);\n  assertNotNull(symbol);\n  assertEquals(addr(programOne,0x31b),symbol.getAddress());\n  assertNull(programOne.getSymbolTable().getSymbol(\"LAB_0331\",addr(programOne,0x0331),null));\n  symbol=getUniqueSymbol(programOne,\"RSR10\",null);\n  assertNotNull(symbol);\n  assertEquals(addr(programOne,0x331),symbol.getAddress());\n  cu=programOne.getListing().getCodeUnitAt(addr(programOne,0x331));\n  assertEquals(\"my pre comment for this test\",cu.getComment(CodeUnit.PRE_COMMENT));\n  cb.goToField(addr(programOne,0x0331),LabelFieldFactory.FIELD_NAME,0,0);\n  ListingTextField f=(ListingTextField)cb.getCurrentField();\n  assertEquals(\"RSR10\",f.getText());\n  cb.goToField(addr(programOne,0x031b),LabelFieldFactory.FIELD_NAME,0,0);\n  f=(ListingTextField)cb.getCurrentField();\n  assertEquals(\"RSTOR()\",f.getText());\n  cb.goToField(addr(programOne,0x0331),\"Pre-Comment\",0,0);\n  f=(ListingTextField)cb.getCurrentField();\n  assertEquals(\"my pre comment for this test\",f.getText());\n  undo(programOne);\n  cb.goToField(addr(programOne,0x0331),LabelFieldFactory.FIELD_NAME,0,0);\n  f=(ListingTextField)cb.getCurrentField();\n  assertEquals(programOne.getSymbolTable().getSymbol(\"LAB_00000331\",addr(programOne,0x0331),null).getName(),f.getText());\n  cb.goToField(addr(programOne,0x031b),LabelFieldFactory.FIELD_NAME,0,0);\n  f=(ListingTextField)cb.getCurrentField();\n  assertEquals(programOne.getSymbolTable().getSymbol(\"LAB_0000031b\",addr(programOne,0x031b),null).getName(),f.getText());\n  redo(programOne);\n  cb.goToField(addr(programOne,0x0331),LabelFieldFactory.FIELD_NAME,0,0);\n  f=(ListingTextField)cb.getCurrentField();\n  assertEquals(\"RSR10\",f.getText());\n  cb.goToField(addr(programOne,0x031b),LabelFieldFactory.FIELD_NAME,0,0);\n  f=(ListingTextField)cb.getCurrentField();\n  assertEquals(\"RSTOR()\",f.getText());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 425,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3050,
        "startLineNumber" : 536,
        "startColumnNumber" : 1,
        "endLineNumber" : 618,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testPasteNonContiguousSelection() throws Exception {\n  CodeUnit cu=programOne.getListing().getCodeUnitAt(addr(programOne,0x331));\n  int transactionID=programOne.startTransaction(\"test\");\n  cu.setComment(CodeUnit.PRE_COMMENT,\"my pre comment for this test\");\n  programOne.endTransaction(transactionID,true);\n  waitForSwing();\n  goTo(toolTwo,0x031b);\n  AddressSet set=new AddressSet();\n  set.addRange(addr(programTwo,0x31b),addr(programTwo,0x31d));\n  set.addRange(addr(programTwo,0x331),addr(programTwo,0x333));\n  makeSelection(toolTwo,programTwo,set);\n  copyToolTwoLabels();\n  goTo(toolOne,0x31b);\n  pasteToolOne();\n  assertNull(programOne.getSymbolTable().getSymbol(\"LAB_0331\",addr(programOne,0x0331),null));\n  Symbol symbol=getUniqueSymbol(programOne,\"RSTOR()\",null);\n  assertNotNull(symbol);\n  assertEquals(addr(programOne,0x31b),symbol.getAddress());\n  assertNull(programOne.getSymbolTable().getSymbol(\"LAB_0331\",addr(programOne,0x0331),null));\n  symbol=getUniqueSymbol(programOne,\"RSR10\",null);\n  assertNotNull(symbol);\n  assertEquals(addr(programOne,0x331),symbol.getAddress());\n  cu=programOne.getListing().getCodeUnitAt(addr(programOne,0x331));\n  assertEquals(\"my pre comment for this test\",cu.getComment(CodeUnit.PRE_COMMENT));\n  cb.goToField(addr(programOne,0x0331),LabelFieldFactory.FIELD_NAME,0,0);\n  ListingTextField f=(ListingTextField)cb.getCurrentField();\n  assertEquals(\"RSR10\",f.getText());\n  cb.goToField(addr(programOne,0x031b),LabelFieldFactory.FIELD_NAME,0,0);\n  f=(ListingTextField)cb.getCurrentField();\n  assertEquals(\"RSTOR()\",f.getText());\n  cb.goToField(addr(programOne,0x0331),\"Pre-Comment\",0,0);\n  f=(ListingTextField)cb.getCurrentField();\n  assertEquals(\"my pre comment for this test\",f.getText());\n  undo(programOne);\n  cb.goToField(addr(programOne,0x0331),LabelFieldFactory.FIELD_NAME,0,0);\n  f=(ListingTextField)cb.getCurrentField();\n  assertEquals(programOne.getSymbolTable().getSymbol(\"LAB_00000331\",addr(programOne,0x0331),null).getName(),f.getText());\n  cb.goToField(addr(programOne,0x031b),LabelFieldFactory.FIELD_NAME,0,0);\n  f=(ListingTextField)cb.getCurrentField();\n  assertEquals(programOne.getSymbolTable().getSymbol(\"LAB_0000031b\",addr(programOne,0x031b),null).getName(),f.getText());\n  redo(programOne);\n  cb.goToField(addr(programOne,0x0331),LabelFieldFactory.FIELD_NAME,0,0);\n  f=(ListingTextField)cb.getCurrentField();\n  assertEquals(\"RSR10\",f.getText());\n  cb.goToField(addr(programOne,0x031b),LabelFieldFactory.FIELD_NAME,0,0);\n  f=(ListingTextField)cb.getCurrentField();\n  assertEquals(\"RSTOR()\",f.getText());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 433,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 574,
        "startColumnNumber" : 2,
        "endLineNumber" : 574,
        "endColumnNumber" : 70
      },
      "nodeContext" : "cu=programOne.getListing().getCodeUnitAt(addr(programOne,0x331));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 6,
    "type" : "ghidra.program.model.listing.CodeUnit"
  } ],
  "positionList" : [ {
    "charLength" : 62,
    "startLineNumber" : 539,
    "startColumnNumber" : 16,
    "endLineNumber" : 539,
    "endColumnNumber" : 78
  }, {
    "charLength" : 62,
    "startLineNumber" : 574,
    "startColumnNumber" : 7,
    "endLineNumber" : 574,
    "endColumnNumber" : 69
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}