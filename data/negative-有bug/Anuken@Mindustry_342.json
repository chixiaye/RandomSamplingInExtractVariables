{
  "id" : 342,
  "expression" : "230",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/core/src/mindustry/ui/dialogs/MapsDialog.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "230",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 120,
      "startColumnNumber" : 73,
      "endLineNumber" : 120,
      "endColumnNumber" : 76
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 120,
        "startColumnNumber" : 65,
        "endLineNumber" : 120,
        "endColumnNumber" : 77
      },
      "nodeContext" : "Scl.scl(230)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 120,
        "startColumnNumber" : 38,
        "endLineNumber" : 120,
        "endColumnNumber" : 77
      },
      "nodeContext" : "Core.graphics.getWidth() / Scl.scl(230)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 120,
        "startColumnNumber" : 37,
        "endLineNumber" : 120,
        "endColumnNumber" : 78
      },
      "nodeContext" : "(Core.graphics.getWidth() / Scl.scl(230))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 120,
        "startColumnNumber" : 32,
        "endLineNumber" : 120,
        "endColumnNumber" : 78
      },
      "nodeContext" : "(int)(Core.graphics.getWidth() / Scl.scl(230))",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 120,
        "startColumnNumber" : 23,
        "endLineNumber" : 120,
        "endColumnNumber" : 82
      },
      "nodeContext" : "Math.max((int)(Core.graphics.getWidth() / Scl.scl(230)),1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 120,
        "endColumnNumber" : 82
      },
      "nodeContext" : "maxwidth=Math.max((int)(Core.graphics.getWidth() / Scl.scl(230)),1)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 19,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 120,
        "endColumnNumber" : 83
      },
      "nodeContext" : "int maxwidth=Math.max((int)(Core.graphics.getWidth() / Scl.scl(230)),1);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4411,
        "startLineNumber" : 37,
        "startColumnNumber" : 16,
        "endLineNumber" : 151,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  buttons.clearChildren();\n  if (Core.graphics.isPortrait()) {\n    buttons.button(\"@back\",Icon.left,this::hide).size(210f * 2f,64f).colspan(2);\n    buttons.row();\n  }\n else {\n    buttons.button(\"@back\",Icon.left,this::hide).size(210f,64f);\n  }\n  buttons.button(\"@editor.newmap\",Icon.add,() -> {\n    ui.showTextInput(\"@editor.newmap\",\"@editor.mapname\",\"\",text -> {\n      Runnable show=() -> ui.loadAnd(() -> {\n        hide();\n        ui.editor.show();\n        ui.editor.editor.tags.put(\"name\",text);\n        Events.fire(new MapMakeEvent());\n      }\n);\n      if (maps.byName(text) != null) {\n        ui.showErrorMessage(\"@editor.exists\");\n      }\n else {\n        show.run();\n      }\n    }\n);\n  }\n).size(210f,64f);\n  buttons.button(\"@editor.importmap\",Icon.upload,() -> {\n    platform.showFileChooser(true,mapExtension,file -> {\n      ui.loadAnd(() -> {\n        maps.tryCatchMapError(() -> {\n          if (MapIO.isImage(file)) {\n            ui.showErrorMessage(\"@editor.errorimage\");\n            return;\n          }\n          Map map=MapIO.createMap(file,true);\n          String name=map.tags.get(\"name\",() -> {\n            String result=\"unknown\";\n            int number=0;\n            while (maps.byName(result + number++) != null)             ;\n            return result + number;\n          }\n);\n          if (name == null) {\n            ui.showErrorMessage(\"@editor.errorname\");\n            return;\n          }\n          Map conflict=maps.all().find(m -> m.name().equals(name));\n          if (conflict != null && !conflict.custom) {\n            ui.showInfo(Core.bundle.format(\"editor.import.exists\",name));\n          }\n else           if (conflict != null) {\n            ui.showConfirm(\"@confirm\",Core.bundle.format(\"editor.overwrite.confirm\",map.name()),() -> {\n              maps.tryCatchMapError(() -> {\n                maps.removeMap(conflict);\n                maps.importMap(map.file);\n                setup();\n              }\n);\n            }\n);\n          }\n else {\n            maps.importMap(map.file);\n            setup();\n          }\n        }\n);\n      }\n);\n    }\n);\n  }\n).size(210f,64f);\n  cont.clear();\n  Table maps=new Table();\n  maps.marginRight(24);\n  ScrollPane pane=new ScrollPane(maps);\n  pane.setFadeScrollBars(false);\n  int maxwidth=Math.max((int)(Core.graphics.getWidth() / Scl.scl(230)),1);\n  float mapsize=200f;\n  int i=0;\n  for (  Map map : Vars.maps.all()) {\n    if (i % maxwidth == 0) {\n      maps.row();\n    }\n    TextButton button=maps.button(\"\",Styles.cleart,() -> showMapInfo(map)).width(mapsize).pad(8).get();\n    button.clearChildren();\n    button.margin(9);\n    button.add(map.name()).width(mapsize - 18f).center().get().setEllipsis(true);\n    button.row();\n    button.image().growX().pad(4).color(Pal.gray);\n    button.row();\n    button.stack(new Image(map.safeTexture()).setScaling(Scaling.fit),new BorderImage(map.safeTexture()).setScaling(Scaling.fit)).size(mapsize - 20f);\n    button.row();\n    button.add(map.custom ? \"@custom\" : map.workshop ? \"@workshop\" : map.mod != null ? \"[lightgray]\" + map.mod.meta.displayName() : \"@builtin\").color(Color.gray).padTop(3);\n    i++;\n  }\n  if (Vars.maps.all().size == 0) {\n    maps.add(\"@maps.none\");\n  }\n  cont.add(buttons).growX();\n  cont.row();\n  cont.add(pane).uniformX();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 603,
      "astHeight" : 33
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4423,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 151,
        "endColumnNumber" : 5
      },
      "nodeContext" : "void setup(){\n  buttons.clearChildren();\n  if (Core.graphics.isPortrait()) {\n    buttons.button(\"@back\",Icon.left,this::hide).size(210f * 2f,64f).colspan(2);\n    buttons.row();\n  }\n else {\n    buttons.button(\"@back\",Icon.left,this::hide).size(210f,64f);\n  }\n  buttons.button(\"@editor.newmap\",Icon.add,() -> {\n    ui.showTextInput(\"@editor.newmap\",\"@editor.mapname\",\"\",text -> {\n      Runnable show=() -> ui.loadAnd(() -> {\n        hide();\n        ui.editor.show();\n        ui.editor.editor.tags.put(\"name\",text);\n        Events.fire(new MapMakeEvent());\n      }\n);\n      if (maps.byName(text) != null) {\n        ui.showErrorMessage(\"@editor.exists\");\n      }\n else {\n        show.run();\n      }\n    }\n);\n  }\n).size(210f,64f);\n  buttons.button(\"@editor.importmap\",Icon.upload,() -> {\n    platform.showFileChooser(true,mapExtension,file -> {\n      ui.loadAnd(() -> {\n        maps.tryCatchMapError(() -> {\n          if (MapIO.isImage(file)) {\n            ui.showErrorMessage(\"@editor.errorimage\");\n            return;\n          }\n          Map map=MapIO.createMap(file,true);\n          String name=map.tags.get(\"name\",() -> {\n            String result=\"unknown\";\n            int number=0;\n            while (maps.byName(result + number++) != null)             ;\n            return result + number;\n          }\n);\n          if (name == null) {\n            ui.showErrorMessage(\"@editor.errorname\");\n            return;\n          }\n          Map conflict=maps.all().find(m -> m.name().equals(name));\n          if (conflict != null && !conflict.custom) {\n            ui.showInfo(Core.bundle.format(\"editor.import.exists\",name));\n          }\n else           if (conflict != null) {\n            ui.showConfirm(\"@confirm\",Core.bundle.format(\"editor.overwrite.confirm\",map.name()),() -> {\n              maps.tryCatchMapError(() -> {\n                maps.removeMap(conflict);\n                maps.importMap(map.file);\n                setup();\n              }\n);\n            }\n);\n          }\n else {\n            maps.importMap(map.file);\n            setup();\n          }\n        }\n);\n      }\n);\n    }\n);\n  }\n).size(210f,64f);\n  cont.clear();\n  Table maps=new Table();\n  maps.marginRight(24);\n  ScrollPane pane=new ScrollPane(maps);\n  pane.setFadeScrollBars(false);\n  int maxwidth=Math.max((int)(Core.graphics.getWidth() / Scl.scl(230)),1);\n  float mapsize=200f;\n  int i=0;\n  for (  Map map : Vars.maps.all()) {\n    if (i % maxwidth == 0) {\n      maps.row();\n    }\n    TextButton button=maps.button(\"\",Styles.cleart,() -> showMapInfo(map)).width(mapsize).pad(8).get();\n    button.clearChildren();\n    button.margin(9);\n    button.add(map.name()).width(mapsize - 18f).center().get().setEllipsis(true);\n    button.row();\n    button.image().growX().pad(4).color(Pal.gray);\n    button.row();\n    button.stack(new Image(map.safeTexture()).setScaling(Scaling.fit),new BorderImage(map.safeTexture()).setScaling(Scaling.fit)).size(mapsize - 20f);\n    button.row();\n    button.add(map.custom ? \"@custom\" : map.workshop ? \"@workshop\" : map.mod != null ? \"[lightgray]\" + map.mod.meta.displayName() : \"@builtin\").color(Color.gray).padTop(3);\n    i++;\n  }\n  if (Vars.maps.all().size == 0) {\n    maps.add(\"@maps.none\");\n  }\n  cont.add(buttons).growX();\n  cont.row();\n  cont.add(pane).uniformX();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 606,
      "astHeight" : 34
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 120,
        "endColumnNumber" : 83
      },
      "nodeContext" : "int maxwidth=Math.max((int)(Core.graphics.getWidth() / Scl.scl(230)),1);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 9
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 120,
    "startColumnNumber" : 73,
    "endLineNumber" : 120,
    "endColumnNumber" : 76
  } ],
  "layoutRelationDataList" : [ ]
}