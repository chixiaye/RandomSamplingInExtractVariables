{
  "id" : 20,
  "expression" : "i",
  "projectName" : "TheAlgorithms@Java",
  "commitID" : "8b243667d736be7d0413cc77159378aa02459db0",
  "filePath" : "/src/main/java/com/thealgorithms/datastructures/stacks/ReverseStack.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 21,
      "startColumnNumber" : 20,
      "endLineNumber" : 21,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 21,
        "startColumnNumber" : 20,
        "endLineNumber" : 21,
        "endColumnNumber" : 25
      },
      "nodeContext" : "i < n",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 21,
        "startColumnNumber" : 8,
        "endLineNumber" : 23,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (i=0; i < n; i++) {\n  stack.push(sc.nextInt());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 624,
        "startLineNumber" : 13,
        "startColumnNumber" : 43,
        "endLineNumber" : 32,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Scanner sc=new Scanner(System.in);\n  System.out.println(\"Enter the number of elements you wish to insert in the stack\");\n  int n=sc.nextInt();\n  int i;\n  Stack<Integer> stack=new Stack<Integer>();\n  System.out.println(\"Enter the stack elements\");\n  for (i=0; i < n; i++) {\n    stack.push(sc.nextInt());\n  }\n  sc.close();\n  reverseStack(stack);\n  System.out.println(\"The reversed stack is:\");\n  while (!stack.isEmpty()) {\n    System.out.print(stack.peek() + \",\");\n    stack.pop();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 104,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 663,
        "startLineNumber" : 13,
        "startColumnNumber" : 4,
        "endLineNumber" : 32,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void main(String args[]){\n  Scanner sc=new Scanner(System.in);\n  System.out.println(\"Enter the number of elements you wish to insert in the stack\");\n  int n=sc.nextInt();\n  int i;\n  Stack<Integer> stack=new Stack<Integer>();\n  System.out.println(\"Enter the stack elements\");\n  for (i=0; i < n; i++) {\n    stack.push(sc.nextInt());\n  }\n  sc.close();\n  reverseStack(stack);\n  System.out.println(\"The reversed stack is:\");\n  while (!stack.isEmpty()) {\n    System.out.print(stack.peek() + \",\");\n    stack.pop();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 114,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 21,
        "startColumnNumber" : 20,
        "endLineNumber" : 21,
        "endColumnNumber" : 25
      },
      "nodeContext" : "i < n",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 21,
    "startColumnNumber" : 20,
    "endLineNumber" : 21,
    "endColumnNumber" : 21
  } ],
  "layoutRelationDataList" : [ ]
}