{
  "id" : 473,
  "expression" : "dest.floor().attributes",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/core/src/mindustry/maps/planet/ErekirPlanetGenerator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "dest.floor().attributes",
    "nodeType" : "FieldAccess",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 420,
      "startColumnNumber" : 51,
      "endLineNumber" : 420,
      "endColumnNumber" : 74
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 420,
        "startColumnNumber" : 51,
        "endLineNumber" : 420,
        "endColumnNumber" : 95
      },
      "nodeContext" : "dest.floor().attributes.get(Attribute.steam)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 420,
        "startColumnNumber" : 51,
        "endLineNumber" : 420,
        "endColumnNumber" : 100
      },
      "nodeContext" : "dest.floor().attributes.get(Attribute.steam) == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 420,
        "startColumnNumber" : 35,
        "endLineNumber" : 420,
        "endColumnNumber" : 100
      },
      "nodeContext" : "dest != null && dest.floor().attributes.get(Attribute.steam) == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 420,
        "startColumnNumber" : 35,
        "endLineNumber" : 420,
        "endColumnNumber" : 140
      },
      "nodeContext" : "dest != null && dest.floor().attributes.get(Attribute.steam) == 0 && dest.floor() != Blocks.roughRhyolite",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 24,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 145,
        "startLineNumber" : 420,
        "startColumnNumber" : 35,
        "endLineNumber" : 420,
        "endColumnNumber" : 180
      },
      "nodeContext" : "dest != null && dest.floor().attributes.get(Attribute.steam) == 0 && dest.floor() != Blocks.roughRhyolite && dest.floor() != Blocks.arkyciteFloor",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 32,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 176,
        "startLineNumber" : 420,
        "startColumnNumber" : 35,
        "endLineNumber" : 420,
        "endColumnNumber" : 211
      },
      "nodeContext" : "dest != null && dest.floor().attributes.get(Attribute.steam) == 0 && dest.floor() != Blocks.roughRhyolite && dest.floor() != Blocks.arkyciteFloor && dest.floor() != Blocks.slag",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 40,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 516,
        "startLineNumber" : 420,
        "startColumnNumber" : 32,
        "endLineNumber" : 427,
        "endColumnNumber" : 33
      },
      "nodeContext" : "if (dest != null && dest.floor().attributes.get(Attribute.steam) == 0 && dest.floor() != Blocks.roughRhyolite && dest.floor() != Blocks.arkyciteFloor && dest.floor() != Blocks.slag) {\n  dest.setFloor(rand.chance(0.08) ? secondFloor.asFloor() : floor.asFloor());\n  if (dest.block().isStatic()) {\n    dest.setBlock(floor.asFloor().wall);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 73,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 646,
        "startLineNumber" : 418,
        "startColumnNumber" : 116,
        "endLineNumber" : 428,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  Tile dest=tiles.get(rx,ry);\n  if (dest != null && dest.floor().attributes.get(Attribute.steam) == 0 && dest.floor() != Blocks.roughRhyolite && dest.floor() != Blocks.arkyciteFloor && dest.floor() != Blocks.slag) {\n    dest.setFloor(rand.chance(0.08) ? secondFloor.asFloor() : floor.asFloor());\n    if (dest.block().isStatic()) {\n      dest.setBlock(floor.asFloor().wall);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 84,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 734,
        "startLineNumber" : 418,
        "startColumnNumber" : 28,
        "endLineNumber" : 428,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (cx * cx + rcy * rcy <= crad2 - noise(rx,ry + rx * 2f * xDir,2,0.7f,8f,crad2 * 1.1f)) {\n  Tile dest=tiles.get(rx,ry);\n  if (dest != null && dest.floor().attributes.get(Attribute.steam) == 0 && dest.floor() != Blocks.roughRhyolite && dest.floor() != Blocks.arkyciteFloor && dest.floor() != Blocks.slag) {\n    dest.setFloor(rand.chance(0.08) ? secondFloor.asFloor() : floor.asFloor());\n    if (dest.block().isStatic()) {\n      dest.setBlock(floor.asFloor().wall);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 110,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 961,
        "startLineNumber" : 414,
        "startColumnNumber" : 61,
        "endLineNumber" : 429,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  int rx=cx + tile.x, ry=cy + tile.y;\n  float rcy=cy + cx * 0.9f;\n  if (cx * cx + rcy * rcy <= crad2 - noise(rx,ry + rx * 2f * xDir,2,0.7f,8f,crad2 * 1.1f)) {\n    Tile dest=tiles.get(rx,ry);\n    if (dest != null && dest.floor().attributes.get(Attribute.steam) == 0 && dest.floor() != Blocks.roughRhyolite && dest.floor() != Blocks.arkyciteFloor && dest.floor() != Blocks.slag) {\n      dest.setFloor(rand.chance(0.08) ? secondFloor.asFloor() : floor.asFloor());\n      if (dest.block().isStatic()) {\n        dest.setBlock(floor.asFloor().wall);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 136,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 998,
        "startLineNumber" : 414,
        "startColumnNumber" : 24,
        "endLineNumber" : 429,
        "endColumnNumber" : 25
      },
      "nodeContext" : "for (int cy=-crad; cy <= crad; cy++) {\n  int rx=cx + tile.x, ry=cy + tile.y;\n  float rcy=cy + cx * 0.9f;\n  if (cx * cx + rcy * rcy <= crad2 - noise(rx,ry + rx * 2f * xDir,2,0.7f,8f,crad2 * 1.1f)) {\n    Tile dest=tiles.get(rx,ry);\n    if (dest != null && dest.floor().attributes.get(Attribute.steam) == 0 && dest.floor() != Blocks.roughRhyolite && dest.floor() != Blocks.arkyciteFloor && dest.floor() != Blocks.slag) {\n      dest.setFloor(rand.chance(0.08) ? secondFloor.asFloor() : floor.asFloor());\n      if (dest.block().isStatic()) {\n        dest.setBlock(floor.asFloor().wall);\n      }\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 148,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1048,
        "startLineNumber" : 413,
        "startColumnNumber" : 57,
        "endLineNumber" : 430,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  for (int cy=-crad; cy <= crad; cy++) {\n    int rx=cx + tile.x, ry=cy + tile.y;\n    float rcy=cy + cx * 0.9f;\n    if (cx * cx + rcy * rcy <= crad2 - noise(rx,ry + rx * 2f * xDir,2,0.7f,8f,crad2 * 1.1f)) {\n      Tile dest=tiles.get(rx,ry);\n      if (dest != null && dest.floor().attributes.get(Attribute.steam) == 0 && dest.floor() != Blocks.roughRhyolite && dest.floor() != Blocks.arkyciteFloor && dest.floor() != Blocks.slag) {\n        dest.setFloor(rand.chance(0.08) ? secondFloor.asFloor() : floor.asFloor());\n        if (dest.block().isStatic()) {\n          dest.setBlock(floor.asFloor().wall);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 149,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1085,
        "startLineNumber" : 413,
        "startColumnNumber" : 20,
        "endLineNumber" : 430,
        "endColumnNumber" : 21
      },
      "nodeContext" : "for (int cx=-crad; cx <= crad; cx++) {\n  for (int cy=-crad; cy <= crad; cy++) {\n    int rx=cx + tile.x, ry=cy + tile.y;\n    float rcy=cy + cx * 0.9f;\n    if (cx * cx + rcy * rcy <= crad2 - noise(rx,ry + rx * 2f * xDir,2,0.7f,8f,crad2 * 1.1f)) {\n      Tile dest=tiles.get(rx,ry);\n      if (dest != null && dest.floor().attributes.get(Attribute.steam) == 0 && dest.floor() != Blocks.roughRhyolite && dest.floor() != Blocks.arkyciteFloor && dest.floor() != Blocks.slag) {\n        dest.setFloor(rand.chance(0.08) ? secondFloor.asFloor() : floor.asFloor());\n        if (dest.block().isStatic()) {\n          dest.setBlock(floor.asFloor().wall);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 161,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 3796,
        "startLineNumber" : 362,
        "startColumnNumber" : 112,
        "endLineNumber" : 432,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (tile.floor() == Blocks.crystallineStone || tile.floor() == Blocks.crystalFloor) {\n    continue;\n  }\n  int radius=1;\n  for (int x=-radius; x <= radius; x++) {\n    for (int y=-radius; y <= radius; y++) {\n      Tile other=tiles.get(x + tile.x,y + tile.y);\n      if (other == null || other.block().solid || other.floor().attributes.get(Attribute.steam) != 0 || other.floor() == Blocks.slag || other.floor() == Blocks.arkyciteFloor) {\n        continue outer;\n      }\n    }\n  }\n  Block floor=Blocks.rhyolite, secondFloor=Blocks.rhyoliteCrater, vent=Blocks.rhyoliteVent;\n  int xDir=1;\n  if (tile.floor() == Blocks.beryllicStone || tile.floor() == Blocks.arkyicStone) {\n    floor=secondFloor=Blocks.arkyicStone;\n    vent=Blocks.arkyicVent;\n  }\n else   if (tile.floor() == Blocks.yellowStone || tile.floor() == Blocks.yellowStonePlates || tile.floor() == Blocks.regolith) {\n    floor=Blocks.yellowStone;\n    secondFloor=Blocks.yellowStonePlates;\n    vent=Blocks.yellowStoneVent;\n  }\n else   if (tile.floor() == Blocks.redStone || tile.floor() == Blocks.denseRedStone) {\n    floor=Blocks.denseRedStone;\n    secondFloor=Blocks.redStone;\n    vent=Blocks.redStoneVent;\n    xDir=-1;\n  }\n else   if (tile.floor() == Blocks.carbonStone) {\n    floor=secondFloor=Blocks.carbonStone;\n    vent=Blocks.carbonVent;\n  }\n  ventCount++;\n  for (  var pos : SteamVent.offsets) {\n    Tile other=tiles.get(pos.x + tile.x + 1,pos.y + tile.y + 1);\n    other.setFloor(vent.asFloor());\n  }\n  int crad=rand.random(6,14), crad2=crad * crad;\n  for (int cx=-crad; cx <= crad; cx++) {\n    for (int cy=-crad; cy <= crad; cy++) {\n      int rx=cx + tile.x, ry=cy + tile.y;\n      float rcy=cy + cx * 0.9f;\n      if (cx * cx + rcy * rcy <= crad2 - noise(rx,ry + rx * 2f * xDir,2,0.7f,8f,crad2 * 1.1f)) {\n        Tile dest=tiles.get(rx,ry);\n        if (dest != null && dest.floor().attributes.get(Attribute.steam) == 0 && dest.floor() != Blocks.roughRhyolite && dest.floor() != Blocks.arkyciteFloor && dest.floor() != Blocks.slag) {\n          dest.setFloor(rand.chance(0.08) ? secondFloor.asFloor() : floor.asFloor());\n          if (dest.block().isStatic()) {\n            dest.setBlock(floor.asFloor().wall);\n          }\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 488,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3892,
        "startLineNumber" : 362,
        "startColumnNumber" : 16,
        "endLineNumber" : 432,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (rand.chance(0.00018 * (1 + iterations)) && !Mathf.within(tile.x,tile.y,spawnX,spawnY,5f)) {\n  if (tile.floor() == Blocks.crystallineStone || tile.floor() == Blocks.crystalFloor) {\n    continue;\n  }\n  int radius=1;\n  for (int x=-radius; x <= radius; x++) {\n    for (int y=-radius; y <= radius; y++) {\n      Tile other=tiles.get(x + tile.x,y + tile.y);\n      if (other == null || other.block().solid || other.floor().attributes.get(Attribute.steam) != 0 || other.floor() == Blocks.slag || other.floor() == Blocks.arkyciteFloor) {\n        continue outer;\n      }\n    }\n  }\n  Block floor=Blocks.rhyolite, secondFloor=Blocks.rhyoliteCrater, vent=Blocks.rhyoliteVent;\n  int xDir=1;\n  if (tile.floor() == Blocks.beryllicStone || tile.floor() == Blocks.arkyicStone) {\n    floor=secondFloor=Blocks.arkyicStone;\n    vent=Blocks.arkyicVent;\n  }\n else   if (tile.floor() == Blocks.yellowStone || tile.floor() == Blocks.yellowStonePlates || tile.floor() == Blocks.regolith) {\n    floor=Blocks.yellowStone;\n    secondFloor=Blocks.yellowStonePlates;\n    vent=Blocks.yellowStoneVent;\n  }\n else   if (tile.floor() == Blocks.redStone || tile.floor() == Blocks.denseRedStone) {\n    floor=Blocks.denseRedStone;\n    secondFloor=Blocks.redStone;\n    vent=Blocks.redStoneVent;\n    xDir=-1;\n  }\n else   if (tile.floor() == Blocks.carbonStone) {\n    floor=secondFloor=Blocks.carbonStone;\n    vent=Blocks.carbonVent;\n  }\n  ventCount++;\n  for (  var pos : SteamVent.offsets) {\n    Tile other=tiles.get(pos.x + tile.x + 1,pos.y + tile.y + 1);\n    other.setFloor(vent.asFloor());\n  }\n  int crad=rand.random(6,14), crad2=crad * crad;\n  for (int cx=-crad; cx <= crad; cx++) {\n    for (int cy=-crad; cy <= crad; cy++) {\n      int rx=cx + tile.x, ry=cy + tile.y;\n      float rcy=cy + cx * 0.9f;\n      if (cx * cx + rcy * rcy <= crad2 - noise(rx,ry + rx * 2f * xDir,2,0.7f,8f,crad2 * 1.1f)) {\n        Tile dest=tiles.get(rx,ry);\n        if (dest != null && dest.floor().attributes.get(Attribute.steam) == 0 && dest.floor() != Blocks.roughRhyolite && dest.floor() != Blocks.arkyciteFloor && dest.floor() != Blocks.slag) {\n          dest.setFloor(rand.chance(0.08) ? secondFloor.asFloor() : floor.asFloor());\n          if (dest.block().isStatic()) {\n            dest.setBlock(floor.asFloor().wall);\n          }\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 512,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3926,
        "startLineNumber" : 361,
        "startColumnNumber" : 34,
        "endLineNumber" : 433,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (rand.chance(0.00018 * (1 + iterations)) && !Mathf.within(tile.x,tile.y,spawnX,spawnY,5f)) {\n    if (tile.floor() == Blocks.crystallineStone || tile.floor() == Blocks.crystalFloor) {\n      continue;\n    }\n    int radius=1;\n    for (int x=-radius; x <= radius; x++) {\n      for (int y=-radius; y <= radius; y++) {\n        Tile other=tiles.get(x + tile.x,y + tile.y);\n        if (other == null || other.block().solid || other.floor().attributes.get(Attribute.steam) != 0 || other.floor() == Blocks.slag || other.floor() == Blocks.arkyciteFloor) {\n          continue outer;\n        }\n      }\n    }\n    Block floor=Blocks.rhyolite, secondFloor=Blocks.rhyoliteCrater, vent=Blocks.rhyoliteVent;\n    int xDir=1;\n    if (tile.floor() == Blocks.beryllicStone || tile.floor() == Blocks.arkyicStone) {\n      floor=secondFloor=Blocks.arkyicStone;\n      vent=Blocks.arkyicVent;\n    }\n else     if (tile.floor() == Blocks.yellowStone || tile.floor() == Blocks.yellowStonePlates || tile.floor() == Blocks.regolith) {\n      floor=Blocks.yellowStone;\n      secondFloor=Blocks.yellowStonePlates;\n      vent=Blocks.yellowStoneVent;\n    }\n else     if (tile.floor() == Blocks.redStone || tile.floor() == Blocks.denseRedStone) {\n      floor=Blocks.denseRedStone;\n      secondFloor=Blocks.redStone;\n      vent=Blocks.redStoneVent;\n      xDir=-1;\n    }\n else     if (tile.floor() == Blocks.carbonStone) {\n      floor=secondFloor=Blocks.carbonStone;\n      vent=Blocks.carbonVent;\n    }\n    ventCount++;\n    for (    var pos : SteamVent.offsets) {\n      Tile other=tiles.get(pos.x + tile.x + 1,pos.y + tile.y + 1);\n      other.setFloor(vent.asFloor());\n    }\n    int crad=rand.random(6,14), crad2=crad * crad;\n    for (int cx=-crad; cx <= crad; cx++) {\n      for (int cy=-crad; cy <= crad; cy++) {\n        int rx=cx + tile.x, ry=cy + tile.y;\n        float rcy=cy + cx * 0.9f;\n        if (cx * cx + rcy * rcy <= crad2 - noise(rx,ry + rx * 2f * xDir,2,0.7f,8f,crad2 * 1.1f)) {\n          Tile dest=tiles.get(rx,ry);\n          if (dest != null && dest.floor().attributes.get(Attribute.steam) == 0 && dest.floor() != Blocks.roughRhyolite && dest.floor() != Blocks.arkyciteFloor && dest.floor() != Blocks.slag) {\n            dest.setFloor(rand.chance(0.08) ? secondFloor.asFloor() : floor.asFloor());\n            if (dest.block().isStatic()) {\n              dest.setBlock(floor.asFloor().wall);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 513,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LabeledStatement,body]",
      "nodePosition" : {
        "charLength" : 3948,
        "startLineNumber" : 361,
        "startColumnNumber" : 12,
        "endLineNumber" : 433,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Tile tile : tiles) {\n  if (rand.chance(0.00018 * (1 + iterations)) && !Mathf.within(tile.x,tile.y,spawnX,spawnY,5f)) {\n    if (tile.floor() == Blocks.crystallineStone || tile.floor() == Blocks.crystalFloor) {\n      continue;\n    }\n    int radius=1;\n    for (int x=-radius; x <= radius; x++) {\n      for (int y=-radius; y <= radius; y++) {\n        Tile other=tiles.get(x + tile.x,y + tile.y);\n        if (other == null || other.block().solid || other.floor().attributes.get(Attribute.steam) != 0 || other.floor() == Blocks.slag || other.floor() == Blocks.arkyciteFloor) {\n          continue outer;\n        }\n      }\n    }\n    Block floor=Blocks.rhyolite, secondFloor=Blocks.rhyoliteCrater, vent=Blocks.rhyoliteVent;\n    int xDir=1;\n    if (tile.floor() == Blocks.beryllicStone || tile.floor() == Blocks.arkyicStone) {\n      floor=secondFloor=Blocks.arkyicStone;\n      vent=Blocks.arkyicVent;\n    }\n else     if (tile.floor() == Blocks.yellowStone || tile.floor() == Blocks.yellowStonePlates || tile.floor() == Blocks.regolith) {\n      floor=Blocks.yellowStone;\n      secondFloor=Blocks.yellowStonePlates;\n      vent=Blocks.yellowStoneVent;\n    }\n else     if (tile.floor() == Blocks.redStone || tile.floor() == Blocks.denseRedStone) {\n      floor=Blocks.denseRedStone;\n      secondFloor=Blocks.redStone;\n      vent=Blocks.redStoneVent;\n      xDir=-1;\n    }\n else     if (tile.floor() == Blocks.carbonStone) {\n      floor=secondFloor=Blocks.carbonStone;\n      vent=Blocks.carbonVent;\n    }\n    ventCount++;\n    for (    var pos : SteamVent.offsets) {\n      Tile other=tiles.get(pos.x + tile.x + 1,pos.y + tile.y + 1);\n      other.setFloor(vent.asFloor());\n    }\n    int crad=rand.random(6,14), crad2=crad * crad;\n    for (int cx=-crad; cx <= crad; cx++) {\n      for (int cy=-crad; cy <= crad; cy++) {\n        int rx=cx + tile.x, ry=cy + tile.y;\n        float rcy=cy + cx * 0.9f;\n        if (cx * cx + rcy * rcy <= crad2 - noise(rx,ry + rx * 2f * xDir,2,0.7f,8f,crad2 * 1.1f)) {\n          Tile dest=tiles.get(rx,ry);\n          if (dest != null && dest.floor().attributes.get(Attribute.steam) == 0 && dest.floor() != Blocks.roughRhyolite && dest.floor() != Blocks.arkyciteFloor && dest.floor() != Blocks.slag) {\n            dest.setFloor(rand.chance(0.08) ? secondFloor.asFloor() : floor.asFloor());\n            if (dest.block().isStatic()) {\n              dest.setBlock(floor.asFloor().wall);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 519,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3968,
        "startLineNumber" : 360,
        "startColumnNumber" : 12,
        "endLineNumber" : 433,
        "endColumnNumber" : 13
      },
      "nodeContext" : "outer: for (Tile tile : tiles) {\n  if (rand.chance(0.00018 * (1 + iterations)) && !Mathf.within(tile.x,tile.y,spawnX,spawnY,5f)) {\n    if (tile.floor() == Blocks.crystallineStone || tile.floor() == Blocks.crystalFloor) {\n      continue;\n    }\n    int radius=1;\n    for (int x=-radius; x <= radius; x++) {\n      for (int y=-radius; y <= radius; y++) {\n        Tile other=tiles.get(x + tile.x,y + tile.y);\n        if (other == null || other.block().solid || other.floor().attributes.get(Attribute.steam) != 0 || other.floor() == Blocks.slag || other.floor() == Blocks.arkyciteFloor) {\n          continue outer;\n        }\n      }\n    }\n    Block floor=Blocks.rhyolite, secondFloor=Blocks.rhyoliteCrater, vent=Blocks.rhyoliteVent;\n    int xDir=1;\n    if (tile.floor() == Blocks.beryllicStone || tile.floor() == Blocks.arkyicStone) {\n      floor=secondFloor=Blocks.arkyicStone;\n      vent=Blocks.arkyicVent;\n    }\n else     if (tile.floor() == Blocks.yellowStone || tile.floor() == Blocks.yellowStonePlates || tile.floor() == Blocks.regolith) {\n      floor=Blocks.yellowStone;\n      secondFloor=Blocks.yellowStonePlates;\n      vent=Blocks.yellowStoneVent;\n    }\n else     if (tile.floor() == Blocks.redStone || tile.floor() == Blocks.denseRedStone) {\n      floor=Blocks.denseRedStone;\n      secondFloor=Blocks.redStone;\n      vent=Blocks.redStoneVent;\n      xDir=-1;\n    }\n else     if (tile.floor() == Blocks.carbonStone) {\n      floor=secondFloor=Blocks.carbonStone;\n      vent=Blocks.carbonVent;\n    }\n    ventCount++;\n    for (    var pos : SteamVent.offsets) {\n      Tile other=tiles.get(pos.x + tile.x + 1,pos.y + tile.y + 1);\n      other.setFloor(vent.asFloor());\n    }\n    int crad=rand.random(6,14), crad2=crad * crad;\n    for (int cx=-crad; cx <= crad; cx++) {\n      for (int cy=-crad; cy <= crad; cy++) {\n        int rx=cx + tile.x, ry=cy + tile.y;\n        float rcy=cy + cx * 0.9f;\n        if (cx * cx + rcy * rcy <= crad2 - noise(rx,ry + rx * 2f * xDir,2,0.7f,8f,crad2 * 1.1f)) {\n          Tile dest=tiles.get(rx,ry);\n          if (dest != null && dest.floor().attributes.get(Attribute.steam) == 0 && dest.floor() != Blocks.roughRhyolite && dest.floor() != Blocks.arkyciteFloor && dest.floor() != Blocks.slag) {\n            dest.setFloor(rand.chance(0.08) ? secondFloor.asFloor() : floor.asFloor());\n            if (dest.block().isStatic()) {\n              dest.setBlock(floor.asFloor().wall);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "LabeledStatement",
      "astNodeNumber" : 521,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 3994,
        "startLineNumber" : 359,
        "startColumnNumber" : 67,
        "endLineNumber" : 434,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  outer:   for (  Tile tile : tiles) {\n    if (rand.chance(0.00018 * (1 + iterations)) && !Mathf.within(tile.x,tile.y,spawnX,spawnY,5f)) {\n      if (tile.floor() == Blocks.crystallineStone || tile.floor() == Blocks.crystalFloor) {\n        continue;\n      }\n      int radius=1;\n      for (int x=-radius; x <= radius; x++) {\n        for (int y=-radius; y <= radius; y++) {\n          Tile other=tiles.get(x + tile.x,y + tile.y);\n          if (other == null || other.block().solid || other.floor().attributes.get(Attribute.steam) != 0 || other.floor() == Blocks.slag || other.floor() == Blocks.arkyciteFloor) {\n            continue outer;\n          }\n        }\n      }\n      Block floor=Blocks.rhyolite, secondFloor=Blocks.rhyoliteCrater, vent=Blocks.rhyoliteVent;\n      int xDir=1;\n      if (tile.floor() == Blocks.beryllicStone || tile.floor() == Blocks.arkyicStone) {\n        floor=secondFloor=Blocks.arkyicStone;\n        vent=Blocks.arkyicVent;\n      }\n else       if (tile.floor() == Blocks.yellowStone || tile.floor() == Blocks.yellowStonePlates || tile.floor() == Blocks.regolith) {\n        floor=Blocks.yellowStone;\n        secondFloor=Blocks.yellowStonePlates;\n        vent=Blocks.yellowStoneVent;\n      }\n else       if (tile.floor() == Blocks.redStone || tile.floor() == Blocks.denseRedStone) {\n        floor=Blocks.denseRedStone;\n        secondFloor=Blocks.redStone;\n        vent=Blocks.redStoneVent;\n        xDir=-1;\n      }\n else       if (tile.floor() == Blocks.carbonStone) {\n        floor=secondFloor=Blocks.carbonStone;\n        vent=Blocks.carbonVent;\n      }\n      ventCount++;\n      for (      var pos : SteamVent.offsets) {\n        Tile other=tiles.get(pos.x + tile.x + 1,pos.y + tile.y + 1);\n        other.setFloor(vent.asFloor());\n      }\n      int crad=rand.random(6,14), crad2=crad * crad;\n      for (int cx=-crad; cx <= crad; cx++) {\n        for (int cy=-crad; cy <= crad; cy++) {\n          int rx=cx + tile.x, ry=cy + tile.y;\n          float rcy=cy + cx * 0.9f;\n          if (cx * cx + rcy * rcy <= crad2 - noise(rx,ry + rx * 2f * xDir,2,0.7f,8f,crad2 * 1.1f)) {\n            Tile dest=tiles.get(rx,ry);\n            if (dest != null && dest.floor().attributes.get(Attribute.steam) == 0 && dest.floor() != Blocks.roughRhyolite && dest.floor() != Blocks.arkyciteFloor && dest.floor() != Blocks.slag) {\n              dest.setFloor(rand.chance(0.08) ? secondFloor.asFloor() : floor.asFloor());\n              if (dest.block().isStatic()) {\n                dest.setBlock(floor.asFloor().wall);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 522,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4053,
        "startLineNumber" : 359,
        "startColumnNumber" : 8,
        "endLineNumber" : 434,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (ventCount < minVents && iterations++ < maxIterations) {\n  outer:   for (  Tile tile : tiles) {\n    if (rand.chance(0.00018 * (1 + iterations)) && !Mathf.within(tile.x,tile.y,spawnX,spawnY,5f)) {\n      if (tile.floor() == Blocks.crystallineStone || tile.floor() == Blocks.crystalFloor) {\n        continue;\n      }\n      int radius=1;\n      for (int x=-radius; x <= radius; x++) {\n        for (int y=-radius; y <= radius; y++) {\n          Tile other=tiles.get(x + tile.x,y + tile.y);\n          if (other == null || other.block().solid || other.floor().attributes.get(Attribute.steam) != 0 || other.floor() == Blocks.slag || other.floor() == Blocks.arkyciteFloor) {\n            continue outer;\n          }\n        }\n      }\n      Block floor=Blocks.rhyolite, secondFloor=Blocks.rhyoliteCrater, vent=Blocks.rhyoliteVent;\n      int xDir=1;\n      if (tile.floor() == Blocks.beryllicStone || tile.floor() == Blocks.arkyicStone) {\n        floor=secondFloor=Blocks.arkyicStone;\n        vent=Blocks.arkyicVent;\n      }\n else       if (tile.floor() == Blocks.yellowStone || tile.floor() == Blocks.yellowStonePlates || tile.floor() == Blocks.regolith) {\n        floor=Blocks.yellowStone;\n        secondFloor=Blocks.yellowStonePlates;\n        vent=Blocks.yellowStoneVent;\n      }\n else       if (tile.floor() == Blocks.redStone || tile.floor() == Blocks.denseRedStone) {\n        floor=Blocks.denseRedStone;\n        secondFloor=Blocks.redStone;\n        vent=Blocks.redStoneVent;\n        xDir=-1;\n      }\n else       if (tile.floor() == Blocks.carbonStone) {\n        floor=secondFloor=Blocks.carbonStone;\n        vent=Blocks.carbonVent;\n      }\n      ventCount++;\n      for (      var pos : SteamVent.offsets) {\n        Tile other=tiles.get(pos.x + tile.x + 1,pos.y + tile.y + 1);\n        other.setFloor(vent.asFloor());\n      }\n      int crad=rand.random(6,14), crad2=crad * crad;\n      for (int cx=-crad; cx <= crad; cx++) {\n        for (int cy=-crad; cy <= crad; cy++) {\n          int rx=cx + tile.x, ry=cy + tile.y;\n          float rcy=cy + cx * 0.9f;\n          if (cx * cx + rcy * rcy <= crad2 - noise(rx,ry + rx * 2f * xDir,2,0.7f,8f,crad2 * 1.1f)) {\n            Tile dest=tiles.get(rx,ry);\n            if (dest != null && dest.floor().attributes.get(Attribute.steam) == 0 && dest.floor() != Blocks.roughRhyolite && dest.floor() != Blocks.arkyciteFloor && dest.floor() != Blocks.slag) {\n              dest.setFloor(rand.chance(0.08) ? secondFloor.asFloor() : floor.asFloor());\n              if (dest.block().isStatic()) {\n                dest.setBlock(floor.asFloor().wall);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 531,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 12554,
        "startLineNumber" : 145,
        "startColumnNumber" : 29,
        "endLineNumber" : 454,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  float temp=rawTemp(sector.tile.v);\n  if (temp > 0.7) {\n    pass((x,y) -> {\n      if (floor != Blocks.redIce) {\n        float noise=noise(x + 782,y,7,0.8f,280f,1f);\n        if (noise > 0.62f) {\n          if (noise > 0.635f) {\n            floor=Blocks.slag;\n          }\n else {\n            floor=Blocks.yellowStone;\n          }\n          ore=Blocks.air;\n        }\n        if (noise > 0.55f && floor == Blocks.beryllicStone) {\n          floor=Blocks.yellowStone;\n        }\n      }\n    }\n);\n  }\n  cells(4);\n  pass((x,y) -> {\n    if (floor == Blocks.regolith && noise(x,y,3,0.4f,13f,1f) > 0.59f) {\n      block=Blocks.regolithWall;\n    }\n  }\n);\n  float length=width / 2.6f;\n  Vec2 trns=Tmp.v1.trns(rand.random(360f),length);\n  int spawnX=(int)(trns.x + width / 2f), spawnY=(int)(trns.y + height / 2f), endX=(int)(-trns.x + width / 2f), endY=(int)(-trns.y + height / 2f);\n  float maxd=Mathf.dst(width / 2f,height / 2f);\n  erase(spawnX,spawnY,15);\n  brush(pathfind(spawnX,spawnY,endX,endY,tile -> (tile.solid() ? 300f : 0f) + maxd - tile.dst(width / 2f,height / 2f) / 10f,Astar.manhattan),9);\n  erase(endX,endY,15);\n  pass((x,y) -> {\n    if (floor != Blocks.beryllicStone)     return;\n    if (Math.abs(noise(x,y + 500f,5,0.6f,40f,1f) - 0.5f) < 0.09f) {\n      floor=Blocks.arkyicStone;\n    }\n    if (nearWall(x,y))     return;\n    float noise=noise(x + 300,y - x * 1.6f + 100,4,0.8f,liqScl,1f);\n    if (noise > liqThresh) {\n      floor=Blocks.arkyciteFloor;\n    }\n  }\n);\n  median(2,0.6,Blocks.arkyciteFloor);\n  blend(Blocks.arkyciteFloor,Blocks.arkyicStone,4);\n  blend(Blocks.slag,Blocks.yellowStonePlates,4);\n  distort(10f,12f);\n  distort(5f,7f);\n  median(2,0.6,Blocks.arkyciteFloor);\n  median(3,0.6,Blocks.slag);\n  pass((x,y) -> {\n    if (noise(x,y + 600 + x,5,0.86f,60f,1f) < 0.41f && floor == Blocks.rhyolite) {\n      floor=Blocks.roughRhyolite;\n    }\n    if (floor == Blocks.slag && Mathf.within(x,y,spawnX,spawnY,30f + noise(x,y,2,0.8f,9f,15f))) {\n      floor=Blocks.yellowStonePlates;\n    }\n    if ((floor == Blocks.arkyciteFloor || floor == Blocks.arkyicStone) && block.isStatic()) {\n      block=Blocks.arkyicWall;\n    }\n    float max=0;\n    for (    Point2 p : Geometry.d8) {\n      max=Math.max(max,world.getDarkness(x + p.x,y + p.y));\n    }\n    if (max > 0) {\n      block=floor.asFloor().wall;\n      if (block == Blocks.air)       block=Blocks.yellowStoneWall;\n    }\n    if (floor == Blocks.yellowStonePlates && noise(x + 78 + y,y,3,0.8f,6f,1f) > 0.44f) {\n      floor=Blocks.yellowStone;\n    }\n    if (floor == Blocks.redStone && noise(x + 78 - y,y,4,0.73f,19f,1f) > 0.63f) {\n      floor=Blocks.denseRedStone;\n    }\n  }\n);\n  inverseFloodFill(tiles.getn(spawnX,spawnY));\n  blend(Blocks.redStoneWall,Blocks.denseRedStone,4);\n  erase(endX,endY,6);\n  tiles.getn(endX,endY).setOverlay(Blocks.spawn);\n  pass((x,y) -> {\n    if (block != Blocks.air) {\n      if (nearAir(x,y)) {\n        if (block == Blocks.carbonWall && noise(x + 78,y,4,0.7f,33f,1f) > 0.52f) {\n          block=Blocks.graphiticWall;\n        }\n else         if (block != Blocks.carbonWall && noise(x + 782,y,4,0.8f,38f,1f) > 0.665f) {\n          ore=Blocks.wallOreBeryllium;\n        }\n      }\n    }\n else     if (!nearWall(x,y)) {\n      if (noise(x + 150,y + x * 2 + 100,4,0.8f,55f,1f) > 0.76f) {\n        ore=Blocks.oreTungsten;\n      }\n      if (noise(x + 999,y + 600 - x,4,0.63f,45f,1f) < 0.27f && floor == Blocks.crystallineStone) {\n        ore=Blocks.oreCrystalThorium;\n      }\n    }\n    if (noise(x + 999,y + 600 - x,5,0.8f,45f,1f) < 0.44f && floor == Blocks.crystallineStone) {\n      floor=Blocks.crystalFloor;\n    }\n    if (block == Blocks.air && (floor == Blocks.crystallineStone || floor == Blocks.crystalFloor) && rand.chance(0.09) && nearWall(x,y) && !near(x,y,4,Blocks.crystalCluster) && !near(x,y,4,Blocks.vibrantCrystalCluster)) {\n      block=floor == Blocks.crystalFloor ? Blocks.vibrantCrystalCluster : Blocks.crystalCluster;\n      ore=Blocks.air;\n    }\n    if (block == Blocks.arkyicWall && rand.chance(0.23) && nearAir(x,y) && !near(x,y,3,Blocks.crystalOrbs)) {\n      block=Blocks.crystalOrbs;\n      ore=Blocks.air;\n    }\n    if (block == Blocks.regolithWall && rand.chance(0.3) && nearAir(x,y) && !near(x,y,3,Blocks.crystalBlocks)) {\n      block=Blocks.crystalBlocks;\n      ore=Blocks.air;\n    }\n  }\n);\n  pass((x,y) -> {\n    if (ore.asFloor().wallOre || block.itemDrop != null || (block == Blocks.air && ore != Blocks.air)) {\n      removeWall(x,y,3,b -> b instanceof TallBlock);\n    }\n  }\n);\n  trimDark();\n  int minVents=rand.random(6,9);\n  int ventCount=0;\n  outer:   for (  Tile tile : tiles) {\n    var floor=tile.floor();\n    if ((floor == Blocks.rhyolite || floor == Blocks.roughRhyolite) && rand.chance(0.002)) {\n      int radius=2;\n      for (int x=-radius; x <= radius; x++) {\n        for (int y=-radius; y <= radius; y++) {\n          Tile other=tiles.get(x + tile.x,y + tile.y);\n          if (other == null || (other.floor() != Blocks.rhyolite && other.floor() != Blocks.roughRhyolite) || other.block().solid) {\n            continue outer;\n          }\n        }\n      }\n      ventCount++;\n      for (      var pos : SteamVent.offsets) {\n        Tile other=tiles.get(pos.x + tile.x + 1,pos.y + tile.y + 1);\n        other.setFloor(Blocks.rhyoliteVent.asFloor());\n      }\n    }\n  }\n  int iterations=0;\n  int maxIterations=5;\n  while (ventCount < minVents && iterations++ < maxIterations) {\n    outer:     for (    Tile tile : tiles) {\n      if (rand.chance(0.00018 * (1 + iterations)) && !Mathf.within(tile.x,tile.y,spawnX,spawnY,5f)) {\n        if (tile.floor() == Blocks.crystallineStone || tile.floor() == Blocks.crystalFloor) {\n          continue;\n        }\n        int radius=1;\n        for (int x=-radius; x <= radius; x++) {\n          for (int y=-radius; y <= radius; y++) {\n            Tile other=tiles.get(x + tile.x,y + tile.y);\n            if (other == null || other.block().solid || other.floor().attributes.get(Attribute.steam) != 0 || other.floor() == Blocks.slag || other.floor() == Blocks.arkyciteFloor) {\n              continue outer;\n            }\n          }\n        }\n        Block floor=Blocks.rhyolite, secondFloor=Blocks.rhyoliteCrater, vent=Blocks.rhyoliteVent;\n        int xDir=1;\n        if (tile.floor() == Blocks.beryllicStone || tile.floor() == Blocks.arkyicStone) {\n          floor=secondFloor=Blocks.arkyicStone;\n          vent=Blocks.arkyicVent;\n        }\n else         if (tile.floor() == Blocks.yellowStone || tile.floor() == Blocks.yellowStonePlates || tile.floor() == Blocks.regolith) {\n          floor=Blocks.yellowStone;\n          secondFloor=Blocks.yellowStonePlates;\n          vent=Blocks.yellowStoneVent;\n        }\n else         if (tile.floor() == Blocks.redStone || tile.floor() == Blocks.denseRedStone) {\n          floor=Blocks.denseRedStone;\n          secondFloor=Blocks.redStone;\n          vent=Blocks.redStoneVent;\n          xDir=-1;\n        }\n else         if (tile.floor() == Blocks.carbonStone) {\n          floor=secondFloor=Blocks.carbonStone;\n          vent=Blocks.carbonVent;\n        }\n        ventCount++;\n        for (        var pos : SteamVent.offsets) {\n          Tile other=tiles.get(pos.x + tile.x + 1,pos.y + tile.y + 1);\n          other.setFloor(vent.asFloor());\n        }\n        int crad=rand.random(6,14), crad2=crad * crad;\n        for (int cx=-crad; cx <= crad; cx++) {\n          for (int cy=-crad; cy <= crad; cy++) {\n            int rx=cx + tile.x, ry=cy + tile.y;\n            float rcy=cy + cx * 0.9f;\n            if (cx * cx + rcy * rcy <= crad2 - noise(rx,ry + rx * 2f * xDir,2,0.7f,8f,crad2 * 1.1f)) {\n              Tile dest=tiles.get(rx,ry);\n              if (dest != null && dest.floor().attributes.get(Attribute.steam) == 0 && dest.floor() != Blocks.roughRhyolite && dest.floor() != Blocks.arkyciteFloor && dest.floor() != Blocks.slag) {\n                dest.setFloor(rand.chance(0.08) ? secondFloor.asFloor() : floor.asFloor());\n                if (dest.block().isStatic()) {\n                  dest.setBlock(floor.asFloor().wall);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  for (  Tile tile : tiles) {\n    if (tile.overlay().needsSurface && !tile.floor().hasSurface()) {\n      tile.setOverlay(Blocks.air);\n    }\n  }\n  decoration(0.017f);\n  state.rules.env=sector.planet.defaultEnv;\n  state.rules.placeRangeCheck=true;\n  Schematics.placeLaunchLoadout(spawnX,spawnY);\n  state.rules.waves=false;\n  state.rules.showSpawns=true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1794,
      "astHeight" : 24
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 12594,
        "startLineNumber" : 144,
        "startColumnNumber" : 4,
        "endLineNumber" : 454,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override protected void generate(){\n  float temp=rawTemp(sector.tile.v);\n  if (temp > 0.7) {\n    pass((x,y) -> {\n      if (floor != Blocks.redIce) {\n        float noise=noise(x + 782,y,7,0.8f,280f,1f);\n        if (noise > 0.62f) {\n          if (noise > 0.635f) {\n            floor=Blocks.slag;\n          }\n else {\n            floor=Blocks.yellowStone;\n          }\n          ore=Blocks.air;\n        }\n        if (noise > 0.55f && floor == Blocks.beryllicStone) {\n          floor=Blocks.yellowStone;\n        }\n      }\n    }\n);\n  }\n  cells(4);\n  pass((x,y) -> {\n    if (floor == Blocks.regolith && noise(x,y,3,0.4f,13f,1f) > 0.59f) {\n      block=Blocks.regolithWall;\n    }\n  }\n);\n  float length=width / 2.6f;\n  Vec2 trns=Tmp.v1.trns(rand.random(360f),length);\n  int spawnX=(int)(trns.x + width / 2f), spawnY=(int)(trns.y + height / 2f), endX=(int)(-trns.x + width / 2f), endY=(int)(-trns.y + height / 2f);\n  float maxd=Mathf.dst(width / 2f,height / 2f);\n  erase(spawnX,spawnY,15);\n  brush(pathfind(spawnX,spawnY,endX,endY,tile -> (tile.solid() ? 300f : 0f) + maxd - tile.dst(width / 2f,height / 2f) / 10f,Astar.manhattan),9);\n  erase(endX,endY,15);\n  pass((x,y) -> {\n    if (floor != Blocks.beryllicStone)     return;\n    if (Math.abs(noise(x,y + 500f,5,0.6f,40f,1f) - 0.5f) < 0.09f) {\n      floor=Blocks.arkyicStone;\n    }\n    if (nearWall(x,y))     return;\n    float noise=noise(x + 300,y - x * 1.6f + 100,4,0.8f,liqScl,1f);\n    if (noise > liqThresh) {\n      floor=Blocks.arkyciteFloor;\n    }\n  }\n);\n  median(2,0.6,Blocks.arkyciteFloor);\n  blend(Blocks.arkyciteFloor,Blocks.arkyicStone,4);\n  blend(Blocks.slag,Blocks.yellowStonePlates,4);\n  distort(10f,12f);\n  distort(5f,7f);\n  median(2,0.6,Blocks.arkyciteFloor);\n  median(3,0.6,Blocks.slag);\n  pass((x,y) -> {\n    if (noise(x,y + 600 + x,5,0.86f,60f,1f) < 0.41f && floor == Blocks.rhyolite) {\n      floor=Blocks.roughRhyolite;\n    }\n    if (floor == Blocks.slag && Mathf.within(x,y,spawnX,spawnY,30f + noise(x,y,2,0.8f,9f,15f))) {\n      floor=Blocks.yellowStonePlates;\n    }\n    if ((floor == Blocks.arkyciteFloor || floor == Blocks.arkyicStone) && block.isStatic()) {\n      block=Blocks.arkyicWall;\n    }\n    float max=0;\n    for (    Point2 p : Geometry.d8) {\n      max=Math.max(max,world.getDarkness(x + p.x,y + p.y));\n    }\n    if (max > 0) {\n      block=floor.asFloor().wall;\n      if (block == Blocks.air)       block=Blocks.yellowStoneWall;\n    }\n    if (floor == Blocks.yellowStonePlates && noise(x + 78 + y,y,3,0.8f,6f,1f) > 0.44f) {\n      floor=Blocks.yellowStone;\n    }\n    if (floor == Blocks.redStone && noise(x + 78 - y,y,4,0.73f,19f,1f) > 0.63f) {\n      floor=Blocks.denseRedStone;\n    }\n  }\n);\n  inverseFloodFill(tiles.getn(spawnX,spawnY));\n  blend(Blocks.redStoneWall,Blocks.denseRedStone,4);\n  erase(endX,endY,6);\n  tiles.getn(endX,endY).setOverlay(Blocks.spawn);\n  pass((x,y) -> {\n    if (block != Blocks.air) {\n      if (nearAir(x,y)) {\n        if (block == Blocks.carbonWall && noise(x + 78,y,4,0.7f,33f,1f) > 0.52f) {\n          block=Blocks.graphiticWall;\n        }\n else         if (block != Blocks.carbonWall && noise(x + 782,y,4,0.8f,38f,1f) > 0.665f) {\n          ore=Blocks.wallOreBeryllium;\n        }\n      }\n    }\n else     if (!nearWall(x,y)) {\n      if (noise(x + 150,y + x * 2 + 100,4,0.8f,55f,1f) > 0.76f) {\n        ore=Blocks.oreTungsten;\n      }\n      if (noise(x + 999,y + 600 - x,4,0.63f,45f,1f) < 0.27f && floor == Blocks.crystallineStone) {\n        ore=Blocks.oreCrystalThorium;\n      }\n    }\n    if (noise(x + 999,y + 600 - x,5,0.8f,45f,1f) < 0.44f && floor == Blocks.crystallineStone) {\n      floor=Blocks.crystalFloor;\n    }\n    if (block == Blocks.air && (floor == Blocks.crystallineStone || floor == Blocks.crystalFloor) && rand.chance(0.09) && nearWall(x,y) && !near(x,y,4,Blocks.crystalCluster) && !near(x,y,4,Blocks.vibrantCrystalCluster)) {\n      block=floor == Blocks.crystalFloor ? Blocks.vibrantCrystalCluster : Blocks.crystalCluster;\n      ore=Blocks.air;\n    }\n    if (block == Blocks.arkyicWall && rand.chance(0.23) && nearAir(x,y) && !near(x,y,3,Blocks.crystalOrbs)) {\n      block=Blocks.crystalOrbs;\n      ore=Blocks.air;\n    }\n    if (block == Blocks.regolithWall && rand.chance(0.3) && nearAir(x,y) && !near(x,y,3,Blocks.crystalBlocks)) {\n      block=Blocks.crystalBlocks;\n      ore=Blocks.air;\n    }\n  }\n);\n  pass((x,y) -> {\n    if (ore.asFloor().wallOre || block.itemDrop != null || (block == Blocks.air && ore != Blocks.air)) {\n      removeWall(x,y,3,b -> b instanceof TallBlock);\n    }\n  }\n);\n  trimDark();\n  int minVents=rand.random(6,9);\n  int ventCount=0;\n  outer:   for (  Tile tile : tiles) {\n    var floor=tile.floor();\n    if ((floor == Blocks.rhyolite || floor == Blocks.roughRhyolite) && rand.chance(0.002)) {\n      int radius=2;\n      for (int x=-radius; x <= radius; x++) {\n        for (int y=-radius; y <= radius; y++) {\n          Tile other=tiles.get(x + tile.x,y + tile.y);\n          if (other == null || (other.floor() != Blocks.rhyolite && other.floor() != Blocks.roughRhyolite) || other.block().solid) {\n            continue outer;\n          }\n        }\n      }\n      ventCount++;\n      for (      var pos : SteamVent.offsets) {\n        Tile other=tiles.get(pos.x + tile.x + 1,pos.y + tile.y + 1);\n        other.setFloor(Blocks.rhyoliteVent.asFloor());\n      }\n    }\n  }\n  int iterations=0;\n  int maxIterations=5;\n  while (ventCount < minVents && iterations++ < maxIterations) {\n    outer:     for (    Tile tile : tiles) {\n      if (rand.chance(0.00018 * (1 + iterations)) && !Mathf.within(tile.x,tile.y,spawnX,spawnY,5f)) {\n        if (tile.floor() == Blocks.crystallineStone || tile.floor() == Blocks.crystalFloor) {\n          continue;\n        }\n        int radius=1;\n        for (int x=-radius; x <= radius; x++) {\n          for (int y=-radius; y <= radius; y++) {\n            Tile other=tiles.get(x + tile.x,y + tile.y);\n            if (other == null || other.block().solid || other.floor().attributes.get(Attribute.steam) != 0 || other.floor() == Blocks.slag || other.floor() == Blocks.arkyciteFloor) {\n              continue outer;\n            }\n          }\n        }\n        Block floor=Blocks.rhyolite, secondFloor=Blocks.rhyoliteCrater, vent=Blocks.rhyoliteVent;\n        int xDir=1;\n        if (tile.floor() == Blocks.beryllicStone || tile.floor() == Blocks.arkyicStone) {\n          floor=secondFloor=Blocks.arkyicStone;\n          vent=Blocks.arkyicVent;\n        }\n else         if (tile.floor() == Blocks.yellowStone || tile.floor() == Blocks.yellowStonePlates || tile.floor() == Blocks.regolith) {\n          floor=Blocks.yellowStone;\n          secondFloor=Blocks.yellowStonePlates;\n          vent=Blocks.yellowStoneVent;\n        }\n else         if (tile.floor() == Blocks.redStone || tile.floor() == Blocks.denseRedStone) {\n          floor=Blocks.denseRedStone;\n          secondFloor=Blocks.redStone;\n          vent=Blocks.redStoneVent;\n          xDir=-1;\n        }\n else         if (tile.floor() == Blocks.carbonStone) {\n          floor=secondFloor=Blocks.carbonStone;\n          vent=Blocks.carbonVent;\n        }\n        ventCount++;\n        for (        var pos : SteamVent.offsets) {\n          Tile other=tiles.get(pos.x + tile.x + 1,pos.y + tile.y + 1);\n          other.setFloor(vent.asFloor());\n        }\n        int crad=rand.random(6,14), crad2=crad * crad;\n        for (int cx=-crad; cx <= crad; cx++) {\n          for (int cy=-crad; cy <= crad; cy++) {\n            int rx=cx + tile.x, ry=cy + tile.y;\n            float rcy=cy + cx * 0.9f;\n            if (cx * cx + rcy * rcy <= crad2 - noise(rx,ry + rx * 2f * xDir,2,0.7f,8f,crad2 * 1.1f)) {\n              Tile dest=tiles.get(rx,ry);\n              if (dest != null && dest.floor().attributes.get(Attribute.steam) == 0 && dest.floor() != Blocks.roughRhyolite && dest.floor() != Blocks.arkyciteFloor && dest.floor() != Blocks.slag) {\n                dest.setFloor(rand.chance(0.08) ? secondFloor.asFloor() : floor.asFloor());\n                if (dest.block().isStatic()) {\n                  dest.setBlock(floor.asFloor().wall);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  for (  Tile tile : tiles) {\n    if (tile.overlay().needsSurface && !tile.floor().hasSurface()) {\n      tile.setOverlay(Blocks.air);\n    }\n  }\n  decoration(0.017f);\n  state.rules.env=sector.planet.defaultEnv;\n  state.rules.placeRangeCheck=true;\n  Schematics.placeLaunchLoadout(spawnX,spawnY);\n  state.rules.waves=false;\n  state.rules.showSpawns=true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1800,
      "astHeight" : 25
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 176,
        "startLineNumber" : 420,
        "startColumnNumber" : 35,
        "endLineNumber" : 420,
        "endColumnNumber" : 211
      },
      "nodeContext" : "dest != null && dest.floor().attributes.get(Attribute.steam) == 0 && dest.floor() != Blocks.roughRhyolite && dest.floor() != Blocks.arkyciteFloor && dest.floor() != Blocks.slag",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 40,
      "astHeight" : 9
    },
    "tokenLength" : 3,
    "type" : "mindustry.world.blocks.Attributes"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 420,
    "startColumnNumber" : 51,
    "endLineNumber" : 420,
    "endColumnNumber" : 74
  } ],
  "layoutRelationDataList" : [ ]
}