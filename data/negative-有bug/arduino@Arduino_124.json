{
  "id" : 124,
  "expression" : "escapedArg.trim().length()",
  "projectName" : "arduino@Arduino",
  "commitID" : "cf1879f948e0c1fa9ddd91f7348fbdd07fd870cb",
  "filePath" : "/arduino-core/src/processing/app/helpers/StringReplacer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "escapedArg.trim().length()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 78,
      "startColumnNumber" : 10,
      "endLineNumber" : 78,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 78,
        "startColumnNumber" : 10,
        "endLineNumber" : 78,
        "endColumnNumber" : 41
      },
      "nodeContext" : "escapedArg.trim().length() != 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 78,
        "startColumnNumber" : 10,
        "endLineNumber" : 78,
        "endColumnNumber" : 65
      },
      "nodeContext" : "escapedArg.trim().length() != 0 || acceptEmptyArguments",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 78,
        "startColumnNumber" : 6,
        "endLineNumber" : 79,
        "endColumnNumber" : 28
      },
      "nodeContext" : "if (escapedArg.trim().length() != 0 || acceptEmptyArguments) res.add(escapedArg);\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 729,
        "startLineNumber" : 55,
        "startColumnNumber" : 36,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (escapingChar == null) {\n    String first=null;\n    if (i.length() > 0)     first=i.substring(0,1);\n    if (first == null || !quoteChars.contains(first)) {\n      if (i.trim().length() != 0 || acceptEmptyArguments)       res.add(i);\n      continue;\n    }\n    escapingChar=first;\n    i=i.substring(1);\n    escapedArg=\"\";\n  }\n  if (!i.endsWith(escapingChar)) {\n    escapedArg+=i + \" \";\n    continue;\n  }\n  escapedArg+=i.substring(0,i.length() - 1);\n  if (escapedArg.trim().length() != 0 || acceptEmptyArguments)   res.add(escapedArg);\n  escapingChar=null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 113,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 761,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (String i : src.split(\" \")) {\n  if (escapingChar == null) {\n    String first=null;\n    if (i.length() > 0)     first=i.substring(0,1);\n    if (first == null || !quoteChars.contains(first)) {\n      if (i.trim().length() != 0 || acceptEmptyArguments)       res.add(i);\n      continue;\n    }\n    escapingChar=first;\n    i=i.substring(1);\n    escapedArg=\"\";\n  }\n  if (!i.endsWith(escapingChar)) {\n    escapedArg+=i + \" \";\n    continue;\n  }\n  escapedArg+=i.substring(0,i.length() - 1);\n  if (escapedArg.trim().length() != 0 || acceptEmptyArguments)   res.add(escapedArg);\n  escapingChar=null;\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 122,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1053,
        "startLineNumber" : 51,
        "startColumnNumber" : 23,
        "endLineNumber" : 86,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<String> res=new ArrayList<String>();\n  String escapedArg=null;\n  String escapingChar=null;\n  for (  String i : src.split(\" \")) {\n    if (escapingChar == null) {\n      String first=null;\n      if (i.length() > 0)       first=i.substring(0,1);\n      if (first == null || !quoteChars.contains(first)) {\n        if (i.trim().length() != 0 || acceptEmptyArguments)         res.add(i);\n        continue;\n      }\n      escapingChar=first;\n      i=i.substring(1);\n      escapedArg=\"\";\n    }\n    if (!i.endsWith(escapingChar)) {\n      escapedArg+=i + \" \";\n      continue;\n    }\n    escapedArg+=i.substring(0,i.length() - 1);\n    if (escapedArg.trim().length() != 0 || acceptEmptyArguments)     res.add(escapedArg);\n    escapingChar=null;\n  }\n  if (escapingChar != null)   throw new Exception(\"Invalid quoting: no closing [\" + escapingChar + \"] char found.\");\n  return res.toArray(new String[0]);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 171,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1209,
        "startLineNumber" : 49,
        "startColumnNumber" : 2,
        "endLineNumber" : 86,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static String[] quotedSplit(String src,String quoteChars,boolean acceptEmptyArguments) throws Exception {\n  List<String> res=new ArrayList<String>();\n  String escapedArg=null;\n  String escapingChar=null;\n  for (  String i : src.split(\" \")) {\n    if (escapingChar == null) {\n      String first=null;\n      if (i.length() > 0)       first=i.substring(0,1);\n      if (first == null || !quoteChars.contains(first)) {\n        if (i.trim().length() != 0 || acceptEmptyArguments)         res.add(i);\n        continue;\n      }\n      escapingChar=first;\n      i=i.substring(1);\n      escapedArg=\"\";\n    }\n    if (!i.endsWith(escapingChar)) {\n      escapedArg+=i + \" \";\n      continue;\n    }\n    escapedArg+=i.substring(0,i.length() - 1);\n    if (escapedArg.trim().length() != 0 || acceptEmptyArguments)     res.add(escapedArg);\n    escapingChar=null;\n  }\n  if (escapingChar != null)   throw new Exception(\"Invalid quoting: no closing [\" + escapingChar + \"] char found.\");\n  return res.toArray(new String[0]);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 192,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 78,
        "startColumnNumber" : 10,
        "endLineNumber" : 78,
        "endColumnNumber" : 65
      },
      "nodeContext" : "escapedArg.trim().length() != 0 || acceptEmptyArguments",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 26,
    "startLineNumber" : 78,
    "startColumnNumber" : 10,
    "endLineNumber" : 78,
    "endColumnNumber" : 36
  } ],
  "layoutRelationDataList" : [ ]
}