{
  "id" : 385,
  "expression" : "Assertions",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "/library/extractor/src/main/java/com/google/android/exoplayer2/util/NalUnitUtil.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Assertions",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 659,
      "startColumnNumber" : 4,
      "endLineNumber" : 659,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 659,
        "startColumnNumber" : 4,
        "endLineNumber" : 659,
        "endColumnNumber" : 38
      },
      "nodeContext" : "Assertions.checkState(length >= 0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 659,
        "startColumnNumber" : 4,
        "endLineNumber" : 659,
        "endColumnNumber" : 39
      },
      "nodeContext" : "Assertions.checkState(length >= 0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2085,
        "startLineNumber" : 656,
        "startColumnNumber" : 74,
        "endLineNumber" : 711,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int length=endOffset - startOffset;\n  Assertions.checkState(length >= 0);\n  if (length == 0) {\n    return endOffset;\n  }\n  if (prefixFlags[0]) {\n    clearPrefixFlags(prefixFlags);\n    return startOffset - 3;\n  }\n else   if (length > 1 && prefixFlags[1] && data[startOffset] == 1) {\n    clearPrefixFlags(prefixFlags);\n    return startOffset - 2;\n  }\n else   if (length > 2 && prefixFlags[2] && data[startOffset] == 0 && data[startOffset + 1] == 1) {\n    clearPrefixFlags(prefixFlags);\n    return startOffset - 1;\n  }\n  int limit=endOffset - 1;\n  for (int i=startOffset + 2; i < limit; i+=3) {\n    if ((data[i] & 0xFE) != 0) {\n    }\n else     if (data[i - 2] == 0 && data[i - 1] == 0 && data[i] == 1) {\n      clearPrefixFlags(prefixFlags);\n      return i - 2;\n    }\n else {\n      i-=2;\n    }\n  }\n  prefixFlags[0]=length > 2 ? (data[endOffset - 3] == 0 && data[endOffset - 2] == 0 && data[endOffset - 1] == 1) : length == 2 ? (prefixFlags[2] && data[endOffset - 2] == 0 && data[endOffset - 1] == 1) : (prefixFlags[1] && data[endOffset - 1] == 1);\n  prefixFlags[1]=length > 1 ? data[endOffset - 2] == 0 && data[endOffset - 1] == 0 : prefixFlags[2] && data[endOffset - 1] == 0;\n  prefixFlags[2]=data[endOffset - 1] == 0;\n  return endOffset;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 275,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3509,
        "startLineNumber" : 634,
        "startColumnNumber" : 2,
        "endLineNumber" : 711,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Finds the first NAL unit in  {@code data}. <p>If  {@code prefixFlags} is null then the first three bytes of a NAL unit must be entirelycontained within the part of the array being searched in order for it to be found. <p>When  {@code prefixFlags} is non-null, this method supports finding NAL units whose firstfour bytes span  {@code data} arrays passed to successive calls. To use this feature, pass thesame  {@code prefixFlags} parameter to successive calls. State maintained in this parameterenables the detection of such NAL units. Note that when using this feature, the return value may be 3, 2 or 1 less than  {@code startOffset}, to indicate a NAL unit starting 3, 2 or 1 bytes before the first byte in the current array.\n * @param data The data to search.\n * @param startOffset The offset (inclusive) in the data to start the search.\n * @param endOffset The offset (exclusive) in the data to end the search.\n * @param prefixFlags A boolean array whose first three elements are used to store the staterequired to detect NAL units where the NAL unit prefix spans array boundaries. The array must be at least 3 elements long.\n * @return The offset of the NAL unit, or {@code endOffset} if a NAL unit was not found.\n */\npublic static int findNalUnit(byte[] data,int startOffset,int endOffset,boolean[] prefixFlags){\n  int length=endOffset - startOffset;\n  Assertions.checkState(length >= 0);\n  if (length == 0) {\n    return endOffset;\n  }\n  if (prefixFlags[0]) {\n    clearPrefixFlags(prefixFlags);\n    return startOffset - 3;\n  }\n else   if (length > 1 && prefixFlags[1] && data[startOffset] == 1) {\n    clearPrefixFlags(prefixFlags);\n    return startOffset - 2;\n  }\n else   if (length > 2 && prefixFlags[2] && data[startOffset] == 0 && data[startOffset + 1] == 1) {\n    clearPrefixFlags(prefixFlags);\n    return startOffset - 1;\n  }\n  int limit=endOffset - 1;\n  for (int i=startOffset + 2; i < limit; i+=3) {\n    if ((data[i] & 0xFE) != 0) {\n    }\n else     if (data[i - 2] == 0 && data[i - 1] == 0 && data[i] == 1) {\n      clearPrefixFlags(prefixFlags);\n      return i - 2;\n    }\n else {\n      i-=2;\n    }\n  }\n  prefixFlags[0]=length > 2 ? (data[endOffset - 3] == 0 && data[endOffset - 2] == 0 && data[endOffset - 1] == 1) : length == 2 ? (prefixFlags[2] && data[endOffset - 2] == 0 && data[endOffset - 1] == 1) : (prefixFlags[1] && data[endOffset - 1] == 1);\n  prefixFlags[1]=length > 1 ? data[endOffset - 2] == 0 && data[endOffset - 1] == 0 : prefixFlags[2] && data[endOffset - 1] == 0;\n  prefixFlags[2]=data[endOffset - 1] == 0;\n  return endOffset;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 297,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 659,
        "startColumnNumber" : 4,
        "endLineNumber" : 659,
        "endColumnNumber" : 39
      },
      "nodeContext" : "Assertions.checkState(length >= 0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.util.Assertions"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 659,
    "startColumnNumber" : 4,
    "endLineNumber" : 659,
    "endColumnNumber" : 14
  } ],
  "layoutRelationDataList" : [ ]
}