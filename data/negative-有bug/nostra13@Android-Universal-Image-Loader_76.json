{
  "id" : 76,
  "expression" : "new IllegalArgumentException(ERROR_WRONG_ARGUMENTS)",
  "projectName" : "nostra13@Android-Universal-Image-Loader",
  "commitID" : "7637abf7df1394f71dbc04644be86791959d1313",
  "filePath" : "/library/src/main/java/com/nostra13/universalimageloader/core/ImageLoader.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new IllegalArgumentException(ERROR_WRONG_ARGUMENTS)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 51,
      "startLineNumber" : 238,
      "startColumnNumber" : 9,
      "endLineNumber" : 238,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 238,
        "startColumnNumber" : 3,
        "endLineNumber" : 238,
        "endColumnNumber" : 61
      },
      "nodeContext" : "throw new IllegalArgumentException(ERROR_WRONG_ARGUMENTS);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 237,
        "startColumnNumber" : 26,
        "endLineNumber" : 239,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  throw new IllegalArgumentException(ERROR_WRONG_ARGUMENTS);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 237,
        "startColumnNumber" : 2,
        "endLineNumber" : 239,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (imageAware == null) {\n  throw new IllegalArgumentException(ERROR_WRONG_ARGUMENTS);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2524,
        "startLineNumber" : 235,
        "startColumnNumber" : 103,
        "endLineNumber" : 302,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  checkConfiguration();\n  if (imageAware == null) {\n    throw new IllegalArgumentException(ERROR_WRONG_ARGUMENTS);\n  }\n  if (listener == null) {\n    listener=defaultListener;\n  }\n  if (options == null) {\n    options=configuration.defaultDisplayImageOptions;\n  }\n  if (TextUtils.isEmpty(uri)) {\n    engine.cancelDisplayTaskFor(imageAware);\n    listener.onLoadingStarted(uri,imageAware.getWrappedView());\n    if (options.shouldShowImageForEmptyUri()) {\n      imageAware.setImageDrawable(options.getImageForEmptyUri(configuration.resources));\n    }\n else {\n      imageAware.setImageDrawable(null);\n    }\n    listener.onLoadingComplete(uri,imageAware.getWrappedView(),null);\n    return;\n  }\n  if (targetSize == null) {\n    targetSize=ImageSizeUtils.defineTargetSizeForView(imageAware,configuration.getMaxImageSize());\n  }\n  String memoryCacheKey=MemoryCacheUtils.generateKey(uri,targetSize);\n  engine.prepareDisplayTaskFor(imageAware,memoryCacheKey);\n  listener.onLoadingStarted(uri,imageAware.getWrappedView());\n  Bitmap bmp=configuration.memoryCache.get(memoryCacheKey);\n  if (bmp != null && !bmp.isRecycled()) {\n    L.d(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey);\n    if (options.shouldPostProcess()) {\n      ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageAware,targetSize,memoryCacheKey,options,listener,progressListener,engine.getLockForUri(uri));\n      ProcessAndDisplayImageTask displayTask=new ProcessAndDisplayImageTask(engine,bmp,imageLoadingInfo,defineHandler(options));\n      if (options.isSyncLoading()) {\n        displayTask.run();\n      }\n else {\n        engine.submit(displayTask);\n      }\n    }\n else {\n      options.getDisplayer().display(bmp,imageAware,LoadedFrom.MEMORY_CACHE);\n      listener.onLoadingComplete(uri,imageAware.getWrappedView(),bmp);\n    }\n  }\n else {\n    if (options.shouldShowImageOnLoading()) {\n      imageAware.setImageDrawable(options.getImageOnLoading(configuration.resources));\n    }\n else     if (options.isResetViewBeforeLoading()) {\n      imageAware.setImageDrawable(null);\n    }\n    ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageAware,targetSize,memoryCacheKey,options,listener,progressListener,engine.getLockForUri(uri));\n    LoadAndDisplayImageTask displayTask=new LoadAndDisplayImageTask(engine,imageLoadingInfo,defineHandler(options));\n    if (options.isSyncLoading()) {\n      displayTask.run();\n    }\n else {\n      engine.submit(displayTask);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 297,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4620,
        "startLineNumber" : 212,
        "startColumnNumber" : 1,
        "endLineNumber" : 302,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Adds display image task to execution pool. Image will be set to ImageAware when it's turn.<br /> <b>NOTE:</b>  {@link #init(ImageLoaderConfiguration)} method must be called before this method call\n * @param uri              Image URI (i.e. \"http://site.com/image.png\", \"file:///mnt/sdcard/image.png\")\n * @param imageAware       {@linkplain com.nostra13.universalimageloader.core.imageaware.ImageAware Image aware view}which should display image\n * @param options          {@linkplain com.nostra13.universalimageloader.core.DisplayImageOptions Options} for imagedecoding and displaying. If <b>null</b> - default display image options {@linkplain ImageLoaderConfiguration.Builder#defaultDisplayImageOptions(DisplayImageOptions) from configuration} will be used.\n * @param targetSize       {@linkplain ImageSize} Image target size. If <b>null</b> - size will depend on the view\n * @param listener         {@linkplain ImageLoadingListener Listener} for image loading process. Listener firesevents on UI thread if this method is called on UI thread.\n * @param progressListener {@linkplain com.nostra13.universalimageloader.core.listener.ImageLoadingProgressListener Listener} for image loading progress. Listener fires events on UI thread if this methodis called on UI thread. Caching on disk should be enabled in {@linkplain com.nostra13.universalimageloader.core.DisplayImageOptions options} to makethis listener work.\n * @throws IllegalStateException    if {@link #init(ImageLoaderConfiguration)} method wasn't called before\n * @throws IllegalArgumentException if passed <b>imageAware</b> is null\n */\npublic void displayImage(String uri,ImageAware imageAware,DisplayImageOptions options,ImageSize targetSize,ImageLoadingListener listener,ImageLoadingProgressListener progressListener){\n  checkConfiguration();\n  if (imageAware == null) {\n    throw new IllegalArgumentException(ERROR_WRONG_ARGUMENTS);\n  }\n  if (listener == null) {\n    listener=defaultListener;\n  }\n  if (options == null) {\n    options=configuration.defaultDisplayImageOptions;\n  }\n  if (TextUtils.isEmpty(uri)) {\n    engine.cancelDisplayTaskFor(imageAware);\n    listener.onLoadingStarted(uri,imageAware.getWrappedView());\n    if (options.shouldShowImageForEmptyUri()) {\n      imageAware.setImageDrawable(options.getImageForEmptyUri(configuration.resources));\n    }\n else {\n      imageAware.setImageDrawable(null);\n    }\n    listener.onLoadingComplete(uri,imageAware.getWrappedView(),null);\n    return;\n  }\n  if (targetSize == null) {\n    targetSize=ImageSizeUtils.defineTargetSizeForView(imageAware,configuration.getMaxImageSize());\n  }\n  String memoryCacheKey=MemoryCacheUtils.generateKey(uri,targetSize);\n  engine.prepareDisplayTaskFor(imageAware,memoryCacheKey);\n  listener.onLoadingStarted(uri,imageAware.getWrappedView());\n  Bitmap bmp=configuration.memoryCache.get(memoryCacheKey);\n  if (bmp != null && !bmp.isRecycled()) {\n    L.d(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE,memoryCacheKey);\n    if (options.shouldPostProcess()) {\n      ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageAware,targetSize,memoryCacheKey,options,listener,progressListener,engine.getLockForUri(uri));\n      ProcessAndDisplayImageTask displayTask=new ProcessAndDisplayImageTask(engine,bmp,imageLoadingInfo,defineHandler(options));\n      if (options.isSyncLoading()) {\n        displayTask.run();\n      }\n else {\n        engine.submit(displayTask);\n      }\n    }\n else {\n      options.getDisplayer().display(bmp,imageAware,LoadedFrom.MEMORY_CACHE);\n      listener.onLoadingComplete(uri,imageAware.getWrappedView(),bmp);\n    }\n  }\n else {\n    if (options.shouldShowImageOnLoading()) {\n      imageAware.setImageDrawable(options.getImageOnLoading(configuration.resources));\n    }\n else     if (options.isResetViewBeforeLoading()) {\n      imageAware.setImageDrawable(null);\n    }\n    ImageLoadingInfo imageLoadingInfo=new ImageLoadingInfo(uri,imageAware,targetSize,memoryCacheKey,options,listener,progressListener,engine.getLockForUri(uri));\n    LoadAndDisplayImageTask displayTask=new LoadAndDisplayImageTask(engine,imageLoadingInfo,defineHandler(options));\n    if (options.isSyncLoading()) {\n      displayTask.run();\n    }\n else {\n      engine.submit(displayTask);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 326,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 238,
        "startColumnNumber" : 3,
        "endLineNumber" : 238,
        "endColumnNumber" : 61
      },
      "nodeContext" : "throw new IllegalArgumentException(ERROR_WRONG_ARGUMENTS);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "java.lang.IllegalArgumentException"
  } ],
  "positionList" : [ {
    "charLength" : 51,
    "startLineNumber" : 238,
    "startColumnNumber" : 9,
    "endLineNumber" : 238,
    "endColumnNumber" : 60
  } ],
  "layoutRelationDataList" : [ ]
}