{
  "id" : 441,
  "expression" : "factorial[N] * ModularInverse.modInv(factorial[R],P) % P * ModularInverse.modInv(factorial[N - R],P)",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/math/NChooseRModPrime.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "factorial[N] * ModularInverse.modInv(factorial[R],P) % P * ModularInverse.modInv(factorial[N - R],P)",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 138,
      "startLineNumber" : 25,
      "startColumnNumber" : 12,
      "endLineNumber" : 28,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 23,
    "astHeight" : 6,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 154,
        "startLineNumber" : 25,
        "startColumnNumber" : 12,
        "endLineNumber" : 29,
        "endColumnNumber" : 15
      },
      "nodeContext" : "factorial[N] * ModularInverse.modInv(factorial[R],P) % P * ModularInverse.modInv(factorial[N - R],P) % P",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 156,
        "startLineNumber" : 25,
        "startColumnNumber" : 11,
        "endLineNumber" : 29,
        "endColumnNumber" : 16
      },
      "nodeContext" : "(factorial[N] * ModularInverse.modInv(factorial[R],P) % P * ModularInverse.modInv(factorial[N - R],P) % P)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 26,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 168,
        "startLineNumber" : 25,
        "startColumnNumber" : 11,
        "endLineNumber" : 30,
        "endColumnNumber" : 11
      },
      "nodeContext" : "(factorial[N] * ModularInverse.modInv(factorial[R],P) % P * ModularInverse.modInv(factorial[N - R],P) % P) % P",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 28,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 176,
        "startLineNumber" : 25,
        "startColumnNumber" : 4,
        "endLineNumber" : 30,
        "endColumnNumber" : 12
      },
      "nodeContext" : "return (factorial[N] * ModularInverse.modInv(factorial[R],P) % P * ModularInverse.modInv(factorial[N - R],P) % P) % P;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 29,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 365,
        "startLineNumber" : 15,
        "startColumnNumber" : 50,
        "endLineNumber" : 31,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (R == 0)   return 1;\n  long[] factorial=new long[N + 1];\n  factorial[0]=1;\n  for (int i=1; i <= N; i++) {\n    factorial[i]=factorial[i - 1] * i % P;\n  }\n  return (factorial[N] * ModularInverse.modInv(factorial[R],P) % P * ModularInverse.modInv(factorial[N - R],P) % P) % P;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 81,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 590,
        "startLineNumber" : 7,
        "startColumnNumber" : 2,
        "endLineNumber" : 31,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Calculate the value of C(N, R) % P using Fermat's Little Theorem.\n * @param N\n * @param R\n * @param P\n * @return The value of N choose R Modulus P\n */\npublic static long compute(int N,int R,int P){\n  if (R == 0)   return 1;\n  long[] factorial=new long[N + 1];\n  factorial[0]=1;\n  for (int i=1; i <= N; i++) {\n    factorial[i]=factorial[i - 1] * i % P;\n  }\n  return (factorial[N] * ModularInverse.modInv(factorial[R],P) % P * ModularInverse.modInv(factorial[N - R],P) % P) % P;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 96,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 154,
        "startLineNumber" : 25,
        "startColumnNumber" : 12,
        "endLineNumber" : 29,
        "endColumnNumber" : 15
      },
      "nodeContext" : "factorial[N] * ModularInverse.modInv(factorial[R],P) % P * ModularInverse.modInv(factorial[N - R],P) % P",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 25,
      "astHeight" : 7
    },
    "tokenLength" : 18,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 138,
    "startLineNumber" : 25,
    "startColumnNumber" : 12,
    "endLineNumber" : 28,
    "endColumnNumber" : 56
  } ],
  "layoutRelationDataList" : [ ]
}