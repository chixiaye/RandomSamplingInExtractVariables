{
  "id" : 247,
  "expression" : "exceptionHandler",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-context/src/test/java/org/springframework/scheduling/annotation/AsyncAnnotationBeanPostProcessorTests.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "exceptionHandler",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 180,
      "startColumnNumber" : 57,
      "endLineNumber" : 180,
      "endColumnNumber" : 73
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 180,
        "startColumnNumber" : 57,
        "endLineNumber" : 180,
        "endColumnNumber" : 84
      },
      "nodeContext" : "exceptionHandler.isCalled()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 180,
        "startColumnNumber" : 2,
        "endLineNumber" : 180,
        "endColumnNumber" : 85
      },
      "nodeContext" : "assertFalse(\"handler should not have been called yet\",exceptionHandler.isCalled())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 180,
        "startColumnNumber" : 2,
        "endLineNumber" : 180,
        "endColumnNumber" : 86
      },
      "nodeContext" : "assertFalse(\"handler should not have been called yet\",exceptionHandler.isCalled());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 860,
        "startLineNumber" : 168,
        "startColumnNumber" : 42,
        "endLineNumber" : 187,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  GenericXmlApplicationContext context=new GenericXmlApplicationContext();\n  context.load(new ClassPathResource(\"taskNamespaceTests.xml\",getClass()));\n  context.refresh();\n  ITestBean testBean=context.getBean(\"target\",ITestBean.class);\n  testBean.test();\n  testBean.await(3000);\n  Thread asyncThread=testBean.getThread();\n  assertTrue(asyncThread.getName().startsWith(\"testExecutor\"));\n  TestableAsyncUncaughtExceptionHandler exceptionHandler=context.getBean(\"exceptionHandler\",TestableAsyncUncaughtExceptionHandler.class);\n  assertFalse(\"handler should not have been called yet\",exceptionHandler.isCalled());\n  testBean.failWithVoid();\n  exceptionHandler.await(3000);\n  Method m=ReflectionUtils.findMethod(TestBean.class,\"failWithVoid\");\n  exceptionHandler.assertCalledWith(m,UnsupportedOperationException.class);\n  context.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 113,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 908,
        "startLineNumber" : 167,
        "startColumnNumber" : 1,
        "endLineNumber" : 187,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void configuredThroughNamespace(){\n  GenericXmlApplicationContext context=new GenericXmlApplicationContext();\n  context.load(new ClassPathResource(\"taskNamespaceTests.xml\",getClass()));\n  context.refresh();\n  ITestBean testBean=context.getBean(\"target\",ITestBean.class);\n  testBean.test();\n  testBean.await(3000);\n  Thread asyncThread=testBean.getThread();\n  assertTrue(asyncThread.getName().startsWith(\"testExecutor\"));\n  TestableAsyncUncaughtExceptionHandler exceptionHandler=context.getBean(\"exceptionHandler\",TestableAsyncUncaughtExceptionHandler.class);\n  assertFalse(\"handler should not have been called yet\",exceptionHandler.isCalled());\n  testBean.failWithVoid();\n  exceptionHandler.await(3000);\n  Method m=ReflectionUtils.findMethod(TestBean.class,\"failWithVoid\");\n  exceptionHandler.assertCalledWith(m,UnsupportedOperationException.class);\n  context.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 119,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 180,
        "startColumnNumber" : 2,
        "endLineNumber" : 180,
        "endColumnNumber" : 86
      },
      "nodeContext" : "assertFalse(\"handler should not have been called yet\",exceptionHandler.isCalled());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.springframework.scheduling.annotation.TestableAsyncUncaughtExceptionHandler"
  }, {
    "nodeContext" : "exceptionHandler",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 183,
      "startColumnNumber" : 2,
      "endLineNumber" : 183,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 183,
        "startColumnNumber" : 2,
        "endLineNumber" : 183,
        "endColumnNumber" : 30
      },
      "nodeContext" : "exceptionHandler.await(3000)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 183,
        "startColumnNumber" : 2,
        "endLineNumber" : 183,
        "endColumnNumber" : 31
      },
      "nodeContext" : "exceptionHandler.await(3000);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 860,
        "startLineNumber" : 168,
        "startColumnNumber" : 42,
        "endLineNumber" : 187,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  GenericXmlApplicationContext context=new GenericXmlApplicationContext();\n  context.load(new ClassPathResource(\"taskNamespaceTests.xml\",getClass()));\n  context.refresh();\n  ITestBean testBean=context.getBean(\"target\",ITestBean.class);\n  testBean.test();\n  testBean.await(3000);\n  Thread asyncThread=testBean.getThread();\n  assertTrue(asyncThread.getName().startsWith(\"testExecutor\"));\n  TestableAsyncUncaughtExceptionHandler exceptionHandler=context.getBean(\"exceptionHandler\",TestableAsyncUncaughtExceptionHandler.class);\n  assertFalse(\"handler should not have been called yet\",exceptionHandler.isCalled());\n  testBean.failWithVoid();\n  exceptionHandler.await(3000);\n  Method m=ReflectionUtils.findMethod(TestBean.class,\"failWithVoid\");\n  exceptionHandler.assertCalledWith(m,UnsupportedOperationException.class);\n  context.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 113,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 908,
        "startLineNumber" : 167,
        "startColumnNumber" : 1,
        "endLineNumber" : 187,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void configuredThroughNamespace(){\n  GenericXmlApplicationContext context=new GenericXmlApplicationContext();\n  context.load(new ClassPathResource(\"taskNamespaceTests.xml\",getClass()));\n  context.refresh();\n  ITestBean testBean=context.getBean(\"target\",ITestBean.class);\n  testBean.test();\n  testBean.await(3000);\n  Thread asyncThread=testBean.getThread();\n  assertTrue(asyncThread.getName().startsWith(\"testExecutor\"));\n  TestableAsyncUncaughtExceptionHandler exceptionHandler=context.getBean(\"exceptionHandler\",TestableAsyncUncaughtExceptionHandler.class);\n  assertFalse(\"handler should not have been called yet\",exceptionHandler.isCalled());\n  testBean.failWithVoid();\n  exceptionHandler.await(3000);\n  Method m=ReflectionUtils.findMethod(TestBean.class,\"failWithVoid\");\n  exceptionHandler.assertCalledWith(m,UnsupportedOperationException.class);\n  context.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 119,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 183,
        "startColumnNumber" : 2,
        "endLineNumber" : 183,
        "endColumnNumber" : 31
      },
      "nodeContext" : "exceptionHandler.await(3000);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.springframework.scheduling.annotation.TestableAsyncUncaughtExceptionHandler"
  }, {
    "nodeContext" : "exceptionHandler",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 185,
      "startColumnNumber" : 2,
      "endLineNumber" : 185,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 185,
        "startColumnNumber" : 2,
        "endLineNumber" : 185,
        "endColumnNumber" : 75
      },
      "nodeContext" : "exceptionHandler.assertCalledWith(m,UnsupportedOperationException.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 185,
        "startColumnNumber" : 2,
        "endLineNumber" : 185,
        "endColumnNumber" : 76
      },
      "nodeContext" : "exceptionHandler.assertCalledWith(m,UnsupportedOperationException.class);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 860,
        "startLineNumber" : 168,
        "startColumnNumber" : 42,
        "endLineNumber" : 187,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  GenericXmlApplicationContext context=new GenericXmlApplicationContext();\n  context.load(new ClassPathResource(\"taskNamespaceTests.xml\",getClass()));\n  context.refresh();\n  ITestBean testBean=context.getBean(\"target\",ITestBean.class);\n  testBean.test();\n  testBean.await(3000);\n  Thread asyncThread=testBean.getThread();\n  assertTrue(asyncThread.getName().startsWith(\"testExecutor\"));\n  TestableAsyncUncaughtExceptionHandler exceptionHandler=context.getBean(\"exceptionHandler\",TestableAsyncUncaughtExceptionHandler.class);\n  assertFalse(\"handler should not have been called yet\",exceptionHandler.isCalled());\n  testBean.failWithVoid();\n  exceptionHandler.await(3000);\n  Method m=ReflectionUtils.findMethod(TestBean.class,\"failWithVoid\");\n  exceptionHandler.assertCalledWith(m,UnsupportedOperationException.class);\n  context.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 113,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 908,
        "startLineNumber" : 167,
        "startColumnNumber" : 1,
        "endLineNumber" : 187,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void configuredThroughNamespace(){\n  GenericXmlApplicationContext context=new GenericXmlApplicationContext();\n  context.load(new ClassPathResource(\"taskNamespaceTests.xml\",getClass()));\n  context.refresh();\n  ITestBean testBean=context.getBean(\"target\",ITestBean.class);\n  testBean.test();\n  testBean.await(3000);\n  Thread asyncThread=testBean.getThread();\n  assertTrue(asyncThread.getName().startsWith(\"testExecutor\"));\n  TestableAsyncUncaughtExceptionHandler exceptionHandler=context.getBean(\"exceptionHandler\",TestableAsyncUncaughtExceptionHandler.class);\n  assertFalse(\"handler should not have been called yet\",exceptionHandler.isCalled());\n  testBean.failWithVoid();\n  exceptionHandler.await(3000);\n  Method m=ReflectionUtils.findMethod(TestBean.class,\"failWithVoid\");\n  exceptionHandler.assertCalledWith(m,UnsupportedOperationException.class);\n  context.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 119,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 185,
        "startColumnNumber" : 2,
        "endLineNumber" : 185,
        "endColumnNumber" : 76
      },
      "nodeContext" : "exceptionHandler.assertCalledWith(m,UnsupportedOperationException.class);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.springframework.scheduling.annotation.TestableAsyncUncaughtExceptionHandler"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 180,
    "startColumnNumber" : 57,
    "endLineNumber" : 180,
    "endColumnNumber" : 73
  }, {
    "charLength" : 16,
    "startLineNumber" : 183,
    "startColumnNumber" : 2,
    "endLineNumber" : 183,
    "endColumnNumber" : 18
  }, {
    "charLength" : 16,
    "startLineNumber" : 185,
    "startColumnNumber" : 2,
    "endLineNumber" : 185,
    "endColumnNumber" : 18
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  } ]
}