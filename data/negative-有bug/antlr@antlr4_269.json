{
  "id" : 269,
  "expression" : "i",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/runtime/Java/src/org/antlr/v4/runtime/tree/ParseTreeWalker.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 35,
      "startColumnNumber" : 24,
      "endLineNumber" : 35,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 3,
        "startLineNumber" : 35,
        "startColumnNumber" : 24,
        "endLineNumber" : 35,
        "endColumnNumber" : 27
      },
      "nodeContext" : "i < n",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 35,
        "startColumnNumber" : 8,
        "endLineNumber" : 37,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < n; i++) {\n  walk(listener,r.getChild(i));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 422,
        "startLineNumber" : 23,
        "startColumnNumber" : 59,
        "endLineNumber" : 39,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (t instanceof ErrorNode) {\n    listener.visitErrorNode((ErrorNode)t);\n    return;\n  }\n else   if (t instanceof TerminalNode) {\n    listener.visitTerminal((TerminalNode)t);\n    return;\n  }\n  RuleNode r=(RuleNode)t;\n  enterRule(listener,r);\n  int n=r.getChildCount();\n  for (int i=0; i < n; i++) {\n    walk(listener,r.getChild(i));\n  }\n  exitRule(listener,r);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 77,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 941,
        "startLineNumber" : 15,
        "startColumnNumber" : 1,
        "endLineNumber" : 39,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Performs a walk on the given parse tree starting at the root and going down recursively with depth-first search. On each node,  {@link ParseTreeWalker#enterRule} is called beforerecursively walking down into child nodes, then {@link ParseTreeWalker#exitRule} is called after the recursive call to wind up.\n * @param listener The listener used by the walker to process grammar rules\n * @param t The parse tree to be walked on\n */\npublic void walk(ParseTreeListener listener,ParseTree t){\n  if (t instanceof ErrorNode) {\n    listener.visitErrorNode((ErrorNode)t);\n    return;\n  }\n else   if (t instanceof TerminalNode) {\n    listener.visitTerminal((TerminalNode)t);\n    return;\n  }\n  RuleNode r=(RuleNode)t;\n  enterRule(listener,r);\n  int n=r.getChildCount();\n  for (int i=0; i < n; i++) {\n    walk(listener,r.getChild(i));\n  }\n  exitRule(listener,r);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 90,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 3,
        "startLineNumber" : 35,
        "startColumnNumber" : 24,
        "endLineNumber" : 35,
        "endColumnNumber" : 27
      },
      "nodeContext" : "i < n",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 36,
      "startColumnNumber" : 38,
      "endLineNumber" : 36,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 36,
        "startColumnNumber" : 27,
        "endLineNumber" : 36,
        "endColumnNumber" : 40
      },
      "nodeContext" : "r.getChild(i)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 36,
        "startColumnNumber" : 12,
        "endLineNumber" : 36,
        "endColumnNumber" : 41
      },
      "nodeContext" : "walk(listener,r.getChild(i))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 36,
        "startColumnNumber" : 12,
        "endLineNumber" : 36,
        "endColumnNumber" : 42
      },
      "nodeContext" : "walk(listener,r.getChild(i));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 35,
        "startColumnNumber" : 34,
        "endLineNumber" : 37,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  walk(listener,r.getChild(i));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 35,
        "startColumnNumber" : 8,
        "endLineNumber" : 37,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < n; i++) {\n  walk(listener,r.getChild(i));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 422,
        "startLineNumber" : 23,
        "startColumnNumber" : 59,
        "endLineNumber" : 39,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (t instanceof ErrorNode) {\n    listener.visitErrorNode((ErrorNode)t);\n    return;\n  }\n else   if (t instanceof TerminalNode) {\n    listener.visitTerminal((TerminalNode)t);\n    return;\n  }\n  RuleNode r=(RuleNode)t;\n  enterRule(listener,r);\n  int n=r.getChildCount();\n  for (int i=0; i < n; i++) {\n    walk(listener,r.getChild(i));\n  }\n  exitRule(listener,r);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 77,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 941,
        "startLineNumber" : 15,
        "startColumnNumber" : 1,
        "endLineNumber" : 39,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Performs a walk on the given parse tree starting at the root and going down recursively with depth-first search. On each node,  {@link ParseTreeWalker#enterRule} is called beforerecursively walking down into child nodes, then {@link ParseTreeWalker#exitRule} is called after the recursive call to wind up.\n * @param listener The listener used by the walker to process grammar rules\n * @param t The parse tree to be walked on\n */\npublic void walk(ParseTreeListener listener,ParseTree t){\n  if (t instanceof ErrorNode) {\n    listener.visitErrorNode((ErrorNode)t);\n    return;\n  }\n else   if (t instanceof TerminalNode) {\n    listener.visitTerminal((TerminalNode)t);\n    return;\n  }\n  RuleNode r=(RuleNode)t;\n  enterRule(listener,r);\n  int n=r.getChildCount();\n  for (int i=0; i < n; i++) {\n    walk(listener,r.getChild(i));\n  }\n  exitRule(listener,r);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 90,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 36,
        "startColumnNumber" : 12,
        "endLineNumber" : 36,
        "endColumnNumber" : 42
      },
      "nodeContext" : "walk(listener,r.getChild(i));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 35,
    "startColumnNumber" : 24,
    "endLineNumber" : 35,
    "endColumnNumber" : 25
  }, {
    "charLength" : 1,
    "startLineNumber" : 36,
    "startColumnNumber" : 38,
    "endLineNumber" : 36,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}