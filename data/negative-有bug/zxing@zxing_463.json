{
  "id" : 463,
  "expression" : "rowHeight",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/core/src/com/google/zxing/pdf417/decoder/BitMatrixParser.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "rowHeight",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 116,
      "startColumnNumber" : 52,
      "endLineNumber" : 116,
      "endColumnNumber" : 61
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 116,
        "startColumnNumber" : 17,
        "endLineNumber" : 116,
        "endColumnNumber" : 79
      },
      "nodeContext" : "processRow(rowCounters,rowNumber,rowHeight,codewords,next)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 116,
        "startColumnNumber" : 10,
        "endLineNumber" : 116,
        "endColumnNumber" : 79
      },
      "nodeContext" : "next=processRow(rowCounters,rowNumber,rowHeight,codewords,next)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 116,
        "startColumnNumber" : 10,
        "endLineNumber" : 116,
        "endColumnNumber" : 80
      },
      "nodeContext" : "next=processRow(rowCounters,rowNumber,rowHeight,codewords,next);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 534,
        "startLineNumber" : 114,
        "startColumnNumber" : 27,
        "endLineNumber" : 128,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  next=processRow(rowCounters,rowNumber,rowHeight,codewords,next);\n  if (next == -1) {\n    throw FormatException.getFormatInstance();\n  }\n  for (int j=0; j < rowCounters.length; j++) {\n    rowCounters[j]=0;\n  }\n  rowNumber++;\n  rowHeight=0;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 48,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 553,
        "startLineNumber" : 114,
        "startColumnNumber" : 8,
        "endLineNumber" : 128,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (rowInProgress) {\n  next=processRow(rowCounters,rowNumber,rowHeight,codewords,next);\n  if (next == -1) {\n    throw FormatException.getFormatInstance();\n  }\n  for (int j=0; j < rowCounters.length; j++) {\n    rowCounters[j]=0;\n  }\n  rowNumber++;\n  rowHeight=0;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 50,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 644,
        "startLineNumber" : 113,
        "startColumnNumber" : 13,
        "endLineNumber" : 131,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (rowInProgress) {\n    next=processRow(rowCounters,rowNumber,rowHeight,codewords,next);\n    if (next == -1) {\n      throw FormatException.getFormatInstance();\n    }\n    for (int j=0; j < rowCounters.length; j++) {\n      rowCounters[j]=0;\n    }\n    rowNumber++;\n    rowHeight=0;\n  }\n  matchingConsecutiveScans=0;\n  rowInProgress=false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 59,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1396,
        "startLineNumber" : 96,
        "startColumnNumber" : 6,
        "endLineNumber" : 131,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (rowDifference <= moduleWidth * MAX_ROW_DIFFERENCE) {\n  for (int j=0; j < width; j++) {\n    if (bitMatrix.get(j,i)) {\n      rowCounters[j]++;\n    }\n  }\n  matchingConsecutiveScans++;\n  if (matchingConsecutiveScans >= moduleWidth * 2) {\n    rowInProgress=true;\n  }\n}\n else {\n  if (rowInProgress) {\n    next=processRow(rowCounters,rowNumber,rowHeight,codewords,next);\n    if (next == -1) {\n      throw FormatException.getFormatInstance();\n    }\n    for (int j=0; j < rowCounters.length; j++) {\n      rowCounters[j]=0;\n    }\n    rowNumber++;\n    rowHeight=0;\n  }\n  matchingConsecutiveScans=0;\n  rowInProgress=false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 104,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2008,
        "startLineNumber" : 80,
        "startColumnNumber" : 37,
        "endLineNumber" : 133,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (rowNumber >= MAX_ROWS) {\n    throw FormatException.getFormatInstance();\n  }\n  int rowDifference=0;\n  for (int j=0; j < width; j++) {\n    if (bitMatrix.get(j,i) != bitMatrix.get(j,i - 1)) {\n      rowDifference++;\n    }\n  }\n  if (rowDifference <= moduleWidth * MAX_ROW_DIFFERENCE) {\n    for (int j=0; j < width; j++) {\n      if (bitMatrix.get(j,i)) {\n        rowCounters[j]++;\n      }\n    }\n    matchingConsecutiveScans++;\n    if (matchingConsecutiveScans >= moduleWidth * 2) {\n      rowInProgress=true;\n    }\n  }\n else {\n    if (rowInProgress) {\n      next=processRow(rowCounters,rowNumber,rowHeight,codewords,next);\n      if (next == -1) {\n        throw FormatException.getFormatInstance();\n      }\n      for (int j=0; j < rowCounters.length; j++) {\n        rowCounters[j]=0;\n      }\n      rowNumber++;\n      rowHeight=0;\n    }\n    matchingConsecutiveScans=0;\n    rowInProgress=false;\n  }\n  rowHeight++;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 152,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2041,
        "startLineNumber" : 80,
        "startColumnNumber" : 4,
        "endLineNumber" : 133,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=1; i < height; i++) {\n  if (rowNumber >= MAX_ROWS) {\n    throw FormatException.getFormatInstance();\n  }\n  int rowDifference=0;\n  for (int j=0; j < width; j++) {\n    if (bitMatrix.get(j,i) != bitMatrix.get(j,i - 1)) {\n      rowDifference++;\n    }\n  }\n  if (rowDifference <= moduleWidth * MAX_ROW_DIFFERENCE) {\n    for (int j=0; j < width; j++) {\n      if (bitMatrix.get(j,i)) {\n        rowCounters[j]++;\n      }\n    }\n    matchingConsecutiveScans++;\n    if (matchingConsecutiveScans >= moduleWidth * 2) {\n      rowInProgress=true;\n    }\n  }\n else {\n    if (rowInProgress) {\n      next=processRow(rowCounters,rowNumber,rowHeight,codewords,next);\n      if (next == -1) {\n        throw FormatException.getFormatInstance();\n      }\n      for (int j=0; j < rowCounters.length; j++) {\n        rowCounters[j]=0;\n      }\n      rowNumber++;\n      rowHeight=0;\n    }\n    matchingConsecutiveScans=0;\n    rowInProgress=false;\n  }\n  rowHeight++;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 163,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3144,
        "startLineNumber" : 63,
        "startColumnNumber" : 47,
        "endLineNumber" : 148,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int width=bitMatrix.getWidth();\n  int height=bitMatrix.getHeight();\n  erasures=new int[MAX_CW_CAPACITY];\n  float moduleWidth=1.0f;\n  int[] rowCounters=new int[width];\n  int[] codewords=new int[MAX_CW_CAPACITY];\n  int next=0;\n  int matchingConsecutiveScans=0;\n  boolean rowInProgress=false;\n  int rowNumber=0;\n  int rowHeight=0;\n  for (int i=1; i < height; i++) {\n    if (rowNumber >= MAX_ROWS) {\n      throw FormatException.getFormatInstance();\n    }\n    int rowDifference=0;\n    for (int j=0; j < width; j++) {\n      if (bitMatrix.get(j,i) != bitMatrix.get(j,i - 1)) {\n        rowDifference++;\n      }\n    }\n    if (rowDifference <= moduleWidth * MAX_ROW_DIFFERENCE) {\n      for (int j=0; j < width; j++) {\n        if (bitMatrix.get(j,i)) {\n          rowCounters[j]++;\n        }\n      }\n      matchingConsecutiveScans++;\n      if (matchingConsecutiveScans >= moduleWidth * 2) {\n        rowInProgress=true;\n      }\n    }\n else {\n      if (rowInProgress) {\n        next=processRow(rowCounters,rowNumber,rowHeight,codewords,next);\n        if (next == -1) {\n          throw FormatException.getFormatInstance();\n        }\n        for (int j=0; j < rowCounters.length; j++) {\n          rowCounters[j]=0;\n        }\n        rowNumber++;\n        rowHeight=0;\n      }\n      matchingConsecutiveScans=0;\n      rowInProgress=false;\n    }\n    rowHeight++;\n  }\n  if (rowInProgress) {\n    if (rowNumber >= MAX_ROWS) {\n      throw FormatException.getFormatInstance();\n    }\n    next=processRow(rowCounters,rowNumber,rowHeight,codewords,next);\n    rowNumber++;\n    rows=rowNumber;\n  }\n  erasures=trimArray(erasures,eraseCount);\n  return trimArray(codewords,next);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 279,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3588,
        "startLineNumber" : 54,
        "startColumnNumber" : 2,
        "endLineNumber" : 148,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * To ensure separability of rows, codewords of consecutive rows belong to different subsets of all possible codewords. This routine scans the symbols in the barcode. When it finds a number of consecutive rows which are the same, it assumes that this is a row of codewords and processes them into a codeword array.\n * @return an array of codewords.\n */\nint[] readCodewords() throws FormatException {\n  int width=bitMatrix.getWidth();\n  int height=bitMatrix.getHeight();\n  erasures=new int[MAX_CW_CAPACITY];\n  float moduleWidth=1.0f;\n  int[] rowCounters=new int[width];\n  int[] codewords=new int[MAX_CW_CAPACITY];\n  int next=0;\n  int matchingConsecutiveScans=0;\n  boolean rowInProgress=false;\n  int rowNumber=0;\n  int rowHeight=0;\n  for (int i=1; i < height; i++) {\n    if (rowNumber >= MAX_ROWS) {\n      throw FormatException.getFormatInstance();\n    }\n    int rowDifference=0;\n    for (int j=0; j < width; j++) {\n      if (bitMatrix.get(j,i) != bitMatrix.get(j,i - 1)) {\n        rowDifference++;\n      }\n    }\n    if (rowDifference <= moduleWidth * MAX_ROW_DIFFERENCE) {\n      for (int j=0; j < width; j++) {\n        if (bitMatrix.get(j,i)) {\n          rowCounters[j]++;\n        }\n      }\n      matchingConsecutiveScans++;\n      if (matchingConsecutiveScans >= moduleWidth * 2) {\n        rowInProgress=true;\n      }\n    }\n else {\n      if (rowInProgress) {\n        next=processRow(rowCounters,rowNumber,rowHeight,codewords,next);\n        if (next == -1) {\n          throw FormatException.getFormatInstance();\n        }\n        for (int j=0; j < rowCounters.length; j++) {\n          rowCounters[j]=0;\n        }\n        rowNumber++;\n        rowHeight=0;\n      }\n      matchingConsecutiveScans=0;\n      rowInProgress=false;\n    }\n    rowHeight++;\n  }\n  if (rowInProgress) {\n    if (rowNumber >= MAX_ROWS) {\n      throw FormatException.getFormatInstance();\n    }\n    next=processRow(rowCounters,rowNumber,rowHeight,codewords,next);\n    rowNumber++;\n    rows=rowNumber;\n  }\n  erasures=trimArray(erasures,eraseCount);\n  return trimArray(codewords,next);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 287,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 116,
        "startColumnNumber" : 10,
        "endLineNumber" : 116,
        "endColumnNumber" : 80
      },
      "nodeContext" : "next=processRow(rowCounters,rowNumber,rowHeight,codewords,next);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "rowHeight",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 142,
      "startColumnNumber" : 48,
      "endLineNumber" : 142,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 142,
        "startColumnNumber" : 13,
        "endLineNumber" : 142,
        "endColumnNumber" : 75
      },
      "nodeContext" : "processRow(rowCounters,rowNumber,rowHeight,codewords,next)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 142,
        "startColumnNumber" : 6,
        "endLineNumber" : 142,
        "endColumnNumber" : 75
      },
      "nodeContext" : "next=processRow(rowCounters,rowNumber,rowHeight,codewords,next)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 142,
        "startColumnNumber" : 6,
        "endLineNumber" : 142,
        "endColumnNumber" : 76
      },
      "nodeContext" : "next=processRow(rowCounters,rowNumber,rowHeight,codewords,next);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 356,
        "startLineNumber" : 135,
        "startColumnNumber" : 23,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (rowNumber >= MAX_ROWS) {\n    throw FormatException.getFormatInstance();\n  }\n  next=processRow(rowCounters,rowNumber,rowHeight,codewords,next);\n  rowNumber++;\n  rows=rowNumber;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 27,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 375,
        "startLineNumber" : 135,
        "startColumnNumber" : 4,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (rowInProgress) {\n  if (rowNumber >= MAX_ROWS) {\n    throw FormatException.getFormatInstance();\n  }\n  next=processRow(rowCounters,rowNumber,rowHeight,codewords,next);\n  rowNumber++;\n  rows=rowNumber;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 29,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3144,
        "startLineNumber" : 63,
        "startColumnNumber" : 47,
        "endLineNumber" : 148,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int width=bitMatrix.getWidth();\n  int height=bitMatrix.getHeight();\n  erasures=new int[MAX_CW_CAPACITY];\n  float moduleWidth=1.0f;\n  int[] rowCounters=new int[width];\n  int[] codewords=new int[MAX_CW_CAPACITY];\n  int next=0;\n  int matchingConsecutiveScans=0;\n  boolean rowInProgress=false;\n  int rowNumber=0;\n  int rowHeight=0;\n  for (int i=1; i < height; i++) {\n    if (rowNumber >= MAX_ROWS) {\n      throw FormatException.getFormatInstance();\n    }\n    int rowDifference=0;\n    for (int j=0; j < width; j++) {\n      if (bitMatrix.get(j,i) != bitMatrix.get(j,i - 1)) {\n        rowDifference++;\n      }\n    }\n    if (rowDifference <= moduleWidth * MAX_ROW_DIFFERENCE) {\n      for (int j=0; j < width; j++) {\n        if (bitMatrix.get(j,i)) {\n          rowCounters[j]++;\n        }\n      }\n      matchingConsecutiveScans++;\n      if (matchingConsecutiveScans >= moduleWidth * 2) {\n        rowInProgress=true;\n      }\n    }\n else {\n      if (rowInProgress) {\n        next=processRow(rowCounters,rowNumber,rowHeight,codewords,next);\n        if (next == -1) {\n          throw FormatException.getFormatInstance();\n        }\n        for (int j=0; j < rowCounters.length; j++) {\n          rowCounters[j]=0;\n        }\n        rowNumber++;\n        rowHeight=0;\n      }\n      matchingConsecutiveScans=0;\n      rowInProgress=false;\n    }\n    rowHeight++;\n  }\n  if (rowInProgress) {\n    if (rowNumber >= MAX_ROWS) {\n      throw FormatException.getFormatInstance();\n    }\n    next=processRow(rowCounters,rowNumber,rowHeight,codewords,next);\n    rowNumber++;\n    rows=rowNumber;\n  }\n  erasures=trimArray(erasures,eraseCount);\n  return trimArray(codewords,next);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 279,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3588,
        "startLineNumber" : 54,
        "startColumnNumber" : 2,
        "endLineNumber" : 148,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * To ensure separability of rows, codewords of consecutive rows belong to different subsets of all possible codewords. This routine scans the symbols in the barcode. When it finds a number of consecutive rows which are the same, it assumes that this is a row of codewords and processes them into a codeword array.\n * @return an array of codewords.\n */\nint[] readCodewords() throws FormatException {\n  int width=bitMatrix.getWidth();\n  int height=bitMatrix.getHeight();\n  erasures=new int[MAX_CW_CAPACITY];\n  float moduleWidth=1.0f;\n  int[] rowCounters=new int[width];\n  int[] codewords=new int[MAX_CW_CAPACITY];\n  int next=0;\n  int matchingConsecutiveScans=0;\n  boolean rowInProgress=false;\n  int rowNumber=0;\n  int rowHeight=0;\n  for (int i=1; i < height; i++) {\n    if (rowNumber >= MAX_ROWS) {\n      throw FormatException.getFormatInstance();\n    }\n    int rowDifference=0;\n    for (int j=0; j < width; j++) {\n      if (bitMatrix.get(j,i) != bitMatrix.get(j,i - 1)) {\n        rowDifference++;\n      }\n    }\n    if (rowDifference <= moduleWidth * MAX_ROW_DIFFERENCE) {\n      for (int j=0; j < width; j++) {\n        if (bitMatrix.get(j,i)) {\n          rowCounters[j]++;\n        }\n      }\n      matchingConsecutiveScans++;\n      if (matchingConsecutiveScans >= moduleWidth * 2) {\n        rowInProgress=true;\n      }\n    }\n else {\n      if (rowInProgress) {\n        next=processRow(rowCounters,rowNumber,rowHeight,codewords,next);\n        if (next == -1) {\n          throw FormatException.getFormatInstance();\n        }\n        for (int j=0; j < rowCounters.length; j++) {\n          rowCounters[j]=0;\n        }\n        rowNumber++;\n        rowHeight=0;\n      }\n      matchingConsecutiveScans=0;\n      rowInProgress=false;\n    }\n    rowHeight++;\n  }\n  if (rowInProgress) {\n    if (rowNumber >= MAX_ROWS) {\n      throw FormatException.getFormatInstance();\n    }\n    next=processRow(rowCounters,rowNumber,rowHeight,codewords,next);\n    rowNumber++;\n    rows=rowNumber;\n  }\n  erasures=trimArray(erasures,eraseCount);\n  return trimArray(codewords,next);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 287,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 142,
        "startColumnNumber" : 6,
        "endLineNumber" : 142,
        "endColumnNumber" : 76
      },
      "nodeContext" : "next=processRow(rowCounters,rowNumber,rowHeight,codewords,next);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 116,
    "startColumnNumber" : 52,
    "endLineNumber" : 116,
    "endColumnNumber" : 61
  }, {
    "charLength" : 9,
    "startLineNumber" : 142,
    "startColumnNumber" : 48,
    "endLineNumber" : 142,
    "endColumnNumber" : 57
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  } ]
}