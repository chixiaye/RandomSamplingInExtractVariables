{
  "id" : 305,
  "expression" : "new TypeDescriptor(methodParam)",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectionHelper.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new TypeDescriptor(methodParam)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 31,
      "startLineNumber" : 288,
      "startColumnNumber" : 32,
      "endLineNumber" : 288,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 288,
        "startColumnNumber" : 19,
        "endLineNumber" : 288,
        "endColumnNumber" : 63
      },
      "nodeContext" : "targetType=new TypeDescriptor(methodParam)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 288,
        "startColumnNumber" : 4,
        "endLineNumber" : 288,
        "endColumnNumber" : 64
      },
      "nodeContext" : "TypeDescriptor targetType=new TypeDescriptor(methodParam);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 869,
        "startLineNumber" : 285,
        "startColumnNumber" : 48,
        "endLineNumber" : 300,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  TypeDescriptor targetType=new TypeDescriptor(methodParam);\n  Object argument=arguments[varargsPosition];\n  TypeDescriptor sourceType=TypeDescriptor.forObject(argument);\n  arguments[varargsPosition]=converter.convertValue(argument,sourceType,targetType);\n  if (argument != arguments[varargsPosition] && !isFirstEntryInArray(argument,arguments[varargsPosition])) {\n    conversionOccurred=true;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 57,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1404,
        "startLineNumber" : 285,
        "startColumnNumber" : 3,
        "endLineNumber" : 310,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (varargsPosition == arguments.length - 1) {\n  TypeDescriptor targetType=new TypeDescriptor(methodParam);\n  Object argument=arguments[varargsPosition];\n  TypeDescriptor sourceType=TypeDescriptor.forObject(argument);\n  arguments[varargsPosition]=converter.convertValue(argument,sourceType,targetType);\n  if (argument != arguments[varargsPosition] && !isFirstEntryInArray(argument,arguments[varargsPosition])) {\n    conversionOccurred=true;\n  }\n}\n else {\n  TypeDescriptor targetType=new TypeDescriptor(methodParam).getElementTypeDescriptor();\n  Assert.state(targetType != null,\"No element type\");\n  for (int i=varargsPosition; i < arguments.length; i++) {\n    Object argument=arguments[i];\n    arguments[i]=converter.convertValue(argument,TypeDescriptor.forObject(argument),targetType);\n    conversionOccurred|=(argument != arguments[i]);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 130,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1899,
        "startLineNumber" : 276,
        "startColumnNumber" : 7,
        "endLineNumber" : 311,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (int i=0; i < varargsPosition; i++) {\n    TypeDescriptor targetType=new TypeDescriptor(MethodParameter.forExecutable(executable,i));\n    Object argument=arguments[i];\n    arguments[i]=converter.convertValue(argument,TypeDescriptor.forObject(argument),targetType);\n    conversionOccurred|=(argument != arguments[i]);\n  }\n  MethodParameter methodParam=MethodParameter.forExecutable(executable,varargsPosition);\n  if (varargsPosition == arguments.length - 1) {\n    TypeDescriptor targetType=new TypeDescriptor(methodParam);\n    Object argument=arguments[varargsPosition];\n    TypeDescriptor sourceType=TypeDescriptor.forObject(argument);\n    arguments[varargsPosition]=converter.convertValue(argument,sourceType,targetType);\n    if (argument != arguments[varargsPosition] && !isFirstEntryInArray(argument,arguments[varargsPosition])) {\n      conversionOccurred=true;\n    }\n  }\n else {\n    TypeDescriptor targetType=new TypeDescriptor(methodParam).getElementTypeDescriptor();\n    Assert.state(targetType != null,\"No element type\");\n    for (int i=varargsPosition; i < arguments.length; i++) {\n      Object argument=arguments[i];\n      arguments[i]=converter.convertValue(argument,TypeDescriptor.forObject(argument),targetType);\n      conversionOccurred|=(argument != arguments[i]);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 197,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2283,
        "startLineNumber" : 268,
        "startColumnNumber" : 2,
        "endLineNumber" : 311,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (varargsPosition == null) {\n  for (int i=0; i < arguments.length; i++) {\n    TypeDescriptor targetType=new TypeDescriptor(MethodParameter.forExecutable(executable,i));\n    Object argument=arguments[i];\n    arguments[i]=converter.convertValue(argument,TypeDescriptor.forObject(argument),targetType);\n    conversionOccurred|=(argument != arguments[i]);\n  }\n}\n else {\n  for (int i=0; i < varargsPosition; i++) {\n    TypeDescriptor targetType=new TypeDescriptor(MethodParameter.forExecutable(executable,i));\n    Object argument=arguments[i];\n    arguments[i]=converter.convertValue(argument,TypeDescriptor.forObject(argument),targetType);\n    conversionOccurred|=(argument != arguments[i]);\n  }\n  MethodParameter methodParam=MethodParameter.forExecutable(executable,varargsPosition);\n  if (varargsPosition == arguments.length - 1) {\n    TypeDescriptor targetType=new TypeDescriptor(methodParam);\n    Object argument=arguments[varargsPosition];\n    TypeDescriptor sourceType=TypeDescriptor.forObject(argument);\n    arguments[varargsPosition]=converter.convertValue(argument,sourceType,targetType);\n    if (argument != arguments[varargsPosition] && !isFirstEntryInArray(argument,arguments[varargsPosition])) {\n      conversionOccurred=true;\n    }\n  }\n else {\n    TypeDescriptor targetType=new TypeDescriptor(methodParam).getElementTypeDescriptor();\n    Assert.state(targetType != null,\"No element type\");\n    for (int i=varargsPosition; i < arguments.length; i++) {\n      Object argument=arguments[i];\n      arguments[i]=converter.convertValue(argument,TypeDescriptor.forObject(argument),targetType);\n      conversionOccurred|=(argument != arguments[i]);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 260,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2358,
        "startLineNumber" : 265,
        "startColumnNumber" : 65,
        "endLineNumber" : 313,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  boolean conversionOccurred=false;\n  if (varargsPosition == null) {\n    for (int i=0; i < arguments.length; i++) {\n      TypeDescriptor targetType=new TypeDescriptor(MethodParameter.forExecutable(executable,i));\n      Object argument=arguments[i];\n      arguments[i]=converter.convertValue(argument,TypeDescriptor.forObject(argument),targetType);\n      conversionOccurred|=(argument != arguments[i]);\n    }\n  }\n else {\n    for (int i=0; i < varargsPosition; i++) {\n      TypeDescriptor targetType=new TypeDescriptor(MethodParameter.forExecutable(executable,i));\n      Object argument=arguments[i];\n      arguments[i]=converter.convertValue(argument,TypeDescriptor.forObject(argument),targetType);\n      conversionOccurred|=(argument != arguments[i]);\n    }\n    MethodParameter methodParam=MethodParameter.forExecutable(executable,varargsPosition);\n    if (varargsPosition == arguments.length - 1) {\n      TypeDescriptor targetType=new TypeDescriptor(methodParam);\n      Object argument=arguments[varargsPosition];\n      TypeDescriptor sourceType=TypeDescriptor.forObject(argument);\n      arguments[varargsPosition]=converter.convertValue(argument,sourceType,targetType);\n      if (argument != arguments[varargsPosition] && !isFirstEntryInArray(argument,arguments[varargsPosition])) {\n        conversionOccurred=true;\n      }\n    }\n else {\n      TypeDescriptor targetType=new TypeDescriptor(methodParam).getElementTypeDescriptor();\n      Assert.state(targetType != null,\"No element type\");\n      for (int i=varargsPosition; i < arguments.length; i++) {\n        Object argument=arguments[i];\n        arguments[i]=converter.convertValue(argument,TypeDescriptor.forObject(argument),targetType);\n        conversionOccurred|=(argument != arguments[i]);\n      }\n    }\n  }\n  return conversionOccurred;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 268,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3162,
        "startLineNumber" : 253,
        "startColumnNumber" : 1,
        "endLineNumber" : 313,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Takes an input set of argument values and converts them to the types specified as the required parameter types. The arguments are converted 'in-place' in the input array.\n * @param converter the type converter to use for attempting conversions\n * @param arguments the actual arguments that need conversion\n * @param executable the target Method or Constructor\n * @param varargsPosition the known position of the varargs argument, if any( {@code null} if not varargs)\n * @return {@code true} if some kind of conversion occurred on an argument\n * @throws EvaluationException if a problem occurs during conversion\n */\nstatic boolean convertArguments(TypeConverter converter,Object[] arguments,Executable executable,@Nullable Integer varargsPosition) throws EvaluationException {\n  boolean conversionOccurred=false;\n  if (varargsPosition == null) {\n    for (int i=0; i < arguments.length; i++) {\n      TypeDescriptor targetType=new TypeDescriptor(MethodParameter.forExecutable(executable,i));\n      Object argument=arguments[i];\n      arguments[i]=converter.convertValue(argument,TypeDescriptor.forObject(argument),targetType);\n      conversionOccurred|=(argument != arguments[i]);\n    }\n  }\n else {\n    for (int i=0; i < varargsPosition; i++) {\n      TypeDescriptor targetType=new TypeDescriptor(MethodParameter.forExecutable(executable,i));\n      Object argument=arguments[i];\n      arguments[i]=converter.convertValue(argument,TypeDescriptor.forObject(argument),targetType);\n      conversionOccurred|=(argument != arguments[i]);\n    }\n    MethodParameter methodParam=MethodParameter.forExecutable(executable,varargsPosition);\n    if (varargsPosition == arguments.length - 1) {\n      TypeDescriptor targetType=new TypeDescriptor(methodParam);\n      Object argument=arguments[varargsPosition];\n      TypeDescriptor sourceType=TypeDescriptor.forObject(argument);\n      arguments[varargsPosition]=converter.convertValue(argument,sourceType,targetType);\n      if (argument != arguments[varargsPosition] && !isFirstEntryInArray(argument,arguments[varargsPosition])) {\n        conversionOccurred=true;\n      }\n    }\n else {\n      TypeDescriptor targetType=new TypeDescriptor(methodParam).getElementTypeDescriptor();\n      Assert.state(targetType != null,\"No element type\");\n      for (int i=varargsPosition; i < arguments.length; i++) {\n        Object argument=arguments[i];\n        arguments[i]=converter.convertValue(argument,TypeDescriptor.forObject(argument),targetType);\n        conversionOccurred|=(argument != arguments[i]);\n      }\n    }\n  }\n  return conversionOccurred;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 295,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 288,
        "startColumnNumber" : 4,
        "endLineNumber" : 288,
        "endColumnNumber" : 64
      },
      "nodeContext" : "TypeDescriptor targetType=new TypeDescriptor(methodParam);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "org.springframework.core.convert.TypeDescriptor"
  }, {
    "nodeContext" : "new TypeDescriptor(methodParam)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 31,
      "startLineNumber" : 303,
      "startColumnNumber" : 32,
      "endLineNumber" : 303,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 303,
        "startColumnNumber" : 32,
        "endLineNumber" : 303,
        "endColumnNumber" : 90
      },
      "nodeContext" : "new TypeDescriptor(methodParam).getElementTypeDescriptor()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 303,
        "startColumnNumber" : 19,
        "endLineNumber" : 303,
        "endColumnNumber" : 90
      },
      "nodeContext" : "targetType=new TypeDescriptor(methodParam).getElementTypeDescriptor()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 303,
        "startColumnNumber" : 4,
        "endLineNumber" : 303,
        "endColumnNumber" : 91
      },
      "nodeContext" : "TypeDescriptor targetType=new TypeDescriptor(methodParam).getElementTypeDescriptor();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 481,
        "startLineNumber" : 301,
        "startColumnNumber" : 8,
        "endLineNumber" : 310,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  TypeDescriptor targetType=new TypeDescriptor(methodParam).getElementTypeDescriptor();\n  Assert.state(targetType != null,\"No element type\");\n  for (int i=varargsPosition; i < arguments.length; i++) {\n    Object argument=arguments[i];\n    arguments[i]=converter.convertValue(argument,TypeDescriptor.forObject(argument),targetType);\n    conversionOccurred|=(argument != arguments[i]);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 65,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1404,
        "startLineNumber" : 285,
        "startColumnNumber" : 3,
        "endLineNumber" : 310,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (varargsPosition == arguments.length - 1) {\n  TypeDescriptor targetType=new TypeDescriptor(methodParam);\n  Object argument=arguments[varargsPosition];\n  TypeDescriptor sourceType=TypeDescriptor.forObject(argument);\n  arguments[varargsPosition]=converter.convertValue(argument,sourceType,targetType);\n  if (argument != arguments[varargsPosition] && !isFirstEntryInArray(argument,arguments[varargsPosition])) {\n    conversionOccurred=true;\n  }\n}\n else {\n  TypeDescriptor targetType=new TypeDescriptor(methodParam).getElementTypeDescriptor();\n  Assert.state(targetType != null,\"No element type\");\n  for (int i=varargsPosition; i < arguments.length; i++) {\n    Object argument=arguments[i];\n    arguments[i]=converter.convertValue(argument,TypeDescriptor.forObject(argument),targetType);\n    conversionOccurred|=(argument != arguments[i]);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 130,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1899,
        "startLineNumber" : 276,
        "startColumnNumber" : 7,
        "endLineNumber" : 311,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (int i=0; i < varargsPosition; i++) {\n    TypeDescriptor targetType=new TypeDescriptor(MethodParameter.forExecutable(executable,i));\n    Object argument=arguments[i];\n    arguments[i]=converter.convertValue(argument,TypeDescriptor.forObject(argument),targetType);\n    conversionOccurred|=(argument != arguments[i]);\n  }\n  MethodParameter methodParam=MethodParameter.forExecutable(executable,varargsPosition);\n  if (varargsPosition == arguments.length - 1) {\n    TypeDescriptor targetType=new TypeDescriptor(methodParam);\n    Object argument=arguments[varargsPosition];\n    TypeDescriptor sourceType=TypeDescriptor.forObject(argument);\n    arguments[varargsPosition]=converter.convertValue(argument,sourceType,targetType);\n    if (argument != arguments[varargsPosition] && !isFirstEntryInArray(argument,arguments[varargsPosition])) {\n      conversionOccurred=true;\n    }\n  }\n else {\n    TypeDescriptor targetType=new TypeDescriptor(methodParam).getElementTypeDescriptor();\n    Assert.state(targetType != null,\"No element type\");\n    for (int i=varargsPosition; i < arguments.length; i++) {\n      Object argument=arguments[i];\n      arguments[i]=converter.convertValue(argument,TypeDescriptor.forObject(argument),targetType);\n      conversionOccurred|=(argument != arguments[i]);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 197,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2283,
        "startLineNumber" : 268,
        "startColumnNumber" : 2,
        "endLineNumber" : 311,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (varargsPosition == null) {\n  for (int i=0; i < arguments.length; i++) {\n    TypeDescriptor targetType=new TypeDescriptor(MethodParameter.forExecutable(executable,i));\n    Object argument=arguments[i];\n    arguments[i]=converter.convertValue(argument,TypeDescriptor.forObject(argument),targetType);\n    conversionOccurred|=(argument != arguments[i]);\n  }\n}\n else {\n  for (int i=0; i < varargsPosition; i++) {\n    TypeDescriptor targetType=new TypeDescriptor(MethodParameter.forExecutable(executable,i));\n    Object argument=arguments[i];\n    arguments[i]=converter.convertValue(argument,TypeDescriptor.forObject(argument),targetType);\n    conversionOccurred|=(argument != arguments[i]);\n  }\n  MethodParameter methodParam=MethodParameter.forExecutable(executable,varargsPosition);\n  if (varargsPosition == arguments.length - 1) {\n    TypeDescriptor targetType=new TypeDescriptor(methodParam);\n    Object argument=arguments[varargsPosition];\n    TypeDescriptor sourceType=TypeDescriptor.forObject(argument);\n    arguments[varargsPosition]=converter.convertValue(argument,sourceType,targetType);\n    if (argument != arguments[varargsPosition] && !isFirstEntryInArray(argument,arguments[varargsPosition])) {\n      conversionOccurred=true;\n    }\n  }\n else {\n    TypeDescriptor targetType=new TypeDescriptor(methodParam).getElementTypeDescriptor();\n    Assert.state(targetType != null,\"No element type\");\n    for (int i=varargsPosition; i < arguments.length; i++) {\n      Object argument=arguments[i];\n      arguments[i]=converter.convertValue(argument,TypeDescriptor.forObject(argument),targetType);\n      conversionOccurred|=(argument != arguments[i]);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 260,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2358,
        "startLineNumber" : 265,
        "startColumnNumber" : 65,
        "endLineNumber" : 313,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  boolean conversionOccurred=false;\n  if (varargsPosition == null) {\n    for (int i=0; i < arguments.length; i++) {\n      TypeDescriptor targetType=new TypeDescriptor(MethodParameter.forExecutable(executable,i));\n      Object argument=arguments[i];\n      arguments[i]=converter.convertValue(argument,TypeDescriptor.forObject(argument),targetType);\n      conversionOccurred|=(argument != arguments[i]);\n    }\n  }\n else {\n    for (int i=0; i < varargsPosition; i++) {\n      TypeDescriptor targetType=new TypeDescriptor(MethodParameter.forExecutable(executable,i));\n      Object argument=arguments[i];\n      arguments[i]=converter.convertValue(argument,TypeDescriptor.forObject(argument),targetType);\n      conversionOccurred|=(argument != arguments[i]);\n    }\n    MethodParameter methodParam=MethodParameter.forExecutable(executable,varargsPosition);\n    if (varargsPosition == arguments.length - 1) {\n      TypeDescriptor targetType=new TypeDescriptor(methodParam);\n      Object argument=arguments[varargsPosition];\n      TypeDescriptor sourceType=TypeDescriptor.forObject(argument);\n      arguments[varargsPosition]=converter.convertValue(argument,sourceType,targetType);\n      if (argument != arguments[varargsPosition] && !isFirstEntryInArray(argument,arguments[varargsPosition])) {\n        conversionOccurred=true;\n      }\n    }\n else {\n      TypeDescriptor targetType=new TypeDescriptor(methodParam).getElementTypeDescriptor();\n      Assert.state(targetType != null,\"No element type\");\n      for (int i=varargsPosition; i < arguments.length; i++) {\n        Object argument=arguments[i];\n        arguments[i]=converter.convertValue(argument,TypeDescriptor.forObject(argument),targetType);\n        conversionOccurred|=(argument != arguments[i]);\n      }\n    }\n  }\n  return conversionOccurred;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 268,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3162,
        "startLineNumber" : 253,
        "startColumnNumber" : 1,
        "endLineNumber" : 313,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Takes an input set of argument values and converts them to the types specified as the required parameter types. The arguments are converted 'in-place' in the input array.\n * @param converter the type converter to use for attempting conversions\n * @param arguments the actual arguments that need conversion\n * @param executable the target Method or Constructor\n * @param varargsPosition the known position of the varargs argument, if any( {@code null} if not varargs)\n * @return {@code true} if some kind of conversion occurred on an argument\n * @throws EvaluationException if a problem occurs during conversion\n */\nstatic boolean convertArguments(TypeConverter converter,Object[] arguments,Executable executable,@Nullable Integer varargsPosition) throws EvaluationException {\n  boolean conversionOccurred=false;\n  if (varargsPosition == null) {\n    for (int i=0; i < arguments.length; i++) {\n      TypeDescriptor targetType=new TypeDescriptor(MethodParameter.forExecutable(executable,i));\n      Object argument=arguments[i];\n      arguments[i]=converter.convertValue(argument,TypeDescriptor.forObject(argument),targetType);\n      conversionOccurred|=(argument != arguments[i]);\n    }\n  }\n else {\n    for (int i=0; i < varargsPosition; i++) {\n      TypeDescriptor targetType=new TypeDescriptor(MethodParameter.forExecutable(executable,i));\n      Object argument=arguments[i];\n      arguments[i]=converter.convertValue(argument,TypeDescriptor.forObject(argument),targetType);\n      conversionOccurred|=(argument != arguments[i]);\n    }\n    MethodParameter methodParam=MethodParameter.forExecutable(executable,varargsPosition);\n    if (varargsPosition == arguments.length - 1) {\n      TypeDescriptor targetType=new TypeDescriptor(methodParam);\n      Object argument=arguments[varargsPosition];\n      TypeDescriptor sourceType=TypeDescriptor.forObject(argument);\n      arguments[varargsPosition]=converter.convertValue(argument,sourceType,targetType);\n      if (argument != arguments[varargsPosition] && !isFirstEntryInArray(argument,arguments[varargsPosition])) {\n        conversionOccurred=true;\n      }\n    }\n else {\n      TypeDescriptor targetType=new TypeDescriptor(methodParam).getElementTypeDescriptor();\n      Assert.state(targetType != null,\"No element type\");\n      for (int i=varargsPosition; i < arguments.length; i++) {\n        Object argument=arguments[i];\n        arguments[i]=converter.convertValue(argument,TypeDescriptor.forObject(argument),targetType);\n        conversionOccurred|=(argument != arguments[i]);\n      }\n    }\n  }\n  return conversionOccurred;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 295,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 303,
        "startColumnNumber" : 4,
        "endLineNumber" : 303,
        "endColumnNumber" : 91
      },
      "nodeContext" : "TypeDescriptor targetType=new TypeDescriptor(methodParam).getElementTypeDescriptor();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "org.springframework.core.convert.TypeDescriptor"
  } ],
  "positionList" : [ {
    "charLength" : 31,
    "startLineNumber" : 288,
    "startColumnNumber" : 32,
    "endLineNumber" : 288,
    "endColumnNumber" : 63
  }, {
    "charLength" : 31,
    "startLineNumber" : 303,
    "startColumnNumber" : 32,
    "endLineNumber" : 303,
    "endColumnNumber" : 63
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}