{
  "id" : 218,
  "expression" : "ids",
  "projectName" : "JakeWharton@butterknife",
  "commitID" : "f89fb0f12f5a0c21d95dae234d53f590e1384557",
  "filePath" : "/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ids",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 347,
      "startColumnNumber" : 8,
      "endLineNumber" : 347,
      "endColumnNumber" : 11
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 347,
        "startColumnNumber" : 8,
        "endLineNumber" : 347,
        "endColumnNumber" : 18
      },
      "nodeContext" : "ids.length",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 347,
        "startColumnNumber" : 8,
        "endLineNumber" : 347,
        "endColumnNumber" : 23
      },
      "nodeContext" : "ids.length != 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 268,
        "startLineNumber" : 347,
        "startColumnNumber" : 4,
        "endLineNumber" : 352,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (ids.length != 1) {\n  error(element,\"@%s for a view must only specify one ID. Found: %s. (%s.%s)\",Bind.class.getSimpleName(),Arrays.toString(ids),enclosingElement.getQualifiedName(),element.getSimpleName());\n  hasError=true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 31,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2281,
        "startLineNumber" : 329,
        "startColumnNumber" : 37,
        "endLineNumber" : 385,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  boolean hasError=false;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  TypeMirror elementType=element.asType();\n  if (elementType.getKind() == TypeKind.TYPEVAR) {\n    TypeVariable typeVariable=(TypeVariable)elementType;\n    elementType=typeVariable.getUpperBound();\n  }\n  if (!isSubtypeOfType(elementType,VIEW_TYPE) && !isInterface(elementType)) {\n    error(element,\"@%s fields must extend from View or be an interface. (%s.%s)\",Bind.class.getSimpleName(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  int[] ids=element.getAnnotation(Bind.class).value();\n  if (ids.length != 1) {\n    error(element,\"@%s for a view must only specify one ID. Found: %s. (%s.%s)\",Bind.class.getSimpleName(),Arrays.toString(ids),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  int id=ids[0];\n  BindingClass bindingClass=targetClassMap.get(enclosingElement);\n  if (bindingClass != null) {\n    ViewBindings viewBindings=bindingClass.getViewBinding(id);\n    if (viewBindings != null) {\n      Iterator<FieldViewBinding> iterator=viewBindings.getFieldBindings().iterator();\n      if (iterator.hasNext()) {\n        FieldViewBinding existingBinding=iterator.next();\n        error(element,\"Attempt to use @%s for an already bound ID %d on '%s'. (%s.%s)\",Bind.class.getSimpleName(),id,existingBinding.getName(),enclosingElement.getQualifiedName(),element.getSimpleName());\n        return;\n      }\n    }\n  }\n else {\n    bindingClass=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  }\n  String name=element.getSimpleName().toString();\n  TypeName type=TypeName.get(elementType);\n  boolean required=isRequiredBinding(element);\n  FieldViewBinding binding=new FieldViewBinding(name,type,required);\n  bindingClass.addField(id,binding);\n  erasedTargetNames.add(enclosingElement.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 270,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2408,
        "startLineNumber" : 328,
        "startColumnNumber" : 2,
        "endLineNumber" : 385,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void parseBindOne(Element element,Map<TypeElement,BindingClass> targetClassMap,Set<String> erasedTargetNames){\n  boolean hasError=false;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  TypeMirror elementType=element.asType();\n  if (elementType.getKind() == TypeKind.TYPEVAR) {\n    TypeVariable typeVariable=(TypeVariable)elementType;\n    elementType=typeVariable.getUpperBound();\n  }\n  if (!isSubtypeOfType(elementType,VIEW_TYPE) && !isInterface(elementType)) {\n    error(element,\"@%s fields must extend from View or be an interface. (%s.%s)\",Bind.class.getSimpleName(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  int[] ids=element.getAnnotation(Bind.class).value();\n  if (ids.length != 1) {\n    error(element,\"@%s for a view must only specify one ID. Found: %s. (%s.%s)\",Bind.class.getSimpleName(),Arrays.toString(ids),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  int id=ids[0];\n  BindingClass bindingClass=targetClassMap.get(enclosingElement);\n  if (bindingClass != null) {\n    ViewBindings viewBindings=bindingClass.getViewBinding(id);\n    if (viewBindings != null) {\n      Iterator<FieldViewBinding> iterator=viewBindings.getFieldBindings().iterator();\n      if (iterator.hasNext()) {\n        FieldViewBinding existingBinding=iterator.next();\n        error(element,\"Attempt to use @%s for an already bound ID %d on '%s'. (%s.%s)\",Bind.class.getSimpleName(),id,existingBinding.getName(),enclosingElement.getQualifiedName(),element.getSimpleName());\n        return;\n      }\n    }\n  }\n else {\n    bindingClass=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  }\n  String name=element.getSimpleName().toString();\n  TypeName type=TypeName.get(elementType);\n  boolean required=isRequiredBinding(element);\n  FieldViewBinding binding=new FieldViewBinding(name,type,required);\n  bindingClass.addField(id,binding);\n  erasedTargetNames.add(enclosingElement.toString());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 294,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 347,
        "startColumnNumber" : 8,
        "endLineNumber" : 347,
        "endColumnNumber" : 23
      },
      "nodeContext" : "ids.length != 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int[]"
  }, {
    "nodeContext" : "ids",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 349,
      "startColumnNumber" : 54,
      "endLineNumber" : 349,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 349,
        "startColumnNumber" : 38,
        "endLineNumber" : 349,
        "endColumnNumber" : 58
      },
      "nodeContext" : "Arrays.toString(ids)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 209,
        "startLineNumber" : 348,
        "startColumnNumber" : 6,
        "endLineNumber" : 350,
        "endColumnNumber" : 34
      },
      "nodeContext" : "error(element,\"@%s for a view must only specify one ID. Found: %s. (%s.%s)\",Bind.class.getSimpleName(),Arrays.toString(ids),enclosingElement.getQualifiedName(),element.getSimpleName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 210,
        "startLineNumber" : 348,
        "startColumnNumber" : 6,
        "endLineNumber" : 350,
        "endColumnNumber" : 35
      },
      "nodeContext" : "error(element,\"@%s for a view must only specify one ID. Found: %s. (%s.%s)\",Bind.class.getSimpleName(),Arrays.toString(ids),enclosingElement.getQualifiedName(),element.getSimpleName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 247,
        "startLineNumber" : 347,
        "startColumnNumber" : 25,
        "endLineNumber" : 352,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  error(element,\"@%s for a view must only specify one ID. Found: %s. (%s.%s)\",Bind.class.getSimpleName(),Arrays.toString(ids),enclosingElement.getQualifiedName(),element.getSimpleName());\n  hasError=true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 268,
        "startLineNumber" : 347,
        "startColumnNumber" : 4,
        "endLineNumber" : 352,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (ids.length != 1) {\n  error(element,\"@%s for a view must only specify one ID. Found: %s. (%s.%s)\",Bind.class.getSimpleName(),Arrays.toString(ids),enclosingElement.getQualifiedName(),element.getSimpleName());\n  hasError=true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 31,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2281,
        "startLineNumber" : 329,
        "startColumnNumber" : 37,
        "endLineNumber" : 385,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  boolean hasError=false;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  TypeMirror elementType=element.asType();\n  if (elementType.getKind() == TypeKind.TYPEVAR) {\n    TypeVariable typeVariable=(TypeVariable)elementType;\n    elementType=typeVariable.getUpperBound();\n  }\n  if (!isSubtypeOfType(elementType,VIEW_TYPE) && !isInterface(elementType)) {\n    error(element,\"@%s fields must extend from View or be an interface. (%s.%s)\",Bind.class.getSimpleName(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  int[] ids=element.getAnnotation(Bind.class).value();\n  if (ids.length != 1) {\n    error(element,\"@%s for a view must only specify one ID. Found: %s. (%s.%s)\",Bind.class.getSimpleName(),Arrays.toString(ids),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  int id=ids[0];\n  BindingClass bindingClass=targetClassMap.get(enclosingElement);\n  if (bindingClass != null) {\n    ViewBindings viewBindings=bindingClass.getViewBinding(id);\n    if (viewBindings != null) {\n      Iterator<FieldViewBinding> iterator=viewBindings.getFieldBindings().iterator();\n      if (iterator.hasNext()) {\n        FieldViewBinding existingBinding=iterator.next();\n        error(element,\"Attempt to use @%s for an already bound ID %d on '%s'. (%s.%s)\",Bind.class.getSimpleName(),id,existingBinding.getName(),enclosingElement.getQualifiedName(),element.getSimpleName());\n        return;\n      }\n    }\n  }\n else {\n    bindingClass=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  }\n  String name=element.getSimpleName().toString();\n  TypeName type=TypeName.get(elementType);\n  boolean required=isRequiredBinding(element);\n  FieldViewBinding binding=new FieldViewBinding(name,type,required);\n  bindingClass.addField(id,binding);\n  erasedTargetNames.add(enclosingElement.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 270,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2408,
        "startLineNumber" : 328,
        "startColumnNumber" : 2,
        "endLineNumber" : 385,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void parseBindOne(Element element,Map<TypeElement,BindingClass> targetClassMap,Set<String> erasedTargetNames){\n  boolean hasError=false;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  TypeMirror elementType=element.asType();\n  if (elementType.getKind() == TypeKind.TYPEVAR) {\n    TypeVariable typeVariable=(TypeVariable)elementType;\n    elementType=typeVariable.getUpperBound();\n  }\n  if (!isSubtypeOfType(elementType,VIEW_TYPE) && !isInterface(elementType)) {\n    error(element,\"@%s fields must extend from View or be an interface. (%s.%s)\",Bind.class.getSimpleName(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  int[] ids=element.getAnnotation(Bind.class).value();\n  if (ids.length != 1) {\n    error(element,\"@%s for a view must only specify one ID. Found: %s. (%s.%s)\",Bind.class.getSimpleName(),Arrays.toString(ids),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  int id=ids[0];\n  BindingClass bindingClass=targetClassMap.get(enclosingElement);\n  if (bindingClass != null) {\n    ViewBindings viewBindings=bindingClass.getViewBinding(id);\n    if (viewBindings != null) {\n      Iterator<FieldViewBinding> iterator=viewBindings.getFieldBindings().iterator();\n      if (iterator.hasNext()) {\n        FieldViewBinding existingBinding=iterator.next();\n        error(element,\"Attempt to use @%s for an already bound ID %d on '%s'. (%s.%s)\",Bind.class.getSimpleName(),id,existingBinding.getName(),enclosingElement.getQualifiedName(),element.getSimpleName());\n        return;\n      }\n    }\n  }\n else {\n    bindingClass=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  }\n  String name=element.getSimpleName().toString();\n  TypeName type=TypeName.get(elementType);\n  boolean required=isRequiredBinding(element);\n  FieldViewBinding binding=new FieldViewBinding(name,type,required);\n  bindingClass.addField(id,binding);\n  erasedTargetNames.add(enclosingElement.toString());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 294,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 349,
        "startColumnNumber" : 38,
        "endLineNumber" : 349,
        "endColumnNumber" : 58
      },
      "nodeContext" : "Arrays.toString(ids)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int[]"
  }, {
    "nodeContext" : "ids",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 358,
      "startColumnNumber" : 13,
      "endLineNumber" : 358,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 6,
        "startLineNumber" : 358,
        "startColumnNumber" : 13,
        "endLineNumber" : 358,
        "endColumnNumber" : 19
      },
      "nodeContext" : "ids[0]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 358,
        "startColumnNumber" : 8,
        "endLineNumber" : 358,
        "endColumnNumber" : 19
      },
      "nodeContext" : "id=ids[0]",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 358,
        "startColumnNumber" : 4,
        "endLineNumber" : 358,
        "endColumnNumber" : 20
      },
      "nodeContext" : "int id=ids[0];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2281,
        "startLineNumber" : 329,
        "startColumnNumber" : 37,
        "endLineNumber" : 385,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  boolean hasError=false;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  TypeMirror elementType=element.asType();\n  if (elementType.getKind() == TypeKind.TYPEVAR) {\n    TypeVariable typeVariable=(TypeVariable)elementType;\n    elementType=typeVariable.getUpperBound();\n  }\n  if (!isSubtypeOfType(elementType,VIEW_TYPE) && !isInterface(elementType)) {\n    error(element,\"@%s fields must extend from View or be an interface. (%s.%s)\",Bind.class.getSimpleName(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  int[] ids=element.getAnnotation(Bind.class).value();\n  if (ids.length != 1) {\n    error(element,\"@%s for a view must only specify one ID. Found: %s. (%s.%s)\",Bind.class.getSimpleName(),Arrays.toString(ids),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  int id=ids[0];\n  BindingClass bindingClass=targetClassMap.get(enclosingElement);\n  if (bindingClass != null) {\n    ViewBindings viewBindings=bindingClass.getViewBinding(id);\n    if (viewBindings != null) {\n      Iterator<FieldViewBinding> iterator=viewBindings.getFieldBindings().iterator();\n      if (iterator.hasNext()) {\n        FieldViewBinding existingBinding=iterator.next();\n        error(element,\"Attempt to use @%s for an already bound ID %d on '%s'. (%s.%s)\",Bind.class.getSimpleName(),id,existingBinding.getName(),enclosingElement.getQualifiedName(),element.getSimpleName());\n        return;\n      }\n    }\n  }\n else {\n    bindingClass=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  }\n  String name=element.getSimpleName().toString();\n  TypeName type=TypeName.get(elementType);\n  boolean required=isRequiredBinding(element);\n  FieldViewBinding binding=new FieldViewBinding(name,type,required);\n  bindingClass.addField(id,binding);\n  erasedTargetNames.add(enclosingElement.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 270,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2408,
        "startLineNumber" : 328,
        "startColumnNumber" : 2,
        "endLineNumber" : 385,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void parseBindOne(Element element,Map<TypeElement,BindingClass> targetClassMap,Set<String> erasedTargetNames){\n  boolean hasError=false;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  TypeMirror elementType=element.asType();\n  if (elementType.getKind() == TypeKind.TYPEVAR) {\n    TypeVariable typeVariable=(TypeVariable)elementType;\n    elementType=typeVariable.getUpperBound();\n  }\n  if (!isSubtypeOfType(elementType,VIEW_TYPE) && !isInterface(elementType)) {\n    error(element,\"@%s fields must extend from View or be an interface. (%s.%s)\",Bind.class.getSimpleName(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  int[] ids=element.getAnnotation(Bind.class).value();\n  if (ids.length != 1) {\n    error(element,\"@%s for a view must only specify one ID. Found: %s. (%s.%s)\",Bind.class.getSimpleName(),Arrays.toString(ids),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  int id=ids[0];\n  BindingClass bindingClass=targetClassMap.get(enclosingElement);\n  if (bindingClass != null) {\n    ViewBindings viewBindings=bindingClass.getViewBinding(id);\n    if (viewBindings != null) {\n      Iterator<FieldViewBinding> iterator=viewBindings.getFieldBindings().iterator();\n      if (iterator.hasNext()) {\n        FieldViewBinding existingBinding=iterator.next();\n        error(element,\"Attempt to use @%s for an already bound ID %d on '%s'. (%s.%s)\",Bind.class.getSimpleName(),id,existingBinding.getName(),enclosingElement.getQualifiedName(),element.getSimpleName());\n        return;\n      }\n    }\n  }\n else {\n    bindingClass=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  }\n  String name=element.getSimpleName().toString();\n  TypeName type=TypeName.get(elementType);\n  boolean required=isRequiredBinding(element);\n  FieldViewBinding binding=new FieldViewBinding(name,type,required);\n  bindingClass.addField(id,binding);\n  erasedTargetNames.add(enclosingElement.toString());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 294,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 358,
        "startColumnNumber" : 4,
        "endLineNumber" : 358,
        "endColumnNumber" : 20
      },
      "nodeContext" : "int id=ids[0];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int[]"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 347,
    "startColumnNumber" : 8,
    "endLineNumber" : 347,
    "endColumnNumber" : 11
  }, {
    "charLength" : 3,
    "startLineNumber" : 349,
    "startColumnNumber" : 54,
    "endLineNumber" : 349,
    "endColumnNumber" : 57
  }, {
    "charLength" : 3,
    "startLineNumber" : 358,
    "startColumnNumber" : 13,
    "endLineNumber" : 358,
    "endColumnNumber" : 16
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}