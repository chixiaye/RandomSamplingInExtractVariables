{
  "id" : 275,
  "expression" : "System.out",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/tool/src/org/antlr/v4/gui/TestRig.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "System.out",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 179,
      "startColumnNumber" : 6,
      "endLineNumber" : 179,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 179,
        "startColumnNumber" : 6,
        "endLineNumber" : 179,
        "endColumnNumber" : 60
      },
      "nodeContext" : "System.out.println(((CommonToken)tok).toString(lexer))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 179,
        "startColumnNumber" : 6,
        "endLineNumber" : 179,
        "endColumnNumber" : 61
      },
      "nodeContext" : "System.out.println(((CommonToken)tok).toString(lexer));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 178,
        "startColumnNumber" : 39,
        "endLineNumber" : 180,
        "endColumnNumber" : 6
      },
      "nodeContext" : "{\n  System.out.println(((CommonToken)tok).toString(lexer));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 170,
        "startLineNumber" : 178,
        "startColumnNumber" : 5,
        "endLineNumber" : 183,
        "endColumnNumber" : 6
      },
      "nodeContext" : "if (tok instanceof CommonToken) {\n  System.out.println(((CommonToken)tok).toString(lexer));\n}\n else {\n  System.out.println(tok.toString());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 30,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 185,
        "startLineNumber" : 177,
        "startColumnNumber" : 41,
        "endLineNumber" : 184,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (tok instanceof CommonToken) {\n    System.out.println(((CommonToken)tok).toString(lexer));\n  }\n else {\n    System.out.println(tok.toString());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 31,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 222,
        "startLineNumber" : 177,
        "startColumnNumber" : 4,
        "endLineNumber" : 184,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Token tok : tokens.getTokens()) {\n  if (tok instanceof CommonToken) {\n    System.out.println(((CommonToken)tok).toString(lexer));\n  }\n else {\n    System.out.println(tok.toString());\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 39,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 235,
        "startLineNumber" : 176,
        "startColumnNumber" : 21,
        "endLineNumber" : 185,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  for (  Token tok : tokens.getTokens()) {\n    if (tok instanceof CommonToken) {\n      System.out.println(((CommonToken)tok).toString(lexer));\n    }\n else {\n      System.out.println(tok.toString());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 40,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 253,
        "startLineNumber" : 176,
        "startColumnNumber" : 3,
        "endLineNumber" : 185,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (showTokens) {\n  for (  Token tok : tokens.getTokens()) {\n    if (tok instanceof CommonToken) {\n      System.out.println(((CommonToken)tok).toString(lexer));\n    }\n else {\n      System.out.println(tok.toString());\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 42,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1449,
        "startLineNumber" : 170,
        "startColumnNumber" : 193,
        "endLineNumber" : 222,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  lexer.setInputStream(input);\n  CommonTokenStream tokens=new CommonTokenStream(lexer);\n  tokens.fill();\n  if (showTokens) {\n    for (    Token tok : tokens.getTokens()) {\n      if (tok instanceof CommonToken) {\n        System.out.println(((CommonToken)tok).toString(lexer));\n      }\n else {\n        System.out.println(tok.toString());\n      }\n    }\n  }\n  if (startRuleName.equals(LEXER_START_RULE_NAME))   return;\n  if (diagnostics) {\n    parser.addErrorListener(new DiagnosticErrorListener());\n    parser.getInterpreter().setPredictionMode(PredictionMode.LL_EXACT_AMBIG_DETECTION);\n  }\n  if (printTree || gui || psFile != null) {\n    parser.setBuildParseTree(true);\n  }\n  if (SLL) {\n    parser.getInterpreter().setPredictionMode(PredictionMode.SLL);\n  }\n  parser.setTokenStream(tokens);\n  parser.setTrace(trace);\n  try {\n    Method startRule=parserClass.getMethod(startRuleName);\n    ParserRuleContext tree=(ParserRuleContext)startRule.invoke(parser,(Object[])null);\n    if (printTree) {\n      System.out.println(tree.toStringTree(parser));\n    }\n    if (gui) {\n      Trees.inspect(tree,parser);\n    }\n    if (psFile != null) {\n      Trees.save(tree,parser,psFile);\n    }\n  }\n catch (  NoSuchMethodException nsme) {\n    System.err.println(\"No method for rule \" + startRuleName + \" or it has arguments\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 200,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1641,
        "startLineNumber" : 170,
        "startColumnNumber" : 1,
        "endLineNumber" : 222,
        "endColumnNumber" : 3
      },
      "nodeContext" : "protected void process(Lexer lexer,Class<? extends Parser> parserClass,Parser parser,CharStream input) throws IOException, IllegalAccessException, InvocationTargetException, PrintException {\n  lexer.setInputStream(input);\n  CommonTokenStream tokens=new CommonTokenStream(lexer);\n  tokens.fill();\n  if (showTokens) {\n    for (    Token tok : tokens.getTokens()) {\n      if (tok instanceof CommonToken) {\n        System.out.println(((CommonToken)tok).toString(lexer));\n      }\n else {\n        System.out.println(tok.toString());\n      }\n    }\n  }\n  if (startRuleName.equals(LEXER_START_RULE_NAME))   return;\n  if (diagnostics) {\n    parser.addErrorListener(new DiagnosticErrorListener());\n    parser.getInterpreter().setPredictionMode(PredictionMode.LL_EXACT_AMBIG_DETECTION);\n  }\n  if (printTree || gui || psFile != null) {\n    parser.setBuildParseTree(true);\n  }\n  if (SLL) {\n    parser.getInterpreter().setPredictionMode(PredictionMode.SLL);\n  }\n  parser.setTokenStream(tokens);\n  parser.setTrace(trace);\n  try {\n    Method startRule=parserClass.getMethod(startRuleName);\n    ParserRuleContext tree=(ParserRuleContext)startRule.invoke(parser,(Object[])null);\n    if (printTree) {\n      System.out.println(tree.toStringTree(parser));\n    }\n    if (gui) {\n      Trees.inspect(tree,parser);\n    }\n    if (psFile != null) {\n      Trees.save(tree,parser,psFile);\n    }\n  }\n catch (  NoSuchMethodException nsme) {\n    System.err.println(\"No method for rule \" + startRuleName + \" or it has arguments\");\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 232,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 179,
        "startColumnNumber" : 6,
        "endLineNumber" : 179,
        "endColumnNumber" : 61
      },
      "nodeContext" : "System.out.println(((CommonToken)tok).toString(lexer));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 7
    },
    "tokenLength" : 2,
    "type" : "java.io.PrintStream"
  }, {
    "nodeContext" : "System.out",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 182,
      "startColumnNumber" : 6,
      "endLineNumber" : 182,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 182,
        "startColumnNumber" : 6,
        "endLineNumber" : 182,
        "endColumnNumber" : 40
      },
      "nodeContext" : "System.out.println(tok.toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 182,
        "startColumnNumber" : 6,
        "endLineNumber" : 182,
        "endColumnNumber" : 41
      },
      "nodeContext" : "System.out.println(tok.toString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 181,
        "startColumnNumber" : 10,
        "endLineNumber" : 183,
        "endColumnNumber" : 6
      },
      "nodeContext" : "{\n  System.out.println(tok.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 170,
        "startLineNumber" : 178,
        "startColumnNumber" : 5,
        "endLineNumber" : 183,
        "endColumnNumber" : 6
      },
      "nodeContext" : "if (tok instanceof CommonToken) {\n  System.out.println(((CommonToken)tok).toString(lexer));\n}\n else {\n  System.out.println(tok.toString());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 30,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 185,
        "startLineNumber" : 177,
        "startColumnNumber" : 41,
        "endLineNumber" : 184,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (tok instanceof CommonToken) {\n    System.out.println(((CommonToken)tok).toString(lexer));\n  }\n else {\n    System.out.println(tok.toString());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 31,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 222,
        "startLineNumber" : 177,
        "startColumnNumber" : 4,
        "endLineNumber" : 184,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Token tok : tokens.getTokens()) {\n  if (tok instanceof CommonToken) {\n    System.out.println(((CommonToken)tok).toString(lexer));\n  }\n else {\n    System.out.println(tok.toString());\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 39,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 235,
        "startLineNumber" : 176,
        "startColumnNumber" : 21,
        "endLineNumber" : 185,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  for (  Token tok : tokens.getTokens()) {\n    if (tok instanceof CommonToken) {\n      System.out.println(((CommonToken)tok).toString(lexer));\n    }\n else {\n      System.out.println(tok.toString());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 40,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 253,
        "startLineNumber" : 176,
        "startColumnNumber" : 3,
        "endLineNumber" : 185,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (showTokens) {\n  for (  Token tok : tokens.getTokens()) {\n    if (tok instanceof CommonToken) {\n      System.out.println(((CommonToken)tok).toString(lexer));\n    }\n else {\n      System.out.println(tok.toString());\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 42,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1449,
        "startLineNumber" : 170,
        "startColumnNumber" : 193,
        "endLineNumber" : 222,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  lexer.setInputStream(input);\n  CommonTokenStream tokens=new CommonTokenStream(lexer);\n  tokens.fill();\n  if (showTokens) {\n    for (    Token tok : tokens.getTokens()) {\n      if (tok instanceof CommonToken) {\n        System.out.println(((CommonToken)tok).toString(lexer));\n      }\n else {\n        System.out.println(tok.toString());\n      }\n    }\n  }\n  if (startRuleName.equals(LEXER_START_RULE_NAME))   return;\n  if (diagnostics) {\n    parser.addErrorListener(new DiagnosticErrorListener());\n    parser.getInterpreter().setPredictionMode(PredictionMode.LL_EXACT_AMBIG_DETECTION);\n  }\n  if (printTree || gui || psFile != null) {\n    parser.setBuildParseTree(true);\n  }\n  if (SLL) {\n    parser.getInterpreter().setPredictionMode(PredictionMode.SLL);\n  }\n  parser.setTokenStream(tokens);\n  parser.setTrace(trace);\n  try {\n    Method startRule=parserClass.getMethod(startRuleName);\n    ParserRuleContext tree=(ParserRuleContext)startRule.invoke(parser,(Object[])null);\n    if (printTree) {\n      System.out.println(tree.toStringTree(parser));\n    }\n    if (gui) {\n      Trees.inspect(tree,parser);\n    }\n    if (psFile != null) {\n      Trees.save(tree,parser,psFile);\n    }\n  }\n catch (  NoSuchMethodException nsme) {\n    System.err.println(\"No method for rule \" + startRuleName + \" or it has arguments\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 200,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1641,
        "startLineNumber" : 170,
        "startColumnNumber" : 1,
        "endLineNumber" : 222,
        "endColumnNumber" : 3
      },
      "nodeContext" : "protected void process(Lexer lexer,Class<? extends Parser> parserClass,Parser parser,CharStream input) throws IOException, IllegalAccessException, InvocationTargetException, PrintException {\n  lexer.setInputStream(input);\n  CommonTokenStream tokens=new CommonTokenStream(lexer);\n  tokens.fill();\n  if (showTokens) {\n    for (    Token tok : tokens.getTokens()) {\n      if (tok instanceof CommonToken) {\n        System.out.println(((CommonToken)tok).toString(lexer));\n      }\n else {\n        System.out.println(tok.toString());\n      }\n    }\n  }\n  if (startRuleName.equals(LEXER_START_RULE_NAME))   return;\n  if (diagnostics) {\n    parser.addErrorListener(new DiagnosticErrorListener());\n    parser.getInterpreter().setPredictionMode(PredictionMode.LL_EXACT_AMBIG_DETECTION);\n  }\n  if (printTree || gui || psFile != null) {\n    parser.setBuildParseTree(true);\n  }\n  if (SLL) {\n    parser.getInterpreter().setPredictionMode(PredictionMode.SLL);\n  }\n  parser.setTokenStream(tokens);\n  parser.setTrace(trace);\n  try {\n    Method startRule=parserClass.getMethod(startRuleName);\n    ParserRuleContext tree=(ParserRuleContext)startRule.invoke(parser,(Object[])null);\n    if (printTree) {\n      System.out.println(tree.toStringTree(parser));\n    }\n    if (gui) {\n      Trees.inspect(tree,parser);\n    }\n    if (psFile != null) {\n      Trees.save(tree,parser,psFile);\n    }\n  }\n catch (  NoSuchMethodException nsme) {\n    System.err.println(\"No method for rule \" + startRuleName + \" or it has arguments\");\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 232,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 182,
        "startColumnNumber" : 6,
        "endLineNumber" : 182,
        "endColumnNumber" : 41
      },
      "nodeContext" : "System.out.println(tok.toString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.io.PrintStream"
  }, {
    "nodeContext" : "System.out",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 210,
      "startColumnNumber" : 5,
      "endLineNumber" : 210,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 210,
        "startColumnNumber" : 5,
        "endLineNumber" : 210,
        "endColumnNumber" : 50
      },
      "nodeContext" : "System.out.println(tree.toStringTree(parser))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 210,
        "startColumnNumber" : 5,
        "endLineNumber" : 210,
        "endColumnNumber" : 51
      },
      "nodeContext" : "System.out.println(tree.toStringTree(parser));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 209,
        "startColumnNumber" : 21,
        "endLineNumber" : 211,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  System.out.println(tree.toStringTree(parser));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 209,
        "startColumnNumber" : 4,
        "endLineNumber" : 211,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (printTree) {\n  System.out.println(tree.toStringTree(parser));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 403,
        "startLineNumber" : 205,
        "startColumnNumber" : 7,
        "endLineNumber" : 218,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  Method startRule=parserClass.getMethod(startRuleName);\n  ParserRuleContext tree=(ParserRuleContext)startRule.invoke(parser,(Object[])null);\n  if (printTree) {\n    System.out.println(tree.toStringTree(parser));\n  }\n  if (gui) {\n    Trees.inspect(tree,parser);\n  }\n  if (psFile != null) {\n    Trees.save(tree,parser,psFile);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 62,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 539,
        "startLineNumber" : 205,
        "startColumnNumber" : 3,
        "endLineNumber" : 221,
        "endColumnNumber" : 4
      },
      "nodeContext" : "try {\n  Method startRule=parserClass.getMethod(startRuleName);\n  ParserRuleContext tree=(ParserRuleContext)startRule.invoke(parser,(Object[])null);\n  if (printTree) {\n    System.out.println(tree.toStringTree(parser));\n  }\n  if (gui) {\n    Trees.inspect(tree,parser);\n  }\n  if (psFile != null) {\n    Trees.save(tree,parser,psFile);\n  }\n}\n catch (NoSuchMethodException nsme) {\n  System.err.println(\"No method for rule \" + startRuleName + \" or it has arguments\");\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 79,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1449,
        "startLineNumber" : 170,
        "startColumnNumber" : 193,
        "endLineNumber" : 222,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  lexer.setInputStream(input);\n  CommonTokenStream tokens=new CommonTokenStream(lexer);\n  tokens.fill();\n  if (showTokens) {\n    for (    Token tok : tokens.getTokens()) {\n      if (tok instanceof CommonToken) {\n        System.out.println(((CommonToken)tok).toString(lexer));\n      }\n else {\n        System.out.println(tok.toString());\n      }\n    }\n  }\n  if (startRuleName.equals(LEXER_START_RULE_NAME))   return;\n  if (diagnostics) {\n    parser.addErrorListener(new DiagnosticErrorListener());\n    parser.getInterpreter().setPredictionMode(PredictionMode.LL_EXACT_AMBIG_DETECTION);\n  }\n  if (printTree || gui || psFile != null) {\n    parser.setBuildParseTree(true);\n  }\n  if (SLL) {\n    parser.getInterpreter().setPredictionMode(PredictionMode.SLL);\n  }\n  parser.setTokenStream(tokens);\n  parser.setTrace(trace);\n  try {\n    Method startRule=parserClass.getMethod(startRuleName);\n    ParserRuleContext tree=(ParserRuleContext)startRule.invoke(parser,(Object[])null);\n    if (printTree) {\n      System.out.println(tree.toStringTree(parser));\n    }\n    if (gui) {\n      Trees.inspect(tree,parser);\n    }\n    if (psFile != null) {\n      Trees.save(tree,parser,psFile);\n    }\n  }\n catch (  NoSuchMethodException nsme) {\n    System.err.println(\"No method for rule \" + startRuleName + \" or it has arguments\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 200,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1641,
        "startLineNumber" : 170,
        "startColumnNumber" : 1,
        "endLineNumber" : 222,
        "endColumnNumber" : 3
      },
      "nodeContext" : "protected void process(Lexer lexer,Class<? extends Parser> parserClass,Parser parser,CharStream input) throws IOException, IllegalAccessException, InvocationTargetException, PrintException {\n  lexer.setInputStream(input);\n  CommonTokenStream tokens=new CommonTokenStream(lexer);\n  tokens.fill();\n  if (showTokens) {\n    for (    Token tok : tokens.getTokens()) {\n      if (tok instanceof CommonToken) {\n        System.out.println(((CommonToken)tok).toString(lexer));\n      }\n else {\n        System.out.println(tok.toString());\n      }\n    }\n  }\n  if (startRuleName.equals(LEXER_START_RULE_NAME))   return;\n  if (diagnostics) {\n    parser.addErrorListener(new DiagnosticErrorListener());\n    parser.getInterpreter().setPredictionMode(PredictionMode.LL_EXACT_AMBIG_DETECTION);\n  }\n  if (printTree || gui || psFile != null) {\n    parser.setBuildParseTree(true);\n  }\n  if (SLL) {\n    parser.getInterpreter().setPredictionMode(PredictionMode.SLL);\n  }\n  parser.setTokenStream(tokens);\n  parser.setTrace(trace);\n  try {\n    Method startRule=parserClass.getMethod(startRuleName);\n    ParserRuleContext tree=(ParserRuleContext)startRule.invoke(parser,(Object[])null);\n    if (printTree) {\n      System.out.println(tree.toStringTree(parser));\n    }\n    if (gui) {\n      Trees.inspect(tree,parser);\n    }\n    if (psFile != null) {\n      Trees.save(tree,parser,psFile);\n    }\n  }\n catch (  NoSuchMethodException nsme) {\n    System.err.println(\"No method for rule \" + startRuleName + \" or it has arguments\");\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 232,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 210,
        "startColumnNumber" : 5,
        "endLineNumber" : 210,
        "endColumnNumber" : 51
      },
      "nodeContext" : "System.out.println(tree.toStringTree(parser));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.io.PrintStream"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 179,
    "startColumnNumber" : 6,
    "endLineNumber" : 179,
    "endColumnNumber" : 16
  }, {
    "charLength" : 10,
    "startLineNumber" : 182,
    "startColumnNumber" : 6,
    "endLineNumber" : 182,
    "endColumnNumber" : 16
  }, {
    "charLength" : 10,
    "startLineNumber" : 210,
    "startColumnNumber" : 5,
    "endLineNumber" : 210,
    "endColumnNumber" : 15
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 6
  } ]
}