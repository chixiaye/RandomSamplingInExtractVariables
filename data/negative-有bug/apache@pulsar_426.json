{
  "id" : 426,
  "expression" : "clientAuthData()",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/SinksBase.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "clientAuthData()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 155,
      "startColumnNumber" : 55,
      "endLineNumber" : 155,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 2,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 155,
        "startLineNumber" : 154,
        "startColumnNumber" : 8,
        "endLineNumber" : 155,
        "endColumnNumber" : 72
      },
      "nodeContext" : "sinks().registerSink(tenant,namespace,sinkName,uploadedInputStream,fileDetail,sinkPkgUrl,sinkConfig,clientAppId(),clientAuthData())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 156,
        "startLineNumber" : 154,
        "startColumnNumber" : 8,
        "endLineNumber" : 155,
        "endColumnNumber" : 73
      },
      "nodeContext" : "sinks().registerSink(tenant,namespace,sinkName,uploadedInputStream,fileDetail,sinkPkgUrl,sinkConfig,clientAppId(),clientAuthData());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 172,
        "startLineNumber" : 153,
        "startColumnNumber" : 87,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  sinks().registerSink(tenant,namespace,sinkName,uploadedInputStream,fileDetail,sinkPkgUrl,sinkConfig,clientAppId(),clientAuthData());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8470,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 156,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@POST @ApiOperation(value=\"Creates a new Pulsar Sink in cluster mode\") @ApiResponses(value={@ApiResponse(code=400,message=\"Invalid request (The Pulsar Sink already exists, etc.)\"),@ApiResponse(code=200,message=\"Pulsar Sink successfully created\"),@ApiResponse(code=500,message=\"Internal server error (failed to authorize,\" + \" failed to get tenant data, failed to process package, etc.)\"),@ApiResponse(code=401,message=\"Client is not authorized to perform operation\"),@ApiResponse(code=503,message=\"Function worker service is now initializing. Please try again later.\")}) @Path(\"/{tenant}/{namespace}/{sinkName}\") @Consumes(MediaType.MULTIPART_FORM_DATA) public void registerSink(@ApiParam(value=\"The tenant of a Pulsar Sink\") final @PathParam(\"tenant\") String tenant,@ApiParam(value=\"The namespace of a Pulsar Sink\") final @PathParam(\"namespace\") String namespace,@ApiParam(value=\"The name of a Pulsar Sink\") final @PathParam(\"sinkName\") String sinkName,final @FormDataParam(\"data\") InputStream uploadedInputStream,final @FormDataParam(\"data\") FormDataContentDisposition fileDetail,final @FormDataParam(\"url\") String sinkPkgUrl,@ApiParam(value=\"A JSON value presenting config payload of a Pulsar Sink.\" + \" All available configuration options are:\\n\" + \"- **classname**\\n\"+ \"   The class name of a Pulsar Sink if\"+ \" archive is file-url-path (file://)\\n\"+ \"- **sourceSubscriptionName**\\n\"+ \"   Pulsar source subscription name if\"+ \" user wants a specific\\n\"+ \"   subscription-name for input-topic consumer\\n\"+ \"- **inputs**\\n\"+ \"   The input topic or topics of\"+ \" a Pulsar Sink (specified as a JSON array)\\n\"+ \"- **topicsPattern**\\n\"+ \"   TopicsPattern to consume from list of topics under a namespace that \"+ \"   match the pattern. [input] and [topicsPattern] are mutually \"+ \"   exclusive. Add SerDe class name for a pattern in customSerdeInputs \"+ \"   (supported for java fun only)\"+ \"- **topicToSerdeClassName**\\n\"+ \"   The map of input topics to SerDe class names\"+ \" (specified as a JSON object)\\n\"+ \"- **topicToSchemaType**\\n\"+ \"   The map of input topics to Schema types or class names\"+ \" (specified as a JSON object)\\n\"+ \"- **inputSpecs**\\n\"+ \"   The map of input topics to its consumer configuration,\"+ \" each configuration has schema of \"+ \"   {\\\"schemaType\\\": \\\"type-x\\\", \\\"serdeClassName\\\": \\\"name-x\\\",\"+ \" \\\"isRegexPattern\\\": true, \\\"receiverQueueSize\\\": 5}\\n\"+ \"- **configs**\\n\"+ \"   The map of configs (specified as a JSON object)\\n\"+ \"- **secrets**\\n\"+ \"   a map of secretName(aka how the secret is going to be \\n\"+ \"   accessed in the function via context) to an object that \\n\"+ \"   encapsulates how the secret is fetched by the underlying \\n\"+ \"   secrets provider. The type of an value here can be found by the \\n\"+ \"   SecretProviderConfigurator.getSecretObjectType() method.\"+ \" (specified as a JSON object)\\n\"+ \"- **parallelism**\\n\"+ \"   The parallelism factor of a Pulsar Sink\"+ \" (i.e. the number of a Pulsar Sink instances to run \\n\"+ \"- **processingGuarantees**\\n\"+ \"   The processing guarantees (aka delivery semantics) applied to\"+ \" the Pulsar Sink. Possible Values: \\\"ATLEAST_ONCE\\\",\"+ \" \\\"ATMOST_ONCE\\\", \\\"EFFECTIVELY_ONCE\\\"\\n\"+ \"- **retainOrdering**\\n\"+ \"   Boolean denotes whether the Pulsar Sink\"+ \" consumes and processes messages in order\\n\"+ \"- **resources**\\n\"+ \"   {\\\"cpu\\\": 1, \\\"ram\\\": 2, \\\"disk\\\": 3} The CPU (in cores),\"+ \" RAM (in bytes) and disk (in bytes) that needs to be \"+ \"allocated per Pulsar Sink instance \"+ \"(applicable only to Docker runtime)\\n\"+ \"- **autoAck**\\n\"+ \"   Boolean denotes whether or not the framework\"+ \" will automatically acknowledge messages\\n\"+ \"- **timeoutMs**\\n\"+ \"   Long denotes the message timeout in milliseconds\\n\"+ \"- **cleanupSubscription**\\n\"+ \"   Boolean denotes whether the subscriptions the functions\"+ \" created/used should be deleted when the functions is deleted\\n\"+ \"- **runtimeFlags**\\n\"+ \"   Any flags that you want to pass to the runtime as a single string\\n\",examples=@Example(value=@ExampleProperty(mediaType=MediaType.APPLICATION_JSON,value=\"{\\n\" + \"\\t\\\"classname\\\": \\\"org.example.MySinkTest\\\",\\n\" + \"\\t\\\"inputs\\\": [\"+ \"\\\"persistent://public/default/sink-input\\\"],\\n\"+ \"\\t\\\"processingGuarantees\\\": \\\"EFFECTIVELY_ONCE\\\",\\n\"+ \"\\t\\\"parallelism\\\": 10\\n\"+ \"}\"))) final @FormDataParam(\"sinkConfig\") SinkConfig sinkConfig){\n  sinks().registerSink(tenant,namespace,sinkName,uploadedInputStream,fileDetail,sinkPkgUrl,sinkConfig,clientAppId(),clientAuthData());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 244,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 155,
        "startLineNumber" : 154,
        "startColumnNumber" : 8,
        "endLineNumber" : 155,
        "endColumnNumber" : 72
      },
      "nodeContext" : "sinks().registerSink(tenant,namespace,sinkName,uploadedInputStream,fileDetail,sinkPkgUrl,sinkConfig,clientAppId(),clientAuthData())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.pulsar.broker.authentication.AuthenticationDataHttps"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 155,
    "startColumnNumber" : 55,
    "endLineNumber" : 155,
    "endColumnNumber" : 71
  } ],
  "layoutRelationDataList" : [ ]
}