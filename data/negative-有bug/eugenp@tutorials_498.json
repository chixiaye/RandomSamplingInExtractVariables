{
  "id" : 498,
  "expression" : "(!existingUser.get().getId().equals(userDTO.getId()))",
  "projectName" : "eugenp@tutorials",
  "commitID" : "3c663eceea2087a494308592676e46b2a6d952f6",
  "filePath" : "/jhipster-modules/jhipster-uaa/uaa/src/main/java/com/baeldung/jhipster/uaa/web/rest/UserResource.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(!existingUser.get().getId().equals(userDTO.getId()))",
    "nodeType" : "ParenthesizedExpression",
    "nodePosition" : {
      "charLength" : 53,
      "startLineNumber" : 124,
      "startColumnNumber" : 40,
      "endLineNumber" : 124,
      "endColumnNumber" : 93
    },
    "astNodeNumber" : 12,
    "astHeight" : 6,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 124,
        "startColumnNumber" : 12,
        "endLineNumber" : 124,
        "endColumnNumber" : 93
      },
      "nodeContext" : "existingUser.isPresent() && (!existingUser.get().getId().equals(userDTO.getId()))",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 151,
        "startLineNumber" : 124,
        "startColumnNumber" : 8,
        "endLineNumber" : 126,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (existingUser.isPresent() && (!existingUser.get().getId().equals(userDTO.getId()))) {\n  throw new EmailAlreadyUsedException();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 801,
        "startLineNumber" : 121,
        "startColumnNumber" : 83,
        "endLineNumber" : 135,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  log.debug(\"REST request to update User : {}\",userDTO);\n  Optional<User> existingUser=userRepository.findOneByEmailIgnoreCase(userDTO.getEmail());\n  if (existingUser.isPresent() && (!existingUser.get().getId().equals(userDTO.getId()))) {\n    throw new EmailAlreadyUsedException();\n  }\n  existingUser=userRepository.findOneByLogin(userDTO.getLogin().toLowerCase());\n  if (existingUser.isPresent() && (!existingUser.get().getId().equals(userDTO.getId()))) {\n    throw new LoginAlreadyUsedException();\n  }\n  Optional<UserDTO> updatedUser=userService.updateUser(userDTO);\n  return ResponseUtil.wrapOrNotFound(updatedUser,HeaderUtil.createAlert(\"userManagement.updated\",userDTO.getLogin()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 100,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1373,
        "startLineNumber" : 110,
        "startColumnNumber" : 4,
        "endLineNumber" : 135,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * PUT /users : Updates an existing User.\n * @param userDTO the user to update\n * @return the ResponseEntity with status 200 (OK) and with body the updated user\n * @throws EmailAlreadyUsedException 400 (Bad Request) if the email is already in use\n * @throws LoginAlreadyUsedException 400 (Bad Request) if the login is already in use\n */\n@PutMapping(\"/users\") @Timed @PreAuthorize(\"hasRole(\\\"\" + AuthoritiesConstants.ADMIN + \"\\\")\") public ResponseEntity<UserDTO> updateUser(@Valid @RequestBody UserDTO userDTO){\n  log.debug(\"REST request to update User : {}\",userDTO);\n  Optional<User> existingUser=userRepository.findOneByEmailIgnoreCase(userDTO.getEmail());\n  if (existingUser.isPresent() && (!existingUser.get().getId().equals(userDTO.getId()))) {\n    throw new EmailAlreadyUsedException();\n  }\n  existingUser=userRepository.findOneByLogin(userDTO.getLogin().toLowerCase());\n  if (existingUser.isPresent() && (!existingUser.get().getId().equals(userDTO.getId()))) {\n    throw new LoginAlreadyUsedException();\n  }\n  Optional<UserDTO> updatedUser=userService.updateUser(userDTO);\n  return ResponseUtil.wrapOrNotFound(updatedUser,HeaderUtil.createAlert(\"userManagement.updated\",userDTO.getLogin()));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 130,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 124,
        "startColumnNumber" : 12,
        "endLineNumber" : 124,
        "endColumnNumber" : 93
      },
      "nodeContext" : "existingUser.isPresent() && (!existingUser.get().getId().equals(userDTO.getId()))",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 16,
      "astHeight" : 7
    },
    "tokenLength" : 6,
    "type" : "boolean"
  }, {
    "nodeContext" : "(!existingUser.get().getId().equals(userDTO.getId()))",
    "nodeType" : "ParenthesizedExpression",
    "nodePosition" : {
      "charLength" : 53,
      "startLineNumber" : 128,
      "startColumnNumber" : 40,
      "endLineNumber" : 128,
      "endColumnNumber" : 93
    },
    "astNodeNumber" : 12,
    "astHeight" : 6,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 128,
        "startColumnNumber" : 12,
        "endLineNumber" : 128,
        "endColumnNumber" : 93
      },
      "nodeContext" : "existingUser.isPresent() && (!existingUser.get().getId().equals(userDTO.getId()))",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 151,
        "startLineNumber" : 128,
        "startColumnNumber" : 8,
        "endLineNumber" : 130,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (existingUser.isPresent() && (!existingUser.get().getId().equals(userDTO.getId()))) {\n  throw new LoginAlreadyUsedException();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 801,
        "startLineNumber" : 121,
        "startColumnNumber" : 83,
        "endLineNumber" : 135,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  log.debug(\"REST request to update User : {}\",userDTO);\n  Optional<User> existingUser=userRepository.findOneByEmailIgnoreCase(userDTO.getEmail());\n  if (existingUser.isPresent() && (!existingUser.get().getId().equals(userDTO.getId()))) {\n    throw new EmailAlreadyUsedException();\n  }\n  existingUser=userRepository.findOneByLogin(userDTO.getLogin().toLowerCase());\n  if (existingUser.isPresent() && (!existingUser.get().getId().equals(userDTO.getId()))) {\n    throw new LoginAlreadyUsedException();\n  }\n  Optional<UserDTO> updatedUser=userService.updateUser(userDTO);\n  return ResponseUtil.wrapOrNotFound(updatedUser,HeaderUtil.createAlert(\"userManagement.updated\",userDTO.getLogin()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 100,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1373,
        "startLineNumber" : 110,
        "startColumnNumber" : 4,
        "endLineNumber" : 135,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * PUT /users : Updates an existing User.\n * @param userDTO the user to update\n * @return the ResponseEntity with status 200 (OK) and with body the updated user\n * @throws EmailAlreadyUsedException 400 (Bad Request) if the email is already in use\n * @throws LoginAlreadyUsedException 400 (Bad Request) if the login is already in use\n */\n@PutMapping(\"/users\") @Timed @PreAuthorize(\"hasRole(\\\"\" + AuthoritiesConstants.ADMIN + \"\\\")\") public ResponseEntity<UserDTO> updateUser(@Valid @RequestBody UserDTO userDTO){\n  log.debug(\"REST request to update User : {}\",userDTO);\n  Optional<User> existingUser=userRepository.findOneByEmailIgnoreCase(userDTO.getEmail());\n  if (existingUser.isPresent() && (!existingUser.get().getId().equals(userDTO.getId()))) {\n    throw new EmailAlreadyUsedException();\n  }\n  existingUser=userRepository.findOneByLogin(userDTO.getLogin().toLowerCase());\n  if (existingUser.isPresent() && (!existingUser.get().getId().equals(userDTO.getId()))) {\n    throw new LoginAlreadyUsedException();\n  }\n  Optional<UserDTO> updatedUser=userService.updateUser(userDTO);\n  return ResponseUtil.wrapOrNotFound(updatedUser,HeaderUtil.createAlert(\"userManagement.updated\",userDTO.getLogin()));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 130,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 128,
        "startColumnNumber" : 12,
        "endLineNumber" : 128,
        "endColumnNumber" : 93
      },
      "nodeContext" : "existingUser.isPresent() && (!existingUser.get().getId().equals(userDTO.getId()))",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 16,
      "astHeight" : 7
    },
    "tokenLength" : 6,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 53,
    "startLineNumber" : 124,
    "startColumnNumber" : 40,
    "endLineNumber" : 124,
    "endColumnNumber" : 93
  }, {
    "charLength" : 53,
    "startLineNumber" : 128,
    "startColumnNumber" : 40,
    "endLineNumber" : 128,
    "endColumnNumber" : 93
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}