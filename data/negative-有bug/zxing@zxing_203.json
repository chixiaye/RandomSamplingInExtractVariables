{
  "id" : 203,
  "expression" : "code",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/core/src/main/java/com/google/zxing/oned/CodaBarWriter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "code",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 124,
      "startColumnNumber" : 14,
      "endLineNumber" : 124,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 124,
        "startColumnNumber" : 14,
        "endLineNumber" : 124,
        "endColumnNumber" : 31
      },
      "nodeContext" : "code >> (6 - bit)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 124,
        "startColumnNumber" : 13,
        "endLineNumber" : 124,
        "endColumnNumber" : 32
      },
      "nodeContext" : "(code >> (6 - bit))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 124,
        "startColumnNumber" : 13,
        "endLineNumber" : 124,
        "endColumnNumber" : 36
      },
      "nodeContext" : "(code >> (6 - bit)) & 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 124,
        "startColumnNumber" : 12,
        "endLineNumber" : 124,
        "endColumnNumber" : 37
      },
      "nodeContext" : "((code >> (6 - bit)) & 1)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 10,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 124,
        "startColumnNumber" : 12,
        "endLineNumber" : 124,
        "endColumnNumber" : 42
      },
      "nodeContext" : "((code >> (6 - bit)) & 1) == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 124,
        "startColumnNumber" : 12,
        "endLineNumber" : 124,
        "endColumnNumber" : 58
      },
      "nodeContext" : "((code >> (6 - bit)) & 1) == 0 || counter == 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 16,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 192,
        "startLineNumber" : 124,
        "startColumnNumber" : 8,
        "endLineNumber" : 130,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (((code >> (6 - bit)) & 1) == 0 || counter == 1) {\n  color=!color;\n  bit++;\n  counter=0;\n}\n else {\n  counter++;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 34,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 304,
        "startLineNumber" : 121,
        "startColumnNumber" : 22,
        "endLineNumber" : 131,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  result[position]=color;\n  position++;\n  if (((code >> (6 - bit)) & 1) == 0 || counter == 1) {\n    color=!color;\n    bit++;\n    counter=0;\n  }\n else {\n    counter++;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 44,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 320,
        "startLineNumber" : 121,
        "startColumnNumber" : 6,
        "endLineNumber" : 131,
        "endColumnNumber" : 7
      },
      "nodeContext" : "while (bit < 7) {\n  result[position]=color;\n  position++;\n  if (((code >> (6 - bit)) & 1) == 0 || counter == 1) {\n    color=!color;\n    bit++;\n    counter=0;\n  }\n else {\n    counter++;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 48,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1280,
        "startLineNumber" : 91,
        "startColumnNumber" : 60,
        "endLineNumber" : 136,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  char c=Character.toUpperCase(contents.charAt(index));\n  if (index == 0 || index == contents.length() - 1) {\nswitch (c) {\ncase 'T':      c='A';\n    break;\ncase 'N':  c='B';\nbreak;\ncase '*':c='C';\nbreak;\ncase 'E':c='D';\nbreak;\n}\n}\nint code=0;\nfor (int i=0; i < CodaBarReader.ALPHABET.length; i++) {\nif (c == CodaBarReader.ALPHABET[i]) {\ncode=CodaBarReader.CHARACTER_ENCODINGS[i];\nbreak;\n}\n}\nboolean color=true;\nint counter=0;\nint bit=0;\nwhile (bit < 7) {\nresult[position]=color;\nposition++;\nif (((code >> (6 - bit)) & 1) == 0 || counter == 1) {\ncolor=!color;\nbit++;\ncounter=0;\n}\n else {\ncounter++;\n}\n}\nif (index < contents.length() - 1) {\nresult[position]=false;\nposition++;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 175,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1336,
        "startLineNumber" : 91,
        "startColumnNumber" : 4,
        "endLineNumber" : 136,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int index=0; index < contents.length(); index++) {\n  char c=Character.toUpperCase(contents.charAt(index));\n  if (index == 0 || index == contents.length() - 1) {\nswitch (c) {\ncase 'T':      c='A';\n    break;\ncase 'N':  c='B';\nbreak;\ncase '*':c='C';\nbreak;\ncase 'E':c='D';\nbreak;\n}\n}\nint code=0;\nfor (int i=0; i < CodaBarReader.ALPHABET.length; i++) {\nif (c == CodaBarReader.ALPHABET[i]) {\ncode=CodaBarReader.CHARACTER_ENCODINGS[i];\nbreak;\n}\n}\nboolean color=true;\nint counter=0;\nint bit=0;\nwhile (bit < 7) {\nresult[position]=color;\nposition++;\nif (((code >> (6 - bit)) & 1) == 0 || counter == 1) {\ncolor=!color;\nbit++;\ncounter=0;\n}\n else {\ncounter++;\n}\n}\nif (index < contents.length() - 1) {\nresult[position]=false;\nposition++;\n}\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 188,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3581,
        "startLineNumber" : 42,
        "startColumnNumber" : 43,
        "endLineNumber" : 138,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (contents.length() < 2) {\n    contents=DEFAULT_GUARD + contents + DEFAULT_GUARD;\n  }\n else {\n    char firstChar=Character.toUpperCase(contents.charAt(0));\n    char lastChar=Character.toUpperCase(contents.charAt(contents.length() - 1));\n    boolean startsNormal=CodaBarReader.arrayContains(START_END_CHARS,firstChar);\n    boolean endsNormal=CodaBarReader.arrayContains(START_END_CHARS,lastChar);\n    boolean startsAlt=CodaBarReader.arrayContains(ALT_START_END_CHARS,firstChar);\n    boolean endsAlt=CodaBarReader.arrayContains(ALT_START_END_CHARS,lastChar);\n    if (startsNormal) {\n      if (!endsNormal) {\n        throw new IllegalArgumentException(\"Invalid start/end guards: \" + contents);\n      }\n    }\n else     if (startsAlt) {\n      if (!endsAlt) {\n        throw new IllegalArgumentException(\"Invalid start/end guards: \" + contents);\n      }\n    }\n else {\n      if (endsNormal || endsAlt) {\n        throw new IllegalArgumentException(\"Invalid start/end guards: \" + contents);\n      }\n      contents=DEFAULT_GUARD + contents + DEFAULT_GUARD;\n    }\n  }\n  int resultLength=20;\n  for (int i=1; i < contents.length() - 1; i++) {\n    if (Character.isDigit(contents.charAt(i)) || contents.charAt(i) == '-' || contents.charAt(i) == '$') {\n      resultLength+=9;\n    }\n else     if (CodaBarReader.arrayContains(CHARS_WHICH_ARE_TEN_LENGTH_EACH_AFTER_DECODED,contents.charAt(i))) {\n      resultLength+=10;\n    }\n else {\n      throw new IllegalArgumentException(\"Cannot encode : '\" + contents.charAt(i) + '\\'');\n    }\n  }\n  resultLength+=contents.length() - 1;\n  boolean[] result=new boolean[resultLength];\n  int position=0;\n  for (int index=0; index < contents.length(); index++) {\n    char c=Character.toUpperCase(contents.charAt(index));\n    if (index == 0 || index == contents.length() - 1) {\nswitch (c) {\ncase 'T':        c='A';\n      break;\ncase 'N':    c='B';\n  break;\ncase '*':c='C';\nbreak;\ncase 'E':c='D';\nbreak;\n}\n}\nint code=0;\nfor (int i=0; i < CodaBarReader.ALPHABET.length; i++) {\nif (c == CodaBarReader.ALPHABET[i]) {\ncode=CodaBarReader.CHARACTER_ENCODINGS[i];\nbreak;\n}\n}\nboolean color=true;\nint counter=0;\nint bit=0;\nwhile (bit < 7) {\nresult[position]=color;\nposition++;\nif (((code >> (6 - bit)) & 1) == 0 || counter == 1) {\ncolor=!color;\nbit++;\ncounter=0;\n}\n else {\ncounter++;\n}\n}\nif (index < contents.length() - 1) {\nresult[position]=false;\nposition++;\n}\n}\nreturn result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 414,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3635,
        "startLineNumber" : 41,
        "startColumnNumber" : 2,
        "endLineNumber" : 138,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public boolean[] encode(String contents){\n  if (contents.length() < 2) {\n    contents=DEFAULT_GUARD + contents + DEFAULT_GUARD;\n  }\n else {\n    char firstChar=Character.toUpperCase(contents.charAt(0));\n    char lastChar=Character.toUpperCase(contents.charAt(contents.length() - 1));\n    boolean startsNormal=CodaBarReader.arrayContains(START_END_CHARS,firstChar);\n    boolean endsNormal=CodaBarReader.arrayContains(START_END_CHARS,lastChar);\n    boolean startsAlt=CodaBarReader.arrayContains(ALT_START_END_CHARS,firstChar);\n    boolean endsAlt=CodaBarReader.arrayContains(ALT_START_END_CHARS,lastChar);\n    if (startsNormal) {\n      if (!endsNormal) {\n        throw new IllegalArgumentException(\"Invalid start/end guards: \" + contents);\n      }\n    }\n else     if (startsAlt) {\n      if (!endsAlt) {\n        throw new IllegalArgumentException(\"Invalid start/end guards: \" + contents);\n      }\n    }\n else {\n      if (endsNormal || endsAlt) {\n        throw new IllegalArgumentException(\"Invalid start/end guards: \" + contents);\n      }\n      contents=DEFAULT_GUARD + contents + DEFAULT_GUARD;\n    }\n  }\n  int resultLength=20;\n  for (int i=1; i < contents.length() - 1; i++) {\n    if (Character.isDigit(contents.charAt(i)) || contents.charAt(i) == '-' || contents.charAt(i) == '$') {\n      resultLength+=9;\n    }\n else     if (CodaBarReader.arrayContains(CHARS_WHICH_ARE_TEN_LENGTH_EACH_AFTER_DECODED,contents.charAt(i))) {\n      resultLength+=10;\n    }\n else {\n      throw new IllegalArgumentException(\"Cannot encode : '\" + contents.charAt(i) + '\\'');\n    }\n  }\n  resultLength+=contents.length() - 1;\n  boolean[] result=new boolean[resultLength];\n  int position=0;\n  for (int index=0; index < contents.length(); index++) {\n    char c=Character.toUpperCase(contents.charAt(index));\n    if (index == 0 || index == contents.length() - 1) {\nswitch (c) {\ncase 'T':        c='A';\n      break;\ncase 'N':    c='B';\n  break;\ncase '*':c='C';\nbreak;\ncase 'E':c='D';\nbreak;\n}\n}\nint code=0;\nfor (int i=0; i < CodaBarReader.ALPHABET.length; i++) {\nif (c == CodaBarReader.ALPHABET[i]) {\ncode=CodaBarReader.CHARACTER_ENCODINGS[i];\nbreak;\n}\n}\nboolean color=true;\nint counter=0;\nint bit=0;\nwhile (bit < 7) {\nresult[position]=color;\nposition++;\nif (((code >> (6 - bit)) & 1) == 0 || counter == 1) {\ncolor=!color;\nbit++;\ncounter=0;\n}\n else {\ncounter++;\n}\n}\nif (index < contents.length() - 1) {\nresult[position]=false;\nposition++;\n}\n}\nreturn result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 426,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 124,
        "startColumnNumber" : 12,
        "endLineNumber" : 124,
        "endColumnNumber" : 58
      },
      "nodeContext" : "((code >> (6 - bit)) & 1) == 0 || counter == 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 16,
      "astHeight" : 9
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 124,
    "startColumnNumber" : 14,
    "endLineNumber" : 124,
    "endColumnNumber" : 18
  } ],
  "layoutRelationDataList" : [ ]
}