{
  "id" : 34,
  "expression" : "Level.FINER",
  "projectName" : "jenkinsci@jenkins",
  "commitID" : "c44fa7f4cf769257844d562353a579a198ea517a",
  "filePath" : "/core/src/main/java/jenkins/util/ProgressiveRendering.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Level.FINER",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 181,
      "startColumnNumber" : 16,
      "endLineNumber" : 181,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 181,
        "startColumnNumber" : 8,
        "endLineNumber" : 181,
        "endColumnNumber" : 98
      },
      "nodeContext" : "LOG.log(Level.FINER,\"mocking ancestors {0} using {1}\",new Object[]{ancestors,getters})",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 181,
        "startColumnNumber" : 8,
        "endLineNumber" : 181,
        "endColumnNumber" : 99
      },
      "nodeContext" : "LOG.log(Level.FINER,\"mocking ancestors {0} using {1}\",new Object[]{ancestors,getters});\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1905,
        "startLineNumber" : 162,
        "startColumnNumber" : 51,
        "endLineNumber" : 193,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  RequestImpl currentRequest=(RequestImpl)Stapler.getCurrentRequest();\n  HttpServletRequest original=(HttpServletRequest)currentRequest.getRequest();\n  final Map<String,Object> getters=new HashMap<>();\n  for (  Method method : HttpServletRequest.class.getMethods()) {\n    String m=method.getName();\n    if ((m.startsWith(\"get\") || m.startsWith(\"is\")) && method.getParameterTypes().length == 0) {\n      Class<?> type=method.getReturnType();\n      if (type.isPrimitive() || type == String.class || type == Locale.class) {\n        try {\n          getters.put(m,method.invoke(original));\n        }\n catch (        Exception x) {\n          LOG.log(Level.WARNING,\"cannot mock Stapler request \" + method,x);\n        }\n      }\n    }\n  }\n  List ancestors=currentRequest.ancestors;\n  LOG.log(Level.FINER,\"mocking ancestors {0} using {1}\",new Object[]{ancestors,getters});\n  TokenList tokens=currentRequest.tokens;\n  return new RequestImpl(Stapler.getCurrent(),(HttpServletRequest)Proxy.newProxyInstance(ProgressiveRendering.class.getClassLoader(),new Class<?>[]{HttpServletRequest.class},new InvocationHandler(){\n    @Override public Object invoke(    Object proxy,    Method method,    Object[] args) throws Throwable {\n      String m=method.getName();\n      if (getters.containsKey(m)) {\n        return getters.get(m);\n      }\n else {\n        throw new UnsupportedOperationException(m);\n      }\n    }\n  }\n),ancestors,tokens);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 248,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2381,
        "startLineNumber" : 157,
        "startColumnNumber" : 4,
        "endLineNumber" : 193,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Copies important fields from the current HTTP request and makes them available during  {@link #compute}. This is necessary because some model methods such as  {@link AbstractItem#getUrl} behave differently when called from a request.\n */\n@java.lang.SuppressWarnings({\"rawtypes\",\"unchecked\"}) private static RequestImpl createMockRequest(){\n  RequestImpl currentRequest=(RequestImpl)Stapler.getCurrentRequest();\n  HttpServletRequest original=(HttpServletRequest)currentRequest.getRequest();\n  final Map<String,Object> getters=new HashMap<>();\n  for (  Method method : HttpServletRequest.class.getMethods()) {\n    String m=method.getName();\n    if ((m.startsWith(\"get\") || m.startsWith(\"is\")) && method.getParameterTypes().length == 0) {\n      Class<?> type=method.getReturnType();\n      if (type.isPrimitive() || type == String.class || type == Locale.class) {\n        try {\n          getters.put(m,method.invoke(original));\n        }\n catch (        Exception x) {\n          LOG.log(Level.WARNING,\"cannot mock Stapler request \" + method,x);\n        }\n      }\n    }\n  }\n  List ancestors=currentRequest.ancestors;\n  LOG.log(Level.FINER,\"mocking ancestors {0} using {1}\",new Object[]{ancestors,getters});\n  TokenList tokens=currentRequest.tokens;\n  return new RequestImpl(Stapler.getCurrent(),(HttpServletRequest)Proxy.newProxyInstance(ProgressiveRendering.class.getClassLoader(),new Class<?>[]{HttpServletRequest.class},new InvocationHandler(){\n    @Override public Object invoke(    Object proxy,    Method method,    Object[] args) throws Throwable {\n      String m=method.getName();\n      if (getters.containsKey(m)) {\n        return getters.get(m);\n      }\n else {\n        throw new UnsupportedOperationException(m);\n      }\n    }\n  }\n),ancestors,tokens);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 264,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 181,
        "startColumnNumber" : 8,
        "endLineNumber" : 181,
        "endColumnNumber" : 99
      },
      "nodeContext" : "LOG.log(Level.FINER,\"mocking ancestors {0} using {1}\",new Object[]{ancestors,getters});\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "java.util.logging.Level"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 181,
    "startColumnNumber" : 16,
    "endLineNumber" : 181,
    "endColumnNumber" : 27
  } ],
  "layoutRelationDataList" : [ ]
}