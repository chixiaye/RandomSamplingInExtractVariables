{
  "id" : 414,
  "expression" : "5",
  "projectName" : "Netflix@Hystrix",
  "commitID" : "45d7875c3e51f6d6152b667db31e4fe435711917",
  "filePath" : "/hystrix-core/src/test/java/com/netflix/hystrix/HystrixCircuitBreakerTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "5",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 540,
      "startColumnNumber" : 28,
      "endLineNumber" : 540,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 540,
        "startColumnNumber" : 16,
        "endLineNumber" : 540,
        "endColumnNumber" : 29
      },
      "nodeContext" : "lowVolume=5",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 540,
        "startColumnNumber" : 12,
        "endLineNumber" : 540,
        "endColumnNumber" : 30
      },
      "nodeContext" : "int lowVolume=5;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 979,
        "startLineNumber" : 538,
        "startColumnNumber" : 12,
        "endLineNumber" : 562,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int sleepWindow=200;\n  int lowVolume=5;\n  HystrixCommand<Boolean> cmd1=new FailureCommand(key,60,sleepWindow,lowVolume);\n  HystrixCircuitBreaker cb=cmd1.circuitBreaker;\n  assertTrue(cb.allowRequest());\n  assertFalse(cb.isOpen());\n  cmd1.execute();\n  HystrixCommand<Boolean> cmd2=new FailureCommand(key,1,sleepWindow,lowVolume);\n  cmd2.execute();\n  HystrixCommand<Boolean> cmd3=new FailureCommand(key,1,sleepWindow,lowVolume);\n  cmd3.execute();\n  HystrixCommand<Boolean> cmd4=new FailureCommand(key,1,sleepWindow,lowVolume);\n  cmd4.execute();\n  Thread.sleep(100);\n  assertTrue(cb.allowRequest());\n  assertFalse(cb.isOpen());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 124,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1103,
        "startLineNumber" : 538,
        "startColumnNumber" : 8,
        "endLineNumber" : 565,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  int sleepWindow=200;\n  int lowVolume=5;\n  HystrixCommand<Boolean> cmd1=new FailureCommand(key,60,sleepWindow,lowVolume);\n  HystrixCircuitBreaker cb=cmd1.circuitBreaker;\n  assertTrue(cb.allowRequest());\n  assertFalse(cb.isOpen());\n  cmd1.execute();\n  HystrixCommand<Boolean> cmd2=new FailureCommand(key,1,sleepWindow,lowVolume);\n  cmd2.execute();\n  HystrixCommand<Boolean> cmd3=new FailureCommand(key,1,sleepWindow,lowVolume);\n  cmd3.execute();\n  HystrixCommand<Boolean> cmd4=new FailureCommand(key,1,sleepWindow,lowVolume);\n  cmd4.execute();\n  Thread.sleep(100);\n  assertTrue(cb.allowRequest());\n  assertFalse(cb.isOpen());\n}\n catch (Exception e) {\n  e.printStackTrace();\n  fail(\"Error occurred: \" + e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 143,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1149,
        "startLineNumber" : 536,
        "startColumnNumber" : 50,
        "endLineNumber" : 566,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String key=\"cmd-I\";\n  try {\n    int sleepWindow=200;\n    int lowVolume=5;\n    HystrixCommand<Boolean> cmd1=new FailureCommand(key,60,sleepWindow,lowVolume);\n    HystrixCircuitBreaker cb=cmd1.circuitBreaker;\n    assertTrue(cb.allowRequest());\n    assertFalse(cb.isOpen());\n    cmd1.execute();\n    HystrixCommand<Boolean> cmd2=new FailureCommand(key,1,sleepWindow,lowVolume);\n    cmd2.execute();\n    HystrixCommand<Boolean> cmd3=new FailureCommand(key,1,sleepWindow,lowVolume);\n    cmd3.execute();\n    HystrixCommand<Boolean> cmd4=new FailureCommand(key,1,sleepWindow,lowVolume);\n    cmd4.execute();\n    Thread.sleep(100);\n    assertTrue(cb.allowRequest());\n    assertFalse(cb.isOpen());\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    fail(\"Error occurred: \" + e.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 150,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1398,
        "startLineNumber" : 531,
        "startColumnNumber" : 4,
        "endLineNumber" : 566,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * When volume of reporting during a statistical window is lower than a defined threshold the circuit will not trip regardless of whatever statistics are calculated.\n */\n@Test public void testLowVolumeDoesNotTripCircuit(){\n  String key=\"cmd-I\";\n  try {\n    int sleepWindow=200;\n    int lowVolume=5;\n    HystrixCommand<Boolean> cmd1=new FailureCommand(key,60,sleepWindow,lowVolume);\n    HystrixCircuitBreaker cb=cmd1.circuitBreaker;\n    assertTrue(cb.allowRequest());\n    assertFalse(cb.isOpen());\n    cmd1.execute();\n    HystrixCommand<Boolean> cmd2=new FailureCommand(key,1,sleepWindow,lowVolume);\n    cmd2.execute();\n    HystrixCommand<Boolean> cmd3=new FailureCommand(key,1,sleepWindow,lowVolume);\n    cmd3.execute();\n    HystrixCommand<Boolean> cmd4=new FailureCommand(key,1,sleepWindow,lowVolume);\n    cmd4.execute();\n    Thread.sleep(100);\n    assertTrue(cb.allowRequest());\n    assertFalse(cb.isOpen());\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    fail(\"Error occurred: \" + e.getMessage());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 157,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 540,
        "startColumnNumber" : 12,
        "endLineNumber" : 540,
        "endColumnNumber" : 30
      },
      "nodeContext" : "int lowVolume=5;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 540,
    "startColumnNumber" : 28,
    "endLineNumber" : 540,
    "endColumnNumber" : 29
  } ],
  "layoutRelationDataList" : [ ]
}