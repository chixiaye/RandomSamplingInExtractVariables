{
  "id" : 49,
  "expression" : "this.fromClass.isAssignableFrom(fromClass) && toClass.isAssignableFrom(this.toClass)",
  "projectName" : "bumptech@glide",
  "commitID" : "7d9c28ec2763e973775abd5c3e3c971728a48a56",
  "filePath" : "/library/src/main/java/com/bumptech/glide/load/resource/transcode/TranscoderRegistry.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "this.fromClass.isAssignableFrom(fromClass) && toClass.isAssignableFrom(this.toClass)",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 84,
      "startLineNumber" : 93,
      "startColumnNumber" : 13,
      "endLineNumber" : 93,
      "endColumnNumber" : 97
    },
    "astNodeNumber" : 13,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 93,
        "startColumnNumber" : 6,
        "endLineNumber" : 93,
        "endColumnNumber" : 98
      },
      "nodeContext" : "return this.fromClass.isAssignableFrom(fromClass) && toClass.isAssignableFrom(this.toClass);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 92,
        "startColumnNumber" : 65,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  return this.fromClass.isAssignableFrom(fromClass) && toClass.isAssignableFrom(this.toClass);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 525,
        "startLineNumber" : 86,
        "startColumnNumber" : 4,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * If we convert from a specific Drawable, we must get that specific Drawable class or a subclass of that Drawable. In contrast, if we we convert <em>to</em> a specific Drawable, we can fulfill requests for a more generic parent class (like Drawable). As a result, we check fromClass and toClass in different orders.\n */\npublic boolean handles(Class<?> fromClass,Class<?> toClass){\n  return this.fromClass.isAssignableFrom(fromClass) && toClass.isAssignableFrom(this.toClass);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 32,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 93,
        "startColumnNumber" : 6,
        "endLineNumber" : 93,
        "endColumnNumber" : 98
      },
      "nodeContext" : "return this.fromClass.isAssignableFrom(fromClass) && toClass.isAssignableFrom(this.toClass);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 7,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 84,
    "startLineNumber" : 93,
    "startColumnNumber" : 13,
    "endLineNumber" : 93,
    "endColumnNumber" : 97
  } ],
  "layoutRelationDataList" : [ ]
}