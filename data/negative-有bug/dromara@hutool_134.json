{
  "id" : 134,
  "expression" : "convert(value,Long.class,toStrFunc)",
  "projectName" : "dromara@hutool",
  "commitID" : "c99b48a4c4a6121eaad38ca9706953d7ce7c3a77",
  "filePath" : "/hutool-core/src/main/java/cn/hutool/core/convert/impl/NumberConverter.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "convert(value,Long.class,toStrFunc)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 37,
      "startLineNumber" : 128,
      "startColumnNumber" : 25,
      "endLineNumber" : 128,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 7,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 128,
        "startColumnNumber" : 16,
        "endLineNumber" : 128,
        "endColumnNumber" : 62
      },
      "nodeContext" : "number=convert(value,Long.class,toStrFunc)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 128,
        "startColumnNumber" : 3,
        "endLineNumber" : 128,
        "endColumnNumber" : 63
      },
      "nodeContext" : "final Number number=convert(value,Long.class,toStrFunc);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 218,
        "startLineNumber" : 127,
        "startColumnNumber" : 45,
        "endLineNumber" : 134,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final AtomicLong longValue=new AtomicLong();\n    longValue.set(number.longValue());\n    return longValue;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 37,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2036,
        "startLineNumber" : 127,
        "startColumnNumber" : 9,
        "endLineNumber" : 179,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (AtomicLong.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final AtomicLong longValue=new AtomicLong();\n    longValue.set(number.longValue());\n    return longValue;\n  }\n}\n else if (LongAdder.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final LongAdder longValue=new LongAdder();\n    longValue.add(number.longValue());\n    return longValue;\n  }\n}\n else if (Float.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).floatValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toFloatObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : Float.valueOf(valueStr);\n}\n else if (Double.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).doubleValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toDoubleObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : Double.valueOf(valueStr);\n}\n else if (DoubleAdder.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final DoubleAdder doubleAdder=new DoubleAdder();\n    doubleAdder.add(number.doubleValue());\n    return doubleAdder;\n  }\n}\n else if (BigDecimal.class == targetType) {\n  return toBigDecimal(value,toStrFunc);\n}\n else if (BigInteger.class == targetType) {\n  return toBigInteger(value,toStrFunc);\n}\n else if (Number.class == targetType) {\n  if (value instanceof Number) {\n    return (Number)value;\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toInteger((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseNumber(valueStr);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 321,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2685,
        "startLineNumber" : 113,
        "startColumnNumber" : 9,
        "endLineNumber" : 179,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (Long.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).longValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toLongObj((Boolean)value);\n  }\n else   if (value instanceof Date) {\n    return ((Date)value).getTime();\n  }\n else   if (value instanceof Calendar) {\n    return ((Calendar)value).getTimeInMillis();\n  }\n else   if (value instanceof TemporalAccessor) {\n    return DateUtil.toInstant((TemporalAccessor)value).toEpochMilli();\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseLong(valueStr);\n}\n else if (AtomicLong.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final AtomicLong longValue=new AtomicLong();\n    longValue.set(number.longValue());\n    return longValue;\n  }\n}\n else if (LongAdder.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final LongAdder longValue=new LongAdder();\n    longValue.add(number.longValue());\n    return longValue;\n  }\n}\n else if (Float.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).floatValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toFloatObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : Float.valueOf(valueStr);\n}\n else if (Double.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).doubleValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toDoubleObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : Double.valueOf(valueStr);\n}\n else if (DoubleAdder.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final DoubleAdder doubleAdder=new DoubleAdder();\n    doubleAdder.add(number.doubleValue());\n    return doubleAdder;\n  }\n}\n else if (BigDecimal.class == targetType) {\n  return toBigDecimal(value,toStrFunc);\n}\n else if (BigInteger.class == targetType) {\n  return toBigInteger(value,toStrFunc);\n}\n else if (Number.class == targetType) {\n  if (value instanceof Number) {\n    return (Number)value;\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toInteger((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseNumber(valueStr);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 422,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2953,
        "startLineNumber" : 106,
        "startColumnNumber" : 9,
        "endLineNumber" : 179,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (AtomicInteger.class == targetType) {\n  final Number number=convert(value,Integer.class,toStrFunc);\n  if (null != number) {\n    final AtomicInteger intValue=new AtomicInteger();\n    intValue.set(number.intValue());\n    return intValue;\n  }\n}\n else if (Long.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).longValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toLongObj((Boolean)value);\n  }\n else   if (value instanceof Date) {\n    return ((Date)value).getTime();\n  }\n else   if (value instanceof Calendar) {\n    return ((Calendar)value).getTimeInMillis();\n  }\n else   if (value instanceof TemporalAccessor) {\n    return DateUtil.toInstant((TemporalAccessor)value).toEpochMilli();\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseLong(valueStr);\n}\n else if (AtomicLong.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final AtomicLong longValue=new AtomicLong();\n    longValue.set(number.longValue());\n    return longValue;\n  }\n}\n else if (LongAdder.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final LongAdder longValue=new LongAdder();\n    longValue.add(number.longValue());\n    return longValue;\n  }\n}\n else if (Float.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).floatValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toFloatObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : Float.valueOf(valueStr);\n}\n else if (Double.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).doubleValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toDoubleObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : Double.valueOf(valueStr);\n}\n else if (DoubleAdder.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final DoubleAdder doubleAdder=new DoubleAdder();\n    doubleAdder.add(number.doubleValue());\n    return doubleAdder;\n  }\n}\n else if (BigDecimal.class == targetType) {\n  return toBigDecimal(value,toStrFunc);\n}\n else if (BigInteger.class == targetType) {\n  return toBigInteger(value,toStrFunc);\n}\n else if (Number.class == targetType) {\n  if (value instanceof Number) {\n    return (Number)value;\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toInteger((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseNumber(valueStr);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 465,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3621,
        "startLineNumber" : 92,
        "startColumnNumber" : 9,
        "endLineNumber" : 179,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (Integer.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).intValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toInteger((Boolean)value);\n  }\n else   if (value instanceof Date) {\n    return (int)((Date)value).getTime();\n  }\n else   if (value instanceof Calendar) {\n    return (int)((Calendar)value).getTimeInMillis();\n  }\n else   if (value instanceof TemporalAccessor) {\n    return (int)DateUtil.toInstant((TemporalAccessor)value).toEpochMilli();\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseInt(valueStr);\n}\n else if (AtomicInteger.class == targetType) {\n  final Number number=convert(value,Integer.class,toStrFunc);\n  if (null != number) {\n    final AtomicInteger intValue=new AtomicInteger();\n    intValue.set(number.intValue());\n    return intValue;\n  }\n}\n else if (Long.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).longValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toLongObj((Boolean)value);\n  }\n else   if (value instanceof Date) {\n    return ((Date)value).getTime();\n  }\n else   if (value instanceof Calendar) {\n    return ((Calendar)value).getTimeInMillis();\n  }\n else   if (value instanceof TemporalAccessor) {\n    return DateUtil.toInstant((TemporalAccessor)value).toEpochMilli();\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseLong(valueStr);\n}\n else if (AtomicLong.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final AtomicLong longValue=new AtomicLong();\n    longValue.set(number.longValue());\n    return longValue;\n  }\n}\n else if (LongAdder.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final LongAdder longValue=new LongAdder();\n    longValue.add(number.longValue());\n    return longValue;\n  }\n}\n else if (Float.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).floatValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toFloatObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : Float.valueOf(valueStr);\n}\n else if (Double.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).doubleValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toDoubleObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : Double.valueOf(valueStr);\n}\n else if (DoubleAdder.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final DoubleAdder doubleAdder=new DoubleAdder();\n    doubleAdder.add(number.doubleValue());\n    return doubleAdder;\n  }\n}\n else if (BigDecimal.class == targetType) {\n  return toBigDecimal(value,toStrFunc);\n}\n else if (BigInteger.class == targetType) {\n  return toBigInteger(value,toStrFunc);\n}\n else if (Number.class == targetType) {\n  if (value instanceof Number) {\n    return (Number)value;\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toInteger((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseNumber(valueStr);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 572,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3969,
        "startLineNumber" : 84,
        "startColumnNumber" : 9,
        "endLineNumber" : 179,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (Short.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).shortValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toShortObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : Short.valueOf(valueStr);\n}\n else if (Integer.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).intValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toInteger((Boolean)value);\n  }\n else   if (value instanceof Date) {\n    return (int)((Date)value).getTime();\n  }\n else   if (value instanceof Calendar) {\n    return (int)((Calendar)value).getTimeInMillis();\n  }\n else   if (value instanceof TemporalAccessor) {\n    return (int)DateUtil.toInstant((TemporalAccessor)value).toEpochMilli();\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseInt(valueStr);\n}\n else if (AtomicInteger.class == targetType) {\n  final Number number=convert(value,Integer.class,toStrFunc);\n  if (null != number) {\n    final AtomicInteger intValue=new AtomicInteger();\n    intValue.set(number.intValue());\n    return intValue;\n  }\n}\n else if (Long.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).longValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toLongObj((Boolean)value);\n  }\n else   if (value instanceof Date) {\n    return ((Date)value).getTime();\n  }\n else   if (value instanceof Calendar) {\n    return ((Calendar)value).getTimeInMillis();\n  }\n else   if (value instanceof TemporalAccessor) {\n    return DateUtil.toInstant((TemporalAccessor)value).toEpochMilli();\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseLong(valueStr);\n}\n else if (AtomicLong.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final AtomicLong longValue=new AtomicLong();\n    longValue.set(number.longValue());\n    return longValue;\n  }\n}\n else if (LongAdder.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final LongAdder longValue=new LongAdder();\n    longValue.add(number.longValue());\n    return longValue;\n  }\n}\n else if (Float.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).floatValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toFloatObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : Float.valueOf(valueStr);\n}\n else if (Double.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).doubleValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toDoubleObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : Double.valueOf(valueStr);\n}\n else if (DoubleAdder.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final DoubleAdder doubleAdder=new DoubleAdder();\n    doubleAdder.add(number.doubleValue());\n    return doubleAdder;\n  }\n}\n else if (BigDecimal.class == targetType) {\n  return toBigDecimal(value,toStrFunc);\n}\n else if (BigInteger.class == targetType) {\n  return toBigInteger(value,toStrFunc);\n}\n else if (Number.class == targetType) {\n  if (value instanceof Number) {\n    return (Number)value;\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toInteger((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseNumber(valueStr);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 629,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4311,
        "startLineNumber" : 76,
        "startColumnNumber" : 2,
        "endLineNumber" : 179,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (Byte.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).byteValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toByteObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply(value);\n  return StrUtil.isBlank(valueStr) ? null : Byte.valueOf(valueStr);\n}\n else if (Short.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).shortValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toShortObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : Short.valueOf(valueStr);\n}\n else if (Integer.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).intValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toInteger((Boolean)value);\n  }\n else   if (value instanceof Date) {\n    return (int)((Date)value).getTime();\n  }\n else   if (value instanceof Calendar) {\n    return (int)((Calendar)value).getTimeInMillis();\n  }\n else   if (value instanceof TemporalAccessor) {\n    return (int)DateUtil.toInstant((TemporalAccessor)value).toEpochMilli();\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseInt(valueStr);\n}\n else if (AtomicInteger.class == targetType) {\n  final Number number=convert(value,Integer.class,toStrFunc);\n  if (null != number) {\n    final AtomicInteger intValue=new AtomicInteger();\n    intValue.set(number.intValue());\n    return intValue;\n  }\n}\n else if (Long.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).longValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toLongObj((Boolean)value);\n  }\n else   if (value instanceof Date) {\n    return ((Date)value).getTime();\n  }\n else   if (value instanceof Calendar) {\n    return ((Calendar)value).getTimeInMillis();\n  }\n else   if (value instanceof TemporalAccessor) {\n    return DateUtil.toInstant((TemporalAccessor)value).toEpochMilli();\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseLong(valueStr);\n}\n else if (AtomicLong.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final AtomicLong longValue=new AtomicLong();\n    longValue.set(number.longValue());\n    return longValue;\n  }\n}\n else if (LongAdder.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final LongAdder longValue=new LongAdder();\n    longValue.add(number.longValue());\n    return longValue;\n  }\n}\n else if (Float.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).floatValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toFloatObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : Float.valueOf(valueStr);\n}\n else if (Double.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).doubleValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toDoubleObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : Double.valueOf(valueStr);\n}\n else if (DoubleAdder.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final DoubleAdder doubleAdder=new DoubleAdder();\n    doubleAdder.add(number.doubleValue());\n    return doubleAdder;\n  }\n}\n else if (BigDecimal.class == targetType) {\n  return toBigDecimal(value,toStrFunc);\n}\n else if (BigInteger.class == targetType) {\n  return toBigInteger(value,toStrFunc);\n}\n else if (Number.class == targetType) {\n  if (value instanceof Number) {\n    return (Number)value;\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toInteger((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseNumber(valueStr);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 685,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4564,
        "startLineNumber" : 70,
        "startColumnNumber" : 104,
        "endLineNumber" : 182,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (value instanceof Enum) {\n    return convert(((Enum<?>)value).ordinal(),targetType,toStrFunc);\n  }\n  if (Byte.class == targetType) {\n    if (value instanceof Number) {\n      return ((Number)value).byteValue();\n    }\n else     if (value instanceof Boolean) {\n      return BooleanUtil.toByteObj((Boolean)value);\n    }\n    final String valueStr=toStrFunc.apply(value);\n    return StrUtil.isBlank(valueStr) ? null : Byte.valueOf(valueStr);\n  }\n else   if (Short.class == targetType) {\n    if (value instanceof Number) {\n      return ((Number)value).shortValue();\n    }\n else     if (value instanceof Boolean) {\n      return BooleanUtil.toShortObj((Boolean)value);\n    }\n    final String valueStr=toStrFunc.apply((value));\n    return StrUtil.isBlank(valueStr) ? null : Short.valueOf(valueStr);\n  }\n else   if (Integer.class == targetType) {\n    if (value instanceof Number) {\n      return ((Number)value).intValue();\n    }\n else     if (value instanceof Boolean) {\n      return BooleanUtil.toInteger((Boolean)value);\n    }\n else     if (value instanceof Date) {\n      return (int)((Date)value).getTime();\n    }\n else     if (value instanceof Calendar) {\n      return (int)((Calendar)value).getTimeInMillis();\n    }\n else     if (value instanceof TemporalAccessor) {\n      return (int)DateUtil.toInstant((TemporalAccessor)value).toEpochMilli();\n    }\n    final String valueStr=toStrFunc.apply((value));\n    return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseInt(valueStr);\n  }\n else   if (AtomicInteger.class == targetType) {\n    final Number number=convert(value,Integer.class,toStrFunc);\n    if (null != number) {\n      final AtomicInteger intValue=new AtomicInteger();\n      intValue.set(number.intValue());\n      return intValue;\n    }\n  }\n else   if (Long.class == targetType) {\n    if (value instanceof Number) {\n      return ((Number)value).longValue();\n    }\n else     if (value instanceof Boolean) {\n      return BooleanUtil.toLongObj((Boolean)value);\n    }\n else     if (value instanceof Date) {\n      return ((Date)value).getTime();\n    }\n else     if (value instanceof Calendar) {\n      return ((Calendar)value).getTimeInMillis();\n    }\n else     if (value instanceof TemporalAccessor) {\n      return DateUtil.toInstant((TemporalAccessor)value).toEpochMilli();\n    }\n    final String valueStr=toStrFunc.apply((value));\n    return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseLong(valueStr);\n  }\n else   if (AtomicLong.class == targetType) {\n    final Number number=convert(value,Long.class,toStrFunc);\n    if (null != number) {\n      final AtomicLong longValue=new AtomicLong();\n      longValue.set(number.longValue());\n      return longValue;\n    }\n  }\n else   if (LongAdder.class == targetType) {\n    final Number number=convert(value,Long.class,toStrFunc);\n    if (null != number) {\n      final LongAdder longValue=new LongAdder();\n      longValue.add(number.longValue());\n      return longValue;\n    }\n  }\n else   if (Float.class == targetType) {\n    if (value instanceof Number) {\n      return ((Number)value).floatValue();\n    }\n else     if (value instanceof Boolean) {\n      return BooleanUtil.toFloatObj((Boolean)value);\n    }\n    final String valueStr=toStrFunc.apply((value));\n    return StrUtil.isBlank(valueStr) ? null : Float.valueOf(valueStr);\n  }\n else   if (Double.class == targetType) {\n    if (value instanceof Number) {\n      return ((Number)value).doubleValue();\n    }\n else     if (value instanceof Boolean) {\n      return BooleanUtil.toDoubleObj((Boolean)value);\n    }\n    final String valueStr=toStrFunc.apply((value));\n    return StrUtil.isBlank(valueStr) ? null : Double.valueOf(valueStr);\n  }\n else   if (DoubleAdder.class == targetType) {\n    final Number number=convert(value,Long.class,toStrFunc);\n    if (null != number) {\n      final DoubleAdder doubleAdder=new DoubleAdder();\n      doubleAdder.add(number.doubleValue());\n      return doubleAdder;\n    }\n  }\n else   if (BigDecimal.class == targetType) {\n    return toBigDecimal(value,toStrFunc);\n  }\n else   if (BigInteger.class == targetType) {\n    return toBigInteger(value,toStrFunc);\n  }\n else   if (Number.class == targetType) {\n    if (value instanceof Number) {\n      return (Number)value;\n    }\n else     if (value instanceof Boolean) {\n      return BooleanUtil.toInteger((Boolean)value);\n    }\n    final String valueStr=toStrFunc.apply((value));\n    return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseNumber(valueStr);\n  }\n  throw new UnsupportedOperationException(StrUtil.format(\"Unsupport Number type: {}\",targetType.getName()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 717,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4826,
        "startLineNumber" : 61,
        "startColumnNumber" : 1,
        "endLineNumber" : 182,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * 转换对象为数字\n * @param value      对象值\n * @param targetType 目标的数字类型\n * @param toStrFunc  转换为字符串的函数\n * @return 转换后的数字\n * @since 5.5.0\n */\nprotected static Number convert(Object value,Class<?> targetType,Function<Object,String> toStrFunc){\n  if (value instanceof Enum) {\n    return convert(((Enum<?>)value).ordinal(),targetType,toStrFunc);\n  }\n  if (Byte.class == targetType) {\n    if (value instanceof Number) {\n      return ((Number)value).byteValue();\n    }\n else     if (value instanceof Boolean) {\n      return BooleanUtil.toByteObj((Boolean)value);\n    }\n    final String valueStr=toStrFunc.apply(value);\n    return StrUtil.isBlank(valueStr) ? null : Byte.valueOf(valueStr);\n  }\n else   if (Short.class == targetType) {\n    if (value instanceof Number) {\n      return ((Number)value).shortValue();\n    }\n else     if (value instanceof Boolean) {\n      return BooleanUtil.toShortObj((Boolean)value);\n    }\n    final String valueStr=toStrFunc.apply((value));\n    return StrUtil.isBlank(valueStr) ? null : Short.valueOf(valueStr);\n  }\n else   if (Integer.class == targetType) {\n    if (value instanceof Number) {\n      return ((Number)value).intValue();\n    }\n else     if (value instanceof Boolean) {\n      return BooleanUtil.toInteger((Boolean)value);\n    }\n else     if (value instanceof Date) {\n      return (int)((Date)value).getTime();\n    }\n else     if (value instanceof Calendar) {\n      return (int)((Calendar)value).getTimeInMillis();\n    }\n else     if (value instanceof TemporalAccessor) {\n      return (int)DateUtil.toInstant((TemporalAccessor)value).toEpochMilli();\n    }\n    final String valueStr=toStrFunc.apply((value));\n    return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseInt(valueStr);\n  }\n else   if (AtomicInteger.class == targetType) {\n    final Number number=convert(value,Integer.class,toStrFunc);\n    if (null != number) {\n      final AtomicInteger intValue=new AtomicInteger();\n      intValue.set(number.intValue());\n      return intValue;\n    }\n  }\n else   if (Long.class == targetType) {\n    if (value instanceof Number) {\n      return ((Number)value).longValue();\n    }\n else     if (value instanceof Boolean) {\n      return BooleanUtil.toLongObj((Boolean)value);\n    }\n else     if (value instanceof Date) {\n      return ((Date)value).getTime();\n    }\n else     if (value instanceof Calendar) {\n      return ((Calendar)value).getTimeInMillis();\n    }\n else     if (value instanceof TemporalAccessor) {\n      return DateUtil.toInstant((TemporalAccessor)value).toEpochMilli();\n    }\n    final String valueStr=toStrFunc.apply((value));\n    return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseLong(valueStr);\n  }\n else   if (AtomicLong.class == targetType) {\n    final Number number=convert(value,Long.class,toStrFunc);\n    if (null != number) {\n      final AtomicLong longValue=new AtomicLong();\n      longValue.set(number.longValue());\n      return longValue;\n    }\n  }\n else   if (LongAdder.class == targetType) {\n    final Number number=convert(value,Long.class,toStrFunc);\n    if (null != number) {\n      final LongAdder longValue=new LongAdder();\n      longValue.add(number.longValue());\n      return longValue;\n    }\n  }\n else   if (Float.class == targetType) {\n    if (value instanceof Number) {\n      return ((Number)value).floatValue();\n    }\n else     if (value instanceof Boolean) {\n      return BooleanUtil.toFloatObj((Boolean)value);\n    }\n    final String valueStr=toStrFunc.apply((value));\n    return StrUtil.isBlank(valueStr) ? null : Float.valueOf(valueStr);\n  }\n else   if (Double.class == targetType) {\n    if (value instanceof Number) {\n      return ((Number)value).doubleValue();\n    }\n else     if (value instanceof Boolean) {\n      return BooleanUtil.toDoubleObj((Boolean)value);\n    }\n    final String valueStr=toStrFunc.apply((value));\n    return StrUtil.isBlank(valueStr) ? null : Double.valueOf(valueStr);\n  }\n else   if (DoubleAdder.class == targetType) {\n    final Number number=convert(value,Long.class,toStrFunc);\n    if (null != number) {\n      final DoubleAdder doubleAdder=new DoubleAdder();\n      doubleAdder.add(number.doubleValue());\n      return doubleAdder;\n    }\n  }\n else   if (BigDecimal.class == targetType) {\n    return toBigDecimal(value,toStrFunc);\n  }\n else   if (BigInteger.class == targetType) {\n    return toBigInteger(value,toStrFunc);\n  }\n else   if (Number.class == targetType) {\n    if (value instanceof Number) {\n      return (Number)value;\n    }\n else     if (value instanceof Boolean) {\n      return BooleanUtil.toInteger((Boolean)value);\n    }\n    final String valueStr=toStrFunc.apply((value));\n    return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseNumber(valueStr);\n  }\n  throw new UnsupportedOperationException(StrUtil.format(\"Unsupport Number type: {}\",targetType.getName()));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 743,
      "astHeight" : 24
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 128,
        "startColumnNumber" : 3,
        "endLineNumber" : 128,
        "endColumnNumber" : 63
      },
      "nodeContext" : "final Number number=convert(value,Long.class,toStrFunc);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 4,
    "type" : "java.lang.Number"
  }, {
    "nodeContext" : "convert(value,Long.class,toStrFunc)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 37,
      "startLineNumber" : 136,
      "startColumnNumber" : 25,
      "endLineNumber" : 136,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 7,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 136,
        "startColumnNumber" : 16,
        "endLineNumber" : 136,
        "endColumnNumber" : 62
      },
      "nodeContext" : "number=convert(value,Long.class,toStrFunc)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 136,
        "startColumnNumber" : 3,
        "endLineNumber" : 136,
        "endColumnNumber" : 63
      },
      "nodeContext" : "final Number number=convert(value,Long.class,toStrFunc);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 230,
        "startLineNumber" : 134,
        "startColumnNumber" : 44,
        "endLineNumber" : 142,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final LongAdder longValue=new LongAdder();\n    longValue.add(number.longValue());\n    return longValue;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 37,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1776,
        "startLineNumber" : 134,
        "startColumnNumber" : 9,
        "endLineNumber" : 179,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (LongAdder.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final LongAdder longValue=new LongAdder();\n    longValue.add(number.longValue());\n    return longValue;\n  }\n}\n else if (Float.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).floatValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toFloatObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : Float.valueOf(valueStr);\n}\n else if (Double.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).doubleValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toDoubleObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : Double.valueOf(valueStr);\n}\n else if (DoubleAdder.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final DoubleAdder doubleAdder=new DoubleAdder();\n    doubleAdder.add(number.doubleValue());\n    return doubleAdder;\n  }\n}\n else if (BigDecimal.class == targetType) {\n  return toBigDecimal(value,toStrFunc);\n}\n else if (BigInteger.class == targetType) {\n  return toBigInteger(value,toStrFunc);\n}\n else if (Number.class == targetType) {\n  if (value instanceof Number) {\n    return (Number)value;\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toInteger((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseNumber(valueStr);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 278,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2036,
        "startLineNumber" : 127,
        "startColumnNumber" : 9,
        "endLineNumber" : 179,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (AtomicLong.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final AtomicLong longValue=new AtomicLong();\n    longValue.set(number.longValue());\n    return longValue;\n  }\n}\n else if (LongAdder.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final LongAdder longValue=new LongAdder();\n    longValue.add(number.longValue());\n    return longValue;\n  }\n}\n else if (Float.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).floatValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toFloatObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : Float.valueOf(valueStr);\n}\n else if (Double.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).doubleValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toDoubleObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : Double.valueOf(valueStr);\n}\n else if (DoubleAdder.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final DoubleAdder doubleAdder=new DoubleAdder();\n    doubleAdder.add(number.doubleValue());\n    return doubleAdder;\n  }\n}\n else if (BigDecimal.class == targetType) {\n  return toBigDecimal(value,toStrFunc);\n}\n else if (BigInteger.class == targetType) {\n  return toBigInteger(value,toStrFunc);\n}\n else if (Number.class == targetType) {\n  if (value instanceof Number) {\n    return (Number)value;\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toInteger((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseNumber(valueStr);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 321,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2685,
        "startLineNumber" : 113,
        "startColumnNumber" : 9,
        "endLineNumber" : 179,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (Long.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).longValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toLongObj((Boolean)value);\n  }\n else   if (value instanceof Date) {\n    return ((Date)value).getTime();\n  }\n else   if (value instanceof Calendar) {\n    return ((Calendar)value).getTimeInMillis();\n  }\n else   if (value instanceof TemporalAccessor) {\n    return DateUtil.toInstant((TemporalAccessor)value).toEpochMilli();\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseLong(valueStr);\n}\n else if (AtomicLong.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final AtomicLong longValue=new AtomicLong();\n    longValue.set(number.longValue());\n    return longValue;\n  }\n}\n else if (LongAdder.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final LongAdder longValue=new LongAdder();\n    longValue.add(number.longValue());\n    return longValue;\n  }\n}\n else if (Float.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).floatValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toFloatObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : Float.valueOf(valueStr);\n}\n else if (Double.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).doubleValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toDoubleObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : Double.valueOf(valueStr);\n}\n else if (DoubleAdder.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final DoubleAdder doubleAdder=new DoubleAdder();\n    doubleAdder.add(number.doubleValue());\n    return doubleAdder;\n  }\n}\n else if (BigDecimal.class == targetType) {\n  return toBigDecimal(value,toStrFunc);\n}\n else if (BigInteger.class == targetType) {\n  return toBigInteger(value,toStrFunc);\n}\n else if (Number.class == targetType) {\n  if (value instanceof Number) {\n    return (Number)value;\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toInteger((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseNumber(valueStr);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 422,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2953,
        "startLineNumber" : 106,
        "startColumnNumber" : 9,
        "endLineNumber" : 179,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (AtomicInteger.class == targetType) {\n  final Number number=convert(value,Integer.class,toStrFunc);\n  if (null != number) {\n    final AtomicInteger intValue=new AtomicInteger();\n    intValue.set(number.intValue());\n    return intValue;\n  }\n}\n else if (Long.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).longValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toLongObj((Boolean)value);\n  }\n else   if (value instanceof Date) {\n    return ((Date)value).getTime();\n  }\n else   if (value instanceof Calendar) {\n    return ((Calendar)value).getTimeInMillis();\n  }\n else   if (value instanceof TemporalAccessor) {\n    return DateUtil.toInstant((TemporalAccessor)value).toEpochMilli();\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseLong(valueStr);\n}\n else if (AtomicLong.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final AtomicLong longValue=new AtomicLong();\n    longValue.set(number.longValue());\n    return longValue;\n  }\n}\n else if (LongAdder.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final LongAdder longValue=new LongAdder();\n    longValue.add(number.longValue());\n    return longValue;\n  }\n}\n else if (Float.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).floatValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toFloatObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : Float.valueOf(valueStr);\n}\n else if (Double.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).doubleValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toDoubleObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : Double.valueOf(valueStr);\n}\n else if (DoubleAdder.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final DoubleAdder doubleAdder=new DoubleAdder();\n    doubleAdder.add(number.doubleValue());\n    return doubleAdder;\n  }\n}\n else if (BigDecimal.class == targetType) {\n  return toBigDecimal(value,toStrFunc);\n}\n else if (BigInteger.class == targetType) {\n  return toBigInteger(value,toStrFunc);\n}\n else if (Number.class == targetType) {\n  if (value instanceof Number) {\n    return (Number)value;\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toInteger((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseNumber(valueStr);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 465,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3621,
        "startLineNumber" : 92,
        "startColumnNumber" : 9,
        "endLineNumber" : 179,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (Integer.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).intValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toInteger((Boolean)value);\n  }\n else   if (value instanceof Date) {\n    return (int)((Date)value).getTime();\n  }\n else   if (value instanceof Calendar) {\n    return (int)((Calendar)value).getTimeInMillis();\n  }\n else   if (value instanceof TemporalAccessor) {\n    return (int)DateUtil.toInstant((TemporalAccessor)value).toEpochMilli();\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseInt(valueStr);\n}\n else if (AtomicInteger.class == targetType) {\n  final Number number=convert(value,Integer.class,toStrFunc);\n  if (null != number) {\n    final AtomicInteger intValue=new AtomicInteger();\n    intValue.set(number.intValue());\n    return intValue;\n  }\n}\n else if (Long.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).longValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toLongObj((Boolean)value);\n  }\n else   if (value instanceof Date) {\n    return ((Date)value).getTime();\n  }\n else   if (value instanceof Calendar) {\n    return ((Calendar)value).getTimeInMillis();\n  }\n else   if (value instanceof TemporalAccessor) {\n    return DateUtil.toInstant((TemporalAccessor)value).toEpochMilli();\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseLong(valueStr);\n}\n else if (AtomicLong.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final AtomicLong longValue=new AtomicLong();\n    longValue.set(number.longValue());\n    return longValue;\n  }\n}\n else if (LongAdder.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final LongAdder longValue=new LongAdder();\n    longValue.add(number.longValue());\n    return longValue;\n  }\n}\n else if (Float.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).floatValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toFloatObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : Float.valueOf(valueStr);\n}\n else if (Double.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).doubleValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toDoubleObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : Double.valueOf(valueStr);\n}\n else if (DoubleAdder.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final DoubleAdder doubleAdder=new DoubleAdder();\n    doubleAdder.add(number.doubleValue());\n    return doubleAdder;\n  }\n}\n else if (BigDecimal.class == targetType) {\n  return toBigDecimal(value,toStrFunc);\n}\n else if (BigInteger.class == targetType) {\n  return toBigInteger(value,toStrFunc);\n}\n else if (Number.class == targetType) {\n  if (value instanceof Number) {\n    return (Number)value;\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toInteger((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseNumber(valueStr);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 572,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3969,
        "startLineNumber" : 84,
        "startColumnNumber" : 9,
        "endLineNumber" : 179,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (Short.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).shortValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toShortObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : Short.valueOf(valueStr);\n}\n else if (Integer.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).intValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toInteger((Boolean)value);\n  }\n else   if (value instanceof Date) {\n    return (int)((Date)value).getTime();\n  }\n else   if (value instanceof Calendar) {\n    return (int)((Calendar)value).getTimeInMillis();\n  }\n else   if (value instanceof TemporalAccessor) {\n    return (int)DateUtil.toInstant((TemporalAccessor)value).toEpochMilli();\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseInt(valueStr);\n}\n else if (AtomicInteger.class == targetType) {\n  final Number number=convert(value,Integer.class,toStrFunc);\n  if (null != number) {\n    final AtomicInteger intValue=new AtomicInteger();\n    intValue.set(number.intValue());\n    return intValue;\n  }\n}\n else if (Long.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).longValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toLongObj((Boolean)value);\n  }\n else   if (value instanceof Date) {\n    return ((Date)value).getTime();\n  }\n else   if (value instanceof Calendar) {\n    return ((Calendar)value).getTimeInMillis();\n  }\n else   if (value instanceof TemporalAccessor) {\n    return DateUtil.toInstant((TemporalAccessor)value).toEpochMilli();\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseLong(valueStr);\n}\n else if (AtomicLong.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final AtomicLong longValue=new AtomicLong();\n    longValue.set(number.longValue());\n    return longValue;\n  }\n}\n else if (LongAdder.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final LongAdder longValue=new LongAdder();\n    longValue.add(number.longValue());\n    return longValue;\n  }\n}\n else if (Float.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).floatValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toFloatObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : Float.valueOf(valueStr);\n}\n else if (Double.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).doubleValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toDoubleObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : Double.valueOf(valueStr);\n}\n else if (DoubleAdder.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final DoubleAdder doubleAdder=new DoubleAdder();\n    doubleAdder.add(number.doubleValue());\n    return doubleAdder;\n  }\n}\n else if (BigDecimal.class == targetType) {\n  return toBigDecimal(value,toStrFunc);\n}\n else if (BigInteger.class == targetType) {\n  return toBigInteger(value,toStrFunc);\n}\n else if (Number.class == targetType) {\n  if (value instanceof Number) {\n    return (Number)value;\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toInteger((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseNumber(valueStr);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 629,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4311,
        "startLineNumber" : 76,
        "startColumnNumber" : 2,
        "endLineNumber" : 179,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (Byte.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).byteValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toByteObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply(value);\n  return StrUtil.isBlank(valueStr) ? null : Byte.valueOf(valueStr);\n}\n else if (Short.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).shortValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toShortObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : Short.valueOf(valueStr);\n}\n else if (Integer.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).intValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toInteger((Boolean)value);\n  }\n else   if (value instanceof Date) {\n    return (int)((Date)value).getTime();\n  }\n else   if (value instanceof Calendar) {\n    return (int)((Calendar)value).getTimeInMillis();\n  }\n else   if (value instanceof TemporalAccessor) {\n    return (int)DateUtil.toInstant((TemporalAccessor)value).toEpochMilli();\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseInt(valueStr);\n}\n else if (AtomicInteger.class == targetType) {\n  final Number number=convert(value,Integer.class,toStrFunc);\n  if (null != number) {\n    final AtomicInteger intValue=new AtomicInteger();\n    intValue.set(number.intValue());\n    return intValue;\n  }\n}\n else if (Long.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).longValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toLongObj((Boolean)value);\n  }\n else   if (value instanceof Date) {\n    return ((Date)value).getTime();\n  }\n else   if (value instanceof Calendar) {\n    return ((Calendar)value).getTimeInMillis();\n  }\n else   if (value instanceof TemporalAccessor) {\n    return DateUtil.toInstant((TemporalAccessor)value).toEpochMilli();\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseLong(valueStr);\n}\n else if (AtomicLong.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final AtomicLong longValue=new AtomicLong();\n    longValue.set(number.longValue());\n    return longValue;\n  }\n}\n else if (LongAdder.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final LongAdder longValue=new LongAdder();\n    longValue.add(number.longValue());\n    return longValue;\n  }\n}\n else if (Float.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).floatValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toFloatObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : Float.valueOf(valueStr);\n}\n else if (Double.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).doubleValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toDoubleObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : Double.valueOf(valueStr);\n}\n else if (DoubleAdder.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final DoubleAdder doubleAdder=new DoubleAdder();\n    doubleAdder.add(number.doubleValue());\n    return doubleAdder;\n  }\n}\n else if (BigDecimal.class == targetType) {\n  return toBigDecimal(value,toStrFunc);\n}\n else if (BigInteger.class == targetType) {\n  return toBigInteger(value,toStrFunc);\n}\n else if (Number.class == targetType) {\n  if (value instanceof Number) {\n    return (Number)value;\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toInteger((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseNumber(valueStr);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 685,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4564,
        "startLineNumber" : 70,
        "startColumnNumber" : 104,
        "endLineNumber" : 182,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (value instanceof Enum) {\n    return convert(((Enum<?>)value).ordinal(),targetType,toStrFunc);\n  }\n  if (Byte.class == targetType) {\n    if (value instanceof Number) {\n      return ((Number)value).byteValue();\n    }\n else     if (value instanceof Boolean) {\n      return BooleanUtil.toByteObj((Boolean)value);\n    }\n    final String valueStr=toStrFunc.apply(value);\n    return StrUtil.isBlank(valueStr) ? null : Byte.valueOf(valueStr);\n  }\n else   if (Short.class == targetType) {\n    if (value instanceof Number) {\n      return ((Number)value).shortValue();\n    }\n else     if (value instanceof Boolean) {\n      return BooleanUtil.toShortObj((Boolean)value);\n    }\n    final String valueStr=toStrFunc.apply((value));\n    return StrUtil.isBlank(valueStr) ? null : Short.valueOf(valueStr);\n  }\n else   if (Integer.class == targetType) {\n    if (value instanceof Number) {\n      return ((Number)value).intValue();\n    }\n else     if (value instanceof Boolean) {\n      return BooleanUtil.toInteger((Boolean)value);\n    }\n else     if (value instanceof Date) {\n      return (int)((Date)value).getTime();\n    }\n else     if (value instanceof Calendar) {\n      return (int)((Calendar)value).getTimeInMillis();\n    }\n else     if (value instanceof TemporalAccessor) {\n      return (int)DateUtil.toInstant((TemporalAccessor)value).toEpochMilli();\n    }\n    final String valueStr=toStrFunc.apply((value));\n    return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseInt(valueStr);\n  }\n else   if (AtomicInteger.class == targetType) {\n    final Number number=convert(value,Integer.class,toStrFunc);\n    if (null != number) {\n      final AtomicInteger intValue=new AtomicInteger();\n      intValue.set(number.intValue());\n      return intValue;\n    }\n  }\n else   if (Long.class == targetType) {\n    if (value instanceof Number) {\n      return ((Number)value).longValue();\n    }\n else     if (value instanceof Boolean) {\n      return BooleanUtil.toLongObj((Boolean)value);\n    }\n else     if (value instanceof Date) {\n      return ((Date)value).getTime();\n    }\n else     if (value instanceof Calendar) {\n      return ((Calendar)value).getTimeInMillis();\n    }\n else     if (value instanceof TemporalAccessor) {\n      return DateUtil.toInstant((TemporalAccessor)value).toEpochMilli();\n    }\n    final String valueStr=toStrFunc.apply((value));\n    return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseLong(valueStr);\n  }\n else   if (AtomicLong.class == targetType) {\n    final Number number=convert(value,Long.class,toStrFunc);\n    if (null != number) {\n      final AtomicLong longValue=new AtomicLong();\n      longValue.set(number.longValue());\n      return longValue;\n    }\n  }\n else   if (LongAdder.class == targetType) {\n    final Number number=convert(value,Long.class,toStrFunc);\n    if (null != number) {\n      final LongAdder longValue=new LongAdder();\n      longValue.add(number.longValue());\n      return longValue;\n    }\n  }\n else   if (Float.class == targetType) {\n    if (value instanceof Number) {\n      return ((Number)value).floatValue();\n    }\n else     if (value instanceof Boolean) {\n      return BooleanUtil.toFloatObj((Boolean)value);\n    }\n    final String valueStr=toStrFunc.apply((value));\n    return StrUtil.isBlank(valueStr) ? null : Float.valueOf(valueStr);\n  }\n else   if (Double.class == targetType) {\n    if (value instanceof Number) {\n      return ((Number)value).doubleValue();\n    }\n else     if (value instanceof Boolean) {\n      return BooleanUtil.toDoubleObj((Boolean)value);\n    }\n    final String valueStr=toStrFunc.apply((value));\n    return StrUtil.isBlank(valueStr) ? null : Double.valueOf(valueStr);\n  }\n else   if (DoubleAdder.class == targetType) {\n    final Number number=convert(value,Long.class,toStrFunc);\n    if (null != number) {\n      final DoubleAdder doubleAdder=new DoubleAdder();\n      doubleAdder.add(number.doubleValue());\n      return doubleAdder;\n    }\n  }\n else   if (BigDecimal.class == targetType) {\n    return toBigDecimal(value,toStrFunc);\n  }\n else   if (BigInteger.class == targetType) {\n    return toBigInteger(value,toStrFunc);\n  }\n else   if (Number.class == targetType) {\n    if (value instanceof Number) {\n      return (Number)value;\n    }\n else     if (value instanceof Boolean) {\n      return BooleanUtil.toInteger((Boolean)value);\n    }\n    final String valueStr=toStrFunc.apply((value));\n    return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseNumber(valueStr);\n  }\n  throw new UnsupportedOperationException(StrUtil.format(\"Unsupport Number type: {}\",targetType.getName()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 717,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4826,
        "startLineNumber" : 61,
        "startColumnNumber" : 1,
        "endLineNumber" : 182,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * 转换对象为数字\n * @param value      对象值\n * @param targetType 目标的数字类型\n * @param toStrFunc  转换为字符串的函数\n * @return 转换后的数字\n * @since 5.5.0\n */\nprotected static Number convert(Object value,Class<?> targetType,Function<Object,String> toStrFunc){\n  if (value instanceof Enum) {\n    return convert(((Enum<?>)value).ordinal(),targetType,toStrFunc);\n  }\n  if (Byte.class == targetType) {\n    if (value instanceof Number) {\n      return ((Number)value).byteValue();\n    }\n else     if (value instanceof Boolean) {\n      return BooleanUtil.toByteObj((Boolean)value);\n    }\n    final String valueStr=toStrFunc.apply(value);\n    return StrUtil.isBlank(valueStr) ? null : Byte.valueOf(valueStr);\n  }\n else   if (Short.class == targetType) {\n    if (value instanceof Number) {\n      return ((Number)value).shortValue();\n    }\n else     if (value instanceof Boolean) {\n      return BooleanUtil.toShortObj((Boolean)value);\n    }\n    final String valueStr=toStrFunc.apply((value));\n    return StrUtil.isBlank(valueStr) ? null : Short.valueOf(valueStr);\n  }\n else   if (Integer.class == targetType) {\n    if (value instanceof Number) {\n      return ((Number)value).intValue();\n    }\n else     if (value instanceof Boolean) {\n      return BooleanUtil.toInteger((Boolean)value);\n    }\n else     if (value instanceof Date) {\n      return (int)((Date)value).getTime();\n    }\n else     if (value instanceof Calendar) {\n      return (int)((Calendar)value).getTimeInMillis();\n    }\n else     if (value instanceof TemporalAccessor) {\n      return (int)DateUtil.toInstant((TemporalAccessor)value).toEpochMilli();\n    }\n    final String valueStr=toStrFunc.apply((value));\n    return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseInt(valueStr);\n  }\n else   if (AtomicInteger.class == targetType) {\n    final Number number=convert(value,Integer.class,toStrFunc);\n    if (null != number) {\n      final AtomicInteger intValue=new AtomicInteger();\n      intValue.set(number.intValue());\n      return intValue;\n    }\n  }\n else   if (Long.class == targetType) {\n    if (value instanceof Number) {\n      return ((Number)value).longValue();\n    }\n else     if (value instanceof Boolean) {\n      return BooleanUtil.toLongObj((Boolean)value);\n    }\n else     if (value instanceof Date) {\n      return ((Date)value).getTime();\n    }\n else     if (value instanceof Calendar) {\n      return ((Calendar)value).getTimeInMillis();\n    }\n else     if (value instanceof TemporalAccessor) {\n      return DateUtil.toInstant((TemporalAccessor)value).toEpochMilli();\n    }\n    final String valueStr=toStrFunc.apply((value));\n    return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseLong(valueStr);\n  }\n else   if (AtomicLong.class == targetType) {\n    final Number number=convert(value,Long.class,toStrFunc);\n    if (null != number) {\n      final AtomicLong longValue=new AtomicLong();\n      longValue.set(number.longValue());\n      return longValue;\n    }\n  }\n else   if (LongAdder.class == targetType) {\n    final Number number=convert(value,Long.class,toStrFunc);\n    if (null != number) {\n      final LongAdder longValue=new LongAdder();\n      longValue.add(number.longValue());\n      return longValue;\n    }\n  }\n else   if (Float.class == targetType) {\n    if (value instanceof Number) {\n      return ((Number)value).floatValue();\n    }\n else     if (value instanceof Boolean) {\n      return BooleanUtil.toFloatObj((Boolean)value);\n    }\n    final String valueStr=toStrFunc.apply((value));\n    return StrUtil.isBlank(valueStr) ? null : Float.valueOf(valueStr);\n  }\n else   if (Double.class == targetType) {\n    if (value instanceof Number) {\n      return ((Number)value).doubleValue();\n    }\n else     if (value instanceof Boolean) {\n      return BooleanUtil.toDoubleObj((Boolean)value);\n    }\n    final String valueStr=toStrFunc.apply((value));\n    return StrUtil.isBlank(valueStr) ? null : Double.valueOf(valueStr);\n  }\n else   if (DoubleAdder.class == targetType) {\n    final Number number=convert(value,Long.class,toStrFunc);\n    if (null != number) {\n      final DoubleAdder doubleAdder=new DoubleAdder();\n      doubleAdder.add(number.doubleValue());\n      return doubleAdder;\n    }\n  }\n else   if (BigDecimal.class == targetType) {\n    return toBigDecimal(value,toStrFunc);\n  }\n else   if (BigInteger.class == targetType) {\n    return toBigInteger(value,toStrFunc);\n  }\n else   if (Number.class == targetType) {\n    if (value instanceof Number) {\n      return (Number)value;\n    }\n else     if (value instanceof Boolean) {\n      return BooleanUtil.toInteger((Boolean)value);\n    }\n    final String valueStr=toStrFunc.apply((value));\n    return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseNumber(valueStr);\n  }\n  throw new UnsupportedOperationException(StrUtil.format(\"Unsupport Number type: {}\",targetType.getName()));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 743,
      "astHeight" : 24
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 136,
        "startColumnNumber" : 3,
        "endLineNumber" : 136,
        "endColumnNumber" : 63
      },
      "nodeContext" : "final Number number=convert(value,Long.class,toStrFunc);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 4,
    "type" : "java.lang.Number"
  }, {
    "nodeContext" : "convert(value,Long.class,toStrFunc)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 37,
      "startLineNumber" : 161,
      "startColumnNumber" : 25,
      "endLineNumber" : 161,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 7,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 161,
        "startColumnNumber" : 16,
        "endLineNumber" : 161,
        "endColumnNumber" : 62
      },
      "nodeContext" : "number=convert(value,Long.class,toStrFunc)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 161,
        "startColumnNumber" : 3,
        "endLineNumber" : 161,
        "endColumnNumber" : 63
      },
      "nodeContext" : "final Number number=convert(value,Long.class,toStrFunc);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 242,
        "startLineNumber" : 159,
        "startColumnNumber" : 46,
        "endLineNumber" : 167,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final DoubleAdder doubleAdder=new DoubleAdder();\n    doubleAdder.add(number.doubleValue());\n    return doubleAdder;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 37,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 803,
        "startLineNumber" : 159,
        "startColumnNumber" : 9,
        "endLineNumber" : 179,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (DoubleAdder.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final DoubleAdder doubleAdder=new DoubleAdder();\n    doubleAdder.add(number.doubleValue());\n    return doubleAdder;\n  }\n}\n else if (BigDecimal.class == targetType) {\n  return toBigDecimal(value,toStrFunc);\n}\n else if (BigInteger.class == targetType) {\n  return toBigInteger(value,toStrFunc);\n}\n else if (Number.class == targetType) {\n  if (value instanceof Number) {\n    return (Number)value;\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toInteger((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseNumber(valueStr);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 121,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1155,
        "startLineNumber" : 151,
        "startColumnNumber" : 9,
        "endLineNumber" : 179,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (Double.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).doubleValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toDoubleObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : Double.valueOf(valueStr);\n}\n else if (DoubleAdder.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final DoubleAdder doubleAdder=new DoubleAdder();\n    doubleAdder.add(number.doubleValue());\n    return doubleAdder;\n  }\n}\n else if (BigDecimal.class == targetType) {\n  return toBigDecimal(value,toStrFunc);\n}\n else if (BigInteger.class == targetType) {\n  return toBigInteger(value,toStrFunc);\n}\n else if (Number.class == targetType) {\n  if (value instanceof Number) {\n    return (Number)value;\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toInteger((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseNumber(valueStr);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 178,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1505,
        "startLineNumber" : 142,
        "startColumnNumber" : 9,
        "endLineNumber" : 179,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (Float.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).floatValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toFloatObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : Float.valueOf(valueStr);\n}\n else if (Double.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).doubleValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toDoubleObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : Double.valueOf(valueStr);\n}\n else if (DoubleAdder.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final DoubleAdder doubleAdder=new DoubleAdder();\n    doubleAdder.add(number.doubleValue());\n    return doubleAdder;\n  }\n}\n else if (BigDecimal.class == targetType) {\n  return toBigDecimal(value,toStrFunc);\n}\n else if (BigInteger.class == targetType) {\n  return toBigInteger(value,toStrFunc);\n}\n else if (Number.class == targetType) {\n  if (value instanceof Number) {\n    return (Number)value;\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toInteger((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseNumber(valueStr);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 235,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1776,
        "startLineNumber" : 134,
        "startColumnNumber" : 9,
        "endLineNumber" : 179,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (LongAdder.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final LongAdder longValue=new LongAdder();\n    longValue.add(number.longValue());\n    return longValue;\n  }\n}\n else if (Float.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).floatValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toFloatObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : Float.valueOf(valueStr);\n}\n else if (Double.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).doubleValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toDoubleObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : Double.valueOf(valueStr);\n}\n else if (DoubleAdder.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final DoubleAdder doubleAdder=new DoubleAdder();\n    doubleAdder.add(number.doubleValue());\n    return doubleAdder;\n  }\n}\n else if (BigDecimal.class == targetType) {\n  return toBigDecimal(value,toStrFunc);\n}\n else if (BigInteger.class == targetType) {\n  return toBigInteger(value,toStrFunc);\n}\n else if (Number.class == targetType) {\n  if (value instanceof Number) {\n    return (Number)value;\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toInteger((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseNumber(valueStr);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 278,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2036,
        "startLineNumber" : 127,
        "startColumnNumber" : 9,
        "endLineNumber" : 179,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (AtomicLong.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final AtomicLong longValue=new AtomicLong();\n    longValue.set(number.longValue());\n    return longValue;\n  }\n}\n else if (LongAdder.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final LongAdder longValue=new LongAdder();\n    longValue.add(number.longValue());\n    return longValue;\n  }\n}\n else if (Float.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).floatValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toFloatObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : Float.valueOf(valueStr);\n}\n else if (Double.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).doubleValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toDoubleObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : Double.valueOf(valueStr);\n}\n else if (DoubleAdder.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final DoubleAdder doubleAdder=new DoubleAdder();\n    doubleAdder.add(number.doubleValue());\n    return doubleAdder;\n  }\n}\n else if (BigDecimal.class == targetType) {\n  return toBigDecimal(value,toStrFunc);\n}\n else if (BigInteger.class == targetType) {\n  return toBigInteger(value,toStrFunc);\n}\n else if (Number.class == targetType) {\n  if (value instanceof Number) {\n    return (Number)value;\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toInteger((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseNumber(valueStr);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 321,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2685,
        "startLineNumber" : 113,
        "startColumnNumber" : 9,
        "endLineNumber" : 179,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (Long.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).longValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toLongObj((Boolean)value);\n  }\n else   if (value instanceof Date) {\n    return ((Date)value).getTime();\n  }\n else   if (value instanceof Calendar) {\n    return ((Calendar)value).getTimeInMillis();\n  }\n else   if (value instanceof TemporalAccessor) {\n    return DateUtil.toInstant((TemporalAccessor)value).toEpochMilli();\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseLong(valueStr);\n}\n else if (AtomicLong.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final AtomicLong longValue=new AtomicLong();\n    longValue.set(number.longValue());\n    return longValue;\n  }\n}\n else if (LongAdder.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final LongAdder longValue=new LongAdder();\n    longValue.add(number.longValue());\n    return longValue;\n  }\n}\n else if (Float.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).floatValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toFloatObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : Float.valueOf(valueStr);\n}\n else if (Double.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).doubleValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toDoubleObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : Double.valueOf(valueStr);\n}\n else if (DoubleAdder.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final DoubleAdder doubleAdder=new DoubleAdder();\n    doubleAdder.add(number.doubleValue());\n    return doubleAdder;\n  }\n}\n else if (BigDecimal.class == targetType) {\n  return toBigDecimal(value,toStrFunc);\n}\n else if (BigInteger.class == targetType) {\n  return toBigInteger(value,toStrFunc);\n}\n else if (Number.class == targetType) {\n  if (value instanceof Number) {\n    return (Number)value;\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toInteger((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseNumber(valueStr);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 422,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2953,
        "startLineNumber" : 106,
        "startColumnNumber" : 9,
        "endLineNumber" : 179,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (AtomicInteger.class == targetType) {\n  final Number number=convert(value,Integer.class,toStrFunc);\n  if (null != number) {\n    final AtomicInteger intValue=new AtomicInteger();\n    intValue.set(number.intValue());\n    return intValue;\n  }\n}\n else if (Long.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).longValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toLongObj((Boolean)value);\n  }\n else   if (value instanceof Date) {\n    return ((Date)value).getTime();\n  }\n else   if (value instanceof Calendar) {\n    return ((Calendar)value).getTimeInMillis();\n  }\n else   if (value instanceof TemporalAccessor) {\n    return DateUtil.toInstant((TemporalAccessor)value).toEpochMilli();\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseLong(valueStr);\n}\n else if (AtomicLong.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final AtomicLong longValue=new AtomicLong();\n    longValue.set(number.longValue());\n    return longValue;\n  }\n}\n else if (LongAdder.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final LongAdder longValue=new LongAdder();\n    longValue.add(number.longValue());\n    return longValue;\n  }\n}\n else if (Float.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).floatValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toFloatObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : Float.valueOf(valueStr);\n}\n else if (Double.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).doubleValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toDoubleObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : Double.valueOf(valueStr);\n}\n else if (DoubleAdder.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final DoubleAdder doubleAdder=new DoubleAdder();\n    doubleAdder.add(number.doubleValue());\n    return doubleAdder;\n  }\n}\n else if (BigDecimal.class == targetType) {\n  return toBigDecimal(value,toStrFunc);\n}\n else if (BigInteger.class == targetType) {\n  return toBigInteger(value,toStrFunc);\n}\n else if (Number.class == targetType) {\n  if (value instanceof Number) {\n    return (Number)value;\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toInteger((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseNumber(valueStr);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 465,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3621,
        "startLineNumber" : 92,
        "startColumnNumber" : 9,
        "endLineNumber" : 179,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (Integer.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).intValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toInteger((Boolean)value);\n  }\n else   if (value instanceof Date) {\n    return (int)((Date)value).getTime();\n  }\n else   if (value instanceof Calendar) {\n    return (int)((Calendar)value).getTimeInMillis();\n  }\n else   if (value instanceof TemporalAccessor) {\n    return (int)DateUtil.toInstant((TemporalAccessor)value).toEpochMilli();\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseInt(valueStr);\n}\n else if (AtomicInteger.class == targetType) {\n  final Number number=convert(value,Integer.class,toStrFunc);\n  if (null != number) {\n    final AtomicInteger intValue=new AtomicInteger();\n    intValue.set(number.intValue());\n    return intValue;\n  }\n}\n else if (Long.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).longValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toLongObj((Boolean)value);\n  }\n else   if (value instanceof Date) {\n    return ((Date)value).getTime();\n  }\n else   if (value instanceof Calendar) {\n    return ((Calendar)value).getTimeInMillis();\n  }\n else   if (value instanceof TemporalAccessor) {\n    return DateUtil.toInstant((TemporalAccessor)value).toEpochMilli();\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseLong(valueStr);\n}\n else if (AtomicLong.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final AtomicLong longValue=new AtomicLong();\n    longValue.set(number.longValue());\n    return longValue;\n  }\n}\n else if (LongAdder.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final LongAdder longValue=new LongAdder();\n    longValue.add(number.longValue());\n    return longValue;\n  }\n}\n else if (Float.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).floatValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toFloatObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : Float.valueOf(valueStr);\n}\n else if (Double.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).doubleValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toDoubleObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : Double.valueOf(valueStr);\n}\n else if (DoubleAdder.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final DoubleAdder doubleAdder=new DoubleAdder();\n    doubleAdder.add(number.doubleValue());\n    return doubleAdder;\n  }\n}\n else if (BigDecimal.class == targetType) {\n  return toBigDecimal(value,toStrFunc);\n}\n else if (BigInteger.class == targetType) {\n  return toBigInteger(value,toStrFunc);\n}\n else if (Number.class == targetType) {\n  if (value instanceof Number) {\n    return (Number)value;\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toInteger((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseNumber(valueStr);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 572,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3969,
        "startLineNumber" : 84,
        "startColumnNumber" : 9,
        "endLineNumber" : 179,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (Short.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).shortValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toShortObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : Short.valueOf(valueStr);\n}\n else if (Integer.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).intValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toInteger((Boolean)value);\n  }\n else   if (value instanceof Date) {\n    return (int)((Date)value).getTime();\n  }\n else   if (value instanceof Calendar) {\n    return (int)((Calendar)value).getTimeInMillis();\n  }\n else   if (value instanceof TemporalAccessor) {\n    return (int)DateUtil.toInstant((TemporalAccessor)value).toEpochMilli();\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseInt(valueStr);\n}\n else if (AtomicInteger.class == targetType) {\n  final Number number=convert(value,Integer.class,toStrFunc);\n  if (null != number) {\n    final AtomicInteger intValue=new AtomicInteger();\n    intValue.set(number.intValue());\n    return intValue;\n  }\n}\n else if (Long.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).longValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toLongObj((Boolean)value);\n  }\n else   if (value instanceof Date) {\n    return ((Date)value).getTime();\n  }\n else   if (value instanceof Calendar) {\n    return ((Calendar)value).getTimeInMillis();\n  }\n else   if (value instanceof TemporalAccessor) {\n    return DateUtil.toInstant((TemporalAccessor)value).toEpochMilli();\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseLong(valueStr);\n}\n else if (AtomicLong.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final AtomicLong longValue=new AtomicLong();\n    longValue.set(number.longValue());\n    return longValue;\n  }\n}\n else if (LongAdder.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final LongAdder longValue=new LongAdder();\n    longValue.add(number.longValue());\n    return longValue;\n  }\n}\n else if (Float.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).floatValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toFloatObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : Float.valueOf(valueStr);\n}\n else if (Double.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).doubleValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toDoubleObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : Double.valueOf(valueStr);\n}\n else if (DoubleAdder.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final DoubleAdder doubleAdder=new DoubleAdder();\n    doubleAdder.add(number.doubleValue());\n    return doubleAdder;\n  }\n}\n else if (BigDecimal.class == targetType) {\n  return toBigDecimal(value,toStrFunc);\n}\n else if (BigInteger.class == targetType) {\n  return toBigInteger(value,toStrFunc);\n}\n else if (Number.class == targetType) {\n  if (value instanceof Number) {\n    return (Number)value;\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toInteger((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseNumber(valueStr);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 629,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4311,
        "startLineNumber" : 76,
        "startColumnNumber" : 2,
        "endLineNumber" : 179,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (Byte.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).byteValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toByteObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply(value);\n  return StrUtil.isBlank(valueStr) ? null : Byte.valueOf(valueStr);\n}\n else if (Short.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).shortValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toShortObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : Short.valueOf(valueStr);\n}\n else if (Integer.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).intValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toInteger((Boolean)value);\n  }\n else   if (value instanceof Date) {\n    return (int)((Date)value).getTime();\n  }\n else   if (value instanceof Calendar) {\n    return (int)((Calendar)value).getTimeInMillis();\n  }\n else   if (value instanceof TemporalAccessor) {\n    return (int)DateUtil.toInstant((TemporalAccessor)value).toEpochMilli();\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseInt(valueStr);\n}\n else if (AtomicInteger.class == targetType) {\n  final Number number=convert(value,Integer.class,toStrFunc);\n  if (null != number) {\n    final AtomicInteger intValue=new AtomicInteger();\n    intValue.set(number.intValue());\n    return intValue;\n  }\n}\n else if (Long.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).longValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toLongObj((Boolean)value);\n  }\n else   if (value instanceof Date) {\n    return ((Date)value).getTime();\n  }\n else   if (value instanceof Calendar) {\n    return ((Calendar)value).getTimeInMillis();\n  }\n else   if (value instanceof TemporalAccessor) {\n    return DateUtil.toInstant((TemporalAccessor)value).toEpochMilli();\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseLong(valueStr);\n}\n else if (AtomicLong.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final AtomicLong longValue=new AtomicLong();\n    longValue.set(number.longValue());\n    return longValue;\n  }\n}\n else if (LongAdder.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final LongAdder longValue=new LongAdder();\n    longValue.add(number.longValue());\n    return longValue;\n  }\n}\n else if (Float.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).floatValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toFloatObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : Float.valueOf(valueStr);\n}\n else if (Double.class == targetType) {\n  if (value instanceof Number) {\n    return ((Number)value).doubleValue();\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toDoubleObj((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : Double.valueOf(valueStr);\n}\n else if (DoubleAdder.class == targetType) {\n  final Number number=convert(value,Long.class,toStrFunc);\n  if (null != number) {\n    final DoubleAdder doubleAdder=new DoubleAdder();\n    doubleAdder.add(number.doubleValue());\n    return doubleAdder;\n  }\n}\n else if (BigDecimal.class == targetType) {\n  return toBigDecimal(value,toStrFunc);\n}\n else if (BigInteger.class == targetType) {\n  return toBigInteger(value,toStrFunc);\n}\n else if (Number.class == targetType) {\n  if (value instanceof Number) {\n    return (Number)value;\n  }\n else   if (value instanceof Boolean) {\n    return BooleanUtil.toInteger((Boolean)value);\n  }\n  final String valueStr=toStrFunc.apply((value));\n  return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseNumber(valueStr);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 685,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4564,
        "startLineNumber" : 70,
        "startColumnNumber" : 104,
        "endLineNumber" : 182,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (value instanceof Enum) {\n    return convert(((Enum<?>)value).ordinal(),targetType,toStrFunc);\n  }\n  if (Byte.class == targetType) {\n    if (value instanceof Number) {\n      return ((Number)value).byteValue();\n    }\n else     if (value instanceof Boolean) {\n      return BooleanUtil.toByteObj((Boolean)value);\n    }\n    final String valueStr=toStrFunc.apply(value);\n    return StrUtil.isBlank(valueStr) ? null : Byte.valueOf(valueStr);\n  }\n else   if (Short.class == targetType) {\n    if (value instanceof Number) {\n      return ((Number)value).shortValue();\n    }\n else     if (value instanceof Boolean) {\n      return BooleanUtil.toShortObj((Boolean)value);\n    }\n    final String valueStr=toStrFunc.apply((value));\n    return StrUtil.isBlank(valueStr) ? null : Short.valueOf(valueStr);\n  }\n else   if (Integer.class == targetType) {\n    if (value instanceof Number) {\n      return ((Number)value).intValue();\n    }\n else     if (value instanceof Boolean) {\n      return BooleanUtil.toInteger((Boolean)value);\n    }\n else     if (value instanceof Date) {\n      return (int)((Date)value).getTime();\n    }\n else     if (value instanceof Calendar) {\n      return (int)((Calendar)value).getTimeInMillis();\n    }\n else     if (value instanceof TemporalAccessor) {\n      return (int)DateUtil.toInstant((TemporalAccessor)value).toEpochMilli();\n    }\n    final String valueStr=toStrFunc.apply((value));\n    return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseInt(valueStr);\n  }\n else   if (AtomicInteger.class == targetType) {\n    final Number number=convert(value,Integer.class,toStrFunc);\n    if (null != number) {\n      final AtomicInteger intValue=new AtomicInteger();\n      intValue.set(number.intValue());\n      return intValue;\n    }\n  }\n else   if (Long.class == targetType) {\n    if (value instanceof Number) {\n      return ((Number)value).longValue();\n    }\n else     if (value instanceof Boolean) {\n      return BooleanUtil.toLongObj((Boolean)value);\n    }\n else     if (value instanceof Date) {\n      return ((Date)value).getTime();\n    }\n else     if (value instanceof Calendar) {\n      return ((Calendar)value).getTimeInMillis();\n    }\n else     if (value instanceof TemporalAccessor) {\n      return DateUtil.toInstant((TemporalAccessor)value).toEpochMilli();\n    }\n    final String valueStr=toStrFunc.apply((value));\n    return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseLong(valueStr);\n  }\n else   if (AtomicLong.class == targetType) {\n    final Number number=convert(value,Long.class,toStrFunc);\n    if (null != number) {\n      final AtomicLong longValue=new AtomicLong();\n      longValue.set(number.longValue());\n      return longValue;\n    }\n  }\n else   if (LongAdder.class == targetType) {\n    final Number number=convert(value,Long.class,toStrFunc);\n    if (null != number) {\n      final LongAdder longValue=new LongAdder();\n      longValue.add(number.longValue());\n      return longValue;\n    }\n  }\n else   if (Float.class == targetType) {\n    if (value instanceof Number) {\n      return ((Number)value).floatValue();\n    }\n else     if (value instanceof Boolean) {\n      return BooleanUtil.toFloatObj((Boolean)value);\n    }\n    final String valueStr=toStrFunc.apply((value));\n    return StrUtil.isBlank(valueStr) ? null : Float.valueOf(valueStr);\n  }\n else   if (Double.class == targetType) {\n    if (value instanceof Number) {\n      return ((Number)value).doubleValue();\n    }\n else     if (value instanceof Boolean) {\n      return BooleanUtil.toDoubleObj((Boolean)value);\n    }\n    final String valueStr=toStrFunc.apply((value));\n    return StrUtil.isBlank(valueStr) ? null : Double.valueOf(valueStr);\n  }\n else   if (DoubleAdder.class == targetType) {\n    final Number number=convert(value,Long.class,toStrFunc);\n    if (null != number) {\n      final DoubleAdder doubleAdder=new DoubleAdder();\n      doubleAdder.add(number.doubleValue());\n      return doubleAdder;\n    }\n  }\n else   if (BigDecimal.class == targetType) {\n    return toBigDecimal(value,toStrFunc);\n  }\n else   if (BigInteger.class == targetType) {\n    return toBigInteger(value,toStrFunc);\n  }\n else   if (Number.class == targetType) {\n    if (value instanceof Number) {\n      return (Number)value;\n    }\n else     if (value instanceof Boolean) {\n      return BooleanUtil.toInteger((Boolean)value);\n    }\n    final String valueStr=toStrFunc.apply((value));\n    return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseNumber(valueStr);\n  }\n  throw new UnsupportedOperationException(StrUtil.format(\"Unsupport Number type: {}\",targetType.getName()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 717,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4826,
        "startLineNumber" : 61,
        "startColumnNumber" : 1,
        "endLineNumber" : 182,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * 转换对象为数字\n * @param value      对象值\n * @param targetType 目标的数字类型\n * @param toStrFunc  转换为字符串的函数\n * @return 转换后的数字\n * @since 5.5.0\n */\nprotected static Number convert(Object value,Class<?> targetType,Function<Object,String> toStrFunc){\n  if (value instanceof Enum) {\n    return convert(((Enum<?>)value).ordinal(),targetType,toStrFunc);\n  }\n  if (Byte.class == targetType) {\n    if (value instanceof Number) {\n      return ((Number)value).byteValue();\n    }\n else     if (value instanceof Boolean) {\n      return BooleanUtil.toByteObj((Boolean)value);\n    }\n    final String valueStr=toStrFunc.apply(value);\n    return StrUtil.isBlank(valueStr) ? null : Byte.valueOf(valueStr);\n  }\n else   if (Short.class == targetType) {\n    if (value instanceof Number) {\n      return ((Number)value).shortValue();\n    }\n else     if (value instanceof Boolean) {\n      return BooleanUtil.toShortObj((Boolean)value);\n    }\n    final String valueStr=toStrFunc.apply((value));\n    return StrUtil.isBlank(valueStr) ? null : Short.valueOf(valueStr);\n  }\n else   if (Integer.class == targetType) {\n    if (value instanceof Number) {\n      return ((Number)value).intValue();\n    }\n else     if (value instanceof Boolean) {\n      return BooleanUtil.toInteger((Boolean)value);\n    }\n else     if (value instanceof Date) {\n      return (int)((Date)value).getTime();\n    }\n else     if (value instanceof Calendar) {\n      return (int)((Calendar)value).getTimeInMillis();\n    }\n else     if (value instanceof TemporalAccessor) {\n      return (int)DateUtil.toInstant((TemporalAccessor)value).toEpochMilli();\n    }\n    final String valueStr=toStrFunc.apply((value));\n    return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseInt(valueStr);\n  }\n else   if (AtomicInteger.class == targetType) {\n    final Number number=convert(value,Integer.class,toStrFunc);\n    if (null != number) {\n      final AtomicInteger intValue=new AtomicInteger();\n      intValue.set(number.intValue());\n      return intValue;\n    }\n  }\n else   if (Long.class == targetType) {\n    if (value instanceof Number) {\n      return ((Number)value).longValue();\n    }\n else     if (value instanceof Boolean) {\n      return BooleanUtil.toLongObj((Boolean)value);\n    }\n else     if (value instanceof Date) {\n      return ((Date)value).getTime();\n    }\n else     if (value instanceof Calendar) {\n      return ((Calendar)value).getTimeInMillis();\n    }\n else     if (value instanceof TemporalAccessor) {\n      return DateUtil.toInstant((TemporalAccessor)value).toEpochMilli();\n    }\n    final String valueStr=toStrFunc.apply((value));\n    return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseLong(valueStr);\n  }\n else   if (AtomicLong.class == targetType) {\n    final Number number=convert(value,Long.class,toStrFunc);\n    if (null != number) {\n      final AtomicLong longValue=new AtomicLong();\n      longValue.set(number.longValue());\n      return longValue;\n    }\n  }\n else   if (LongAdder.class == targetType) {\n    final Number number=convert(value,Long.class,toStrFunc);\n    if (null != number) {\n      final LongAdder longValue=new LongAdder();\n      longValue.add(number.longValue());\n      return longValue;\n    }\n  }\n else   if (Float.class == targetType) {\n    if (value instanceof Number) {\n      return ((Number)value).floatValue();\n    }\n else     if (value instanceof Boolean) {\n      return BooleanUtil.toFloatObj((Boolean)value);\n    }\n    final String valueStr=toStrFunc.apply((value));\n    return StrUtil.isBlank(valueStr) ? null : Float.valueOf(valueStr);\n  }\n else   if (Double.class == targetType) {\n    if (value instanceof Number) {\n      return ((Number)value).doubleValue();\n    }\n else     if (value instanceof Boolean) {\n      return BooleanUtil.toDoubleObj((Boolean)value);\n    }\n    final String valueStr=toStrFunc.apply((value));\n    return StrUtil.isBlank(valueStr) ? null : Double.valueOf(valueStr);\n  }\n else   if (DoubleAdder.class == targetType) {\n    final Number number=convert(value,Long.class,toStrFunc);\n    if (null != number) {\n      final DoubleAdder doubleAdder=new DoubleAdder();\n      doubleAdder.add(number.doubleValue());\n      return doubleAdder;\n    }\n  }\n else   if (BigDecimal.class == targetType) {\n    return toBigDecimal(value,toStrFunc);\n  }\n else   if (BigInteger.class == targetType) {\n    return toBigInteger(value,toStrFunc);\n  }\n else   if (Number.class == targetType) {\n    if (value instanceof Number) {\n      return (Number)value;\n    }\n else     if (value instanceof Boolean) {\n      return BooleanUtil.toInteger((Boolean)value);\n    }\n    final String valueStr=toStrFunc.apply((value));\n    return StrUtil.isBlank(valueStr) ? null : NumberUtil.parseNumber(valueStr);\n  }\n  throw new UnsupportedOperationException(StrUtil.format(\"Unsupport Number type: {}\",targetType.getName()));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 743,
      "astHeight" : 24
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 161,
        "startColumnNumber" : 3,
        "endLineNumber" : 161,
        "endColumnNumber" : 63
      },
      "nodeContext" : "final Number number=convert(value,Long.class,toStrFunc);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 4,
    "type" : "java.lang.Number"
  } ],
  "positionList" : [ {
    "charLength" : 37,
    "startLineNumber" : 128,
    "startColumnNumber" : 25,
    "endLineNumber" : 128,
    "endColumnNumber" : 62
  }, {
    "charLength" : 37,
    "startLineNumber" : 136,
    "startColumnNumber" : 25,
    "endLineNumber" : 136,
    "endColumnNumber" : 62
  }, {
    "charLength" : 37,
    "startLineNumber" : 161,
    "startColumnNumber" : 25,
    "endLineNumber" : 161,
    "endColumnNumber" : 62
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 6
  } ]
}