{
  "id" : 22,
  "expression" : "jarname",
  "projectName" : "jenkinsci@jenkins",
  "commitID" : "c44fa7f4cf769257844d562353a579a198ea517a",
  "filePath" : "/test/src/test/java/jenkins/ClassPathTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "jarname",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 60,
      "startColumnNumber" : 78,
      "endLineNumber" : 60,
      "endColumnNumber" : 85
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 60,
        "startColumnNumber" : 20,
        "endLineNumber" : 60,
        "endColumnNumber" : 86
      },
      "nodeContext" : "entries.computeIfAbsent(name,k -> new ArrayList<>()).add(jarname)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 60,
        "startColumnNumber" : 20,
        "endLineNumber" : 60,
        "endColumnNumber" : 87
      },
      "nodeContext" : "entries.computeIfAbsent(name,k -> new ArrayList<>()).add(jarname);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 317,
        "startLineNumber" : 55,
        "startColumnNumber" : 66,
        "endLineNumber" : 61,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  String name=e.getName();\n  if (name.startsWith(\"META-INF/\") || name.endsWith(\"/\") || !name.contains(\"/\")) {\n    continue;\n  }\n  entries.computeIfAbsent(name,k -> new ArrayList<>()).add(jarname);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 41,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 367,
        "startLineNumber" : 55,
        "startColumnNumber" : 16,
        "endLineNumber" : 61,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (JarEntry e : Collections.list(jf.entries())) {\n  String name=e.getName();\n  if (name.startsWith(\"META-INF/\") || name.endsWith(\"/\") || !name.contains(\"/\")) {\n    continue;\n  }\n  entries.computeIfAbsent(name,k -> new ArrayList<>()).add(jarname);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 52,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 401,
        "startLineNumber" : 54,
        "startColumnNumber" : 48,
        "endLineNumber" : 62,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  for (  JarEntry e : Collections.list(jf.entries())) {\n    String name=e.getName();\n    if (name.startsWith(\"META-INF/\") || name.endsWith(\"/\") || !name.contains(\"/\")) {\n      continue;\n    }\n    entries.computeIfAbsent(name,k -> new ArrayList<>()).add(jarname);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 53,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 437,
        "startLineNumber" : 54,
        "startColumnNumber" : 12,
        "endLineNumber" : 62,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try (JarFile jf=new JarFile(jar)){\n  for (  JarEntry e : Collections.list(jf.entries())) {\n    String name=e.getName();\n    if (name.startsWith(\"META-INF/\") || name.endsWith(\"/\") || !name.contains(\"/\")) {\n      continue;\n    }\n    entries.computeIfAbsent(name,k -> new ArrayList<>()).add(jarname);\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 63,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 508,
        "startLineNumber" : 52,
        "startColumnNumber" : 127,
        "endLineNumber" : 63,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String jarname=jar.getName();\n  try (JarFile jf=new JarFile(jar)){\n    for (    JarEntry e : Collections.list(jf.entries())) {\n      String name=e.getName();\n      if (name.startsWith(\"META-INF/\") || name.endsWith(\"/\") || !name.contains(\"/\")) {\n        continue;\n      }\n      entries.computeIfAbsent(name,k -> new ArrayList<>()).add(jarname);\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 72,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 627,
        "startLineNumber" : 52,
        "startColumnNumber" : 8,
        "endLineNumber" : 63,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (File jar : new File(WarExploder.getExplodedDir(),\"WEB-INF/lib\").listFiles((dir,name) -> name.endsWith(\".jar\"))) {\n  String jarname=jar.getName();\n  try (JarFile jf=new JarFile(jar)){\n    for (    JarEntry e : Collections.list(jf.entries())) {\n      String name=e.getName();\n      if (name.startsWith(\"META-INF/\") || name.endsWith(\"/\") || !name.contains(\"/\")) {\n        continue;\n      }\n      entries.computeIfAbsent(name,k -> new ArrayList<>()).add(jarname);\n    }\n  }\n }\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 95,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 979,
        "startLineNumber" : 50,
        "startColumnNumber" : 46,
        "endLineNumber" : 69,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,List<String>> entries=new TreeMap<>();\n  for (  File jar : new File(WarExploder.getExplodedDir(),\"WEB-INF/lib\").listFiles((dir,name) -> name.endsWith(\".jar\"))) {\n    String jarname=jar.getName();\n    try (JarFile jf=new JarFile(jar)){\n      for (      JarEntry e : Collections.list(jf.entries())) {\n        String name=e.getName();\n        if (name.startsWith(\"META-INF/\") || name.endsWith(\"/\") || !name.contains(\"/\")) {\n          continue;\n        }\n        entries.computeIfAbsent(name,k -> new ArrayList<>()).add(jarname);\n      }\n    }\n   }\n  entries.forEach((name,jarnames) -> {\n    if (jarnames.size() > 1) {\n      errors.addError(new AssertionError(name + \" duplicated in \" + jarnames));\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 141,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1122,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 69,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Ignore(\"TODO too many failures to solve them all now\") @Issue(\"JENKINS-46754\") @Test public void uniqueness() throws Exception {\n  Map<String,List<String>> entries=new TreeMap<>();\n  for (  File jar : new File(WarExploder.getExplodedDir(),\"WEB-INF/lib\").listFiles((dir,name) -> name.endsWith(\".jar\"))) {\n    String jarname=jar.getName();\n    try (JarFile jf=new JarFile(jar)){\n      for (      JarEntry e : Collections.list(jf.entries())) {\n        String name=e.getName();\n        if (name.startsWith(\"META-INF/\") || name.endsWith(\"/\") || !name.contains(\"/\")) {\n          continue;\n        }\n        entries.computeIfAbsent(name,k -> new ArrayList<>()).add(jarname);\n      }\n    }\n   }\n  entries.forEach((name,jarnames) -> {\n    if (jarnames.size() > 1) {\n      errors.addError(new AssertionError(name + \" duplicated in \" + jarnames));\n    }\n  }\n);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 155,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 60,
        "startColumnNumber" : 20,
        "endLineNumber" : 60,
        "endColumnNumber" : 87
      },
      "nodeContext" : "entries.computeIfAbsent(name,k -> new ArrayList<>()).add(jarname);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 60,
    "startColumnNumber" : 78,
    "endLineNumber" : 60,
    "endColumnNumber" : 85
  } ],
  "layoutRelationDataList" : [ ]
}