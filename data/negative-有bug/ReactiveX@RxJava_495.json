{
  "id" : 495,
  "expression" : "Flowable.interval(0,5,TimeUnit.MILLISECONDS)",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/internal/operators/flowable/FlowableRefCountTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Flowable.interval(0,5,TimeUnit.MILLISECONDS)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 46,
      "startLineNumber" : 41,
      "startColumnNumber" : 27,
      "endLineNumber" : 41,
      "endColumnNumber" : 73
    },
    "astNodeNumber" : 8,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 300,
        "startLineNumber" : 41,
        "startColumnNumber" : 27,
        "endLineNumber" : 47,
        "endColumnNumber" : 18
      },
      "nodeContext" : "Flowable.interval(0,5,TimeUnit.MILLISECONDS).doOnSubscribe(new Consumer<Subscription>(){\n  @Override public void accept(  Subscription s){\n    subscribeCount.incrementAndGet();\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 32,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 528,
        "startLineNumber" : 41,
        "startColumnNumber" : 27,
        "endLineNumber" : 53,
        "endColumnNumber" : 18
      },
      "nodeContext" : "Flowable.interval(0,5,TimeUnit.MILLISECONDS).doOnSubscribe(new Consumer<Subscription>(){\n  @Override public void accept(  Subscription s){\n    subscribeCount.incrementAndGet();\n  }\n}\n).doOnNext(new Consumer<Long>(){\n  @Override public void accept(  Long l){\n    nextCount.incrementAndGet();\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 56,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 556,
        "startLineNumber" : 41,
        "startColumnNumber" : 27,
        "endLineNumber" : 54,
        "endColumnNumber" : 26
      },
      "nodeContext" : "Flowable.interval(0,5,TimeUnit.MILLISECONDS).doOnSubscribe(new Consumer<Subscription>(){\n  @Override public void accept(  Subscription s){\n    subscribeCount.incrementAndGet();\n  }\n}\n).doOnNext(new Consumer<Long>(){\n  @Override public void accept(  Long l){\n    nextCount.incrementAndGet();\n  }\n}\n).publish()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 58,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 567,
        "startLineNumber" : 41,
        "startColumnNumber" : 27,
        "endLineNumber" : 54,
        "endColumnNumber" : 37
      },
      "nodeContext" : "Flowable.interval(0,5,TimeUnit.MILLISECONDS).doOnSubscribe(new Consumer<Subscription>(){\n  @Override public void accept(  Subscription s){\n    subscribeCount.incrementAndGet();\n  }\n}\n).doOnNext(new Consumer<Long>(){\n  @Override public void accept(  Long l){\n    nextCount.incrementAndGet();\n  }\n}\n).publish().refCount()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 60,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 571,
        "startLineNumber" : 41,
        "startColumnNumber" : 23,
        "endLineNumber" : 54,
        "endColumnNumber" : 37
      },
      "nodeContext" : "r=Flowable.interval(0,5,TimeUnit.MILLISECONDS).doOnSubscribe(new Consumer<Subscription>(){\n  @Override public void accept(  Subscription s){\n    subscribeCount.incrementAndGet();\n  }\n}\n).doOnNext(new Consumer<Long>(){\n  @Override public void accept(  Long l){\n    nextCount.incrementAndGet();\n  }\n}\n).publish().refCount()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 62,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 587,
        "startLineNumber" : 41,
        "startColumnNumber" : 8,
        "endLineNumber" : 54,
        "endColumnNumber" : 38
      },
      "nodeContext" : "Flowable<Long> r=Flowable.interval(0,5,TimeUnit.MILLISECONDS).doOnSubscribe(new Consumer<Subscription>(){\n  @Override public void accept(  Subscription s){\n    subscribeCount.incrementAndGet();\n  }\n}\n).doOnNext(new Consumer<Long>(){\n  @Override public void accept(  Long l){\n    nextCount.incrementAndGet();\n  }\n}\n).publish().refCount();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 68,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1659,
        "startLineNumber" : 38,
        "startColumnNumber" : 36,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final AtomicInteger subscribeCount=new AtomicInteger();\n  final AtomicInteger nextCount=new AtomicInteger();\n  Flowable<Long> r=Flowable.interval(0,5,TimeUnit.MILLISECONDS).doOnSubscribe(new Consumer<Subscription>(){\n    @Override public void accept(    Subscription s){\n      subscribeCount.incrementAndGet();\n    }\n  }\n).doOnNext(new Consumer<Long>(){\n    @Override public void accept(    Long l){\n      nextCount.incrementAndGet();\n    }\n  }\n).publish().refCount();\n  final AtomicInteger receivedCount=new AtomicInteger();\n  Disposable s1=r.subscribe(new Consumer<Long>(){\n    @Override public void accept(    Long l){\n      receivedCount.incrementAndGet();\n    }\n  }\n);\n  Disposable s2=r.subscribe();\n  try {\n    Thread.sleep(52);\n  }\n catch (  InterruptedException e) {\n  }\n  s2.dispose();\n  s1.dispose();\n  System.out.println(\"onNext: \" + nextCount.get());\n  assertEquals(nextCount.get(),receivedCount.get());\n  assertEquals(1,subscribeCount.get());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 182,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1702,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRefCountAsync(){\n  final AtomicInteger subscribeCount=new AtomicInteger();\n  final AtomicInteger nextCount=new AtomicInteger();\n  Flowable<Long> r=Flowable.interval(0,5,TimeUnit.MILLISECONDS).doOnSubscribe(new Consumer<Subscription>(){\n    @Override public void accept(    Subscription s){\n      subscribeCount.incrementAndGet();\n    }\n  }\n).doOnNext(new Consumer<Long>(){\n    @Override public void accept(    Long l){\n      nextCount.incrementAndGet();\n    }\n  }\n).publish().refCount();\n  final AtomicInteger receivedCount=new AtomicInteger();\n  Disposable s1=r.subscribe(new Consumer<Long>(){\n    @Override public void accept(    Long l){\n      receivedCount.incrementAndGet();\n    }\n  }\n);\n  Disposable s2=r.subscribe();\n  try {\n    Thread.sleep(52);\n  }\n catch (  InterruptedException e) {\n  }\n  s2.dispose();\n  s1.dispose();\n  System.out.println(\"onNext: \" + nextCount.get());\n  assertEquals(nextCount.get(),receivedCount.get());\n  assertEquals(1,subscribeCount.get());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 188,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 300,
        "startLineNumber" : 41,
        "startColumnNumber" : 27,
        "endLineNumber" : 47,
        "endColumnNumber" : 18
      },
      "nodeContext" : "Flowable.interval(0,5,TimeUnit.MILLISECONDS).doOnSubscribe(new Consumer<Subscription>(){\n  @Override public void accept(  Subscription s){\n    subscribeCount.incrementAndGet();\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 32,
      "astHeight" : 8
    },
    "tokenLength" : 6,
    "type" : "io.reactivex.Flowable<java.lang.Long>"
  } ],
  "positionList" : [ {
    "charLength" : 46,
    "startLineNumber" : 41,
    "startColumnNumber" : 27,
    "endLineNumber" : 41,
    "endColumnNumber" : 73
  } ],
  "layoutRelationDataList" : [ ]
}