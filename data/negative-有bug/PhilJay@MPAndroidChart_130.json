{
  "id" : 130,
  "expression" : "EMPTY",
  "projectName" : "PhilJay@MPAndroidChart",
  "commitID" : "43046425fc2ed73d0d3f177759706116e02a9053",
  "filePath" : "/MPChartLib/src/main/java/com/github/mikephil/charting/utils/Fill.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "EMPTY",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 167,
      "startColumnNumber" : 17,
      "endLineNumber" : 167,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 167,
        "startColumnNumber" : 12,
        "endLineNumber" : 167,
        "endColumnNumber" : 23
      },
      "nodeContext" : "case EMPTY:",
      "nodeType" : "SwitchCase",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2808,
        "startLineNumber" : 165,
        "startColumnNumber" : 8,
        "endLineNumber" : 245,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (mType) {\ncase EMPTY:  return;\ncase COLOR:{\n  if (mFinalColor == null)   return;\n  if (isClipPathSupported()) {\n    int save=c.save();\n    c.clipRect(left,top,right,bottom);\n    c.drawColor(mFinalColor);\n    c.restoreToCount(save);\n  }\n else {\n    Paint.Style previous=paint.getStyle();\n    int previousColor=paint.getColor();\n    paint.setStyle(Paint.Style.FILL);\n    paint.setColor(mFinalColor);\n    c.drawRect(left,top,right,bottom,paint);\n    paint.setColor(previousColor);\n    paint.setStyle(previous);\n  }\n}\nbreak;\ncase LINEAR_GRADIENT:{\nif (mGradientColors == null) return;\nLinearGradient gradient=new LinearGradient((int)(gradientDirection == Direction.RIGHT ? right : gradientDirection == Direction.LEFT ? left : left),(int)(gradientDirection == Direction.UP ? bottom : gradientDirection == Direction.DOWN ? top : top),(int)(gradientDirection == Direction.RIGHT ? left : gradientDirection == Direction.LEFT ? right : left),(int)(gradientDirection == Direction.UP ? top : gradientDirection == Direction.DOWN ? bottom : top),mGradientColors,mGradientPositions,android.graphics.Shader.TileMode.MIRROR);\npaint.setShader(gradient);\nc.drawRect(left,top,right,bottom,paint);\n}\nbreak;\ncase DRAWABLE:{\nif (mDrawable == null) return;\nmDrawable.setBounds((int)left,(int)top,(int)right,(int)bottom);\nmDrawable.draw(c);\n}\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 238,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2826,
        "startLineNumber" : 164,
        "startColumnNumber" : 4,
        "endLineNumber" : 246,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\nswitch (mType) {\ncase EMPTY:    return;\ncase COLOR:{\n    if (mFinalColor == null)     return;\n    if (isClipPathSupported()) {\n      int save=c.save();\n      c.clipRect(left,top,right,bottom);\n      c.drawColor(mFinalColor);\n      c.restoreToCount(save);\n    }\n else {\n      Paint.Style previous=paint.getStyle();\n      int previousColor=paint.getColor();\n      paint.setStyle(Paint.Style.FILL);\n      paint.setColor(mFinalColor);\n      c.drawRect(left,top,right,bottom,paint);\n      paint.setColor(previousColor);\n      paint.setStyle(previous);\n    }\n  }\nbreak;\ncase LINEAR_GRADIENT:{\nif (mGradientColors == null) return;\nLinearGradient gradient=new LinearGradient((int)(gradientDirection == Direction.RIGHT ? right : gradientDirection == Direction.LEFT ? left : left),(int)(gradientDirection == Direction.UP ? bottom : gradientDirection == Direction.DOWN ? top : top),(int)(gradientDirection == Direction.RIGHT ? left : gradientDirection == Direction.LEFT ? right : left),(int)(gradientDirection == Direction.UP ? top : gradientDirection == Direction.DOWN ? bottom : top),mGradientColors,mGradientPositions,android.graphics.Shader.TileMode.MIRROR);\npaint.setShader(gradient);\nc.drawRect(left,top,right,bottom,paint);\n}\nbreak;\ncase DRAWABLE:{\nif (mDrawable == null) return;\nmDrawable.setBounds((int)left,(int)top,(int)right,(int)bottom);\nmDrawable.draw(c);\n}\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 239,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3006,
        "startLineNumber" : 161,
        "startColumnNumber" : 4,
        "endLineNumber" : 246,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void fillRect(Canvas c,Paint paint,float left,float top,float right,float bottom,Direction gradientDirection){\nswitch (mType) {\ncase EMPTY:    return;\ncase COLOR:{\n    if (mFinalColor == null)     return;\n    if (isClipPathSupported()) {\n      int save=c.save();\n      c.clipRect(left,top,right,bottom);\n      c.drawColor(mFinalColor);\n      c.restoreToCount(save);\n    }\n else {\n      Paint.Style previous=paint.getStyle();\n      int previousColor=paint.getColor();\n      paint.setStyle(Paint.Style.FILL);\n      paint.setColor(mFinalColor);\n      c.drawRect(left,top,right,bottom,paint);\n      paint.setColor(previousColor);\n      paint.setStyle(previous);\n    }\n  }\nbreak;\ncase LINEAR_GRADIENT:{\nif (mGradientColors == null) return;\nLinearGradient gradient=new LinearGradient((int)(gradientDirection == Direction.RIGHT ? right : gradientDirection == Direction.LEFT ? left : left),(int)(gradientDirection == Direction.UP ? bottom : gradientDirection == Direction.DOWN ? top : top),(int)(gradientDirection == Direction.RIGHT ? left : gradientDirection == Direction.LEFT ? right : left),(int)(gradientDirection == Direction.UP ? top : gradientDirection == Direction.DOWN ? bottom : top),mGradientColors,mGradientPositions,android.graphics.Shader.TileMode.MIRROR);\npaint.setShader(gradient);\nc.drawRect(left,top,right,bottom,paint);\n}\nbreak;\ncase DRAWABLE:{\nif (mDrawable == null) return;\nmDrawable.setBounds((int)left,(int)top,(int)right,(int)bottom);\nmDrawable.draw(c);\n}\nbreak;\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 267,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 167,
        "startColumnNumber" : 12,
        "endLineNumber" : 167,
        "endColumnNumber" : 23
      },
      "nodeContext" : "case EMPTY:",
      "nodeType" : "SwitchCase",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.github.mikephil.charting.utils.Fill.Type"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 167,
    "startColumnNumber" : 17,
    "endLineNumber" : 167,
    "endColumnNumber" : 22
  } ],
  "layoutRelationDataList" : [ ]
}