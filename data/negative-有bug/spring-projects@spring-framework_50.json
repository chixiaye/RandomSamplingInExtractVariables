{
  "id" : 50,
  "expression" : "typedValue",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-beans/src/main/java/org/springframework/beans/factory/support/AutowireUtils.java",
  "occurrences" : 6,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "typedValue",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 214,
      "startColumnNumber" : 10,
      "endLineNumber" : 214,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 214,
        "startColumnNumber" : 10,
        "endLineNumber" : 214,
        "endColumnNumber" : 36
      },
      "nodeContext" : "typedValue.hasTargetType()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 214,
        "startColumnNumber" : 6,
        "endLineNumber" : 216,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (typedValue.hasTargetType()) {\n  return typedValue.getTargetType();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 531,
        "startLineNumber" : 212,
        "startColumnNumber" : 42,
        "endLineNumber" : 227,
        "endColumnNumber" : 6
      },
      "nodeContext" : "{\n  TypedStringValue typedValue=((TypedStringValue)arg);\n  if (typedValue.hasTargetType()) {\n    return typedValue.getTargetType();\n  }\n  try {\n    Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n    if (resolvedType != null) {\n      return resolvedType;\n    }\n  }\n catch (  ClassNotFoundException ex) {\n    throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 57,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 738,
        "startLineNumber" : 212,
        "startColumnNumber" : 5,
        "endLineNumber" : 231,
        "endColumnNumber" : 6
      },
      "nodeContext" : "if (arg instanceof TypedStringValue) {\n  TypedStringValue typedValue=((TypedStringValue)arg);\n  if (typedValue.hasTargetType()) {\n    return typedValue.getTargetType();\n  }\n  try {\n    Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n    if (resolvedType != null) {\n      return resolvedType;\n    }\n  }\n catch (  ClassNotFoundException ex) {\n    throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n  }\n}\n else if (arg != null && !(arg instanceof BeanMetadataElement)) {\n  return arg.getClass();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 78,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 787,
        "startLineNumber" : 211,
        "startColumnNumber" : 55,
        "endLineNumber" : 233,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (arg instanceof TypedStringValue) {\n    TypedStringValue typedValue=((TypedStringValue)arg);\n    if (typedValue.hasTargetType()) {\n      return typedValue.getTargetType();\n    }\n    try {\n      Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n      if (resolvedType != null) {\n        return resolvedType;\n      }\n    }\n catch (    ClassNotFoundException ex) {\n      throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n    }\n  }\n else   if (arg != null && !(arg instanceof BeanMetadataElement)) {\n    return arg.getClass();\n  }\n  return method.getReturnType();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 83,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2210,
        "startLineNumber" : 211,
        "startColumnNumber" : 4,
        "endLineNumber" : 269,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (methodParameterType.equals(genericReturnType)) {\n  if (arg instanceof TypedStringValue) {\n    TypedStringValue typedValue=((TypedStringValue)arg);\n    if (typedValue.hasTargetType()) {\n      return typedValue.getTargetType();\n    }\n    try {\n      Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n      if (resolvedType != null) {\n        return resolvedType;\n      }\n    }\n catch (    ClassNotFoundException ex) {\n      throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n    }\n  }\n else   if (arg != null && !(arg instanceof BeanMetadataElement)) {\n    return arg.getClass();\n  }\n  return method.getReturnType();\n}\n else if (methodParameterType instanceof ParameterizedType) {\n  ParameterizedType parameterizedType=(ParameterizedType)methodParameterType;\n  Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();\n  for (  Type typeArg : actualTypeArguments) {\n    if (typeArg.equals(genericReturnType)) {\n      if (arg instanceof Class) {\n        return (Class<?>)arg;\n      }\n else {\n        String className=null;\n        if (arg instanceof String) {\n          className=(String)arg;\n        }\n else         if (arg instanceof TypedStringValue) {\n          TypedStringValue typedValue=((TypedStringValue)arg);\n          String targetTypeName=typedValue.getTargetTypeName();\n          if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n            className=typedValue.getValue();\n          }\n        }\n        if (className != null) {\n          try {\n            return ClassUtils.forName(className,classLoader);\n          }\n catch (          ClassNotFoundException ex) {\n            throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n          }\n        }\n        return method.getReturnType();\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 235,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2303,
        "startLineNumber" : 208,
        "startColumnNumber" : 57,
        "endLineNumber" : 270,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  Type methodParameterType=methodParameterTypes[i];\n  Object arg=args[i];\n  if (methodParameterType.equals(genericReturnType)) {\n    if (arg instanceof TypedStringValue) {\n      TypedStringValue typedValue=((TypedStringValue)arg);\n      if (typedValue.hasTargetType()) {\n        return typedValue.getTargetType();\n      }\n      try {\n        Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n        if (resolvedType != null) {\n          return resolvedType;\n        }\n      }\n catch (      ClassNotFoundException ex) {\n        throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n      }\n    }\n else     if (arg != null && !(arg instanceof BeanMetadataElement)) {\n      return arg.getClass();\n    }\n    return method.getReturnType();\n  }\n else   if (methodParameterType instanceof ParameterizedType) {\n    ParameterizedType parameterizedType=(ParameterizedType)methodParameterType;\n    Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();\n    for (    Type typeArg : actualTypeArguments) {\n      if (typeArg.equals(genericReturnType)) {\n        if (arg instanceof Class) {\n          return (Class<?>)arg;\n        }\n else {\n          String className=null;\n          if (arg instanceof String) {\n            className=(String)arg;\n          }\n else           if (arg instanceof TypedStringValue) {\n            TypedStringValue typedValue=((TypedStringValue)arg);\n            String targetTypeName=typedValue.getTargetTypeName();\n            if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n              className=typedValue.getValue();\n            }\n          }\n          if (className != null) {\n            try {\n              return ClassUtils.forName(className,classLoader);\n            }\n catch (            ClassNotFoundException ex) {\n              throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n            }\n          }\n          return method.getReturnType();\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 252,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2357,
        "startLineNumber" : 208,
        "startColumnNumber" : 3,
        "endLineNumber" : 270,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (int i=0; i < methodParameterTypes.length; i++) {\n  Type methodParameterType=methodParameterTypes[i];\n  Object arg=args[i];\n  if (methodParameterType.equals(genericReturnType)) {\n    if (arg instanceof TypedStringValue) {\n      TypedStringValue typedValue=((TypedStringValue)arg);\n      if (typedValue.hasTargetType()) {\n        return typedValue.getTargetType();\n      }\n      try {\n        Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n        if (resolvedType != null) {\n          return resolvedType;\n        }\n      }\n catch (      ClassNotFoundException ex) {\n        throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n      }\n    }\n else     if (arg != null && !(arg instanceof BeanMetadataElement)) {\n      return arg.getClass();\n    }\n    return method.getReturnType();\n  }\n else   if (methodParameterType instanceof ParameterizedType) {\n    ParameterizedType parameterizedType=(ParameterizedType)methodParameterType;\n    Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();\n    for (    Type typeArg : actualTypeArguments) {\n      if (typeArg.equals(genericReturnType)) {\n        if (arg instanceof Class) {\n          return (Class<?>)arg;\n        }\n else {\n          String className=null;\n          if (arg instanceof String) {\n            className=(String)arg;\n          }\n else           if (arg instanceof TypedStringValue) {\n            TypedStringValue typedValue=((TypedStringValue)arg);\n            String targetTypeName=typedValue.getTargetTypeName();\n            if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n              className=typedValue.getValue();\n            }\n          }\n          if (className != null) {\n            try {\n              return ClassUtils.forName(className,classLoader);\n            }\n catch (            ClassNotFoundException ex) {\n              throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n            }\n          }\n          return method.getReturnType();\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 265,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2366,
        "startLineNumber" : 207,
        "startColumnNumber" : 52,
        "endLineNumber" : 271,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (int i=0; i < methodParameterTypes.length; i++) {\n    Type methodParameterType=methodParameterTypes[i];\n    Object arg=args[i];\n    if (methodParameterType.equals(genericReturnType)) {\n      if (arg instanceof TypedStringValue) {\n        TypedStringValue typedValue=((TypedStringValue)arg);\n        if (typedValue.hasTargetType()) {\n          return typedValue.getTargetType();\n        }\n        try {\n          Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n          if (resolvedType != null) {\n            return resolvedType;\n          }\n        }\n catch (        ClassNotFoundException ex) {\n          throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n        }\n      }\n else       if (arg != null && !(arg instanceof BeanMetadataElement)) {\n        return arg.getClass();\n      }\n      return method.getReturnType();\n    }\n else     if (methodParameterType instanceof ParameterizedType) {\n      ParameterizedType parameterizedType=(ParameterizedType)methodParameterType;\n      Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();\n      for (      Type typeArg : actualTypeArguments) {\n        if (typeArg.equals(genericReturnType)) {\n          if (arg instanceof Class) {\n            return (Class<?>)arg;\n          }\n else {\n            String className=null;\n            if (arg instanceof String) {\n              className=(String)arg;\n            }\n else             if (arg instanceof TypedStringValue) {\n              TypedStringValue typedValue=((TypedStringValue)arg);\n              String targetTypeName=typedValue.getTargetTypeName();\n              if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n                className=typedValue.getValue();\n              }\n            }\n            if (className != null) {\n              try {\n                return ClassUtils.forName(className,classLoader);\n              }\n catch (              ClassNotFoundException ex) {\n                throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n              }\n            }\n            return method.getReturnType();\n          }\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 266,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2416,
        "startLineNumber" : 207,
        "startColumnNumber" : 2,
        "endLineNumber" : 271,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (locallyDeclaredTypeVariableMatchesReturnType) {\n  for (int i=0; i < methodParameterTypes.length; i++) {\n    Type methodParameterType=methodParameterTypes[i];\n    Object arg=args[i];\n    if (methodParameterType.equals(genericReturnType)) {\n      if (arg instanceof TypedStringValue) {\n        TypedStringValue typedValue=((TypedStringValue)arg);\n        if (typedValue.hasTargetType()) {\n          return typedValue.getTargetType();\n        }\n        try {\n          Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n          if (resolvedType != null) {\n            return resolvedType;\n          }\n        }\n catch (        ClassNotFoundException ex) {\n          throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n        }\n      }\n else       if (arg != null && !(arg instanceof BeanMetadataElement)) {\n        return arg.getClass();\n      }\n      return method.getReturnType();\n    }\n else     if (methodParameterType instanceof ParameterizedType) {\n      ParameterizedType parameterizedType=(ParameterizedType)methodParameterType;\n      Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();\n      for (      Type typeArg : actualTypeArguments) {\n        if (typeArg.equals(genericReturnType)) {\n          if (arg instanceof Class) {\n            return (Class<?>)arg;\n          }\n else {\n            String className=null;\n            if (arg instanceof String) {\n              className=(String)arg;\n            }\n else             if (arg instanceof TypedStringValue) {\n              TypedStringValue typedValue=((TypedStringValue)arg);\n              String targetTypeName=typedValue.getTargetTypeName();\n              if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n                className=typedValue.getValue();\n              }\n            }\n            if (className != null) {\n              try {\n                return ClassUtils.forName(className,classLoader);\n              }\n catch (              ClassNotFoundException ex) {\n                throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n              }\n            }\n            return method.getReturnType();\n          }\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 268,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3325,
        "startLineNumber" : 187,
        "startColumnNumber" : 68,
        "endLineNumber" : 275,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Assert.notNull(method,\"Method must not be null\");\n  Assert.notNull(args,\"Argument array must not be null\");\n  TypeVariable<Method>[] declaredTypeVariables=method.getTypeParameters();\n  Type genericReturnType=method.getGenericReturnType();\n  Type[] methodParameterTypes=method.getGenericParameterTypes();\n  Assert.isTrue(args.length == methodParameterTypes.length,\"Argument array does not match parameter count\");\n  boolean locallyDeclaredTypeVariableMatchesReturnType=false;\n  for (  TypeVariable<Method> currentTypeVariable : declaredTypeVariables) {\n    if (currentTypeVariable.equals(genericReturnType)) {\n      locallyDeclaredTypeVariableMatchesReturnType=true;\n      break;\n    }\n  }\n  if (locallyDeclaredTypeVariableMatchesReturnType) {\n    for (int i=0; i < methodParameterTypes.length; i++) {\n      Type methodParameterType=methodParameterTypes[i];\n      Object arg=args[i];\n      if (methodParameterType.equals(genericReturnType)) {\n        if (arg instanceof TypedStringValue) {\n          TypedStringValue typedValue=((TypedStringValue)arg);\n          if (typedValue.hasTargetType()) {\n            return typedValue.getTargetType();\n          }\n          try {\n            Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n            if (resolvedType != null) {\n              return resolvedType;\n            }\n          }\n catch (          ClassNotFoundException ex) {\n            throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n          }\n        }\n else         if (arg != null && !(arg instanceof BeanMetadataElement)) {\n          return arg.getClass();\n        }\n        return method.getReturnType();\n      }\n else       if (methodParameterType instanceof ParameterizedType) {\n        ParameterizedType parameterizedType=(ParameterizedType)methodParameterType;\n        Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();\n        for (        Type typeArg : actualTypeArguments) {\n          if (typeArg.equals(genericReturnType)) {\n            if (arg instanceof Class) {\n              return (Class<?>)arg;\n            }\n else {\n              String className=null;\n              if (arg instanceof String) {\n                className=(String)arg;\n              }\n else               if (arg instanceof TypedStringValue) {\n                TypedStringValue typedValue=((TypedStringValue)arg);\n                String targetTypeName=typedValue.getTargetTypeName();\n                if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n                  className=typedValue.getValue();\n                }\n              }\n              if (className != null) {\n                try {\n                  return ClassUtils.forName(className,classLoader);\n                }\n catch (                ClassNotFoundException ex) {\n                  throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n                }\n              }\n              return method.getReturnType();\n            }\n          }\n        }\n      }\n    }\n  }\n  return method.getReturnType();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 354,
      "astHeight" : 24
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5140,
        "startLineNumber" : 155,
        "startColumnNumber" : 1,
        "endLineNumber" : 275,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Determine the target type for the generic return type of the given <em>generic factory method</em>, where formal type variables are declared on the given method itself. <p>For example, given a factory method with the following signature, if {@code resolveReturnTypeForFactoryMethod()} is invoked with the reflectedmethod for  {@code createProxy()} and an {@code Object[]} array containing{@code MyService.class},  {@code resolveReturnTypeForFactoryMethod()} willinfer that the target return type is  {@code MyService}. <pre class=\"code\"> {@code public static <T> T createProxy(Class<T> clazz)}</pre> <h4>Possible Return Values</h4> <ul> <li>the target return type, if it can be inferred</li> <li>the  {@linkplain Method#getReturnType() standard return type}, if the given  {@code method} does not declare any {@linkplain Method#getTypeParameters() formal type variables}</li> <li>the  {@linkplain Method#getReturnType() standard return type}, if the target return type cannot be inferred (e.g., due to type erasure)</li> <li> {@code null}, if the length of the given arguments array is shorter than the length of the  {@linkplain Method#getGenericParameterTypes() formal argument list} for the givenmethod</li> </ul>\n * @param method the method to introspect (never {@code null})\n * @param args the arguments that will be supplied to the method when it isinvoked (never  {@code null})\n * @param classLoader the ClassLoader to resolve class names against,if necessary (never  {@code null})\n * @return the resolved target return type or the standard method return type\n * @since 3.2.5\n */\npublic static Class<?> resolveReturnTypeForFactoryMethod(Method method,Object[] args,@Nullable ClassLoader classLoader){\n  Assert.notNull(method,\"Method must not be null\");\n  Assert.notNull(args,\"Argument array must not be null\");\n  TypeVariable<Method>[] declaredTypeVariables=method.getTypeParameters();\n  Type genericReturnType=method.getGenericReturnType();\n  Type[] methodParameterTypes=method.getGenericParameterTypes();\n  Assert.isTrue(args.length == methodParameterTypes.length,\"Argument array does not match parameter count\");\n  boolean locallyDeclaredTypeVariableMatchesReturnType=false;\n  for (  TypeVariable<Method> currentTypeVariable : declaredTypeVariables) {\n    if (currentTypeVariable.equals(genericReturnType)) {\n      locallyDeclaredTypeVariableMatchesReturnType=true;\n      break;\n    }\n  }\n  if (locallyDeclaredTypeVariableMatchesReturnType) {\n    for (int i=0; i < methodParameterTypes.length; i++) {\n      Type methodParameterType=methodParameterTypes[i];\n      Object arg=args[i];\n      if (methodParameterType.equals(genericReturnType)) {\n        if (arg instanceof TypedStringValue) {\n          TypedStringValue typedValue=((TypedStringValue)arg);\n          if (typedValue.hasTargetType()) {\n            return typedValue.getTargetType();\n          }\n          try {\n            Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n            if (resolvedType != null) {\n              return resolvedType;\n            }\n          }\n catch (          ClassNotFoundException ex) {\n            throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n          }\n        }\n else         if (arg != null && !(arg instanceof BeanMetadataElement)) {\n          return arg.getClass();\n        }\n        return method.getReturnType();\n      }\n else       if (methodParameterType instanceof ParameterizedType) {\n        ParameterizedType parameterizedType=(ParameterizedType)methodParameterType;\n        Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();\n        for (        Type typeArg : actualTypeArguments) {\n          if (typeArg.equals(genericReturnType)) {\n            if (arg instanceof Class) {\n              return (Class<?>)arg;\n            }\n else {\n              String className=null;\n              if (arg instanceof String) {\n                className=(String)arg;\n              }\n else               if (arg instanceof TypedStringValue) {\n                TypedStringValue typedValue=((TypedStringValue)arg);\n                String targetTypeName=typedValue.getTargetTypeName();\n                if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n                  className=typedValue.getValue();\n                }\n              }\n              if (className != null) {\n                try {\n                  return ClassUtils.forName(className,classLoader);\n                }\n catch (                ClassNotFoundException ex) {\n                  throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n                }\n              }\n              return method.getReturnType();\n            }\n          }\n        }\n      }\n    }\n  }\n  return method.getReturnType();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 379,
      "astHeight" : 25
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 214,
        "startColumnNumber" : 10,
        "endLineNumber" : 214,
        "endColumnNumber" : 36
      },
      "nodeContext" : "typedValue.hasTargetType()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.springframework.beans.factory.config.TypedStringValue"
  }, {
    "nodeContext" : "typedValue",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 215,
      "startColumnNumber" : 14,
      "endLineNumber" : 215,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 215,
        "startColumnNumber" : 14,
        "endLineNumber" : 215,
        "endColumnNumber" : 40
      },
      "nodeContext" : "typedValue.getTargetType()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 215,
        "startColumnNumber" : 7,
        "endLineNumber" : 215,
        "endColumnNumber" : 41
      },
      "nodeContext" : "return typedValue.getTargetType();\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 214,
        "startColumnNumber" : 38,
        "endLineNumber" : 216,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  return typedValue.getTargetType();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 214,
        "startColumnNumber" : 6,
        "endLineNumber" : 216,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (typedValue.hasTargetType()) {\n  return typedValue.getTargetType();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 531,
        "startLineNumber" : 212,
        "startColumnNumber" : 42,
        "endLineNumber" : 227,
        "endColumnNumber" : 6
      },
      "nodeContext" : "{\n  TypedStringValue typedValue=((TypedStringValue)arg);\n  if (typedValue.hasTargetType()) {\n    return typedValue.getTargetType();\n  }\n  try {\n    Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n    if (resolvedType != null) {\n      return resolvedType;\n    }\n  }\n catch (  ClassNotFoundException ex) {\n    throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 57,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 738,
        "startLineNumber" : 212,
        "startColumnNumber" : 5,
        "endLineNumber" : 231,
        "endColumnNumber" : 6
      },
      "nodeContext" : "if (arg instanceof TypedStringValue) {\n  TypedStringValue typedValue=((TypedStringValue)arg);\n  if (typedValue.hasTargetType()) {\n    return typedValue.getTargetType();\n  }\n  try {\n    Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n    if (resolvedType != null) {\n      return resolvedType;\n    }\n  }\n catch (  ClassNotFoundException ex) {\n    throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n  }\n}\n else if (arg != null && !(arg instanceof BeanMetadataElement)) {\n  return arg.getClass();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 78,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 787,
        "startLineNumber" : 211,
        "startColumnNumber" : 55,
        "endLineNumber" : 233,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (arg instanceof TypedStringValue) {\n    TypedStringValue typedValue=((TypedStringValue)arg);\n    if (typedValue.hasTargetType()) {\n      return typedValue.getTargetType();\n    }\n    try {\n      Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n      if (resolvedType != null) {\n        return resolvedType;\n      }\n    }\n catch (    ClassNotFoundException ex) {\n      throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n    }\n  }\n else   if (arg != null && !(arg instanceof BeanMetadataElement)) {\n    return arg.getClass();\n  }\n  return method.getReturnType();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 83,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2210,
        "startLineNumber" : 211,
        "startColumnNumber" : 4,
        "endLineNumber" : 269,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (methodParameterType.equals(genericReturnType)) {\n  if (arg instanceof TypedStringValue) {\n    TypedStringValue typedValue=((TypedStringValue)arg);\n    if (typedValue.hasTargetType()) {\n      return typedValue.getTargetType();\n    }\n    try {\n      Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n      if (resolvedType != null) {\n        return resolvedType;\n      }\n    }\n catch (    ClassNotFoundException ex) {\n      throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n    }\n  }\n else   if (arg != null && !(arg instanceof BeanMetadataElement)) {\n    return arg.getClass();\n  }\n  return method.getReturnType();\n}\n else if (methodParameterType instanceof ParameterizedType) {\n  ParameterizedType parameterizedType=(ParameterizedType)methodParameterType;\n  Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();\n  for (  Type typeArg : actualTypeArguments) {\n    if (typeArg.equals(genericReturnType)) {\n      if (arg instanceof Class) {\n        return (Class<?>)arg;\n      }\n else {\n        String className=null;\n        if (arg instanceof String) {\n          className=(String)arg;\n        }\n else         if (arg instanceof TypedStringValue) {\n          TypedStringValue typedValue=((TypedStringValue)arg);\n          String targetTypeName=typedValue.getTargetTypeName();\n          if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n            className=typedValue.getValue();\n          }\n        }\n        if (className != null) {\n          try {\n            return ClassUtils.forName(className,classLoader);\n          }\n catch (          ClassNotFoundException ex) {\n            throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n          }\n        }\n        return method.getReturnType();\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 235,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2303,
        "startLineNumber" : 208,
        "startColumnNumber" : 57,
        "endLineNumber" : 270,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  Type methodParameterType=methodParameterTypes[i];\n  Object arg=args[i];\n  if (methodParameterType.equals(genericReturnType)) {\n    if (arg instanceof TypedStringValue) {\n      TypedStringValue typedValue=((TypedStringValue)arg);\n      if (typedValue.hasTargetType()) {\n        return typedValue.getTargetType();\n      }\n      try {\n        Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n        if (resolvedType != null) {\n          return resolvedType;\n        }\n      }\n catch (      ClassNotFoundException ex) {\n        throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n      }\n    }\n else     if (arg != null && !(arg instanceof BeanMetadataElement)) {\n      return arg.getClass();\n    }\n    return method.getReturnType();\n  }\n else   if (methodParameterType instanceof ParameterizedType) {\n    ParameterizedType parameterizedType=(ParameterizedType)methodParameterType;\n    Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();\n    for (    Type typeArg : actualTypeArguments) {\n      if (typeArg.equals(genericReturnType)) {\n        if (arg instanceof Class) {\n          return (Class<?>)arg;\n        }\n else {\n          String className=null;\n          if (arg instanceof String) {\n            className=(String)arg;\n          }\n else           if (arg instanceof TypedStringValue) {\n            TypedStringValue typedValue=((TypedStringValue)arg);\n            String targetTypeName=typedValue.getTargetTypeName();\n            if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n              className=typedValue.getValue();\n            }\n          }\n          if (className != null) {\n            try {\n              return ClassUtils.forName(className,classLoader);\n            }\n catch (            ClassNotFoundException ex) {\n              throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n            }\n          }\n          return method.getReturnType();\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 252,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2357,
        "startLineNumber" : 208,
        "startColumnNumber" : 3,
        "endLineNumber" : 270,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (int i=0; i < methodParameterTypes.length; i++) {\n  Type methodParameterType=methodParameterTypes[i];\n  Object arg=args[i];\n  if (methodParameterType.equals(genericReturnType)) {\n    if (arg instanceof TypedStringValue) {\n      TypedStringValue typedValue=((TypedStringValue)arg);\n      if (typedValue.hasTargetType()) {\n        return typedValue.getTargetType();\n      }\n      try {\n        Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n        if (resolvedType != null) {\n          return resolvedType;\n        }\n      }\n catch (      ClassNotFoundException ex) {\n        throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n      }\n    }\n else     if (arg != null && !(arg instanceof BeanMetadataElement)) {\n      return arg.getClass();\n    }\n    return method.getReturnType();\n  }\n else   if (methodParameterType instanceof ParameterizedType) {\n    ParameterizedType parameterizedType=(ParameterizedType)methodParameterType;\n    Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();\n    for (    Type typeArg : actualTypeArguments) {\n      if (typeArg.equals(genericReturnType)) {\n        if (arg instanceof Class) {\n          return (Class<?>)arg;\n        }\n else {\n          String className=null;\n          if (arg instanceof String) {\n            className=(String)arg;\n          }\n else           if (arg instanceof TypedStringValue) {\n            TypedStringValue typedValue=((TypedStringValue)arg);\n            String targetTypeName=typedValue.getTargetTypeName();\n            if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n              className=typedValue.getValue();\n            }\n          }\n          if (className != null) {\n            try {\n              return ClassUtils.forName(className,classLoader);\n            }\n catch (            ClassNotFoundException ex) {\n              throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n            }\n          }\n          return method.getReturnType();\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 265,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2366,
        "startLineNumber" : 207,
        "startColumnNumber" : 52,
        "endLineNumber" : 271,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (int i=0; i < methodParameterTypes.length; i++) {\n    Type methodParameterType=methodParameterTypes[i];\n    Object arg=args[i];\n    if (methodParameterType.equals(genericReturnType)) {\n      if (arg instanceof TypedStringValue) {\n        TypedStringValue typedValue=((TypedStringValue)arg);\n        if (typedValue.hasTargetType()) {\n          return typedValue.getTargetType();\n        }\n        try {\n          Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n          if (resolvedType != null) {\n            return resolvedType;\n          }\n        }\n catch (        ClassNotFoundException ex) {\n          throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n        }\n      }\n else       if (arg != null && !(arg instanceof BeanMetadataElement)) {\n        return arg.getClass();\n      }\n      return method.getReturnType();\n    }\n else     if (methodParameterType instanceof ParameterizedType) {\n      ParameterizedType parameterizedType=(ParameterizedType)methodParameterType;\n      Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();\n      for (      Type typeArg : actualTypeArguments) {\n        if (typeArg.equals(genericReturnType)) {\n          if (arg instanceof Class) {\n            return (Class<?>)arg;\n          }\n else {\n            String className=null;\n            if (arg instanceof String) {\n              className=(String)arg;\n            }\n else             if (arg instanceof TypedStringValue) {\n              TypedStringValue typedValue=((TypedStringValue)arg);\n              String targetTypeName=typedValue.getTargetTypeName();\n              if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n                className=typedValue.getValue();\n              }\n            }\n            if (className != null) {\n              try {\n                return ClassUtils.forName(className,classLoader);\n              }\n catch (              ClassNotFoundException ex) {\n                throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n              }\n            }\n            return method.getReturnType();\n          }\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 266,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2416,
        "startLineNumber" : 207,
        "startColumnNumber" : 2,
        "endLineNumber" : 271,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (locallyDeclaredTypeVariableMatchesReturnType) {\n  for (int i=0; i < methodParameterTypes.length; i++) {\n    Type methodParameterType=methodParameterTypes[i];\n    Object arg=args[i];\n    if (methodParameterType.equals(genericReturnType)) {\n      if (arg instanceof TypedStringValue) {\n        TypedStringValue typedValue=((TypedStringValue)arg);\n        if (typedValue.hasTargetType()) {\n          return typedValue.getTargetType();\n        }\n        try {\n          Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n          if (resolvedType != null) {\n            return resolvedType;\n          }\n        }\n catch (        ClassNotFoundException ex) {\n          throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n        }\n      }\n else       if (arg != null && !(arg instanceof BeanMetadataElement)) {\n        return arg.getClass();\n      }\n      return method.getReturnType();\n    }\n else     if (methodParameterType instanceof ParameterizedType) {\n      ParameterizedType parameterizedType=(ParameterizedType)methodParameterType;\n      Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();\n      for (      Type typeArg : actualTypeArguments) {\n        if (typeArg.equals(genericReturnType)) {\n          if (arg instanceof Class) {\n            return (Class<?>)arg;\n          }\n else {\n            String className=null;\n            if (arg instanceof String) {\n              className=(String)arg;\n            }\n else             if (arg instanceof TypedStringValue) {\n              TypedStringValue typedValue=((TypedStringValue)arg);\n              String targetTypeName=typedValue.getTargetTypeName();\n              if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n                className=typedValue.getValue();\n              }\n            }\n            if (className != null) {\n              try {\n                return ClassUtils.forName(className,classLoader);\n              }\n catch (              ClassNotFoundException ex) {\n                throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n              }\n            }\n            return method.getReturnType();\n          }\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 268,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3325,
        "startLineNumber" : 187,
        "startColumnNumber" : 68,
        "endLineNumber" : 275,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Assert.notNull(method,\"Method must not be null\");\n  Assert.notNull(args,\"Argument array must not be null\");\n  TypeVariable<Method>[] declaredTypeVariables=method.getTypeParameters();\n  Type genericReturnType=method.getGenericReturnType();\n  Type[] methodParameterTypes=method.getGenericParameterTypes();\n  Assert.isTrue(args.length == methodParameterTypes.length,\"Argument array does not match parameter count\");\n  boolean locallyDeclaredTypeVariableMatchesReturnType=false;\n  for (  TypeVariable<Method> currentTypeVariable : declaredTypeVariables) {\n    if (currentTypeVariable.equals(genericReturnType)) {\n      locallyDeclaredTypeVariableMatchesReturnType=true;\n      break;\n    }\n  }\n  if (locallyDeclaredTypeVariableMatchesReturnType) {\n    for (int i=0; i < methodParameterTypes.length; i++) {\n      Type methodParameterType=methodParameterTypes[i];\n      Object arg=args[i];\n      if (methodParameterType.equals(genericReturnType)) {\n        if (arg instanceof TypedStringValue) {\n          TypedStringValue typedValue=((TypedStringValue)arg);\n          if (typedValue.hasTargetType()) {\n            return typedValue.getTargetType();\n          }\n          try {\n            Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n            if (resolvedType != null) {\n              return resolvedType;\n            }\n          }\n catch (          ClassNotFoundException ex) {\n            throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n          }\n        }\n else         if (arg != null && !(arg instanceof BeanMetadataElement)) {\n          return arg.getClass();\n        }\n        return method.getReturnType();\n      }\n else       if (methodParameterType instanceof ParameterizedType) {\n        ParameterizedType parameterizedType=(ParameterizedType)methodParameterType;\n        Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();\n        for (        Type typeArg : actualTypeArguments) {\n          if (typeArg.equals(genericReturnType)) {\n            if (arg instanceof Class) {\n              return (Class<?>)arg;\n            }\n else {\n              String className=null;\n              if (arg instanceof String) {\n                className=(String)arg;\n              }\n else               if (arg instanceof TypedStringValue) {\n                TypedStringValue typedValue=((TypedStringValue)arg);\n                String targetTypeName=typedValue.getTargetTypeName();\n                if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n                  className=typedValue.getValue();\n                }\n              }\n              if (className != null) {\n                try {\n                  return ClassUtils.forName(className,classLoader);\n                }\n catch (                ClassNotFoundException ex) {\n                  throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n                }\n              }\n              return method.getReturnType();\n            }\n          }\n        }\n      }\n    }\n  }\n  return method.getReturnType();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 354,
      "astHeight" : 24
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5140,
        "startLineNumber" : 155,
        "startColumnNumber" : 1,
        "endLineNumber" : 275,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Determine the target type for the generic return type of the given <em>generic factory method</em>, where formal type variables are declared on the given method itself. <p>For example, given a factory method with the following signature, if {@code resolveReturnTypeForFactoryMethod()} is invoked with the reflectedmethod for  {@code createProxy()} and an {@code Object[]} array containing{@code MyService.class},  {@code resolveReturnTypeForFactoryMethod()} willinfer that the target return type is  {@code MyService}. <pre class=\"code\"> {@code public static <T> T createProxy(Class<T> clazz)}</pre> <h4>Possible Return Values</h4> <ul> <li>the target return type, if it can be inferred</li> <li>the  {@linkplain Method#getReturnType() standard return type}, if the given  {@code method} does not declare any {@linkplain Method#getTypeParameters() formal type variables}</li> <li>the  {@linkplain Method#getReturnType() standard return type}, if the target return type cannot be inferred (e.g., due to type erasure)</li> <li> {@code null}, if the length of the given arguments array is shorter than the length of the  {@linkplain Method#getGenericParameterTypes() formal argument list} for the givenmethod</li> </ul>\n * @param method the method to introspect (never {@code null})\n * @param args the arguments that will be supplied to the method when it isinvoked (never  {@code null})\n * @param classLoader the ClassLoader to resolve class names against,if necessary (never  {@code null})\n * @return the resolved target return type or the standard method return type\n * @since 3.2.5\n */\npublic static Class<?> resolveReturnTypeForFactoryMethod(Method method,Object[] args,@Nullable ClassLoader classLoader){\n  Assert.notNull(method,\"Method must not be null\");\n  Assert.notNull(args,\"Argument array must not be null\");\n  TypeVariable<Method>[] declaredTypeVariables=method.getTypeParameters();\n  Type genericReturnType=method.getGenericReturnType();\n  Type[] methodParameterTypes=method.getGenericParameterTypes();\n  Assert.isTrue(args.length == methodParameterTypes.length,\"Argument array does not match parameter count\");\n  boolean locallyDeclaredTypeVariableMatchesReturnType=false;\n  for (  TypeVariable<Method> currentTypeVariable : declaredTypeVariables) {\n    if (currentTypeVariable.equals(genericReturnType)) {\n      locallyDeclaredTypeVariableMatchesReturnType=true;\n      break;\n    }\n  }\n  if (locallyDeclaredTypeVariableMatchesReturnType) {\n    for (int i=0; i < methodParameterTypes.length; i++) {\n      Type methodParameterType=methodParameterTypes[i];\n      Object arg=args[i];\n      if (methodParameterType.equals(genericReturnType)) {\n        if (arg instanceof TypedStringValue) {\n          TypedStringValue typedValue=((TypedStringValue)arg);\n          if (typedValue.hasTargetType()) {\n            return typedValue.getTargetType();\n          }\n          try {\n            Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n            if (resolvedType != null) {\n              return resolvedType;\n            }\n          }\n catch (          ClassNotFoundException ex) {\n            throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n          }\n        }\n else         if (arg != null && !(arg instanceof BeanMetadataElement)) {\n          return arg.getClass();\n        }\n        return method.getReturnType();\n      }\n else       if (methodParameterType instanceof ParameterizedType) {\n        ParameterizedType parameterizedType=(ParameterizedType)methodParameterType;\n        Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();\n        for (        Type typeArg : actualTypeArguments) {\n          if (typeArg.equals(genericReturnType)) {\n            if (arg instanceof Class) {\n              return (Class<?>)arg;\n            }\n else {\n              String className=null;\n              if (arg instanceof String) {\n                className=(String)arg;\n              }\n else               if (arg instanceof TypedStringValue) {\n                TypedStringValue typedValue=((TypedStringValue)arg);\n                String targetTypeName=typedValue.getTargetTypeName();\n                if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n                  className=typedValue.getValue();\n                }\n              }\n              if (className != null) {\n                try {\n                  return ClassUtils.forName(className,classLoader);\n                }\n catch (                ClassNotFoundException ex) {\n                  throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n                }\n              }\n              return method.getReturnType();\n            }\n          }\n        }\n      }\n    }\n  }\n  return method.getReturnType();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 379,
      "astHeight" : 25
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 215,
        "startColumnNumber" : 7,
        "endLineNumber" : 215,
        "endColumnNumber" : 41
      },
      "nodeContext" : "return typedValue.getTargetType();\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.springframework.beans.factory.config.TypedStringValue"
  }, {
    "nodeContext" : "typedValue",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 218,
      "startColumnNumber" : 31,
      "endLineNumber" : 218,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 218,
        "startColumnNumber" : 31,
        "endLineNumber" : 218,
        "endColumnNumber" : 72
      },
      "nodeContext" : "typedValue.resolveTargetType(classLoader)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 218,
        "startColumnNumber" : 16,
        "endLineNumber" : 218,
        "endColumnNumber" : 72
      },
      "nodeContext" : "resolvedType=typedValue.resolveTargetType(classLoader)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 218,
        "startColumnNumber" : 7,
        "endLineNumber" : 218,
        "endColumnNumber" : 73
      },
      "nodeContext" : "Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 156,
        "startLineNumber" : 217,
        "startColumnNumber" : 10,
        "endLineNumber" : 222,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n  if (resolvedType != null) {\n    return resolvedType;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 364,
        "startLineNumber" : 217,
        "startColumnNumber" : 6,
        "endLineNumber" : 226,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try {\n  Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n  if (resolvedType != null) {\n    return resolvedType;\n  }\n}\n catch (ClassNotFoundException ex) {\n  throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 37,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 531,
        "startLineNumber" : 212,
        "startColumnNumber" : 42,
        "endLineNumber" : 227,
        "endColumnNumber" : 6
      },
      "nodeContext" : "{\n  TypedStringValue typedValue=((TypedStringValue)arg);\n  if (typedValue.hasTargetType()) {\n    return typedValue.getTargetType();\n  }\n  try {\n    Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n    if (resolvedType != null) {\n      return resolvedType;\n    }\n  }\n catch (  ClassNotFoundException ex) {\n    throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 57,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 738,
        "startLineNumber" : 212,
        "startColumnNumber" : 5,
        "endLineNumber" : 231,
        "endColumnNumber" : 6
      },
      "nodeContext" : "if (arg instanceof TypedStringValue) {\n  TypedStringValue typedValue=((TypedStringValue)arg);\n  if (typedValue.hasTargetType()) {\n    return typedValue.getTargetType();\n  }\n  try {\n    Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n    if (resolvedType != null) {\n      return resolvedType;\n    }\n  }\n catch (  ClassNotFoundException ex) {\n    throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n  }\n}\n else if (arg != null && !(arg instanceof BeanMetadataElement)) {\n  return arg.getClass();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 78,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 787,
        "startLineNumber" : 211,
        "startColumnNumber" : 55,
        "endLineNumber" : 233,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (arg instanceof TypedStringValue) {\n    TypedStringValue typedValue=((TypedStringValue)arg);\n    if (typedValue.hasTargetType()) {\n      return typedValue.getTargetType();\n    }\n    try {\n      Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n      if (resolvedType != null) {\n        return resolvedType;\n      }\n    }\n catch (    ClassNotFoundException ex) {\n      throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n    }\n  }\n else   if (arg != null && !(arg instanceof BeanMetadataElement)) {\n    return arg.getClass();\n  }\n  return method.getReturnType();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 83,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2210,
        "startLineNumber" : 211,
        "startColumnNumber" : 4,
        "endLineNumber" : 269,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (methodParameterType.equals(genericReturnType)) {\n  if (arg instanceof TypedStringValue) {\n    TypedStringValue typedValue=((TypedStringValue)arg);\n    if (typedValue.hasTargetType()) {\n      return typedValue.getTargetType();\n    }\n    try {\n      Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n      if (resolvedType != null) {\n        return resolvedType;\n      }\n    }\n catch (    ClassNotFoundException ex) {\n      throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n    }\n  }\n else   if (arg != null && !(arg instanceof BeanMetadataElement)) {\n    return arg.getClass();\n  }\n  return method.getReturnType();\n}\n else if (methodParameterType instanceof ParameterizedType) {\n  ParameterizedType parameterizedType=(ParameterizedType)methodParameterType;\n  Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();\n  for (  Type typeArg : actualTypeArguments) {\n    if (typeArg.equals(genericReturnType)) {\n      if (arg instanceof Class) {\n        return (Class<?>)arg;\n      }\n else {\n        String className=null;\n        if (arg instanceof String) {\n          className=(String)arg;\n        }\n else         if (arg instanceof TypedStringValue) {\n          TypedStringValue typedValue=((TypedStringValue)arg);\n          String targetTypeName=typedValue.getTargetTypeName();\n          if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n            className=typedValue.getValue();\n          }\n        }\n        if (className != null) {\n          try {\n            return ClassUtils.forName(className,classLoader);\n          }\n catch (          ClassNotFoundException ex) {\n            throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n          }\n        }\n        return method.getReturnType();\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 235,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2303,
        "startLineNumber" : 208,
        "startColumnNumber" : 57,
        "endLineNumber" : 270,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  Type methodParameterType=methodParameterTypes[i];\n  Object arg=args[i];\n  if (methodParameterType.equals(genericReturnType)) {\n    if (arg instanceof TypedStringValue) {\n      TypedStringValue typedValue=((TypedStringValue)arg);\n      if (typedValue.hasTargetType()) {\n        return typedValue.getTargetType();\n      }\n      try {\n        Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n        if (resolvedType != null) {\n          return resolvedType;\n        }\n      }\n catch (      ClassNotFoundException ex) {\n        throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n      }\n    }\n else     if (arg != null && !(arg instanceof BeanMetadataElement)) {\n      return arg.getClass();\n    }\n    return method.getReturnType();\n  }\n else   if (methodParameterType instanceof ParameterizedType) {\n    ParameterizedType parameterizedType=(ParameterizedType)methodParameterType;\n    Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();\n    for (    Type typeArg : actualTypeArguments) {\n      if (typeArg.equals(genericReturnType)) {\n        if (arg instanceof Class) {\n          return (Class<?>)arg;\n        }\n else {\n          String className=null;\n          if (arg instanceof String) {\n            className=(String)arg;\n          }\n else           if (arg instanceof TypedStringValue) {\n            TypedStringValue typedValue=((TypedStringValue)arg);\n            String targetTypeName=typedValue.getTargetTypeName();\n            if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n              className=typedValue.getValue();\n            }\n          }\n          if (className != null) {\n            try {\n              return ClassUtils.forName(className,classLoader);\n            }\n catch (            ClassNotFoundException ex) {\n              throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n            }\n          }\n          return method.getReturnType();\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 252,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2357,
        "startLineNumber" : 208,
        "startColumnNumber" : 3,
        "endLineNumber" : 270,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (int i=0; i < methodParameterTypes.length; i++) {\n  Type methodParameterType=methodParameterTypes[i];\n  Object arg=args[i];\n  if (methodParameterType.equals(genericReturnType)) {\n    if (arg instanceof TypedStringValue) {\n      TypedStringValue typedValue=((TypedStringValue)arg);\n      if (typedValue.hasTargetType()) {\n        return typedValue.getTargetType();\n      }\n      try {\n        Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n        if (resolvedType != null) {\n          return resolvedType;\n        }\n      }\n catch (      ClassNotFoundException ex) {\n        throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n      }\n    }\n else     if (arg != null && !(arg instanceof BeanMetadataElement)) {\n      return arg.getClass();\n    }\n    return method.getReturnType();\n  }\n else   if (methodParameterType instanceof ParameterizedType) {\n    ParameterizedType parameterizedType=(ParameterizedType)methodParameterType;\n    Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();\n    for (    Type typeArg : actualTypeArguments) {\n      if (typeArg.equals(genericReturnType)) {\n        if (arg instanceof Class) {\n          return (Class<?>)arg;\n        }\n else {\n          String className=null;\n          if (arg instanceof String) {\n            className=(String)arg;\n          }\n else           if (arg instanceof TypedStringValue) {\n            TypedStringValue typedValue=((TypedStringValue)arg);\n            String targetTypeName=typedValue.getTargetTypeName();\n            if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n              className=typedValue.getValue();\n            }\n          }\n          if (className != null) {\n            try {\n              return ClassUtils.forName(className,classLoader);\n            }\n catch (            ClassNotFoundException ex) {\n              throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n            }\n          }\n          return method.getReturnType();\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 265,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2366,
        "startLineNumber" : 207,
        "startColumnNumber" : 52,
        "endLineNumber" : 271,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (int i=0; i < methodParameterTypes.length; i++) {\n    Type methodParameterType=methodParameterTypes[i];\n    Object arg=args[i];\n    if (methodParameterType.equals(genericReturnType)) {\n      if (arg instanceof TypedStringValue) {\n        TypedStringValue typedValue=((TypedStringValue)arg);\n        if (typedValue.hasTargetType()) {\n          return typedValue.getTargetType();\n        }\n        try {\n          Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n          if (resolvedType != null) {\n            return resolvedType;\n          }\n        }\n catch (        ClassNotFoundException ex) {\n          throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n        }\n      }\n else       if (arg != null && !(arg instanceof BeanMetadataElement)) {\n        return arg.getClass();\n      }\n      return method.getReturnType();\n    }\n else     if (methodParameterType instanceof ParameterizedType) {\n      ParameterizedType parameterizedType=(ParameterizedType)methodParameterType;\n      Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();\n      for (      Type typeArg : actualTypeArguments) {\n        if (typeArg.equals(genericReturnType)) {\n          if (arg instanceof Class) {\n            return (Class<?>)arg;\n          }\n else {\n            String className=null;\n            if (arg instanceof String) {\n              className=(String)arg;\n            }\n else             if (arg instanceof TypedStringValue) {\n              TypedStringValue typedValue=((TypedStringValue)arg);\n              String targetTypeName=typedValue.getTargetTypeName();\n              if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n                className=typedValue.getValue();\n              }\n            }\n            if (className != null) {\n              try {\n                return ClassUtils.forName(className,classLoader);\n              }\n catch (              ClassNotFoundException ex) {\n                throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n              }\n            }\n            return method.getReturnType();\n          }\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 266,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2416,
        "startLineNumber" : 207,
        "startColumnNumber" : 2,
        "endLineNumber" : 271,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (locallyDeclaredTypeVariableMatchesReturnType) {\n  for (int i=0; i < methodParameterTypes.length; i++) {\n    Type methodParameterType=methodParameterTypes[i];\n    Object arg=args[i];\n    if (methodParameterType.equals(genericReturnType)) {\n      if (arg instanceof TypedStringValue) {\n        TypedStringValue typedValue=((TypedStringValue)arg);\n        if (typedValue.hasTargetType()) {\n          return typedValue.getTargetType();\n        }\n        try {\n          Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n          if (resolvedType != null) {\n            return resolvedType;\n          }\n        }\n catch (        ClassNotFoundException ex) {\n          throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n        }\n      }\n else       if (arg != null && !(arg instanceof BeanMetadataElement)) {\n        return arg.getClass();\n      }\n      return method.getReturnType();\n    }\n else     if (methodParameterType instanceof ParameterizedType) {\n      ParameterizedType parameterizedType=(ParameterizedType)methodParameterType;\n      Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();\n      for (      Type typeArg : actualTypeArguments) {\n        if (typeArg.equals(genericReturnType)) {\n          if (arg instanceof Class) {\n            return (Class<?>)arg;\n          }\n else {\n            String className=null;\n            if (arg instanceof String) {\n              className=(String)arg;\n            }\n else             if (arg instanceof TypedStringValue) {\n              TypedStringValue typedValue=((TypedStringValue)arg);\n              String targetTypeName=typedValue.getTargetTypeName();\n              if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n                className=typedValue.getValue();\n              }\n            }\n            if (className != null) {\n              try {\n                return ClassUtils.forName(className,classLoader);\n              }\n catch (              ClassNotFoundException ex) {\n                throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n              }\n            }\n            return method.getReturnType();\n          }\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 268,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3325,
        "startLineNumber" : 187,
        "startColumnNumber" : 68,
        "endLineNumber" : 275,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Assert.notNull(method,\"Method must not be null\");\n  Assert.notNull(args,\"Argument array must not be null\");\n  TypeVariable<Method>[] declaredTypeVariables=method.getTypeParameters();\n  Type genericReturnType=method.getGenericReturnType();\n  Type[] methodParameterTypes=method.getGenericParameterTypes();\n  Assert.isTrue(args.length == methodParameterTypes.length,\"Argument array does not match parameter count\");\n  boolean locallyDeclaredTypeVariableMatchesReturnType=false;\n  for (  TypeVariable<Method> currentTypeVariable : declaredTypeVariables) {\n    if (currentTypeVariable.equals(genericReturnType)) {\n      locallyDeclaredTypeVariableMatchesReturnType=true;\n      break;\n    }\n  }\n  if (locallyDeclaredTypeVariableMatchesReturnType) {\n    for (int i=0; i < methodParameterTypes.length; i++) {\n      Type methodParameterType=methodParameterTypes[i];\n      Object arg=args[i];\n      if (methodParameterType.equals(genericReturnType)) {\n        if (arg instanceof TypedStringValue) {\n          TypedStringValue typedValue=((TypedStringValue)arg);\n          if (typedValue.hasTargetType()) {\n            return typedValue.getTargetType();\n          }\n          try {\n            Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n            if (resolvedType != null) {\n              return resolvedType;\n            }\n          }\n catch (          ClassNotFoundException ex) {\n            throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n          }\n        }\n else         if (arg != null && !(arg instanceof BeanMetadataElement)) {\n          return arg.getClass();\n        }\n        return method.getReturnType();\n      }\n else       if (methodParameterType instanceof ParameterizedType) {\n        ParameterizedType parameterizedType=(ParameterizedType)methodParameterType;\n        Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();\n        for (        Type typeArg : actualTypeArguments) {\n          if (typeArg.equals(genericReturnType)) {\n            if (arg instanceof Class) {\n              return (Class<?>)arg;\n            }\n else {\n              String className=null;\n              if (arg instanceof String) {\n                className=(String)arg;\n              }\n else               if (arg instanceof TypedStringValue) {\n                TypedStringValue typedValue=((TypedStringValue)arg);\n                String targetTypeName=typedValue.getTargetTypeName();\n                if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n                  className=typedValue.getValue();\n                }\n              }\n              if (className != null) {\n                try {\n                  return ClassUtils.forName(className,classLoader);\n                }\n catch (                ClassNotFoundException ex) {\n                  throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n                }\n              }\n              return method.getReturnType();\n            }\n          }\n        }\n      }\n    }\n  }\n  return method.getReturnType();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 354,
      "astHeight" : 24
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5140,
        "startLineNumber" : 155,
        "startColumnNumber" : 1,
        "endLineNumber" : 275,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Determine the target type for the generic return type of the given <em>generic factory method</em>, where formal type variables are declared on the given method itself. <p>For example, given a factory method with the following signature, if {@code resolveReturnTypeForFactoryMethod()} is invoked with the reflectedmethod for  {@code createProxy()} and an {@code Object[]} array containing{@code MyService.class},  {@code resolveReturnTypeForFactoryMethod()} willinfer that the target return type is  {@code MyService}. <pre class=\"code\"> {@code public static <T> T createProxy(Class<T> clazz)}</pre> <h4>Possible Return Values</h4> <ul> <li>the target return type, if it can be inferred</li> <li>the  {@linkplain Method#getReturnType() standard return type}, if the given  {@code method} does not declare any {@linkplain Method#getTypeParameters() formal type variables}</li> <li>the  {@linkplain Method#getReturnType() standard return type}, if the target return type cannot be inferred (e.g., due to type erasure)</li> <li> {@code null}, if the length of the given arguments array is shorter than the length of the  {@linkplain Method#getGenericParameterTypes() formal argument list} for the givenmethod</li> </ul>\n * @param method the method to introspect (never {@code null})\n * @param args the arguments that will be supplied to the method when it isinvoked (never  {@code null})\n * @param classLoader the ClassLoader to resolve class names against,if necessary (never  {@code null})\n * @return the resolved target return type or the standard method return type\n * @since 3.2.5\n */\npublic static Class<?> resolveReturnTypeForFactoryMethod(Method method,Object[] args,@Nullable ClassLoader classLoader){\n  Assert.notNull(method,\"Method must not be null\");\n  Assert.notNull(args,\"Argument array must not be null\");\n  TypeVariable<Method>[] declaredTypeVariables=method.getTypeParameters();\n  Type genericReturnType=method.getGenericReturnType();\n  Type[] methodParameterTypes=method.getGenericParameterTypes();\n  Assert.isTrue(args.length == methodParameterTypes.length,\"Argument array does not match parameter count\");\n  boolean locallyDeclaredTypeVariableMatchesReturnType=false;\n  for (  TypeVariable<Method> currentTypeVariable : declaredTypeVariables) {\n    if (currentTypeVariable.equals(genericReturnType)) {\n      locallyDeclaredTypeVariableMatchesReturnType=true;\n      break;\n    }\n  }\n  if (locallyDeclaredTypeVariableMatchesReturnType) {\n    for (int i=0; i < methodParameterTypes.length; i++) {\n      Type methodParameterType=methodParameterTypes[i];\n      Object arg=args[i];\n      if (methodParameterType.equals(genericReturnType)) {\n        if (arg instanceof TypedStringValue) {\n          TypedStringValue typedValue=((TypedStringValue)arg);\n          if (typedValue.hasTargetType()) {\n            return typedValue.getTargetType();\n          }\n          try {\n            Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n            if (resolvedType != null) {\n              return resolvedType;\n            }\n          }\n catch (          ClassNotFoundException ex) {\n            throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n          }\n        }\n else         if (arg != null && !(arg instanceof BeanMetadataElement)) {\n          return arg.getClass();\n        }\n        return method.getReturnType();\n      }\n else       if (methodParameterType instanceof ParameterizedType) {\n        ParameterizedType parameterizedType=(ParameterizedType)methodParameterType;\n        Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();\n        for (        Type typeArg : actualTypeArguments) {\n          if (typeArg.equals(genericReturnType)) {\n            if (arg instanceof Class) {\n              return (Class<?>)arg;\n            }\n else {\n              String className=null;\n              if (arg instanceof String) {\n                className=(String)arg;\n              }\n else               if (arg instanceof TypedStringValue) {\n                TypedStringValue typedValue=((TypedStringValue)arg);\n                String targetTypeName=typedValue.getTargetTypeName();\n                if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n                  className=typedValue.getValue();\n                }\n              }\n              if (className != null) {\n                try {\n                  return ClassUtils.forName(className,classLoader);\n                }\n catch (                ClassNotFoundException ex) {\n                  throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n                }\n              }\n              return method.getReturnType();\n            }\n          }\n        }\n      }\n    }\n  }\n  return method.getReturnType();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 379,
      "astHeight" : 25
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 218,
        "startColumnNumber" : 7,
        "endLineNumber" : 218,
        "endColumnNumber" : 73
      },
      "nodeContext" : "Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.springframework.beans.factory.config.TypedStringValue"
  }, {
    "nodeContext" : "typedValue",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 225,
      "startColumnNumber" : 9,
      "endLineNumber" : 225,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 225,
        "startColumnNumber" : 9,
        "endLineNumber" : 225,
        "endColumnNumber" : 39
      },
      "nodeContext" : "typedValue.getTargetTypeName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 224,
        "startColumnNumber" : 39,
        "endLineNumber" : 225,
        "endColumnNumber" : 73
      },
      "nodeContext" : "\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 139,
        "startLineNumber" : 224,
        "startColumnNumber" : 13,
        "endLineNumber" : 225,
        "endColumnNumber" : 78
      },
      "nodeContext" : "new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 146,
        "startLineNumber" : 224,
        "startColumnNumber" : 7,
        "endLineNumber" : 225,
        "endColumnNumber" : 79
      },
      "nodeContext" : "throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 163,
        "startLineNumber" : 223,
        "startColumnNumber" : 40,
        "endLineNumber" : 226,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 197,
        "startLineNumber" : 223,
        "startColumnNumber" : 6,
        "endLineNumber" : 226,
        "endColumnNumber" : 7
      },
      "nodeContext" : "catch (ClassNotFoundException ex) {\n  throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 364,
        "startLineNumber" : 217,
        "startColumnNumber" : 6,
        "endLineNumber" : 226,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try {\n  Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n  if (resolvedType != null) {\n    return resolvedType;\n  }\n}\n catch (ClassNotFoundException ex) {\n  throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 37,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 531,
        "startLineNumber" : 212,
        "startColumnNumber" : 42,
        "endLineNumber" : 227,
        "endColumnNumber" : 6
      },
      "nodeContext" : "{\n  TypedStringValue typedValue=((TypedStringValue)arg);\n  if (typedValue.hasTargetType()) {\n    return typedValue.getTargetType();\n  }\n  try {\n    Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n    if (resolvedType != null) {\n      return resolvedType;\n    }\n  }\n catch (  ClassNotFoundException ex) {\n    throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 57,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 738,
        "startLineNumber" : 212,
        "startColumnNumber" : 5,
        "endLineNumber" : 231,
        "endColumnNumber" : 6
      },
      "nodeContext" : "if (arg instanceof TypedStringValue) {\n  TypedStringValue typedValue=((TypedStringValue)arg);\n  if (typedValue.hasTargetType()) {\n    return typedValue.getTargetType();\n  }\n  try {\n    Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n    if (resolvedType != null) {\n      return resolvedType;\n    }\n  }\n catch (  ClassNotFoundException ex) {\n    throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n  }\n}\n else if (arg != null && !(arg instanceof BeanMetadataElement)) {\n  return arg.getClass();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 78,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 787,
        "startLineNumber" : 211,
        "startColumnNumber" : 55,
        "endLineNumber" : 233,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (arg instanceof TypedStringValue) {\n    TypedStringValue typedValue=((TypedStringValue)arg);\n    if (typedValue.hasTargetType()) {\n      return typedValue.getTargetType();\n    }\n    try {\n      Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n      if (resolvedType != null) {\n        return resolvedType;\n      }\n    }\n catch (    ClassNotFoundException ex) {\n      throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n    }\n  }\n else   if (arg != null && !(arg instanceof BeanMetadataElement)) {\n    return arg.getClass();\n  }\n  return method.getReturnType();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 83,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2210,
        "startLineNumber" : 211,
        "startColumnNumber" : 4,
        "endLineNumber" : 269,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (methodParameterType.equals(genericReturnType)) {\n  if (arg instanceof TypedStringValue) {\n    TypedStringValue typedValue=((TypedStringValue)arg);\n    if (typedValue.hasTargetType()) {\n      return typedValue.getTargetType();\n    }\n    try {\n      Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n      if (resolvedType != null) {\n        return resolvedType;\n      }\n    }\n catch (    ClassNotFoundException ex) {\n      throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n    }\n  }\n else   if (arg != null && !(arg instanceof BeanMetadataElement)) {\n    return arg.getClass();\n  }\n  return method.getReturnType();\n}\n else if (methodParameterType instanceof ParameterizedType) {\n  ParameterizedType parameterizedType=(ParameterizedType)methodParameterType;\n  Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();\n  for (  Type typeArg : actualTypeArguments) {\n    if (typeArg.equals(genericReturnType)) {\n      if (arg instanceof Class) {\n        return (Class<?>)arg;\n      }\n else {\n        String className=null;\n        if (arg instanceof String) {\n          className=(String)arg;\n        }\n else         if (arg instanceof TypedStringValue) {\n          TypedStringValue typedValue=((TypedStringValue)arg);\n          String targetTypeName=typedValue.getTargetTypeName();\n          if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n            className=typedValue.getValue();\n          }\n        }\n        if (className != null) {\n          try {\n            return ClassUtils.forName(className,classLoader);\n          }\n catch (          ClassNotFoundException ex) {\n            throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n          }\n        }\n        return method.getReturnType();\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 235,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2303,
        "startLineNumber" : 208,
        "startColumnNumber" : 57,
        "endLineNumber" : 270,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  Type methodParameterType=methodParameterTypes[i];\n  Object arg=args[i];\n  if (methodParameterType.equals(genericReturnType)) {\n    if (arg instanceof TypedStringValue) {\n      TypedStringValue typedValue=((TypedStringValue)arg);\n      if (typedValue.hasTargetType()) {\n        return typedValue.getTargetType();\n      }\n      try {\n        Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n        if (resolvedType != null) {\n          return resolvedType;\n        }\n      }\n catch (      ClassNotFoundException ex) {\n        throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n      }\n    }\n else     if (arg != null && !(arg instanceof BeanMetadataElement)) {\n      return arg.getClass();\n    }\n    return method.getReturnType();\n  }\n else   if (methodParameterType instanceof ParameterizedType) {\n    ParameterizedType parameterizedType=(ParameterizedType)methodParameterType;\n    Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();\n    for (    Type typeArg : actualTypeArguments) {\n      if (typeArg.equals(genericReturnType)) {\n        if (arg instanceof Class) {\n          return (Class<?>)arg;\n        }\n else {\n          String className=null;\n          if (arg instanceof String) {\n            className=(String)arg;\n          }\n else           if (arg instanceof TypedStringValue) {\n            TypedStringValue typedValue=((TypedStringValue)arg);\n            String targetTypeName=typedValue.getTargetTypeName();\n            if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n              className=typedValue.getValue();\n            }\n          }\n          if (className != null) {\n            try {\n              return ClassUtils.forName(className,classLoader);\n            }\n catch (            ClassNotFoundException ex) {\n              throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n            }\n          }\n          return method.getReturnType();\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 252,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2357,
        "startLineNumber" : 208,
        "startColumnNumber" : 3,
        "endLineNumber" : 270,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (int i=0; i < methodParameterTypes.length; i++) {\n  Type methodParameterType=methodParameterTypes[i];\n  Object arg=args[i];\n  if (methodParameterType.equals(genericReturnType)) {\n    if (arg instanceof TypedStringValue) {\n      TypedStringValue typedValue=((TypedStringValue)arg);\n      if (typedValue.hasTargetType()) {\n        return typedValue.getTargetType();\n      }\n      try {\n        Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n        if (resolvedType != null) {\n          return resolvedType;\n        }\n      }\n catch (      ClassNotFoundException ex) {\n        throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n      }\n    }\n else     if (arg != null && !(arg instanceof BeanMetadataElement)) {\n      return arg.getClass();\n    }\n    return method.getReturnType();\n  }\n else   if (methodParameterType instanceof ParameterizedType) {\n    ParameterizedType parameterizedType=(ParameterizedType)methodParameterType;\n    Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();\n    for (    Type typeArg : actualTypeArguments) {\n      if (typeArg.equals(genericReturnType)) {\n        if (arg instanceof Class) {\n          return (Class<?>)arg;\n        }\n else {\n          String className=null;\n          if (arg instanceof String) {\n            className=(String)arg;\n          }\n else           if (arg instanceof TypedStringValue) {\n            TypedStringValue typedValue=((TypedStringValue)arg);\n            String targetTypeName=typedValue.getTargetTypeName();\n            if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n              className=typedValue.getValue();\n            }\n          }\n          if (className != null) {\n            try {\n              return ClassUtils.forName(className,classLoader);\n            }\n catch (            ClassNotFoundException ex) {\n              throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n            }\n          }\n          return method.getReturnType();\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 265,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2366,
        "startLineNumber" : 207,
        "startColumnNumber" : 52,
        "endLineNumber" : 271,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (int i=0; i < methodParameterTypes.length; i++) {\n    Type methodParameterType=methodParameterTypes[i];\n    Object arg=args[i];\n    if (methodParameterType.equals(genericReturnType)) {\n      if (arg instanceof TypedStringValue) {\n        TypedStringValue typedValue=((TypedStringValue)arg);\n        if (typedValue.hasTargetType()) {\n          return typedValue.getTargetType();\n        }\n        try {\n          Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n          if (resolvedType != null) {\n            return resolvedType;\n          }\n        }\n catch (        ClassNotFoundException ex) {\n          throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n        }\n      }\n else       if (arg != null && !(arg instanceof BeanMetadataElement)) {\n        return arg.getClass();\n      }\n      return method.getReturnType();\n    }\n else     if (methodParameterType instanceof ParameterizedType) {\n      ParameterizedType parameterizedType=(ParameterizedType)methodParameterType;\n      Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();\n      for (      Type typeArg : actualTypeArguments) {\n        if (typeArg.equals(genericReturnType)) {\n          if (arg instanceof Class) {\n            return (Class<?>)arg;\n          }\n else {\n            String className=null;\n            if (arg instanceof String) {\n              className=(String)arg;\n            }\n else             if (arg instanceof TypedStringValue) {\n              TypedStringValue typedValue=((TypedStringValue)arg);\n              String targetTypeName=typedValue.getTargetTypeName();\n              if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n                className=typedValue.getValue();\n              }\n            }\n            if (className != null) {\n              try {\n                return ClassUtils.forName(className,classLoader);\n              }\n catch (              ClassNotFoundException ex) {\n                throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n              }\n            }\n            return method.getReturnType();\n          }\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 266,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2416,
        "startLineNumber" : 207,
        "startColumnNumber" : 2,
        "endLineNumber" : 271,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (locallyDeclaredTypeVariableMatchesReturnType) {\n  for (int i=0; i < methodParameterTypes.length; i++) {\n    Type methodParameterType=methodParameterTypes[i];\n    Object arg=args[i];\n    if (methodParameterType.equals(genericReturnType)) {\n      if (arg instanceof TypedStringValue) {\n        TypedStringValue typedValue=((TypedStringValue)arg);\n        if (typedValue.hasTargetType()) {\n          return typedValue.getTargetType();\n        }\n        try {\n          Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n          if (resolvedType != null) {\n            return resolvedType;\n          }\n        }\n catch (        ClassNotFoundException ex) {\n          throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n        }\n      }\n else       if (arg != null && !(arg instanceof BeanMetadataElement)) {\n        return arg.getClass();\n      }\n      return method.getReturnType();\n    }\n else     if (methodParameterType instanceof ParameterizedType) {\n      ParameterizedType parameterizedType=(ParameterizedType)methodParameterType;\n      Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();\n      for (      Type typeArg : actualTypeArguments) {\n        if (typeArg.equals(genericReturnType)) {\n          if (arg instanceof Class) {\n            return (Class<?>)arg;\n          }\n else {\n            String className=null;\n            if (arg instanceof String) {\n              className=(String)arg;\n            }\n else             if (arg instanceof TypedStringValue) {\n              TypedStringValue typedValue=((TypedStringValue)arg);\n              String targetTypeName=typedValue.getTargetTypeName();\n              if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n                className=typedValue.getValue();\n              }\n            }\n            if (className != null) {\n              try {\n                return ClassUtils.forName(className,classLoader);\n              }\n catch (              ClassNotFoundException ex) {\n                throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n              }\n            }\n            return method.getReturnType();\n          }\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 268,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3325,
        "startLineNumber" : 187,
        "startColumnNumber" : 68,
        "endLineNumber" : 275,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Assert.notNull(method,\"Method must not be null\");\n  Assert.notNull(args,\"Argument array must not be null\");\n  TypeVariable<Method>[] declaredTypeVariables=method.getTypeParameters();\n  Type genericReturnType=method.getGenericReturnType();\n  Type[] methodParameterTypes=method.getGenericParameterTypes();\n  Assert.isTrue(args.length == methodParameterTypes.length,\"Argument array does not match parameter count\");\n  boolean locallyDeclaredTypeVariableMatchesReturnType=false;\n  for (  TypeVariable<Method> currentTypeVariable : declaredTypeVariables) {\n    if (currentTypeVariable.equals(genericReturnType)) {\n      locallyDeclaredTypeVariableMatchesReturnType=true;\n      break;\n    }\n  }\n  if (locallyDeclaredTypeVariableMatchesReturnType) {\n    for (int i=0; i < methodParameterTypes.length; i++) {\n      Type methodParameterType=methodParameterTypes[i];\n      Object arg=args[i];\n      if (methodParameterType.equals(genericReturnType)) {\n        if (arg instanceof TypedStringValue) {\n          TypedStringValue typedValue=((TypedStringValue)arg);\n          if (typedValue.hasTargetType()) {\n            return typedValue.getTargetType();\n          }\n          try {\n            Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n            if (resolvedType != null) {\n              return resolvedType;\n            }\n          }\n catch (          ClassNotFoundException ex) {\n            throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n          }\n        }\n else         if (arg != null && !(arg instanceof BeanMetadataElement)) {\n          return arg.getClass();\n        }\n        return method.getReturnType();\n      }\n else       if (methodParameterType instanceof ParameterizedType) {\n        ParameterizedType parameterizedType=(ParameterizedType)methodParameterType;\n        Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();\n        for (        Type typeArg : actualTypeArguments) {\n          if (typeArg.equals(genericReturnType)) {\n            if (arg instanceof Class) {\n              return (Class<?>)arg;\n            }\n else {\n              String className=null;\n              if (arg instanceof String) {\n                className=(String)arg;\n              }\n else               if (arg instanceof TypedStringValue) {\n                TypedStringValue typedValue=((TypedStringValue)arg);\n                String targetTypeName=typedValue.getTargetTypeName();\n                if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n                  className=typedValue.getValue();\n                }\n              }\n              if (className != null) {\n                try {\n                  return ClassUtils.forName(className,classLoader);\n                }\n catch (                ClassNotFoundException ex) {\n                  throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n                }\n              }\n              return method.getReturnType();\n            }\n          }\n        }\n      }\n    }\n  }\n  return method.getReturnType();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 354,
      "astHeight" : 24
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5140,
        "startLineNumber" : 155,
        "startColumnNumber" : 1,
        "endLineNumber" : 275,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Determine the target type for the generic return type of the given <em>generic factory method</em>, where formal type variables are declared on the given method itself. <p>For example, given a factory method with the following signature, if {@code resolveReturnTypeForFactoryMethod()} is invoked with the reflectedmethod for  {@code createProxy()} and an {@code Object[]} array containing{@code MyService.class},  {@code resolveReturnTypeForFactoryMethod()} willinfer that the target return type is  {@code MyService}. <pre class=\"code\"> {@code public static <T> T createProxy(Class<T> clazz)}</pre> <h4>Possible Return Values</h4> <ul> <li>the target return type, if it can be inferred</li> <li>the  {@linkplain Method#getReturnType() standard return type}, if the given  {@code method} does not declare any {@linkplain Method#getTypeParameters() formal type variables}</li> <li>the  {@linkplain Method#getReturnType() standard return type}, if the target return type cannot be inferred (e.g., due to type erasure)</li> <li> {@code null}, if the length of the given arguments array is shorter than the length of the  {@linkplain Method#getGenericParameterTypes() formal argument list} for the givenmethod</li> </ul>\n * @param method the method to introspect (never {@code null})\n * @param args the arguments that will be supplied to the method when it isinvoked (never  {@code null})\n * @param classLoader the ClassLoader to resolve class names against,if necessary (never  {@code null})\n * @return the resolved target return type or the standard method return type\n * @since 3.2.5\n */\npublic static Class<?> resolveReturnTypeForFactoryMethod(Method method,Object[] args,@Nullable ClassLoader classLoader){\n  Assert.notNull(method,\"Method must not be null\");\n  Assert.notNull(args,\"Argument array must not be null\");\n  TypeVariable<Method>[] declaredTypeVariables=method.getTypeParameters();\n  Type genericReturnType=method.getGenericReturnType();\n  Type[] methodParameterTypes=method.getGenericParameterTypes();\n  Assert.isTrue(args.length == methodParameterTypes.length,\"Argument array does not match parameter count\");\n  boolean locallyDeclaredTypeVariableMatchesReturnType=false;\n  for (  TypeVariable<Method> currentTypeVariable : declaredTypeVariables) {\n    if (currentTypeVariable.equals(genericReturnType)) {\n      locallyDeclaredTypeVariableMatchesReturnType=true;\n      break;\n    }\n  }\n  if (locallyDeclaredTypeVariableMatchesReturnType) {\n    for (int i=0; i < methodParameterTypes.length; i++) {\n      Type methodParameterType=methodParameterTypes[i];\n      Object arg=args[i];\n      if (methodParameterType.equals(genericReturnType)) {\n        if (arg instanceof TypedStringValue) {\n          TypedStringValue typedValue=((TypedStringValue)arg);\n          if (typedValue.hasTargetType()) {\n            return typedValue.getTargetType();\n          }\n          try {\n            Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n            if (resolvedType != null) {\n              return resolvedType;\n            }\n          }\n catch (          ClassNotFoundException ex) {\n            throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n          }\n        }\n else         if (arg != null && !(arg instanceof BeanMetadataElement)) {\n          return arg.getClass();\n        }\n        return method.getReturnType();\n      }\n else       if (methodParameterType instanceof ParameterizedType) {\n        ParameterizedType parameterizedType=(ParameterizedType)methodParameterType;\n        Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();\n        for (        Type typeArg : actualTypeArguments) {\n          if (typeArg.equals(genericReturnType)) {\n            if (arg instanceof Class) {\n              return (Class<?>)arg;\n            }\n else {\n              String className=null;\n              if (arg instanceof String) {\n                className=(String)arg;\n              }\n else               if (arg instanceof TypedStringValue) {\n                TypedStringValue typedValue=((TypedStringValue)arg);\n                String targetTypeName=typedValue.getTargetTypeName();\n                if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n                  className=typedValue.getValue();\n                }\n              }\n              if (className != null) {\n                try {\n                  return ClassUtils.forName(className,classLoader);\n                }\n catch (                ClassNotFoundException ex) {\n                  throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n                }\n              }\n              return method.getReturnType();\n            }\n          }\n        }\n      }\n    }\n  }\n  return method.getReturnType();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 379,
      "astHeight" : 25
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 225,
        "startColumnNumber" : 9,
        "endLineNumber" : 225,
        "endColumnNumber" : 39
      },
      "nodeContext" : "typedValue.getTargetTypeName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.springframework.beans.factory.config.TypedStringValue"
  }, {
    "nodeContext" : "typedValue",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 249,
      "startColumnNumber" : 33,
      "endLineNumber" : 249,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 249,
        "startColumnNumber" : 33,
        "endLineNumber" : 249,
        "endColumnNumber" : 63
      },
      "nodeContext" : "typedValue.getTargetTypeName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 249,
        "startColumnNumber" : 16,
        "endLineNumber" : 249,
        "endColumnNumber" : 63
      },
      "nodeContext" : "targetTypeName=typedValue.getTargetTypeName()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 249,
        "startColumnNumber" : 9,
        "endLineNumber" : 249,
        "endColumnNumber" : 64
      },
      "nodeContext" : "String targetTypeName=typedValue.getTargetTypeName();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 284,
        "startLineNumber" : 247,
        "startColumnNumber" : 50,
        "endLineNumber" : 253,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TypedStringValue typedValue=((TypedStringValue)arg);\n  String targetTypeName=typedValue.getTargetTypeName();\n  if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n    className=typedValue.getValue();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 39,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 321,
        "startLineNumber" : 247,
        "startColumnNumber" : 13,
        "endLineNumber" : 253,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (arg instanceof TypedStringValue) {\n  TypedStringValue typedValue=((TypedStringValue)arg);\n  String targetTypeName=typedValue.getTargetTypeName();\n  if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n    className=typedValue.getValue();\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 44,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 408,
        "startLineNumber" : 244,
        "startColumnNumber" : 8,
        "endLineNumber" : 253,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (arg instanceof String) {\n  className=(String)arg;\n}\n else if (arg instanceof TypedStringValue) {\n  TypedStringValue typedValue=((TypedStringValue)arg);\n  String targetTypeName=typedValue.getTargetTypeName();\n  if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n    className=typedValue.getValue();\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 57,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 941,
        "startLineNumber" : 242,
        "startColumnNumber" : 12,
        "endLineNumber" : 266,
        "endColumnNumber" : 8
      },
      "nodeContext" : "{\n  String className=null;\n  if (arg instanceof String) {\n    className=(String)arg;\n  }\n else   if (arg instanceof TypedStringValue) {\n    TypedStringValue typedValue=((TypedStringValue)arg);\n    String targetTypeName=typedValue.getTargetTypeName();\n    if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n      className=typedValue.getValue();\n    }\n  }\n  if (className != null) {\n    try {\n      return ClassUtils.forName(className,classLoader);\n    }\n catch (    ClassNotFoundException ex) {\n      throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n    }\n  }\n  return method.getReturnType();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 96,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1021,
        "startLineNumber" : 239,
        "startColumnNumber" : 7,
        "endLineNumber" : 266,
        "endColumnNumber" : 8
      },
      "nodeContext" : "if (arg instanceof Class) {\n  return (Class<?>)arg;\n}\n else {\n  String className=null;\n  if (arg instanceof String) {\n    className=(String)arg;\n  }\n else   if (arg instanceof TypedStringValue) {\n    TypedStringValue typedValue=((TypedStringValue)arg);\n    String targetTypeName=typedValue.getTargetTypeName();\n    if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n      className=typedValue.getValue();\n    }\n  }\n  if (className != null) {\n    try {\n      return ClassUtils.forName(className,classLoader);\n    }\n catch (    ClassNotFoundException ex) {\n      throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n    }\n  }\n  return method.getReturnType();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 109,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1038,
        "startLineNumber" : 238,
        "startColumnNumber" : 45,
        "endLineNumber" : 267,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (arg instanceof Class) {\n    return (Class<?>)arg;\n  }\n else {\n    String className=null;\n    if (arg instanceof String) {\n      className=(String)arg;\n    }\n else     if (arg instanceof TypedStringValue) {\n      TypedStringValue typedValue=((TypedStringValue)arg);\n      String targetTypeName=typedValue.getTargetTypeName();\n      if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n        className=typedValue.getValue();\n      }\n    }\n    if (className != null) {\n      try {\n        return ClassUtils.forName(className,classLoader);\n      }\n catch (      ClassNotFoundException ex) {\n        throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n      }\n    }\n    return method.getReturnType();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 110,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1077,
        "startLineNumber" : 238,
        "startColumnNumber" : 6,
        "endLineNumber" : 267,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (typeArg.equals(genericReturnType)) {\n  if (arg instanceof Class) {\n    return (Class<?>)arg;\n  }\n else {\n    String className=null;\n    if (arg instanceof String) {\n      className=(String)arg;\n    }\n else     if (arg instanceof TypedStringValue) {\n      TypedStringValue typedValue=((TypedStringValue)arg);\n      String targetTypeName=typedValue.getTargetTypeName();\n      if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n        className=typedValue.getValue();\n      }\n    }\n    if (className != null) {\n      try {\n        return ClassUtils.forName(className,classLoader);\n      }\n catch (      ClassNotFoundException ex) {\n        throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n      }\n    }\n    return method.getReturnType();\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 115,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1092,
        "startLineNumber" : 237,
        "startColumnNumber" : 46,
        "endLineNumber" : 268,
        "endColumnNumber" : 6
      },
      "nodeContext" : "{\n  if (typeArg.equals(genericReturnType)) {\n    if (arg instanceof Class) {\n      return (Class<?>)arg;\n    }\n else {\n      String className=null;\n      if (arg instanceof String) {\n        className=(String)arg;\n      }\n else       if (arg instanceof TypedStringValue) {\n        TypedStringValue typedValue=((TypedStringValue)arg);\n        String targetTypeName=typedValue.getTargetTypeName();\n        if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n          className=typedValue.getValue();\n        }\n      }\n      if (className != null) {\n        try {\n          return ClassUtils.forName(className,classLoader);\n        }\n catch (        ClassNotFoundException ex) {\n          throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n        }\n      }\n      return method.getReturnType();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 116,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1133,
        "startLineNumber" : 237,
        "startColumnNumber" : 5,
        "endLineNumber" : 268,
        "endColumnNumber" : 6
      },
      "nodeContext" : "for (Type typeArg : actualTypeArguments) {\n  if (typeArg.equals(genericReturnType)) {\n    if (arg instanceof Class) {\n      return (Class<?>)arg;\n    }\n else {\n      String className=null;\n      if (arg instanceof String) {\n        className=(String)arg;\n      }\n else       if (arg instanceof TypedStringValue) {\n        TypedStringValue typedValue=((TypedStringValue)arg);\n        String targetTypeName=typedValue.getTargetTypeName();\n        if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n          className=typedValue.getValue();\n        }\n      }\n      if (className != null) {\n        try {\n          return ClassUtils.forName(className,classLoader);\n        }\n catch (        ClassNotFoundException ex) {\n          throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n        }\n      }\n      return method.getReturnType();\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 122,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1308,
        "startLineNumber" : 234,
        "startColumnNumber" : 63,
        "endLineNumber" : 269,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ParameterizedType parameterizedType=(ParameterizedType)methodParameterType;\n  Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();\n  for (  Type typeArg : actualTypeArguments) {\n    if (typeArg.equals(genericReturnType)) {\n      if (arg instanceof Class) {\n        return (Class<?>)arg;\n      }\n else {\n        String className=null;\n        if (arg instanceof String) {\n          className=(String)arg;\n        }\n else         if (arg instanceof TypedStringValue) {\n          TypedStringValue typedValue=((TypedStringValue)arg);\n          String targetTypeName=typedValue.getTargetTypeName();\n          if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n            className=typedValue.getValue();\n          }\n        }\n        if (className != null) {\n          try {\n            return ClassUtils.forName(className,classLoader);\n          }\n catch (          ClassNotFoundException ex) {\n            throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n          }\n        }\n        return method.getReturnType();\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 142,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1362,
        "startLineNumber" : 234,
        "startColumnNumber" : 9,
        "endLineNumber" : 269,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (methodParameterType instanceof ParameterizedType) {\n  ParameterizedType parameterizedType=(ParameterizedType)methodParameterType;\n  Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();\n  for (  Type typeArg : actualTypeArguments) {\n    if (typeArg.equals(genericReturnType)) {\n      if (arg instanceof Class) {\n        return (Class<?>)arg;\n      }\n else {\n        String className=null;\n        if (arg instanceof String) {\n          className=(String)arg;\n        }\n else         if (arg instanceof TypedStringValue) {\n          TypedStringValue typedValue=((TypedStringValue)arg);\n          String targetTypeName=typedValue.getTargetTypeName();\n          if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n            className=typedValue.getValue();\n          }\n        }\n        if (className != null) {\n          try {\n            return ClassUtils.forName(className,classLoader);\n          }\n catch (          ClassNotFoundException ex) {\n            throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n          }\n        }\n        return method.getReturnType();\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 147,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2210,
        "startLineNumber" : 211,
        "startColumnNumber" : 4,
        "endLineNumber" : 269,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (methodParameterType.equals(genericReturnType)) {\n  if (arg instanceof TypedStringValue) {\n    TypedStringValue typedValue=((TypedStringValue)arg);\n    if (typedValue.hasTargetType()) {\n      return typedValue.getTargetType();\n    }\n    try {\n      Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n      if (resolvedType != null) {\n        return resolvedType;\n      }\n    }\n catch (    ClassNotFoundException ex) {\n      throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n    }\n  }\n else   if (arg != null && !(arg instanceof BeanMetadataElement)) {\n    return arg.getClass();\n  }\n  return method.getReturnType();\n}\n else if (methodParameterType instanceof ParameterizedType) {\n  ParameterizedType parameterizedType=(ParameterizedType)methodParameterType;\n  Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();\n  for (  Type typeArg : actualTypeArguments) {\n    if (typeArg.equals(genericReturnType)) {\n      if (arg instanceof Class) {\n        return (Class<?>)arg;\n      }\n else {\n        String className=null;\n        if (arg instanceof String) {\n          className=(String)arg;\n        }\n else         if (arg instanceof TypedStringValue) {\n          TypedStringValue typedValue=((TypedStringValue)arg);\n          String targetTypeName=typedValue.getTargetTypeName();\n          if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n            className=typedValue.getValue();\n          }\n        }\n        if (className != null) {\n          try {\n            return ClassUtils.forName(className,classLoader);\n          }\n catch (          ClassNotFoundException ex) {\n            throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n          }\n        }\n        return method.getReturnType();\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 235,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2303,
        "startLineNumber" : 208,
        "startColumnNumber" : 57,
        "endLineNumber" : 270,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  Type methodParameterType=methodParameterTypes[i];\n  Object arg=args[i];\n  if (methodParameterType.equals(genericReturnType)) {\n    if (arg instanceof TypedStringValue) {\n      TypedStringValue typedValue=((TypedStringValue)arg);\n      if (typedValue.hasTargetType()) {\n        return typedValue.getTargetType();\n      }\n      try {\n        Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n        if (resolvedType != null) {\n          return resolvedType;\n        }\n      }\n catch (      ClassNotFoundException ex) {\n        throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n      }\n    }\n else     if (arg != null && !(arg instanceof BeanMetadataElement)) {\n      return arg.getClass();\n    }\n    return method.getReturnType();\n  }\n else   if (methodParameterType instanceof ParameterizedType) {\n    ParameterizedType parameterizedType=(ParameterizedType)methodParameterType;\n    Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();\n    for (    Type typeArg : actualTypeArguments) {\n      if (typeArg.equals(genericReturnType)) {\n        if (arg instanceof Class) {\n          return (Class<?>)arg;\n        }\n else {\n          String className=null;\n          if (arg instanceof String) {\n            className=(String)arg;\n          }\n else           if (arg instanceof TypedStringValue) {\n            TypedStringValue typedValue=((TypedStringValue)arg);\n            String targetTypeName=typedValue.getTargetTypeName();\n            if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n              className=typedValue.getValue();\n            }\n          }\n          if (className != null) {\n            try {\n              return ClassUtils.forName(className,classLoader);\n            }\n catch (            ClassNotFoundException ex) {\n              throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n            }\n          }\n          return method.getReturnType();\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 252,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2357,
        "startLineNumber" : 208,
        "startColumnNumber" : 3,
        "endLineNumber" : 270,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (int i=0; i < methodParameterTypes.length; i++) {\n  Type methodParameterType=methodParameterTypes[i];\n  Object arg=args[i];\n  if (methodParameterType.equals(genericReturnType)) {\n    if (arg instanceof TypedStringValue) {\n      TypedStringValue typedValue=((TypedStringValue)arg);\n      if (typedValue.hasTargetType()) {\n        return typedValue.getTargetType();\n      }\n      try {\n        Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n        if (resolvedType != null) {\n          return resolvedType;\n        }\n      }\n catch (      ClassNotFoundException ex) {\n        throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n      }\n    }\n else     if (arg != null && !(arg instanceof BeanMetadataElement)) {\n      return arg.getClass();\n    }\n    return method.getReturnType();\n  }\n else   if (methodParameterType instanceof ParameterizedType) {\n    ParameterizedType parameterizedType=(ParameterizedType)methodParameterType;\n    Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();\n    for (    Type typeArg : actualTypeArguments) {\n      if (typeArg.equals(genericReturnType)) {\n        if (arg instanceof Class) {\n          return (Class<?>)arg;\n        }\n else {\n          String className=null;\n          if (arg instanceof String) {\n            className=(String)arg;\n          }\n else           if (arg instanceof TypedStringValue) {\n            TypedStringValue typedValue=((TypedStringValue)arg);\n            String targetTypeName=typedValue.getTargetTypeName();\n            if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n              className=typedValue.getValue();\n            }\n          }\n          if (className != null) {\n            try {\n              return ClassUtils.forName(className,classLoader);\n            }\n catch (            ClassNotFoundException ex) {\n              throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n            }\n          }\n          return method.getReturnType();\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 265,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2366,
        "startLineNumber" : 207,
        "startColumnNumber" : 52,
        "endLineNumber" : 271,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (int i=0; i < methodParameterTypes.length; i++) {\n    Type methodParameterType=methodParameterTypes[i];\n    Object arg=args[i];\n    if (methodParameterType.equals(genericReturnType)) {\n      if (arg instanceof TypedStringValue) {\n        TypedStringValue typedValue=((TypedStringValue)arg);\n        if (typedValue.hasTargetType()) {\n          return typedValue.getTargetType();\n        }\n        try {\n          Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n          if (resolvedType != null) {\n            return resolvedType;\n          }\n        }\n catch (        ClassNotFoundException ex) {\n          throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n        }\n      }\n else       if (arg != null && !(arg instanceof BeanMetadataElement)) {\n        return arg.getClass();\n      }\n      return method.getReturnType();\n    }\n else     if (methodParameterType instanceof ParameterizedType) {\n      ParameterizedType parameterizedType=(ParameterizedType)methodParameterType;\n      Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();\n      for (      Type typeArg : actualTypeArguments) {\n        if (typeArg.equals(genericReturnType)) {\n          if (arg instanceof Class) {\n            return (Class<?>)arg;\n          }\n else {\n            String className=null;\n            if (arg instanceof String) {\n              className=(String)arg;\n            }\n else             if (arg instanceof TypedStringValue) {\n              TypedStringValue typedValue=((TypedStringValue)arg);\n              String targetTypeName=typedValue.getTargetTypeName();\n              if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n                className=typedValue.getValue();\n              }\n            }\n            if (className != null) {\n              try {\n                return ClassUtils.forName(className,classLoader);\n              }\n catch (              ClassNotFoundException ex) {\n                throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n              }\n            }\n            return method.getReturnType();\n          }\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 266,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2416,
        "startLineNumber" : 207,
        "startColumnNumber" : 2,
        "endLineNumber" : 271,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (locallyDeclaredTypeVariableMatchesReturnType) {\n  for (int i=0; i < methodParameterTypes.length; i++) {\n    Type methodParameterType=methodParameterTypes[i];\n    Object arg=args[i];\n    if (methodParameterType.equals(genericReturnType)) {\n      if (arg instanceof TypedStringValue) {\n        TypedStringValue typedValue=((TypedStringValue)arg);\n        if (typedValue.hasTargetType()) {\n          return typedValue.getTargetType();\n        }\n        try {\n          Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n          if (resolvedType != null) {\n            return resolvedType;\n          }\n        }\n catch (        ClassNotFoundException ex) {\n          throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n        }\n      }\n else       if (arg != null && !(arg instanceof BeanMetadataElement)) {\n        return arg.getClass();\n      }\n      return method.getReturnType();\n    }\n else     if (methodParameterType instanceof ParameterizedType) {\n      ParameterizedType parameterizedType=(ParameterizedType)methodParameterType;\n      Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();\n      for (      Type typeArg : actualTypeArguments) {\n        if (typeArg.equals(genericReturnType)) {\n          if (arg instanceof Class) {\n            return (Class<?>)arg;\n          }\n else {\n            String className=null;\n            if (arg instanceof String) {\n              className=(String)arg;\n            }\n else             if (arg instanceof TypedStringValue) {\n              TypedStringValue typedValue=((TypedStringValue)arg);\n              String targetTypeName=typedValue.getTargetTypeName();\n              if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n                className=typedValue.getValue();\n              }\n            }\n            if (className != null) {\n              try {\n                return ClassUtils.forName(className,classLoader);\n              }\n catch (              ClassNotFoundException ex) {\n                throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n              }\n            }\n            return method.getReturnType();\n          }\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 268,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3325,
        "startLineNumber" : 187,
        "startColumnNumber" : 68,
        "endLineNumber" : 275,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Assert.notNull(method,\"Method must not be null\");\n  Assert.notNull(args,\"Argument array must not be null\");\n  TypeVariable<Method>[] declaredTypeVariables=method.getTypeParameters();\n  Type genericReturnType=method.getGenericReturnType();\n  Type[] methodParameterTypes=method.getGenericParameterTypes();\n  Assert.isTrue(args.length == methodParameterTypes.length,\"Argument array does not match parameter count\");\n  boolean locallyDeclaredTypeVariableMatchesReturnType=false;\n  for (  TypeVariable<Method> currentTypeVariable : declaredTypeVariables) {\n    if (currentTypeVariable.equals(genericReturnType)) {\n      locallyDeclaredTypeVariableMatchesReturnType=true;\n      break;\n    }\n  }\n  if (locallyDeclaredTypeVariableMatchesReturnType) {\n    for (int i=0; i < methodParameterTypes.length; i++) {\n      Type methodParameterType=methodParameterTypes[i];\n      Object arg=args[i];\n      if (methodParameterType.equals(genericReturnType)) {\n        if (arg instanceof TypedStringValue) {\n          TypedStringValue typedValue=((TypedStringValue)arg);\n          if (typedValue.hasTargetType()) {\n            return typedValue.getTargetType();\n          }\n          try {\n            Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n            if (resolvedType != null) {\n              return resolvedType;\n            }\n          }\n catch (          ClassNotFoundException ex) {\n            throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n          }\n        }\n else         if (arg != null && !(arg instanceof BeanMetadataElement)) {\n          return arg.getClass();\n        }\n        return method.getReturnType();\n      }\n else       if (methodParameterType instanceof ParameterizedType) {\n        ParameterizedType parameterizedType=(ParameterizedType)methodParameterType;\n        Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();\n        for (        Type typeArg : actualTypeArguments) {\n          if (typeArg.equals(genericReturnType)) {\n            if (arg instanceof Class) {\n              return (Class<?>)arg;\n            }\n else {\n              String className=null;\n              if (arg instanceof String) {\n                className=(String)arg;\n              }\n else               if (arg instanceof TypedStringValue) {\n                TypedStringValue typedValue=((TypedStringValue)arg);\n                String targetTypeName=typedValue.getTargetTypeName();\n                if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n                  className=typedValue.getValue();\n                }\n              }\n              if (className != null) {\n                try {\n                  return ClassUtils.forName(className,classLoader);\n                }\n catch (                ClassNotFoundException ex) {\n                  throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n                }\n              }\n              return method.getReturnType();\n            }\n          }\n        }\n      }\n    }\n  }\n  return method.getReturnType();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 354,
      "astHeight" : 24
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5140,
        "startLineNumber" : 155,
        "startColumnNumber" : 1,
        "endLineNumber" : 275,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Determine the target type for the generic return type of the given <em>generic factory method</em>, where formal type variables are declared on the given method itself. <p>For example, given a factory method with the following signature, if {@code resolveReturnTypeForFactoryMethod()} is invoked with the reflectedmethod for  {@code createProxy()} and an {@code Object[]} array containing{@code MyService.class},  {@code resolveReturnTypeForFactoryMethod()} willinfer that the target return type is  {@code MyService}. <pre class=\"code\"> {@code public static <T> T createProxy(Class<T> clazz)}</pre> <h4>Possible Return Values</h4> <ul> <li>the target return type, if it can be inferred</li> <li>the  {@linkplain Method#getReturnType() standard return type}, if the given  {@code method} does not declare any {@linkplain Method#getTypeParameters() formal type variables}</li> <li>the  {@linkplain Method#getReturnType() standard return type}, if the target return type cannot be inferred (e.g., due to type erasure)</li> <li> {@code null}, if the length of the given arguments array is shorter than the length of the  {@linkplain Method#getGenericParameterTypes() formal argument list} for the givenmethod</li> </ul>\n * @param method the method to introspect (never {@code null})\n * @param args the arguments that will be supplied to the method when it isinvoked (never  {@code null})\n * @param classLoader the ClassLoader to resolve class names against,if necessary (never  {@code null})\n * @return the resolved target return type or the standard method return type\n * @since 3.2.5\n */\npublic static Class<?> resolveReturnTypeForFactoryMethod(Method method,Object[] args,@Nullable ClassLoader classLoader){\n  Assert.notNull(method,\"Method must not be null\");\n  Assert.notNull(args,\"Argument array must not be null\");\n  TypeVariable<Method>[] declaredTypeVariables=method.getTypeParameters();\n  Type genericReturnType=method.getGenericReturnType();\n  Type[] methodParameterTypes=method.getGenericParameterTypes();\n  Assert.isTrue(args.length == methodParameterTypes.length,\"Argument array does not match parameter count\");\n  boolean locallyDeclaredTypeVariableMatchesReturnType=false;\n  for (  TypeVariable<Method> currentTypeVariable : declaredTypeVariables) {\n    if (currentTypeVariable.equals(genericReturnType)) {\n      locallyDeclaredTypeVariableMatchesReturnType=true;\n      break;\n    }\n  }\n  if (locallyDeclaredTypeVariableMatchesReturnType) {\n    for (int i=0; i < methodParameterTypes.length; i++) {\n      Type methodParameterType=methodParameterTypes[i];\n      Object arg=args[i];\n      if (methodParameterType.equals(genericReturnType)) {\n        if (arg instanceof TypedStringValue) {\n          TypedStringValue typedValue=((TypedStringValue)arg);\n          if (typedValue.hasTargetType()) {\n            return typedValue.getTargetType();\n          }\n          try {\n            Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n            if (resolvedType != null) {\n              return resolvedType;\n            }\n          }\n catch (          ClassNotFoundException ex) {\n            throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n          }\n        }\n else         if (arg != null && !(arg instanceof BeanMetadataElement)) {\n          return arg.getClass();\n        }\n        return method.getReturnType();\n      }\n else       if (methodParameterType instanceof ParameterizedType) {\n        ParameterizedType parameterizedType=(ParameterizedType)methodParameterType;\n        Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();\n        for (        Type typeArg : actualTypeArguments) {\n          if (typeArg.equals(genericReturnType)) {\n            if (arg instanceof Class) {\n              return (Class<?>)arg;\n            }\n else {\n              String className=null;\n              if (arg instanceof String) {\n                className=(String)arg;\n              }\n else               if (arg instanceof TypedStringValue) {\n                TypedStringValue typedValue=((TypedStringValue)arg);\n                String targetTypeName=typedValue.getTargetTypeName();\n                if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n                  className=typedValue.getValue();\n                }\n              }\n              if (className != null) {\n                try {\n                  return ClassUtils.forName(className,classLoader);\n                }\n catch (                ClassNotFoundException ex) {\n                  throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n                }\n              }\n              return method.getReturnType();\n            }\n          }\n        }\n      }\n    }\n  }\n  return method.getReturnType();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 379,
      "astHeight" : 25
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 249,
        "startColumnNumber" : 9,
        "endLineNumber" : 249,
        "endColumnNumber" : 64
      },
      "nodeContext" : "String targetTypeName=typedValue.getTargetTypeName();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.springframework.beans.factory.config.TypedStringValue"
  }, {
    "nodeContext" : "typedValue",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 251,
      "startColumnNumber" : 22,
      "endLineNumber" : 251,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 251,
        "startColumnNumber" : 22,
        "endLineNumber" : 251,
        "endColumnNumber" : 43
      },
      "nodeContext" : "typedValue.getValue()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 251,
        "startColumnNumber" : 10,
        "endLineNumber" : 251,
        "endColumnNumber" : 43
      },
      "nodeContext" : "className=typedValue.getValue()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 251,
        "startColumnNumber" : 10,
        "endLineNumber" : 251,
        "endColumnNumber" : 44
      },
      "nodeContext" : "className=typedValue.getValue();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 250,
        "startColumnNumber" : 85,
        "endLineNumber" : 252,
        "endColumnNumber" : 10
      },
      "nodeContext" : "{\n  className=typedValue.getValue();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 250,
        "startColumnNumber" : 9,
        "endLineNumber" : 252,
        "endColumnNumber" : 10
      },
      "nodeContext" : "if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n  className=typedValue.getValue();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 284,
        "startLineNumber" : 247,
        "startColumnNumber" : 50,
        "endLineNumber" : 253,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TypedStringValue typedValue=((TypedStringValue)arg);\n  String targetTypeName=typedValue.getTargetTypeName();\n  if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n    className=typedValue.getValue();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 39,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 321,
        "startLineNumber" : 247,
        "startColumnNumber" : 13,
        "endLineNumber" : 253,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (arg instanceof TypedStringValue) {\n  TypedStringValue typedValue=((TypedStringValue)arg);\n  String targetTypeName=typedValue.getTargetTypeName();\n  if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n    className=typedValue.getValue();\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 44,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 408,
        "startLineNumber" : 244,
        "startColumnNumber" : 8,
        "endLineNumber" : 253,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (arg instanceof String) {\n  className=(String)arg;\n}\n else if (arg instanceof TypedStringValue) {\n  TypedStringValue typedValue=((TypedStringValue)arg);\n  String targetTypeName=typedValue.getTargetTypeName();\n  if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n    className=typedValue.getValue();\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 57,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 941,
        "startLineNumber" : 242,
        "startColumnNumber" : 12,
        "endLineNumber" : 266,
        "endColumnNumber" : 8
      },
      "nodeContext" : "{\n  String className=null;\n  if (arg instanceof String) {\n    className=(String)arg;\n  }\n else   if (arg instanceof TypedStringValue) {\n    TypedStringValue typedValue=((TypedStringValue)arg);\n    String targetTypeName=typedValue.getTargetTypeName();\n    if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n      className=typedValue.getValue();\n    }\n  }\n  if (className != null) {\n    try {\n      return ClassUtils.forName(className,classLoader);\n    }\n catch (    ClassNotFoundException ex) {\n      throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n    }\n  }\n  return method.getReturnType();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 96,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1021,
        "startLineNumber" : 239,
        "startColumnNumber" : 7,
        "endLineNumber" : 266,
        "endColumnNumber" : 8
      },
      "nodeContext" : "if (arg instanceof Class) {\n  return (Class<?>)arg;\n}\n else {\n  String className=null;\n  if (arg instanceof String) {\n    className=(String)arg;\n  }\n else   if (arg instanceof TypedStringValue) {\n    TypedStringValue typedValue=((TypedStringValue)arg);\n    String targetTypeName=typedValue.getTargetTypeName();\n    if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n      className=typedValue.getValue();\n    }\n  }\n  if (className != null) {\n    try {\n      return ClassUtils.forName(className,classLoader);\n    }\n catch (    ClassNotFoundException ex) {\n      throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n    }\n  }\n  return method.getReturnType();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 109,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1038,
        "startLineNumber" : 238,
        "startColumnNumber" : 45,
        "endLineNumber" : 267,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (arg instanceof Class) {\n    return (Class<?>)arg;\n  }\n else {\n    String className=null;\n    if (arg instanceof String) {\n      className=(String)arg;\n    }\n else     if (arg instanceof TypedStringValue) {\n      TypedStringValue typedValue=((TypedStringValue)arg);\n      String targetTypeName=typedValue.getTargetTypeName();\n      if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n        className=typedValue.getValue();\n      }\n    }\n    if (className != null) {\n      try {\n        return ClassUtils.forName(className,classLoader);\n      }\n catch (      ClassNotFoundException ex) {\n        throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n      }\n    }\n    return method.getReturnType();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 110,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1077,
        "startLineNumber" : 238,
        "startColumnNumber" : 6,
        "endLineNumber" : 267,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (typeArg.equals(genericReturnType)) {\n  if (arg instanceof Class) {\n    return (Class<?>)arg;\n  }\n else {\n    String className=null;\n    if (arg instanceof String) {\n      className=(String)arg;\n    }\n else     if (arg instanceof TypedStringValue) {\n      TypedStringValue typedValue=((TypedStringValue)arg);\n      String targetTypeName=typedValue.getTargetTypeName();\n      if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n        className=typedValue.getValue();\n      }\n    }\n    if (className != null) {\n      try {\n        return ClassUtils.forName(className,classLoader);\n      }\n catch (      ClassNotFoundException ex) {\n        throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n      }\n    }\n    return method.getReturnType();\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 115,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1092,
        "startLineNumber" : 237,
        "startColumnNumber" : 46,
        "endLineNumber" : 268,
        "endColumnNumber" : 6
      },
      "nodeContext" : "{\n  if (typeArg.equals(genericReturnType)) {\n    if (arg instanceof Class) {\n      return (Class<?>)arg;\n    }\n else {\n      String className=null;\n      if (arg instanceof String) {\n        className=(String)arg;\n      }\n else       if (arg instanceof TypedStringValue) {\n        TypedStringValue typedValue=((TypedStringValue)arg);\n        String targetTypeName=typedValue.getTargetTypeName();\n        if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n          className=typedValue.getValue();\n        }\n      }\n      if (className != null) {\n        try {\n          return ClassUtils.forName(className,classLoader);\n        }\n catch (        ClassNotFoundException ex) {\n          throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n        }\n      }\n      return method.getReturnType();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 116,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1133,
        "startLineNumber" : 237,
        "startColumnNumber" : 5,
        "endLineNumber" : 268,
        "endColumnNumber" : 6
      },
      "nodeContext" : "for (Type typeArg : actualTypeArguments) {\n  if (typeArg.equals(genericReturnType)) {\n    if (arg instanceof Class) {\n      return (Class<?>)arg;\n    }\n else {\n      String className=null;\n      if (arg instanceof String) {\n        className=(String)arg;\n      }\n else       if (arg instanceof TypedStringValue) {\n        TypedStringValue typedValue=((TypedStringValue)arg);\n        String targetTypeName=typedValue.getTargetTypeName();\n        if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n          className=typedValue.getValue();\n        }\n      }\n      if (className != null) {\n        try {\n          return ClassUtils.forName(className,classLoader);\n        }\n catch (        ClassNotFoundException ex) {\n          throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n        }\n      }\n      return method.getReturnType();\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 122,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1308,
        "startLineNumber" : 234,
        "startColumnNumber" : 63,
        "endLineNumber" : 269,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ParameterizedType parameterizedType=(ParameterizedType)methodParameterType;\n  Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();\n  for (  Type typeArg : actualTypeArguments) {\n    if (typeArg.equals(genericReturnType)) {\n      if (arg instanceof Class) {\n        return (Class<?>)arg;\n      }\n else {\n        String className=null;\n        if (arg instanceof String) {\n          className=(String)arg;\n        }\n else         if (arg instanceof TypedStringValue) {\n          TypedStringValue typedValue=((TypedStringValue)arg);\n          String targetTypeName=typedValue.getTargetTypeName();\n          if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n            className=typedValue.getValue();\n          }\n        }\n        if (className != null) {\n          try {\n            return ClassUtils.forName(className,classLoader);\n          }\n catch (          ClassNotFoundException ex) {\n            throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n          }\n        }\n        return method.getReturnType();\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 142,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1362,
        "startLineNumber" : 234,
        "startColumnNumber" : 9,
        "endLineNumber" : 269,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (methodParameterType instanceof ParameterizedType) {\n  ParameterizedType parameterizedType=(ParameterizedType)methodParameterType;\n  Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();\n  for (  Type typeArg : actualTypeArguments) {\n    if (typeArg.equals(genericReturnType)) {\n      if (arg instanceof Class) {\n        return (Class<?>)arg;\n      }\n else {\n        String className=null;\n        if (arg instanceof String) {\n          className=(String)arg;\n        }\n else         if (arg instanceof TypedStringValue) {\n          TypedStringValue typedValue=((TypedStringValue)arg);\n          String targetTypeName=typedValue.getTargetTypeName();\n          if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n            className=typedValue.getValue();\n          }\n        }\n        if (className != null) {\n          try {\n            return ClassUtils.forName(className,classLoader);\n          }\n catch (          ClassNotFoundException ex) {\n            throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n          }\n        }\n        return method.getReturnType();\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 147,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2210,
        "startLineNumber" : 211,
        "startColumnNumber" : 4,
        "endLineNumber" : 269,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (methodParameterType.equals(genericReturnType)) {\n  if (arg instanceof TypedStringValue) {\n    TypedStringValue typedValue=((TypedStringValue)arg);\n    if (typedValue.hasTargetType()) {\n      return typedValue.getTargetType();\n    }\n    try {\n      Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n      if (resolvedType != null) {\n        return resolvedType;\n      }\n    }\n catch (    ClassNotFoundException ex) {\n      throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n    }\n  }\n else   if (arg != null && !(arg instanceof BeanMetadataElement)) {\n    return arg.getClass();\n  }\n  return method.getReturnType();\n}\n else if (methodParameterType instanceof ParameterizedType) {\n  ParameterizedType parameterizedType=(ParameterizedType)methodParameterType;\n  Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();\n  for (  Type typeArg : actualTypeArguments) {\n    if (typeArg.equals(genericReturnType)) {\n      if (arg instanceof Class) {\n        return (Class<?>)arg;\n      }\n else {\n        String className=null;\n        if (arg instanceof String) {\n          className=(String)arg;\n        }\n else         if (arg instanceof TypedStringValue) {\n          TypedStringValue typedValue=((TypedStringValue)arg);\n          String targetTypeName=typedValue.getTargetTypeName();\n          if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n            className=typedValue.getValue();\n          }\n        }\n        if (className != null) {\n          try {\n            return ClassUtils.forName(className,classLoader);\n          }\n catch (          ClassNotFoundException ex) {\n            throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n          }\n        }\n        return method.getReturnType();\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 235,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2303,
        "startLineNumber" : 208,
        "startColumnNumber" : 57,
        "endLineNumber" : 270,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  Type methodParameterType=methodParameterTypes[i];\n  Object arg=args[i];\n  if (methodParameterType.equals(genericReturnType)) {\n    if (arg instanceof TypedStringValue) {\n      TypedStringValue typedValue=((TypedStringValue)arg);\n      if (typedValue.hasTargetType()) {\n        return typedValue.getTargetType();\n      }\n      try {\n        Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n        if (resolvedType != null) {\n          return resolvedType;\n        }\n      }\n catch (      ClassNotFoundException ex) {\n        throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n      }\n    }\n else     if (arg != null && !(arg instanceof BeanMetadataElement)) {\n      return arg.getClass();\n    }\n    return method.getReturnType();\n  }\n else   if (methodParameterType instanceof ParameterizedType) {\n    ParameterizedType parameterizedType=(ParameterizedType)methodParameterType;\n    Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();\n    for (    Type typeArg : actualTypeArguments) {\n      if (typeArg.equals(genericReturnType)) {\n        if (arg instanceof Class) {\n          return (Class<?>)arg;\n        }\n else {\n          String className=null;\n          if (arg instanceof String) {\n            className=(String)arg;\n          }\n else           if (arg instanceof TypedStringValue) {\n            TypedStringValue typedValue=((TypedStringValue)arg);\n            String targetTypeName=typedValue.getTargetTypeName();\n            if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n              className=typedValue.getValue();\n            }\n          }\n          if (className != null) {\n            try {\n              return ClassUtils.forName(className,classLoader);\n            }\n catch (            ClassNotFoundException ex) {\n              throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n            }\n          }\n          return method.getReturnType();\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 252,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2357,
        "startLineNumber" : 208,
        "startColumnNumber" : 3,
        "endLineNumber" : 270,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (int i=0; i < methodParameterTypes.length; i++) {\n  Type methodParameterType=methodParameterTypes[i];\n  Object arg=args[i];\n  if (methodParameterType.equals(genericReturnType)) {\n    if (arg instanceof TypedStringValue) {\n      TypedStringValue typedValue=((TypedStringValue)arg);\n      if (typedValue.hasTargetType()) {\n        return typedValue.getTargetType();\n      }\n      try {\n        Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n        if (resolvedType != null) {\n          return resolvedType;\n        }\n      }\n catch (      ClassNotFoundException ex) {\n        throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n      }\n    }\n else     if (arg != null && !(arg instanceof BeanMetadataElement)) {\n      return arg.getClass();\n    }\n    return method.getReturnType();\n  }\n else   if (methodParameterType instanceof ParameterizedType) {\n    ParameterizedType parameterizedType=(ParameterizedType)methodParameterType;\n    Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();\n    for (    Type typeArg : actualTypeArguments) {\n      if (typeArg.equals(genericReturnType)) {\n        if (arg instanceof Class) {\n          return (Class<?>)arg;\n        }\n else {\n          String className=null;\n          if (arg instanceof String) {\n            className=(String)arg;\n          }\n else           if (arg instanceof TypedStringValue) {\n            TypedStringValue typedValue=((TypedStringValue)arg);\n            String targetTypeName=typedValue.getTargetTypeName();\n            if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n              className=typedValue.getValue();\n            }\n          }\n          if (className != null) {\n            try {\n              return ClassUtils.forName(className,classLoader);\n            }\n catch (            ClassNotFoundException ex) {\n              throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n            }\n          }\n          return method.getReturnType();\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 265,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2366,
        "startLineNumber" : 207,
        "startColumnNumber" : 52,
        "endLineNumber" : 271,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (int i=0; i < methodParameterTypes.length; i++) {\n    Type methodParameterType=methodParameterTypes[i];\n    Object arg=args[i];\n    if (methodParameterType.equals(genericReturnType)) {\n      if (arg instanceof TypedStringValue) {\n        TypedStringValue typedValue=((TypedStringValue)arg);\n        if (typedValue.hasTargetType()) {\n          return typedValue.getTargetType();\n        }\n        try {\n          Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n          if (resolvedType != null) {\n            return resolvedType;\n          }\n        }\n catch (        ClassNotFoundException ex) {\n          throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n        }\n      }\n else       if (arg != null && !(arg instanceof BeanMetadataElement)) {\n        return arg.getClass();\n      }\n      return method.getReturnType();\n    }\n else     if (methodParameterType instanceof ParameterizedType) {\n      ParameterizedType parameterizedType=(ParameterizedType)methodParameterType;\n      Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();\n      for (      Type typeArg : actualTypeArguments) {\n        if (typeArg.equals(genericReturnType)) {\n          if (arg instanceof Class) {\n            return (Class<?>)arg;\n          }\n else {\n            String className=null;\n            if (arg instanceof String) {\n              className=(String)arg;\n            }\n else             if (arg instanceof TypedStringValue) {\n              TypedStringValue typedValue=((TypedStringValue)arg);\n              String targetTypeName=typedValue.getTargetTypeName();\n              if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n                className=typedValue.getValue();\n              }\n            }\n            if (className != null) {\n              try {\n                return ClassUtils.forName(className,classLoader);\n              }\n catch (              ClassNotFoundException ex) {\n                throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n              }\n            }\n            return method.getReturnType();\n          }\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 266,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2416,
        "startLineNumber" : 207,
        "startColumnNumber" : 2,
        "endLineNumber" : 271,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (locallyDeclaredTypeVariableMatchesReturnType) {\n  for (int i=0; i < methodParameterTypes.length; i++) {\n    Type methodParameterType=methodParameterTypes[i];\n    Object arg=args[i];\n    if (methodParameterType.equals(genericReturnType)) {\n      if (arg instanceof TypedStringValue) {\n        TypedStringValue typedValue=((TypedStringValue)arg);\n        if (typedValue.hasTargetType()) {\n          return typedValue.getTargetType();\n        }\n        try {\n          Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n          if (resolvedType != null) {\n            return resolvedType;\n          }\n        }\n catch (        ClassNotFoundException ex) {\n          throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n        }\n      }\n else       if (arg != null && !(arg instanceof BeanMetadataElement)) {\n        return arg.getClass();\n      }\n      return method.getReturnType();\n    }\n else     if (methodParameterType instanceof ParameterizedType) {\n      ParameterizedType parameterizedType=(ParameterizedType)methodParameterType;\n      Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();\n      for (      Type typeArg : actualTypeArguments) {\n        if (typeArg.equals(genericReturnType)) {\n          if (arg instanceof Class) {\n            return (Class<?>)arg;\n          }\n else {\n            String className=null;\n            if (arg instanceof String) {\n              className=(String)arg;\n            }\n else             if (arg instanceof TypedStringValue) {\n              TypedStringValue typedValue=((TypedStringValue)arg);\n              String targetTypeName=typedValue.getTargetTypeName();\n              if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n                className=typedValue.getValue();\n              }\n            }\n            if (className != null) {\n              try {\n                return ClassUtils.forName(className,classLoader);\n              }\n catch (              ClassNotFoundException ex) {\n                throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n              }\n            }\n            return method.getReturnType();\n          }\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 268,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3325,
        "startLineNumber" : 187,
        "startColumnNumber" : 68,
        "endLineNumber" : 275,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Assert.notNull(method,\"Method must not be null\");\n  Assert.notNull(args,\"Argument array must not be null\");\n  TypeVariable<Method>[] declaredTypeVariables=method.getTypeParameters();\n  Type genericReturnType=method.getGenericReturnType();\n  Type[] methodParameterTypes=method.getGenericParameterTypes();\n  Assert.isTrue(args.length == methodParameterTypes.length,\"Argument array does not match parameter count\");\n  boolean locallyDeclaredTypeVariableMatchesReturnType=false;\n  for (  TypeVariable<Method> currentTypeVariable : declaredTypeVariables) {\n    if (currentTypeVariable.equals(genericReturnType)) {\n      locallyDeclaredTypeVariableMatchesReturnType=true;\n      break;\n    }\n  }\n  if (locallyDeclaredTypeVariableMatchesReturnType) {\n    for (int i=0; i < methodParameterTypes.length; i++) {\n      Type methodParameterType=methodParameterTypes[i];\n      Object arg=args[i];\n      if (methodParameterType.equals(genericReturnType)) {\n        if (arg instanceof TypedStringValue) {\n          TypedStringValue typedValue=((TypedStringValue)arg);\n          if (typedValue.hasTargetType()) {\n            return typedValue.getTargetType();\n          }\n          try {\n            Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n            if (resolvedType != null) {\n              return resolvedType;\n            }\n          }\n catch (          ClassNotFoundException ex) {\n            throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n          }\n        }\n else         if (arg != null && !(arg instanceof BeanMetadataElement)) {\n          return arg.getClass();\n        }\n        return method.getReturnType();\n      }\n else       if (methodParameterType instanceof ParameterizedType) {\n        ParameterizedType parameterizedType=(ParameterizedType)methodParameterType;\n        Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();\n        for (        Type typeArg : actualTypeArguments) {\n          if (typeArg.equals(genericReturnType)) {\n            if (arg instanceof Class) {\n              return (Class<?>)arg;\n            }\n else {\n              String className=null;\n              if (arg instanceof String) {\n                className=(String)arg;\n              }\n else               if (arg instanceof TypedStringValue) {\n                TypedStringValue typedValue=((TypedStringValue)arg);\n                String targetTypeName=typedValue.getTargetTypeName();\n                if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n                  className=typedValue.getValue();\n                }\n              }\n              if (className != null) {\n                try {\n                  return ClassUtils.forName(className,classLoader);\n                }\n catch (                ClassNotFoundException ex) {\n                  throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n                }\n              }\n              return method.getReturnType();\n            }\n          }\n        }\n      }\n    }\n  }\n  return method.getReturnType();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 354,
      "astHeight" : 24
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5140,
        "startLineNumber" : 155,
        "startColumnNumber" : 1,
        "endLineNumber" : 275,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Determine the target type for the generic return type of the given <em>generic factory method</em>, where formal type variables are declared on the given method itself. <p>For example, given a factory method with the following signature, if {@code resolveReturnTypeForFactoryMethod()} is invoked with the reflectedmethod for  {@code createProxy()} and an {@code Object[]} array containing{@code MyService.class},  {@code resolveReturnTypeForFactoryMethod()} willinfer that the target return type is  {@code MyService}. <pre class=\"code\"> {@code public static <T> T createProxy(Class<T> clazz)}</pre> <h4>Possible Return Values</h4> <ul> <li>the target return type, if it can be inferred</li> <li>the  {@linkplain Method#getReturnType() standard return type}, if the given  {@code method} does not declare any {@linkplain Method#getTypeParameters() formal type variables}</li> <li>the  {@linkplain Method#getReturnType() standard return type}, if the target return type cannot be inferred (e.g., due to type erasure)</li> <li> {@code null}, if the length of the given arguments array is shorter than the length of the  {@linkplain Method#getGenericParameterTypes() formal argument list} for the givenmethod</li> </ul>\n * @param method the method to introspect (never {@code null})\n * @param args the arguments that will be supplied to the method when it isinvoked (never  {@code null})\n * @param classLoader the ClassLoader to resolve class names against,if necessary (never  {@code null})\n * @return the resolved target return type or the standard method return type\n * @since 3.2.5\n */\npublic static Class<?> resolveReturnTypeForFactoryMethod(Method method,Object[] args,@Nullable ClassLoader classLoader){\n  Assert.notNull(method,\"Method must not be null\");\n  Assert.notNull(args,\"Argument array must not be null\");\n  TypeVariable<Method>[] declaredTypeVariables=method.getTypeParameters();\n  Type genericReturnType=method.getGenericReturnType();\n  Type[] methodParameterTypes=method.getGenericParameterTypes();\n  Assert.isTrue(args.length == methodParameterTypes.length,\"Argument array does not match parameter count\");\n  boolean locallyDeclaredTypeVariableMatchesReturnType=false;\n  for (  TypeVariable<Method> currentTypeVariable : declaredTypeVariables) {\n    if (currentTypeVariable.equals(genericReturnType)) {\n      locallyDeclaredTypeVariableMatchesReturnType=true;\n      break;\n    }\n  }\n  if (locallyDeclaredTypeVariableMatchesReturnType) {\n    for (int i=0; i < methodParameterTypes.length; i++) {\n      Type methodParameterType=methodParameterTypes[i];\n      Object arg=args[i];\n      if (methodParameterType.equals(genericReturnType)) {\n        if (arg instanceof TypedStringValue) {\n          TypedStringValue typedValue=((TypedStringValue)arg);\n          if (typedValue.hasTargetType()) {\n            return typedValue.getTargetType();\n          }\n          try {\n            Class<?> resolvedType=typedValue.resolveTargetType(classLoader);\n            if (resolvedType != null) {\n              return resolvedType;\n            }\n          }\n catch (          ClassNotFoundException ex) {\n            throw new IllegalStateException(\"Failed to resolve value type [\" + typedValue.getTargetTypeName() + \"] for factory method argument\",ex);\n          }\n        }\n else         if (arg != null && !(arg instanceof BeanMetadataElement)) {\n          return arg.getClass();\n        }\n        return method.getReturnType();\n      }\n else       if (methodParameterType instanceof ParameterizedType) {\n        ParameterizedType parameterizedType=(ParameterizedType)methodParameterType;\n        Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();\n        for (        Type typeArg : actualTypeArguments) {\n          if (typeArg.equals(genericReturnType)) {\n            if (arg instanceof Class) {\n              return (Class<?>)arg;\n            }\n else {\n              String className=null;\n              if (arg instanceof String) {\n                className=(String)arg;\n              }\n else               if (arg instanceof TypedStringValue) {\n                TypedStringValue typedValue=((TypedStringValue)arg);\n                String targetTypeName=typedValue.getTargetTypeName();\n                if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {\n                  className=typedValue.getValue();\n                }\n              }\n              if (className != null) {\n                try {\n                  return ClassUtils.forName(className,classLoader);\n                }\n catch (                ClassNotFoundException ex) {\n                  throw new IllegalStateException(\"Could not resolve class name [\" + arg + \"] for factory method argument\",ex);\n                }\n              }\n              return method.getReturnType();\n            }\n          }\n        }\n      }\n    }\n  }\n  return method.getReturnType();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 379,
      "astHeight" : 25
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 251,
        "startColumnNumber" : 10,
        "endLineNumber" : 251,
        "endColumnNumber" : 44
      },
      "nodeContext" : "className=typedValue.getValue();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.springframework.beans.factory.config.TypedStringValue"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 214,
    "startColumnNumber" : 10,
    "endLineNumber" : 214,
    "endColumnNumber" : 20
  }, {
    "charLength" : 10,
    "startLineNumber" : 215,
    "startColumnNumber" : 14,
    "endLineNumber" : 215,
    "endColumnNumber" : 24
  }, {
    "charLength" : 10,
    "startLineNumber" : 218,
    "startColumnNumber" : 31,
    "endLineNumber" : 218,
    "endColumnNumber" : 41
  }, {
    "charLength" : 10,
    "startLineNumber" : 225,
    "startColumnNumber" : 9,
    "endLineNumber" : 225,
    "endColumnNumber" : 19
  }, {
    "charLength" : 10,
    "startLineNumber" : 249,
    "startColumnNumber" : 33,
    "endLineNumber" : 249,
    "endColumnNumber" : 43
  }, {
    "charLength" : 10,
    "startLineNumber" : 251,
    "startColumnNumber" : 22,
    "endLineNumber" : 251,
    "endColumnNumber" : 32
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 10
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 10
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 14
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 14
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 14
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 14
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 16
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 16
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 16
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 16
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 5
  } ]
}