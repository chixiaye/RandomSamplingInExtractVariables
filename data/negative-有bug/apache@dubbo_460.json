{
  "id" : 460,
  "expression" : "ApplicationModel.getEnvironment().getAppExternalConfigurationMap()",
  "projectName" : "apache@dubbo",
  "commitID" : "4ea0a09846fa74b7b1a6a1a548f31859a2cddcc8",
  "filePath" : "/dubbo-registry/dubbo-registry-dns/src/test/java/org/apache/dubbo/registry/dns/DNSServiceDiscoveryTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ApplicationModel.getEnvironment().getAppExternalConfigurationMap()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 66,
      "startLineNumber" : 113,
      "startColumnNumber" : 8,
      "endLineNumber" : 113,
      "endColumnNumber" : 74
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 136,
        "startLineNumber" : 113,
        "startColumnNumber" : 8,
        "endLineNumber" : 114,
        "endColumnNumber" : 69
      },
      "nodeContext" : "ApplicationModel.getEnvironment().getAppExternalConfigurationMap().put(METADATA_PROXY_TIMEOUT_KEY,String.valueOf(500))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 137,
        "startLineNumber" : 113,
        "startColumnNumber" : 8,
        "endLineNumber" : 114,
        "endColumnNumber" : 70
      },
      "nodeContext" : "ApplicationModel.getEnvironment().getAppExternalConfigurationMap().put(METADATA_PROXY_TIMEOUT_KEY,String.valueOf(500));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3124,
        "startLineNumber" : 107,
        "startColumnNumber" : 48,
        "endLineNumber" : 167,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DNSServiceDiscovery dnsServiceDiscovery=new DNSServiceDiscovery();\n  URL registryURL=URL.valueOf(\"dns://\").addParameter(DNSClientConst.DNS_POLLING_CYCLE,100).addParameter(Constants.ECHO_POLLING_CYCLE_KEY,100);\n  ApplicationModel.getEnvironment().getAppExternalConfigurationMap().put(METADATA_PROXY_TIMEOUT_KEY,String.valueOf(500));\n  dnsServiceDiscovery.initialize(registryURL);\n  WritableMetadataService metadataService=WritableMetadataService.getDefaultExtension();\n  ServiceInstance serviceInstance=new DefaultServiceInstance(\"TestService\",\"localhost\",12345);\n  serviceInstance.getMetadata().put(\"a\",\"b\");\n  dnsServiceDiscovery.register(serviceInstance);\n  int port=NetUtils.getAvailablePort();\n  ApplicationModel.getApplicationConfig().setMetadataServicePort(port);\n  WritableMetadataService spiedMetadataService=Mockito.spy(metadataService);\n  ServiceConfig<MetadataService> serviceConfig=exportMockMetadataService(spiedMetadataService,port);\n  DNSResolver dnsResolver=Mockito.mock(DNSResolver.class);\n  ResolveResult resolveResult=new ResolveResult();\n  resolveResult.getHostnameList().add(\"127.0.0.1\");\n  Mockito.when(dnsResolver.resolve(\"Test.Service.\")).thenReturn(resolveResult);\n  dnsServiceDiscovery.setDnsResolver(dnsResolver);\n  List<ServiceInstance> serviceInstances=dnsServiceDiscovery.getInstances(\"Test.Service.\");\n  assertEquals(\"b\",serviceInstances.get(0).getMetadata(\"a\"));\n  Set<String> serviceNames=new HashSet<>();\n  serviceNames.add(\"Test.Service.\");\n  ServiceInstancesChangedListener changedListener=Mockito.spy(new ServiceInstancesChangedListener(serviceNames,null));\n  Mockito.doNothing().when(changedListener).onEvent(Mockito.any());\n  serviceInstance.getMetadata().put(\"a\",\"c\");\n  dnsServiceDiscovery.update(serviceInstance);\n  serviceInstances=dnsServiceDiscovery.getInstances(\"Test.Service.\");\n  assertEquals(\"c\",serviceInstances.get(0).getMetadata(\"a\"));\n  dnsServiceDiscovery.addServiceInstancesChangedListener(changedListener);\n  ArgumentCaptor<ServiceInstancesChangedEvent> argument=ArgumentCaptor.forClass(ServiceInstancesChangedEvent.class);\n  Mockito.verify(changedListener,Mockito.timeout(1000)).onEvent(argument.capture());\n  assertEquals(\"c\",argument.getValue().getServiceInstances().get(0).getMetadata(\"a\"));\n  Mockito.when(dnsResolver.resolve(\"Test.Service.\")).thenReturn(new ResolveResult());\n  Thread.sleep(1000);\n  assertTrue(dnsServiceDiscovery.getCachedServiceInstances().get(\"Test.Service.\").isEmpty());\n  metadataService.exportInstanceMetadata(null);\n  metadataService.getInstanceMetadataChangedListenerMap().clear();\n  serviceConfig.unexport();\n  dnsServiceDiscovery.destroy();\n  ApplicationModel.getEnvironment().getAppExternalConfigurationMap().remove(METADATA_PROXY_TIMEOUT_KEY,String.valueOf(100));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 362,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3178,
        "startLineNumber" : 106,
        "startColumnNumber" : 4,
        "endLineNumber" : 167,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testConsumer() throws Exception {\n  DNSServiceDiscovery dnsServiceDiscovery=new DNSServiceDiscovery();\n  URL registryURL=URL.valueOf(\"dns://\").addParameter(DNSClientConst.DNS_POLLING_CYCLE,100).addParameter(Constants.ECHO_POLLING_CYCLE_KEY,100);\n  ApplicationModel.getEnvironment().getAppExternalConfigurationMap().put(METADATA_PROXY_TIMEOUT_KEY,String.valueOf(500));\n  dnsServiceDiscovery.initialize(registryURL);\n  WritableMetadataService metadataService=WritableMetadataService.getDefaultExtension();\n  ServiceInstance serviceInstance=new DefaultServiceInstance(\"TestService\",\"localhost\",12345);\n  serviceInstance.getMetadata().put(\"a\",\"b\");\n  dnsServiceDiscovery.register(serviceInstance);\n  int port=NetUtils.getAvailablePort();\n  ApplicationModel.getApplicationConfig().setMetadataServicePort(port);\n  WritableMetadataService spiedMetadataService=Mockito.spy(metadataService);\n  ServiceConfig<MetadataService> serviceConfig=exportMockMetadataService(spiedMetadataService,port);\n  DNSResolver dnsResolver=Mockito.mock(DNSResolver.class);\n  ResolveResult resolveResult=new ResolveResult();\n  resolveResult.getHostnameList().add(\"127.0.0.1\");\n  Mockito.when(dnsResolver.resolve(\"Test.Service.\")).thenReturn(resolveResult);\n  dnsServiceDiscovery.setDnsResolver(dnsResolver);\n  List<ServiceInstance> serviceInstances=dnsServiceDiscovery.getInstances(\"Test.Service.\");\n  assertEquals(\"b\",serviceInstances.get(0).getMetadata(\"a\"));\n  Set<String> serviceNames=new HashSet<>();\n  serviceNames.add(\"Test.Service.\");\n  ServiceInstancesChangedListener changedListener=Mockito.spy(new ServiceInstancesChangedListener(serviceNames,null));\n  Mockito.doNothing().when(changedListener).onEvent(Mockito.any());\n  serviceInstance.getMetadata().put(\"a\",\"c\");\n  dnsServiceDiscovery.update(serviceInstance);\n  serviceInstances=dnsServiceDiscovery.getInstances(\"Test.Service.\");\n  assertEquals(\"c\",serviceInstances.get(0).getMetadata(\"a\"));\n  dnsServiceDiscovery.addServiceInstancesChangedListener(changedListener);\n  ArgumentCaptor<ServiceInstancesChangedEvent> argument=ArgumentCaptor.forClass(ServiceInstancesChangedEvent.class);\n  Mockito.verify(changedListener,Mockito.timeout(1000)).onEvent(argument.capture());\n  assertEquals(\"c\",argument.getValue().getServiceInstances().get(0).getMetadata(\"a\"));\n  Mockito.when(dnsResolver.resolve(\"Test.Service.\")).thenReturn(new ResolveResult());\n  Thread.sleep(1000);\n  assertTrue(dnsServiceDiscovery.getCachedServiceInstances().get(\"Test.Service.\").isEmpty());\n  metadataService.exportInstanceMetadata(null);\n  metadataService.getInstanceMetadataChangedListenerMap().clear();\n  serviceConfig.unexport();\n  dnsServiceDiscovery.destroy();\n  ApplicationModel.getEnvironment().getAppExternalConfigurationMap().remove(METADATA_PROXY_TIMEOUT_KEY,String.valueOf(100));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 370,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 136,
        "startLineNumber" : 113,
        "startColumnNumber" : 8,
        "endLineNumber" : 114,
        "endColumnNumber" : 69
      },
      "nodeContext" : "ApplicationModel.getEnvironment().getAppExternalConfigurationMap().put(METADATA_PROXY_TIMEOUT_KEY,String.valueOf(500))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "java.util.Map<java.lang.String,java.lang.String>"
  }, {
    "nodeContext" : "ApplicationModel.getEnvironment().getAppExternalConfigurationMap()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 66,
      "startLineNumber" : 165,
      "startColumnNumber" : 8,
      "endLineNumber" : 165,
      "endColumnNumber" : 74
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 139,
        "startLineNumber" : 165,
        "startColumnNumber" : 8,
        "endLineNumber" : 166,
        "endColumnNumber" : 72
      },
      "nodeContext" : "ApplicationModel.getEnvironment().getAppExternalConfigurationMap().remove(METADATA_PROXY_TIMEOUT_KEY,String.valueOf(100))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 140,
        "startLineNumber" : 165,
        "startColumnNumber" : 8,
        "endLineNumber" : 166,
        "endColumnNumber" : 73
      },
      "nodeContext" : "ApplicationModel.getEnvironment().getAppExternalConfigurationMap().remove(METADATA_PROXY_TIMEOUT_KEY,String.valueOf(100));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3124,
        "startLineNumber" : 107,
        "startColumnNumber" : 48,
        "endLineNumber" : 167,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DNSServiceDiscovery dnsServiceDiscovery=new DNSServiceDiscovery();\n  URL registryURL=URL.valueOf(\"dns://\").addParameter(DNSClientConst.DNS_POLLING_CYCLE,100).addParameter(Constants.ECHO_POLLING_CYCLE_KEY,100);\n  ApplicationModel.getEnvironment().getAppExternalConfigurationMap().put(METADATA_PROXY_TIMEOUT_KEY,String.valueOf(500));\n  dnsServiceDiscovery.initialize(registryURL);\n  WritableMetadataService metadataService=WritableMetadataService.getDefaultExtension();\n  ServiceInstance serviceInstance=new DefaultServiceInstance(\"TestService\",\"localhost\",12345);\n  serviceInstance.getMetadata().put(\"a\",\"b\");\n  dnsServiceDiscovery.register(serviceInstance);\n  int port=NetUtils.getAvailablePort();\n  ApplicationModel.getApplicationConfig().setMetadataServicePort(port);\n  WritableMetadataService spiedMetadataService=Mockito.spy(metadataService);\n  ServiceConfig<MetadataService> serviceConfig=exportMockMetadataService(spiedMetadataService,port);\n  DNSResolver dnsResolver=Mockito.mock(DNSResolver.class);\n  ResolveResult resolveResult=new ResolveResult();\n  resolveResult.getHostnameList().add(\"127.0.0.1\");\n  Mockito.when(dnsResolver.resolve(\"Test.Service.\")).thenReturn(resolveResult);\n  dnsServiceDiscovery.setDnsResolver(dnsResolver);\n  List<ServiceInstance> serviceInstances=dnsServiceDiscovery.getInstances(\"Test.Service.\");\n  assertEquals(\"b\",serviceInstances.get(0).getMetadata(\"a\"));\n  Set<String> serviceNames=new HashSet<>();\n  serviceNames.add(\"Test.Service.\");\n  ServiceInstancesChangedListener changedListener=Mockito.spy(new ServiceInstancesChangedListener(serviceNames,null));\n  Mockito.doNothing().when(changedListener).onEvent(Mockito.any());\n  serviceInstance.getMetadata().put(\"a\",\"c\");\n  dnsServiceDiscovery.update(serviceInstance);\n  serviceInstances=dnsServiceDiscovery.getInstances(\"Test.Service.\");\n  assertEquals(\"c\",serviceInstances.get(0).getMetadata(\"a\"));\n  dnsServiceDiscovery.addServiceInstancesChangedListener(changedListener);\n  ArgumentCaptor<ServiceInstancesChangedEvent> argument=ArgumentCaptor.forClass(ServiceInstancesChangedEvent.class);\n  Mockito.verify(changedListener,Mockito.timeout(1000)).onEvent(argument.capture());\n  assertEquals(\"c\",argument.getValue().getServiceInstances().get(0).getMetadata(\"a\"));\n  Mockito.when(dnsResolver.resolve(\"Test.Service.\")).thenReturn(new ResolveResult());\n  Thread.sleep(1000);\n  assertTrue(dnsServiceDiscovery.getCachedServiceInstances().get(\"Test.Service.\").isEmpty());\n  metadataService.exportInstanceMetadata(null);\n  metadataService.getInstanceMetadataChangedListenerMap().clear();\n  serviceConfig.unexport();\n  dnsServiceDiscovery.destroy();\n  ApplicationModel.getEnvironment().getAppExternalConfigurationMap().remove(METADATA_PROXY_TIMEOUT_KEY,String.valueOf(100));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 362,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3178,
        "startLineNumber" : 106,
        "startColumnNumber" : 4,
        "endLineNumber" : 167,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testConsumer() throws Exception {\n  DNSServiceDiscovery dnsServiceDiscovery=new DNSServiceDiscovery();\n  URL registryURL=URL.valueOf(\"dns://\").addParameter(DNSClientConst.DNS_POLLING_CYCLE,100).addParameter(Constants.ECHO_POLLING_CYCLE_KEY,100);\n  ApplicationModel.getEnvironment().getAppExternalConfigurationMap().put(METADATA_PROXY_TIMEOUT_KEY,String.valueOf(500));\n  dnsServiceDiscovery.initialize(registryURL);\n  WritableMetadataService metadataService=WritableMetadataService.getDefaultExtension();\n  ServiceInstance serviceInstance=new DefaultServiceInstance(\"TestService\",\"localhost\",12345);\n  serviceInstance.getMetadata().put(\"a\",\"b\");\n  dnsServiceDiscovery.register(serviceInstance);\n  int port=NetUtils.getAvailablePort();\n  ApplicationModel.getApplicationConfig().setMetadataServicePort(port);\n  WritableMetadataService spiedMetadataService=Mockito.spy(metadataService);\n  ServiceConfig<MetadataService> serviceConfig=exportMockMetadataService(spiedMetadataService,port);\n  DNSResolver dnsResolver=Mockito.mock(DNSResolver.class);\n  ResolveResult resolveResult=new ResolveResult();\n  resolveResult.getHostnameList().add(\"127.0.0.1\");\n  Mockito.when(dnsResolver.resolve(\"Test.Service.\")).thenReturn(resolveResult);\n  dnsServiceDiscovery.setDnsResolver(dnsResolver);\n  List<ServiceInstance> serviceInstances=dnsServiceDiscovery.getInstances(\"Test.Service.\");\n  assertEquals(\"b\",serviceInstances.get(0).getMetadata(\"a\"));\n  Set<String> serviceNames=new HashSet<>();\n  serviceNames.add(\"Test.Service.\");\n  ServiceInstancesChangedListener changedListener=Mockito.spy(new ServiceInstancesChangedListener(serviceNames,null));\n  Mockito.doNothing().when(changedListener).onEvent(Mockito.any());\n  serviceInstance.getMetadata().put(\"a\",\"c\");\n  dnsServiceDiscovery.update(serviceInstance);\n  serviceInstances=dnsServiceDiscovery.getInstances(\"Test.Service.\");\n  assertEquals(\"c\",serviceInstances.get(0).getMetadata(\"a\"));\n  dnsServiceDiscovery.addServiceInstancesChangedListener(changedListener);\n  ArgumentCaptor<ServiceInstancesChangedEvent> argument=ArgumentCaptor.forClass(ServiceInstancesChangedEvent.class);\n  Mockito.verify(changedListener,Mockito.timeout(1000)).onEvent(argument.capture());\n  assertEquals(\"c\",argument.getValue().getServiceInstances().get(0).getMetadata(\"a\"));\n  Mockito.when(dnsResolver.resolve(\"Test.Service.\")).thenReturn(new ResolveResult());\n  Thread.sleep(1000);\n  assertTrue(dnsServiceDiscovery.getCachedServiceInstances().get(\"Test.Service.\").isEmpty());\n  metadataService.exportInstanceMetadata(null);\n  metadataService.getInstanceMetadataChangedListenerMap().clear();\n  serviceConfig.unexport();\n  dnsServiceDiscovery.destroy();\n  ApplicationModel.getEnvironment().getAppExternalConfigurationMap().remove(METADATA_PROXY_TIMEOUT_KEY,String.valueOf(100));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 370,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 139,
        "startLineNumber" : 165,
        "startColumnNumber" : 8,
        "endLineNumber" : 166,
        "endColumnNumber" : 72
      },
      "nodeContext" : "ApplicationModel.getEnvironment().getAppExternalConfigurationMap().remove(METADATA_PROXY_TIMEOUT_KEY,String.valueOf(100))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "java.util.Map<java.lang.String,java.lang.String>"
  } ],
  "positionList" : [ {
    "charLength" : 66,
    "startLineNumber" : 113,
    "startColumnNumber" : 8,
    "endLineNumber" : 113,
    "endColumnNumber" : 74
  }, {
    "charLength" : 66,
    "startLineNumber" : 165,
    "startColumnNumber" : 8,
    "endLineNumber" : 165,
    "endColumnNumber" : 74
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}