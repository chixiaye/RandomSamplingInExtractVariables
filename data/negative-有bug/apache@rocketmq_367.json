{
  "id" : 367,
  "expression" : "Math",
  "projectName" : "apache@rocketmq",
  "commitID" : "7692d466e1fda6c29d52a61617cab1d82de8b884",
  "filePath" : "/store/src/main/java/org/apache/rocketmq/store/ha/autoswitch/AutoSwitchHAClient.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Math",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 512,
      "startColumnNumber" : 66,
      "endLineNumber" : 512,
      "endColumnNumber" : 70
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 512,
        "startColumnNumber" : 66,
        "endLineNumber" : 512,
        "endColumnNumber" : 121
      },
      "nodeContext" : "Math.min(confirmOffset,messageStore.getMaxPhyOffset())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 512,
        "startColumnNumber" : 36,
        "endLineNumber" : 512,
        "endColumnNumber" : 122
      },
      "nodeContext" : "haService.updateConfirmOffset(Math.min(confirmOffset,messageStore.getMaxPhyOffset()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 512,
        "startColumnNumber" : 36,
        "endLineNumber" : 512,
        "endColumnNumber" : 123
      },
      "nodeContext" : "haService.updateConfirmOffset(Math.min(confirmOffset,messageStore.getMaxPhyOffset()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4189,
        "startLineNumber" : 465,
        "startColumnNumber" : 28,
        "endLineNumber" : 521,
        "endColumnNumber" : 29
      },
      "nodeContext" : "switch (AutoSwitchHAClient.this.currentState) {\ncase HANDSHAKE:  AutoSwitchHAClient.this.processPosition+=AutoSwitchHAConnection.MSG_HEADER_SIZE;\nint entrySize=AutoSwitchHAConnection.EPOCH_ENTRY_SIZE;\nfinal int entryNums=bodySize / entrySize;\nfinal ArrayList<EpochEntry> epochEntries=new ArrayList<>(entryNums);\nfor (int i=0; i < entryNums; i++) {\nint epoch=byteBufferRead.getInt(AutoSwitchHAClient.this.processPosition + i * entrySize);\nlong startOffset=byteBufferRead.getLong(AutoSwitchHAClient.this.processPosition + i * entrySize + 4);\nepochEntries.add(new EpochEntry(epoch,startOffset));\n}\nbyteBufferRead.position(readSocketPos);\nAutoSwitchHAClient.this.processPosition+=bodySize;\nLOGGER.info(\"Receive handshake, masterMaxPosition {}, masterEpochEntries:{}, try truncate log\",masterOffset,epochEntries);\nif (!doTruncate(epochEntries,masterOffset)) {\nwaitForRunning(1000 * 2);\nLOGGER.error(\"AutoSwitchHAClient truncate log failed in handshake state\");\nreturn false;\n}\nbreak;\ncase TRANSFER:byte[] bodyData=new byte[bodySize];\nbyteBufferRead.position(AutoSwitchHAClient.this.processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE);\nbyteBufferRead.get(bodyData);\nbyteBufferRead.position(readSocketPos);\nAutoSwitchHAClient.this.processPosition+=AutoSwitchHAConnection.MSG_HEADER_SIZE + bodySize;\nlong slavePhyOffset=AutoSwitchHAClient.this.messageStore.getMaxPhyOffset();\nif (slavePhyOffset != 0) {\nif (slavePhyOffset != masterOffset) {\nLOGGER.error(\"master pushed offset not equal the max phy offset in slave, SLAVE: \" + slavePhyOffset + \" MASTER: \"+ masterOffset);\nreturn false;\n}\n}\nif (masterEpoch != AutoSwitchHAClient.this.currentReceivedEpoch) {\nAutoSwitchHAClient.this.currentReceivedEpoch=masterEpoch;\nAutoSwitchHAClient.this.epochCache.appendEntry(new EpochEntry(masterEpoch,masterEpochStartOffset));\n}\nif (bodySize > 0) {\nAutoSwitchHAClient.this.messageStore.appendToCommitLog(masterOffset,bodyData,0,bodyData.length);\n}\nhaService.updateConfirmOffset(Math.min(confirmOffset,messageStore.getMaxPhyOffset()));\nif (!reportSlaveMaxOffset()) {\nLOGGER.error(\"AutoSwitchHAClient report max offset to master failed\");\nreturn false;\n}\nbreak;\ndefault:break;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 286,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 4286,
        "startLineNumber" : 464,
        "startColumnNumber" : 89,
        "endLineNumber" : 523,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\nswitch (AutoSwitchHAClient.this.currentState) {\ncase HANDSHAKE:    AutoSwitchHAClient.this.processPosition+=AutoSwitchHAConnection.MSG_HEADER_SIZE;\n  int entrySize=AutoSwitchHAConnection.EPOCH_ENTRY_SIZE;\nfinal int entryNums=bodySize / entrySize;\nfinal ArrayList<EpochEntry> epochEntries=new ArrayList<>(entryNums);\nfor (int i=0; i < entryNums; i++) {\nint epoch=byteBufferRead.getInt(AutoSwitchHAClient.this.processPosition + i * entrySize);\nlong startOffset=byteBufferRead.getLong(AutoSwitchHAClient.this.processPosition + i * entrySize + 4);\nepochEntries.add(new EpochEntry(epoch,startOffset));\n}\nbyteBufferRead.position(readSocketPos);\nAutoSwitchHAClient.this.processPosition+=bodySize;\nLOGGER.info(\"Receive handshake, masterMaxPosition {}, masterEpochEntries:{}, try truncate log\",masterOffset,epochEntries);\nif (!doTruncate(epochEntries,masterOffset)) {\nwaitForRunning(1000 * 2);\nLOGGER.error(\"AutoSwitchHAClient truncate log failed in handshake state\");\nreturn false;\n}\nbreak;\ncase TRANSFER:byte[] bodyData=new byte[bodySize];\nbyteBufferRead.position(AutoSwitchHAClient.this.processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE);\nbyteBufferRead.get(bodyData);\nbyteBufferRead.position(readSocketPos);\nAutoSwitchHAClient.this.processPosition+=AutoSwitchHAConnection.MSG_HEADER_SIZE + bodySize;\nlong slavePhyOffset=AutoSwitchHAClient.this.messageStore.getMaxPhyOffset();\nif (slavePhyOffset != 0) {\nif (slavePhyOffset != masterOffset) {\nLOGGER.error(\"master pushed offset not equal the max phy offset in slave, SLAVE: \" + slavePhyOffset + \" MASTER: \"+ masterOffset);\nreturn false;\n}\n}\nif (masterEpoch != AutoSwitchHAClient.this.currentReceivedEpoch) {\nAutoSwitchHAClient.this.currentReceivedEpoch=masterEpoch;\nAutoSwitchHAClient.this.epochCache.appendEntry(new EpochEntry(masterEpoch,masterEpochStartOffset));\n}\nif (bodySize > 0) {\nAutoSwitchHAClient.this.messageStore.appendToCommitLog(masterOffset,bodyData,0,bodyData.length);\n}\nhaService.updateConfirmOffset(Math.min(confirmOffset,messageStore.getMaxPhyOffset()));\nif (!reportSlaveMaxOffset()) {\nLOGGER.error(\"AutoSwitchHAClient report max offset to master failed\");\nreturn false;\n}\nbreak;\ndefault:break;\n}\ncontinue;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 288,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4351,
        "startLineNumber" : 464,
        "startColumnNumber" : 24,
        "endLineNumber" : 523,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (diff >= (AutoSwitchHAConnection.MSG_HEADER_SIZE + bodySize)) {\nswitch (AutoSwitchHAClient.this.currentState) {\ncase HANDSHAKE:    AutoSwitchHAClient.this.processPosition+=AutoSwitchHAConnection.MSG_HEADER_SIZE;\n  int entrySize=AutoSwitchHAConnection.EPOCH_ENTRY_SIZE;\nfinal int entryNums=bodySize / entrySize;\nfinal ArrayList<EpochEntry> epochEntries=new ArrayList<>(entryNums);\nfor (int i=0; i < entryNums; i++) {\nint epoch=byteBufferRead.getInt(AutoSwitchHAClient.this.processPosition + i * entrySize);\nlong startOffset=byteBufferRead.getLong(AutoSwitchHAClient.this.processPosition + i * entrySize + 4);\nepochEntries.add(new EpochEntry(epoch,startOffset));\n}\nbyteBufferRead.position(readSocketPos);\nAutoSwitchHAClient.this.processPosition+=bodySize;\nLOGGER.info(\"Receive handshake, masterMaxPosition {}, masterEpochEntries:{}, try truncate log\",masterOffset,epochEntries);\nif (!doTruncate(epochEntries,masterOffset)) {\nwaitForRunning(1000 * 2);\nLOGGER.error(\"AutoSwitchHAClient truncate log failed in handshake state\");\nreturn false;\n}\nbreak;\ncase TRANSFER:byte[] bodyData=new byte[bodySize];\nbyteBufferRead.position(AutoSwitchHAClient.this.processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE);\nbyteBufferRead.get(bodyData);\nbyteBufferRead.position(readSocketPos);\nAutoSwitchHAClient.this.processPosition+=AutoSwitchHAConnection.MSG_HEADER_SIZE + bodySize;\nlong slavePhyOffset=AutoSwitchHAClient.this.messageStore.getMaxPhyOffset();\nif (slavePhyOffset != 0) {\nif (slavePhyOffset != masterOffset) {\nLOGGER.error(\"master pushed offset not equal the max phy offset in slave, SLAVE: \" + slavePhyOffset + \" MASTER: \"+ masterOffset);\nreturn false;\n}\n}\nif (masterEpoch != AutoSwitchHAClient.this.currentReceivedEpoch) {\nAutoSwitchHAClient.this.currentReceivedEpoch=masterEpoch;\nAutoSwitchHAClient.this.epochCache.appendEntry(new EpochEntry(masterEpoch,masterEpochStartOffset));\n}\nif (bodySize > 0) {\nAutoSwitchHAClient.this.messageStore.appendToCommitLog(masterOffset,bodyData,0,bodyData.length);\n}\nhaService.updateConfirmOffset(Math.min(confirmOffset,messageStore.getMaxPhyOffset()));\nif (!reportSlaveMaxOffset()) {\nLOGGER.error(\"AutoSwitchHAClient report max offset to master failed\");\nreturn false;\n}\nbreak;\ndefault:break;\n}\ncontinue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 297,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 5981,
        "startLineNumber" : 447,
        "startColumnNumber" : 72,
        "endLineNumber" : 524,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  int processPosition=AutoSwitchHAClient.this.processPosition;\n  int masterState=byteBufferRead.getInt(processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE - 36);\n  int bodySize=byteBufferRead.getInt(processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE - 32);\n  long masterOffset=byteBufferRead.getLong(processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE - 28);\n  int masterEpoch=byteBufferRead.getInt(processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE - 20);\n  long masterEpochStartOffset=byteBufferRead.getLong(processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE - 16);\n  long confirmOffset=byteBufferRead.getLong(processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE - 8);\n  if (masterState != AutoSwitchHAClient.this.currentState.ordinal()) {\n    AutoSwitchHAClient.this.processPosition+=AutoSwitchHAConnection.MSG_HEADER_SIZE + bodySize;\n    AutoSwitchHAClient.this.waitForRunning(1);\n    LOGGER.error(\"State not matched, masterState:{}, slaveState:{}, bodySize:{}, offset:{}, masterEpoch:{}, masterEpochStartOffset:{}, confirmOffset:{}\",masterState,AutoSwitchHAClient.this.currentState,bodySize,masterOffset,masterEpoch,masterEpochStartOffset,confirmOffset);\n    return true;\n  }\n  if (diff >= (AutoSwitchHAConnection.MSG_HEADER_SIZE + bodySize)) {\nswitch (AutoSwitchHAClient.this.currentState) {\ncase HANDSHAKE:      AutoSwitchHAClient.this.processPosition+=AutoSwitchHAConnection.MSG_HEADER_SIZE;\n    int entrySize=AutoSwitchHAConnection.EPOCH_ENTRY_SIZE;\n  final int entryNums=bodySize / entrySize;\nfinal ArrayList<EpochEntry> epochEntries=new ArrayList<>(entryNums);\nfor (int i=0; i < entryNums; i++) {\nint epoch=byteBufferRead.getInt(AutoSwitchHAClient.this.processPosition + i * entrySize);\nlong startOffset=byteBufferRead.getLong(AutoSwitchHAClient.this.processPosition + i * entrySize + 4);\nepochEntries.add(new EpochEntry(epoch,startOffset));\n}\nbyteBufferRead.position(readSocketPos);\nAutoSwitchHAClient.this.processPosition+=bodySize;\nLOGGER.info(\"Receive handshake, masterMaxPosition {}, masterEpochEntries:{}, try truncate log\",masterOffset,epochEntries);\nif (!doTruncate(epochEntries,masterOffset)) {\nwaitForRunning(1000 * 2);\nLOGGER.error(\"AutoSwitchHAClient truncate log failed in handshake state\");\nreturn false;\n}\nbreak;\ncase TRANSFER:byte[] bodyData=new byte[bodySize];\nbyteBufferRead.position(AutoSwitchHAClient.this.processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE);\nbyteBufferRead.get(bodyData);\nbyteBufferRead.position(readSocketPos);\nAutoSwitchHAClient.this.processPosition+=AutoSwitchHAConnection.MSG_HEADER_SIZE + bodySize;\nlong slavePhyOffset=AutoSwitchHAClient.this.messageStore.getMaxPhyOffset();\nif (slavePhyOffset != 0) {\nif (slavePhyOffset != masterOffset) {\nLOGGER.error(\"master pushed offset not equal the max phy offset in slave, SLAVE: \" + slavePhyOffset + \" MASTER: \"+ masterOffset);\nreturn false;\n}\n}\nif (masterEpoch != AutoSwitchHAClient.this.currentReceivedEpoch) {\nAutoSwitchHAClient.this.currentReceivedEpoch=masterEpoch;\nAutoSwitchHAClient.this.epochCache.appendEntry(new EpochEntry(masterEpoch,masterEpochStartOffset));\n}\nif (bodySize > 0) {\nAutoSwitchHAClient.this.messageStore.appendToCommitLog(masterOffset,bodyData,0,bodyData.length);\n}\nhaService.updateConfirmOffset(Math.min(confirmOffset,messageStore.getMaxPhyOffset()));\nif (!reportSlaveMaxOffset()) {\nLOGGER.error(\"AutoSwitchHAClient report max offset to master failed\");\nreturn false;\n}\nbreak;\ndefault:break;\n}\ncontinue;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 434,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6033,
        "startLineNumber" : 447,
        "startColumnNumber" : 20,
        "endLineNumber" : 524,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (diff >= AutoSwitchHAConnection.MSG_HEADER_SIZE) {\n  int processPosition=AutoSwitchHAClient.this.processPosition;\n  int masterState=byteBufferRead.getInt(processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE - 36);\n  int bodySize=byteBufferRead.getInt(processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE - 32);\n  long masterOffset=byteBufferRead.getLong(processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE - 28);\n  int masterEpoch=byteBufferRead.getInt(processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE - 20);\n  long masterEpochStartOffset=byteBufferRead.getLong(processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE - 16);\n  long confirmOffset=byteBufferRead.getLong(processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE - 8);\n  if (masterState != AutoSwitchHAClient.this.currentState.ordinal()) {\n    AutoSwitchHAClient.this.processPosition+=AutoSwitchHAConnection.MSG_HEADER_SIZE + bodySize;\n    AutoSwitchHAClient.this.waitForRunning(1);\n    LOGGER.error(\"State not matched, masterState:{}, slaveState:{}, bodySize:{}, offset:{}, masterEpoch:{}, masterEpochStartOffset:{}, confirmOffset:{}\",masterState,AutoSwitchHAClient.this.currentState,bodySize,masterOffset,masterEpoch,masterEpochStartOffset,confirmOffset);\n    return true;\n  }\n  if (diff >= (AutoSwitchHAConnection.MSG_HEADER_SIZE + bodySize)) {\nswitch (AutoSwitchHAClient.this.currentState) {\ncase HANDSHAKE:      AutoSwitchHAClient.this.processPosition+=AutoSwitchHAConnection.MSG_HEADER_SIZE;\n    int entrySize=AutoSwitchHAConnection.EPOCH_ENTRY_SIZE;\n  final int entryNums=bodySize / entrySize;\nfinal ArrayList<EpochEntry> epochEntries=new ArrayList<>(entryNums);\nfor (int i=0; i < entryNums; i++) {\nint epoch=byteBufferRead.getInt(AutoSwitchHAClient.this.processPosition + i * entrySize);\nlong startOffset=byteBufferRead.getLong(AutoSwitchHAClient.this.processPosition + i * entrySize + 4);\nepochEntries.add(new EpochEntry(epoch,startOffset));\n}\nbyteBufferRead.position(readSocketPos);\nAutoSwitchHAClient.this.processPosition+=bodySize;\nLOGGER.info(\"Receive handshake, masterMaxPosition {}, masterEpochEntries:{}, try truncate log\",masterOffset,epochEntries);\nif (!doTruncate(epochEntries,masterOffset)) {\nwaitForRunning(1000 * 2);\nLOGGER.error(\"AutoSwitchHAClient truncate log failed in handshake state\");\nreturn false;\n}\nbreak;\ncase TRANSFER:byte[] bodyData=new byte[bodySize];\nbyteBufferRead.position(AutoSwitchHAClient.this.processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE);\nbyteBufferRead.get(bodyData);\nbyteBufferRead.position(readSocketPos);\nAutoSwitchHAClient.this.processPosition+=AutoSwitchHAConnection.MSG_HEADER_SIZE + bodySize;\nlong slavePhyOffset=AutoSwitchHAClient.this.messageStore.getMaxPhyOffset();\nif (slavePhyOffset != 0) {\nif (slavePhyOffset != masterOffset) {\nLOGGER.error(\"master pushed offset not equal the max phy offset in slave, SLAVE: \" + slavePhyOffset + \" MASTER: \"+ masterOffset);\nreturn false;\n}\n}\nif (masterEpoch != AutoSwitchHAClient.this.currentReceivedEpoch) {\nAutoSwitchHAClient.this.currentReceivedEpoch=masterEpoch;\nAutoSwitchHAClient.this.epochCache.appendEntry(new EpochEntry(masterEpoch,masterEpochStartOffset));\n}\nif (bodySize > 0) {\nAutoSwitchHAClient.this.messageStore.appendToCommitLog(masterOffset,bodyData,0,bodyData.length);\n}\nhaService.updateConfirmOffset(Math.min(confirmOffset,messageStore.getMaxPhyOffset()));\nif (!reportSlaveMaxOffset()) {\nLOGGER.error(\"AutoSwitchHAClient report max offset to master failed\");\nreturn false;\n}\nbreak;\ndefault:break;\n}\ncontinue;\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 440,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6502,
        "startLineNumber" : 445,
        "startColumnNumber" : 29,
        "endLineNumber" : 533,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  int diff=byteBufferRead.position() - AutoSwitchHAClient.this.processPosition;\n  if (diff >= AutoSwitchHAConnection.MSG_HEADER_SIZE) {\n    int processPosition=AutoSwitchHAClient.this.processPosition;\n    int masterState=byteBufferRead.getInt(processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE - 36);\n    int bodySize=byteBufferRead.getInt(processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE - 32);\n    long masterOffset=byteBufferRead.getLong(processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE - 28);\n    int masterEpoch=byteBufferRead.getInt(processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE - 20);\n    long masterEpochStartOffset=byteBufferRead.getLong(processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE - 16);\n    long confirmOffset=byteBufferRead.getLong(processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE - 8);\n    if (masterState != AutoSwitchHAClient.this.currentState.ordinal()) {\n      AutoSwitchHAClient.this.processPosition+=AutoSwitchHAConnection.MSG_HEADER_SIZE + bodySize;\n      AutoSwitchHAClient.this.waitForRunning(1);\n      LOGGER.error(\"State not matched, masterState:{}, slaveState:{}, bodySize:{}, offset:{}, masterEpoch:{}, masterEpochStartOffset:{}, confirmOffset:{}\",masterState,AutoSwitchHAClient.this.currentState,bodySize,masterOffset,masterEpoch,masterEpochStartOffset,confirmOffset);\n      return true;\n    }\n    if (diff >= (AutoSwitchHAConnection.MSG_HEADER_SIZE + bodySize)) {\nswitch (AutoSwitchHAClient.this.currentState) {\ncase HANDSHAKE:        AutoSwitchHAClient.this.processPosition+=AutoSwitchHAConnection.MSG_HEADER_SIZE;\n      int entrySize=AutoSwitchHAConnection.EPOCH_ENTRY_SIZE;\n    final int entryNums=bodySize / entrySize;\n  final ArrayList<EpochEntry> epochEntries=new ArrayList<>(entryNums);\nfor (int i=0; i < entryNums; i++) {\n  int epoch=byteBufferRead.getInt(AutoSwitchHAClient.this.processPosition + i * entrySize);\n  long startOffset=byteBufferRead.getLong(AutoSwitchHAClient.this.processPosition + i * entrySize + 4);\n  epochEntries.add(new EpochEntry(epoch,startOffset));\n}\nbyteBufferRead.position(readSocketPos);\nAutoSwitchHAClient.this.processPosition+=bodySize;\nLOGGER.info(\"Receive handshake, masterMaxPosition {}, masterEpochEntries:{}, try truncate log\",masterOffset,epochEntries);\nif (!doTruncate(epochEntries,masterOffset)) {\nwaitForRunning(1000 * 2);\nLOGGER.error(\"AutoSwitchHAClient truncate log failed in handshake state\");\nreturn false;\n}\nbreak;\ncase TRANSFER:byte[] bodyData=new byte[bodySize];\nbyteBufferRead.position(AutoSwitchHAClient.this.processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE);\nbyteBufferRead.get(bodyData);\nbyteBufferRead.position(readSocketPos);\nAutoSwitchHAClient.this.processPosition+=AutoSwitchHAConnection.MSG_HEADER_SIZE + bodySize;\nlong slavePhyOffset=AutoSwitchHAClient.this.messageStore.getMaxPhyOffset();\nif (slavePhyOffset != 0) {\nif (slavePhyOffset != masterOffset) {\nLOGGER.error(\"master pushed offset not equal the max phy offset in slave, SLAVE: \" + slavePhyOffset + \" MASTER: \"+ masterOffset);\nreturn false;\n}\n}\nif (masterEpoch != AutoSwitchHAClient.this.currentReceivedEpoch) {\nAutoSwitchHAClient.this.currentReceivedEpoch=masterEpoch;\nAutoSwitchHAClient.this.epochCache.appendEntry(new EpochEntry(masterEpoch,masterEpochStartOffset));\n}\nif (bodySize > 0) {\nAutoSwitchHAClient.this.messageStore.appendToCommitLog(masterOffset,bodyData,0,bodyData.length);\n}\nhaService.updateConfirmOffset(Math.min(confirmOffset,messageStore.getMaxPhyOffset()));\nif (!reportSlaveMaxOffset()) {\nLOGGER.error(\"AutoSwitchHAClient report max offset to master failed\");\nreturn false;\n}\nbreak;\ndefault:break;\n}\ncontinue;\n}\n}\nif (!byteBufferRead.hasRemaining()) {\nbyteBufferRead.position(AutoSwitchHAClient.this.processPosition);\nbyteBufferRead.compact();\nAutoSwitchHAClient.this.processPosition=0;\n}\nbreak;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 479,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6515,
        "startLineNumber" : 445,
        "startColumnNumber" : 16,
        "endLineNumber" : 533,
        "endColumnNumber" : 17
      },
      "nodeContext" : "while (true) {\n  int diff=byteBufferRead.position() - AutoSwitchHAClient.this.processPosition;\n  if (diff >= AutoSwitchHAConnection.MSG_HEADER_SIZE) {\n    int processPosition=AutoSwitchHAClient.this.processPosition;\n    int masterState=byteBufferRead.getInt(processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE - 36);\n    int bodySize=byteBufferRead.getInt(processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE - 32);\n    long masterOffset=byteBufferRead.getLong(processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE - 28);\n    int masterEpoch=byteBufferRead.getInt(processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE - 20);\n    long masterEpochStartOffset=byteBufferRead.getLong(processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE - 16);\n    long confirmOffset=byteBufferRead.getLong(processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE - 8);\n    if (masterState != AutoSwitchHAClient.this.currentState.ordinal()) {\n      AutoSwitchHAClient.this.processPosition+=AutoSwitchHAConnection.MSG_HEADER_SIZE + bodySize;\n      AutoSwitchHAClient.this.waitForRunning(1);\n      LOGGER.error(\"State not matched, masterState:{}, slaveState:{}, bodySize:{}, offset:{}, masterEpoch:{}, masterEpochStartOffset:{}, confirmOffset:{}\",masterState,AutoSwitchHAClient.this.currentState,bodySize,masterOffset,masterEpoch,masterEpochStartOffset,confirmOffset);\n      return true;\n    }\n    if (diff >= (AutoSwitchHAConnection.MSG_HEADER_SIZE + bodySize)) {\nswitch (AutoSwitchHAClient.this.currentState) {\ncase HANDSHAKE:        AutoSwitchHAClient.this.processPosition+=AutoSwitchHAConnection.MSG_HEADER_SIZE;\n      int entrySize=AutoSwitchHAConnection.EPOCH_ENTRY_SIZE;\n    final int entryNums=bodySize / entrySize;\n  final ArrayList<EpochEntry> epochEntries=new ArrayList<>(entryNums);\nfor (int i=0; i < entryNums; i++) {\n  int epoch=byteBufferRead.getInt(AutoSwitchHAClient.this.processPosition + i * entrySize);\n  long startOffset=byteBufferRead.getLong(AutoSwitchHAClient.this.processPosition + i * entrySize + 4);\n  epochEntries.add(new EpochEntry(epoch,startOffset));\n}\nbyteBufferRead.position(readSocketPos);\nAutoSwitchHAClient.this.processPosition+=bodySize;\nLOGGER.info(\"Receive handshake, masterMaxPosition {}, masterEpochEntries:{}, try truncate log\",masterOffset,epochEntries);\nif (!doTruncate(epochEntries,masterOffset)) {\nwaitForRunning(1000 * 2);\nLOGGER.error(\"AutoSwitchHAClient truncate log failed in handshake state\");\nreturn false;\n}\nbreak;\ncase TRANSFER:byte[] bodyData=new byte[bodySize];\nbyteBufferRead.position(AutoSwitchHAClient.this.processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE);\nbyteBufferRead.get(bodyData);\nbyteBufferRead.position(readSocketPos);\nAutoSwitchHAClient.this.processPosition+=AutoSwitchHAConnection.MSG_HEADER_SIZE + bodySize;\nlong slavePhyOffset=AutoSwitchHAClient.this.messageStore.getMaxPhyOffset();\nif (slavePhyOffset != 0) {\nif (slavePhyOffset != masterOffset) {\nLOGGER.error(\"master pushed offset not equal the max phy offset in slave, SLAVE: \" + slavePhyOffset + \" MASTER: \"+ masterOffset);\nreturn false;\n}\n}\nif (masterEpoch != AutoSwitchHAClient.this.currentReceivedEpoch) {\nAutoSwitchHAClient.this.currentReceivedEpoch=masterEpoch;\nAutoSwitchHAClient.this.epochCache.appendEntry(new EpochEntry(masterEpoch,masterEpochStartOffset));\n}\nif (bodySize > 0) {\nAutoSwitchHAClient.this.messageStore.appendToCommitLog(masterOffset,bodyData,0,bodyData.length);\n}\nhaService.updateConfirmOffset(Math.min(confirmOffset,messageStore.getMaxPhyOffset()));\nif (!reportSlaveMaxOffset()) {\nLOGGER.error(\"AutoSwitchHAClient report max offset to master failed\");\nreturn false;\n}\nbreak;\ndefault:break;\n}\ncontinue;\n}\n}\nif (!byteBufferRead.hasRemaining()) {\nbyteBufferRead.position(AutoSwitchHAClient.this.processPosition);\nbyteBufferRead.compact();\nAutoSwitchHAClient.this.processPosition=0;\n}\nbreak;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 481,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 6549,
        "startLineNumber" : 444,
        "startColumnNumber" : 16,
        "endLineNumber" : 534,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  while (true) {\n    int diff=byteBufferRead.position() - AutoSwitchHAClient.this.processPosition;\n    if (diff >= AutoSwitchHAConnection.MSG_HEADER_SIZE) {\n      int processPosition=AutoSwitchHAClient.this.processPosition;\n      int masterState=byteBufferRead.getInt(processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE - 36);\n      int bodySize=byteBufferRead.getInt(processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE - 32);\n      long masterOffset=byteBufferRead.getLong(processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE - 28);\n      int masterEpoch=byteBufferRead.getInt(processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE - 20);\n      long masterEpochStartOffset=byteBufferRead.getLong(processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE - 16);\n      long confirmOffset=byteBufferRead.getLong(processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE - 8);\n      if (masterState != AutoSwitchHAClient.this.currentState.ordinal()) {\n        AutoSwitchHAClient.this.processPosition+=AutoSwitchHAConnection.MSG_HEADER_SIZE + bodySize;\n        AutoSwitchHAClient.this.waitForRunning(1);\n        LOGGER.error(\"State not matched, masterState:{}, slaveState:{}, bodySize:{}, offset:{}, masterEpoch:{}, masterEpochStartOffset:{}, confirmOffset:{}\",masterState,AutoSwitchHAClient.this.currentState,bodySize,masterOffset,masterEpoch,masterEpochStartOffset,confirmOffset);\n        return true;\n      }\n      if (diff >= (AutoSwitchHAConnection.MSG_HEADER_SIZE + bodySize)) {\nswitch (AutoSwitchHAClient.this.currentState) {\ncase HANDSHAKE:          AutoSwitchHAClient.this.processPosition+=AutoSwitchHAConnection.MSG_HEADER_SIZE;\n        int entrySize=AutoSwitchHAConnection.EPOCH_ENTRY_SIZE;\n      final int entryNums=bodySize / entrySize;\n    final ArrayList<EpochEntry> epochEntries=new ArrayList<>(entryNums);\n  for (int i=0; i < entryNums; i++) {\n    int epoch=byteBufferRead.getInt(AutoSwitchHAClient.this.processPosition + i * entrySize);\n    long startOffset=byteBufferRead.getLong(AutoSwitchHAClient.this.processPosition + i * entrySize + 4);\n    epochEntries.add(new EpochEntry(epoch,startOffset));\n  }\nbyteBufferRead.position(readSocketPos);\nAutoSwitchHAClient.this.processPosition+=bodySize;\nLOGGER.info(\"Receive handshake, masterMaxPosition {}, masterEpochEntries:{}, try truncate log\",masterOffset,epochEntries);\nif (!doTruncate(epochEntries,masterOffset)) {\nwaitForRunning(1000 * 2);\nLOGGER.error(\"AutoSwitchHAClient truncate log failed in handshake state\");\nreturn false;\n}\nbreak;\ncase TRANSFER:byte[] bodyData=new byte[bodySize];\nbyteBufferRead.position(AutoSwitchHAClient.this.processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE);\nbyteBufferRead.get(bodyData);\nbyteBufferRead.position(readSocketPos);\nAutoSwitchHAClient.this.processPosition+=AutoSwitchHAConnection.MSG_HEADER_SIZE + bodySize;\nlong slavePhyOffset=AutoSwitchHAClient.this.messageStore.getMaxPhyOffset();\nif (slavePhyOffset != 0) {\nif (slavePhyOffset != masterOffset) {\nLOGGER.error(\"master pushed offset not equal the max phy offset in slave, SLAVE: \" + slavePhyOffset + \" MASTER: \"+ masterOffset);\nreturn false;\n}\n}\nif (masterEpoch != AutoSwitchHAClient.this.currentReceivedEpoch) {\nAutoSwitchHAClient.this.currentReceivedEpoch=masterEpoch;\nAutoSwitchHAClient.this.epochCache.appendEntry(new EpochEntry(masterEpoch,masterEpochStartOffset));\n}\nif (bodySize > 0) {\nAutoSwitchHAClient.this.messageStore.appendToCommitLog(masterOffset,bodyData,0,bodyData.length);\n}\nhaService.updateConfirmOffset(Math.min(confirmOffset,messageStore.getMaxPhyOffset()));\nif (!reportSlaveMaxOffset()) {\nLOGGER.error(\"AutoSwitchHAClient report max offset to master failed\");\nreturn false;\n}\nbreak;\ndefault:break;\n}\ncontinue;\n}\n}\nif (!byteBufferRead.hasRemaining()) {\nbyteBufferRead.position(AutoSwitchHAClient.this.processPosition);\nbyteBufferRead.compact();\nAutoSwitchHAClient.this.processPosition=0;\n}\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 482,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6675,
        "startLineNumber" : 444,
        "startColumnNumber" : 12,
        "endLineNumber" : 536,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  while (true) {\n    int diff=byteBufferRead.position() - AutoSwitchHAClient.this.processPosition;\n    if (diff >= AutoSwitchHAConnection.MSG_HEADER_SIZE) {\n      int processPosition=AutoSwitchHAClient.this.processPosition;\n      int masterState=byteBufferRead.getInt(processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE - 36);\n      int bodySize=byteBufferRead.getInt(processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE - 32);\n      long masterOffset=byteBufferRead.getLong(processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE - 28);\n      int masterEpoch=byteBufferRead.getInt(processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE - 20);\n      long masterEpochStartOffset=byteBufferRead.getLong(processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE - 16);\n      long confirmOffset=byteBufferRead.getLong(processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE - 8);\n      if (masterState != AutoSwitchHAClient.this.currentState.ordinal()) {\n        AutoSwitchHAClient.this.processPosition+=AutoSwitchHAConnection.MSG_HEADER_SIZE + bodySize;\n        AutoSwitchHAClient.this.waitForRunning(1);\n        LOGGER.error(\"State not matched, masterState:{}, slaveState:{}, bodySize:{}, offset:{}, masterEpoch:{}, masterEpochStartOffset:{}, confirmOffset:{}\",masterState,AutoSwitchHAClient.this.currentState,bodySize,masterOffset,masterEpoch,masterEpochStartOffset,confirmOffset);\n        return true;\n      }\n      if (diff >= (AutoSwitchHAConnection.MSG_HEADER_SIZE + bodySize)) {\nswitch (AutoSwitchHAClient.this.currentState) {\ncase HANDSHAKE:          AutoSwitchHAClient.this.processPosition+=AutoSwitchHAConnection.MSG_HEADER_SIZE;\n        int entrySize=AutoSwitchHAConnection.EPOCH_ENTRY_SIZE;\n      final int entryNums=bodySize / entrySize;\n    final ArrayList<EpochEntry> epochEntries=new ArrayList<>(entryNums);\n  for (int i=0; i < entryNums; i++) {\n    int epoch=byteBufferRead.getInt(AutoSwitchHAClient.this.processPosition + i * entrySize);\n    long startOffset=byteBufferRead.getLong(AutoSwitchHAClient.this.processPosition + i * entrySize + 4);\n    epochEntries.add(new EpochEntry(epoch,startOffset));\n  }\nbyteBufferRead.position(readSocketPos);\nAutoSwitchHAClient.this.processPosition+=bodySize;\nLOGGER.info(\"Receive handshake, masterMaxPosition {}, masterEpochEntries:{}, try truncate log\",masterOffset,epochEntries);\nif (!doTruncate(epochEntries,masterOffset)) {\nwaitForRunning(1000 * 2);\nLOGGER.error(\"AutoSwitchHAClient truncate log failed in handshake state\");\nreturn false;\n}\nbreak;\ncase TRANSFER:byte[] bodyData=new byte[bodySize];\nbyteBufferRead.position(AutoSwitchHAClient.this.processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE);\nbyteBufferRead.get(bodyData);\nbyteBufferRead.position(readSocketPos);\nAutoSwitchHAClient.this.processPosition+=AutoSwitchHAConnection.MSG_HEADER_SIZE + bodySize;\nlong slavePhyOffset=AutoSwitchHAClient.this.messageStore.getMaxPhyOffset();\nif (slavePhyOffset != 0) {\nif (slavePhyOffset != masterOffset) {\nLOGGER.error(\"master pushed offset not equal the max phy offset in slave, SLAVE: \" + slavePhyOffset + \" MASTER: \"+ masterOffset);\nreturn false;\n}\n}\nif (masterEpoch != AutoSwitchHAClient.this.currentReceivedEpoch) {\nAutoSwitchHAClient.this.currentReceivedEpoch=masterEpoch;\nAutoSwitchHAClient.this.epochCache.appendEntry(new EpochEntry(masterEpoch,masterEpochStartOffset));\n}\nif (bodySize > 0) {\nAutoSwitchHAClient.this.messageStore.appendToCommitLog(masterOffset,bodyData,0,bodyData.length);\n}\nhaService.updateConfirmOffset(Math.min(confirmOffset,messageStore.getMaxPhyOffset()));\nif (!reportSlaveMaxOffset()) {\nLOGGER.error(\"AutoSwitchHAClient report max offset to master failed\");\nreturn false;\n}\nbreak;\ndefault:break;\n}\ncontinue;\n}\n}\nif (!byteBufferRead.hasRemaining()) {\nbyteBufferRead.position(AutoSwitchHAClient.this.processPosition);\nbyteBufferRead.compact();\nAutoSwitchHAClient.this.processPosition=0;\n}\nbreak;\n}\n}\n catch (final Exception e) {\nLOGGER.error(\"Error when ha client process read request\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 496,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6787,
        "startLineNumber" : 442,
        "startColumnNumber" : 71,
        "endLineNumber" : 538,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int readSocketPos=byteBufferRead.position();\n  try {\n    while (true) {\n      int diff=byteBufferRead.position() - AutoSwitchHAClient.this.processPosition;\n      if (diff >= AutoSwitchHAConnection.MSG_HEADER_SIZE) {\n        int processPosition=AutoSwitchHAClient.this.processPosition;\n        int masterState=byteBufferRead.getInt(processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE - 36);\n        int bodySize=byteBufferRead.getInt(processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE - 32);\n        long masterOffset=byteBufferRead.getLong(processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE - 28);\n        int masterEpoch=byteBufferRead.getInt(processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE - 20);\n        long masterEpochStartOffset=byteBufferRead.getLong(processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE - 16);\n        long confirmOffset=byteBufferRead.getLong(processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE - 8);\n        if (masterState != AutoSwitchHAClient.this.currentState.ordinal()) {\n          AutoSwitchHAClient.this.processPosition+=AutoSwitchHAConnection.MSG_HEADER_SIZE + bodySize;\n          AutoSwitchHAClient.this.waitForRunning(1);\n          LOGGER.error(\"State not matched, masterState:{}, slaveState:{}, bodySize:{}, offset:{}, masterEpoch:{}, masterEpochStartOffset:{}, confirmOffset:{}\",masterState,AutoSwitchHAClient.this.currentState,bodySize,masterOffset,masterEpoch,masterEpochStartOffset,confirmOffset);\n          return true;\n        }\n        if (diff >= (AutoSwitchHAConnection.MSG_HEADER_SIZE + bodySize)) {\nswitch (AutoSwitchHAClient.this.currentState) {\ncase HANDSHAKE:            AutoSwitchHAClient.this.processPosition+=AutoSwitchHAConnection.MSG_HEADER_SIZE;\n          int entrySize=AutoSwitchHAConnection.EPOCH_ENTRY_SIZE;\n        final int entryNums=bodySize / entrySize;\n      final ArrayList<EpochEntry> epochEntries=new ArrayList<>(entryNums);\n    for (int i=0; i < entryNums; i++) {\n      int epoch=byteBufferRead.getInt(AutoSwitchHAClient.this.processPosition + i * entrySize);\n      long startOffset=byteBufferRead.getLong(AutoSwitchHAClient.this.processPosition + i * entrySize + 4);\n      epochEntries.add(new EpochEntry(epoch,startOffset));\n    }\n  byteBufferRead.position(readSocketPos);\nAutoSwitchHAClient.this.processPosition+=bodySize;\nLOGGER.info(\"Receive handshake, masterMaxPosition {}, masterEpochEntries:{}, try truncate log\",masterOffset,epochEntries);\nif (!doTruncate(epochEntries,masterOffset)) {\nwaitForRunning(1000 * 2);\nLOGGER.error(\"AutoSwitchHAClient truncate log failed in handshake state\");\nreturn false;\n}\nbreak;\ncase TRANSFER:byte[] bodyData=new byte[bodySize];\nbyteBufferRead.position(AutoSwitchHAClient.this.processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE);\nbyteBufferRead.get(bodyData);\nbyteBufferRead.position(readSocketPos);\nAutoSwitchHAClient.this.processPosition+=AutoSwitchHAConnection.MSG_HEADER_SIZE + bodySize;\nlong slavePhyOffset=AutoSwitchHAClient.this.messageStore.getMaxPhyOffset();\nif (slavePhyOffset != 0) {\nif (slavePhyOffset != masterOffset) {\nLOGGER.error(\"master pushed offset not equal the max phy offset in slave, SLAVE: \" + slavePhyOffset + \" MASTER: \"+ masterOffset);\nreturn false;\n}\n}\nif (masterEpoch != AutoSwitchHAClient.this.currentReceivedEpoch) {\nAutoSwitchHAClient.this.currentReceivedEpoch=masterEpoch;\nAutoSwitchHAClient.this.epochCache.appendEntry(new EpochEntry(masterEpoch,masterEpochStartOffset));\n}\nif (bodySize > 0) {\nAutoSwitchHAClient.this.messageStore.appendToCommitLog(masterOffset,bodyData,0,bodyData.length);\n}\nhaService.updateConfirmOffset(Math.min(confirmOffset,messageStore.getMaxPhyOffset()));\nif (!reportSlaveMaxOffset()) {\nLOGGER.error(\"AutoSwitchHAClient report max offset to master failed\");\nreturn false;\n}\nbreak;\ndefault:break;\n}\ncontinue;\n}\n}\nif (!byteBufferRead.hasRemaining()) {\nbyteBufferRead.position(AutoSwitchHAClient.this.processPosition);\nbyteBufferRead.compact();\nAutoSwitchHAClient.this.processPosition=0;\n}\nbreak;\n}\n}\n catch (final Exception e) {\nLOGGER.error(\"Error when ha client process read request\",e);\n}\nreturn true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 506,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6869,
        "startLineNumber" : 441,
        "startColumnNumber" : 8,
        "endLineNumber" : 538,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override protected boolean processReadResult(ByteBuffer byteBufferRead){\n  int readSocketPos=byteBufferRead.position();\n  try {\n    while (true) {\n      int diff=byteBufferRead.position() - AutoSwitchHAClient.this.processPosition;\n      if (diff >= AutoSwitchHAConnection.MSG_HEADER_SIZE) {\n        int processPosition=AutoSwitchHAClient.this.processPosition;\n        int masterState=byteBufferRead.getInt(processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE - 36);\n        int bodySize=byteBufferRead.getInt(processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE - 32);\n        long masterOffset=byteBufferRead.getLong(processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE - 28);\n        int masterEpoch=byteBufferRead.getInt(processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE - 20);\n        long masterEpochStartOffset=byteBufferRead.getLong(processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE - 16);\n        long confirmOffset=byteBufferRead.getLong(processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE - 8);\n        if (masterState != AutoSwitchHAClient.this.currentState.ordinal()) {\n          AutoSwitchHAClient.this.processPosition+=AutoSwitchHAConnection.MSG_HEADER_SIZE + bodySize;\n          AutoSwitchHAClient.this.waitForRunning(1);\n          LOGGER.error(\"State not matched, masterState:{}, slaveState:{}, bodySize:{}, offset:{}, masterEpoch:{}, masterEpochStartOffset:{}, confirmOffset:{}\",masterState,AutoSwitchHAClient.this.currentState,bodySize,masterOffset,masterEpoch,masterEpochStartOffset,confirmOffset);\n          return true;\n        }\n        if (diff >= (AutoSwitchHAConnection.MSG_HEADER_SIZE + bodySize)) {\nswitch (AutoSwitchHAClient.this.currentState) {\ncase HANDSHAKE:            AutoSwitchHAClient.this.processPosition+=AutoSwitchHAConnection.MSG_HEADER_SIZE;\n          int entrySize=AutoSwitchHAConnection.EPOCH_ENTRY_SIZE;\n        final int entryNums=bodySize / entrySize;\n      final ArrayList<EpochEntry> epochEntries=new ArrayList<>(entryNums);\n    for (int i=0; i < entryNums; i++) {\n      int epoch=byteBufferRead.getInt(AutoSwitchHAClient.this.processPosition + i * entrySize);\n      long startOffset=byteBufferRead.getLong(AutoSwitchHAClient.this.processPosition + i * entrySize + 4);\n      epochEntries.add(new EpochEntry(epoch,startOffset));\n    }\n  byteBufferRead.position(readSocketPos);\nAutoSwitchHAClient.this.processPosition+=bodySize;\nLOGGER.info(\"Receive handshake, masterMaxPosition {}, masterEpochEntries:{}, try truncate log\",masterOffset,epochEntries);\nif (!doTruncate(epochEntries,masterOffset)) {\nwaitForRunning(1000 * 2);\nLOGGER.error(\"AutoSwitchHAClient truncate log failed in handshake state\");\nreturn false;\n}\nbreak;\ncase TRANSFER:byte[] bodyData=new byte[bodySize];\nbyteBufferRead.position(AutoSwitchHAClient.this.processPosition + AutoSwitchHAConnection.MSG_HEADER_SIZE);\nbyteBufferRead.get(bodyData);\nbyteBufferRead.position(readSocketPos);\nAutoSwitchHAClient.this.processPosition+=AutoSwitchHAConnection.MSG_HEADER_SIZE + bodySize;\nlong slavePhyOffset=AutoSwitchHAClient.this.messageStore.getMaxPhyOffset();\nif (slavePhyOffset != 0) {\nif (slavePhyOffset != masterOffset) {\nLOGGER.error(\"master pushed offset not equal the max phy offset in slave, SLAVE: \" + slavePhyOffset + \" MASTER: \"+ masterOffset);\nreturn false;\n}\n}\nif (masterEpoch != AutoSwitchHAClient.this.currentReceivedEpoch) {\nAutoSwitchHAClient.this.currentReceivedEpoch=masterEpoch;\nAutoSwitchHAClient.this.epochCache.appendEntry(new EpochEntry(masterEpoch,masterEpochStartOffset));\n}\nif (bodySize > 0) {\nAutoSwitchHAClient.this.messageStore.appendToCommitLog(masterOffset,bodyData,0,bodyData.length);\n}\nhaService.updateConfirmOffset(Math.min(confirmOffset,messageStore.getMaxPhyOffset()));\nif (!reportSlaveMaxOffset()) {\nLOGGER.error(\"AutoSwitchHAClient report max offset to master failed\");\nreturn false;\n}\nbreak;\ndefault:break;\n}\ncontinue;\n}\n}\nif (!byteBufferRead.hasRemaining()) {\nbyteBufferRead.position(AutoSwitchHAClient.this.processPosition);\nbyteBufferRead.compact();\nAutoSwitchHAClient.this.processPosition=0;\n}\nbreak;\n}\n}\n catch (final Exception e) {\nLOGGER.error(\"Error when ha client process read request\",e);\n}\nreturn true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 516,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 512,
        "startColumnNumber" : 36,
        "endLineNumber" : 512,
        "endColumnNumber" : 123
      },
      "nodeContext" : "haService.updateConfirmOffset(Math.min(confirmOffset,messageStore.getMaxPhyOffset()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.Math"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 512,
    "startColumnNumber" : 66,
    "endLineNumber" : 512,
    "endColumnNumber" : 70
  } ],
  "layoutRelationDataList" : [ ]
}