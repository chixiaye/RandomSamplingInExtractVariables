{
  "id" : 446,
  "expression" : "i + 1",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/main/java/com/google/devtools/build/lib/includescanning/IncludeScannerHelper.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i + 1",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 55,
      "startColumnNumber" : 15,
      "endLineNumber" : 55,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 55,
        "startColumnNumber" : 8,
        "endLineNumber" : 55,
        "endColumnNumber" : 21
      },
      "nodeContext" : "return i + 1;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 54,
        "startColumnNumber" : 70,
        "endLineNumber" : 56,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  return i + 1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 54,
        "startColumnNumber" : 6,
        "endLineNumber" : 56,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (execPath.getRelative(include).equals(source.getExecPath())) {\n  return i + 1;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 160,
        "startLineNumber" : 52,
        "startColumnNumber" : 50,
        "endLineNumber" : 57,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  PathFragment execPath=includePaths.get(i);\n  if (execPath.getRelative(include).equals(source.getExecPath())) {\n    return i + 1;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 25,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 206,
        "startLineNumber" : 52,
        "startColumnNumber" : 4,
        "endLineNumber" : 57,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < includePaths.size(); ++i) {\n  PathFragment execPath=includePaths.get(i);\n  if (execPath.getRelative(include).equals(source.getExecPath())) {\n    return i + 1;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 38,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 231,
        "startLineNumber" : 51,
        "startColumnNumber" : 78,
        "endLineNumber" : 59,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (int i=0; i < includePaths.size(); ++i) {\n    PathFragment execPath=includePaths.get(i);\n    if (execPath.getRelative(include).equals(source.getExecPath())) {\n      return i + 1;\n    }\n  }\n  return -1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 42,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 625,
        "startLineNumber" : 43,
        "startColumnNumber" : 2,
        "endLineNumber" : 59,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Finds  {@code source} in the given {@code includePaths} as if it were #included as {@code include}.\n * @return the index in {@code includePaths} a #include_next directive should start searchingfrom, or -1 if the source file was not found.\n */\nprivate static int findContextPathPos(PathFragment include,Artifact source,List<PathFragment> includePaths){\n  for (int i=0; i < includePaths.size(); ++i) {\n    PathFragment execPath=includePaths.get(i);\n    if (execPath.getRelative(include).equals(source.getExecPath())) {\n      return i + 1;\n    }\n  }\n  return -1;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 63,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 55,
        "startColumnNumber" : 8,
        "endLineNumber" : 55,
        "endColumnNumber" : 21
      },
      "nodeContext" : "return i + 1;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 3,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 55,
    "startColumnNumber" : 15,
    "endLineNumber" : 55,
    "endColumnNumber" : 20
  } ],
  "layoutRelationDataList" : [ ]
}