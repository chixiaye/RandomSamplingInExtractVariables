{
  "id" : 304,
  "expression" : "attempt == 1",
  "projectName" : "signalapp@Signal-Android",
  "commitID" : "7e91132e7ed62a58b5f347de252ab1eda3f43b90",
  "filePath" : "/image-editor/lib/src/main/java/org/signal/imageeditor/core/model/Bisect.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "attempt == 1",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 93,
      "startColumnNumber" : 13,
      "endLineNumber" : 93,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 158,
        "startLineNumber" : 93,
        "startColumnNumber" : 9,
        "endLineNumber" : 96,
        "endColumnNumber" : 10
      },
      "nodeContext" : "if (attempt == 1) {\n  return null;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 222,
        "startLineNumber" : 92,
        "startColumnNumber" : 14,
        "endLineNumber" : 98,
        "endColumnNumber" : 8
      },
      "nodeContext" : "{\n  if (attempt == 1) {\n    return null;\n  }\n  outOfBoundsValue=nextValueToTry;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 634,
        "startLineNumber" : 83,
        "startColumnNumber" : 7,
        "endLineNumber" : 98,
        "endColumnNumber" : 8
      },
      "nodeContext" : "if (predicate.test()) {\n  inBoundsValue=nextValueToTry;\n  if (!haveResult || Math.abs(nextValueToTry - outOfBoundsValue) < Math.abs(successValue - outOfBoundsValue)) {\n    haveResult=true;\n    successValue=nextValueToTry;\n    closestSuccessful.set(elementMatrix);\n  }\n}\n else {\n  if (attempt == 1) {\n    return null;\n  }\n  outOfBoundsValue=nextValueToTry;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 52,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 651,
        "startLineNumber" : 81,
        "startColumnNumber" : 9,
        "endLineNumber" : 99,
        "endColumnNumber" : 6
      },
      "nodeContext" : "{\n  if (predicate.test()) {\n    inBoundsValue=nextValueToTry;\n    if (!haveResult || Math.abs(nextValueToTry - outOfBoundsValue) < Math.abs(successValue - outOfBoundsValue)) {\n      haveResult=true;\n      successValue=nextValueToTry;\n      closestSuccessful.set(elementMatrix);\n    }\n  }\n else {\n    if (attempt == 1) {\n      return null;\n    }\n    outOfBoundsValue=nextValueToTry;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 53,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 724,
        "startLineNumber" : 81,
        "startColumnNumber" : 5,
        "endLineNumber" : 102,
        "endColumnNumber" : 6
      },
      "nodeContext" : "try {\n  if (predicate.test()) {\n    inBoundsValue=nextValueToTry;\n    if (!haveResult || Math.abs(nextValueToTry - outOfBoundsValue) < Math.abs(successValue - outOfBoundsValue)) {\n      haveResult=true;\n      successValue=nextValueToTry;\n      closestSuccessful.set(elementMatrix);\n    }\n  }\n else {\n    if (attempt == 1) {\n      return null;\n    }\n    outOfBoundsValue=nextValueToTry;\n  }\n}\n  finally {\n  elementMatrix.set(original);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 60,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.DoStatement,body]",
      "nodePosition" : {
        "charLength" : 881,
        "startLineNumber" : 77,
        "startColumnNumber" : 6,
        "endLineNumber" : 106,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  attempt++;\n  modifyElement.applyFactor(elementMatrix,nextValueToTry);\n  try {\n    if (predicate.test()) {\n      inBoundsValue=nextValueToTry;\n      if (!haveResult || Math.abs(nextValueToTry - outOfBoundsValue) < Math.abs(successValue - outOfBoundsValue)) {\n        haveResult=true;\n        successValue=nextValueToTry;\n        closestSuccessful.set(elementMatrix);\n      }\n    }\n else {\n      if (attempt == 1) {\n        return null;\n      }\n      outOfBoundsValue=nextValueToTry;\n    }\n  }\n  finally {\n    elementMatrix.set(original);\n  }\n  nextValueToTry=(inBoundsValue + outOfBoundsValue) / 2f;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 79,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 975,
        "startLineNumber" : 77,
        "startColumnNumber" : 3,
        "endLineNumber" : 106,
        "endColumnNumber" : 95
      },
      "nodeContext" : "do {\n  attempt++;\n  modifyElement.applyFactor(elementMatrix,nextValueToTry);\n  try {\n    if (predicate.test()) {\n      inBoundsValue=nextValueToTry;\n      if (!haveResult || Math.abs(nextValueToTry - outOfBoundsValue) < Math.abs(successValue - outOfBoundsValue)) {\n        haveResult=true;\n        successValue=nextValueToTry;\n        closestSuccessful.set(elementMatrix);\n      }\n    }\n else {\n      if (attempt == 1) {\n        return null;\n      }\n      outOfBoundsValue=nextValueToTry;\n    }\n  }\n  finally {\n    elementMatrix.set(original);\n  }\n  nextValueToTry=(inBoundsValue + outOfBoundsValue) / 2f;\n}\n while (attempt < MAX_ITERATIONS && Math.abs(inBoundsValue - outOfBoundsValue) > ACCURACY);\n",
      "nodeType" : "DoStatement",
      "astNodeNumber" : 92,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1409,
        "startLineNumber" : 67,
        "startColumnNumber" : 1,
        "endLineNumber" : 112,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Matrix elementMatrix=element.getLocalMatrix();\n  Matrix original=new Matrix(elementMatrix);\n  Matrix closestSuccessful=new Matrix();\n  boolean haveResult=false;\n  int attempt=0;\n  float successValue=0;\n  float inBoundsValue=atMost;\n  float nextValueToTry=inBoundsValue;\n  do {\n    attempt++;\n    modifyElement.applyFactor(elementMatrix,nextValueToTry);\n    try {\n      if (predicate.test()) {\n        inBoundsValue=nextValueToTry;\n        if (!haveResult || Math.abs(nextValueToTry - outOfBoundsValue) < Math.abs(successValue - outOfBoundsValue)) {\n          haveResult=true;\n          successValue=nextValueToTry;\n          closestSuccessful.set(elementMatrix);\n        }\n      }\n else {\n        if (attempt == 1) {\n          return null;\n        }\n        outOfBoundsValue=nextValueToTry;\n      }\n    }\n  finally {\n      elementMatrix.set(original);\n    }\n    nextValueToTry=(inBoundsValue + outOfBoundsValue) / 2f;\n  }\n while (attempt < MAX_ITERATIONS && Math.abs(inBoundsValue - outOfBoundsValue) > ACCURACY);\n  if (haveResult) {\n    return closestSuccessful;\n  }\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 150,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2377,
        "startLineNumber" : 51,
        "startColumnNumber" : 2,
        "endLineNumber" : 112,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Given a predicate function, attempts to finds the boundary between predicate true and predicate false. Returns new local matrix for the element if a solution is found.\n * @param element          The element to modify.\n * @param outOfBoundsValue The current value, known to be out of bounds. 1 for a scale and 0 for a translate.\n * @param atMost           A value believed to be in bounds.\n * @param predicate        The out of bounds predicate.\n * @param modifyElement    Apply the latest value to the element local matrix.\n * @return matrix to replace local matrix iff finds a result, null otherwise.\n */\nstatic @Nullable Matrix bisectToTest(@NonNull EditorElement element,float outOfBoundsValue,float atMost,@NonNull Predicate predicate,@NonNull ModifyElement modifyElement){\n  Matrix elementMatrix=element.getLocalMatrix();\n  Matrix original=new Matrix(elementMatrix);\n  Matrix closestSuccessful=new Matrix();\n  boolean haveResult=false;\n  int attempt=0;\n  float successValue=0;\n  float inBoundsValue=atMost;\n  float nextValueToTry=inBoundsValue;\n  do {\n    attempt++;\n    modifyElement.applyFactor(elementMatrix,nextValueToTry);\n    try {\n      if (predicate.test()) {\n        inBoundsValue=nextValueToTry;\n        if (!haveResult || Math.abs(nextValueToTry - outOfBoundsValue) < Math.abs(successValue - outOfBoundsValue)) {\n          haveResult=true;\n          successValue=nextValueToTry;\n          closestSuccessful.set(elementMatrix);\n        }\n      }\n else {\n        if (attempt == 1) {\n          return null;\n        }\n        outOfBoundsValue=nextValueToTry;\n      }\n    }\n  finally {\n      elementMatrix.set(original);\n    }\n    nextValueToTry=(inBoundsValue + outOfBoundsValue) / 2f;\n  }\n while (attempt < MAX_ITERATIONS && Math.abs(inBoundsValue - outOfBoundsValue) > ACCURACY);\n  if (haveResult) {\n    return closestSuccessful;\n  }\n  return null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 182,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 158,
        "startLineNumber" : 93,
        "startColumnNumber" : 9,
        "endLineNumber" : 96,
        "endColumnNumber" : 10
      },
      "nodeContext" : "if (attempt == 1) {\n  return null;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 93,
    "startColumnNumber" : 13,
    "endLineNumber" : 93,
    "endColumnNumber" : 25
  } ],
  "layoutRelationDataList" : [ ]
}