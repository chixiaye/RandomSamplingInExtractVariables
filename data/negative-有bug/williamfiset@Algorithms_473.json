{
  "id" : 473,
  "expression" : "7",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/test/java/com/williamfiset/algorithms/graphtheory/ArticulationPointsAdjacencyListTest.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "7",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 37,
      "startColumnNumber" : 22,
      "endLineNumber" : 37,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 37,
        "endColumnNumber" : 24
      },
      "nodeContext" : "addEdge(graph,3,7)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 37,
        "endColumnNumber" : 25
      },
      "nodeContext" : "addEdge(graph,3,7);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 698,
        "startLineNumber" : 25,
        "startColumnNumber" : 29,
        "endLineNumber" : 49,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int n=12;\n  List<List<Integer>> graph=createGraph(n);\n  addEdge(graph,1,0);\n  addEdge(graph,0,2);\n  addEdge(graph,2,5);\n  addEdge(graph,5,6);\n  addEdge(graph,5,11);\n  addEdge(graph,5,4);\n  addEdge(graph,4,10);\n  addEdge(graph,4,3);\n  addEdge(graph,3,7);\n  addEdge(graph,7,8);\n  addEdge(graph,7,9);\n  ArticulationPointsAdjacencyList solver=new ArticulationPointsAdjacencyList(graph,n);\n  boolean[] actual=solver.findArticulationPoints();\n  boolean[] expected=new boolean[n];\n  expected[0]=expected[2]=expected[5]=true;\n  expected[4]=expected[3]=expected[7]=true;\n  assertThat(actual).isEqualTo(expected);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 151,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 733,
        "startLineNumber" : 24,
        "startColumnNumber" : 2,
        "endLineNumber" : 49,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testTreeCase(){\n  int n=12;\n  List<List<Integer>> graph=createGraph(n);\n  addEdge(graph,1,0);\n  addEdge(graph,0,2);\n  addEdge(graph,2,5);\n  addEdge(graph,5,6);\n  addEdge(graph,5,11);\n  addEdge(graph,5,4);\n  addEdge(graph,4,10);\n  addEdge(graph,4,3);\n  addEdge(graph,3,7);\n  addEdge(graph,7,8);\n  addEdge(graph,7,9);\n  ArticulationPointsAdjacencyList solver=new ArticulationPointsAdjacencyList(graph,n);\n  boolean[] actual=solver.findArticulationPoints();\n  boolean[] expected=new boolean[n];\n  expected[0]=expected[2]=expected[5]=true;\n  expected[4]=expected[3]=expected[7]=true;\n  assertThat(actual).isEqualTo(expected);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 157,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 37,
        "endColumnNumber" : 25
      },
      "nodeContext" : "addEdge(graph,3,7);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "7",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 38,
      "startColumnNumber" : 19,
      "endLineNumber" : 38,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 38,
        "startColumnNumber" : 4,
        "endLineNumber" : 38,
        "endColumnNumber" : 24
      },
      "nodeContext" : "addEdge(graph,7,8)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 38,
        "startColumnNumber" : 4,
        "endLineNumber" : 38,
        "endColumnNumber" : 25
      },
      "nodeContext" : "addEdge(graph,7,8);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 698,
        "startLineNumber" : 25,
        "startColumnNumber" : 29,
        "endLineNumber" : 49,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int n=12;\n  List<List<Integer>> graph=createGraph(n);\n  addEdge(graph,1,0);\n  addEdge(graph,0,2);\n  addEdge(graph,2,5);\n  addEdge(graph,5,6);\n  addEdge(graph,5,11);\n  addEdge(graph,5,4);\n  addEdge(graph,4,10);\n  addEdge(graph,4,3);\n  addEdge(graph,3,7);\n  addEdge(graph,7,8);\n  addEdge(graph,7,9);\n  ArticulationPointsAdjacencyList solver=new ArticulationPointsAdjacencyList(graph,n);\n  boolean[] actual=solver.findArticulationPoints();\n  boolean[] expected=new boolean[n];\n  expected[0]=expected[2]=expected[5]=true;\n  expected[4]=expected[3]=expected[7]=true;\n  assertThat(actual).isEqualTo(expected);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 151,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 733,
        "startLineNumber" : 24,
        "startColumnNumber" : 2,
        "endLineNumber" : 49,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testTreeCase(){\n  int n=12;\n  List<List<Integer>> graph=createGraph(n);\n  addEdge(graph,1,0);\n  addEdge(graph,0,2);\n  addEdge(graph,2,5);\n  addEdge(graph,5,6);\n  addEdge(graph,5,11);\n  addEdge(graph,5,4);\n  addEdge(graph,4,10);\n  addEdge(graph,4,3);\n  addEdge(graph,3,7);\n  addEdge(graph,7,8);\n  addEdge(graph,7,9);\n  ArticulationPointsAdjacencyList solver=new ArticulationPointsAdjacencyList(graph,n);\n  boolean[] actual=solver.findArticulationPoints();\n  boolean[] expected=new boolean[n];\n  expected[0]=expected[2]=expected[5]=true;\n  expected[4]=expected[3]=expected[7]=true;\n  assertThat(actual).isEqualTo(expected);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 157,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 38,
        "startColumnNumber" : 4,
        "endLineNumber" : 38,
        "endColumnNumber" : 25
      },
      "nodeContext" : "addEdge(graph,7,8);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "7",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 39,
      "startColumnNumber" : 19,
      "endLineNumber" : 39,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 39,
        "startColumnNumber" : 4,
        "endLineNumber" : 39,
        "endColumnNumber" : 24
      },
      "nodeContext" : "addEdge(graph,7,9)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 39,
        "startColumnNumber" : 4,
        "endLineNumber" : 39,
        "endColumnNumber" : 25
      },
      "nodeContext" : "addEdge(graph,7,9);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 698,
        "startLineNumber" : 25,
        "startColumnNumber" : 29,
        "endLineNumber" : 49,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int n=12;\n  List<List<Integer>> graph=createGraph(n);\n  addEdge(graph,1,0);\n  addEdge(graph,0,2);\n  addEdge(graph,2,5);\n  addEdge(graph,5,6);\n  addEdge(graph,5,11);\n  addEdge(graph,5,4);\n  addEdge(graph,4,10);\n  addEdge(graph,4,3);\n  addEdge(graph,3,7);\n  addEdge(graph,7,8);\n  addEdge(graph,7,9);\n  ArticulationPointsAdjacencyList solver=new ArticulationPointsAdjacencyList(graph,n);\n  boolean[] actual=solver.findArticulationPoints();\n  boolean[] expected=new boolean[n];\n  expected[0]=expected[2]=expected[5]=true;\n  expected[4]=expected[3]=expected[7]=true;\n  assertThat(actual).isEqualTo(expected);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 151,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 733,
        "startLineNumber" : 24,
        "startColumnNumber" : 2,
        "endLineNumber" : 49,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testTreeCase(){\n  int n=12;\n  List<List<Integer>> graph=createGraph(n);\n  addEdge(graph,1,0);\n  addEdge(graph,0,2);\n  addEdge(graph,2,5);\n  addEdge(graph,5,6);\n  addEdge(graph,5,11);\n  addEdge(graph,5,4);\n  addEdge(graph,4,10);\n  addEdge(graph,4,3);\n  addEdge(graph,3,7);\n  addEdge(graph,7,8);\n  addEdge(graph,7,9);\n  ArticulationPointsAdjacencyList solver=new ArticulationPointsAdjacencyList(graph,n);\n  boolean[] actual=solver.findArticulationPoints();\n  boolean[] expected=new boolean[n];\n  expected[0]=expected[2]=expected[5]=true;\n  expected[4]=expected[3]=expected[7]=true;\n  assertThat(actual).isEqualTo(expected);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 157,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 39,
        "startColumnNumber" : 4,
        "endLineNumber" : 39,
        "endColumnNumber" : 25
      },
      "nodeContext" : "addEdge(graph,7,9);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "7",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 46,
      "startColumnNumber" : 41,
      "endLineNumber" : 46,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 46,
        "startColumnNumber" : 32,
        "endLineNumber" : 46,
        "endColumnNumber" : 43
      },
      "nodeContext" : "expected[7]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 46,
        "startColumnNumber" : 32,
        "endLineNumber" : 46,
        "endColumnNumber" : 50
      },
      "nodeContext" : "expected[7]=true",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 46,
        "startColumnNumber" : 18,
        "endLineNumber" : 46,
        "endColumnNumber" : 50
      },
      "nodeContext" : "expected[3]=expected[7]=true",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 46,
        "startColumnNumber" : 4,
        "endLineNumber" : 46,
        "endColumnNumber" : 50
      },
      "nodeContext" : "expected[4]=expected[3]=expected[7]=true",
      "nodeType" : "Assignment",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 46,
        "startColumnNumber" : 4,
        "endLineNumber" : 46,
        "endColumnNumber" : 51
      },
      "nodeContext" : "expected[4]=expected[3]=expected[7]=true;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 698,
        "startLineNumber" : 25,
        "startColumnNumber" : 29,
        "endLineNumber" : 49,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int n=12;\n  List<List<Integer>> graph=createGraph(n);\n  addEdge(graph,1,0);\n  addEdge(graph,0,2);\n  addEdge(graph,2,5);\n  addEdge(graph,5,6);\n  addEdge(graph,5,11);\n  addEdge(graph,5,4);\n  addEdge(graph,4,10);\n  addEdge(graph,4,3);\n  addEdge(graph,3,7);\n  addEdge(graph,7,8);\n  addEdge(graph,7,9);\n  ArticulationPointsAdjacencyList solver=new ArticulationPointsAdjacencyList(graph,n);\n  boolean[] actual=solver.findArticulationPoints();\n  boolean[] expected=new boolean[n];\n  expected[0]=expected[2]=expected[5]=true;\n  expected[4]=expected[3]=expected[7]=true;\n  assertThat(actual).isEqualTo(expected);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 151,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 733,
        "startLineNumber" : 24,
        "startColumnNumber" : 2,
        "endLineNumber" : 49,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testTreeCase(){\n  int n=12;\n  List<List<Integer>> graph=createGraph(n);\n  addEdge(graph,1,0);\n  addEdge(graph,0,2);\n  addEdge(graph,2,5);\n  addEdge(graph,5,6);\n  addEdge(graph,5,11);\n  addEdge(graph,5,4);\n  addEdge(graph,4,10);\n  addEdge(graph,4,3);\n  addEdge(graph,3,7);\n  addEdge(graph,7,8);\n  addEdge(graph,7,9);\n  ArticulationPointsAdjacencyList solver=new ArticulationPointsAdjacencyList(graph,n);\n  boolean[] actual=solver.findArticulationPoints();\n  boolean[] expected=new boolean[n];\n  expected[0]=expected[2]=expected[5]=true;\n  expected[4]=expected[3]=expected[7]=true;\n  assertThat(actual).isEqualTo(expected);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 157,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 46,
        "startColumnNumber" : 4,
        "endLineNumber" : 46,
        "endColumnNumber" : 51
      },
      "nodeContext" : "expected[4]=expected[3]=expected[7]=true;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 37,
    "startColumnNumber" : 22,
    "endLineNumber" : 37,
    "endColumnNumber" : 23
  }, {
    "charLength" : 1,
    "startLineNumber" : 38,
    "startColumnNumber" : 19,
    "endLineNumber" : 38,
    "endColumnNumber" : 20
  }, {
    "charLength" : 1,
    "startLineNumber" : 39,
    "startColumnNumber" : 19,
    "endLineNumber" : 39,
    "endColumnNumber" : 20
  }, {
    "charLength" : 1,
    "startLineNumber" : 46,
    "startColumnNumber" : 41,
    "endLineNumber" : 46,
    "endColumnNumber" : 42
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 5
  } ]
}