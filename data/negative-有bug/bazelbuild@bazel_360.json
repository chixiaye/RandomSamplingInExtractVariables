{
  "id" : 360,
  "expression" : "Module",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/main/java/com/google/devtools/build/lib/rules/repository/ResolvedFileFunction.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Module",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 81,
      "startColumnNumber" : 24,
      "endLineNumber" : 81,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 81,
        "startColumnNumber" : 24,
        "endLineNumber" : 81,
        "endColumnNumber" : 39
      },
      "nodeContext" : "Module.create()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 81,
        "startColumnNumber" : 15,
        "endLineNumber" : 81,
        "endColumnNumber" : 39
      },
      "nodeContext" : "module=Module.create()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 81,
        "endColumnNumber" : 40
      },
      "nodeContext" : "Module module=Module.create();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2838,
        "startLineNumber" : 67,
        "startColumnNumber" : 13,
        "endLineNumber" : 133,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  byte[] bytes=FileSystemUtils.readWithKnownFileSize(key.getPath().asPath(),key.getPath().asPath().getFileSize());\n  StarlarkFile file=StarlarkFile.parse(ParserInput.fromLatin1(bytes,key.getPath().asPath().toString()));\n  if (!file.ok()) {\n    Event.replayEventsOn(env.getListener(),file.errors());\n    throw resolvedValueError(\"Failed to parse resolved file \" + key.getPath());\n  }\n  Module module=Module.create();\n  Program prog;\n  try {\n    prog=Program.compileFile(file,module);\n  }\n catch (  SyntaxError.Exception ex) {\n    Event.replayEventsOn(env.getListener(),ex.errors());\n    throw resolvedValueError(\"Failed to validate resolved file \" + key.getPath());\n  }\n  try (Mutability mu=Mutability.create(\"resolved file\",key.getPath())){\n    StarlarkThread thread=new StarlarkThread(mu,starlarkSemantics);\n    Starlark.execFileProgram(prog,module,thread);\n  }\n catch (  EvalException ex) {\n    env.getListener().handle(Event.error(null,ex.getMessageWithStack()));\n    throw resolvedValueError(\"Failed to evaluate resolved file \" + key.getPath());\n  }\n  Object resolved=module.getGlobal(\"resolved\");\n  if (resolved == null) {\n    throw resolvedValueError(\"Symbol 'resolved' not exported in resolved file \" + key.getPath());\n  }\n  if (!(resolved instanceof List)) {\n    throw resolvedValueError(\"Symbol 'resolved' in resolved file \" + key.getPath() + \" not a list\");\n  }\n  ImmutableList.Builder<Map<String,Object>> result=new ImmutableList.Builder<Map<String,Object>>();\n  for (  Object entry : (List)resolved) {\n    if (!(entry instanceof Map)) {\n      throw resolvedValueError(\"Symbol 'resolved' in resolved file \" + key.getPath() + \" contains a non-map entry\");\n    }\n    ImmutableMap.Builder<String,Object> entryBuilder=new ImmutableMap.Builder<String,Object>();\n    for (    Map.Entry<?,?> keyValue : ((Map<?,?>)entry).entrySet()) {\n      Object attribute=keyValue.getKey();\n      if (!(attribute instanceof String)) {\n        throw resolvedValueError(\"Symbol 'resolved' in resolved file \" + key.getPath() + \" contains a non-string key in one of its entries\");\n      }\n      entryBuilder.put((String)attribute,keyValue.getValue());\n    }\n    result.add(entryBuilder.build());\n  }\n  return new ResolvedFileValue(result.build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 359,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3028,
        "startLineNumber" : 64,
        "startColumnNumber" : 6,
        "endLineNumber" : 133,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (!fileValue.exists()) {\n  throw new ResolvedFileFunctionException(new NoSuchThingException(\"Specified resolved file '\" + key.getPath() + \"' not found.\"));\n}\n else {\n  byte[] bytes=FileSystemUtils.readWithKnownFileSize(key.getPath().asPath(),key.getPath().asPath().getFileSize());\n  StarlarkFile file=StarlarkFile.parse(ParserInput.fromLatin1(bytes,key.getPath().asPath().toString()));\n  if (!file.ok()) {\n    Event.replayEventsOn(env.getListener(),file.errors());\n    throw resolvedValueError(\"Failed to parse resolved file \" + key.getPath());\n  }\n  Module module=Module.create();\n  Program prog;\n  try {\n    prog=Program.compileFile(file,module);\n  }\n catch (  SyntaxError.Exception ex) {\n    Event.replayEventsOn(env.getListener(),ex.errors());\n    throw resolvedValueError(\"Failed to validate resolved file \" + key.getPath());\n  }\n  try (Mutability mu=Mutability.create(\"resolved file\",key.getPath())){\n    StarlarkThread thread=new StarlarkThread(mu,starlarkSemantics);\n    Starlark.execFileProgram(prog,module,thread);\n  }\n catch (  EvalException ex) {\n    env.getListener().handle(Event.error(null,ex.getMessageWithStack()));\n    throw resolvedValueError(\"Failed to evaluate resolved file \" + key.getPath());\n  }\n  Object resolved=module.getGlobal(\"resolved\");\n  if (resolved == null) {\n    throw resolvedValueError(\"Symbol 'resolved' not exported in resolved file \" + key.getPath());\n  }\n  if (!(resolved instanceof List)) {\n    throw resolvedValueError(\"Symbol 'resolved' in resolved file \" + key.getPath() + \" not a list\");\n  }\n  ImmutableList.Builder<Map<String,Object>> result=new ImmutableList.Builder<Map<String,Object>>();\n  for (  Object entry : (List)resolved) {\n    if (!(entry instanceof Map)) {\n      throw resolvedValueError(\"Symbol 'resolved' in resolved file \" + key.getPath() + \" contains a non-map entry\");\n    }\n    ImmutableMap.Builder<String,Object> entryBuilder=new ImmutableMap.Builder<String,Object>();\n    for (    Map.Entry<?,?> keyValue : ((Map<?,?>)entry).entrySet()) {\n      Object attribute=keyValue.getKey();\n      if (!(attribute instanceof String)) {\n        throw resolvedValueError(\"Symbol 'resolved' in resolved file \" + key.getPath() + \" contains a non-string key in one of its entries\");\n      }\n      entryBuilder.put((String)attribute,keyValue.getValue());\n    }\n    result.add(entryBuilder.build());\n  }\n  return new ResolvedFileValue(result.build());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 378,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3042,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 134,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!fileValue.exists()) {\n    throw new ResolvedFileFunctionException(new NoSuchThingException(\"Specified resolved file '\" + key.getPath() + \"' not found.\"));\n  }\n else {\n    byte[] bytes=FileSystemUtils.readWithKnownFileSize(key.getPath().asPath(),key.getPath().asPath().getFileSize());\n    StarlarkFile file=StarlarkFile.parse(ParserInput.fromLatin1(bytes,key.getPath().asPath().toString()));\n    if (!file.ok()) {\n      Event.replayEventsOn(env.getListener(),file.errors());\n      throw resolvedValueError(\"Failed to parse resolved file \" + key.getPath());\n    }\n    Module module=Module.create();\n    Program prog;\n    try {\n      prog=Program.compileFile(file,module);\n    }\n catch (    SyntaxError.Exception ex) {\n      Event.replayEventsOn(env.getListener(),ex.errors());\n      throw resolvedValueError(\"Failed to validate resolved file \" + key.getPath());\n    }\n    try (Mutability mu=Mutability.create(\"resolved file\",key.getPath())){\n      StarlarkThread thread=new StarlarkThread(mu,starlarkSemantics);\n      Starlark.execFileProgram(prog,module,thread);\n    }\n catch (    EvalException ex) {\n      env.getListener().handle(Event.error(null,ex.getMessageWithStack()));\n      throw resolvedValueError(\"Failed to evaluate resolved file \" + key.getPath());\n    }\n    Object resolved=module.getGlobal(\"resolved\");\n    if (resolved == null) {\n      throw resolvedValueError(\"Symbol 'resolved' not exported in resolved file \" + key.getPath());\n    }\n    if (!(resolved instanceof List)) {\n      throw resolvedValueError(\"Symbol 'resolved' in resolved file \" + key.getPath() + \" not a list\");\n    }\n    ImmutableList.Builder<Map<String,Object>> result=new ImmutableList.Builder<Map<String,Object>>();\n    for (    Object entry : (List)resolved) {\n      if (!(entry instanceof Map)) {\n        throw resolvedValueError(\"Symbol 'resolved' in resolved file \" + key.getPath() + \" contains a non-map entry\");\n      }\n      ImmutableMap.Builder<String,Object> entryBuilder=new ImmutableMap.Builder<String,Object>();\n      for (      Map.Entry<?,?> keyValue : ((Map<?,?>)entry).entrySet()) {\n        Object attribute=keyValue.getKey();\n        if (!(attribute instanceof String)) {\n          throw resolvedValueError(\"Symbol 'resolved' in resolved file \" + key.getPath() + \" contains a non-string key in one of its entries\");\n        }\n        entryBuilder.put((String)attribute,keyValue.getValue());\n      }\n      result.add(entryBuilder.build());\n    }\n    return new ResolvedFileValue(result.build());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 379,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3126,
        "startLineNumber" : 63,
        "startColumnNumber" : 4,
        "endLineNumber" : 136,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  if (!fileValue.exists()) {\n    throw new ResolvedFileFunctionException(new NoSuchThingException(\"Specified resolved file '\" + key.getPath() + \"' not found.\"));\n  }\n else {\n    byte[] bytes=FileSystemUtils.readWithKnownFileSize(key.getPath().asPath(),key.getPath().asPath().getFileSize());\n    StarlarkFile file=StarlarkFile.parse(ParserInput.fromLatin1(bytes,key.getPath().asPath().toString()));\n    if (!file.ok()) {\n      Event.replayEventsOn(env.getListener(),file.errors());\n      throw resolvedValueError(\"Failed to parse resolved file \" + key.getPath());\n    }\n    Module module=Module.create();\n    Program prog;\n    try {\n      prog=Program.compileFile(file,module);\n    }\n catch (    SyntaxError.Exception ex) {\n      Event.replayEventsOn(env.getListener(),ex.errors());\n      throw resolvedValueError(\"Failed to validate resolved file \" + key.getPath());\n    }\n    try (Mutability mu=Mutability.create(\"resolved file\",key.getPath())){\n      StarlarkThread thread=new StarlarkThread(mu,starlarkSemantics);\n      Starlark.execFileProgram(prog,module,thread);\n    }\n catch (    EvalException ex) {\n      env.getListener().handle(Event.error(null,ex.getMessageWithStack()));\n      throw resolvedValueError(\"Failed to evaluate resolved file \" + key.getPath());\n    }\n    Object resolved=module.getGlobal(\"resolved\");\n    if (resolved == null) {\n      throw resolvedValueError(\"Symbol 'resolved' not exported in resolved file \" + key.getPath());\n    }\n    if (!(resolved instanceof List)) {\n      throw resolvedValueError(\"Symbol 'resolved' in resolved file \" + key.getPath() + \" not a list\");\n    }\n    ImmutableList.Builder<Map<String,Object>> result=new ImmutableList.Builder<Map<String,Object>>();\n    for (    Object entry : (List)resolved) {\n      if (!(entry instanceof Map)) {\n        throw resolvedValueError(\"Symbol 'resolved' in resolved file \" + key.getPath() + \" contains a non-map entry\");\n      }\n      ImmutableMap.Builder<String,Object> entryBuilder=new ImmutableMap.Builder<String,Object>();\n      for (      Map.Entry<?,?> keyValue : ((Map<?,?>)entry).entrySet()) {\n        Object attribute=keyValue.getKey();\n        if (!(attribute instanceof String)) {\n          throw resolvedValueError(\"Symbol 'resolved' in resolved file \" + key.getPath() + \" contains a non-string key in one of its entries\");\n        }\n        entryBuilder.put((String)attribute,keyValue.getValue());\n      }\n      result.add(entryBuilder.build());\n    }\n    return new ResolvedFileValue(result.build());\n  }\n}\n catch (IOException e) {\n  throw new ResolvedFileFunctionException(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 391,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3475,
        "startLineNumber" : 52,
        "startColumnNumber" : 56,
        "endLineNumber" : 137,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ResolvedFileKey key=(ResolvedFileKey)skyKey;\n  StarlarkSemantics starlarkSemantics=PrecomputedValue.STARLARK_SEMANTICS.get(env);\n  if (starlarkSemantics == null) {\n    return null;\n  }\n  FileValue fileValue=(FileValue)env.getValue(FileValue.key(key.getPath()));\n  if (fileValue == null) {\n    return null;\n  }\n  try {\n    if (!fileValue.exists()) {\n      throw new ResolvedFileFunctionException(new NoSuchThingException(\"Specified resolved file '\" + key.getPath() + \"' not found.\"));\n    }\n else {\n      byte[] bytes=FileSystemUtils.readWithKnownFileSize(key.getPath().asPath(),key.getPath().asPath().getFileSize());\n      StarlarkFile file=StarlarkFile.parse(ParserInput.fromLatin1(bytes,key.getPath().asPath().toString()));\n      if (!file.ok()) {\n        Event.replayEventsOn(env.getListener(),file.errors());\n        throw resolvedValueError(\"Failed to parse resolved file \" + key.getPath());\n      }\n      Module module=Module.create();\n      Program prog;\n      try {\n        prog=Program.compileFile(file,module);\n      }\n catch (      SyntaxError.Exception ex) {\n        Event.replayEventsOn(env.getListener(),ex.errors());\n        throw resolvedValueError(\"Failed to validate resolved file \" + key.getPath());\n      }\n      try (Mutability mu=Mutability.create(\"resolved file\",key.getPath())){\n        StarlarkThread thread=new StarlarkThread(mu,starlarkSemantics);\n        Starlark.execFileProgram(prog,module,thread);\n      }\n catch (      EvalException ex) {\n        env.getListener().handle(Event.error(null,ex.getMessageWithStack()));\n        throw resolvedValueError(\"Failed to evaluate resolved file \" + key.getPath());\n      }\n      Object resolved=module.getGlobal(\"resolved\");\n      if (resolved == null) {\n        throw resolvedValueError(\"Symbol 'resolved' not exported in resolved file \" + key.getPath());\n      }\n      if (!(resolved instanceof List)) {\n        throw resolvedValueError(\"Symbol 'resolved' in resolved file \" + key.getPath() + \" not a list\");\n      }\n      ImmutableList.Builder<Map<String,Object>> result=new ImmutableList.Builder<Map<String,Object>>();\n      for (      Object entry : (List)resolved) {\n        if (!(entry instanceof Map)) {\n          throw resolvedValueError(\"Symbol 'resolved' in resolved file \" + key.getPath() + \" contains a non-map entry\");\n        }\n        ImmutableMap.Builder<String,Object> entryBuilder=new ImmutableMap.Builder<String,Object>();\n        for (        Map.Entry<?,?> keyValue : ((Map<?,?>)entry).entrySet()) {\n          Object attribute=keyValue.getKey();\n          if (!(attribute instanceof String)) {\n            throw resolvedValueError(\"Symbol 'resolved' in resolved file \" + key.getPath() + \" contains a non-string key in one of its entries\");\n          }\n          entryBuilder.put((String)attribute,keyValue.getValue());\n        }\n        result.add(entryBuilder.build());\n      }\n      return new ResolvedFileValue(result.build());\n    }\n  }\n catch (  IOException e) {\n    throw new ResolvedFileFunctionException(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 443,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3611,
        "startLineNumber" : 49,
        "startColumnNumber" : 2,
        "endLineNumber" : 137,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override @Nullable public SkyValue compute(SkyKey skyKey,Environment env) throws InterruptedException, SkyFunctionException {\n  ResolvedFileKey key=(ResolvedFileKey)skyKey;\n  StarlarkSemantics starlarkSemantics=PrecomputedValue.STARLARK_SEMANTICS.get(env);\n  if (starlarkSemantics == null) {\n    return null;\n  }\n  FileValue fileValue=(FileValue)env.getValue(FileValue.key(key.getPath()));\n  if (fileValue == null) {\n    return null;\n  }\n  try {\n    if (!fileValue.exists()) {\n      throw new ResolvedFileFunctionException(new NoSuchThingException(\"Specified resolved file '\" + key.getPath() + \"' not found.\"));\n    }\n else {\n      byte[] bytes=FileSystemUtils.readWithKnownFileSize(key.getPath().asPath(),key.getPath().asPath().getFileSize());\n      StarlarkFile file=StarlarkFile.parse(ParserInput.fromLatin1(bytes,key.getPath().asPath().toString()));\n      if (!file.ok()) {\n        Event.replayEventsOn(env.getListener(),file.errors());\n        throw resolvedValueError(\"Failed to parse resolved file \" + key.getPath());\n      }\n      Module module=Module.create();\n      Program prog;\n      try {\n        prog=Program.compileFile(file,module);\n      }\n catch (      SyntaxError.Exception ex) {\n        Event.replayEventsOn(env.getListener(),ex.errors());\n        throw resolvedValueError(\"Failed to validate resolved file \" + key.getPath());\n      }\n      try (Mutability mu=Mutability.create(\"resolved file\",key.getPath())){\n        StarlarkThread thread=new StarlarkThread(mu,starlarkSemantics);\n        Starlark.execFileProgram(prog,module,thread);\n      }\n catch (      EvalException ex) {\n        env.getListener().handle(Event.error(null,ex.getMessageWithStack()));\n        throw resolvedValueError(\"Failed to evaluate resolved file \" + key.getPath());\n      }\n      Object resolved=module.getGlobal(\"resolved\");\n      if (resolved == null) {\n        throw resolvedValueError(\"Symbol 'resolved' not exported in resolved file \" + key.getPath());\n      }\n      if (!(resolved instanceof List)) {\n        throw resolvedValueError(\"Symbol 'resolved' in resolved file \" + key.getPath() + \" not a list\");\n      }\n      ImmutableList.Builder<Map<String,Object>> result=new ImmutableList.Builder<Map<String,Object>>();\n      for (      Object entry : (List)resolved) {\n        if (!(entry instanceof Map)) {\n          throw resolvedValueError(\"Symbol 'resolved' in resolved file \" + key.getPath() + \" contains a non-map entry\");\n        }\n        ImmutableMap.Builder<String,Object> entryBuilder=new ImmutableMap.Builder<String,Object>();\n        for (        Map.Entry<?,?> keyValue : ((Map<?,?>)entry).entrySet()) {\n          Object attribute=keyValue.getKey();\n          if (!(attribute instanceof String)) {\n            throw resolvedValueError(\"Symbol 'resolved' in resolved file \" + key.getPath() + \" contains a non-string key in one of its entries\");\n          }\n          entryBuilder.put((String)attribute,keyValue.getValue());\n        }\n        result.add(entryBuilder.build());\n      }\n      return new ResolvedFileValue(result.build());\n    }\n  }\n catch (  IOException e) {\n    throw new ResolvedFileFunctionException(e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 464,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 81,
        "endColumnNumber" : 40
      },
      "nodeContext" : "Module module=Module.create();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "net.starlark.java.eval.Module"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 81,
    "startColumnNumber" : 24,
    "endLineNumber" : 81,
    "endColumnNumber" : 30
  } ],
  "layoutRelationDataList" : [ ]
}