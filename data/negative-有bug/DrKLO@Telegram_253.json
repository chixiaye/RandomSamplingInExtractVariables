{
  "id" : 253,
  "expression" : "bottomPadding + sidePadding",
  "projectName" : "DrKLO@Telegram",
  "commitID" : "11fbfb1329df700b203e1852a71c4c11b5ab12f4",
  "filePath" : "/TMessagesProj/src/main/java/org/telegram/ui/Components/Crop/CropAreaView.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "bottomPadding + sidePadding",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 27,
      "startLineNumber" : 748,
      "startColumnNumber" : 39,
      "endLineNumber" : 748,
      "endColumnNumber" : 66
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 748,
        "startColumnNumber" : 18,
        "endLineNumber" : 748,
        "endColumnNumber" : 66
      },
      "nodeContext" : "finalBottomPadidng=bottomPadding + sidePadding",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 748,
        "startColumnNumber" : 12,
        "endLineNumber" : 748,
        "endColumnNumber" : 67
      },
      "nodeContext" : "float finalBottomPadidng=bottomPadding + sidePadding;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 6120,
        "startLineNumber" : 619,
        "startColumnNumber" : 54,
        "endLineNumber" : 789,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (activeControl == Control.NONE) {\n    return false;\n  }\n  tempRect.set(actualRect);\n  float translationX=x - previousX;\n  float translationY=y - previousY;\n  previousX=x;\n  previousY=y;\n  boolean b=Math.abs(translationX) > Math.abs(translationY);\nswitch (activeControl) {\ncase TOP_LEFT:    tempRect.left+=translationX;\n  tempRect.top+=translationY;\nif (lockAspectRatio > 0) {\n  float w=tempRect.width();\n  float h=tempRect.height();\n  if (b) {\n    constrainRectByWidth(tempRect,lockAspectRatio);\n  }\n else {\n    constrainRectByHeight(tempRect,lockAspectRatio);\n  }\n  tempRect.left-=tempRect.width() - w;\n  tempRect.top-=tempRect.width() - h;\n}\nbreak;\ncase TOP_RIGHT:tempRect.right+=translationX;\ntempRect.top+=translationY;\nif (lockAspectRatio > 0) {\nfloat h=tempRect.height();\nif (b) {\nconstrainRectByWidth(tempRect,lockAspectRatio);\n}\n else {\nconstrainRectByHeight(tempRect,lockAspectRatio);\n}\ntempRect.top-=tempRect.width() - h;\n}\nbreak;\ncase BOTTOM_LEFT:tempRect.left+=translationX;\ntempRect.bottom+=translationY;\nif (lockAspectRatio > 0) {\nfloat w=tempRect.width();\nif (b) {\nconstrainRectByWidth(tempRect,lockAspectRatio);\n}\n else {\nconstrainRectByHeight(tempRect,lockAspectRatio);\n}\ntempRect.left-=tempRect.width() - w;\n}\nbreak;\ncase BOTTOM_RIGHT:tempRect.right+=translationX;\ntempRect.bottom+=translationY;\nif (lockAspectRatio > 0) {\nif (b) {\nconstrainRectByWidth(tempRect,lockAspectRatio);\n}\n else {\nconstrainRectByHeight(tempRect,lockAspectRatio);\n}\n}\nbreak;\ncase TOP:tempRect.top+=translationY;\nif (lockAspectRatio > 0) {\nconstrainRectByHeight(tempRect,lockAspectRatio);\n}\nbreak;\ncase LEFT:tempRect.left+=translationX;\nif (lockAspectRatio > 0) {\nconstrainRectByWidth(tempRect,lockAspectRatio);\n}\nbreak;\ncase RIGHT:tempRect.right+=translationX;\nif (lockAspectRatio > 0) {\nconstrainRectByWidth(tempRect,lockAspectRatio);\n}\nbreak;\ncase BOTTOM:tempRect.bottom+=translationY;\nif (lockAspectRatio > 0) {\nconstrainRectByHeight(tempRect,lockAspectRatio);\n}\nbreak;\ndefault:break;\n}\nif (tempRect.left < sidePadding) {\nif (lockAspectRatio > 0) {\ntempRect.bottom=tempRect.top + (tempRect.right - sidePadding) / lockAspectRatio;\n}\ntempRect.left=sidePadding;\n}\n else if (tempRect.right > getWidth() - sidePadding) {\ntempRect.right=getWidth() - sidePadding;\nif (lockAspectRatio > 0) {\ntempRect.bottom=tempRect.top + tempRect.width() / lockAspectRatio;\n}\n}\nfloat topPadding=statusBarHeight + sidePadding;\nfloat finalBottomPadidng=bottomPadding + sidePadding;\nif (tempRect.top < topPadding) {\nif (lockAspectRatio > 0) {\ntempRect.right=tempRect.left + (tempRect.bottom - topPadding) * lockAspectRatio;\n}\ntempRect.top=topPadding;\n}\n else if (tempRect.bottom > getHeight() - finalBottomPadidng) {\ntempRect.bottom=getHeight() - finalBottomPadidng;\nif (lockAspectRatio > 0) {\ntempRect.right=tempRect.left + tempRect.height() * lockAspectRatio;\n}\n}\nif (tempRect.width() < minWidth) {\ntempRect.right=tempRect.left + minWidth;\n}\nif (tempRect.height() < minWidth) {\ntempRect.bottom=tempRect.top + minWidth;\n}\nif (lockAspectRatio > 0) {\nif (lockAspectRatio < 1) {\nif (tempRect.width() <= minWidth) {\ntempRect.right=tempRect.left + minWidth;\ntempRect.bottom=tempRect.top + tempRect.width() / lockAspectRatio;\n}\n}\n else {\nif (tempRect.height() <= minWidth) {\ntempRect.bottom=tempRect.top + minWidth;\ntempRect.right=tempRect.left + tempRect.height() * lockAspectRatio;\n}\n}\n}\nsetActualRect(tempRect);\nif (listener != null) {\nlistener.onAreaChange();\n}\nreturn true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 616,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 6159,
        "startLineNumber" : 619,
        "startColumnNumber" : 15,
        "endLineNumber" : 789,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (action == MotionEvent.ACTION_MOVE) {\n  if (activeControl == Control.NONE) {\n    return false;\n  }\n  tempRect.set(actualRect);\n  float translationX=x - previousX;\n  float translationY=y - previousY;\n  previousX=x;\n  previousY=y;\n  boolean b=Math.abs(translationX) > Math.abs(translationY);\nswitch (activeControl) {\ncase TOP_LEFT:    tempRect.left+=translationX;\n  tempRect.top+=translationY;\nif (lockAspectRatio > 0) {\n  float w=tempRect.width();\n  float h=tempRect.height();\n  if (b) {\n    constrainRectByWidth(tempRect,lockAspectRatio);\n  }\n else {\n    constrainRectByHeight(tempRect,lockAspectRatio);\n  }\n  tempRect.left-=tempRect.width() - w;\n  tempRect.top-=tempRect.width() - h;\n}\nbreak;\ncase TOP_RIGHT:tempRect.right+=translationX;\ntempRect.top+=translationY;\nif (lockAspectRatio > 0) {\nfloat h=tempRect.height();\nif (b) {\nconstrainRectByWidth(tempRect,lockAspectRatio);\n}\n else {\nconstrainRectByHeight(tempRect,lockAspectRatio);\n}\ntempRect.top-=tempRect.width() - h;\n}\nbreak;\ncase BOTTOM_LEFT:tempRect.left+=translationX;\ntempRect.bottom+=translationY;\nif (lockAspectRatio > 0) {\nfloat w=tempRect.width();\nif (b) {\nconstrainRectByWidth(tempRect,lockAspectRatio);\n}\n else {\nconstrainRectByHeight(tempRect,lockAspectRatio);\n}\ntempRect.left-=tempRect.width() - w;\n}\nbreak;\ncase BOTTOM_RIGHT:tempRect.right+=translationX;\ntempRect.bottom+=translationY;\nif (lockAspectRatio > 0) {\nif (b) {\nconstrainRectByWidth(tempRect,lockAspectRatio);\n}\n else {\nconstrainRectByHeight(tempRect,lockAspectRatio);\n}\n}\nbreak;\ncase TOP:tempRect.top+=translationY;\nif (lockAspectRatio > 0) {\nconstrainRectByHeight(tempRect,lockAspectRatio);\n}\nbreak;\ncase LEFT:tempRect.left+=translationX;\nif (lockAspectRatio > 0) {\nconstrainRectByWidth(tempRect,lockAspectRatio);\n}\nbreak;\ncase RIGHT:tempRect.right+=translationX;\nif (lockAspectRatio > 0) {\nconstrainRectByWidth(tempRect,lockAspectRatio);\n}\nbreak;\ncase BOTTOM:tempRect.bottom+=translationY;\nif (lockAspectRatio > 0) {\nconstrainRectByHeight(tempRect,lockAspectRatio);\n}\nbreak;\ndefault:break;\n}\nif (tempRect.left < sidePadding) {\nif (lockAspectRatio > 0) {\ntempRect.bottom=tempRect.top + (tempRect.right - sidePadding) / lockAspectRatio;\n}\ntempRect.left=sidePadding;\n}\n else if (tempRect.right > getWidth() - sidePadding) {\ntempRect.right=getWidth() - sidePadding;\nif (lockAspectRatio > 0) {\ntempRect.bottom=tempRect.top + tempRect.width() / lockAspectRatio;\n}\n}\nfloat topPadding=statusBarHeight + sidePadding;\nfloat finalBottomPadidng=bottomPadding + sidePadding;\nif (tempRect.top < topPadding) {\nif (lockAspectRatio > 0) {\ntempRect.right=tempRect.left + (tempRect.bottom - topPadding) * lockAspectRatio;\n}\ntempRect.top=topPadding;\n}\n else if (tempRect.bottom > getHeight() - finalBottomPadidng) {\ntempRect.bottom=getHeight() - finalBottomPadidng;\nif (lockAspectRatio > 0) {\ntempRect.right=tempRect.left + tempRect.height() * lockAspectRatio;\n}\n}\nif (tempRect.width() < minWidth) {\ntempRect.right=tempRect.left + minWidth;\n}\nif (tempRect.height() < minWidth) {\ntempRect.bottom=tempRect.top + minWidth;\n}\nif (lockAspectRatio > 0) {\nif (lockAspectRatio < 1) {\nif (tempRect.width() <= minWidth) {\ntempRect.right=tempRect.left + minWidth;\ntempRect.bottom=tempRect.top + tempRect.width() / lockAspectRatio;\n}\n}\n else {\nif (tempRect.height() <= minWidth) {\ntempRect.bottom=tempRect.top + minWidth;\ntempRect.right=tempRect.left + tempRect.height() * lockAspectRatio;\n}\n}\n}\nsetActualRect(tempRect);\nif (listener != null) {\nlistener.onAreaChange();\n}\nreturn true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 622,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 6544,
        "startLineNumber" : 605,
        "startColumnNumber" : 15,
        "endLineNumber" : 789,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_CANCEL) {\n  isDragging=false;\n  if (activeControl == Control.NONE) {\n    return false;\n  }\n  activeControl=Control.NONE;\n  if (listener != null) {\n    listener.onAreaChangeEnded();\n  }\n  return true;\n}\n else if (action == MotionEvent.ACTION_MOVE) {\n  if (activeControl == Control.NONE) {\n    return false;\n  }\n  tempRect.set(actualRect);\n  float translationX=x - previousX;\n  float translationY=y - previousY;\n  previousX=x;\n  previousY=y;\n  boolean b=Math.abs(translationX) > Math.abs(translationY);\nswitch (activeControl) {\ncase TOP_LEFT:    tempRect.left+=translationX;\n  tempRect.top+=translationY;\nif (lockAspectRatio > 0) {\n  float w=tempRect.width();\n  float h=tempRect.height();\n  if (b) {\n    constrainRectByWidth(tempRect,lockAspectRatio);\n  }\n else {\n    constrainRectByHeight(tempRect,lockAspectRatio);\n  }\n  tempRect.left-=tempRect.width() - w;\n  tempRect.top-=tempRect.width() - h;\n}\nbreak;\ncase TOP_RIGHT:tempRect.right+=translationX;\ntempRect.top+=translationY;\nif (lockAspectRatio > 0) {\nfloat h=tempRect.height();\nif (b) {\nconstrainRectByWidth(tempRect,lockAspectRatio);\n}\n else {\nconstrainRectByHeight(tempRect,lockAspectRatio);\n}\ntempRect.top-=tempRect.width() - h;\n}\nbreak;\ncase BOTTOM_LEFT:tempRect.left+=translationX;\ntempRect.bottom+=translationY;\nif (lockAspectRatio > 0) {\nfloat w=tempRect.width();\nif (b) {\nconstrainRectByWidth(tempRect,lockAspectRatio);\n}\n else {\nconstrainRectByHeight(tempRect,lockAspectRatio);\n}\ntempRect.left-=tempRect.width() - w;\n}\nbreak;\ncase BOTTOM_RIGHT:tempRect.right+=translationX;\ntempRect.bottom+=translationY;\nif (lockAspectRatio > 0) {\nif (b) {\nconstrainRectByWidth(tempRect,lockAspectRatio);\n}\n else {\nconstrainRectByHeight(tempRect,lockAspectRatio);\n}\n}\nbreak;\ncase TOP:tempRect.top+=translationY;\nif (lockAspectRatio > 0) {\nconstrainRectByHeight(tempRect,lockAspectRatio);\n}\nbreak;\ncase LEFT:tempRect.left+=translationX;\nif (lockAspectRatio > 0) {\nconstrainRectByWidth(tempRect,lockAspectRatio);\n}\nbreak;\ncase RIGHT:tempRect.right+=translationX;\nif (lockAspectRatio > 0) {\nconstrainRectByWidth(tempRect,lockAspectRatio);\n}\nbreak;\ncase BOTTOM:tempRect.bottom+=translationY;\nif (lockAspectRatio > 0) {\nconstrainRectByHeight(tempRect,lockAspectRatio);\n}\nbreak;\ndefault:break;\n}\nif (tempRect.left < sidePadding) {\nif (lockAspectRatio > 0) {\ntempRect.bottom=tempRect.top + (tempRect.right - sidePadding) / lockAspectRatio;\n}\ntempRect.left=sidePadding;\n}\n else if (tempRect.right > getWidth() - sidePadding) {\ntempRect.right=getWidth() - sidePadding;\nif (lockAspectRatio > 0) {\ntempRect.bottom=tempRect.top + tempRect.width() / lockAspectRatio;\n}\n}\nfloat topPadding=statusBarHeight + sidePadding;\nfloat finalBottomPadidng=bottomPadding + sidePadding;\nif (tempRect.top < topPadding) {\nif (lockAspectRatio > 0) {\ntempRect.right=tempRect.left + (tempRect.bottom - topPadding) * lockAspectRatio;\n}\ntempRect.top=topPadding;\n}\n else if (tempRect.bottom > getHeight() - finalBottomPadidng) {\ntempRect.bottom=getHeight() - finalBottomPadidng;\nif (lockAspectRatio > 0) {\ntempRect.right=tempRect.left + tempRect.height() * lockAspectRatio;\n}\n}\nif (tempRect.width() < minWidth) {\ntempRect.right=tempRect.left + minWidth;\n}\nif (tempRect.height() < minWidth) {\ntempRect.bottom=tempRect.top + minWidth;\n}\nif (lockAspectRatio > 0) {\nif (lockAspectRatio < 1) {\nif (tempRect.width() <= minWidth) {\ntempRect.right=tempRect.left + minWidth;\ntempRect.bottom=tempRect.top + tempRect.width() / lockAspectRatio;\n}\n}\n else {\nif (tempRect.height() <= minWidth) {\ntempRect.bottom=tempRect.top + minWidth;\ntempRect.right=tempRect.left + tempRect.height() * lockAspectRatio;\n}\n}\n}\nsetActualRect(tempRect);\nif (listener != null) {\nlistener.onAreaChange();\n}\nreturn true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 665,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8044,
        "startLineNumber" : 568,
        "startColumnNumber" : 8,
        "endLineNumber" : 789,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (action == MotionEvent.ACTION_DOWN) {\n  if (freeform) {\n    if (this.topLeftCorner.contains(x,y)) {\n      activeControl=Control.TOP_LEFT;\n    }\n else     if (this.topRightCorner.contains(x,y)) {\n      activeControl=Control.TOP_RIGHT;\n    }\n else     if (this.bottomLeftCorner.contains(x,y)) {\n      activeControl=Control.BOTTOM_LEFT;\n    }\n else     if (this.bottomRightCorner.contains(x,y)) {\n      activeControl=Control.BOTTOM_RIGHT;\n    }\n else     if (this.leftEdge.contains(x,y)) {\n      activeControl=Control.LEFT;\n    }\n else     if (this.topEdge.contains(x,y)) {\n      activeControl=Control.TOP;\n    }\n else     if (this.rightEdge.contains(x,y)) {\n      activeControl=Control.RIGHT;\n    }\n else     if (this.bottomEdge.contains(x,y)) {\n      activeControl=Control.BOTTOM;\n    }\n else {\n      activeControl=Control.NONE;\n      return false;\n    }\n  }\n else {\n    activeControl=Control.NONE;\n    return false;\n  }\n  previousX=x;\n  previousY=y;\n  setGridType(GridType.MAJOR,false);\n  isDragging=true;\n  if (listener != null) {\n    listener.onAreaChangeBegan();\n  }\n  return true;\n}\n else if (action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_CANCEL) {\n  isDragging=false;\n  if (activeControl == Control.NONE) {\n    return false;\n  }\n  activeControl=Control.NONE;\n  if (listener != null) {\n    listener.onAreaChangeEnded();\n  }\n  return true;\n}\n else if (action == MotionEvent.ACTION_MOVE) {\n  if (activeControl == Control.NONE) {\n    return false;\n  }\n  tempRect.set(actualRect);\n  float translationX=x - previousX;\n  float translationY=y - previousY;\n  previousX=x;\n  previousY=y;\n  boolean b=Math.abs(translationX) > Math.abs(translationY);\nswitch (activeControl) {\ncase TOP_LEFT:    tempRect.left+=translationX;\n  tempRect.top+=translationY;\nif (lockAspectRatio > 0) {\n  float w=tempRect.width();\n  float h=tempRect.height();\n  if (b) {\n    constrainRectByWidth(tempRect,lockAspectRatio);\n  }\n else {\n    constrainRectByHeight(tempRect,lockAspectRatio);\n  }\n  tempRect.left-=tempRect.width() - w;\n  tempRect.top-=tempRect.width() - h;\n}\nbreak;\ncase TOP_RIGHT:tempRect.right+=translationX;\ntempRect.top+=translationY;\nif (lockAspectRatio > 0) {\nfloat h=tempRect.height();\nif (b) {\nconstrainRectByWidth(tempRect,lockAspectRatio);\n}\n else {\nconstrainRectByHeight(tempRect,lockAspectRatio);\n}\ntempRect.top-=tempRect.width() - h;\n}\nbreak;\ncase BOTTOM_LEFT:tempRect.left+=translationX;\ntempRect.bottom+=translationY;\nif (lockAspectRatio > 0) {\nfloat w=tempRect.width();\nif (b) {\nconstrainRectByWidth(tempRect,lockAspectRatio);\n}\n else {\nconstrainRectByHeight(tempRect,lockAspectRatio);\n}\ntempRect.left-=tempRect.width() - w;\n}\nbreak;\ncase BOTTOM_RIGHT:tempRect.right+=translationX;\ntempRect.bottom+=translationY;\nif (lockAspectRatio > 0) {\nif (b) {\nconstrainRectByWidth(tempRect,lockAspectRatio);\n}\n else {\nconstrainRectByHeight(tempRect,lockAspectRatio);\n}\n}\nbreak;\ncase TOP:tempRect.top+=translationY;\nif (lockAspectRatio > 0) {\nconstrainRectByHeight(tempRect,lockAspectRatio);\n}\nbreak;\ncase LEFT:tempRect.left+=translationX;\nif (lockAspectRatio > 0) {\nconstrainRectByWidth(tempRect,lockAspectRatio);\n}\nbreak;\ncase RIGHT:tempRect.right+=translationX;\nif (lockAspectRatio > 0) {\nconstrainRectByWidth(tempRect,lockAspectRatio);\n}\nbreak;\ncase BOTTOM:tempRect.bottom+=translationY;\nif (lockAspectRatio > 0) {\nconstrainRectByHeight(tempRect,lockAspectRatio);\n}\nbreak;\ndefault:break;\n}\nif (tempRect.left < sidePadding) {\nif (lockAspectRatio > 0) {\ntempRect.bottom=tempRect.top + (tempRect.right - sidePadding) / lockAspectRatio;\n}\ntempRect.left=sidePadding;\n}\n else if (tempRect.right > getWidth() - sidePadding) {\ntempRect.right=getWidth() - sidePadding;\nif (lockAspectRatio > 0) {\ntempRect.bottom=tempRect.top + tempRect.width() / lockAspectRatio;\n}\n}\nfloat topPadding=statusBarHeight + sidePadding;\nfloat finalBottomPadidng=bottomPadding + sidePadding;\nif (tempRect.top < topPadding) {\nif (lockAspectRatio > 0) {\ntempRect.right=tempRect.left + (tempRect.bottom - topPadding) * lockAspectRatio;\n}\ntempRect.top=topPadding;\n}\n else if (tempRect.bottom > getHeight() - finalBottomPadidng) {\ntempRect.bottom=getHeight() - finalBottomPadidng;\nif (lockAspectRatio > 0) {\ntempRect.right=tempRect.left + tempRect.height() * lockAspectRatio;\n}\n}\nif (tempRect.width() < minWidth) {\ntempRect.right=tempRect.left + minWidth;\n}\nif (tempRect.height() < minWidth) {\ntempRect.bottom=tempRect.top + minWidth;\n}\nif (lockAspectRatio > 0) {\nif (lockAspectRatio < 1) {\nif (tempRect.width() <= minWidth) {\ntempRect.right=tempRect.left + minWidth;\ntempRect.bottom=tempRect.top + tempRect.width() / lockAspectRatio;\n}\n}\n else {\nif (tempRect.height() <= minWidth) {\ntempRect.bottom=tempRect.top + minWidth;\ntempRect.right=tempRect.left + tempRect.height() * lockAspectRatio;\n}\n}\n}\nsetActualRect(tempRect);\nif (listener != null) {\nlistener.onAreaChange();\n}\nreturn true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 843,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8397,
        "startLineNumber" : 560,
        "startColumnNumber" : 51,
        "endLineNumber" : 792,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int x=(int)(event.getX() - ((ViewGroup)getParent()).getX());\n  int y=(int)(event.getY() - ((ViewGroup)getParent()).getY());\n  float statusBarHeight=(Build.VERSION.SDK_INT >= 21 && !inBubbleMode ? AndroidUtilities.statusBarHeight : 0);\n  int action=event.getActionMasked();\n  if (action == MotionEvent.ACTION_DOWN) {\n    if (freeform) {\n      if (this.topLeftCorner.contains(x,y)) {\n        activeControl=Control.TOP_LEFT;\n      }\n else       if (this.topRightCorner.contains(x,y)) {\n        activeControl=Control.TOP_RIGHT;\n      }\n else       if (this.bottomLeftCorner.contains(x,y)) {\n        activeControl=Control.BOTTOM_LEFT;\n      }\n else       if (this.bottomRightCorner.contains(x,y)) {\n        activeControl=Control.BOTTOM_RIGHT;\n      }\n else       if (this.leftEdge.contains(x,y)) {\n        activeControl=Control.LEFT;\n      }\n else       if (this.topEdge.contains(x,y)) {\n        activeControl=Control.TOP;\n      }\n else       if (this.rightEdge.contains(x,y)) {\n        activeControl=Control.RIGHT;\n      }\n else       if (this.bottomEdge.contains(x,y)) {\n        activeControl=Control.BOTTOM;\n      }\n else {\n        activeControl=Control.NONE;\n        return false;\n      }\n    }\n else {\n      activeControl=Control.NONE;\n      return false;\n    }\n    previousX=x;\n    previousY=y;\n    setGridType(GridType.MAJOR,false);\n    isDragging=true;\n    if (listener != null) {\n      listener.onAreaChangeBegan();\n    }\n    return true;\n  }\n else   if (action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_CANCEL) {\n    isDragging=false;\n    if (activeControl == Control.NONE) {\n      return false;\n    }\n    activeControl=Control.NONE;\n    if (listener != null) {\n      listener.onAreaChangeEnded();\n    }\n    return true;\n  }\n else   if (action == MotionEvent.ACTION_MOVE) {\n    if (activeControl == Control.NONE) {\n      return false;\n    }\n    tempRect.set(actualRect);\n    float translationX=x - previousX;\n    float translationY=y - previousY;\n    previousX=x;\n    previousY=y;\n    boolean b=Math.abs(translationX) > Math.abs(translationY);\nswitch (activeControl) {\ncase TOP_LEFT:      tempRect.left+=translationX;\n    tempRect.top+=translationY;\n  if (lockAspectRatio > 0) {\n    float w=tempRect.width();\n    float h=tempRect.height();\n    if (b) {\n      constrainRectByWidth(tempRect,lockAspectRatio);\n    }\n else {\n      constrainRectByHeight(tempRect,lockAspectRatio);\n    }\n    tempRect.left-=tempRect.width() - w;\n    tempRect.top-=tempRect.width() - h;\n  }\nbreak;\ncase TOP_RIGHT:tempRect.right+=translationX;\ntempRect.top+=translationY;\nif (lockAspectRatio > 0) {\nfloat h=tempRect.height();\nif (b) {\nconstrainRectByWidth(tempRect,lockAspectRatio);\n}\n else {\nconstrainRectByHeight(tempRect,lockAspectRatio);\n}\ntempRect.top-=tempRect.width() - h;\n}\nbreak;\ncase BOTTOM_LEFT:tempRect.left+=translationX;\ntempRect.bottom+=translationY;\nif (lockAspectRatio > 0) {\nfloat w=tempRect.width();\nif (b) {\nconstrainRectByWidth(tempRect,lockAspectRatio);\n}\n else {\nconstrainRectByHeight(tempRect,lockAspectRatio);\n}\ntempRect.left-=tempRect.width() - w;\n}\nbreak;\ncase BOTTOM_RIGHT:tempRect.right+=translationX;\ntempRect.bottom+=translationY;\nif (lockAspectRatio > 0) {\nif (b) {\nconstrainRectByWidth(tempRect,lockAspectRatio);\n}\n else {\nconstrainRectByHeight(tempRect,lockAspectRatio);\n}\n}\nbreak;\ncase TOP:tempRect.top+=translationY;\nif (lockAspectRatio > 0) {\nconstrainRectByHeight(tempRect,lockAspectRatio);\n}\nbreak;\ncase LEFT:tempRect.left+=translationX;\nif (lockAspectRatio > 0) {\nconstrainRectByWidth(tempRect,lockAspectRatio);\n}\nbreak;\ncase RIGHT:tempRect.right+=translationX;\nif (lockAspectRatio > 0) {\nconstrainRectByWidth(tempRect,lockAspectRatio);\n}\nbreak;\ncase BOTTOM:tempRect.bottom+=translationY;\nif (lockAspectRatio > 0) {\nconstrainRectByHeight(tempRect,lockAspectRatio);\n}\nbreak;\ndefault:break;\n}\nif (tempRect.left < sidePadding) {\nif (lockAspectRatio > 0) {\ntempRect.bottom=tempRect.top + (tempRect.right - sidePadding) / lockAspectRatio;\n}\ntempRect.left=sidePadding;\n}\n else if (tempRect.right > getWidth() - sidePadding) {\ntempRect.right=getWidth() - sidePadding;\nif (lockAspectRatio > 0) {\ntempRect.bottom=tempRect.top + tempRect.width() / lockAspectRatio;\n}\n}\nfloat topPadding=statusBarHeight + sidePadding;\nfloat finalBottomPadidng=bottomPadding + sidePadding;\nif (tempRect.top < topPadding) {\nif (lockAspectRatio > 0) {\ntempRect.right=tempRect.left + (tempRect.bottom - topPadding) * lockAspectRatio;\n}\ntempRect.top=topPadding;\n}\n else if (tempRect.bottom > getHeight() - finalBottomPadidng) {\ntempRect.bottom=getHeight() - finalBottomPadidng;\nif (lockAspectRatio > 0) {\ntempRect.right=tempRect.left + tempRect.height() * lockAspectRatio;\n}\n}\nif (tempRect.width() < minWidth) {\ntempRect.right=tempRect.left + minWidth;\n}\nif (tempRect.height() < minWidth) {\ntempRect.bottom=tempRect.top + minWidth;\n}\nif (lockAspectRatio > 0) {\nif (lockAspectRatio < 1) {\nif (tempRect.width() <= minWidth) {\ntempRect.right=tempRect.left + minWidth;\ntempRect.bottom=tempRect.top + tempRect.width() / lockAspectRatio;\n}\n}\n else {\nif (tempRect.height() <= minWidth) {\ntempRect.bottom=tempRect.top + minWidth;\ntempRect.right=tempRect.left + tempRect.height() * lockAspectRatio;\n}\n}\n}\nsetActualRect(tempRect);\nif (listener != null) {\nlistener.onAreaChange();\n}\nreturn true;\n}\nreturn false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 911,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8458,
        "startLineNumber" : 559,
        "startColumnNumber" : 4,
        "endLineNumber" : 792,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean onTouchEvent(MotionEvent event){\n  int x=(int)(event.getX() - ((ViewGroup)getParent()).getX());\n  int y=(int)(event.getY() - ((ViewGroup)getParent()).getY());\n  float statusBarHeight=(Build.VERSION.SDK_INT >= 21 && !inBubbleMode ? AndroidUtilities.statusBarHeight : 0);\n  int action=event.getActionMasked();\n  if (action == MotionEvent.ACTION_DOWN) {\n    if (freeform) {\n      if (this.topLeftCorner.contains(x,y)) {\n        activeControl=Control.TOP_LEFT;\n      }\n else       if (this.topRightCorner.contains(x,y)) {\n        activeControl=Control.TOP_RIGHT;\n      }\n else       if (this.bottomLeftCorner.contains(x,y)) {\n        activeControl=Control.BOTTOM_LEFT;\n      }\n else       if (this.bottomRightCorner.contains(x,y)) {\n        activeControl=Control.BOTTOM_RIGHT;\n      }\n else       if (this.leftEdge.contains(x,y)) {\n        activeControl=Control.LEFT;\n      }\n else       if (this.topEdge.contains(x,y)) {\n        activeControl=Control.TOP;\n      }\n else       if (this.rightEdge.contains(x,y)) {\n        activeControl=Control.RIGHT;\n      }\n else       if (this.bottomEdge.contains(x,y)) {\n        activeControl=Control.BOTTOM;\n      }\n else {\n        activeControl=Control.NONE;\n        return false;\n      }\n    }\n else {\n      activeControl=Control.NONE;\n      return false;\n    }\n    previousX=x;\n    previousY=y;\n    setGridType(GridType.MAJOR,false);\n    isDragging=true;\n    if (listener != null) {\n      listener.onAreaChangeBegan();\n    }\n    return true;\n  }\n else   if (action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_CANCEL) {\n    isDragging=false;\n    if (activeControl == Control.NONE) {\n      return false;\n    }\n    activeControl=Control.NONE;\n    if (listener != null) {\n      listener.onAreaChangeEnded();\n    }\n    return true;\n  }\n else   if (action == MotionEvent.ACTION_MOVE) {\n    if (activeControl == Control.NONE) {\n      return false;\n    }\n    tempRect.set(actualRect);\n    float translationX=x - previousX;\n    float translationY=y - previousY;\n    previousX=x;\n    previousY=y;\n    boolean b=Math.abs(translationX) > Math.abs(translationY);\nswitch (activeControl) {\ncase TOP_LEFT:      tempRect.left+=translationX;\n    tempRect.top+=translationY;\n  if (lockAspectRatio > 0) {\n    float w=tempRect.width();\n    float h=tempRect.height();\n    if (b) {\n      constrainRectByWidth(tempRect,lockAspectRatio);\n    }\n else {\n      constrainRectByHeight(tempRect,lockAspectRatio);\n    }\n    tempRect.left-=tempRect.width() - w;\n    tempRect.top-=tempRect.width() - h;\n  }\nbreak;\ncase TOP_RIGHT:tempRect.right+=translationX;\ntempRect.top+=translationY;\nif (lockAspectRatio > 0) {\nfloat h=tempRect.height();\nif (b) {\nconstrainRectByWidth(tempRect,lockAspectRatio);\n}\n else {\nconstrainRectByHeight(tempRect,lockAspectRatio);\n}\ntempRect.top-=tempRect.width() - h;\n}\nbreak;\ncase BOTTOM_LEFT:tempRect.left+=translationX;\ntempRect.bottom+=translationY;\nif (lockAspectRatio > 0) {\nfloat w=tempRect.width();\nif (b) {\nconstrainRectByWidth(tempRect,lockAspectRatio);\n}\n else {\nconstrainRectByHeight(tempRect,lockAspectRatio);\n}\ntempRect.left-=tempRect.width() - w;\n}\nbreak;\ncase BOTTOM_RIGHT:tempRect.right+=translationX;\ntempRect.bottom+=translationY;\nif (lockAspectRatio > 0) {\nif (b) {\nconstrainRectByWidth(tempRect,lockAspectRatio);\n}\n else {\nconstrainRectByHeight(tempRect,lockAspectRatio);\n}\n}\nbreak;\ncase TOP:tempRect.top+=translationY;\nif (lockAspectRatio > 0) {\nconstrainRectByHeight(tempRect,lockAspectRatio);\n}\nbreak;\ncase LEFT:tempRect.left+=translationX;\nif (lockAspectRatio > 0) {\nconstrainRectByWidth(tempRect,lockAspectRatio);\n}\nbreak;\ncase RIGHT:tempRect.right+=translationX;\nif (lockAspectRatio > 0) {\nconstrainRectByWidth(tempRect,lockAspectRatio);\n}\nbreak;\ncase BOTTOM:tempRect.bottom+=translationY;\nif (lockAspectRatio > 0) {\nconstrainRectByHeight(tempRect,lockAspectRatio);\n}\nbreak;\ndefault:break;\n}\nif (tempRect.left < sidePadding) {\nif (lockAspectRatio > 0) {\ntempRect.bottom=tempRect.top + (tempRect.right - sidePadding) / lockAspectRatio;\n}\ntempRect.left=sidePadding;\n}\n else if (tempRect.right > getWidth() - sidePadding) {\ntempRect.right=getWidth() - sidePadding;\nif (lockAspectRatio > 0) {\ntempRect.bottom=tempRect.top + tempRect.width() / lockAspectRatio;\n}\n}\nfloat topPadding=statusBarHeight + sidePadding;\nfloat finalBottomPadidng=bottomPadding + sidePadding;\nif (tempRect.top < topPadding) {\nif (lockAspectRatio > 0) {\ntempRect.right=tempRect.left + (tempRect.bottom - topPadding) * lockAspectRatio;\n}\ntempRect.top=topPadding;\n}\n else if (tempRect.bottom > getHeight() - finalBottomPadidng) {\ntempRect.bottom=getHeight() - finalBottomPadidng;\nif (lockAspectRatio > 0) {\ntempRect.right=tempRect.left + tempRect.height() * lockAspectRatio;\n}\n}\nif (tempRect.width() < minWidth) {\ntempRect.right=tempRect.left + minWidth;\n}\nif (tempRect.height() < minWidth) {\ntempRect.bottom=tempRect.top + minWidth;\n}\nif (lockAspectRatio > 0) {\nif (lockAspectRatio < 1) {\nif (tempRect.width() <= minWidth) {\ntempRect.right=tempRect.left + minWidth;\ntempRect.bottom=tempRect.top + tempRect.width() / lockAspectRatio;\n}\n}\n else {\nif (tempRect.height() <= minWidth) {\ntempRect.bottom=tempRect.top + minWidth;\ntempRect.right=tempRect.left + tempRect.height() * lockAspectRatio;\n}\n}\n}\nsetActualRect(tempRect);\nif (listener != null) {\nlistener.onAreaChange();\n}\nreturn true;\n}\nreturn false;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 921,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 748,
        "startColumnNumber" : 12,
        "endLineNumber" : 748,
        "endColumnNumber" : 67
      },
      "nodeContext" : "float finalBottomPadidng=bottomPadding + sidePadding;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "float"
  } ],
  "positionList" : [ {
    "charLength" : 27,
    "startLineNumber" : 748,
    "startColumnNumber" : 39,
    "endLineNumber" : 748,
    "endColumnNumber" : 66
  } ],
  "layoutRelationDataList" : [ ]
}