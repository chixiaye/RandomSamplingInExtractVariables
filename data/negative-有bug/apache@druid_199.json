{
  "id" : 199,
  "expression" : "subtotalQuery",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/processing/src/main/java/org/apache/druid/query/groupby/strategy/GroupByStrategyV2.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "subtotalQuery",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 447,
      "startColumnNumber" : 108,
      "endLineNumber" : 447,
      "endColumnNumber" : 121
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 447,
        "startColumnNumber" : 14,
        "endLineNumber" : 447,
        "endColumnNumber" : 129
      },
      "nodeContext" : "processSubtotalsResultAndOptionallyClose(() -> resultSupplierOneFinal,subTotalDimensionSpec,subtotalQuery,false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 163,
        "startLineNumber" : 446,
        "startColumnNumber" : 10,
        "endLineNumber" : 448,
        "endColumnNumber" : 11
      },
      "nodeContext" : "subtotalsResults.add(processSubtotalsResultAndOptionallyClose(() -> resultSupplierOneFinal,subTotalDimensionSpec,subtotalQuery,false))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 164,
        "startLineNumber" : 446,
        "startColumnNumber" : 10,
        "endLineNumber" : 448,
        "endColumnNumber" : 12
      },
      "nodeContext" : "subtotalsResults.add(processSubtotalsResultAndOptionallyClose(() -> resultSupplierOneFinal,subTotalDimensionSpec,subtotalQuery,false));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 357,
        "startLineNumber" : 443,
        "startColumnNumber" : 57,
        "endLineNumber" : 449,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  subtotalsResults.add(processSubtotalsResultAndOptionallyClose(() -> resultSupplierOneFinal,subTotalDimensionSpec,subtotalQuery,false));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1488,
        "startLineNumber" : 443,
        "startColumnNumber" : 8,
        "endLineNumber" : 470,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (Utils.isPrefix(subtotalSpec,queryDimNames)) {\n  subtotalsResults.add(processSubtotalsResultAndOptionallyClose(() -> resultSupplierOneFinal,subTotalDimensionSpec,subtotalQuery,false));\n}\n else {\n  Supplier<GroupByRowProcessor.ResultSupplier> resultSupplierTwo=() -> GroupByRowProcessor.process(baseSubtotalQuery,subtotalQuery,resultSupplierOneFinal.results(subTotalDimensionSpec),configSupplier.get(),resource,spillMapper,processingConfig.getTmpDir(),processingConfig.intermediateComputeSizeBytes());\n  subtotalsResults.add(processSubtotalsResultAndOptionallyClose(resultSupplierTwo,subTotalDimensionSpec,subtotalQuery,true));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 60,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2660,
        "startLineNumber" : 418,
        "startColumnNumber" : 50,
        "endLineNumber" : 471,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  final ImmutableSet<String> dimsInSubtotalSpec=ImmutableSet.copyOf(subtotalSpec);\n  final List<DimensionSpec> subTotalDimensionSpec=new ArrayList<>(dimsInSubtotalSpec.size());\n  final List<DimensionSpec> dimensions=query.getDimensions();\n  for (  DimensionSpec dimensionSpec : dimensions) {\n    if (dimsInSubtotalSpec.contains(dimensionSpec.getOutputName())) {\n      subTotalDimensionSpec.add(dimensionSpec);\n    }\n  }\n  LimitSpec subtotalQueryLimitSpec=NoopLimitSpec.instance();\n  if (!(baseSubtotalQuery.getLimitSpec() instanceof NoopLimitSpec)) {\n    Set<String> columns=new HashSet<>(aggsAndPostAggs);\n    columns.addAll(subtotalSpec);\n    subtotalQueryLimitSpec=baseSubtotalQuery.getLimitSpec().filterColumns(columns);\n  }\n  GroupByQuery subtotalQuery=baseSubtotalQuery.withLimitSpec(subtotalQueryLimitSpec);\n  final GroupByRowProcessor.ResultSupplier resultSupplierOneFinal=resultSupplierOne;\n  if (Utils.isPrefix(subtotalSpec,queryDimNames)) {\n    subtotalsResults.add(processSubtotalsResultAndOptionallyClose(() -> resultSupplierOneFinal,subTotalDimensionSpec,subtotalQuery,false));\n  }\n else {\n    Supplier<GroupByRowProcessor.ResultSupplier> resultSupplierTwo=() -> GroupByRowProcessor.process(baseSubtotalQuery,subtotalQuery,resultSupplierOneFinal.results(subTotalDimensionSpec),configSupplier.get(),resource,spillMapper,processingConfig.getTmpDir(),processingConfig.intermediateComputeSizeBytes());\n    subtotalsResults.add(processSubtotalsResultAndOptionallyClose(resultSupplierTwo,subTotalDimensionSpec,subtotalQuery,true));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 185,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2704,
        "startLineNumber" : 418,
        "startColumnNumber" : 6,
        "endLineNumber" : 471,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (List<String> subtotalSpec : subtotals) {\n  final ImmutableSet<String> dimsInSubtotalSpec=ImmutableSet.copyOf(subtotalSpec);\n  final List<DimensionSpec> subTotalDimensionSpec=new ArrayList<>(dimsInSubtotalSpec.size());\n  final List<DimensionSpec> dimensions=query.getDimensions();\n  for (  DimensionSpec dimensionSpec : dimensions) {\n    if (dimsInSubtotalSpec.contains(dimensionSpec.getOutputName())) {\n      subTotalDimensionSpec.add(dimensionSpec);\n    }\n  }\n  LimitSpec subtotalQueryLimitSpec=NoopLimitSpec.instance();\n  if (!(baseSubtotalQuery.getLimitSpec() instanceof NoopLimitSpec)) {\n    Set<String> columns=new HashSet<>(aggsAndPostAggs);\n    columns.addAll(subtotalSpec);\n    subtotalQueryLimitSpec=baseSubtotalQuery.getLimitSpec().filterColumns(columns);\n  }\n  GroupByQuery subtotalQuery=baseSubtotalQuery.withLimitSpec(subtotalQueryLimitSpec);\n  final GroupByRowProcessor.ResultSupplier resultSupplierOneFinal=resultSupplierOne;\n  if (Utils.isPrefix(subtotalSpec,queryDimNames)) {\n    subtotalsResults.add(processSubtotalsResultAndOptionallyClose(() -> resultSupplierOneFinal,subTotalDimensionSpec,subtotalQuery,false));\n  }\n else {\n    Supplier<GroupByRowProcessor.ResultSupplier> resultSupplierTwo=() -> GroupByRowProcessor.process(baseSubtotalQuery,subtotalQuery,resultSupplierOneFinal.results(subTotalDimensionSpec),configSupplier.get(),resource,spillMapper,processingConfig.getTmpDir(),processingConfig.intermediateComputeSizeBytes());\n    subtotalsResults.add(processSubtotalsResultAndOptionallyClose(resultSupplierTwo,subTotalDimensionSpec,subtotalQuery,true));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 194,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5090,
        "startLineNumber" : 371,
        "startColumnNumber" : 8,
        "endLineNumber" : 477,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  GroupByQuery baseSubtotalQuery=query.withDimensionSpecs(query.getDimensions().stream().map(dimSpec -> new DefaultDimensionSpec(dimSpec.getOutputName(),dimSpec.getOutputName(),dimSpec.getOutputType())).collect(Collectors.toList())).withAggregatorSpecs(query.getAggregatorSpecs().stream().map(AggregatorFactory::getCombiningFactory).collect(Collectors.toList())).withVirtualColumns(VirtualColumns.EMPTY).withDimFilter(null).withSubtotalsSpec(null);\n  resultSupplierOne=GroupByRowProcessor.process(baseSubtotalQuery,baseSubtotalQuery,queryResult,configSupplier.get(),resource,spillMapper,processingConfig.getTmpDir(),processingConfig.intermediateComputeSizeBytes());\n  List<String> queryDimNames=baseSubtotalQuery.getDimensions().stream().map(DimensionSpec::getOutputName).collect(Collectors.toList());\n  Set<String> aggsAndPostAggs=null;\n  if (!(baseSubtotalQuery.getLimitSpec() instanceof NoopLimitSpec)) {\n    aggsAndPostAggs=getAggregatorAndPostAggregatorNames(baseSubtotalQuery);\n  }\n  List<List<String>> subtotals=query.getSubtotalsSpec();\n  List<Sequence<ResultRow>> subtotalsResults=new ArrayList<>(subtotals.size());\n  for (  List<String> subtotalSpec : subtotals) {\n    final ImmutableSet<String> dimsInSubtotalSpec=ImmutableSet.copyOf(subtotalSpec);\n    final List<DimensionSpec> subTotalDimensionSpec=new ArrayList<>(dimsInSubtotalSpec.size());\n    final List<DimensionSpec> dimensions=query.getDimensions();\n    for (    DimensionSpec dimensionSpec : dimensions) {\n      if (dimsInSubtotalSpec.contains(dimensionSpec.getOutputName())) {\n        subTotalDimensionSpec.add(dimensionSpec);\n      }\n    }\n    LimitSpec subtotalQueryLimitSpec=NoopLimitSpec.instance();\n    if (!(baseSubtotalQuery.getLimitSpec() instanceof NoopLimitSpec)) {\n      Set<String> columns=new HashSet<>(aggsAndPostAggs);\n      columns.addAll(subtotalSpec);\n      subtotalQueryLimitSpec=baseSubtotalQuery.getLimitSpec().filterColumns(columns);\n    }\n    GroupByQuery subtotalQuery=baseSubtotalQuery.withLimitSpec(subtotalQueryLimitSpec);\n    final GroupByRowProcessor.ResultSupplier resultSupplierOneFinal=resultSupplierOne;\n    if (Utils.isPrefix(subtotalSpec,queryDimNames)) {\n      subtotalsResults.add(processSubtotalsResultAndOptionallyClose(() -> resultSupplierOneFinal,subTotalDimensionSpec,subtotalQuery,false));\n    }\n else {\n      Supplier<GroupByRowProcessor.ResultSupplier> resultSupplierTwo=() -> GroupByRowProcessor.process(baseSubtotalQuery,subtotalQuery,resultSupplierOneFinal.results(subTotalDimensionSpec),configSupplier.get(),resource,spillMapper,processingConfig.getTmpDir(),processingConfig.intermediateComputeSizeBytes());\n      subtotalsResults.add(processSubtotalsResultAndOptionallyClose(resultSupplierTwo,subTotalDimensionSpec,subtotalQuery,true));\n    }\n  }\n  return Sequences.withBaggage(query.postProcess(Sequences.concat(subtotalsResults)),resultSupplierOne);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 370,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5188,
        "startLineNumber" : 371,
        "startColumnNumber" : 4,
        "endLineNumber" : 481,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  GroupByQuery baseSubtotalQuery=query.withDimensionSpecs(query.getDimensions().stream().map(dimSpec -> new DefaultDimensionSpec(dimSpec.getOutputName(),dimSpec.getOutputName(),dimSpec.getOutputType())).collect(Collectors.toList())).withAggregatorSpecs(query.getAggregatorSpecs().stream().map(AggregatorFactory::getCombiningFactory).collect(Collectors.toList())).withVirtualColumns(VirtualColumns.EMPTY).withDimFilter(null).withSubtotalsSpec(null);\n  resultSupplierOne=GroupByRowProcessor.process(baseSubtotalQuery,baseSubtotalQuery,queryResult,configSupplier.get(),resource,spillMapper,processingConfig.getTmpDir(),processingConfig.intermediateComputeSizeBytes());\n  List<String> queryDimNames=baseSubtotalQuery.getDimensions().stream().map(DimensionSpec::getOutputName).collect(Collectors.toList());\n  Set<String> aggsAndPostAggs=null;\n  if (!(baseSubtotalQuery.getLimitSpec() instanceof NoopLimitSpec)) {\n    aggsAndPostAggs=getAggregatorAndPostAggregatorNames(baseSubtotalQuery);\n  }\n  List<List<String>> subtotals=query.getSubtotalsSpec();\n  List<Sequence<ResultRow>> subtotalsResults=new ArrayList<>(subtotals.size());\n  for (  List<String> subtotalSpec : subtotals) {\n    final ImmutableSet<String> dimsInSubtotalSpec=ImmutableSet.copyOf(subtotalSpec);\n    final List<DimensionSpec> subTotalDimensionSpec=new ArrayList<>(dimsInSubtotalSpec.size());\n    final List<DimensionSpec> dimensions=query.getDimensions();\n    for (    DimensionSpec dimensionSpec : dimensions) {\n      if (dimsInSubtotalSpec.contains(dimensionSpec.getOutputName())) {\n        subTotalDimensionSpec.add(dimensionSpec);\n      }\n    }\n    LimitSpec subtotalQueryLimitSpec=NoopLimitSpec.instance();\n    if (!(baseSubtotalQuery.getLimitSpec() instanceof NoopLimitSpec)) {\n      Set<String> columns=new HashSet<>(aggsAndPostAggs);\n      columns.addAll(subtotalSpec);\n      subtotalQueryLimitSpec=baseSubtotalQuery.getLimitSpec().filterColumns(columns);\n    }\n    GroupByQuery subtotalQuery=baseSubtotalQuery.withLimitSpec(subtotalQueryLimitSpec);\n    final GroupByRowProcessor.ResultSupplier resultSupplierOneFinal=resultSupplierOne;\n    if (Utils.isPrefix(subtotalSpec,queryDimNames)) {\n      subtotalsResults.add(processSubtotalsResultAndOptionallyClose(() -> resultSupplierOneFinal,subTotalDimensionSpec,subtotalQuery,false));\n    }\n else {\n      Supplier<GroupByRowProcessor.ResultSupplier> resultSupplierTwo=() -> GroupByRowProcessor.process(baseSubtotalQuery,subtotalQuery,resultSupplierOneFinal.results(subTotalDimensionSpec),configSupplier.get(),resource,spillMapper,processingConfig.getTmpDir(),processingConfig.intermediateComputeSizeBytes());\n      subtotalsResults.add(processSubtotalsResultAndOptionallyClose(resultSupplierTwo,subTotalDimensionSpec,subtotalQuery,true));\n    }\n  }\n  return Sequences.withBaggage(query.postProcess(Sequences.concat(subtotalsResults)),resultSupplierOne);\n}\n catch (Exception ex) {\n  CloseQuietly.close(resultSupplierOne);\n  throw ex;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 384,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6095,
        "startLineNumber" : 356,
        "startColumnNumber" : 2,
        "endLineNumber" : 482,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  GroupByRowProcessor.ResultSupplier resultSupplierOne=null;\n  try {\n    GroupByQuery baseSubtotalQuery=query.withDimensionSpecs(query.getDimensions().stream().map(dimSpec -> new DefaultDimensionSpec(dimSpec.getOutputName(),dimSpec.getOutputName(),dimSpec.getOutputType())).collect(Collectors.toList())).withAggregatorSpecs(query.getAggregatorSpecs().stream().map(AggregatorFactory::getCombiningFactory).collect(Collectors.toList())).withVirtualColumns(VirtualColumns.EMPTY).withDimFilter(null).withSubtotalsSpec(null);\n    resultSupplierOne=GroupByRowProcessor.process(baseSubtotalQuery,baseSubtotalQuery,queryResult,configSupplier.get(),resource,spillMapper,processingConfig.getTmpDir(),processingConfig.intermediateComputeSizeBytes());\n    List<String> queryDimNames=baseSubtotalQuery.getDimensions().stream().map(DimensionSpec::getOutputName).collect(Collectors.toList());\n    Set<String> aggsAndPostAggs=null;\n    if (!(baseSubtotalQuery.getLimitSpec() instanceof NoopLimitSpec)) {\n      aggsAndPostAggs=getAggregatorAndPostAggregatorNames(baseSubtotalQuery);\n    }\n    List<List<String>> subtotals=query.getSubtotalsSpec();\n    List<Sequence<ResultRow>> subtotalsResults=new ArrayList<>(subtotals.size());\n    for (    List<String> subtotalSpec : subtotals) {\n      final ImmutableSet<String> dimsInSubtotalSpec=ImmutableSet.copyOf(subtotalSpec);\n      final List<DimensionSpec> subTotalDimensionSpec=new ArrayList<>(dimsInSubtotalSpec.size());\n      final List<DimensionSpec> dimensions=query.getDimensions();\n      for (      DimensionSpec dimensionSpec : dimensions) {\n        if (dimsInSubtotalSpec.contains(dimensionSpec.getOutputName())) {\n          subTotalDimensionSpec.add(dimensionSpec);\n        }\n      }\n      LimitSpec subtotalQueryLimitSpec=NoopLimitSpec.instance();\n      if (!(baseSubtotalQuery.getLimitSpec() instanceof NoopLimitSpec)) {\n        Set<String> columns=new HashSet<>(aggsAndPostAggs);\n        columns.addAll(subtotalSpec);\n        subtotalQueryLimitSpec=baseSubtotalQuery.getLimitSpec().filterColumns(columns);\n      }\n      GroupByQuery subtotalQuery=baseSubtotalQuery.withLimitSpec(subtotalQueryLimitSpec);\n      final GroupByRowProcessor.ResultSupplier resultSupplierOneFinal=resultSupplierOne;\n      if (Utils.isPrefix(subtotalSpec,queryDimNames)) {\n        subtotalsResults.add(processSubtotalsResultAndOptionallyClose(() -> resultSupplierOneFinal,subTotalDimensionSpec,subtotalQuery,false));\n      }\n else {\n        Supplier<GroupByRowProcessor.ResultSupplier> resultSupplierTwo=() -> GroupByRowProcessor.process(baseSubtotalQuery,subtotalQuery,resultSupplierOneFinal.results(subTotalDimensionSpec),configSupplier.get(),resource,spillMapper,processingConfig.getTmpDir(),processingConfig.intermediateComputeSizeBytes());\n        subtotalsResults.add(processSubtotalsResultAndOptionallyClose(resultSupplierTwo,subTotalDimensionSpec,subtotalQuery,true));\n      }\n    }\n    return Sequences.withBaggage(query.postProcess(Sequences.concat(subtotalsResults)),resultSupplierOne);\n  }\n catch (  Exception ex) {\n    CloseQuietly.close(resultSupplierOne);\n    throw ex;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 393,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6263,
        "startLineNumber" : 350,
        "startColumnNumber" : 2,
        "endLineNumber" : 482,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Sequence<ResultRow> processSubtotalsSpec(GroupByQuery query,GroupByQueryResource resource,Sequence<ResultRow> queryResult){\n  GroupByRowProcessor.ResultSupplier resultSupplierOne=null;\n  try {\n    GroupByQuery baseSubtotalQuery=query.withDimensionSpecs(query.getDimensions().stream().map(dimSpec -> new DefaultDimensionSpec(dimSpec.getOutputName(),dimSpec.getOutputName(),dimSpec.getOutputType())).collect(Collectors.toList())).withAggregatorSpecs(query.getAggregatorSpecs().stream().map(AggregatorFactory::getCombiningFactory).collect(Collectors.toList())).withVirtualColumns(VirtualColumns.EMPTY).withDimFilter(null).withSubtotalsSpec(null);\n    resultSupplierOne=GroupByRowProcessor.process(baseSubtotalQuery,baseSubtotalQuery,queryResult,configSupplier.get(),resource,spillMapper,processingConfig.getTmpDir(),processingConfig.intermediateComputeSizeBytes());\n    List<String> queryDimNames=baseSubtotalQuery.getDimensions().stream().map(DimensionSpec::getOutputName).collect(Collectors.toList());\n    Set<String> aggsAndPostAggs=null;\n    if (!(baseSubtotalQuery.getLimitSpec() instanceof NoopLimitSpec)) {\n      aggsAndPostAggs=getAggregatorAndPostAggregatorNames(baseSubtotalQuery);\n    }\n    List<List<String>> subtotals=query.getSubtotalsSpec();\n    List<Sequence<ResultRow>> subtotalsResults=new ArrayList<>(subtotals.size());\n    for (    List<String> subtotalSpec : subtotals) {\n      final ImmutableSet<String> dimsInSubtotalSpec=ImmutableSet.copyOf(subtotalSpec);\n      final List<DimensionSpec> subTotalDimensionSpec=new ArrayList<>(dimsInSubtotalSpec.size());\n      final List<DimensionSpec> dimensions=query.getDimensions();\n      for (      DimensionSpec dimensionSpec : dimensions) {\n        if (dimsInSubtotalSpec.contains(dimensionSpec.getOutputName())) {\n          subTotalDimensionSpec.add(dimensionSpec);\n        }\n      }\n      LimitSpec subtotalQueryLimitSpec=NoopLimitSpec.instance();\n      if (!(baseSubtotalQuery.getLimitSpec() instanceof NoopLimitSpec)) {\n        Set<String> columns=new HashSet<>(aggsAndPostAggs);\n        columns.addAll(subtotalSpec);\n        subtotalQueryLimitSpec=baseSubtotalQuery.getLimitSpec().filterColumns(columns);\n      }\n      GroupByQuery subtotalQuery=baseSubtotalQuery.withLimitSpec(subtotalQueryLimitSpec);\n      final GroupByRowProcessor.ResultSupplier resultSupplierOneFinal=resultSupplierOne;\n      if (Utils.isPrefix(subtotalSpec,queryDimNames)) {\n        subtotalsResults.add(processSubtotalsResultAndOptionallyClose(() -> resultSupplierOneFinal,subTotalDimensionSpec,subtotalQuery,false));\n      }\n else {\n        Supplier<GroupByRowProcessor.ResultSupplier> resultSupplierTwo=() -> GroupByRowProcessor.process(baseSubtotalQuery,subtotalQuery,resultSupplierOneFinal.results(subTotalDimensionSpec),configSupplier.get(),resource,spillMapper,processingConfig.getTmpDir(),processingConfig.intermediateComputeSizeBytes());\n        subtotalsResults.add(processSubtotalsResultAndOptionallyClose(resultSupplierTwo,subTotalDimensionSpec,subtotalQuery,true));\n      }\n    }\n    return Sequences.withBaggage(query.postProcess(Sequences.concat(subtotalsResults)),resultSupplierOne);\n  }\n catch (  Exception ex) {\n    CloseQuietly.close(resultSupplierOne);\n    throw ex;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 418,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 447,
        "startColumnNumber" : 14,
        "endLineNumber" : 447,
        "endColumnNumber" : 129
      },
      "nodeContext" : "processSubtotalsResultAndOptionallyClose(() -> resultSupplierOneFinal,subTotalDimensionSpec,subtotalQuery,false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.druid.query.groupby.GroupByQuery"
  }, {
    "nodeContext" : "subtotalQuery",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 468,
      "startColumnNumber" : 97,
      "endLineNumber" : 468,
      "endColumnNumber" : 110
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 468,
        "startColumnNumber" : 14,
        "endLineNumber" : 468,
        "endColumnNumber" : 117
      },
      "nodeContext" : "processSubtotalsResultAndOptionallyClose(resultSupplierTwo,subTotalDimensionSpec,subtotalQuery,true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 151,
        "startLineNumber" : 467,
        "startColumnNumber" : 10,
        "endLineNumber" : 469,
        "endColumnNumber" : 11
      },
      "nodeContext" : "subtotalsResults.add(processSubtotalsResultAndOptionallyClose(resultSupplierTwo,subTotalDimensionSpec,subtotalQuery,true))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 152,
        "startLineNumber" : 467,
        "startColumnNumber" : 10,
        "endLineNumber" : 469,
        "endColumnNumber" : 12
      },
      "nodeContext" : "subtotalsResults.add(processSubtotalsResultAndOptionallyClose(resultSupplierTwo,subTotalDimensionSpec,subtotalQuery,true));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1076,
        "startLineNumber" : 449,
        "startColumnNumber" : 15,
        "endLineNumber" : 470,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Supplier<GroupByRowProcessor.ResultSupplier> resultSupplierTwo=() -> GroupByRowProcessor.process(baseSubtotalQuery,subtotalQuery,resultSupplierOneFinal.results(subTotalDimensionSpec),configSupplier.get(),resource,spillMapper,processingConfig.getTmpDir(),processingConfig.intermediateComputeSizeBytes());\n  subtotalsResults.add(processSubtotalsResultAndOptionallyClose(resultSupplierTwo,subTotalDimensionSpec,subtotalQuery,true));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 42,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1488,
        "startLineNumber" : 443,
        "startColumnNumber" : 8,
        "endLineNumber" : 470,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (Utils.isPrefix(subtotalSpec,queryDimNames)) {\n  subtotalsResults.add(processSubtotalsResultAndOptionallyClose(() -> resultSupplierOneFinal,subTotalDimensionSpec,subtotalQuery,false));\n}\n else {\n  Supplier<GroupByRowProcessor.ResultSupplier> resultSupplierTwo=() -> GroupByRowProcessor.process(baseSubtotalQuery,subtotalQuery,resultSupplierOneFinal.results(subTotalDimensionSpec),configSupplier.get(),resource,spillMapper,processingConfig.getTmpDir(),processingConfig.intermediateComputeSizeBytes());\n  subtotalsResults.add(processSubtotalsResultAndOptionallyClose(resultSupplierTwo,subTotalDimensionSpec,subtotalQuery,true));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 60,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2660,
        "startLineNumber" : 418,
        "startColumnNumber" : 50,
        "endLineNumber" : 471,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  final ImmutableSet<String> dimsInSubtotalSpec=ImmutableSet.copyOf(subtotalSpec);\n  final List<DimensionSpec> subTotalDimensionSpec=new ArrayList<>(dimsInSubtotalSpec.size());\n  final List<DimensionSpec> dimensions=query.getDimensions();\n  for (  DimensionSpec dimensionSpec : dimensions) {\n    if (dimsInSubtotalSpec.contains(dimensionSpec.getOutputName())) {\n      subTotalDimensionSpec.add(dimensionSpec);\n    }\n  }\n  LimitSpec subtotalQueryLimitSpec=NoopLimitSpec.instance();\n  if (!(baseSubtotalQuery.getLimitSpec() instanceof NoopLimitSpec)) {\n    Set<String> columns=new HashSet<>(aggsAndPostAggs);\n    columns.addAll(subtotalSpec);\n    subtotalQueryLimitSpec=baseSubtotalQuery.getLimitSpec().filterColumns(columns);\n  }\n  GroupByQuery subtotalQuery=baseSubtotalQuery.withLimitSpec(subtotalQueryLimitSpec);\n  final GroupByRowProcessor.ResultSupplier resultSupplierOneFinal=resultSupplierOne;\n  if (Utils.isPrefix(subtotalSpec,queryDimNames)) {\n    subtotalsResults.add(processSubtotalsResultAndOptionallyClose(() -> resultSupplierOneFinal,subTotalDimensionSpec,subtotalQuery,false));\n  }\n else {\n    Supplier<GroupByRowProcessor.ResultSupplier> resultSupplierTwo=() -> GroupByRowProcessor.process(baseSubtotalQuery,subtotalQuery,resultSupplierOneFinal.results(subTotalDimensionSpec),configSupplier.get(),resource,spillMapper,processingConfig.getTmpDir(),processingConfig.intermediateComputeSizeBytes());\n    subtotalsResults.add(processSubtotalsResultAndOptionallyClose(resultSupplierTwo,subTotalDimensionSpec,subtotalQuery,true));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 185,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2704,
        "startLineNumber" : 418,
        "startColumnNumber" : 6,
        "endLineNumber" : 471,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (List<String> subtotalSpec : subtotals) {\n  final ImmutableSet<String> dimsInSubtotalSpec=ImmutableSet.copyOf(subtotalSpec);\n  final List<DimensionSpec> subTotalDimensionSpec=new ArrayList<>(dimsInSubtotalSpec.size());\n  final List<DimensionSpec> dimensions=query.getDimensions();\n  for (  DimensionSpec dimensionSpec : dimensions) {\n    if (dimsInSubtotalSpec.contains(dimensionSpec.getOutputName())) {\n      subTotalDimensionSpec.add(dimensionSpec);\n    }\n  }\n  LimitSpec subtotalQueryLimitSpec=NoopLimitSpec.instance();\n  if (!(baseSubtotalQuery.getLimitSpec() instanceof NoopLimitSpec)) {\n    Set<String> columns=new HashSet<>(aggsAndPostAggs);\n    columns.addAll(subtotalSpec);\n    subtotalQueryLimitSpec=baseSubtotalQuery.getLimitSpec().filterColumns(columns);\n  }\n  GroupByQuery subtotalQuery=baseSubtotalQuery.withLimitSpec(subtotalQueryLimitSpec);\n  final GroupByRowProcessor.ResultSupplier resultSupplierOneFinal=resultSupplierOne;\n  if (Utils.isPrefix(subtotalSpec,queryDimNames)) {\n    subtotalsResults.add(processSubtotalsResultAndOptionallyClose(() -> resultSupplierOneFinal,subTotalDimensionSpec,subtotalQuery,false));\n  }\n else {\n    Supplier<GroupByRowProcessor.ResultSupplier> resultSupplierTwo=() -> GroupByRowProcessor.process(baseSubtotalQuery,subtotalQuery,resultSupplierOneFinal.results(subTotalDimensionSpec),configSupplier.get(),resource,spillMapper,processingConfig.getTmpDir(),processingConfig.intermediateComputeSizeBytes());\n    subtotalsResults.add(processSubtotalsResultAndOptionallyClose(resultSupplierTwo,subTotalDimensionSpec,subtotalQuery,true));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 194,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5090,
        "startLineNumber" : 371,
        "startColumnNumber" : 8,
        "endLineNumber" : 477,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  GroupByQuery baseSubtotalQuery=query.withDimensionSpecs(query.getDimensions().stream().map(dimSpec -> new DefaultDimensionSpec(dimSpec.getOutputName(),dimSpec.getOutputName(),dimSpec.getOutputType())).collect(Collectors.toList())).withAggregatorSpecs(query.getAggregatorSpecs().stream().map(AggregatorFactory::getCombiningFactory).collect(Collectors.toList())).withVirtualColumns(VirtualColumns.EMPTY).withDimFilter(null).withSubtotalsSpec(null);\n  resultSupplierOne=GroupByRowProcessor.process(baseSubtotalQuery,baseSubtotalQuery,queryResult,configSupplier.get(),resource,spillMapper,processingConfig.getTmpDir(),processingConfig.intermediateComputeSizeBytes());\n  List<String> queryDimNames=baseSubtotalQuery.getDimensions().stream().map(DimensionSpec::getOutputName).collect(Collectors.toList());\n  Set<String> aggsAndPostAggs=null;\n  if (!(baseSubtotalQuery.getLimitSpec() instanceof NoopLimitSpec)) {\n    aggsAndPostAggs=getAggregatorAndPostAggregatorNames(baseSubtotalQuery);\n  }\n  List<List<String>> subtotals=query.getSubtotalsSpec();\n  List<Sequence<ResultRow>> subtotalsResults=new ArrayList<>(subtotals.size());\n  for (  List<String> subtotalSpec : subtotals) {\n    final ImmutableSet<String> dimsInSubtotalSpec=ImmutableSet.copyOf(subtotalSpec);\n    final List<DimensionSpec> subTotalDimensionSpec=new ArrayList<>(dimsInSubtotalSpec.size());\n    final List<DimensionSpec> dimensions=query.getDimensions();\n    for (    DimensionSpec dimensionSpec : dimensions) {\n      if (dimsInSubtotalSpec.contains(dimensionSpec.getOutputName())) {\n        subTotalDimensionSpec.add(dimensionSpec);\n      }\n    }\n    LimitSpec subtotalQueryLimitSpec=NoopLimitSpec.instance();\n    if (!(baseSubtotalQuery.getLimitSpec() instanceof NoopLimitSpec)) {\n      Set<String> columns=new HashSet<>(aggsAndPostAggs);\n      columns.addAll(subtotalSpec);\n      subtotalQueryLimitSpec=baseSubtotalQuery.getLimitSpec().filterColumns(columns);\n    }\n    GroupByQuery subtotalQuery=baseSubtotalQuery.withLimitSpec(subtotalQueryLimitSpec);\n    final GroupByRowProcessor.ResultSupplier resultSupplierOneFinal=resultSupplierOne;\n    if (Utils.isPrefix(subtotalSpec,queryDimNames)) {\n      subtotalsResults.add(processSubtotalsResultAndOptionallyClose(() -> resultSupplierOneFinal,subTotalDimensionSpec,subtotalQuery,false));\n    }\n else {\n      Supplier<GroupByRowProcessor.ResultSupplier> resultSupplierTwo=() -> GroupByRowProcessor.process(baseSubtotalQuery,subtotalQuery,resultSupplierOneFinal.results(subTotalDimensionSpec),configSupplier.get(),resource,spillMapper,processingConfig.getTmpDir(),processingConfig.intermediateComputeSizeBytes());\n      subtotalsResults.add(processSubtotalsResultAndOptionallyClose(resultSupplierTwo,subTotalDimensionSpec,subtotalQuery,true));\n    }\n  }\n  return Sequences.withBaggage(query.postProcess(Sequences.concat(subtotalsResults)),resultSupplierOne);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 370,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5188,
        "startLineNumber" : 371,
        "startColumnNumber" : 4,
        "endLineNumber" : 481,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  GroupByQuery baseSubtotalQuery=query.withDimensionSpecs(query.getDimensions().stream().map(dimSpec -> new DefaultDimensionSpec(dimSpec.getOutputName(),dimSpec.getOutputName(),dimSpec.getOutputType())).collect(Collectors.toList())).withAggregatorSpecs(query.getAggregatorSpecs().stream().map(AggregatorFactory::getCombiningFactory).collect(Collectors.toList())).withVirtualColumns(VirtualColumns.EMPTY).withDimFilter(null).withSubtotalsSpec(null);\n  resultSupplierOne=GroupByRowProcessor.process(baseSubtotalQuery,baseSubtotalQuery,queryResult,configSupplier.get(),resource,spillMapper,processingConfig.getTmpDir(),processingConfig.intermediateComputeSizeBytes());\n  List<String> queryDimNames=baseSubtotalQuery.getDimensions().stream().map(DimensionSpec::getOutputName).collect(Collectors.toList());\n  Set<String> aggsAndPostAggs=null;\n  if (!(baseSubtotalQuery.getLimitSpec() instanceof NoopLimitSpec)) {\n    aggsAndPostAggs=getAggregatorAndPostAggregatorNames(baseSubtotalQuery);\n  }\n  List<List<String>> subtotals=query.getSubtotalsSpec();\n  List<Sequence<ResultRow>> subtotalsResults=new ArrayList<>(subtotals.size());\n  for (  List<String> subtotalSpec : subtotals) {\n    final ImmutableSet<String> dimsInSubtotalSpec=ImmutableSet.copyOf(subtotalSpec);\n    final List<DimensionSpec> subTotalDimensionSpec=new ArrayList<>(dimsInSubtotalSpec.size());\n    final List<DimensionSpec> dimensions=query.getDimensions();\n    for (    DimensionSpec dimensionSpec : dimensions) {\n      if (dimsInSubtotalSpec.contains(dimensionSpec.getOutputName())) {\n        subTotalDimensionSpec.add(dimensionSpec);\n      }\n    }\n    LimitSpec subtotalQueryLimitSpec=NoopLimitSpec.instance();\n    if (!(baseSubtotalQuery.getLimitSpec() instanceof NoopLimitSpec)) {\n      Set<String> columns=new HashSet<>(aggsAndPostAggs);\n      columns.addAll(subtotalSpec);\n      subtotalQueryLimitSpec=baseSubtotalQuery.getLimitSpec().filterColumns(columns);\n    }\n    GroupByQuery subtotalQuery=baseSubtotalQuery.withLimitSpec(subtotalQueryLimitSpec);\n    final GroupByRowProcessor.ResultSupplier resultSupplierOneFinal=resultSupplierOne;\n    if (Utils.isPrefix(subtotalSpec,queryDimNames)) {\n      subtotalsResults.add(processSubtotalsResultAndOptionallyClose(() -> resultSupplierOneFinal,subTotalDimensionSpec,subtotalQuery,false));\n    }\n else {\n      Supplier<GroupByRowProcessor.ResultSupplier> resultSupplierTwo=() -> GroupByRowProcessor.process(baseSubtotalQuery,subtotalQuery,resultSupplierOneFinal.results(subTotalDimensionSpec),configSupplier.get(),resource,spillMapper,processingConfig.getTmpDir(),processingConfig.intermediateComputeSizeBytes());\n      subtotalsResults.add(processSubtotalsResultAndOptionallyClose(resultSupplierTwo,subTotalDimensionSpec,subtotalQuery,true));\n    }\n  }\n  return Sequences.withBaggage(query.postProcess(Sequences.concat(subtotalsResults)),resultSupplierOne);\n}\n catch (Exception ex) {\n  CloseQuietly.close(resultSupplierOne);\n  throw ex;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 384,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6095,
        "startLineNumber" : 356,
        "startColumnNumber" : 2,
        "endLineNumber" : 482,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  GroupByRowProcessor.ResultSupplier resultSupplierOne=null;\n  try {\n    GroupByQuery baseSubtotalQuery=query.withDimensionSpecs(query.getDimensions().stream().map(dimSpec -> new DefaultDimensionSpec(dimSpec.getOutputName(),dimSpec.getOutputName(),dimSpec.getOutputType())).collect(Collectors.toList())).withAggregatorSpecs(query.getAggregatorSpecs().stream().map(AggregatorFactory::getCombiningFactory).collect(Collectors.toList())).withVirtualColumns(VirtualColumns.EMPTY).withDimFilter(null).withSubtotalsSpec(null);\n    resultSupplierOne=GroupByRowProcessor.process(baseSubtotalQuery,baseSubtotalQuery,queryResult,configSupplier.get(),resource,spillMapper,processingConfig.getTmpDir(),processingConfig.intermediateComputeSizeBytes());\n    List<String> queryDimNames=baseSubtotalQuery.getDimensions().stream().map(DimensionSpec::getOutputName).collect(Collectors.toList());\n    Set<String> aggsAndPostAggs=null;\n    if (!(baseSubtotalQuery.getLimitSpec() instanceof NoopLimitSpec)) {\n      aggsAndPostAggs=getAggregatorAndPostAggregatorNames(baseSubtotalQuery);\n    }\n    List<List<String>> subtotals=query.getSubtotalsSpec();\n    List<Sequence<ResultRow>> subtotalsResults=new ArrayList<>(subtotals.size());\n    for (    List<String> subtotalSpec : subtotals) {\n      final ImmutableSet<String> dimsInSubtotalSpec=ImmutableSet.copyOf(subtotalSpec);\n      final List<DimensionSpec> subTotalDimensionSpec=new ArrayList<>(dimsInSubtotalSpec.size());\n      final List<DimensionSpec> dimensions=query.getDimensions();\n      for (      DimensionSpec dimensionSpec : dimensions) {\n        if (dimsInSubtotalSpec.contains(dimensionSpec.getOutputName())) {\n          subTotalDimensionSpec.add(dimensionSpec);\n        }\n      }\n      LimitSpec subtotalQueryLimitSpec=NoopLimitSpec.instance();\n      if (!(baseSubtotalQuery.getLimitSpec() instanceof NoopLimitSpec)) {\n        Set<String> columns=new HashSet<>(aggsAndPostAggs);\n        columns.addAll(subtotalSpec);\n        subtotalQueryLimitSpec=baseSubtotalQuery.getLimitSpec().filterColumns(columns);\n      }\n      GroupByQuery subtotalQuery=baseSubtotalQuery.withLimitSpec(subtotalQueryLimitSpec);\n      final GroupByRowProcessor.ResultSupplier resultSupplierOneFinal=resultSupplierOne;\n      if (Utils.isPrefix(subtotalSpec,queryDimNames)) {\n        subtotalsResults.add(processSubtotalsResultAndOptionallyClose(() -> resultSupplierOneFinal,subTotalDimensionSpec,subtotalQuery,false));\n      }\n else {\n        Supplier<GroupByRowProcessor.ResultSupplier> resultSupplierTwo=() -> GroupByRowProcessor.process(baseSubtotalQuery,subtotalQuery,resultSupplierOneFinal.results(subTotalDimensionSpec),configSupplier.get(),resource,spillMapper,processingConfig.getTmpDir(),processingConfig.intermediateComputeSizeBytes());\n        subtotalsResults.add(processSubtotalsResultAndOptionallyClose(resultSupplierTwo,subTotalDimensionSpec,subtotalQuery,true));\n      }\n    }\n    return Sequences.withBaggage(query.postProcess(Sequences.concat(subtotalsResults)),resultSupplierOne);\n  }\n catch (  Exception ex) {\n    CloseQuietly.close(resultSupplierOne);\n    throw ex;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 393,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6263,
        "startLineNumber" : 350,
        "startColumnNumber" : 2,
        "endLineNumber" : 482,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Sequence<ResultRow> processSubtotalsSpec(GroupByQuery query,GroupByQueryResource resource,Sequence<ResultRow> queryResult){\n  GroupByRowProcessor.ResultSupplier resultSupplierOne=null;\n  try {\n    GroupByQuery baseSubtotalQuery=query.withDimensionSpecs(query.getDimensions().stream().map(dimSpec -> new DefaultDimensionSpec(dimSpec.getOutputName(),dimSpec.getOutputName(),dimSpec.getOutputType())).collect(Collectors.toList())).withAggregatorSpecs(query.getAggregatorSpecs().stream().map(AggregatorFactory::getCombiningFactory).collect(Collectors.toList())).withVirtualColumns(VirtualColumns.EMPTY).withDimFilter(null).withSubtotalsSpec(null);\n    resultSupplierOne=GroupByRowProcessor.process(baseSubtotalQuery,baseSubtotalQuery,queryResult,configSupplier.get(),resource,spillMapper,processingConfig.getTmpDir(),processingConfig.intermediateComputeSizeBytes());\n    List<String> queryDimNames=baseSubtotalQuery.getDimensions().stream().map(DimensionSpec::getOutputName).collect(Collectors.toList());\n    Set<String> aggsAndPostAggs=null;\n    if (!(baseSubtotalQuery.getLimitSpec() instanceof NoopLimitSpec)) {\n      aggsAndPostAggs=getAggregatorAndPostAggregatorNames(baseSubtotalQuery);\n    }\n    List<List<String>> subtotals=query.getSubtotalsSpec();\n    List<Sequence<ResultRow>> subtotalsResults=new ArrayList<>(subtotals.size());\n    for (    List<String> subtotalSpec : subtotals) {\n      final ImmutableSet<String> dimsInSubtotalSpec=ImmutableSet.copyOf(subtotalSpec);\n      final List<DimensionSpec> subTotalDimensionSpec=new ArrayList<>(dimsInSubtotalSpec.size());\n      final List<DimensionSpec> dimensions=query.getDimensions();\n      for (      DimensionSpec dimensionSpec : dimensions) {\n        if (dimsInSubtotalSpec.contains(dimensionSpec.getOutputName())) {\n          subTotalDimensionSpec.add(dimensionSpec);\n        }\n      }\n      LimitSpec subtotalQueryLimitSpec=NoopLimitSpec.instance();\n      if (!(baseSubtotalQuery.getLimitSpec() instanceof NoopLimitSpec)) {\n        Set<String> columns=new HashSet<>(aggsAndPostAggs);\n        columns.addAll(subtotalSpec);\n        subtotalQueryLimitSpec=baseSubtotalQuery.getLimitSpec().filterColumns(columns);\n      }\n      GroupByQuery subtotalQuery=baseSubtotalQuery.withLimitSpec(subtotalQueryLimitSpec);\n      final GroupByRowProcessor.ResultSupplier resultSupplierOneFinal=resultSupplierOne;\n      if (Utils.isPrefix(subtotalSpec,queryDimNames)) {\n        subtotalsResults.add(processSubtotalsResultAndOptionallyClose(() -> resultSupplierOneFinal,subTotalDimensionSpec,subtotalQuery,false));\n      }\n else {\n        Supplier<GroupByRowProcessor.ResultSupplier> resultSupplierTwo=() -> GroupByRowProcessor.process(baseSubtotalQuery,subtotalQuery,resultSupplierOneFinal.results(subTotalDimensionSpec),configSupplier.get(),resource,spillMapper,processingConfig.getTmpDir(),processingConfig.intermediateComputeSizeBytes());\n        subtotalsResults.add(processSubtotalsResultAndOptionallyClose(resultSupplierTwo,subTotalDimensionSpec,subtotalQuery,true));\n      }\n    }\n    return Sequences.withBaggage(query.postProcess(Sequences.concat(subtotalsResults)),resultSupplierOne);\n  }\n catch (  Exception ex) {\n    CloseQuietly.close(resultSupplierOne);\n    throw ex;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 418,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 468,
        "startColumnNumber" : 14,
        "endLineNumber" : 468,
        "endColumnNumber" : 117
      },
      "nodeContext" : "processSubtotalsResultAndOptionallyClose(resultSupplierTwo,subTotalDimensionSpec,subtotalQuery,true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.druid.query.groupby.GroupByQuery"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 447,
    "startColumnNumber" : 108,
    "endLineNumber" : 447,
    "endColumnNumber" : 121
  }, {
    "charLength" : 13,
    "startLineNumber" : 468,
    "startColumnNumber" : 97,
    "endLineNumber" : 468,
    "endColumnNumber" : 110
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}