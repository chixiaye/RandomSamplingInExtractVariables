{
  "id" : 455,
  "expression" : "monitor.isCancelled()",
  "projectName" : "NationalSecurityAgency@ghidra",
  "commitID" : "a54d0e28d652c48502551a88278808549aed5f98",
  "filePath" : "/Ghidra/Features/Base/src/main/java/ghidra/app/cmd/module/ModuleAlgorithmCmd.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "monitor.isCancelled()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 181,
      "startColumnNumber" : 30,
      "endLineNumber" : 181,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 181,
        "startColumnNumber" : 29,
        "endLineNumber" : 181,
        "endColumnNumber" : 51
      },
      "nodeContext" : "!monitor.isCancelled()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 181,
        "startColumnNumber" : 11,
        "endLineNumber" : 181,
        "endColumnNumber" : 51
      },
      "nodeContext" : "cbi2.hasNext() && !monitor.isCancelled()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 181,
        "startColumnNumber" : 4,
        "endLineNumber" : 184,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (cbi2.hasNext() && !monitor.isCancelled()) {\n  CodeBlock cb2=cbi2.next();\n  list.add(cb2);\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 790,
        "startLineNumber" : 175,
        "startColumnNumber" : 25,
        "endLineNumber" : 197,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  monitor.checkCanceled();\n  CodeBlock cb=cbi.next();\n  monitor.setMessage(\"Processing code block @ \" + cb.getMinAddress().toString(true));\n  ArrayList<CodeBlock> list=new ArrayList<CodeBlock>();\n  CodeBlockIterator cbi2=partitioningModel.getCodeBlocksContaining(cb,monitor);\n  while (cbi2.hasNext() && !monitor.isCancelled()) {\n    CodeBlock cb2=cbi2.next();\n    list.add(cb2);\n  }\n  ProgramModule parentModule;\n  if (list.size() > 1) {\n    parentModule=createModule(module,cb);\n  }\n else {\n    parentModule=module;\n  }\n  for (  CodeBlock codeBlock : list) {\n    monitor.checkCanceled();\n    ProgramFragment fragment=createFragment(parentModule,codeBlock);\n    moveCodeUnits(fragment,codeBlock,monitor);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 122,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 812,
        "startLineNumber" : 175,
        "startColumnNumber" : 3,
        "endLineNumber" : 197,
        "endColumnNumber" : 4
      },
      "nodeContext" : "while (cbi.hasNext()) {\n  monitor.checkCanceled();\n  CodeBlock cb=cbi.next();\n  monitor.setMessage(\"Processing code block @ \" + cb.getMinAddress().toString(true));\n  ArrayList<CodeBlock> list=new ArrayList<CodeBlock>();\n  CodeBlockIterator cbi2=partitioningModel.getCodeBlocksContaining(cb,monitor);\n  while (cbi2.hasNext() && !monitor.isCancelled()) {\n    CodeBlock cb2=cbi2.next();\n    list.add(cb2);\n  }\n  ProgramModule parentModule;\n  if (list.size() > 1) {\n    parentModule=createModule(module,cb);\n  }\n else {\n    parentModule=module;\n  }\n  for (  CodeBlock codeBlock : list) {\n    monitor.checkCanceled();\n    ProgramFragment fragment=createFragment(parentModule,codeBlock);\n    moveCodeUnits(fragment,codeBlock,monitor);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 126,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1787,
        "startLineNumber" : 148,
        "startColumnNumber" : 6,
        "endLineNumber" : 198,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  CodeBlockIterator cbi=null;\n  ProgramModule module=null;\n  if (group instanceof ProgramModule) {\n    if (group.equals(root)) {\n      cbi=baseModel.getCodeBlocks(monitor);\n      module=program.getListing().getRootModule(treeName);\n    }\n else {\n      module=(ProgramModule)group;\n      String name=module.getName();\n      if (name.indexOf(NEW_MODULE_SUFFIX) < 0) {\n        module.setName(module.getName() + NEW_MODULE_SUFFIX);\n      }\n      cbi=baseModel.getCodeBlocksContaining(module.getAddressSet(),monitor);\n    }\n  }\n else {\n    if (parent == null) {\n      parent=program.getListing().getRootModule(treeName);\n    }\n    ProgramFragment fragment=(ProgramFragment)group;\n    cbi=baseModel.getCodeBlocksContaining(fragment,monitor);\n    module=createModule(parent,fragment.getName() + NEW_MODULE_SUFFIX);\n    String newName=module.getName();\n    parent.moveChild(newName,index);\n  }\n  while (cbi.hasNext()) {\n    monitor.checkCanceled();\n    CodeBlock cb=cbi.next();\n    monitor.setMessage(\"Processing code block @ \" + cb.getMinAddress().toString(true));\n    ArrayList<CodeBlock> list=new ArrayList<CodeBlock>();\n    CodeBlockIterator cbi2=partitioningModel.getCodeBlocksContaining(cb,monitor);\n    while (cbi2.hasNext() && !monitor.isCancelled()) {\n      CodeBlock cb2=cbi2.next();\n      list.add(cb2);\n    }\n    ProgramModule parentModule;\n    if (list.size() > 1) {\n      parentModule=createModule(module,cb);\n    }\n else {\n      parentModule=module;\n    }\n    for (    CodeBlock codeBlock : list) {\n      monitor.checkCanceled();\n      ProgramFragment fragment=createFragment(parentModule,codeBlock);\n      moveCodeUnits(fragment,codeBlock,monitor);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 267,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1894,
        "startLineNumber" : 148,
        "startColumnNumber" : 2,
        "endLineNumber" : 202,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try {\n  CodeBlockIterator cbi=null;\n  ProgramModule module=null;\n  if (group instanceof ProgramModule) {\n    if (group.equals(root)) {\n      cbi=baseModel.getCodeBlocks(monitor);\n      module=program.getListing().getRootModule(treeName);\n    }\n else {\n      module=(ProgramModule)group;\n      String name=module.getName();\n      if (name.indexOf(NEW_MODULE_SUFFIX) < 0) {\n        module.setName(module.getName() + NEW_MODULE_SUFFIX);\n      }\n      cbi=baseModel.getCodeBlocksContaining(module.getAddressSet(),monitor);\n    }\n  }\n else {\n    if (parent == null) {\n      parent=program.getListing().getRootModule(treeName);\n    }\n    ProgramFragment fragment=(ProgramFragment)group;\n    cbi=baseModel.getCodeBlocksContaining(fragment,monitor);\n    module=createModule(parent,fragment.getName() + NEW_MODULE_SUFFIX);\n    String newName=module.getName();\n    parent.moveChild(newName,index);\n  }\n  while (cbi.hasNext()) {\n    monitor.checkCanceled();\n    CodeBlock cb=cbi.next();\n    monitor.setMessage(\"Processing code block @ \" + cb.getMinAddress().toString(true));\n    ArrayList<CodeBlock> list=new ArrayList<CodeBlock>();\n    CodeBlockIterator cbi2=partitioningModel.getCodeBlocksContaining(cb,monitor);\n    while (cbi2.hasNext() && !monitor.isCancelled()) {\n      CodeBlock cb2=cbi2.next();\n      list.add(cb2);\n    }\n    ProgramModule parentModule;\n    if (list.size() > 1) {\n      parentModule=createModule(module,cb);\n    }\n else {\n      parentModule=module;\n    }\n    for (    CodeBlock codeBlock : list) {\n      monitor.checkCanceled();\n      ProgramFragment fragment=createFragment(parentModule,codeBlock);\n      moveCodeUnits(fragment,codeBlock,monitor);\n    }\n  }\n}\n catch (CancelledException e) {\n  setStatusMsg(\"Modularize was cancelled\");\n  return false;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 280,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3118,
        "startLineNumber" : 114,
        "startColumnNumber" : 71,
        "endLineNumber" : 205,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Group group=groupPath.getGroup(program,treeName);\n  if (group == null) {\n    setStatusMsg(PROGRAM_CHANGED_MESSAGE);\n    return true;\n  }\n  SubroutineBlockModel partitioningModel=null;\n  if (partitioningModelName == null) {\n    partitioningModel=(SubroutineBlockModel)blockModelService.getActiveSubroutineModel(program);\n  }\n else {\n    partitioningModel=(SubroutineBlockModel)blockModelService.getNewModelByName(partitioningModelName,program);\n  }\n  SubroutineBlockModel baseModel=partitioningModel.getBaseSubroutineModel();\n  ProgramModule parent=null;\n  GroupPath parentPath=groupPath.getParentPath();\n  if (parentPath != null) {\n    parent=(ProgramModule)parentPath.getGroup(program,treeName);\n    if (parent == null && parentPath.getPathCount() > 1) {\n      setStatusMsg(PROGRAM_CHANGED_MESSAGE);\n      return true;\n    }\n  }\n  int index=0;\n  if (parent != null) {\n    index=parent.getIndex(group.getName());\n  }\n  try {\n    CodeBlockIterator cbi=null;\n    ProgramModule module=null;\n    if (group instanceof ProgramModule) {\n      if (group.equals(root)) {\n        cbi=baseModel.getCodeBlocks(monitor);\n        module=program.getListing().getRootModule(treeName);\n      }\n else {\n        module=(ProgramModule)group;\n        String name=module.getName();\n        if (name.indexOf(NEW_MODULE_SUFFIX) < 0) {\n          module.setName(module.getName() + NEW_MODULE_SUFFIX);\n        }\n        cbi=baseModel.getCodeBlocksContaining(module.getAddressSet(),monitor);\n      }\n    }\n else {\n      if (parent == null) {\n        parent=program.getListing().getRootModule(treeName);\n      }\n      ProgramFragment fragment=(ProgramFragment)group;\n      cbi=baseModel.getCodeBlocksContaining(fragment,monitor);\n      module=createModule(parent,fragment.getName() + NEW_MODULE_SUFFIX);\n      String newName=module.getName();\n      parent.moveChild(newName,index);\n    }\n    while (cbi.hasNext()) {\n      monitor.checkCanceled();\n      CodeBlock cb=cbi.next();\n      monitor.setMessage(\"Processing code block @ \" + cb.getMinAddress().toString(true));\n      ArrayList<CodeBlock> list=new ArrayList<CodeBlock>();\n      CodeBlockIterator cbi2=partitioningModel.getCodeBlocksContaining(cb,monitor);\n      while (cbi2.hasNext() && !monitor.isCancelled()) {\n        CodeBlock cb2=cbi2.next();\n        list.add(cb2);\n      }\n      ProgramModule parentModule;\n      if (list.size() > 1) {\n        parentModule=createModule(module,cb);\n      }\n else {\n        parentModule=module;\n      }\n      for (      CodeBlock codeBlock : list) {\n        monitor.checkCanceled();\n        ProgramFragment fragment=createFragment(parentModule,codeBlock);\n        moveCodeUnits(fragment,codeBlock,monitor);\n      }\n    }\n  }\n catch (  CancelledException e) {\n    setStatusMsg(\"Modularize was cancelled\");\n    return false;\n  }\n  cleanTree(root);\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 415,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3411,
        "startLineNumber" : 106,
        "startColumnNumber" : 1,
        "endLineNumber" : 205,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * @param monitor\n * @throws NotFoundException\n * @throws NotEmptyException\n * @throws DuplicateNameException\n */\nprivate boolean applyModel(Program program,ProgramModule root,TaskMonitor monitor) throws NotFoundException, NotEmptyException, DuplicateNameException {\n  Group group=groupPath.getGroup(program,treeName);\n  if (group == null) {\n    setStatusMsg(PROGRAM_CHANGED_MESSAGE);\n    return true;\n  }\n  SubroutineBlockModel partitioningModel=null;\n  if (partitioningModelName == null) {\n    partitioningModel=(SubroutineBlockModel)blockModelService.getActiveSubroutineModel(program);\n  }\n else {\n    partitioningModel=(SubroutineBlockModel)blockModelService.getNewModelByName(partitioningModelName,program);\n  }\n  SubroutineBlockModel baseModel=partitioningModel.getBaseSubroutineModel();\n  ProgramModule parent=null;\n  GroupPath parentPath=groupPath.getParentPath();\n  if (parentPath != null) {\n    parent=(ProgramModule)parentPath.getGroup(program,treeName);\n    if (parent == null && parentPath.getPathCount() > 1) {\n      setStatusMsg(PROGRAM_CHANGED_MESSAGE);\n      return true;\n    }\n  }\n  int index=0;\n  if (parent != null) {\n    index=parent.getIndex(group.getName());\n  }\n  try {\n    CodeBlockIterator cbi=null;\n    ProgramModule module=null;\n    if (group instanceof ProgramModule) {\n      if (group.equals(root)) {\n        cbi=baseModel.getCodeBlocks(monitor);\n        module=program.getListing().getRootModule(treeName);\n      }\n else {\n        module=(ProgramModule)group;\n        String name=module.getName();\n        if (name.indexOf(NEW_MODULE_SUFFIX) < 0) {\n          module.setName(module.getName() + NEW_MODULE_SUFFIX);\n        }\n        cbi=baseModel.getCodeBlocksContaining(module.getAddressSet(),monitor);\n      }\n    }\n else {\n      if (parent == null) {\n        parent=program.getListing().getRootModule(treeName);\n      }\n      ProgramFragment fragment=(ProgramFragment)group;\n      cbi=baseModel.getCodeBlocksContaining(fragment,monitor);\n      module=createModule(parent,fragment.getName() + NEW_MODULE_SUFFIX);\n      String newName=module.getName();\n      parent.moveChild(newName,index);\n    }\n    while (cbi.hasNext()) {\n      monitor.checkCanceled();\n      CodeBlock cb=cbi.next();\n      monitor.setMessage(\"Processing code block @ \" + cb.getMinAddress().toString(true));\n      ArrayList<CodeBlock> list=new ArrayList<CodeBlock>();\n      CodeBlockIterator cbi2=partitioningModel.getCodeBlocksContaining(cb,monitor);\n      while (cbi2.hasNext() && !monitor.isCancelled()) {\n        CodeBlock cb2=cbi2.next();\n        list.add(cb2);\n      }\n      ProgramModule parentModule;\n      if (list.size() > 1) {\n        parentModule=createModule(module,cb);\n      }\n else {\n        parentModule=module;\n      }\n      for (      CodeBlock codeBlock : list) {\n        monitor.checkCanceled();\n        ProgramFragment fragment=createFragment(parentModule,codeBlock);\n        moveCodeUnits(fragment,codeBlock,monitor);\n      }\n    }\n  }\n catch (  CancelledException e) {\n    setStatusMsg(\"Modularize was cancelled\");\n    return false;\n  }\n  cleanTree(root);\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 438,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 181,
        "startColumnNumber" : 11,
        "endLineNumber" : 181,
        "endColumnNumber" : 51
      },
      "nodeContext" : "cbi2.hasNext() && !monitor.isCancelled()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 181,
    "startColumnNumber" : 30,
    "endLineNumber" : 181,
    "endColumnNumber" : 51
  } ],
  "layoutRelationDataList" : [ ]
}