{
  "id" : 481,
  "expression" : "\"System.nanoTime(): \"",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/clients/src/test/java/org/apache/kafka/test/Microbenchmarks.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"System.nanoTime(): \"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 53,
      "startColumnNumber" : 27,
      "endLineNumber" : 53,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 53,
        "startColumnNumber" : 27,
        "endLineNumber" : 53,
        "endColumnNumber" : 86
      },
      "nodeContext" : "\"System.nanoTime(): \" + (System.nanoTime() - start) / iters",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 53,
        "startColumnNumber" : 8,
        "endLineNumber" : 53,
        "endColumnNumber" : 87
      },
      "nodeContext" : "System.out.println(\"System.nanoTime(): \" + (System.nanoTime() - start) / iters)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 53,
        "startColumnNumber" : 8,
        "endLineNumber" : 53,
        "endColumnNumber" : 88
      },
      "nodeContext" : "System.out.println(\"System.nanoTime(): \" + (System.nanoTime() - start) / iters);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4300,
        "startLineNumber" : 34,
        "startColumnNumber" : 60,
        "endLineNumber" : 161,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int iters=Integer.parseInt(args[0]);\n  double x=0.0;\n  long start=System.nanoTime();\n  for (int i=0; i < iters; i++)   x+=Math.sqrt(x);\n  System.out.println(x);\n  System.out.println(\"sqrt: \" + (System.nanoTime() - start) / (double)iters);\n  systemMillis(iters);\n  systemNanos(iters);\n  long total=0;\n  start=System.nanoTime();\n  total+=systemMillis(iters);\n  System.out.println(\"System.currentTimeMillis(): \" + (System.nanoTime() - start) / iters);\n  start=System.nanoTime();\n  total+=systemNanos(iters);\n  System.out.println(\"System.nanoTime(): \" + (System.nanoTime() - start) / iters);\n  System.out.println(total);\n  int n=0;\n  Random random=new Random();\n  start=System.nanoTime();\n  for (int i=0; i < iters; i++) {\n    n+=random.nextInt();\n  }\n  System.out.println(n);\n  System.out.println(\"random: \" + (System.nanoTime() - start) / iters);\n  float[] floats=new float[1024];\n  for (int i=0; i < floats.length; i++)   floats[i]=random.nextFloat();\n  Arrays.sort(floats);\n  int loc=0;\n  start=System.nanoTime();\n  for (int i=0; i < iters; i++)   loc+=Arrays.binarySearch(floats,floats[i % floats.length]);\n  System.out.println(loc);\n  System.out.println(\"binary search: \" + (System.nanoTime() - start) / iters);\n  final Time time=Time.SYSTEM;\n  final AtomicBoolean done=new AtomicBoolean(false);\n  final Object lock=new Object();\n  Thread t1=new Thread(){\n    public void run(){\n      time.sleep(1);\n      int counter=0;\n      long start=time.nanoseconds();\n      for (int i=0; i < iters; i++) {\nsynchronized (lock) {\n          counter++;\n        }\n      }\n      System.out.println(\"synchronized: \" + ((time.nanoseconds() - start) / iters));\n      System.out.println(counter);\n      done.set(true);\n    }\n  }\n;\n  Thread t2=new Thread(){\n    public void run(){\n      int counter=0;\n      while (!done.get()) {\n        time.sleep(1);\nsynchronized (lock) {\n          counter+=1;\n        }\n      }\n      System.out.println(\"Counter: \" + counter);\n    }\n  }\n;\n  t1.start();\n  t2.start();\n  t1.join();\n  t2.join();\n  System.out.println(\"Testing locks\");\n  done.set(false);\n  final ReentrantLock lock2=new ReentrantLock();\n  Thread t3=new Thread(){\n    public void run(){\n      time.sleep(1);\n      int counter=0;\n      long start=time.nanoseconds();\n      for (int i=0; i < iters; i++) {\n        lock2.lock();\n        counter++;\n        lock2.unlock();\n      }\n      System.out.println(\"lock: \" + ((time.nanoseconds() - start) / iters));\n      System.out.println(counter);\n      done.set(true);\n    }\n  }\n;\n  Thread t4=new Thread(){\n    public void run(){\n      int counter=0;\n      while (!done.get()) {\n        time.sleep(1);\n        lock2.lock();\n        counter++;\n        lock2.unlock();\n      }\n      System.out.println(\"Counter: \" + counter);\n    }\n  }\n;\n  t3.start();\n  t4.start();\n  t3.join();\n  t4.join();\n  Map<String,Integer> values=new HashMap<String,Integer>();\n  for (int i=0; i < 100; i++)   values.put(Integer.toString(i),i);\n  System.out.println(\"HashMap:\");\n  benchMap(2,1000000,values);\n  System.out.println(\"ConcurentHashMap:\");\n  benchMap(2,1000000,new ConcurrentHashMap<String,Integer>(values));\n  System.out.println(\"CopyOnWriteMap:\");\n  benchMap(2,1000000,new CopyOnWriteMap<String,Integer>(values));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 730,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4356,
        "startLineNumber" : 34,
        "startColumnNumber" : 4,
        "endLineNumber" : 161,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void main(String[] args) throws Exception {\n  final int iters=Integer.parseInt(args[0]);\n  double x=0.0;\n  long start=System.nanoTime();\n  for (int i=0; i < iters; i++)   x+=Math.sqrt(x);\n  System.out.println(x);\n  System.out.println(\"sqrt: \" + (System.nanoTime() - start) / (double)iters);\n  systemMillis(iters);\n  systemNanos(iters);\n  long total=0;\n  start=System.nanoTime();\n  total+=systemMillis(iters);\n  System.out.println(\"System.currentTimeMillis(): \" + (System.nanoTime() - start) / iters);\n  start=System.nanoTime();\n  total+=systemNanos(iters);\n  System.out.println(\"System.nanoTime(): \" + (System.nanoTime() - start) / iters);\n  System.out.println(total);\n  int n=0;\n  Random random=new Random();\n  start=System.nanoTime();\n  for (int i=0; i < iters; i++) {\n    n+=random.nextInt();\n  }\n  System.out.println(n);\n  System.out.println(\"random: \" + (System.nanoTime() - start) / iters);\n  float[] floats=new float[1024];\n  for (int i=0; i < floats.length; i++)   floats[i]=random.nextFloat();\n  Arrays.sort(floats);\n  int loc=0;\n  start=System.nanoTime();\n  for (int i=0; i < iters; i++)   loc+=Arrays.binarySearch(floats,floats[i % floats.length]);\n  System.out.println(loc);\n  System.out.println(\"binary search: \" + (System.nanoTime() - start) / iters);\n  final Time time=Time.SYSTEM;\n  final AtomicBoolean done=new AtomicBoolean(false);\n  final Object lock=new Object();\n  Thread t1=new Thread(){\n    public void run(){\n      time.sleep(1);\n      int counter=0;\n      long start=time.nanoseconds();\n      for (int i=0; i < iters; i++) {\nsynchronized (lock) {\n          counter++;\n        }\n      }\n      System.out.println(\"synchronized: \" + ((time.nanoseconds() - start) / iters));\n      System.out.println(counter);\n      done.set(true);\n    }\n  }\n;\n  Thread t2=new Thread(){\n    public void run(){\n      int counter=0;\n      while (!done.get()) {\n        time.sleep(1);\nsynchronized (lock) {\n          counter+=1;\n        }\n      }\n      System.out.println(\"Counter: \" + counter);\n    }\n  }\n;\n  t1.start();\n  t2.start();\n  t1.join();\n  t2.join();\n  System.out.println(\"Testing locks\");\n  done.set(false);\n  final ReentrantLock lock2=new ReentrantLock();\n  Thread t3=new Thread(){\n    public void run(){\n      time.sleep(1);\n      int counter=0;\n      long start=time.nanoseconds();\n      for (int i=0; i < iters; i++) {\n        lock2.lock();\n        counter++;\n        lock2.unlock();\n      }\n      System.out.println(\"lock: \" + ((time.nanoseconds() - start) / iters));\n      System.out.println(counter);\n      done.set(true);\n    }\n  }\n;\n  Thread t4=new Thread(){\n    public void run(){\n      int counter=0;\n      while (!done.get()) {\n        time.sleep(1);\n        lock2.lock();\n        counter++;\n        lock2.unlock();\n      }\n      System.out.println(\"Counter: \" + counter);\n    }\n  }\n;\n  t3.start();\n  t4.start();\n  t3.join();\n  t4.join();\n  Map<String,Integer> values=new HashMap<String,Integer>();\n  for (int i=0; i < 100; i++)   values.put(Integer.toString(i),i);\n  System.out.println(\"HashMap:\");\n  benchMap(2,1000000,values);\n  System.out.println(\"ConcurentHashMap:\");\n  benchMap(2,1000000,new ConcurrentHashMap<String,Integer>(values));\n  System.out.println(\"CopyOnWriteMap:\");\n  benchMap(2,1000000,new CopyOnWriteMap<String,Integer>(values));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 743,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 53,
        "startColumnNumber" : 8,
        "endLineNumber" : 53,
        "endColumnNumber" : 88
      },
      "nodeContext" : "System.out.println(\"System.nanoTime(): \" + (System.nanoTime() - start) / iters);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 8
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 53,
    "startColumnNumber" : 27,
    "endLineNumber" : 53,
    "endColumnNumber" : 48
  } ],
  "layoutRelationDataList" : [ ]
}