{
  "id" : 245,
  "expression" : "SharedPreferencesHelper.valueFromString(value,existingValue)",
  "projectName" : "facebook@stetho",
  "commitID" : "fee68519d93899dc5cfe6b992f56916a03b279f2",
  "filePath" : "/stetho/src/main/java/com/facebook/stetho/inspector/protocol/module/DOMStorage.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "SharedPreferencesHelper.valueFromString(value,existingValue)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 61,
      "startLineNumber" : 100,
      "startColumnNumber" : 38,
      "endLineNumber" : 100,
      "endColumnNumber" : 99
    },
    "astNodeNumber" : 5,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 100,
        "startColumnNumber" : 12,
        "endLineNumber" : 100,
        "endColumnNumber" : 100
      },
      "nodeContext" : "assignByType(editor,key,SharedPreferencesHelper.valueFromString(value,existingValue))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 100,
        "startColumnNumber" : 12,
        "endLineNumber" : 100,
        "endColumnNumber" : 101
      },
      "nodeContext" : "assignByType(editor,key,SharedPreferencesHelper.valueFromString(value,existingValue));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 143,
        "startLineNumber" : 99,
        "startColumnNumber" : 14,
        "endLineNumber" : 102,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  assignByType(editor,key,SharedPreferencesHelper.valueFromString(value,existingValue));\n  editor.apply();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 474,
        "startLineNumber" : 99,
        "startColumnNumber" : 10,
        "endLineNumber" : 109,
        "endColumnNumber" : 11
      },
      "nodeContext" : "try {\n  assignByType(editor,key,SharedPreferencesHelper.valueFromString(value,existingValue));\n  editor.apply();\n}\n catch (IllegalArgumentException e) {\n  throw new DOMStorageAssignmentException(String.format(Locale.US,\"Type mismatch setting %s to %s (expected %s)\",key,value,existingValue.getClass().getSimpleName()));\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 40,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 554,
        "startLineNumber" : 97,
        "startColumnNumber" : 15,
        "endLineNumber" : 110,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  SharedPreferences.Editor editor=prefs.edit();\n  try {\n    assignByType(editor,key,SharedPreferencesHelper.valueFromString(value,existingValue));\n    editor.apply();\n  }\n catch (  IllegalArgumentException e) {\n    throw new DOMStorageAssignmentException(String.format(Locale.US,\"Type mismatch setting %s to %s (expected %s)\",key,value,existingValue.getClass().getSimpleName()));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 51,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 741,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 110,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (existingValue == null) {\n  throw new DOMStorageAssignmentException(\"Unsupported: cannot add new key \" + key + \" due to lack of type inference\");\n}\n else {\n  SharedPreferences.Editor editor=prefs.edit();\n  try {\n    assignByType(editor,key,SharedPreferencesHelper.valueFromString(value,existingValue));\n    editor.apply();\n  }\n catch (  IllegalArgumentException e) {\n    throw new DOMStorageAssignmentException(String.format(Locale.US,\"Type mismatch setting %s to %s (expected %s)\",key,value,existingValue.getClass().getSimpleName()));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 64,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 759,
        "startLineNumber" : 93,
        "startColumnNumber" : 10,
        "endLineNumber" : 111,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (existingValue == null) {\n    throw new DOMStorageAssignmentException(\"Unsupported: cannot add new key \" + key + \" due to lack of type inference\");\n  }\n else {\n    SharedPreferences.Editor editor=prefs.edit();\n    try {\n      assignByType(editor,key,SharedPreferencesHelper.valueFromString(value,existingValue));\n      editor.apply();\n    }\n catch (    IllegalArgumentException e) {\n      throw new DOMStorageAssignmentException(String.format(Locale.US,\"Type mismatch setting %s to %s (expected %s)\",key,value,existingValue.getClass().getSimpleName()));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 65,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1564,
        "startLineNumber" : 93,
        "startColumnNumber" : 6,
        "endLineNumber" : 130,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try {\n  if (existingValue == null) {\n    throw new DOMStorageAssignmentException(\"Unsupported: cannot add new key \" + key + \" due to lack of type inference\");\n  }\n else {\n    SharedPreferences.Editor editor=prefs.edit();\n    try {\n      assignByType(editor,key,SharedPreferencesHelper.valueFromString(value,existingValue));\n      editor.apply();\n    }\n catch (    IllegalArgumentException e) {\n      throw new DOMStorageAssignmentException(String.format(Locale.US,\"Type mismatch setting %s to %s (expected %s)\",key,value,existingValue.getClass().getSimpleName()));\n    }\n  }\n}\n catch (DOMStorageAssignmentException e) {\n  CLog.writeToConsole(mDOMStoragePeerManager,Console.MessageLevel.ERROR,Console.MessageSource.STORAGE,e.getMessage());\n  if (prefs.contains(key)) {\n    mDOMStoragePeerManager.signalItemUpdated(storage,key,value,SharedPreferencesHelper.valueToString(existingValue));\n  }\n else {\n    mDOMStoragePeerManager.signalItemRemoved(storage,key);\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 114,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1762,
        "startLineNumber" : 88,
        "startColumnNumber" : 32,
        "endLineNumber" : 131,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SharedPreferences prefs=mContext.getSharedPreferences(storage.securityOrigin,Context.MODE_PRIVATE);\n  Object existingValue=prefs.getAll().get(key);\n  try {\n    if (existingValue == null) {\n      throw new DOMStorageAssignmentException(\"Unsupported: cannot add new key \" + key + \" due to lack of type inference\");\n    }\n else {\n      SharedPreferences.Editor editor=prefs.edit();\n      try {\n        assignByType(editor,key,SharedPreferencesHelper.valueFromString(value,existingValue));\n        editor.apply();\n      }\n catch (      IllegalArgumentException e) {\n        throw new DOMStorageAssignmentException(String.format(Locale.US,\"Type mismatch setting %s to %s (expected %s)\",key,value,existingValue.getClass().getSimpleName()));\n      }\n    }\n  }\n catch (  DOMStorageAssignmentException e) {\n    CLog.writeToConsole(mDOMStoragePeerManager,Console.MessageLevel.ERROR,Console.MessageSource.STORAGE,e.getMessage());\n    if (prefs.contains(key)) {\n      mDOMStoragePeerManager.signalItemUpdated(storage,key,value,SharedPreferencesHelper.valueToString(existingValue));\n    }\n else {\n      mDOMStoragePeerManager.signalItemRemoved(storage,key);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 140,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1790,
        "startLineNumber" : 88,
        "startColumnNumber" : 4,
        "endLineNumber" : 131,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (storage.isLocalStorage) {\n  SharedPreferences prefs=mContext.getSharedPreferences(storage.securityOrigin,Context.MODE_PRIVATE);\n  Object existingValue=prefs.getAll().get(key);\n  try {\n    if (existingValue == null) {\n      throw new DOMStorageAssignmentException(\"Unsupported: cannot add new key \" + key + \" due to lack of type inference\");\n    }\n else {\n      SharedPreferences.Editor editor=prefs.edit();\n      try {\n        assignByType(editor,key,SharedPreferencesHelper.valueFromString(value,existingValue));\n        editor.apply();\n      }\n catch (      IllegalArgumentException e) {\n        throw new DOMStorageAssignmentException(String.format(Locale.US,\"Type mismatch setting %s to %s (expected %s)\",key,value,existingValue.getClass().getSimpleName()));\n      }\n    }\n  }\n catch (  DOMStorageAssignmentException e) {\n    CLog.writeToConsole(mDOMStoragePeerManager,Console.MessageLevel.ERROR,Console.MessageSource.STORAGE,e.getMessage());\n    if (prefs.contains(key)) {\n      mDOMStoragePeerManager.signalItemUpdated(storage,key,value,SharedPreferencesHelper.valueToString(existingValue));\n    }\n else {\n      mDOMStoragePeerManager.signalItemRemoved(storage,key);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 144,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2010,
        "startLineNumber" : 81,
        "startColumnNumber" : 45,
        "endLineNumber" : 132,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  StorageId storage=mObjectMapper.convertValue(params.getJSONObject(\"storageId\"),StorageId.class);\n  String key=params.getString(\"key\");\n  String value=params.getString(\"value\");\n  if (storage.isLocalStorage) {\n    SharedPreferences prefs=mContext.getSharedPreferences(storage.securityOrigin,Context.MODE_PRIVATE);\n    Object existingValue=prefs.getAll().get(key);\n    try {\n      if (existingValue == null) {\n        throw new DOMStorageAssignmentException(\"Unsupported: cannot add new key \" + key + \" due to lack of type inference\");\n      }\n else {\n        SharedPreferences.Editor editor=prefs.edit();\n        try {\n          assignByType(editor,key,SharedPreferencesHelper.valueFromString(value,existingValue));\n          editor.apply();\n        }\n catch (        IllegalArgumentException e) {\n          throw new DOMStorageAssignmentException(String.format(Locale.US,\"Type mismatch setting %s to %s (expected %s)\",key,value,existingValue.getClass().getSimpleName()));\n        }\n      }\n    }\n catch (    DOMStorageAssignmentException e) {\n      CLog.writeToConsole(mDOMStoragePeerManager,Console.MessageLevel.ERROR,Console.MessageSource.STORAGE,e.getMessage());\n      if (prefs.contains(key)) {\n        mDOMStoragePeerManager.signalItemUpdated(storage,key,value,SharedPreferencesHelper.valueToString(existingValue));\n      }\n else {\n        mDOMStoragePeerManager.signalItemRemoved(storage,key);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 178,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2146,
        "startLineNumber" : 79,
        "startColumnNumber" : 2,
        "endLineNumber" : 132,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@ChromeDevtoolsMethod public void setDOMStorageItem(JsonRpcPeer peer,JSONObject params) throws JSONException, JsonRpcException {\n  StorageId storage=mObjectMapper.convertValue(params.getJSONObject(\"storageId\"),StorageId.class);\n  String key=params.getString(\"key\");\n  String value=params.getString(\"value\");\n  if (storage.isLocalStorage) {\n    SharedPreferences prefs=mContext.getSharedPreferences(storage.securityOrigin,Context.MODE_PRIVATE);\n    Object existingValue=prefs.getAll().get(key);\n    try {\n      if (existingValue == null) {\n        throw new DOMStorageAssignmentException(\"Unsupported: cannot add new key \" + key + \" due to lack of type inference\");\n      }\n else {\n        SharedPreferences.Editor editor=prefs.edit();\n        try {\n          assignByType(editor,key,SharedPreferencesHelper.valueFromString(value,existingValue));\n          editor.apply();\n        }\n catch (        IllegalArgumentException e) {\n          throw new DOMStorageAssignmentException(String.format(Locale.US,\"Type mismatch setting %s to %s (expected %s)\",key,value,existingValue.getClass().getSimpleName()));\n        }\n      }\n    }\n catch (    DOMStorageAssignmentException e) {\n      CLog.writeToConsole(mDOMStoragePeerManager,Console.MessageLevel.ERROR,Console.MessageSource.STORAGE,e.getMessage());\n      if (prefs.contains(key)) {\n        mDOMStoragePeerManager.signalItemUpdated(storage,key,value,SharedPreferencesHelper.valueToString(existingValue));\n      }\n else {\n        mDOMStoragePeerManager.signalItemRemoved(storage,key);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 196,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 100,
        "startColumnNumber" : 12,
        "endLineNumber" : 100,
        "endColumnNumber" : 101
      },
      "nodeContext" : "assignByType(editor,key,SharedPreferencesHelper.valueFromString(value,existingValue));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "java.lang.Object"
  } ],
  "positionList" : [ {
    "charLength" : 61,
    "startLineNumber" : 100,
    "startColumnNumber" : 38,
    "endLineNumber" : 100,
    "endColumnNumber" : 99
  } ],
  "layoutRelationDataList" : [ ]
}