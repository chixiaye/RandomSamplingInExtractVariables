{
  "id" : 180,
  "expression" : "new StringBuilder()",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/android/guava-tests/test/com/google/common/io/CharSequenceReaderTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new StringBuilder()",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 202,
      "startColumnNumber" : 28,
      "endLineNumber" : 202,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 202,
        "startColumnNumber" : 18,
        "endLineNumber" : 202,
        "endColumnNumber" : 47
      },
      "nodeContext" : "builder=new StringBuilder()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 202,
        "startColumnNumber" : 4,
        "endLineNumber" : 202,
        "endColumnNumber" : 48
      },
      "nodeContext" : "StringBuilder builder=new StringBuilder();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2254,
        "startLineNumber" : 182,
        "startColumnNumber" : 89,
        "endLineNumber" : 245,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String expected=charSequence.toString();\n  CharSequenceReader reader=new CharSequenceReader(charSequence);\n  for (int i=0; i < expected.length(); i++) {\n    assertEquals(expected.charAt(i),reader.read());\n  }\n  assertFullyRead(reader);\n  reader=new CharSequenceReader(charSequence);\n  char[] buf=new char[expected.length()];\n  assertEquals(expected.length() == 0 ? -1 : expected.length(),reader.read(buf));\n  assertEquals(expected,new String(buf));\n  assertFullyRead(reader);\n  reader=new CharSequenceReader(charSequence);\n  buf=new char[5];\n  StringBuilder builder=new StringBuilder();\n  int read;\n  while ((read=reader.read(buf,0,buf.length)) != -1) {\n    builder.append(buf,0,read);\n  }\n  assertEquals(expected,builder.toString());\n  assertFullyRead(reader);\n  reader=new CharSequenceReader(charSequence);\n  CharBuffer buf2=CharBuffer.allocate(expected.length());\n  assertEquals(expected.length() == 0 ? -1 : expected.length(),reader.read(buf2));\n  Java8Compatibility.flip(buf2);\n  assertEquals(expected,buf2.toString());\n  assertFullyRead(reader);\n  reader=new CharSequenceReader(charSequence);\n  buf2=CharBuffer.allocate(5);\n  builder=new StringBuilder();\n  while (reader.read(buf2) != -1) {\n    Java8Compatibility.flip(buf2);\n    builder.append(buf2);\n    Java8Compatibility.clear(buf2);\n  }\n  assertEquals(expected,builder.toString());\n  assertFullyRead(reader);\n  reader=new CharSequenceReader(charSequence);\n  assertEquals(expected.length(),reader.skip(Long.MAX_VALUE));\n  assertFullyRead(reader);\n  if (expected.length() > 5) {\n    reader=new CharSequenceReader(charSequence);\n    assertEquals(5,reader.skip(5));\n    buf=new char[expected.length() - 5];\n    assertEquals(buf.length,reader.read(buf,0,buf.length));\n    assertEquals(expected.substring(5),new String(buf));\n    assertFullyRead(reader);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 350,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2535,
        "startLineNumber" : 178,
        "startColumnNumber" : 2,
        "endLineNumber" : 245,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Creates a CharSequenceReader wrapping the given CharSequence and tests that the reader produces the same sequence when read using each type of read method it provides.\n */\nprivate static void assertReadsCorrectly(CharSequence charSequence) throws IOException {\n  String expected=charSequence.toString();\n  CharSequenceReader reader=new CharSequenceReader(charSequence);\n  for (int i=0; i < expected.length(); i++) {\n    assertEquals(expected.charAt(i),reader.read());\n  }\n  assertFullyRead(reader);\n  reader=new CharSequenceReader(charSequence);\n  char[] buf=new char[expected.length()];\n  assertEquals(expected.length() == 0 ? -1 : expected.length(),reader.read(buf));\n  assertEquals(expected,new String(buf));\n  assertFullyRead(reader);\n  reader=new CharSequenceReader(charSequence);\n  buf=new char[5];\n  StringBuilder builder=new StringBuilder();\n  int read;\n  while ((read=reader.read(buf,0,buf.length)) != -1) {\n    builder.append(buf,0,read);\n  }\n  assertEquals(expected,builder.toString());\n  assertFullyRead(reader);\n  reader=new CharSequenceReader(charSequence);\n  CharBuffer buf2=CharBuffer.allocate(expected.length());\n  assertEquals(expected.length() == 0 ? -1 : expected.length(),reader.read(buf2));\n  Java8Compatibility.flip(buf2);\n  assertEquals(expected,buf2.toString());\n  assertFullyRead(reader);\n  reader=new CharSequenceReader(charSequence);\n  buf2=CharBuffer.allocate(5);\n  builder=new StringBuilder();\n  while (reader.read(buf2) != -1) {\n    Java8Compatibility.flip(buf2);\n    builder.append(buf2);\n    Java8Compatibility.clear(buf2);\n  }\n  assertEquals(expected,builder.toString());\n  assertFullyRead(reader);\n  reader=new CharSequenceReader(charSequence);\n  assertEquals(expected.length(),reader.skip(Long.MAX_VALUE));\n  assertFullyRead(reader);\n  if (expected.length() > 5) {\n    reader=new CharSequenceReader(charSequence);\n    assertEquals(5,reader.skip(5));\n    buf=new char[expected.length() - 5];\n    assertEquals(buf.length,reader.read(buf,0,buf.length));\n    assertEquals(expected.substring(5),new String(buf));\n    assertFullyRead(reader);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 362,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 202,
        "startColumnNumber" : 4,
        "endLineNumber" : 202,
        "endColumnNumber" : 48
      },
      "nodeContext" : "StringBuilder builder=new StringBuilder();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.StringBuilder"
  }, {
    "nodeContext" : "new StringBuilder()",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 221,
      "startColumnNumber" : 14,
      "endLineNumber" : 221,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 221,
        "startColumnNumber" : 4,
        "endLineNumber" : 221,
        "endColumnNumber" : 33
      },
      "nodeContext" : "builder=new StringBuilder()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 221,
        "startColumnNumber" : 4,
        "endLineNumber" : 221,
        "endColumnNumber" : 34
      },
      "nodeContext" : "builder=new StringBuilder();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2254,
        "startLineNumber" : 182,
        "startColumnNumber" : 89,
        "endLineNumber" : 245,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String expected=charSequence.toString();\n  CharSequenceReader reader=new CharSequenceReader(charSequence);\n  for (int i=0; i < expected.length(); i++) {\n    assertEquals(expected.charAt(i),reader.read());\n  }\n  assertFullyRead(reader);\n  reader=new CharSequenceReader(charSequence);\n  char[] buf=new char[expected.length()];\n  assertEquals(expected.length() == 0 ? -1 : expected.length(),reader.read(buf));\n  assertEquals(expected,new String(buf));\n  assertFullyRead(reader);\n  reader=new CharSequenceReader(charSequence);\n  buf=new char[5];\n  StringBuilder builder=new StringBuilder();\n  int read;\n  while ((read=reader.read(buf,0,buf.length)) != -1) {\n    builder.append(buf,0,read);\n  }\n  assertEquals(expected,builder.toString());\n  assertFullyRead(reader);\n  reader=new CharSequenceReader(charSequence);\n  CharBuffer buf2=CharBuffer.allocate(expected.length());\n  assertEquals(expected.length() == 0 ? -1 : expected.length(),reader.read(buf2));\n  Java8Compatibility.flip(buf2);\n  assertEquals(expected,buf2.toString());\n  assertFullyRead(reader);\n  reader=new CharSequenceReader(charSequence);\n  buf2=CharBuffer.allocate(5);\n  builder=new StringBuilder();\n  while (reader.read(buf2) != -1) {\n    Java8Compatibility.flip(buf2);\n    builder.append(buf2);\n    Java8Compatibility.clear(buf2);\n  }\n  assertEquals(expected,builder.toString());\n  assertFullyRead(reader);\n  reader=new CharSequenceReader(charSequence);\n  assertEquals(expected.length(),reader.skip(Long.MAX_VALUE));\n  assertFullyRead(reader);\n  if (expected.length() > 5) {\n    reader=new CharSequenceReader(charSequence);\n    assertEquals(5,reader.skip(5));\n    buf=new char[expected.length() - 5];\n    assertEquals(buf.length,reader.read(buf,0,buf.length));\n    assertEquals(expected.substring(5),new String(buf));\n    assertFullyRead(reader);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 350,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2535,
        "startLineNumber" : 178,
        "startColumnNumber" : 2,
        "endLineNumber" : 245,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Creates a CharSequenceReader wrapping the given CharSequence and tests that the reader produces the same sequence when read using each type of read method it provides.\n */\nprivate static void assertReadsCorrectly(CharSequence charSequence) throws IOException {\n  String expected=charSequence.toString();\n  CharSequenceReader reader=new CharSequenceReader(charSequence);\n  for (int i=0; i < expected.length(); i++) {\n    assertEquals(expected.charAt(i),reader.read());\n  }\n  assertFullyRead(reader);\n  reader=new CharSequenceReader(charSequence);\n  char[] buf=new char[expected.length()];\n  assertEquals(expected.length() == 0 ? -1 : expected.length(),reader.read(buf));\n  assertEquals(expected,new String(buf));\n  assertFullyRead(reader);\n  reader=new CharSequenceReader(charSequence);\n  buf=new char[5];\n  StringBuilder builder=new StringBuilder();\n  int read;\n  while ((read=reader.read(buf,0,buf.length)) != -1) {\n    builder.append(buf,0,read);\n  }\n  assertEquals(expected,builder.toString());\n  assertFullyRead(reader);\n  reader=new CharSequenceReader(charSequence);\n  CharBuffer buf2=CharBuffer.allocate(expected.length());\n  assertEquals(expected.length() == 0 ? -1 : expected.length(),reader.read(buf2));\n  Java8Compatibility.flip(buf2);\n  assertEquals(expected,buf2.toString());\n  assertFullyRead(reader);\n  reader=new CharSequenceReader(charSequence);\n  buf2=CharBuffer.allocate(5);\n  builder=new StringBuilder();\n  while (reader.read(buf2) != -1) {\n    Java8Compatibility.flip(buf2);\n    builder.append(buf2);\n    Java8Compatibility.clear(buf2);\n  }\n  assertEquals(expected,builder.toString());\n  assertFullyRead(reader);\n  reader=new CharSequenceReader(charSequence);\n  assertEquals(expected.length(),reader.skip(Long.MAX_VALUE));\n  assertFullyRead(reader);\n  if (expected.length() > 5) {\n    reader=new CharSequenceReader(charSequence);\n    assertEquals(5,reader.skip(5));\n    buf=new char[expected.length() - 5];\n    assertEquals(buf.length,reader.read(buf,0,buf.length));\n    assertEquals(expected.substring(5),new String(buf));\n    assertFullyRead(reader);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 362,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 221,
        "startColumnNumber" : 4,
        "endLineNumber" : 221,
        "endColumnNumber" : 34
      },
      "nodeContext" : "builder=new StringBuilder();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.StringBuilder"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 202,
    "startColumnNumber" : 28,
    "endLineNumber" : 202,
    "endColumnNumber" : 47
  }, {
    "charLength" : 19,
    "startLineNumber" : 221,
    "startColumnNumber" : 14,
    "endLineNumber" : 221,
    "endColumnNumber" : 33
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}