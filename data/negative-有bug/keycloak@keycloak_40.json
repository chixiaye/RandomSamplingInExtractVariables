{
  "id" : 40,
  "expression" : "config",
  "projectName" : "keycloak@keycloak",
  "commitID" : "aacae9b9acb0fbedc49d4f88c9fbd7aa11922dce",
  "filePath" : "/services/src/main/java/org/keycloak/authentication/authenticators/x509/ValidateX509CertificateUsername.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "config",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 65,
      "startColumnNumber" : 12,
      "endLineNumber" : 65,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 65,
        "startColumnNumber" : 12,
        "endLineNumber" : 65,
        "endColumnNumber" : 26
      },
      "nodeContext" : "config == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 494,
        "startLineNumber" : 65,
        "startColumnNumber" : 8,
        "endLineNumber" : 71,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (config == null) {\n  logger.warn(\"[ValidateX509CertificateUsername:authenticate] x509 Client Certificate Authentication configuration is not available.\");\n  context.getEvent().error(Errors.USER_NOT_FOUND);\n  Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",\"Configuration is missing.\");\n  context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 44,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5697,
        "startLineNumber" : 47,
        "startColumnNumber" : 64,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  X509Certificate[] certs=getCertificateChain(context);\n  if (certs == null || certs.length == 0) {\n    logger.debug(\"[ValidateX509CertificateUsername:authenticate] x509 client certificate is not available for mutual SSL.\");\n    context.getEvent().error(Errors.USER_NOT_FOUND);\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",\"X509 client certificate is missing.\");\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  saveX509CertificateAuditDataToAuthSession(context,certs[0]);\n  recordX509CertificateAuditDataViaContextEvent(context);\n  X509AuthenticatorConfigModel config=null;\n  if (context.getAuthenticatorConfig() != null && context.getAuthenticatorConfig().getConfig() != null) {\n    config=new X509AuthenticatorConfigModel(context.getAuthenticatorConfig());\n  }\n  if (config == null) {\n    logger.warn(\"[ValidateX509CertificateUsername:authenticate] x509 Client Certificate Authentication configuration is not available.\");\n    context.getEvent().error(Errors.USER_NOT_FOUND);\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",\"Configuration is missing.\");\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  try {\n    CertificateValidator.CertificateValidatorBuilder builder=certificateValidationParameters(context.getSession(),config);\n    CertificateValidator validator=builder.build(certs);\n    validator.checkRevocationStatus().validateTrust().validateKeyUsage().validateExtendedKeyUsage().validateTimestamps().validatePolicy();\n  }\n catch (  Exception e) {\n    logger.error(e.getMessage(),e);\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",e.getMessage());\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  Object userIdentity=getUserIdentityExtractor(config).extractUserIdentity(certs);\n  if (userIdentity == null) {\n    context.getEvent().error(Errors.INVALID_USER_CREDENTIALS);\n    logger.errorf(\"[ValidateX509CertificateUsername:authenticate] Unable to extract user identity from certificate.\");\n    String errorMessage=\"Unable to extract user identity from specified certificate\";\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",errorMessage);\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  UserModel user;\n  try {\n    context.getEvent().detail(Details.USERNAME,userIdentity.toString());\n    context.getAuthenticationSession().setAuthNote(AbstractUsernameFormAuthenticator.ATTEMPTED_USERNAME,userIdentity.toString());\n    user=getUserIdentityToModelMapper(config).find(context,userIdentity);\n  }\n catch (  ModelDuplicateException e) {\n    logger.modelDuplicateException(e);\n    String errorMessage=String.format(\"X509 certificate authentication's failed. Reason: \\\"%s\\\"\",e.getMessage());\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",errorMessage);\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\ncatch (  Exception e) {\n    logger.error(e.getMessage(),e);\n    String errorMessage=String.format(\"X509 certificate authentication's failed. Reason: \\\"%s\\\"\",e.getMessage());\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",errorMessage);\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  if (user == null) {\n    context.getEvent().error(Errors.INVALID_USER_CREDENTIALS);\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_grant\",\"Invalid user credentials\");\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  String bruteForceError=getDisabledByBruteForceEventError(context,user);\n  if (bruteForceError != null) {\n    context.getEvent().user(user);\n    context.getEvent().error(bruteForceError);\n    Response challengeResponse=errorResponse(Response.Status.BAD_REQUEST.getStatusCode(),\"invalid_grant\",\"Invalid user credentials\");\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  if (!user.isEnabled()) {\n    context.getEvent().user(user);\n    context.getEvent().error(Errors.USER_DISABLED);\n    Response challengeResponse=errorResponse(Response.Status.BAD_REQUEST.getStatusCode(),\"invalid_grant\",\"Account disabled\");\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  context.setUser(user);\n  context.success();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 574,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5771,
        "startLineNumber" : 46,
        "startColumnNumber" : 4,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void authenticate(AuthenticationFlowContext context){\n  X509Certificate[] certs=getCertificateChain(context);\n  if (certs == null || certs.length == 0) {\n    logger.debug(\"[ValidateX509CertificateUsername:authenticate] x509 client certificate is not available for mutual SSL.\");\n    context.getEvent().error(Errors.USER_NOT_FOUND);\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",\"X509 client certificate is missing.\");\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  saveX509CertificateAuditDataToAuthSession(context,certs[0]);\n  recordX509CertificateAuditDataViaContextEvent(context);\n  X509AuthenticatorConfigModel config=null;\n  if (context.getAuthenticatorConfig() != null && context.getAuthenticatorConfig().getConfig() != null) {\n    config=new X509AuthenticatorConfigModel(context.getAuthenticatorConfig());\n  }\n  if (config == null) {\n    logger.warn(\"[ValidateX509CertificateUsername:authenticate] x509 Client Certificate Authentication configuration is not available.\");\n    context.getEvent().error(Errors.USER_NOT_FOUND);\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",\"Configuration is missing.\");\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  try {\n    CertificateValidator.CertificateValidatorBuilder builder=certificateValidationParameters(context.getSession(),config);\n    CertificateValidator validator=builder.build(certs);\n    validator.checkRevocationStatus().validateTrust().validateKeyUsage().validateExtendedKeyUsage().validateTimestamps().validatePolicy();\n  }\n catch (  Exception e) {\n    logger.error(e.getMessage(),e);\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",e.getMessage());\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  Object userIdentity=getUserIdentityExtractor(config).extractUserIdentity(certs);\n  if (userIdentity == null) {\n    context.getEvent().error(Errors.INVALID_USER_CREDENTIALS);\n    logger.errorf(\"[ValidateX509CertificateUsername:authenticate] Unable to extract user identity from certificate.\");\n    String errorMessage=\"Unable to extract user identity from specified certificate\";\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",errorMessage);\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  UserModel user;\n  try {\n    context.getEvent().detail(Details.USERNAME,userIdentity.toString());\n    context.getAuthenticationSession().setAuthNote(AbstractUsernameFormAuthenticator.ATTEMPTED_USERNAME,userIdentity.toString());\n    user=getUserIdentityToModelMapper(config).find(context,userIdentity);\n  }\n catch (  ModelDuplicateException e) {\n    logger.modelDuplicateException(e);\n    String errorMessage=String.format(\"X509 certificate authentication's failed. Reason: \\\"%s\\\"\",e.getMessage());\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",errorMessage);\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\ncatch (  Exception e) {\n    logger.error(e.getMessage(),e);\n    String errorMessage=String.format(\"X509 certificate authentication's failed. Reason: \\\"%s\\\"\",e.getMessage());\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",errorMessage);\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  if (user == null) {\n    context.getEvent().error(Errors.INVALID_USER_CREDENTIALS);\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_grant\",\"Invalid user credentials\");\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  String bruteForceError=getDisabledByBruteForceEventError(context,user);\n  if (bruteForceError != null) {\n    context.getEvent().user(user);\n    context.getEvent().error(bruteForceError);\n    Response challengeResponse=errorResponse(Response.Status.BAD_REQUEST.getStatusCode(),\"invalid_grant\",\"Invalid user credentials\");\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  if (!user.isEnabled()) {\n    context.getEvent().user(user);\n    context.getEvent().error(Errors.USER_DISABLED);\n    Response challengeResponse=errorResponse(Response.Status.BAD_REQUEST.getStatusCode(),\"invalid_grant\",\"Account disabled\");\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  context.setUser(user);\n  context.success();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 584,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 65,
        "startColumnNumber" : 12,
        "endLineNumber" : 65,
        "endColumnNumber" : 26
      },
      "nodeContext" : "config == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.keycloak.authentication.authenticators.x509.X509AuthenticatorConfigModel"
  }, {
    "nodeContext" : "config",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 74,
      "startColumnNumber" : 125,
      "endLineNumber" : 74,
      "endColumnNumber" : 131
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 74,
        "startColumnNumber" : 71,
        "endLineNumber" : 74,
        "endColumnNumber" : 132
      },
      "nodeContext" : "certificateValidationParameters(context.getSession(),config)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 74,
        "startColumnNumber" : 61,
        "endLineNumber" : 74,
        "endColumnNumber" : 132
      },
      "nodeContext" : "builder=certificateValidationParameters(context.getSession(),config)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 121,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 74,
        "endColumnNumber" : 133
      },
      "nodeContext" : "CertificateValidator.CertificateValidatorBuilder builder=certificateValidationParameters(context.getSession(),config);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 464,
        "startLineNumber" : 73,
        "startColumnNumber" : 12,
        "endLineNumber" : 82,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  CertificateValidator.CertificateValidatorBuilder builder=certificateValidationParameters(context.getSession(),config);\n  CertificateValidator validator=builder.build(certs);\n  validator.checkRevocationStatus().validateTrust().validateKeyUsage().validateExtendedKeyUsage().validateTimestamps().validatePolicy();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 37,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 850,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 88,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  CertificateValidator.CertificateValidatorBuilder builder=certificateValidationParameters(context.getSession(),config);\n  CertificateValidator validator=builder.build(certs);\n  validator.checkRevocationStatus().validateTrust().validateKeyUsage().validateExtendedKeyUsage().validateTimestamps().validatePolicy();\n}\n catch (Exception e) {\n  logger.error(e.getMessage(),e);\n  Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",e.getMessage());\n  context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n  return;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 79,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5697,
        "startLineNumber" : 47,
        "startColumnNumber" : 64,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  X509Certificate[] certs=getCertificateChain(context);\n  if (certs == null || certs.length == 0) {\n    logger.debug(\"[ValidateX509CertificateUsername:authenticate] x509 client certificate is not available for mutual SSL.\");\n    context.getEvent().error(Errors.USER_NOT_FOUND);\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",\"X509 client certificate is missing.\");\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  saveX509CertificateAuditDataToAuthSession(context,certs[0]);\n  recordX509CertificateAuditDataViaContextEvent(context);\n  X509AuthenticatorConfigModel config=null;\n  if (context.getAuthenticatorConfig() != null && context.getAuthenticatorConfig().getConfig() != null) {\n    config=new X509AuthenticatorConfigModel(context.getAuthenticatorConfig());\n  }\n  if (config == null) {\n    logger.warn(\"[ValidateX509CertificateUsername:authenticate] x509 Client Certificate Authentication configuration is not available.\");\n    context.getEvent().error(Errors.USER_NOT_FOUND);\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",\"Configuration is missing.\");\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  try {\n    CertificateValidator.CertificateValidatorBuilder builder=certificateValidationParameters(context.getSession(),config);\n    CertificateValidator validator=builder.build(certs);\n    validator.checkRevocationStatus().validateTrust().validateKeyUsage().validateExtendedKeyUsage().validateTimestamps().validatePolicy();\n  }\n catch (  Exception e) {\n    logger.error(e.getMessage(),e);\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",e.getMessage());\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  Object userIdentity=getUserIdentityExtractor(config).extractUserIdentity(certs);\n  if (userIdentity == null) {\n    context.getEvent().error(Errors.INVALID_USER_CREDENTIALS);\n    logger.errorf(\"[ValidateX509CertificateUsername:authenticate] Unable to extract user identity from certificate.\");\n    String errorMessage=\"Unable to extract user identity from specified certificate\";\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",errorMessage);\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  UserModel user;\n  try {\n    context.getEvent().detail(Details.USERNAME,userIdentity.toString());\n    context.getAuthenticationSession().setAuthNote(AbstractUsernameFormAuthenticator.ATTEMPTED_USERNAME,userIdentity.toString());\n    user=getUserIdentityToModelMapper(config).find(context,userIdentity);\n  }\n catch (  ModelDuplicateException e) {\n    logger.modelDuplicateException(e);\n    String errorMessage=String.format(\"X509 certificate authentication's failed. Reason: \\\"%s\\\"\",e.getMessage());\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",errorMessage);\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\ncatch (  Exception e) {\n    logger.error(e.getMessage(),e);\n    String errorMessage=String.format(\"X509 certificate authentication's failed. Reason: \\\"%s\\\"\",e.getMessage());\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",errorMessage);\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  if (user == null) {\n    context.getEvent().error(Errors.INVALID_USER_CREDENTIALS);\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_grant\",\"Invalid user credentials\");\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  String bruteForceError=getDisabledByBruteForceEventError(context,user);\n  if (bruteForceError != null) {\n    context.getEvent().user(user);\n    context.getEvent().error(bruteForceError);\n    Response challengeResponse=errorResponse(Response.Status.BAD_REQUEST.getStatusCode(),\"invalid_grant\",\"Invalid user credentials\");\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  if (!user.isEnabled()) {\n    context.getEvent().user(user);\n    context.getEvent().error(Errors.USER_DISABLED);\n    Response challengeResponse=errorResponse(Response.Status.BAD_REQUEST.getStatusCode(),\"invalid_grant\",\"Account disabled\");\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  context.setUser(user);\n  context.success();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 574,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5771,
        "startLineNumber" : 46,
        "startColumnNumber" : 4,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void authenticate(AuthenticationFlowContext context){\n  X509Certificate[] certs=getCertificateChain(context);\n  if (certs == null || certs.length == 0) {\n    logger.debug(\"[ValidateX509CertificateUsername:authenticate] x509 client certificate is not available for mutual SSL.\");\n    context.getEvent().error(Errors.USER_NOT_FOUND);\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",\"X509 client certificate is missing.\");\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  saveX509CertificateAuditDataToAuthSession(context,certs[0]);\n  recordX509CertificateAuditDataViaContextEvent(context);\n  X509AuthenticatorConfigModel config=null;\n  if (context.getAuthenticatorConfig() != null && context.getAuthenticatorConfig().getConfig() != null) {\n    config=new X509AuthenticatorConfigModel(context.getAuthenticatorConfig());\n  }\n  if (config == null) {\n    logger.warn(\"[ValidateX509CertificateUsername:authenticate] x509 Client Certificate Authentication configuration is not available.\");\n    context.getEvent().error(Errors.USER_NOT_FOUND);\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",\"Configuration is missing.\");\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  try {\n    CertificateValidator.CertificateValidatorBuilder builder=certificateValidationParameters(context.getSession(),config);\n    CertificateValidator validator=builder.build(certs);\n    validator.checkRevocationStatus().validateTrust().validateKeyUsage().validateExtendedKeyUsage().validateTimestamps().validatePolicy();\n  }\n catch (  Exception e) {\n    logger.error(e.getMessage(),e);\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",e.getMessage());\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  Object userIdentity=getUserIdentityExtractor(config).extractUserIdentity(certs);\n  if (userIdentity == null) {\n    context.getEvent().error(Errors.INVALID_USER_CREDENTIALS);\n    logger.errorf(\"[ValidateX509CertificateUsername:authenticate] Unable to extract user identity from certificate.\");\n    String errorMessage=\"Unable to extract user identity from specified certificate\";\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",errorMessage);\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  UserModel user;\n  try {\n    context.getEvent().detail(Details.USERNAME,userIdentity.toString());\n    context.getAuthenticationSession().setAuthNote(AbstractUsernameFormAuthenticator.ATTEMPTED_USERNAME,userIdentity.toString());\n    user=getUserIdentityToModelMapper(config).find(context,userIdentity);\n  }\n catch (  ModelDuplicateException e) {\n    logger.modelDuplicateException(e);\n    String errorMessage=String.format(\"X509 certificate authentication's failed. Reason: \\\"%s\\\"\",e.getMessage());\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",errorMessage);\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\ncatch (  Exception e) {\n    logger.error(e.getMessage(),e);\n    String errorMessage=String.format(\"X509 certificate authentication's failed. Reason: \\\"%s\\\"\",e.getMessage());\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",errorMessage);\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  if (user == null) {\n    context.getEvent().error(Errors.INVALID_USER_CREDENTIALS);\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_grant\",\"Invalid user credentials\");\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  String bruteForceError=getDisabledByBruteForceEventError(context,user);\n  if (bruteForceError != null) {\n    context.getEvent().user(user);\n    context.getEvent().error(bruteForceError);\n    Response challengeResponse=errorResponse(Response.Status.BAD_REQUEST.getStatusCode(),\"invalid_grant\",\"Invalid user credentials\");\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  if (!user.isEnabled()) {\n    context.getEvent().user(user);\n    context.getEvent().error(Errors.USER_DISABLED);\n    Response challengeResponse=errorResponse(Response.Status.BAD_REQUEST.getStatusCode(),\"invalid_grant\",\"Account disabled\");\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  context.setUser(user);\n  context.success();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 584,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 121,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 74,
        "endColumnNumber" : 133
      },
      "nodeContext" : "CertificateValidator.CertificateValidatorBuilder builder=certificateValidationParameters(context.getSession(),config);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.keycloak.authentication.authenticators.x509.X509AuthenticatorConfigModel"
  }, {
    "nodeContext" : "config",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 90,
      "startColumnNumber" : 55,
      "endLineNumber" : 90,
      "endColumnNumber" : 61
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 90,
        "startColumnNumber" : 30,
        "endLineNumber" : 90,
        "endColumnNumber" : 62
      },
      "nodeContext" : "getUserIdentityExtractor(config)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 90,
        "startColumnNumber" : 30,
        "endLineNumber" : 90,
        "endColumnNumber" : 89
      },
      "nodeContext" : "getUserIdentityExtractor(config).extractUserIdentity(certs)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 90,
        "startColumnNumber" : 15,
        "endLineNumber" : 90,
        "endColumnNumber" : 89
      },
      "nodeContext" : "userIdentity=getUserIdentityExtractor(config).extractUserIdentity(certs)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 90,
        "endColumnNumber" : 90
      },
      "nodeContext" : "Object userIdentity=getUserIdentityExtractor(config).extractUserIdentity(certs);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5697,
        "startLineNumber" : 47,
        "startColumnNumber" : 64,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  X509Certificate[] certs=getCertificateChain(context);\n  if (certs == null || certs.length == 0) {\n    logger.debug(\"[ValidateX509CertificateUsername:authenticate] x509 client certificate is not available for mutual SSL.\");\n    context.getEvent().error(Errors.USER_NOT_FOUND);\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",\"X509 client certificate is missing.\");\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  saveX509CertificateAuditDataToAuthSession(context,certs[0]);\n  recordX509CertificateAuditDataViaContextEvent(context);\n  X509AuthenticatorConfigModel config=null;\n  if (context.getAuthenticatorConfig() != null && context.getAuthenticatorConfig().getConfig() != null) {\n    config=new X509AuthenticatorConfigModel(context.getAuthenticatorConfig());\n  }\n  if (config == null) {\n    logger.warn(\"[ValidateX509CertificateUsername:authenticate] x509 Client Certificate Authentication configuration is not available.\");\n    context.getEvent().error(Errors.USER_NOT_FOUND);\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",\"Configuration is missing.\");\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  try {\n    CertificateValidator.CertificateValidatorBuilder builder=certificateValidationParameters(context.getSession(),config);\n    CertificateValidator validator=builder.build(certs);\n    validator.checkRevocationStatus().validateTrust().validateKeyUsage().validateExtendedKeyUsage().validateTimestamps().validatePolicy();\n  }\n catch (  Exception e) {\n    logger.error(e.getMessage(),e);\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",e.getMessage());\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  Object userIdentity=getUserIdentityExtractor(config).extractUserIdentity(certs);\n  if (userIdentity == null) {\n    context.getEvent().error(Errors.INVALID_USER_CREDENTIALS);\n    logger.errorf(\"[ValidateX509CertificateUsername:authenticate] Unable to extract user identity from certificate.\");\n    String errorMessage=\"Unable to extract user identity from specified certificate\";\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",errorMessage);\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  UserModel user;\n  try {\n    context.getEvent().detail(Details.USERNAME,userIdentity.toString());\n    context.getAuthenticationSession().setAuthNote(AbstractUsernameFormAuthenticator.ATTEMPTED_USERNAME,userIdentity.toString());\n    user=getUserIdentityToModelMapper(config).find(context,userIdentity);\n  }\n catch (  ModelDuplicateException e) {\n    logger.modelDuplicateException(e);\n    String errorMessage=String.format(\"X509 certificate authentication's failed. Reason: \\\"%s\\\"\",e.getMessage());\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",errorMessage);\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\ncatch (  Exception e) {\n    logger.error(e.getMessage(),e);\n    String errorMessage=String.format(\"X509 certificate authentication's failed. Reason: \\\"%s\\\"\",e.getMessage());\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",errorMessage);\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  if (user == null) {\n    context.getEvent().error(Errors.INVALID_USER_CREDENTIALS);\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_grant\",\"Invalid user credentials\");\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  String bruteForceError=getDisabledByBruteForceEventError(context,user);\n  if (bruteForceError != null) {\n    context.getEvent().user(user);\n    context.getEvent().error(bruteForceError);\n    Response challengeResponse=errorResponse(Response.Status.BAD_REQUEST.getStatusCode(),\"invalid_grant\",\"Invalid user credentials\");\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  if (!user.isEnabled()) {\n    context.getEvent().user(user);\n    context.getEvent().error(Errors.USER_DISABLED);\n    Response challengeResponse=errorResponse(Response.Status.BAD_REQUEST.getStatusCode(),\"invalid_grant\",\"Account disabled\");\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  context.setUser(user);\n  context.success();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 574,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5771,
        "startLineNumber" : 46,
        "startColumnNumber" : 4,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void authenticate(AuthenticationFlowContext context){\n  X509Certificate[] certs=getCertificateChain(context);\n  if (certs == null || certs.length == 0) {\n    logger.debug(\"[ValidateX509CertificateUsername:authenticate] x509 client certificate is not available for mutual SSL.\");\n    context.getEvent().error(Errors.USER_NOT_FOUND);\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",\"X509 client certificate is missing.\");\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  saveX509CertificateAuditDataToAuthSession(context,certs[0]);\n  recordX509CertificateAuditDataViaContextEvent(context);\n  X509AuthenticatorConfigModel config=null;\n  if (context.getAuthenticatorConfig() != null && context.getAuthenticatorConfig().getConfig() != null) {\n    config=new X509AuthenticatorConfigModel(context.getAuthenticatorConfig());\n  }\n  if (config == null) {\n    logger.warn(\"[ValidateX509CertificateUsername:authenticate] x509 Client Certificate Authentication configuration is not available.\");\n    context.getEvent().error(Errors.USER_NOT_FOUND);\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",\"Configuration is missing.\");\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  try {\n    CertificateValidator.CertificateValidatorBuilder builder=certificateValidationParameters(context.getSession(),config);\n    CertificateValidator validator=builder.build(certs);\n    validator.checkRevocationStatus().validateTrust().validateKeyUsage().validateExtendedKeyUsage().validateTimestamps().validatePolicy();\n  }\n catch (  Exception e) {\n    logger.error(e.getMessage(),e);\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",e.getMessage());\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  Object userIdentity=getUserIdentityExtractor(config).extractUserIdentity(certs);\n  if (userIdentity == null) {\n    context.getEvent().error(Errors.INVALID_USER_CREDENTIALS);\n    logger.errorf(\"[ValidateX509CertificateUsername:authenticate] Unable to extract user identity from certificate.\");\n    String errorMessage=\"Unable to extract user identity from specified certificate\";\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",errorMessage);\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  UserModel user;\n  try {\n    context.getEvent().detail(Details.USERNAME,userIdentity.toString());\n    context.getAuthenticationSession().setAuthNote(AbstractUsernameFormAuthenticator.ATTEMPTED_USERNAME,userIdentity.toString());\n    user=getUserIdentityToModelMapper(config).find(context,userIdentity);\n  }\n catch (  ModelDuplicateException e) {\n    logger.modelDuplicateException(e);\n    String errorMessage=String.format(\"X509 certificate authentication's failed. Reason: \\\"%s\\\"\",e.getMessage());\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",errorMessage);\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\ncatch (  Exception e) {\n    logger.error(e.getMessage(),e);\n    String errorMessage=String.format(\"X509 certificate authentication's failed. Reason: \\\"%s\\\"\",e.getMessage());\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",errorMessage);\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  if (user == null) {\n    context.getEvent().error(Errors.INVALID_USER_CREDENTIALS);\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_grant\",\"Invalid user credentials\");\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  String bruteForceError=getDisabledByBruteForceEventError(context,user);\n  if (bruteForceError != null) {\n    context.getEvent().user(user);\n    context.getEvent().error(bruteForceError);\n    Response challengeResponse=errorResponse(Response.Status.BAD_REQUEST.getStatusCode(),\"invalid_grant\",\"Invalid user credentials\");\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  if (!user.isEnabled()) {\n    context.getEvent().user(user);\n    context.getEvent().error(Errors.USER_DISABLED);\n    Response challengeResponse=errorResponse(Response.Status.BAD_REQUEST.getStatusCode(),\"invalid_grant\",\"Account disabled\");\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  context.setUser(user);\n  context.success();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 584,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 90,
        "endColumnNumber" : 90
      },
      "nodeContext" : "Object userIdentity=getUserIdentityExtractor(config).extractUserIdentity(certs);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.keycloak.authentication.authenticators.x509.X509AuthenticatorConfigModel"
  }, {
    "nodeContext" : "config",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 104,
      "startColumnNumber" : 48,
      "endLineNumber" : 104,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 104,
        "startColumnNumber" : 19,
        "endLineNumber" : 104,
        "endColumnNumber" : 55
      },
      "nodeContext" : "getUserIdentityToModelMapper(config)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 104,
        "startColumnNumber" : 19,
        "endLineNumber" : 104,
        "endColumnNumber" : 83
      },
      "nodeContext" : "getUserIdentityToModelMapper(config).find(context,userIdentity)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 104,
        "startColumnNumber" : 12,
        "endLineNumber" : 104,
        "endColumnNumber" : 83
      },
      "nodeContext" : "user=getUserIdentityToModelMapper(config).find(context,userIdentity)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 104,
        "startColumnNumber" : 12,
        "endLineNumber" : 104,
        "endColumnNumber" : 84
      },
      "nodeContext" : "user=getUserIdentityToModelMapper(config).find(context,userIdentity);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 317,
        "startLineNumber" : 101,
        "startColumnNumber" : 12,
        "endLineNumber" : 105,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  context.getEvent().detail(Details.USERNAME,userIdentity.toString());\n  context.getAuthenticationSession().setAuthNote(AbstractUsernameFormAuthenticator.ATTEMPTED_USERNAME,userIdentity.toString());\n  user=getUserIdentityToModelMapper(config).find(context,userIdentity);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 35,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1237,
        "startLineNumber" : 101,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  context.getEvent().detail(Details.USERNAME,userIdentity.toString());\n  context.getAuthenticationSession().setAuthNote(AbstractUsernameFormAuthenticator.ATTEMPTED_USERNAME,userIdentity.toString());\n  user=getUserIdentityToModelMapper(config).find(context,userIdentity);\n}\n catch (ModelDuplicateException e) {\n  logger.modelDuplicateException(e);\n  String errorMessage=String.format(\"X509 certificate authentication's failed. Reason: \\\"%s\\\"\",e.getMessage());\n  Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",errorMessage);\n  context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n  return;\n}\ncatch (Exception e) {\n  logger.error(e.getMessage(),e);\n  String errorMessage=String.format(\"X509 certificate authentication's failed. Reason: \\\"%s\\\"\",e.getMessage());\n  Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",errorMessage);\n  context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n  return;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 135,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5697,
        "startLineNumber" : 47,
        "startColumnNumber" : 64,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  X509Certificate[] certs=getCertificateChain(context);\n  if (certs == null || certs.length == 0) {\n    logger.debug(\"[ValidateX509CertificateUsername:authenticate] x509 client certificate is not available for mutual SSL.\");\n    context.getEvent().error(Errors.USER_NOT_FOUND);\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",\"X509 client certificate is missing.\");\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  saveX509CertificateAuditDataToAuthSession(context,certs[0]);\n  recordX509CertificateAuditDataViaContextEvent(context);\n  X509AuthenticatorConfigModel config=null;\n  if (context.getAuthenticatorConfig() != null && context.getAuthenticatorConfig().getConfig() != null) {\n    config=new X509AuthenticatorConfigModel(context.getAuthenticatorConfig());\n  }\n  if (config == null) {\n    logger.warn(\"[ValidateX509CertificateUsername:authenticate] x509 Client Certificate Authentication configuration is not available.\");\n    context.getEvent().error(Errors.USER_NOT_FOUND);\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",\"Configuration is missing.\");\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  try {\n    CertificateValidator.CertificateValidatorBuilder builder=certificateValidationParameters(context.getSession(),config);\n    CertificateValidator validator=builder.build(certs);\n    validator.checkRevocationStatus().validateTrust().validateKeyUsage().validateExtendedKeyUsage().validateTimestamps().validatePolicy();\n  }\n catch (  Exception e) {\n    logger.error(e.getMessage(),e);\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",e.getMessage());\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  Object userIdentity=getUserIdentityExtractor(config).extractUserIdentity(certs);\n  if (userIdentity == null) {\n    context.getEvent().error(Errors.INVALID_USER_CREDENTIALS);\n    logger.errorf(\"[ValidateX509CertificateUsername:authenticate] Unable to extract user identity from certificate.\");\n    String errorMessage=\"Unable to extract user identity from specified certificate\";\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",errorMessage);\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  UserModel user;\n  try {\n    context.getEvent().detail(Details.USERNAME,userIdentity.toString());\n    context.getAuthenticationSession().setAuthNote(AbstractUsernameFormAuthenticator.ATTEMPTED_USERNAME,userIdentity.toString());\n    user=getUserIdentityToModelMapper(config).find(context,userIdentity);\n  }\n catch (  ModelDuplicateException e) {\n    logger.modelDuplicateException(e);\n    String errorMessage=String.format(\"X509 certificate authentication's failed. Reason: \\\"%s\\\"\",e.getMessage());\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",errorMessage);\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\ncatch (  Exception e) {\n    logger.error(e.getMessage(),e);\n    String errorMessage=String.format(\"X509 certificate authentication's failed. Reason: \\\"%s\\\"\",e.getMessage());\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",errorMessage);\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  if (user == null) {\n    context.getEvent().error(Errors.INVALID_USER_CREDENTIALS);\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_grant\",\"Invalid user credentials\");\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  String bruteForceError=getDisabledByBruteForceEventError(context,user);\n  if (bruteForceError != null) {\n    context.getEvent().user(user);\n    context.getEvent().error(bruteForceError);\n    Response challengeResponse=errorResponse(Response.Status.BAD_REQUEST.getStatusCode(),\"invalid_grant\",\"Invalid user credentials\");\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  if (!user.isEnabled()) {\n    context.getEvent().user(user);\n    context.getEvent().error(Errors.USER_DISABLED);\n    Response challengeResponse=errorResponse(Response.Status.BAD_REQUEST.getStatusCode(),\"invalid_grant\",\"Account disabled\");\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  context.setUser(user);\n  context.success();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 574,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5771,
        "startLineNumber" : 46,
        "startColumnNumber" : 4,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void authenticate(AuthenticationFlowContext context){\n  X509Certificate[] certs=getCertificateChain(context);\n  if (certs == null || certs.length == 0) {\n    logger.debug(\"[ValidateX509CertificateUsername:authenticate] x509 client certificate is not available for mutual SSL.\");\n    context.getEvent().error(Errors.USER_NOT_FOUND);\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",\"X509 client certificate is missing.\");\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  saveX509CertificateAuditDataToAuthSession(context,certs[0]);\n  recordX509CertificateAuditDataViaContextEvent(context);\n  X509AuthenticatorConfigModel config=null;\n  if (context.getAuthenticatorConfig() != null && context.getAuthenticatorConfig().getConfig() != null) {\n    config=new X509AuthenticatorConfigModel(context.getAuthenticatorConfig());\n  }\n  if (config == null) {\n    logger.warn(\"[ValidateX509CertificateUsername:authenticate] x509 Client Certificate Authentication configuration is not available.\");\n    context.getEvent().error(Errors.USER_NOT_FOUND);\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",\"Configuration is missing.\");\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  try {\n    CertificateValidator.CertificateValidatorBuilder builder=certificateValidationParameters(context.getSession(),config);\n    CertificateValidator validator=builder.build(certs);\n    validator.checkRevocationStatus().validateTrust().validateKeyUsage().validateExtendedKeyUsage().validateTimestamps().validatePolicy();\n  }\n catch (  Exception e) {\n    logger.error(e.getMessage(),e);\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",e.getMessage());\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  Object userIdentity=getUserIdentityExtractor(config).extractUserIdentity(certs);\n  if (userIdentity == null) {\n    context.getEvent().error(Errors.INVALID_USER_CREDENTIALS);\n    logger.errorf(\"[ValidateX509CertificateUsername:authenticate] Unable to extract user identity from certificate.\");\n    String errorMessage=\"Unable to extract user identity from specified certificate\";\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",errorMessage);\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  UserModel user;\n  try {\n    context.getEvent().detail(Details.USERNAME,userIdentity.toString());\n    context.getAuthenticationSession().setAuthNote(AbstractUsernameFormAuthenticator.ATTEMPTED_USERNAME,userIdentity.toString());\n    user=getUserIdentityToModelMapper(config).find(context,userIdentity);\n  }\n catch (  ModelDuplicateException e) {\n    logger.modelDuplicateException(e);\n    String errorMessage=String.format(\"X509 certificate authentication's failed. Reason: \\\"%s\\\"\",e.getMessage());\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",errorMessage);\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\ncatch (  Exception e) {\n    logger.error(e.getMessage(),e);\n    String errorMessage=String.format(\"X509 certificate authentication's failed. Reason: \\\"%s\\\"\",e.getMessage());\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_request\",errorMessage);\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  if (user == null) {\n    context.getEvent().error(Errors.INVALID_USER_CREDENTIALS);\n    Response challengeResponse=errorResponse(Response.Status.UNAUTHORIZED.getStatusCode(),\"invalid_grant\",\"Invalid user credentials\");\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  String bruteForceError=getDisabledByBruteForceEventError(context,user);\n  if (bruteForceError != null) {\n    context.getEvent().user(user);\n    context.getEvent().error(bruteForceError);\n    Response challengeResponse=errorResponse(Response.Status.BAD_REQUEST.getStatusCode(),\"invalid_grant\",\"Invalid user credentials\");\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  if (!user.isEnabled()) {\n    context.getEvent().user(user);\n    context.getEvent().error(Errors.USER_DISABLED);\n    Response challengeResponse=errorResponse(Response.Status.BAD_REQUEST.getStatusCode(),\"invalid_grant\",\"Account disabled\");\n    context.failure(AuthenticationFlowError.INVALID_USER,challengeResponse);\n    return;\n  }\n  context.setUser(user);\n  context.success();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 584,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 104,
        "startColumnNumber" : 12,
        "endLineNumber" : 104,
        "endColumnNumber" : 84
      },
      "nodeContext" : "user=getUserIdentityToModelMapper(config).find(context,userIdentity);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.keycloak.authentication.authenticators.x509.X509AuthenticatorConfigModel"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 65,
    "startColumnNumber" : 12,
    "endLineNumber" : 65,
    "endColumnNumber" : 18
  }, {
    "charLength" : 6,
    "startLineNumber" : 74,
    "startColumnNumber" : 125,
    "endLineNumber" : 74,
    "endColumnNumber" : 131
  }, {
    "charLength" : 6,
    "startLineNumber" : 90,
    "startColumnNumber" : 55,
    "endLineNumber" : 90,
    "endColumnNumber" : 61
  }, {
    "charLength" : 6,
    "startLineNumber" : 104,
    "startColumnNumber" : 48,
    "endLineNumber" : 104,
    "endColumnNumber" : 54
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 6
  } ]
}