{
  "id" : 493,
  "expression" : "mp3Flags",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "/library/extractor/src/main/java/com/google/android/exoplayer2/extractor/DefaultExtractorsFactory.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "mp3Flags",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 373,
      "startColumnNumber" : 16,
      "endLineNumber" : 373,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 337,
        "startLineNumber" : 373,
        "startColumnNumber" : 16,
        "endLineNumber" : 379,
        "endColumnNumber" : 28
      },
      "nodeContext" : "mp3Flags | (constantBitrateSeekingEnabled ? Mp3Extractor.FLAG_ENABLE_CONSTANT_BITRATE_SEEKING : 0) | (constantBitrateSeekingAlwaysEnabled ? Mp3Extractor.FLAG_ENABLE_CONSTANT_BITRATE_SEEKING_ALWAYS : 0)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 372,
        "startLineNumber" : 372,
        "startColumnNumber" : 12,
        "endLineNumber" : 379,
        "endColumnNumber" : 29
      },
      "nodeContext" : "new Mp3Extractor(mp3Flags | (constantBitrateSeekingEnabled ? Mp3Extractor.FLAG_ENABLE_CONSTANT_BITRATE_SEEKING : 0) | (constantBitrateSeekingAlwaysEnabled ? Mp3Extractor.FLAG_ENABLE_CONSTANT_BITRATE_SEEKING_ALWAYS : 0))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 401,
        "startLineNumber" : 371,
        "startColumnNumber" : 8,
        "endLineNumber" : 379,
        "endColumnNumber" : 30
      },
      "nodeContext" : "extractors.add(new Mp3Extractor(mp3Flags | (constantBitrateSeekingEnabled ? Mp3Extractor.FLAG_ENABLE_CONSTANT_BITRATE_SEEKING : 0) | (constantBitrateSeekingAlwaysEnabled ? Mp3Extractor.FLAG_ENABLE_CONSTANT_BITRATE_SEEKING_ALWAYS : 0)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 402,
        "startLineNumber" : 371,
        "startColumnNumber" : 8,
        "endLineNumber" : 379,
        "endColumnNumber" : 31
      },
      "nodeContext" : "extractors.add(new Mp3Extractor(mp3Flags | (constantBitrateSeekingEnabled ? Mp3Extractor.FLAG_ENABLE_CONSTANT_BITRATE_SEEKING : 0) | (constantBitrateSeekingAlwaysEnabled ? Mp3Extractor.FLAG_ENABLE_CONSTANT_BITRATE_SEEKING_ALWAYS : 0)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 23,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2759,
        "startLineNumber" : 327,
        "startColumnNumber" : 4,
        "endLineNumber" : 404,
        "endColumnNumber" : 5
      },
      "nodeContext" : "switch (fileType) {\ncase FileTypes.AC3:  extractors.add(new Ac3Extractor());\nbreak;\ncase FileTypes.AC4:extractors.add(new Ac4Extractor());\nbreak;\ncase FileTypes.ADTS:extractors.add(new AdtsExtractor(adtsFlags | (constantBitrateSeekingEnabled ? AdtsExtractor.FLAG_ENABLE_CONSTANT_BITRATE_SEEKING : 0) | (constantBitrateSeekingAlwaysEnabled ? AdtsExtractor.FLAG_ENABLE_CONSTANT_BITRATE_SEEKING_ALWAYS : 0)));\nbreak;\ncase FileTypes.AMR:extractors.add(new AmrExtractor(amrFlags | (constantBitrateSeekingEnabled ? AmrExtractor.FLAG_ENABLE_CONSTANT_BITRATE_SEEKING : 0) | (constantBitrateSeekingAlwaysEnabled ? AmrExtractor.FLAG_ENABLE_CONSTANT_BITRATE_SEEKING_ALWAYS : 0)));\nbreak;\ncase FileTypes.FLAC:@Nullable Extractor flacExtractor=FLAC_EXTENSION_LOADER.getExtractor(flacFlags);\nif (flacExtractor != null) {\nextractors.add(flacExtractor);\n}\n else {\nextractors.add(new FlacExtractor(flacFlags));\n}\nbreak;\ncase FileTypes.FLV:extractors.add(new FlvExtractor());\nbreak;\ncase FileTypes.MATROSKA:extractors.add(new MatroskaExtractor(matroskaFlags));\nbreak;\ncase FileTypes.MP3:extractors.add(new Mp3Extractor(mp3Flags | (constantBitrateSeekingEnabled ? Mp3Extractor.FLAG_ENABLE_CONSTANT_BITRATE_SEEKING : 0) | (constantBitrateSeekingAlwaysEnabled ? Mp3Extractor.FLAG_ENABLE_CONSTANT_BITRATE_SEEKING_ALWAYS : 0)));\nbreak;\ncase FileTypes.MP4:extractors.add(new FragmentedMp4Extractor(fragmentedMp4Flags));\nextractors.add(new Mp4Extractor(mp4Flags));\nbreak;\ncase FileTypes.OGG:extractors.add(new OggExtractor());\nbreak;\ncase FileTypes.PS:extractors.add(new PsExtractor());\nbreak;\ncase FileTypes.TS:extractors.add(new TsExtractor(tsMode,tsFlags,tsTimestampSearchBytes));\nbreak;\ncase FileTypes.WAV:extractors.add(new WavExtractor());\nbreak;\ncase FileTypes.JPEG:extractors.add(new JpegExtractor());\nbreak;\ncase FileTypes.WEBVTT:case FileTypes.UNKNOWN:default:break;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 264,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2769,
        "startLineNumber" : 326,
        "startColumnNumber" : 98,
        "endLineNumber" : 405,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\nswitch (fileType) {\ncase FileTypes.AC3:    extractors.add(new Ac3Extractor());\n  break;\ncase FileTypes.AC4:extractors.add(new Ac4Extractor());\nbreak;\ncase FileTypes.ADTS:extractors.add(new AdtsExtractor(adtsFlags | (constantBitrateSeekingEnabled ? AdtsExtractor.FLAG_ENABLE_CONSTANT_BITRATE_SEEKING : 0) | (constantBitrateSeekingAlwaysEnabled ? AdtsExtractor.FLAG_ENABLE_CONSTANT_BITRATE_SEEKING_ALWAYS : 0)));\nbreak;\ncase FileTypes.AMR:extractors.add(new AmrExtractor(amrFlags | (constantBitrateSeekingEnabled ? AmrExtractor.FLAG_ENABLE_CONSTANT_BITRATE_SEEKING : 0) | (constantBitrateSeekingAlwaysEnabled ? AmrExtractor.FLAG_ENABLE_CONSTANT_BITRATE_SEEKING_ALWAYS : 0)));\nbreak;\ncase FileTypes.FLAC:@Nullable Extractor flacExtractor=FLAC_EXTENSION_LOADER.getExtractor(flacFlags);\nif (flacExtractor != null) {\nextractors.add(flacExtractor);\n}\n else {\nextractors.add(new FlacExtractor(flacFlags));\n}\nbreak;\ncase FileTypes.FLV:extractors.add(new FlvExtractor());\nbreak;\ncase FileTypes.MATROSKA:extractors.add(new MatroskaExtractor(matroskaFlags));\nbreak;\ncase FileTypes.MP3:extractors.add(new Mp3Extractor(mp3Flags | (constantBitrateSeekingEnabled ? Mp3Extractor.FLAG_ENABLE_CONSTANT_BITRATE_SEEKING : 0) | (constantBitrateSeekingAlwaysEnabled ? Mp3Extractor.FLAG_ENABLE_CONSTANT_BITRATE_SEEKING_ALWAYS : 0)));\nbreak;\ncase FileTypes.MP4:extractors.add(new FragmentedMp4Extractor(fragmentedMp4Flags));\nextractors.add(new Mp4Extractor(mp4Flags));\nbreak;\ncase FileTypes.OGG:extractors.add(new OggExtractor());\nbreak;\ncase FileTypes.PS:extractors.add(new PsExtractor());\nbreak;\ncase FileTypes.TS:extractors.add(new TsExtractor(tsMode,tsFlags,tsTimestampSearchBytes));\nbreak;\ncase FileTypes.WAV:extractors.add(new WavExtractor());\nbreak;\ncase FileTypes.JPEG:extractors.add(new JpegExtractor());\nbreak;\ncase FileTypes.WEBVTT:case FileTypes.UNKNOWN:default:break;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 265,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2865,
        "startLineNumber" : 326,
        "startColumnNumber" : 2,
        "endLineNumber" : 405,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void addExtractorsForFileType(@FileTypes.Type int fileType,List<Extractor> extractors){\nswitch (fileType) {\ncase FileTypes.AC3:    extractors.add(new Ac3Extractor());\n  break;\ncase FileTypes.AC4:extractors.add(new Ac4Extractor());\nbreak;\ncase FileTypes.ADTS:extractors.add(new AdtsExtractor(adtsFlags | (constantBitrateSeekingEnabled ? AdtsExtractor.FLAG_ENABLE_CONSTANT_BITRATE_SEEKING : 0) | (constantBitrateSeekingAlwaysEnabled ? AdtsExtractor.FLAG_ENABLE_CONSTANT_BITRATE_SEEKING_ALWAYS : 0)));\nbreak;\ncase FileTypes.AMR:extractors.add(new AmrExtractor(amrFlags | (constantBitrateSeekingEnabled ? AmrExtractor.FLAG_ENABLE_CONSTANT_BITRATE_SEEKING : 0) | (constantBitrateSeekingAlwaysEnabled ? AmrExtractor.FLAG_ENABLE_CONSTANT_BITRATE_SEEKING_ALWAYS : 0)));\nbreak;\ncase FileTypes.FLAC:@Nullable Extractor flacExtractor=FLAC_EXTENSION_LOADER.getExtractor(flacFlags);\nif (flacExtractor != null) {\nextractors.add(flacExtractor);\n}\n else {\nextractors.add(new FlacExtractor(flacFlags));\n}\nbreak;\ncase FileTypes.FLV:extractors.add(new FlvExtractor());\nbreak;\ncase FileTypes.MATROSKA:extractors.add(new MatroskaExtractor(matroskaFlags));\nbreak;\ncase FileTypes.MP3:extractors.add(new Mp3Extractor(mp3Flags | (constantBitrateSeekingEnabled ? Mp3Extractor.FLAG_ENABLE_CONSTANT_BITRATE_SEEKING : 0) | (constantBitrateSeekingAlwaysEnabled ? Mp3Extractor.FLAG_ENABLE_CONSTANT_BITRATE_SEEKING_ALWAYS : 0)));\nbreak;\ncase FileTypes.MP4:extractors.add(new FragmentedMp4Extractor(fragmentedMp4Flags));\nextractors.add(new Mp4Extractor(mp4Flags));\nbreak;\ncase FileTypes.OGG:extractors.add(new OggExtractor());\nbreak;\ncase FileTypes.PS:extractors.add(new PsExtractor());\nbreak;\ncase FileTypes.TS:extractors.add(new TsExtractor(tsMode,tsFlags,tsTimestampSearchBytes));\nbreak;\ncase FileTypes.WAV:extractors.add(new WavExtractor());\nbreak;\ncase FileTypes.JPEG:extractors.add(new JpegExtractor());\nbreak;\ncase FileTypes.WEBVTT:case FileTypes.UNKNOWN:default:break;\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 283,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 337,
        "startLineNumber" : 373,
        "startColumnNumber" : 16,
        "endLineNumber" : 379,
        "endColumnNumber" : 28
      },
      "nodeContext" : "mp3Flags | (constantBitrateSeekingEnabled ? Mp3Extractor.FLAG_ENABLE_CONSTANT_BITRATE_SEEKING : 0) | (constantBitrateSeekingAlwaysEnabled ? Mp3Extractor.FLAG_ENABLE_CONSTANT_BITRATE_SEEKING_ALWAYS : 0)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 373,
    "startColumnNumber" : 16,
    "endLineNumber" : 373,
    "endColumnNumber" : 24
  } ],
  "layoutRelationDataList" : [ ]
}