{
  "id" : 492,
  "expression" : "k",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-orc/src/test/java/com/facebook/presto/orc/BenchmarkMapFlatWriter.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "k",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 236,
      "startColumnNumber" : 36,
      "endLineNumber" : 236,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 236,
        "startColumnNumber" : 36,
        "endLineNumber" : 236,
        "endColumnNumber" : 56
      },
      "nodeContext" : "k < distinctKeyCount",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 288,
        "startLineNumber" : 236,
        "startColumnNumber" : 20,
        "endLineNumber" : 241,
        "endColumnNumber" : 21
      },
      "nodeContext" : "for (int k=0; k < distinctKeyCount; k++) {\n  if (random.nextDouble() < keyFrequencies[k]) {\n    keyType.writeLong(mapKeyBuilder,keys.get(k));\n    entryKeyCount++;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 33,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1848,
        "startLineNumber" : 230,
        "startColumnNumber" : 60,
        "endLineNumber" : 267,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  mapBlockBuilder.beginDirectEntry();\n  int entryKeyCount=0;\n  for (int k=0; k < distinctKeyCount; k++) {\n    if (random.nextDouble() < keyFrequencies[k]) {\n      keyType.writeLong(mapKeyBuilder,keys.get(k));\n      entryKeyCount++;\n    }\n  }\n  if (valueType == BigintType.BIGINT) {\n    for (int k=0; k < entryKeyCount; k++) {\n      valueType.writeLong(mapValueBuilder,random.nextLong());\n    }\n  }\n else   if (valueType instanceof ArrayType) {\n    ArrayType arrayValueType=(ArrayType)valueType;\n    Type elementType=arrayValueType.getElementType();\n    ArrayBlockBuilder arrayBlockBuilder=(ArrayBlockBuilder)mapValueBuilder;\n    BlockBuilder arrayElementValueBuilder=arrayBlockBuilder.getElementBlockBuilder();\n    for (int k=0; k < entryKeyCount; k++) {\n      arrayBlockBuilder.beginDirectEntry();\n      for (int c=0; c < childElementValueCount; c++) {\n        elementType.writeLong(arrayElementValueBuilder,random.nextLong());\n      }\n      arrayBlockBuilder.closeEntry();\n    }\n  }\n else {\n    throw new UnsupportedOperationException(\"Unsupported type: \" + type);\n  }\n  mapBlockBuilder.closeEntry();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1892,
        "startLineNumber" : 230,
        "startColumnNumber" : 16,
        "endLineNumber" : 267,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (int j=0; j < positionsPerBlock; j++) {\n  mapBlockBuilder.beginDirectEntry();\n  int entryKeyCount=0;\n  for (int k=0; k < distinctKeyCount; k++) {\n    if (random.nextDouble() < keyFrequencies[k]) {\n      keyType.writeLong(mapKeyBuilder,keys.get(k));\n      entryKeyCount++;\n    }\n  }\n  if (valueType == BigintType.BIGINT) {\n    for (int k=0; k < entryKeyCount; k++) {\n      valueType.writeLong(mapValueBuilder,random.nextLong());\n    }\n  }\n else   if (valueType instanceof ArrayType) {\n    ArrayType arrayValueType=(ArrayType)valueType;\n    Type elementType=arrayValueType.getElementType();\n    ArrayBlockBuilder arrayBlockBuilder=(ArrayBlockBuilder)mapValueBuilder;\n    BlockBuilder arrayElementValueBuilder=arrayBlockBuilder.getElementBlockBuilder();\n    for (int k=0; k < entryKeyCount; k++) {\n      arrayBlockBuilder.beginDirectEntry();\n      for (int c=0; c < childElementValueCount; c++) {\n        elementType.writeLong(arrayElementValueBuilder,random.nextLong());\n      }\n      arrayBlockBuilder.closeEntry();\n    }\n  }\n else {\n    throw new UnsupportedOperationException(\"Unsupported type: \" + type);\n  }\n  mapBlockBuilder.closeEntry();\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 173,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2318,
        "startLineNumber" : 225,
        "startColumnNumber" : 49,
        "endLineNumber" : 271,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  MapBlockBuilder mapBlockBuilder=(MapBlockBuilder)this.type.createBlockBuilder(null,positionsPerBlock);\n  BlockBuilder mapKeyBuilder=mapBlockBuilder.getKeyBlockBuilder();\n  BlockBuilder mapValueBuilder=mapBlockBuilder.getValueBlockBuilder();\n  for (int j=0; j < positionsPerBlock; j++) {\n    mapBlockBuilder.beginDirectEntry();\n    int entryKeyCount=0;\n    for (int k=0; k < distinctKeyCount; k++) {\n      if (random.nextDouble() < keyFrequencies[k]) {\n        keyType.writeLong(mapKeyBuilder,keys.get(k));\n        entryKeyCount++;\n      }\n    }\n    if (valueType == BigintType.BIGINT) {\n      for (int k=0; k < entryKeyCount; k++) {\n        valueType.writeLong(mapValueBuilder,random.nextLong());\n      }\n    }\n else     if (valueType instanceof ArrayType) {\n      ArrayType arrayValueType=(ArrayType)valueType;\n      Type elementType=arrayValueType.getElementType();\n      ArrayBlockBuilder arrayBlockBuilder=(ArrayBlockBuilder)mapValueBuilder;\n      BlockBuilder arrayElementValueBuilder=arrayBlockBuilder.getElementBlockBuilder();\n      for (int k=0; k < entryKeyCount; k++) {\n        arrayBlockBuilder.beginDirectEntry();\n        for (int c=0; c < childElementValueCount; c++) {\n          elementType.writeLong(arrayElementValueBuilder,random.nextLong());\n        }\n        arrayBlockBuilder.closeEntry();\n      }\n    }\n else {\n      throw new UnsupportedOperationException(\"Unsupported type: \" + type);\n    }\n    mapBlockBuilder.closeEntry();\n  }\n  Block block=mapBlockBuilder.build();\n  blocks.add(block);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 218,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2355,
        "startLineNumber" : 225,
        "startColumnNumber" : 12,
        "endLineNumber" : 271,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < blockCount; i++) {\n  MapBlockBuilder mapBlockBuilder=(MapBlockBuilder)this.type.createBlockBuilder(null,positionsPerBlock);\n  BlockBuilder mapKeyBuilder=mapBlockBuilder.getKeyBlockBuilder();\n  BlockBuilder mapValueBuilder=mapBlockBuilder.getValueBlockBuilder();\n  for (int j=0; j < positionsPerBlock; j++) {\n    mapBlockBuilder.beginDirectEntry();\n    int entryKeyCount=0;\n    for (int k=0; k < distinctKeyCount; k++) {\n      if (random.nextDouble() < keyFrequencies[k]) {\n        keyType.writeLong(mapKeyBuilder,keys.get(k));\n        entryKeyCount++;\n      }\n    }\n    if (valueType == BigintType.BIGINT) {\n      for (int k=0; k < entryKeyCount; k++) {\n        valueType.writeLong(mapValueBuilder,random.nextLong());\n      }\n    }\n else     if (valueType instanceof ArrayType) {\n      ArrayType arrayValueType=(ArrayType)valueType;\n      Type elementType=arrayValueType.getElementType();\n      ArrayBlockBuilder arrayBlockBuilder=(ArrayBlockBuilder)mapValueBuilder;\n      BlockBuilder arrayElementValueBuilder=arrayBlockBuilder.getElementBlockBuilder();\n      for (int k=0; k < entryKeyCount; k++) {\n        arrayBlockBuilder.beginDirectEntry();\n        for (int c=0; c < childElementValueCount; c++) {\n          elementType.writeLong(arrayElementValueBuilder,random.nextLong());\n        }\n        arrayBlockBuilder.closeEntry();\n      }\n    }\n else {\n      throw new UnsupportedOperationException(\"Unsupported type: \" + type);\n    }\n    mapBlockBuilder.closeEntry();\n  }\n  Block block=mapBlockBuilder.build();\n  blocks.add(block);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 229,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4584,
        "startLineNumber" : 175,
        "startColumnNumber" : 8,
        "endLineNumber" : 273,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Random random=new Random(SEED);\n  FunctionAndTypeManager typeManager=createTestFunctionAndTypeManager();\n  this.type=(MapType)typeManager.getType(parseTypeSignature(typeSignature));\n  Type keyType=type.getKeyType();\n  Type valueType=type.getValueType();\n  this.temporaryDirectory=createTempDir();\n  this.orcFile=new File(temporaryDirectory,randomUUID().toString());\n  this.orcFile.deleteOnExit();\n  ImmutableList.Builder<Block> blocks=ImmutableList.builder();\n  List<Long> keys=new ArrayList<>(distinctKeyCount);\n  for (int i=0; i < distinctKeyCount; i++) {\n    keys.add((long)i);\n  }\n  Collections.shuffle(keys,random);\n  List<Integer> weights=Arrays.stream(frequencyHistogram.split(\",\")).map(String::trim).map(Integer::valueOf).collect(Collectors.toList());\n  assertEquals(weights.size(),11,\"Number of weights is expected to be 11\");\n  double weightSum=weights.stream().mapToInt(Integer::intValue).sum();\n  double[] keyFrequencies=new double[distinctKeyCount];\n  int offset=0;\n  for (int i=0; i < weights.size(); i++) {\n    double frequency=0.1 * (i + 1);\n    int weight=weights.get(i);\n    int keyCount=(int)(distinctKeyCount * weight / weightSum);\n    if (weight > 0) {\n      keyCount=Math.max(keyCount,1);\n    }\n    if (offset + keyCount >= distinctKeyCount) {\n      keyCount=distinctKeyCount - offset;\n    }\n    for (int j=0; j < keyCount; j++) {\n      keyFrequencies[offset++]=frequency;\n    }\n  }\n  for (int i=0; i < blockCount; i++) {\n    MapBlockBuilder mapBlockBuilder=(MapBlockBuilder)this.type.createBlockBuilder(null,positionsPerBlock);\n    BlockBuilder mapKeyBuilder=mapBlockBuilder.getKeyBlockBuilder();\n    BlockBuilder mapValueBuilder=mapBlockBuilder.getValueBlockBuilder();\n    for (int j=0; j < positionsPerBlock; j++) {\n      mapBlockBuilder.beginDirectEntry();\n      int entryKeyCount=0;\n      for (int k=0; k < distinctKeyCount; k++) {\n        if (random.nextDouble() < keyFrequencies[k]) {\n          keyType.writeLong(mapKeyBuilder,keys.get(k));\n          entryKeyCount++;\n        }\n      }\n      if (valueType == BigintType.BIGINT) {\n        for (int k=0; k < entryKeyCount; k++) {\n          valueType.writeLong(mapValueBuilder,random.nextLong());\n        }\n      }\n else       if (valueType instanceof ArrayType) {\n        ArrayType arrayValueType=(ArrayType)valueType;\n        Type elementType=arrayValueType.getElementType();\n        ArrayBlockBuilder arrayBlockBuilder=(ArrayBlockBuilder)mapValueBuilder;\n        BlockBuilder arrayElementValueBuilder=arrayBlockBuilder.getElementBlockBuilder();\n        for (int k=0; k < entryKeyCount; k++) {\n          arrayBlockBuilder.beginDirectEntry();\n          for (int c=0; c < childElementValueCount; c++) {\n            elementType.writeLong(arrayElementValueBuilder,random.nextLong());\n          }\n          arrayBlockBuilder.closeEntry();\n        }\n      }\n else {\n        throw new UnsupportedOperationException(\"Unsupported type: \" + type);\n      }\n      mapBlockBuilder.closeEntry();\n    }\n    Block block=mapBlockBuilder.build();\n    blocks.add(block);\n  }\n  this.blocks=blocks.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 518,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4663,
        "startLineNumber" : 172,
        "startColumnNumber" : 8,
        "endLineNumber" : 273,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Setup public void setup() throws Exception {\n  Random random=new Random(SEED);\n  FunctionAndTypeManager typeManager=createTestFunctionAndTypeManager();\n  this.type=(MapType)typeManager.getType(parseTypeSignature(typeSignature));\n  Type keyType=type.getKeyType();\n  Type valueType=type.getValueType();\n  this.temporaryDirectory=createTempDir();\n  this.orcFile=new File(temporaryDirectory,randomUUID().toString());\n  this.orcFile.deleteOnExit();\n  ImmutableList.Builder<Block> blocks=ImmutableList.builder();\n  List<Long> keys=new ArrayList<>(distinctKeyCount);\n  for (int i=0; i < distinctKeyCount; i++) {\n    keys.add((long)i);\n  }\n  Collections.shuffle(keys,random);\n  List<Integer> weights=Arrays.stream(frequencyHistogram.split(\",\")).map(String::trim).map(Integer::valueOf).collect(Collectors.toList());\n  assertEquals(weights.size(),11,\"Number of weights is expected to be 11\");\n  double weightSum=weights.stream().mapToInt(Integer::intValue).sum();\n  double[] keyFrequencies=new double[distinctKeyCount];\n  int offset=0;\n  for (int i=0; i < weights.size(); i++) {\n    double frequency=0.1 * (i + 1);\n    int weight=weights.get(i);\n    int keyCount=(int)(distinctKeyCount * weight / weightSum);\n    if (weight > 0) {\n      keyCount=Math.max(keyCount,1);\n    }\n    if (offset + keyCount >= distinctKeyCount) {\n      keyCount=distinctKeyCount - offset;\n    }\n    for (int j=0; j < keyCount; j++) {\n      keyFrequencies[offset++]=frequency;\n    }\n  }\n  for (int i=0; i < blockCount; i++) {\n    MapBlockBuilder mapBlockBuilder=(MapBlockBuilder)this.type.createBlockBuilder(null,positionsPerBlock);\n    BlockBuilder mapKeyBuilder=mapBlockBuilder.getKeyBlockBuilder();\n    BlockBuilder mapValueBuilder=mapBlockBuilder.getValueBlockBuilder();\n    for (int j=0; j < positionsPerBlock; j++) {\n      mapBlockBuilder.beginDirectEntry();\n      int entryKeyCount=0;\n      for (int k=0; k < distinctKeyCount; k++) {\n        if (random.nextDouble() < keyFrequencies[k]) {\n          keyType.writeLong(mapKeyBuilder,keys.get(k));\n          entryKeyCount++;\n        }\n      }\n      if (valueType == BigintType.BIGINT) {\n        for (int k=0; k < entryKeyCount; k++) {\n          valueType.writeLong(mapValueBuilder,random.nextLong());\n        }\n      }\n else       if (valueType instanceof ArrayType) {\n        ArrayType arrayValueType=(ArrayType)valueType;\n        Type elementType=arrayValueType.getElementType();\n        ArrayBlockBuilder arrayBlockBuilder=(ArrayBlockBuilder)mapValueBuilder;\n        BlockBuilder arrayElementValueBuilder=arrayBlockBuilder.getElementBlockBuilder();\n        for (int k=0; k < entryKeyCount; k++) {\n          arrayBlockBuilder.beginDirectEntry();\n          for (int c=0; c < childElementValueCount; c++) {\n            elementType.writeLong(arrayElementValueBuilder,random.nextLong());\n          }\n          arrayBlockBuilder.closeEntry();\n        }\n      }\n else {\n        throw new UnsupportedOperationException(\"Unsupported type: \" + type);\n      }\n      mapBlockBuilder.closeEntry();\n    }\n    Block block=mapBlockBuilder.build();\n    blocks.add(block);\n  }\n  this.blocks=blocks.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 526,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 236,
        "startColumnNumber" : 36,
        "endLineNumber" : 236,
        "endColumnNumber" : 56
      },
      "nodeContext" : "k < distinctKeyCount",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "k",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 237,
      "startColumnNumber" : 65,
      "endLineNumber" : 237,
      "endColumnNumber" : 66
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 237,
        "startColumnNumber" : 50,
        "endLineNumber" : 237,
        "endColumnNumber" : 67
      },
      "nodeContext" : "keyFrequencies[k]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 237,
        "startColumnNumber" : 28,
        "endLineNumber" : 237,
        "endColumnNumber" : 67
      },
      "nodeContext" : "random.nextDouble() < keyFrequencies[k]",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 195,
        "startLineNumber" : 237,
        "startColumnNumber" : 24,
        "endLineNumber" : 240,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (random.nextDouble() < keyFrequencies[k]) {\n  keyType.writeLong(mapKeyBuilder,keys.get(k));\n  entryKeyCount++;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 245,
        "startLineNumber" : 236,
        "startColumnNumber" : 63,
        "endLineNumber" : 241,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (random.nextDouble() < keyFrequencies[k]) {\n    keyType.writeLong(mapKeyBuilder,keys.get(k));\n    entryKeyCount++;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 288,
        "startLineNumber" : 236,
        "startColumnNumber" : 20,
        "endLineNumber" : 241,
        "endColumnNumber" : 21
      },
      "nodeContext" : "for (int k=0; k < distinctKeyCount; k++) {\n  if (random.nextDouble() < keyFrequencies[k]) {\n    keyType.writeLong(mapKeyBuilder,keys.get(k));\n    entryKeyCount++;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 33,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1848,
        "startLineNumber" : 230,
        "startColumnNumber" : 60,
        "endLineNumber" : 267,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  mapBlockBuilder.beginDirectEntry();\n  int entryKeyCount=0;\n  for (int k=0; k < distinctKeyCount; k++) {\n    if (random.nextDouble() < keyFrequencies[k]) {\n      keyType.writeLong(mapKeyBuilder,keys.get(k));\n      entryKeyCount++;\n    }\n  }\n  if (valueType == BigintType.BIGINT) {\n    for (int k=0; k < entryKeyCount; k++) {\n      valueType.writeLong(mapValueBuilder,random.nextLong());\n    }\n  }\n else   if (valueType instanceof ArrayType) {\n    ArrayType arrayValueType=(ArrayType)valueType;\n    Type elementType=arrayValueType.getElementType();\n    ArrayBlockBuilder arrayBlockBuilder=(ArrayBlockBuilder)mapValueBuilder;\n    BlockBuilder arrayElementValueBuilder=arrayBlockBuilder.getElementBlockBuilder();\n    for (int k=0; k < entryKeyCount; k++) {\n      arrayBlockBuilder.beginDirectEntry();\n      for (int c=0; c < childElementValueCount; c++) {\n        elementType.writeLong(arrayElementValueBuilder,random.nextLong());\n      }\n      arrayBlockBuilder.closeEntry();\n    }\n  }\n else {\n    throw new UnsupportedOperationException(\"Unsupported type: \" + type);\n  }\n  mapBlockBuilder.closeEntry();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1892,
        "startLineNumber" : 230,
        "startColumnNumber" : 16,
        "endLineNumber" : 267,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (int j=0; j < positionsPerBlock; j++) {\n  mapBlockBuilder.beginDirectEntry();\n  int entryKeyCount=0;\n  for (int k=0; k < distinctKeyCount; k++) {\n    if (random.nextDouble() < keyFrequencies[k]) {\n      keyType.writeLong(mapKeyBuilder,keys.get(k));\n      entryKeyCount++;\n    }\n  }\n  if (valueType == BigintType.BIGINT) {\n    for (int k=0; k < entryKeyCount; k++) {\n      valueType.writeLong(mapValueBuilder,random.nextLong());\n    }\n  }\n else   if (valueType instanceof ArrayType) {\n    ArrayType arrayValueType=(ArrayType)valueType;\n    Type elementType=arrayValueType.getElementType();\n    ArrayBlockBuilder arrayBlockBuilder=(ArrayBlockBuilder)mapValueBuilder;\n    BlockBuilder arrayElementValueBuilder=arrayBlockBuilder.getElementBlockBuilder();\n    for (int k=0; k < entryKeyCount; k++) {\n      arrayBlockBuilder.beginDirectEntry();\n      for (int c=0; c < childElementValueCount; c++) {\n        elementType.writeLong(arrayElementValueBuilder,random.nextLong());\n      }\n      arrayBlockBuilder.closeEntry();\n    }\n  }\n else {\n    throw new UnsupportedOperationException(\"Unsupported type: \" + type);\n  }\n  mapBlockBuilder.closeEntry();\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 173,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2318,
        "startLineNumber" : 225,
        "startColumnNumber" : 49,
        "endLineNumber" : 271,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  MapBlockBuilder mapBlockBuilder=(MapBlockBuilder)this.type.createBlockBuilder(null,positionsPerBlock);\n  BlockBuilder mapKeyBuilder=mapBlockBuilder.getKeyBlockBuilder();\n  BlockBuilder mapValueBuilder=mapBlockBuilder.getValueBlockBuilder();\n  for (int j=0; j < positionsPerBlock; j++) {\n    mapBlockBuilder.beginDirectEntry();\n    int entryKeyCount=0;\n    for (int k=0; k < distinctKeyCount; k++) {\n      if (random.nextDouble() < keyFrequencies[k]) {\n        keyType.writeLong(mapKeyBuilder,keys.get(k));\n        entryKeyCount++;\n      }\n    }\n    if (valueType == BigintType.BIGINT) {\n      for (int k=0; k < entryKeyCount; k++) {\n        valueType.writeLong(mapValueBuilder,random.nextLong());\n      }\n    }\n else     if (valueType instanceof ArrayType) {\n      ArrayType arrayValueType=(ArrayType)valueType;\n      Type elementType=arrayValueType.getElementType();\n      ArrayBlockBuilder arrayBlockBuilder=(ArrayBlockBuilder)mapValueBuilder;\n      BlockBuilder arrayElementValueBuilder=arrayBlockBuilder.getElementBlockBuilder();\n      for (int k=0; k < entryKeyCount; k++) {\n        arrayBlockBuilder.beginDirectEntry();\n        for (int c=0; c < childElementValueCount; c++) {\n          elementType.writeLong(arrayElementValueBuilder,random.nextLong());\n        }\n        arrayBlockBuilder.closeEntry();\n      }\n    }\n else {\n      throw new UnsupportedOperationException(\"Unsupported type: \" + type);\n    }\n    mapBlockBuilder.closeEntry();\n  }\n  Block block=mapBlockBuilder.build();\n  blocks.add(block);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 218,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2355,
        "startLineNumber" : 225,
        "startColumnNumber" : 12,
        "endLineNumber" : 271,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < blockCount; i++) {\n  MapBlockBuilder mapBlockBuilder=(MapBlockBuilder)this.type.createBlockBuilder(null,positionsPerBlock);\n  BlockBuilder mapKeyBuilder=mapBlockBuilder.getKeyBlockBuilder();\n  BlockBuilder mapValueBuilder=mapBlockBuilder.getValueBlockBuilder();\n  for (int j=0; j < positionsPerBlock; j++) {\n    mapBlockBuilder.beginDirectEntry();\n    int entryKeyCount=0;\n    for (int k=0; k < distinctKeyCount; k++) {\n      if (random.nextDouble() < keyFrequencies[k]) {\n        keyType.writeLong(mapKeyBuilder,keys.get(k));\n        entryKeyCount++;\n      }\n    }\n    if (valueType == BigintType.BIGINT) {\n      for (int k=0; k < entryKeyCount; k++) {\n        valueType.writeLong(mapValueBuilder,random.nextLong());\n      }\n    }\n else     if (valueType instanceof ArrayType) {\n      ArrayType arrayValueType=(ArrayType)valueType;\n      Type elementType=arrayValueType.getElementType();\n      ArrayBlockBuilder arrayBlockBuilder=(ArrayBlockBuilder)mapValueBuilder;\n      BlockBuilder arrayElementValueBuilder=arrayBlockBuilder.getElementBlockBuilder();\n      for (int k=0; k < entryKeyCount; k++) {\n        arrayBlockBuilder.beginDirectEntry();\n        for (int c=0; c < childElementValueCount; c++) {\n          elementType.writeLong(arrayElementValueBuilder,random.nextLong());\n        }\n        arrayBlockBuilder.closeEntry();\n      }\n    }\n else {\n      throw new UnsupportedOperationException(\"Unsupported type: \" + type);\n    }\n    mapBlockBuilder.closeEntry();\n  }\n  Block block=mapBlockBuilder.build();\n  blocks.add(block);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 229,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4584,
        "startLineNumber" : 175,
        "startColumnNumber" : 8,
        "endLineNumber" : 273,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Random random=new Random(SEED);\n  FunctionAndTypeManager typeManager=createTestFunctionAndTypeManager();\n  this.type=(MapType)typeManager.getType(parseTypeSignature(typeSignature));\n  Type keyType=type.getKeyType();\n  Type valueType=type.getValueType();\n  this.temporaryDirectory=createTempDir();\n  this.orcFile=new File(temporaryDirectory,randomUUID().toString());\n  this.orcFile.deleteOnExit();\n  ImmutableList.Builder<Block> blocks=ImmutableList.builder();\n  List<Long> keys=new ArrayList<>(distinctKeyCount);\n  for (int i=0; i < distinctKeyCount; i++) {\n    keys.add((long)i);\n  }\n  Collections.shuffle(keys,random);\n  List<Integer> weights=Arrays.stream(frequencyHistogram.split(\",\")).map(String::trim).map(Integer::valueOf).collect(Collectors.toList());\n  assertEquals(weights.size(),11,\"Number of weights is expected to be 11\");\n  double weightSum=weights.stream().mapToInt(Integer::intValue).sum();\n  double[] keyFrequencies=new double[distinctKeyCount];\n  int offset=0;\n  for (int i=0; i < weights.size(); i++) {\n    double frequency=0.1 * (i + 1);\n    int weight=weights.get(i);\n    int keyCount=(int)(distinctKeyCount * weight / weightSum);\n    if (weight > 0) {\n      keyCount=Math.max(keyCount,1);\n    }\n    if (offset + keyCount >= distinctKeyCount) {\n      keyCount=distinctKeyCount - offset;\n    }\n    for (int j=0; j < keyCount; j++) {\n      keyFrequencies[offset++]=frequency;\n    }\n  }\n  for (int i=0; i < blockCount; i++) {\n    MapBlockBuilder mapBlockBuilder=(MapBlockBuilder)this.type.createBlockBuilder(null,positionsPerBlock);\n    BlockBuilder mapKeyBuilder=mapBlockBuilder.getKeyBlockBuilder();\n    BlockBuilder mapValueBuilder=mapBlockBuilder.getValueBlockBuilder();\n    for (int j=0; j < positionsPerBlock; j++) {\n      mapBlockBuilder.beginDirectEntry();\n      int entryKeyCount=0;\n      for (int k=0; k < distinctKeyCount; k++) {\n        if (random.nextDouble() < keyFrequencies[k]) {\n          keyType.writeLong(mapKeyBuilder,keys.get(k));\n          entryKeyCount++;\n        }\n      }\n      if (valueType == BigintType.BIGINT) {\n        for (int k=0; k < entryKeyCount; k++) {\n          valueType.writeLong(mapValueBuilder,random.nextLong());\n        }\n      }\n else       if (valueType instanceof ArrayType) {\n        ArrayType arrayValueType=(ArrayType)valueType;\n        Type elementType=arrayValueType.getElementType();\n        ArrayBlockBuilder arrayBlockBuilder=(ArrayBlockBuilder)mapValueBuilder;\n        BlockBuilder arrayElementValueBuilder=arrayBlockBuilder.getElementBlockBuilder();\n        for (int k=0; k < entryKeyCount; k++) {\n          arrayBlockBuilder.beginDirectEntry();\n          for (int c=0; c < childElementValueCount; c++) {\n            elementType.writeLong(arrayElementValueBuilder,random.nextLong());\n          }\n          arrayBlockBuilder.closeEntry();\n        }\n      }\n else {\n        throw new UnsupportedOperationException(\"Unsupported type: \" + type);\n      }\n      mapBlockBuilder.closeEntry();\n    }\n    Block block=mapBlockBuilder.build();\n    blocks.add(block);\n  }\n  this.blocks=blocks.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 518,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4663,
        "startLineNumber" : 172,
        "startColumnNumber" : 8,
        "endLineNumber" : 273,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Setup public void setup() throws Exception {\n  Random random=new Random(SEED);\n  FunctionAndTypeManager typeManager=createTestFunctionAndTypeManager();\n  this.type=(MapType)typeManager.getType(parseTypeSignature(typeSignature));\n  Type keyType=type.getKeyType();\n  Type valueType=type.getValueType();\n  this.temporaryDirectory=createTempDir();\n  this.orcFile=new File(temporaryDirectory,randomUUID().toString());\n  this.orcFile.deleteOnExit();\n  ImmutableList.Builder<Block> blocks=ImmutableList.builder();\n  List<Long> keys=new ArrayList<>(distinctKeyCount);\n  for (int i=0; i < distinctKeyCount; i++) {\n    keys.add((long)i);\n  }\n  Collections.shuffle(keys,random);\n  List<Integer> weights=Arrays.stream(frequencyHistogram.split(\",\")).map(String::trim).map(Integer::valueOf).collect(Collectors.toList());\n  assertEquals(weights.size(),11,\"Number of weights is expected to be 11\");\n  double weightSum=weights.stream().mapToInt(Integer::intValue).sum();\n  double[] keyFrequencies=new double[distinctKeyCount];\n  int offset=0;\n  for (int i=0; i < weights.size(); i++) {\n    double frequency=0.1 * (i + 1);\n    int weight=weights.get(i);\n    int keyCount=(int)(distinctKeyCount * weight / weightSum);\n    if (weight > 0) {\n      keyCount=Math.max(keyCount,1);\n    }\n    if (offset + keyCount >= distinctKeyCount) {\n      keyCount=distinctKeyCount - offset;\n    }\n    for (int j=0; j < keyCount; j++) {\n      keyFrequencies[offset++]=frequency;\n    }\n  }\n  for (int i=0; i < blockCount; i++) {\n    MapBlockBuilder mapBlockBuilder=(MapBlockBuilder)this.type.createBlockBuilder(null,positionsPerBlock);\n    BlockBuilder mapKeyBuilder=mapBlockBuilder.getKeyBlockBuilder();\n    BlockBuilder mapValueBuilder=mapBlockBuilder.getValueBlockBuilder();\n    for (int j=0; j < positionsPerBlock; j++) {\n      mapBlockBuilder.beginDirectEntry();\n      int entryKeyCount=0;\n      for (int k=0; k < distinctKeyCount; k++) {\n        if (random.nextDouble() < keyFrequencies[k]) {\n          keyType.writeLong(mapKeyBuilder,keys.get(k));\n          entryKeyCount++;\n        }\n      }\n      if (valueType == BigintType.BIGINT) {\n        for (int k=0; k < entryKeyCount; k++) {\n          valueType.writeLong(mapValueBuilder,random.nextLong());\n        }\n      }\n else       if (valueType instanceof ArrayType) {\n        ArrayType arrayValueType=(ArrayType)valueType;\n        Type elementType=arrayValueType.getElementType();\n        ArrayBlockBuilder arrayBlockBuilder=(ArrayBlockBuilder)mapValueBuilder;\n        BlockBuilder arrayElementValueBuilder=arrayBlockBuilder.getElementBlockBuilder();\n        for (int k=0; k < entryKeyCount; k++) {\n          arrayBlockBuilder.beginDirectEntry();\n          for (int c=0; c < childElementValueCount; c++) {\n            elementType.writeLong(arrayElementValueBuilder,random.nextLong());\n          }\n          arrayBlockBuilder.closeEntry();\n        }\n      }\n else {\n        throw new UnsupportedOperationException(\"Unsupported type: \" + type);\n      }\n      mapBlockBuilder.closeEntry();\n    }\n    Block block=mapBlockBuilder.build();\n    blocks.add(block);\n  }\n  this.blocks=blocks.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 526,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 237,
        "startColumnNumber" : 28,
        "endLineNumber" : 237,
        "endColumnNumber" : 67
      },
      "nodeContext" : "random.nextDouble() < keyFrequencies[k]",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "k",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 238,
      "startColumnNumber" : 70,
      "endLineNumber" : 238,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 238,
        "startColumnNumber" : 61,
        "endLineNumber" : 238,
        "endColumnNumber" : 72
      },
      "nodeContext" : "keys.get(k)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 238,
        "startColumnNumber" : 28,
        "endLineNumber" : 238,
        "endColumnNumber" : 73
      },
      "nodeContext" : "keyType.writeLong(mapKeyBuilder,keys.get(k))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 238,
        "startColumnNumber" : 28,
        "endLineNumber" : 238,
        "endColumnNumber" : 74
      },
      "nodeContext" : "keyType.writeLong(mapKeyBuilder,keys.get(k));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 150,
        "startLineNumber" : 237,
        "startColumnNumber" : 69,
        "endLineNumber" : 240,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  keyType.writeLong(mapKeyBuilder,keys.get(k));\n  entryKeyCount++;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 195,
        "startLineNumber" : 237,
        "startColumnNumber" : 24,
        "endLineNumber" : 240,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (random.nextDouble() < keyFrequencies[k]) {\n  keyType.writeLong(mapKeyBuilder,keys.get(k));\n  entryKeyCount++;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 245,
        "startLineNumber" : 236,
        "startColumnNumber" : 63,
        "endLineNumber" : 241,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (random.nextDouble() < keyFrequencies[k]) {\n    keyType.writeLong(mapKeyBuilder,keys.get(k));\n    entryKeyCount++;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 288,
        "startLineNumber" : 236,
        "startColumnNumber" : 20,
        "endLineNumber" : 241,
        "endColumnNumber" : 21
      },
      "nodeContext" : "for (int k=0; k < distinctKeyCount; k++) {\n  if (random.nextDouble() < keyFrequencies[k]) {\n    keyType.writeLong(mapKeyBuilder,keys.get(k));\n    entryKeyCount++;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 33,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1848,
        "startLineNumber" : 230,
        "startColumnNumber" : 60,
        "endLineNumber" : 267,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  mapBlockBuilder.beginDirectEntry();\n  int entryKeyCount=0;\n  for (int k=0; k < distinctKeyCount; k++) {\n    if (random.nextDouble() < keyFrequencies[k]) {\n      keyType.writeLong(mapKeyBuilder,keys.get(k));\n      entryKeyCount++;\n    }\n  }\n  if (valueType == BigintType.BIGINT) {\n    for (int k=0; k < entryKeyCount; k++) {\n      valueType.writeLong(mapValueBuilder,random.nextLong());\n    }\n  }\n else   if (valueType instanceof ArrayType) {\n    ArrayType arrayValueType=(ArrayType)valueType;\n    Type elementType=arrayValueType.getElementType();\n    ArrayBlockBuilder arrayBlockBuilder=(ArrayBlockBuilder)mapValueBuilder;\n    BlockBuilder arrayElementValueBuilder=arrayBlockBuilder.getElementBlockBuilder();\n    for (int k=0; k < entryKeyCount; k++) {\n      arrayBlockBuilder.beginDirectEntry();\n      for (int c=0; c < childElementValueCount; c++) {\n        elementType.writeLong(arrayElementValueBuilder,random.nextLong());\n      }\n      arrayBlockBuilder.closeEntry();\n    }\n  }\n else {\n    throw new UnsupportedOperationException(\"Unsupported type: \" + type);\n  }\n  mapBlockBuilder.closeEntry();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1892,
        "startLineNumber" : 230,
        "startColumnNumber" : 16,
        "endLineNumber" : 267,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (int j=0; j < positionsPerBlock; j++) {\n  mapBlockBuilder.beginDirectEntry();\n  int entryKeyCount=0;\n  for (int k=0; k < distinctKeyCount; k++) {\n    if (random.nextDouble() < keyFrequencies[k]) {\n      keyType.writeLong(mapKeyBuilder,keys.get(k));\n      entryKeyCount++;\n    }\n  }\n  if (valueType == BigintType.BIGINT) {\n    for (int k=0; k < entryKeyCount; k++) {\n      valueType.writeLong(mapValueBuilder,random.nextLong());\n    }\n  }\n else   if (valueType instanceof ArrayType) {\n    ArrayType arrayValueType=(ArrayType)valueType;\n    Type elementType=arrayValueType.getElementType();\n    ArrayBlockBuilder arrayBlockBuilder=(ArrayBlockBuilder)mapValueBuilder;\n    BlockBuilder arrayElementValueBuilder=arrayBlockBuilder.getElementBlockBuilder();\n    for (int k=0; k < entryKeyCount; k++) {\n      arrayBlockBuilder.beginDirectEntry();\n      for (int c=0; c < childElementValueCount; c++) {\n        elementType.writeLong(arrayElementValueBuilder,random.nextLong());\n      }\n      arrayBlockBuilder.closeEntry();\n    }\n  }\n else {\n    throw new UnsupportedOperationException(\"Unsupported type: \" + type);\n  }\n  mapBlockBuilder.closeEntry();\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 173,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2318,
        "startLineNumber" : 225,
        "startColumnNumber" : 49,
        "endLineNumber" : 271,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  MapBlockBuilder mapBlockBuilder=(MapBlockBuilder)this.type.createBlockBuilder(null,positionsPerBlock);\n  BlockBuilder mapKeyBuilder=mapBlockBuilder.getKeyBlockBuilder();\n  BlockBuilder mapValueBuilder=mapBlockBuilder.getValueBlockBuilder();\n  for (int j=0; j < positionsPerBlock; j++) {\n    mapBlockBuilder.beginDirectEntry();\n    int entryKeyCount=0;\n    for (int k=0; k < distinctKeyCount; k++) {\n      if (random.nextDouble() < keyFrequencies[k]) {\n        keyType.writeLong(mapKeyBuilder,keys.get(k));\n        entryKeyCount++;\n      }\n    }\n    if (valueType == BigintType.BIGINT) {\n      for (int k=0; k < entryKeyCount; k++) {\n        valueType.writeLong(mapValueBuilder,random.nextLong());\n      }\n    }\n else     if (valueType instanceof ArrayType) {\n      ArrayType arrayValueType=(ArrayType)valueType;\n      Type elementType=arrayValueType.getElementType();\n      ArrayBlockBuilder arrayBlockBuilder=(ArrayBlockBuilder)mapValueBuilder;\n      BlockBuilder arrayElementValueBuilder=arrayBlockBuilder.getElementBlockBuilder();\n      for (int k=0; k < entryKeyCount; k++) {\n        arrayBlockBuilder.beginDirectEntry();\n        for (int c=0; c < childElementValueCount; c++) {\n          elementType.writeLong(arrayElementValueBuilder,random.nextLong());\n        }\n        arrayBlockBuilder.closeEntry();\n      }\n    }\n else {\n      throw new UnsupportedOperationException(\"Unsupported type: \" + type);\n    }\n    mapBlockBuilder.closeEntry();\n  }\n  Block block=mapBlockBuilder.build();\n  blocks.add(block);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 218,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2355,
        "startLineNumber" : 225,
        "startColumnNumber" : 12,
        "endLineNumber" : 271,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < blockCount; i++) {\n  MapBlockBuilder mapBlockBuilder=(MapBlockBuilder)this.type.createBlockBuilder(null,positionsPerBlock);\n  BlockBuilder mapKeyBuilder=mapBlockBuilder.getKeyBlockBuilder();\n  BlockBuilder mapValueBuilder=mapBlockBuilder.getValueBlockBuilder();\n  for (int j=0; j < positionsPerBlock; j++) {\n    mapBlockBuilder.beginDirectEntry();\n    int entryKeyCount=0;\n    for (int k=0; k < distinctKeyCount; k++) {\n      if (random.nextDouble() < keyFrequencies[k]) {\n        keyType.writeLong(mapKeyBuilder,keys.get(k));\n        entryKeyCount++;\n      }\n    }\n    if (valueType == BigintType.BIGINT) {\n      for (int k=0; k < entryKeyCount; k++) {\n        valueType.writeLong(mapValueBuilder,random.nextLong());\n      }\n    }\n else     if (valueType instanceof ArrayType) {\n      ArrayType arrayValueType=(ArrayType)valueType;\n      Type elementType=arrayValueType.getElementType();\n      ArrayBlockBuilder arrayBlockBuilder=(ArrayBlockBuilder)mapValueBuilder;\n      BlockBuilder arrayElementValueBuilder=arrayBlockBuilder.getElementBlockBuilder();\n      for (int k=0; k < entryKeyCount; k++) {\n        arrayBlockBuilder.beginDirectEntry();\n        for (int c=0; c < childElementValueCount; c++) {\n          elementType.writeLong(arrayElementValueBuilder,random.nextLong());\n        }\n        arrayBlockBuilder.closeEntry();\n      }\n    }\n else {\n      throw new UnsupportedOperationException(\"Unsupported type: \" + type);\n    }\n    mapBlockBuilder.closeEntry();\n  }\n  Block block=mapBlockBuilder.build();\n  blocks.add(block);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 229,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4584,
        "startLineNumber" : 175,
        "startColumnNumber" : 8,
        "endLineNumber" : 273,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Random random=new Random(SEED);\n  FunctionAndTypeManager typeManager=createTestFunctionAndTypeManager();\n  this.type=(MapType)typeManager.getType(parseTypeSignature(typeSignature));\n  Type keyType=type.getKeyType();\n  Type valueType=type.getValueType();\n  this.temporaryDirectory=createTempDir();\n  this.orcFile=new File(temporaryDirectory,randomUUID().toString());\n  this.orcFile.deleteOnExit();\n  ImmutableList.Builder<Block> blocks=ImmutableList.builder();\n  List<Long> keys=new ArrayList<>(distinctKeyCount);\n  for (int i=0; i < distinctKeyCount; i++) {\n    keys.add((long)i);\n  }\n  Collections.shuffle(keys,random);\n  List<Integer> weights=Arrays.stream(frequencyHistogram.split(\",\")).map(String::trim).map(Integer::valueOf).collect(Collectors.toList());\n  assertEquals(weights.size(),11,\"Number of weights is expected to be 11\");\n  double weightSum=weights.stream().mapToInt(Integer::intValue).sum();\n  double[] keyFrequencies=new double[distinctKeyCount];\n  int offset=0;\n  for (int i=0; i < weights.size(); i++) {\n    double frequency=0.1 * (i + 1);\n    int weight=weights.get(i);\n    int keyCount=(int)(distinctKeyCount * weight / weightSum);\n    if (weight > 0) {\n      keyCount=Math.max(keyCount,1);\n    }\n    if (offset + keyCount >= distinctKeyCount) {\n      keyCount=distinctKeyCount - offset;\n    }\n    for (int j=0; j < keyCount; j++) {\n      keyFrequencies[offset++]=frequency;\n    }\n  }\n  for (int i=0; i < blockCount; i++) {\n    MapBlockBuilder mapBlockBuilder=(MapBlockBuilder)this.type.createBlockBuilder(null,positionsPerBlock);\n    BlockBuilder mapKeyBuilder=mapBlockBuilder.getKeyBlockBuilder();\n    BlockBuilder mapValueBuilder=mapBlockBuilder.getValueBlockBuilder();\n    for (int j=0; j < positionsPerBlock; j++) {\n      mapBlockBuilder.beginDirectEntry();\n      int entryKeyCount=0;\n      for (int k=0; k < distinctKeyCount; k++) {\n        if (random.nextDouble() < keyFrequencies[k]) {\n          keyType.writeLong(mapKeyBuilder,keys.get(k));\n          entryKeyCount++;\n        }\n      }\n      if (valueType == BigintType.BIGINT) {\n        for (int k=0; k < entryKeyCount; k++) {\n          valueType.writeLong(mapValueBuilder,random.nextLong());\n        }\n      }\n else       if (valueType instanceof ArrayType) {\n        ArrayType arrayValueType=(ArrayType)valueType;\n        Type elementType=arrayValueType.getElementType();\n        ArrayBlockBuilder arrayBlockBuilder=(ArrayBlockBuilder)mapValueBuilder;\n        BlockBuilder arrayElementValueBuilder=arrayBlockBuilder.getElementBlockBuilder();\n        for (int k=0; k < entryKeyCount; k++) {\n          arrayBlockBuilder.beginDirectEntry();\n          for (int c=0; c < childElementValueCount; c++) {\n            elementType.writeLong(arrayElementValueBuilder,random.nextLong());\n          }\n          arrayBlockBuilder.closeEntry();\n        }\n      }\n else {\n        throw new UnsupportedOperationException(\"Unsupported type: \" + type);\n      }\n      mapBlockBuilder.closeEntry();\n    }\n    Block block=mapBlockBuilder.build();\n    blocks.add(block);\n  }\n  this.blocks=blocks.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 518,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4663,
        "startLineNumber" : 172,
        "startColumnNumber" : 8,
        "endLineNumber" : 273,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Setup public void setup() throws Exception {\n  Random random=new Random(SEED);\n  FunctionAndTypeManager typeManager=createTestFunctionAndTypeManager();\n  this.type=(MapType)typeManager.getType(parseTypeSignature(typeSignature));\n  Type keyType=type.getKeyType();\n  Type valueType=type.getValueType();\n  this.temporaryDirectory=createTempDir();\n  this.orcFile=new File(temporaryDirectory,randomUUID().toString());\n  this.orcFile.deleteOnExit();\n  ImmutableList.Builder<Block> blocks=ImmutableList.builder();\n  List<Long> keys=new ArrayList<>(distinctKeyCount);\n  for (int i=0; i < distinctKeyCount; i++) {\n    keys.add((long)i);\n  }\n  Collections.shuffle(keys,random);\n  List<Integer> weights=Arrays.stream(frequencyHistogram.split(\",\")).map(String::trim).map(Integer::valueOf).collect(Collectors.toList());\n  assertEquals(weights.size(),11,\"Number of weights is expected to be 11\");\n  double weightSum=weights.stream().mapToInt(Integer::intValue).sum();\n  double[] keyFrequencies=new double[distinctKeyCount];\n  int offset=0;\n  for (int i=0; i < weights.size(); i++) {\n    double frequency=0.1 * (i + 1);\n    int weight=weights.get(i);\n    int keyCount=(int)(distinctKeyCount * weight / weightSum);\n    if (weight > 0) {\n      keyCount=Math.max(keyCount,1);\n    }\n    if (offset + keyCount >= distinctKeyCount) {\n      keyCount=distinctKeyCount - offset;\n    }\n    for (int j=0; j < keyCount; j++) {\n      keyFrequencies[offset++]=frequency;\n    }\n  }\n  for (int i=0; i < blockCount; i++) {\n    MapBlockBuilder mapBlockBuilder=(MapBlockBuilder)this.type.createBlockBuilder(null,positionsPerBlock);\n    BlockBuilder mapKeyBuilder=mapBlockBuilder.getKeyBlockBuilder();\n    BlockBuilder mapValueBuilder=mapBlockBuilder.getValueBlockBuilder();\n    for (int j=0; j < positionsPerBlock; j++) {\n      mapBlockBuilder.beginDirectEntry();\n      int entryKeyCount=0;\n      for (int k=0; k < distinctKeyCount; k++) {\n        if (random.nextDouble() < keyFrequencies[k]) {\n          keyType.writeLong(mapKeyBuilder,keys.get(k));\n          entryKeyCount++;\n        }\n      }\n      if (valueType == BigintType.BIGINT) {\n        for (int k=0; k < entryKeyCount; k++) {\n          valueType.writeLong(mapValueBuilder,random.nextLong());\n        }\n      }\n else       if (valueType instanceof ArrayType) {\n        ArrayType arrayValueType=(ArrayType)valueType;\n        Type elementType=arrayValueType.getElementType();\n        ArrayBlockBuilder arrayBlockBuilder=(ArrayBlockBuilder)mapValueBuilder;\n        BlockBuilder arrayElementValueBuilder=arrayBlockBuilder.getElementBlockBuilder();\n        for (int k=0; k < entryKeyCount; k++) {\n          arrayBlockBuilder.beginDirectEntry();\n          for (int c=0; c < childElementValueCount; c++) {\n            elementType.writeLong(arrayElementValueBuilder,random.nextLong());\n          }\n          arrayBlockBuilder.closeEntry();\n        }\n      }\n else {\n        throw new UnsupportedOperationException(\"Unsupported type: \" + type);\n      }\n      mapBlockBuilder.closeEntry();\n    }\n    Block block=mapBlockBuilder.build();\n    blocks.add(block);\n  }\n  this.blocks=blocks.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 526,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 238,
        "startColumnNumber" : 28,
        "endLineNumber" : 238,
        "endColumnNumber" : 74
      },
      "nodeContext" : "keyType.writeLong(mapKeyBuilder,keys.get(k));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "k",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 245,
      "startColumnNumber" : 40,
      "endLineNumber" : 245,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 245,
        "startColumnNumber" : 40,
        "endLineNumber" : 245,
        "endColumnNumber" : 57
      },
      "nodeContext" : "k < entryKeyCount",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 154,
        "startLineNumber" : 245,
        "startColumnNumber" : 24,
        "endLineNumber" : 247,
        "endColumnNumber" : 25
      },
      "nodeContext" : "for (int k=0; k < entryKeyCount; k++) {\n  valueType.writeLong(mapValueBuilder,random.nextLong());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 204,
        "startLineNumber" : 244,
        "startColumnNumber" : 56,
        "endLineNumber" : 248,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  for (int k=0; k < entryKeyCount; k++) {\n    valueType.writeLong(mapValueBuilder,random.nextLong());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1268,
        "startLineNumber" : 244,
        "startColumnNumber" : 20,
        "endLineNumber" : 264,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (valueType == BigintType.BIGINT) {\n  for (int k=0; k < entryKeyCount; k++) {\n    valueType.writeLong(mapValueBuilder,random.nextLong());\n  }\n}\n else if (valueType instanceof ArrayType) {\n  ArrayType arrayValueType=(ArrayType)valueType;\n  Type elementType=arrayValueType.getElementType();\n  ArrayBlockBuilder arrayBlockBuilder=(ArrayBlockBuilder)mapValueBuilder;\n  BlockBuilder arrayElementValueBuilder=arrayBlockBuilder.getElementBlockBuilder();\n  for (int k=0; k < entryKeyCount; k++) {\n    arrayBlockBuilder.beginDirectEntry();\n    for (int c=0; c < childElementValueCount; c++) {\n      elementType.writeLong(arrayElementValueBuilder,random.nextLong());\n    }\n    arrayBlockBuilder.closeEntry();\n  }\n}\n else {\n  throw new UnsupportedOperationException(\"Unsupported type: \" + type);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 115,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1848,
        "startLineNumber" : 230,
        "startColumnNumber" : 60,
        "endLineNumber" : 267,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  mapBlockBuilder.beginDirectEntry();\n  int entryKeyCount=0;\n  for (int k=0; k < distinctKeyCount; k++) {\n    if (random.nextDouble() < keyFrequencies[k]) {\n      keyType.writeLong(mapKeyBuilder,keys.get(k));\n      entryKeyCount++;\n    }\n  }\n  if (valueType == BigintType.BIGINT) {\n    for (int k=0; k < entryKeyCount; k++) {\n      valueType.writeLong(mapValueBuilder,random.nextLong());\n    }\n  }\n else   if (valueType instanceof ArrayType) {\n    ArrayType arrayValueType=(ArrayType)valueType;\n    Type elementType=arrayValueType.getElementType();\n    ArrayBlockBuilder arrayBlockBuilder=(ArrayBlockBuilder)mapValueBuilder;\n    BlockBuilder arrayElementValueBuilder=arrayBlockBuilder.getElementBlockBuilder();\n    for (int k=0; k < entryKeyCount; k++) {\n      arrayBlockBuilder.beginDirectEntry();\n      for (int c=0; c < childElementValueCount; c++) {\n        elementType.writeLong(arrayElementValueBuilder,random.nextLong());\n      }\n      arrayBlockBuilder.closeEntry();\n    }\n  }\n else {\n    throw new UnsupportedOperationException(\"Unsupported type: \" + type);\n  }\n  mapBlockBuilder.closeEntry();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1892,
        "startLineNumber" : 230,
        "startColumnNumber" : 16,
        "endLineNumber" : 267,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (int j=0; j < positionsPerBlock; j++) {\n  mapBlockBuilder.beginDirectEntry();\n  int entryKeyCount=0;\n  for (int k=0; k < distinctKeyCount; k++) {\n    if (random.nextDouble() < keyFrequencies[k]) {\n      keyType.writeLong(mapKeyBuilder,keys.get(k));\n      entryKeyCount++;\n    }\n  }\n  if (valueType == BigintType.BIGINT) {\n    for (int k=0; k < entryKeyCount; k++) {\n      valueType.writeLong(mapValueBuilder,random.nextLong());\n    }\n  }\n else   if (valueType instanceof ArrayType) {\n    ArrayType arrayValueType=(ArrayType)valueType;\n    Type elementType=arrayValueType.getElementType();\n    ArrayBlockBuilder arrayBlockBuilder=(ArrayBlockBuilder)mapValueBuilder;\n    BlockBuilder arrayElementValueBuilder=arrayBlockBuilder.getElementBlockBuilder();\n    for (int k=0; k < entryKeyCount; k++) {\n      arrayBlockBuilder.beginDirectEntry();\n      for (int c=0; c < childElementValueCount; c++) {\n        elementType.writeLong(arrayElementValueBuilder,random.nextLong());\n      }\n      arrayBlockBuilder.closeEntry();\n    }\n  }\n else {\n    throw new UnsupportedOperationException(\"Unsupported type: \" + type);\n  }\n  mapBlockBuilder.closeEntry();\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 173,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2318,
        "startLineNumber" : 225,
        "startColumnNumber" : 49,
        "endLineNumber" : 271,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  MapBlockBuilder mapBlockBuilder=(MapBlockBuilder)this.type.createBlockBuilder(null,positionsPerBlock);\n  BlockBuilder mapKeyBuilder=mapBlockBuilder.getKeyBlockBuilder();\n  BlockBuilder mapValueBuilder=mapBlockBuilder.getValueBlockBuilder();\n  for (int j=0; j < positionsPerBlock; j++) {\n    mapBlockBuilder.beginDirectEntry();\n    int entryKeyCount=0;\n    for (int k=0; k < distinctKeyCount; k++) {\n      if (random.nextDouble() < keyFrequencies[k]) {\n        keyType.writeLong(mapKeyBuilder,keys.get(k));\n        entryKeyCount++;\n      }\n    }\n    if (valueType == BigintType.BIGINT) {\n      for (int k=0; k < entryKeyCount; k++) {\n        valueType.writeLong(mapValueBuilder,random.nextLong());\n      }\n    }\n else     if (valueType instanceof ArrayType) {\n      ArrayType arrayValueType=(ArrayType)valueType;\n      Type elementType=arrayValueType.getElementType();\n      ArrayBlockBuilder arrayBlockBuilder=(ArrayBlockBuilder)mapValueBuilder;\n      BlockBuilder arrayElementValueBuilder=arrayBlockBuilder.getElementBlockBuilder();\n      for (int k=0; k < entryKeyCount; k++) {\n        arrayBlockBuilder.beginDirectEntry();\n        for (int c=0; c < childElementValueCount; c++) {\n          elementType.writeLong(arrayElementValueBuilder,random.nextLong());\n        }\n        arrayBlockBuilder.closeEntry();\n      }\n    }\n else {\n      throw new UnsupportedOperationException(\"Unsupported type: \" + type);\n    }\n    mapBlockBuilder.closeEntry();\n  }\n  Block block=mapBlockBuilder.build();\n  blocks.add(block);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 218,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2355,
        "startLineNumber" : 225,
        "startColumnNumber" : 12,
        "endLineNumber" : 271,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < blockCount; i++) {\n  MapBlockBuilder mapBlockBuilder=(MapBlockBuilder)this.type.createBlockBuilder(null,positionsPerBlock);\n  BlockBuilder mapKeyBuilder=mapBlockBuilder.getKeyBlockBuilder();\n  BlockBuilder mapValueBuilder=mapBlockBuilder.getValueBlockBuilder();\n  for (int j=0; j < positionsPerBlock; j++) {\n    mapBlockBuilder.beginDirectEntry();\n    int entryKeyCount=0;\n    for (int k=0; k < distinctKeyCount; k++) {\n      if (random.nextDouble() < keyFrequencies[k]) {\n        keyType.writeLong(mapKeyBuilder,keys.get(k));\n        entryKeyCount++;\n      }\n    }\n    if (valueType == BigintType.BIGINT) {\n      for (int k=0; k < entryKeyCount; k++) {\n        valueType.writeLong(mapValueBuilder,random.nextLong());\n      }\n    }\n else     if (valueType instanceof ArrayType) {\n      ArrayType arrayValueType=(ArrayType)valueType;\n      Type elementType=arrayValueType.getElementType();\n      ArrayBlockBuilder arrayBlockBuilder=(ArrayBlockBuilder)mapValueBuilder;\n      BlockBuilder arrayElementValueBuilder=arrayBlockBuilder.getElementBlockBuilder();\n      for (int k=0; k < entryKeyCount; k++) {\n        arrayBlockBuilder.beginDirectEntry();\n        for (int c=0; c < childElementValueCount; c++) {\n          elementType.writeLong(arrayElementValueBuilder,random.nextLong());\n        }\n        arrayBlockBuilder.closeEntry();\n      }\n    }\n else {\n      throw new UnsupportedOperationException(\"Unsupported type: \" + type);\n    }\n    mapBlockBuilder.closeEntry();\n  }\n  Block block=mapBlockBuilder.build();\n  blocks.add(block);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 229,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4584,
        "startLineNumber" : 175,
        "startColumnNumber" : 8,
        "endLineNumber" : 273,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Random random=new Random(SEED);\n  FunctionAndTypeManager typeManager=createTestFunctionAndTypeManager();\n  this.type=(MapType)typeManager.getType(parseTypeSignature(typeSignature));\n  Type keyType=type.getKeyType();\n  Type valueType=type.getValueType();\n  this.temporaryDirectory=createTempDir();\n  this.orcFile=new File(temporaryDirectory,randomUUID().toString());\n  this.orcFile.deleteOnExit();\n  ImmutableList.Builder<Block> blocks=ImmutableList.builder();\n  List<Long> keys=new ArrayList<>(distinctKeyCount);\n  for (int i=0; i < distinctKeyCount; i++) {\n    keys.add((long)i);\n  }\n  Collections.shuffle(keys,random);\n  List<Integer> weights=Arrays.stream(frequencyHistogram.split(\",\")).map(String::trim).map(Integer::valueOf).collect(Collectors.toList());\n  assertEquals(weights.size(),11,\"Number of weights is expected to be 11\");\n  double weightSum=weights.stream().mapToInt(Integer::intValue).sum();\n  double[] keyFrequencies=new double[distinctKeyCount];\n  int offset=0;\n  for (int i=0; i < weights.size(); i++) {\n    double frequency=0.1 * (i + 1);\n    int weight=weights.get(i);\n    int keyCount=(int)(distinctKeyCount * weight / weightSum);\n    if (weight > 0) {\n      keyCount=Math.max(keyCount,1);\n    }\n    if (offset + keyCount >= distinctKeyCount) {\n      keyCount=distinctKeyCount - offset;\n    }\n    for (int j=0; j < keyCount; j++) {\n      keyFrequencies[offset++]=frequency;\n    }\n  }\n  for (int i=0; i < blockCount; i++) {\n    MapBlockBuilder mapBlockBuilder=(MapBlockBuilder)this.type.createBlockBuilder(null,positionsPerBlock);\n    BlockBuilder mapKeyBuilder=mapBlockBuilder.getKeyBlockBuilder();\n    BlockBuilder mapValueBuilder=mapBlockBuilder.getValueBlockBuilder();\n    for (int j=0; j < positionsPerBlock; j++) {\n      mapBlockBuilder.beginDirectEntry();\n      int entryKeyCount=0;\n      for (int k=0; k < distinctKeyCount; k++) {\n        if (random.nextDouble() < keyFrequencies[k]) {\n          keyType.writeLong(mapKeyBuilder,keys.get(k));\n          entryKeyCount++;\n        }\n      }\n      if (valueType == BigintType.BIGINT) {\n        for (int k=0; k < entryKeyCount; k++) {\n          valueType.writeLong(mapValueBuilder,random.nextLong());\n        }\n      }\n else       if (valueType instanceof ArrayType) {\n        ArrayType arrayValueType=(ArrayType)valueType;\n        Type elementType=arrayValueType.getElementType();\n        ArrayBlockBuilder arrayBlockBuilder=(ArrayBlockBuilder)mapValueBuilder;\n        BlockBuilder arrayElementValueBuilder=arrayBlockBuilder.getElementBlockBuilder();\n        for (int k=0; k < entryKeyCount; k++) {\n          arrayBlockBuilder.beginDirectEntry();\n          for (int c=0; c < childElementValueCount; c++) {\n            elementType.writeLong(arrayElementValueBuilder,random.nextLong());\n          }\n          arrayBlockBuilder.closeEntry();\n        }\n      }\n else {\n        throw new UnsupportedOperationException(\"Unsupported type: \" + type);\n      }\n      mapBlockBuilder.closeEntry();\n    }\n    Block block=mapBlockBuilder.build();\n    blocks.add(block);\n  }\n  this.blocks=blocks.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 518,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4663,
        "startLineNumber" : 172,
        "startColumnNumber" : 8,
        "endLineNumber" : 273,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Setup public void setup() throws Exception {\n  Random random=new Random(SEED);\n  FunctionAndTypeManager typeManager=createTestFunctionAndTypeManager();\n  this.type=(MapType)typeManager.getType(parseTypeSignature(typeSignature));\n  Type keyType=type.getKeyType();\n  Type valueType=type.getValueType();\n  this.temporaryDirectory=createTempDir();\n  this.orcFile=new File(temporaryDirectory,randomUUID().toString());\n  this.orcFile.deleteOnExit();\n  ImmutableList.Builder<Block> blocks=ImmutableList.builder();\n  List<Long> keys=new ArrayList<>(distinctKeyCount);\n  for (int i=0; i < distinctKeyCount; i++) {\n    keys.add((long)i);\n  }\n  Collections.shuffle(keys,random);\n  List<Integer> weights=Arrays.stream(frequencyHistogram.split(\",\")).map(String::trim).map(Integer::valueOf).collect(Collectors.toList());\n  assertEquals(weights.size(),11,\"Number of weights is expected to be 11\");\n  double weightSum=weights.stream().mapToInt(Integer::intValue).sum();\n  double[] keyFrequencies=new double[distinctKeyCount];\n  int offset=0;\n  for (int i=0; i < weights.size(); i++) {\n    double frequency=0.1 * (i + 1);\n    int weight=weights.get(i);\n    int keyCount=(int)(distinctKeyCount * weight / weightSum);\n    if (weight > 0) {\n      keyCount=Math.max(keyCount,1);\n    }\n    if (offset + keyCount >= distinctKeyCount) {\n      keyCount=distinctKeyCount - offset;\n    }\n    for (int j=0; j < keyCount; j++) {\n      keyFrequencies[offset++]=frequency;\n    }\n  }\n  for (int i=0; i < blockCount; i++) {\n    MapBlockBuilder mapBlockBuilder=(MapBlockBuilder)this.type.createBlockBuilder(null,positionsPerBlock);\n    BlockBuilder mapKeyBuilder=mapBlockBuilder.getKeyBlockBuilder();\n    BlockBuilder mapValueBuilder=mapBlockBuilder.getValueBlockBuilder();\n    for (int j=0; j < positionsPerBlock; j++) {\n      mapBlockBuilder.beginDirectEntry();\n      int entryKeyCount=0;\n      for (int k=0; k < distinctKeyCount; k++) {\n        if (random.nextDouble() < keyFrequencies[k]) {\n          keyType.writeLong(mapKeyBuilder,keys.get(k));\n          entryKeyCount++;\n        }\n      }\n      if (valueType == BigintType.BIGINT) {\n        for (int k=0; k < entryKeyCount; k++) {\n          valueType.writeLong(mapValueBuilder,random.nextLong());\n        }\n      }\n else       if (valueType instanceof ArrayType) {\n        ArrayType arrayValueType=(ArrayType)valueType;\n        Type elementType=arrayValueType.getElementType();\n        ArrayBlockBuilder arrayBlockBuilder=(ArrayBlockBuilder)mapValueBuilder;\n        BlockBuilder arrayElementValueBuilder=arrayBlockBuilder.getElementBlockBuilder();\n        for (int k=0; k < entryKeyCount; k++) {\n          arrayBlockBuilder.beginDirectEntry();\n          for (int c=0; c < childElementValueCount; c++) {\n            elementType.writeLong(arrayElementValueBuilder,random.nextLong());\n          }\n          arrayBlockBuilder.closeEntry();\n        }\n      }\n else {\n        throw new UnsupportedOperationException(\"Unsupported type: \" + type);\n      }\n      mapBlockBuilder.closeEntry();\n    }\n    Block block=mapBlockBuilder.build();\n    blocks.add(block);\n  }\n  this.blocks=blocks.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 526,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 245,
        "startColumnNumber" : 40,
        "endLineNumber" : 245,
        "endColumnNumber" : 57
      },
      "nodeContext" : "k < entryKeyCount",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "k",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 254,
      "startColumnNumber" : 40,
      "endLineNumber" : 254,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 254,
        "startColumnNumber" : 40,
        "endLineNumber" : 254,
        "endColumnNumber" : 57
      },
      "nodeContext" : "k < entryKeyCount",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 408,
        "startLineNumber" : 254,
        "startColumnNumber" : 24,
        "endLineNumber" : 260,
        "endColumnNumber" : 25
      },
      "nodeContext" : "for (int k=0; k < entryKeyCount; k++) {\n  arrayBlockBuilder.beginDirectEntry();\n  for (int c=0; c < childElementValueCount; c++) {\n    elementType.writeLong(arrayElementValueBuilder,random.nextLong());\n  }\n  arrayBlockBuilder.closeEntry();\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 40,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 819,
        "startLineNumber" : 249,
        "startColumnNumber" : 61,
        "endLineNumber" : 261,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  ArrayType arrayValueType=(ArrayType)valueType;\n  Type elementType=arrayValueType.getElementType();\n  ArrayBlockBuilder arrayBlockBuilder=(ArrayBlockBuilder)mapValueBuilder;\n  BlockBuilder arrayElementValueBuilder=arrayBlockBuilder.getElementBlockBuilder();\n  for (int k=0; k < entryKeyCount; k++) {\n    arrayBlockBuilder.beginDirectEntry();\n    for (int c=0; c < childElementValueCount; c++) {\n      elementType.writeLong(arrayElementValueBuilder,random.nextLong());\n    }\n    arrayBlockBuilder.closeEntry();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 75,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1001,
        "startLineNumber" : 249,
        "startColumnNumber" : 25,
        "endLineNumber" : 264,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (valueType instanceof ArrayType) {\n  ArrayType arrayValueType=(ArrayType)valueType;\n  Type elementType=arrayValueType.getElementType();\n  ArrayBlockBuilder arrayBlockBuilder=(ArrayBlockBuilder)mapValueBuilder;\n  BlockBuilder arrayElementValueBuilder=arrayBlockBuilder.getElementBlockBuilder();\n  for (int k=0; k < entryKeyCount; k++) {\n    arrayBlockBuilder.beginDirectEntry();\n    for (int c=0; c < childElementValueCount; c++) {\n      elementType.writeLong(arrayElementValueBuilder,random.nextLong());\n    }\n    arrayBlockBuilder.closeEntry();\n  }\n}\n else {\n  throw new UnsupportedOperationException(\"Unsupported type: \" + type);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 88,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1268,
        "startLineNumber" : 244,
        "startColumnNumber" : 20,
        "endLineNumber" : 264,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (valueType == BigintType.BIGINT) {\n  for (int k=0; k < entryKeyCount; k++) {\n    valueType.writeLong(mapValueBuilder,random.nextLong());\n  }\n}\n else if (valueType instanceof ArrayType) {\n  ArrayType arrayValueType=(ArrayType)valueType;\n  Type elementType=arrayValueType.getElementType();\n  ArrayBlockBuilder arrayBlockBuilder=(ArrayBlockBuilder)mapValueBuilder;\n  BlockBuilder arrayElementValueBuilder=arrayBlockBuilder.getElementBlockBuilder();\n  for (int k=0; k < entryKeyCount; k++) {\n    arrayBlockBuilder.beginDirectEntry();\n    for (int c=0; c < childElementValueCount; c++) {\n      elementType.writeLong(arrayElementValueBuilder,random.nextLong());\n    }\n    arrayBlockBuilder.closeEntry();\n  }\n}\n else {\n  throw new UnsupportedOperationException(\"Unsupported type: \" + type);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 115,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1848,
        "startLineNumber" : 230,
        "startColumnNumber" : 60,
        "endLineNumber" : 267,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  mapBlockBuilder.beginDirectEntry();\n  int entryKeyCount=0;\n  for (int k=0; k < distinctKeyCount; k++) {\n    if (random.nextDouble() < keyFrequencies[k]) {\n      keyType.writeLong(mapKeyBuilder,keys.get(k));\n      entryKeyCount++;\n    }\n  }\n  if (valueType == BigintType.BIGINT) {\n    for (int k=0; k < entryKeyCount; k++) {\n      valueType.writeLong(mapValueBuilder,random.nextLong());\n    }\n  }\n else   if (valueType instanceof ArrayType) {\n    ArrayType arrayValueType=(ArrayType)valueType;\n    Type elementType=arrayValueType.getElementType();\n    ArrayBlockBuilder arrayBlockBuilder=(ArrayBlockBuilder)mapValueBuilder;\n    BlockBuilder arrayElementValueBuilder=arrayBlockBuilder.getElementBlockBuilder();\n    for (int k=0; k < entryKeyCount; k++) {\n      arrayBlockBuilder.beginDirectEntry();\n      for (int c=0; c < childElementValueCount; c++) {\n        elementType.writeLong(arrayElementValueBuilder,random.nextLong());\n      }\n      arrayBlockBuilder.closeEntry();\n    }\n  }\n else {\n    throw new UnsupportedOperationException(\"Unsupported type: \" + type);\n  }\n  mapBlockBuilder.closeEntry();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1892,
        "startLineNumber" : 230,
        "startColumnNumber" : 16,
        "endLineNumber" : 267,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (int j=0; j < positionsPerBlock; j++) {\n  mapBlockBuilder.beginDirectEntry();\n  int entryKeyCount=0;\n  for (int k=0; k < distinctKeyCount; k++) {\n    if (random.nextDouble() < keyFrequencies[k]) {\n      keyType.writeLong(mapKeyBuilder,keys.get(k));\n      entryKeyCount++;\n    }\n  }\n  if (valueType == BigintType.BIGINT) {\n    for (int k=0; k < entryKeyCount; k++) {\n      valueType.writeLong(mapValueBuilder,random.nextLong());\n    }\n  }\n else   if (valueType instanceof ArrayType) {\n    ArrayType arrayValueType=(ArrayType)valueType;\n    Type elementType=arrayValueType.getElementType();\n    ArrayBlockBuilder arrayBlockBuilder=(ArrayBlockBuilder)mapValueBuilder;\n    BlockBuilder arrayElementValueBuilder=arrayBlockBuilder.getElementBlockBuilder();\n    for (int k=0; k < entryKeyCount; k++) {\n      arrayBlockBuilder.beginDirectEntry();\n      for (int c=0; c < childElementValueCount; c++) {\n        elementType.writeLong(arrayElementValueBuilder,random.nextLong());\n      }\n      arrayBlockBuilder.closeEntry();\n    }\n  }\n else {\n    throw new UnsupportedOperationException(\"Unsupported type: \" + type);\n  }\n  mapBlockBuilder.closeEntry();\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 173,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2318,
        "startLineNumber" : 225,
        "startColumnNumber" : 49,
        "endLineNumber" : 271,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  MapBlockBuilder mapBlockBuilder=(MapBlockBuilder)this.type.createBlockBuilder(null,positionsPerBlock);\n  BlockBuilder mapKeyBuilder=mapBlockBuilder.getKeyBlockBuilder();\n  BlockBuilder mapValueBuilder=mapBlockBuilder.getValueBlockBuilder();\n  for (int j=0; j < positionsPerBlock; j++) {\n    mapBlockBuilder.beginDirectEntry();\n    int entryKeyCount=0;\n    for (int k=0; k < distinctKeyCount; k++) {\n      if (random.nextDouble() < keyFrequencies[k]) {\n        keyType.writeLong(mapKeyBuilder,keys.get(k));\n        entryKeyCount++;\n      }\n    }\n    if (valueType == BigintType.BIGINT) {\n      for (int k=0; k < entryKeyCount; k++) {\n        valueType.writeLong(mapValueBuilder,random.nextLong());\n      }\n    }\n else     if (valueType instanceof ArrayType) {\n      ArrayType arrayValueType=(ArrayType)valueType;\n      Type elementType=arrayValueType.getElementType();\n      ArrayBlockBuilder arrayBlockBuilder=(ArrayBlockBuilder)mapValueBuilder;\n      BlockBuilder arrayElementValueBuilder=arrayBlockBuilder.getElementBlockBuilder();\n      for (int k=0; k < entryKeyCount; k++) {\n        arrayBlockBuilder.beginDirectEntry();\n        for (int c=0; c < childElementValueCount; c++) {\n          elementType.writeLong(arrayElementValueBuilder,random.nextLong());\n        }\n        arrayBlockBuilder.closeEntry();\n      }\n    }\n else {\n      throw new UnsupportedOperationException(\"Unsupported type: \" + type);\n    }\n    mapBlockBuilder.closeEntry();\n  }\n  Block block=mapBlockBuilder.build();\n  blocks.add(block);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 218,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2355,
        "startLineNumber" : 225,
        "startColumnNumber" : 12,
        "endLineNumber" : 271,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < blockCount; i++) {\n  MapBlockBuilder mapBlockBuilder=(MapBlockBuilder)this.type.createBlockBuilder(null,positionsPerBlock);\n  BlockBuilder mapKeyBuilder=mapBlockBuilder.getKeyBlockBuilder();\n  BlockBuilder mapValueBuilder=mapBlockBuilder.getValueBlockBuilder();\n  for (int j=0; j < positionsPerBlock; j++) {\n    mapBlockBuilder.beginDirectEntry();\n    int entryKeyCount=0;\n    for (int k=0; k < distinctKeyCount; k++) {\n      if (random.nextDouble() < keyFrequencies[k]) {\n        keyType.writeLong(mapKeyBuilder,keys.get(k));\n        entryKeyCount++;\n      }\n    }\n    if (valueType == BigintType.BIGINT) {\n      for (int k=0; k < entryKeyCount; k++) {\n        valueType.writeLong(mapValueBuilder,random.nextLong());\n      }\n    }\n else     if (valueType instanceof ArrayType) {\n      ArrayType arrayValueType=(ArrayType)valueType;\n      Type elementType=arrayValueType.getElementType();\n      ArrayBlockBuilder arrayBlockBuilder=(ArrayBlockBuilder)mapValueBuilder;\n      BlockBuilder arrayElementValueBuilder=arrayBlockBuilder.getElementBlockBuilder();\n      for (int k=0; k < entryKeyCount; k++) {\n        arrayBlockBuilder.beginDirectEntry();\n        for (int c=0; c < childElementValueCount; c++) {\n          elementType.writeLong(arrayElementValueBuilder,random.nextLong());\n        }\n        arrayBlockBuilder.closeEntry();\n      }\n    }\n else {\n      throw new UnsupportedOperationException(\"Unsupported type: \" + type);\n    }\n    mapBlockBuilder.closeEntry();\n  }\n  Block block=mapBlockBuilder.build();\n  blocks.add(block);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 229,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4584,
        "startLineNumber" : 175,
        "startColumnNumber" : 8,
        "endLineNumber" : 273,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Random random=new Random(SEED);\n  FunctionAndTypeManager typeManager=createTestFunctionAndTypeManager();\n  this.type=(MapType)typeManager.getType(parseTypeSignature(typeSignature));\n  Type keyType=type.getKeyType();\n  Type valueType=type.getValueType();\n  this.temporaryDirectory=createTempDir();\n  this.orcFile=new File(temporaryDirectory,randomUUID().toString());\n  this.orcFile.deleteOnExit();\n  ImmutableList.Builder<Block> blocks=ImmutableList.builder();\n  List<Long> keys=new ArrayList<>(distinctKeyCount);\n  for (int i=0; i < distinctKeyCount; i++) {\n    keys.add((long)i);\n  }\n  Collections.shuffle(keys,random);\n  List<Integer> weights=Arrays.stream(frequencyHistogram.split(\",\")).map(String::trim).map(Integer::valueOf).collect(Collectors.toList());\n  assertEquals(weights.size(),11,\"Number of weights is expected to be 11\");\n  double weightSum=weights.stream().mapToInt(Integer::intValue).sum();\n  double[] keyFrequencies=new double[distinctKeyCount];\n  int offset=0;\n  for (int i=0; i < weights.size(); i++) {\n    double frequency=0.1 * (i + 1);\n    int weight=weights.get(i);\n    int keyCount=(int)(distinctKeyCount * weight / weightSum);\n    if (weight > 0) {\n      keyCount=Math.max(keyCount,1);\n    }\n    if (offset + keyCount >= distinctKeyCount) {\n      keyCount=distinctKeyCount - offset;\n    }\n    for (int j=0; j < keyCount; j++) {\n      keyFrequencies[offset++]=frequency;\n    }\n  }\n  for (int i=0; i < blockCount; i++) {\n    MapBlockBuilder mapBlockBuilder=(MapBlockBuilder)this.type.createBlockBuilder(null,positionsPerBlock);\n    BlockBuilder mapKeyBuilder=mapBlockBuilder.getKeyBlockBuilder();\n    BlockBuilder mapValueBuilder=mapBlockBuilder.getValueBlockBuilder();\n    for (int j=0; j < positionsPerBlock; j++) {\n      mapBlockBuilder.beginDirectEntry();\n      int entryKeyCount=0;\n      for (int k=0; k < distinctKeyCount; k++) {\n        if (random.nextDouble() < keyFrequencies[k]) {\n          keyType.writeLong(mapKeyBuilder,keys.get(k));\n          entryKeyCount++;\n        }\n      }\n      if (valueType == BigintType.BIGINT) {\n        for (int k=0; k < entryKeyCount; k++) {\n          valueType.writeLong(mapValueBuilder,random.nextLong());\n        }\n      }\n else       if (valueType instanceof ArrayType) {\n        ArrayType arrayValueType=(ArrayType)valueType;\n        Type elementType=arrayValueType.getElementType();\n        ArrayBlockBuilder arrayBlockBuilder=(ArrayBlockBuilder)mapValueBuilder;\n        BlockBuilder arrayElementValueBuilder=arrayBlockBuilder.getElementBlockBuilder();\n        for (int k=0; k < entryKeyCount; k++) {\n          arrayBlockBuilder.beginDirectEntry();\n          for (int c=0; c < childElementValueCount; c++) {\n            elementType.writeLong(arrayElementValueBuilder,random.nextLong());\n          }\n          arrayBlockBuilder.closeEntry();\n        }\n      }\n else {\n        throw new UnsupportedOperationException(\"Unsupported type: \" + type);\n      }\n      mapBlockBuilder.closeEntry();\n    }\n    Block block=mapBlockBuilder.build();\n    blocks.add(block);\n  }\n  this.blocks=blocks.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 518,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4663,
        "startLineNumber" : 172,
        "startColumnNumber" : 8,
        "endLineNumber" : 273,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Setup public void setup() throws Exception {\n  Random random=new Random(SEED);\n  FunctionAndTypeManager typeManager=createTestFunctionAndTypeManager();\n  this.type=(MapType)typeManager.getType(parseTypeSignature(typeSignature));\n  Type keyType=type.getKeyType();\n  Type valueType=type.getValueType();\n  this.temporaryDirectory=createTempDir();\n  this.orcFile=new File(temporaryDirectory,randomUUID().toString());\n  this.orcFile.deleteOnExit();\n  ImmutableList.Builder<Block> blocks=ImmutableList.builder();\n  List<Long> keys=new ArrayList<>(distinctKeyCount);\n  for (int i=0; i < distinctKeyCount; i++) {\n    keys.add((long)i);\n  }\n  Collections.shuffle(keys,random);\n  List<Integer> weights=Arrays.stream(frequencyHistogram.split(\",\")).map(String::trim).map(Integer::valueOf).collect(Collectors.toList());\n  assertEquals(weights.size(),11,\"Number of weights is expected to be 11\");\n  double weightSum=weights.stream().mapToInt(Integer::intValue).sum();\n  double[] keyFrequencies=new double[distinctKeyCount];\n  int offset=0;\n  for (int i=0; i < weights.size(); i++) {\n    double frequency=0.1 * (i + 1);\n    int weight=weights.get(i);\n    int keyCount=(int)(distinctKeyCount * weight / weightSum);\n    if (weight > 0) {\n      keyCount=Math.max(keyCount,1);\n    }\n    if (offset + keyCount >= distinctKeyCount) {\n      keyCount=distinctKeyCount - offset;\n    }\n    for (int j=0; j < keyCount; j++) {\n      keyFrequencies[offset++]=frequency;\n    }\n  }\n  for (int i=0; i < blockCount; i++) {\n    MapBlockBuilder mapBlockBuilder=(MapBlockBuilder)this.type.createBlockBuilder(null,positionsPerBlock);\n    BlockBuilder mapKeyBuilder=mapBlockBuilder.getKeyBlockBuilder();\n    BlockBuilder mapValueBuilder=mapBlockBuilder.getValueBlockBuilder();\n    for (int j=0; j < positionsPerBlock; j++) {\n      mapBlockBuilder.beginDirectEntry();\n      int entryKeyCount=0;\n      for (int k=0; k < distinctKeyCount; k++) {\n        if (random.nextDouble() < keyFrequencies[k]) {\n          keyType.writeLong(mapKeyBuilder,keys.get(k));\n          entryKeyCount++;\n        }\n      }\n      if (valueType == BigintType.BIGINT) {\n        for (int k=0; k < entryKeyCount; k++) {\n          valueType.writeLong(mapValueBuilder,random.nextLong());\n        }\n      }\n else       if (valueType instanceof ArrayType) {\n        ArrayType arrayValueType=(ArrayType)valueType;\n        Type elementType=arrayValueType.getElementType();\n        ArrayBlockBuilder arrayBlockBuilder=(ArrayBlockBuilder)mapValueBuilder;\n        BlockBuilder arrayElementValueBuilder=arrayBlockBuilder.getElementBlockBuilder();\n        for (int k=0; k < entryKeyCount; k++) {\n          arrayBlockBuilder.beginDirectEntry();\n          for (int c=0; c < childElementValueCount; c++) {\n            elementType.writeLong(arrayElementValueBuilder,random.nextLong());\n          }\n          arrayBlockBuilder.closeEntry();\n        }\n      }\n else {\n        throw new UnsupportedOperationException(\"Unsupported type: \" + type);\n      }\n      mapBlockBuilder.closeEntry();\n    }\n    Block block=mapBlockBuilder.build();\n    blocks.add(block);\n  }\n  this.blocks=blocks.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 526,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 254,
        "startColumnNumber" : 40,
        "endLineNumber" : 254,
        "endColumnNumber" : 57
      },
      "nodeContext" : "k < entryKeyCount",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 236,
    "startColumnNumber" : 36,
    "endLineNumber" : 236,
    "endColumnNumber" : 37
  }, {
    "charLength" : 1,
    "startLineNumber" : 237,
    "startColumnNumber" : 65,
    "endLineNumber" : 237,
    "endColumnNumber" : 66
  }, {
    "charLength" : 1,
    "startLineNumber" : 238,
    "startColumnNumber" : 70,
    "endLineNumber" : 238,
    "endColumnNumber" : 71
  }, {
    "charLength" : 1,
    "startLineNumber" : 245,
    "startColumnNumber" : 40,
    "endLineNumber" : 245,
    "endColumnNumber" : 41
  }, {
    "charLength" : 1,
    "startLineNumber" : 254,
    "startColumnNumber" : 40,
    "endLineNumber" : 254,
    "endColumnNumber" : 41
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 4
  } ]
}