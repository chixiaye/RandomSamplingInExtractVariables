{
  "id" : 494,
  "expression" : "strPattern.charAt(delimIndex - 1) == StrUtil.C_BACKSLASH",
  "projectName" : "dromara@hutool",
  "commitID" : "c99b48a4c4a6121eaad38ca9706953d7ce7c3a77",
  "filePath" : "/hutool-core/src/main/java/cn/hutool/core/text/StrFormatter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "strPattern.charAt(delimIndex - 1) == StrUtil.C_BACKSLASH",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 56,
      "startLineNumber" : 50,
      "startColumnNumber" : 25,
      "endLineNumber" : 50,
      "endColumnNumber" : 81
    },
    "astNodeNumber" : 10,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 50,
        "startColumnNumber" : 7,
        "endLineNumber" : 50,
        "endColumnNumber" : 81
      },
      "nodeContext" : "delimIndex > 0 && strPattern.charAt(delimIndex - 1) == StrUtil.C_BACKSLASH",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 752,
        "startLineNumber" : 50,
        "startColumnNumber" : 3,
        "endLineNumber" : 67,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (delimIndex > 0 && strPattern.charAt(delimIndex - 1) == StrUtil.C_BACKSLASH) {\n  if (delimIndex > 1 && strPattern.charAt(delimIndex - 2) == StrUtil.C_BACKSLASH) {\n    sbuf.append(strPattern,handledPosition,delimIndex - 1);\n    sbuf.append(StrUtil.utf8Str(argArray[argIndex]));\n    handledPosition=delimIndex + 2;\n  }\n else {\n    argIndex--;\n    sbuf.append(strPattern,handledPosition,delimIndex - 1);\n    sbuf.append(StrUtil.C_DELIM_START);\n    handledPosition=delimIndex + 1;\n  }\n}\n else {\n  sbuf.append(strPattern,handledPosition,delimIndex);\n  sbuf.append(StrUtil.utf8Str(argArray[argIndex]));\n  handledPosition=delimIndex + 2;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 107,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1107,
        "startLineNumber" : 38,
        "startColumnNumber" : 65,
        "endLineNumber" : 68,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  delimIndex=strPattern.indexOf(StrUtil.EMPTY_JSON,handledPosition);\n  if (delimIndex == -1) {\n    if (handledPosition == 0) {\n      return strPattern;\n    }\n    sbuf.append(strPattern,handledPosition,strPatternLength);\n    return sbuf.toString();\n  }\n  if (delimIndex > 0 && strPattern.charAt(delimIndex - 1) == StrUtil.C_BACKSLASH) {\n    if (delimIndex > 1 && strPattern.charAt(delimIndex - 2) == StrUtil.C_BACKSLASH) {\n      sbuf.append(strPattern,handledPosition,delimIndex - 1);\n      sbuf.append(StrUtil.utf8Str(argArray[argIndex]));\n      handledPosition=delimIndex + 2;\n    }\n else {\n      argIndex--;\n      sbuf.append(strPattern,handledPosition,delimIndex - 1);\n      sbuf.append(StrUtil.C_DELIM_START);\n      handledPosition=delimIndex + 1;\n    }\n  }\n else {\n    sbuf.append(strPattern,handledPosition,delimIndex);\n    sbuf.append(StrUtil.utf8Str(argArray[argIndex]));\n    handledPosition=delimIndex + 2;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 142,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1170,
        "startLineNumber" : 38,
        "startColumnNumber" : 2,
        "endLineNumber" : 68,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int argIndex=0; argIndex < argArray.length; argIndex++) {\n  delimIndex=strPattern.indexOf(StrUtil.EMPTY_JSON,handledPosition);\n  if (delimIndex == -1) {\n    if (handledPosition == 0) {\n      return strPattern;\n    }\n    sbuf.append(strPattern,handledPosition,strPatternLength);\n    return sbuf.toString();\n  }\n  if (delimIndex > 0 && strPattern.charAt(delimIndex - 1) == StrUtil.C_BACKSLASH) {\n    if (delimIndex > 1 && strPattern.charAt(delimIndex - 2) == StrUtil.C_BACKSLASH) {\n      sbuf.append(strPattern,handledPosition,delimIndex - 1);\n      sbuf.append(StrUtil.utf8Str(argArray[argIndex]));\n      handledPosition=delimIndex + 2;\n    }\n else {\n      argIndex--;\n      sbuf.append(strPattern,handledPosition,delimIndex - 1);\n      sbuf.append(StrUtil.C_DELIM_START);\n      handledPosition=delimIndex + 1;\n    }\n  }\n else {\n    sbuf.append(strPattern,handledPosition,delimIndex);\n    sbuf.append(StrUtil.utf8Str(argArray[argIndex]));\n    handledPosition=delimIndex + 2;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 155,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1670,
        "startLineNumber" : 27,
        "startColumnNumber" : 80,
        "endLineNumber" : 75,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (StrUtil.isBlank(strPattern) || ArrayUtil.isEmpty(argArray)) {\n    return strPattern;\n  }\n  final int strPatternLength=strPattern.length();\n  StringBuilder sbuf=new StringBuilder(strPatternLength + 50);\n  int handledPosition=0;\n  int delimIndex;\n  for (int argIndex=0; argIndex < argArray.length; argIndex++) {\n    delimIndex=strPattern.indexOf(StrUtil.EMPTY_JSON,handledPosition);\n    if (delimIndex == -1) {\n      if (handledPosition == 0) {\n        return strPattern;\n      }\n      sbuf.append(strPattern,handledPosition,strPatternLength);\n      return sbuf.toString();\n    }\n    if (delimIndex > 0 && strPattern.charAt(delimIndex - 1) == StrUtil.C_BACKSLASH) {\n      if (delimIndex > 1 && strPattern.charAt(delimIndex - 2) == StrUtil.C_BACKSLASH) {\n        sbuf.append(strPattern,handledPosition,delimIndex - 1);\n        sbuf.append(StrUtil.utf8Str(argArray[argIndex]));\n        handledPosition=delimIndex + 2;\n      }\n else {\n        argIndex--;\n        sbuf.append(strPattern,handledPosition,delimIndex - 1);\n        sbuf.append(StrUtil.C_DELIM_START);\n        handledPosition=delimIndex + 1;\n      }\n    }\n else {\n      sbuf.append(strPattern,handledPosition,delimIndex);\n      sbuf.append(StrUtil.utf8Str(argArray[argIndex]));\n      handledPosition=delimIndex + 2;\n    }\n  }\n  sbuf.append(strPattern,handledPosition,strPattern.length());\n  return sbuf.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 210,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2184,
        "startLineNumber" : 14,
        "startColumnNumber" : 1,
        "endLineNumber" : 75,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * 格式化字符串<br> 此方法只是简单将占位符 {} 按照顺序替换为参数<br> 如果想输出 {} 使用 \\\\转义 { 即可，如果想输出 {} 之前的 \\ 使用双转义符 \\\\\\\\ 即可<br> 例：<br> 通常使用：format(\"this is {} for {}\", \"a\", \"b\") =》 this is a for b<br> 转义{}： format(\"this is \\\\{} for {}\", \"a\", \"b\") =》 this is \\{} for a<br> 转义\\： format(\"this is \\\\\\\\{} for {}\", \"a\", \"b\") =》 this is \\a for b<br>\n * @param strPattern 字符串模板\n * @param argArray 参数列表\n * @return 结果\n */\npublic static String format(final String strPattern,final Object... argArray){\n  if (StrUtil.isBlank(strPattern) || ArrayUtil.isEmpty(argArray)) {\n    return strPattern;\n  }\n  final int strPatternLength=strPattern.length();\n  StringBuilder sbuf=new StringBuilder(strPatternLength + 50);\n  int handledPosition=0;\n  int delimIndex;\n  for (int argIndex=0; argIndex < argArray.length; argIndex++) {\n    delimIndex=strPattern.indexOf(StrUtil.EMPTY_JSON,handledPosition);\n    if (delimIndex == -1) {\n      if (handledPosition == 0) {\n        return strPattern;\n      }\n      sbuf.append(strPattern,handledPosition,strPatternLength);\n      return sbuf.toString();\n    }\n    if (delimIndex > 0 && strPattern.charAt(delimIndex - 1) == StrUtil.C_BACKSLASH) {\n      if (delimIndex > 1 && strPattern.charAt(delimIndex - 2) == StrUtil.C_BACKSLASH) {\n        sbuf.append(strPattern,handledPosition,delimIndex - 1);\n        sbuf.append(StrUtil.utf8Str(argArray[argIndex]));\n        handledPosition=delimIndex + 2;\n      }\n else {\n        argIndex--;\n        sbuf.append(strPattern,handledPosition,delimIndex - 1);\n        sbuf.append(StrUtil.C_DELIM_START);\n        handledPosition=delimIndex + 1;\n      }\n    }\n else {\n      sbuf.append(strPattern,handledPosition,delimIndex);\n      sbuf.append(StrUtil.utf8Str(argArray[argIndex]));\n      handledPosition=delimIndex + 2;\n    }\n  }\n  sbuf.append(strPattern,handledPosition,strPattern.length());\n  return sbuf.toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 227,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 50,
        "startColumnNumber" : 7,
        "endLineNumber" : 50,
        "endColumnNumber" : 81
      },
      "nodeContext" : "delimIndex > 0 && strPattern.charAt(delimIndex - 1) == StrUtil.C_BACKSLASH",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 9,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 56,
    "startLineNumber" : 50,
    "startColumnNumber" : 25,
    "endLineNumber" : 50,
    "endColumnNumber" : 81
  } ],
  "layoutRelationDataList" : [ ]
}