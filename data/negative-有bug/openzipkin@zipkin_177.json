{
  "id" : 177,
  "expression" : "BOOL",
  "projectName" : "openzipkin@zipkin",
  "commitID" : "f02a993656f506277ca83737ddf494ed45fde4b3",
  "filePath" : "/zipkin/src/main/java/zipkin/internal/JsonCodec.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "BOOL",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 164,
      "startColumnNumber" : 13,
      "endLineNumber" : 164,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 164,
        "startColumnNumber" : 8,
        "endLineNumber" : 164,
        "endColumnNumber" : 18
      },
      "nodeContext" : "case BOOL:",
      "nodeType" : "SwitchCase",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 265,
        "startLineNumber" : 163,
        "startColumnNumber" : 6,
        "endLineNumber" : 170,
        "endColumnNumber" : 7
      },
      "nodeContext" : "switch (type) {\ncase BOOL:  return result.build();\ncase STRING:return result.value(string.getBytes(UTF_8)).build();\ncase BYTES:return result.value(ByteString.decodeBase64(string).toByteArray()).build();\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 34,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2285,
        "startLineNumber" : 122,
        "startColumnNumber" : 75,
        "endLineNumber" : 189,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  BinaryAnnotation.Builder result=BinaryAnnotation.builder();\n  Double number=null;\n  String string=null;\n  BinaryAnnotation.Type type=BinaryAnnotation.Type.STRING;\n  reader.beginObject();\n  while (reader.hasNext()) {\nswitch (reader.nextName()) {\ncase \"key\":      result.key(reader.nextString());\n    break;\ncase \"value\":switch (reader.peek()) {\ncase BOOLEAN:    type=BinaryAnnotation.Type.BOOL;\n  result.value(reader.nextBoolean() ? new byte[]{1} : new byte[]{0});\nbreak;\ncase STRING:string=reader.nextString();\nbreak;\ncase NUMBER:number=reader.nextDouble();\nbreak;\ndefault:throw new JsonDataException(\"Expected value to be a boolean, string or number but was \" + reader.peek() + \" at path \"+ reader.getPath());\n}\nbreak;\ncase \"type\":type=BinaryAnnotation.Type.valueOf(reader.nextString());\nbreak;\ncase \"endpoint\":result.endpoint(ENDPOINT_ADAPTER.fromJson(reader));\nbreak;\ndefault:reader.skipValue();\n}\n}\nreader.endObject();\nresult.type(type);\nswitch (type) {\ncase BOOL:return result.build();\ncase STRING:return result.value(string.getBytes(UTF_8)).build();\ncase BYTES:return result.value(ByteString.decodeBase64(string).toByteArray()).build();\n}\nBuffer buffer=new Buffer();\nswitch (type) {\ncase I16:buffer.writeShort(number.shortValue());\nbreak;\ncase I32:buffer.writeInt(number.intValue());\nbreak;\ncase I64:buffer.writeLong(number.longValue());\nbreak;\ncase DOUBLE:buffer.writeLong(Double.doubleToRawLongBits(number));\nbreak;\ndefault:throw new AssertionError(\"BinaryAnnotationType \" + type + \" was added, but not handled\");\n}\nreturn result.value(buffer.readByteArray()).build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 270,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.AnonymousClassDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2370,
        "startLineNumber" : 121,
        "startColumnNumber" : 4,
        "endLineNumber" : 189,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public BinaryAnnotation fromJson(JsonReader reader) throws IOException {\n  BinaryAnnotation.Builder result=BinaryAnnotation.builder();\n  Double number=null;\n  String string=null;\n  BinaryAnnotation.Type type=BinaryAnnotation.Type.STRING;\n  reader.beginObject();\n  while (reader.hasNext()) {\nswitch (reader.nextName()) {\ncase \"key\":      result.key(reader.nextString());\n    break;\ncase \"value\":switch (reader.peek()) {\ncase BOOLEAN:    type=BinaryAnnotation.Type.BOOL;\n  result.value(reader.nextBoolean() ? new byte[]{1} : new byte[]{0});\nbreak;\ncase STRING:string=reader.nextString();\nbreak;\ncase NUMBER:number=reader.nextDouble();\nbreak;\ndefault:throw new JsonDataException(\"Expected value to be a boolean, string or number but was \" + reader.peek() + \" at path \"+ reader.getPath());\n}\nbreak;\ncase \"type\":type=BinaryAnnotation.Type.valueOf(reader.nextString());\nbreak;\ncase \"endpoint\":result.endpoint(ENDPOINT_ADAPTER.fromJson(reader));\nbreak;\ndefault:reader.skipValue();\n}\n}\nreader.endObject();\nresult.type(type);\nswitch (type) {\ncase BOOL:return result.build();\ncase STRING:return result.value(string.getBytes(UTF_8)).build();\ncase BYTES:return result.value(ByteString.decodeBase64(string).toByteArray()).build();\n}\nBuffer buffer=new Buffer();\nswitch (type) {\ncase I16:buffer.writeShort(number.shortValue());\nbreak;\ncase I32:buffer.writeInt(number.intValue());\nbreak;\ncase I64:buffer.writeLong(number.longValue());\nbreak;\ncase DOUBLE:buffer.writeLong(Double.doubleToRawLongBits(number));\nbreak;\ndefault:throw new AssertionError(\"BinaryAnnotationType \" + type + \" was added, but not handled\");\n}\nreturn result.value(buffer.readByteArray()).build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 283,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 164,
        "startColumnNumber" : 8,
        "endLineNumber" : 164,
        "endColumnNumber" : 18
      },
      "nodeContext" : "case BOOL:",
      "nodeType" : "SwitchCase",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "zipkin.BinaryAnnotation.Type"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 164,
    "startColumnNumber" : 13,
    "endLineNumber" : 164,
    "endColumnNumber" : 17
  } ],
  "layoutRelationDataList" : [ ]
}