{
  "id" : 283,
  "expression" : "new HttpInvokerServiceExporter(){\n  @Override protected InputStream decorateInputStream(  HttpServletRequest request,  InputStream is) throws IOException {\n    if (\"gzip\".equals(request.getHeader(\"Compression\"))) {\n      return new GZIPInputStream(is);\n    }\n else {\n      return is;\n    }\n  }\n  @Override protected OutputStream decorateOutputStream(  HttpServletRequest request,  HttpServletResponse response,  OutputStream os) throws IOException {\n    if (\"gzip\".equals(request.getHeader(\"Compression\"))) {\n      return new GZIPOutputStream(os);\n    }\n else {\n      return os;\n    }\n  }\n}\n",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-web/src/test/java/org/springframework/remoting/httpinvoker/HttpInvokerTests.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new HttpInvokerServiceExporter(){\n  @Override protected InputStream decorateInputStream(  HttpServletRequest request,  InputStream is) throws IOException {\n    if (\"gzip\".equals(request.getHeader(\"Compression\"))) {\n      return new GZIPInputStream(is);\n    }\n else {\n      return is;\n    }\n  }\n  @Override protected OutputStream decorateOutputStream(  HttpServletRequest request,  HttpServletResponse response,  OutputStream os) throws IOException {\n    if (\"gzip\".equals(request.getHeader(\"Compression\"))) {\n      return new GZIPOutputStream(os);\n    }\n else {\n      return os;\n    }\n  }\n}\n",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 604,
      "startLineNumber" : 171,
      "startColumnNumber" : 46,
      "endLineNumber" : 191,
      "endColumnNumber" : 3
    },
    "astNodeNumber" : 78,
    "astHeight" : 10,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 615,
        "startLineNumber" : 171,
        "startColumnNumber" : 35,
        "endLineNumber" : 191,
        "endColumnNumber" : 3
      },
      "nodeContext" : "exporter=new HttpInvokerServiceExporter(){\n  @Override protected InputStream decorateInputStream(  HttpServletRequest request,  InputStream is) throws IOException {\n    if (\"gzip\".equals(request.getHeader(\"Compression\"))) {\n      return new GZIPInputStream(is);\n    }\n else {\n      return is;\n    }\n  }\n  @Override protected OutputStream decorateOutputStream(  HttpServletRequest request,  HttpServletResponse response,  OutputStream os) throws IOException {\n    if (\"gzip\".equals(request.getHeader(\"Compression\"))) {\n      return new GZIPOutputStream(os);\n    }\n else {\n      return os;\n    }\n  }\n}\n",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 80,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 649,
        "startLineNumber" : 171,
        "startColumnNumber" : 2,
        "endLineNumber" : 191,
        "endColumnNumber" : 4
      },
      "nodeContext" : "final HttpInvokerServiceExporter exporter=new HttpInvokerServiceExporter(){\n  @Override protected InputStream decorateInputStream(  HttpServletRequest request,  InputStream is) throws IOException {\n    if (\"gzip\".equals(request.getHeader(\"Compression\"))) {\n      return new GZIPInputStream(is);\n    }\n else {\n      return is;\n    }\n  }\n  @Override protected OutputStream decorateOutputStream(  HttpServletRequest request,  HttpServletResponse response,  OutputStream os) throws IOException {\n    if (\"gzip\".equals(request.getHeader(\"Compression\"))) {\n      return new GZIPOutputStream(os);\n    }\n else {\n      return os;\n    }\n  }\n}\n;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 84,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2651,
        "startLineNumber" : 168,
        "startColumnNumber" : 97,
        "endLineNumber" : 250,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  TestBean target=new TestBean(\"myname\",99);\n  final HttpInvokerServiceExporter exporter=new HttpInvokerServiceExporter(){\n    @Override protected InputStream decorateInputStream(    HttpServletRequest request,    InputStream is) throws IOException {\n      if (\"gzip\".equals(request.getHeader(\"Compression\"))) {\n        return new GZIPInputStream(is);\n      }\n else {\n        return is;\n      }\n    }\n    @Override protected OutputStream decorateOutputStream(    HttpServletRequest request,    HttpServletResponse response,    OutputStream os) throws IOException {\n      if (\"gzip\".equals(request.getHeader(\"Compression\"))) {\n        return new GZIPOutputStream(os);\n      }\n else {\n        return os;\n      }\n    }\n  }\n;\n  exporter.setServiceInterface(ITestBean.class);\n  exporter.setService(target);\n  exporter.afterPropertiesSet();\n  HttpInvokerProxyFactoryBean pfb=new HttpInvokerProxyFactoryBean();\n  pfb.setServiceInterface(ITestBean.class);\n  pfb.setServiceUrl(\"http://myurl\");\n  pfb.setHttpInvokerRequestExecutor(new AbstractHttpInvokerRequestExecutor(){\n    @Override protected RemoteInvocationResult doExecuteRequest(    HttpInvokerClientConfiguration config,    ByteArrayOutputStream baos) throws IOException, ClassNotFoundException {\n      assertEquals(\"http://myurl\",config.getServiceUrl());\n      MockHttpServletRequest request=new MockHttpServletRequest();\n      request.addHeader(\"Compression\",\"gzip\");\n      MockHttpServletResponse response=new MockHttpServletResponse();\n      request.setContent(baos.toByteArray());\n      try {\n        exporter.handleRequest(request,response);\n      }\n catch (      ServletException ex) {\n        throw new IOException(ex.toString());\n      }\n      return readRemoteInvocationResult(new ByteArrayInputStream(response.getContentAsByteArray()),config.getCodebaseUrl());\n    }\n    @Override protected OutputStream decorateOutputStream(    OutputStream os) throws IOException {\n      return new GZIPOutputStream(os);\n    }\n    @Override protected InputStream decorateInputStream(    InputStream is) throws IOException {\n      return new GZIPInputStream(is);\n    }\n  }\n);\n  pfb.afterPropertiesSet();\n  ITestBean proxy=(ITestBean)pfb.getObject();\n  assertEquals(\"myname\",proxy.getName());\n  assertEquals(99,proxy.getAge());\n  proxy.setAge(50);\n  assertEquals(50,proxy.getAge());\n  try {\n    proxy.exceptional(new IllegalStateException());\n    fail(\"Should have thrown IllegalStateException\");\n  }\n catch (  IllegalStateException ex) {\n  }\n  try {\n    proxy.exceptional(new IllegalAccessException());\n    fail(\"Should have thrown IllegalAccessException\");\n  }\n catch (  IllegalAccessException ex) {\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 345,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2754,
        "startLineNumber" : 167,
        "startColumnNumber" : 1,
        "endLineNumber" : 250,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void httpInvokerProxyFactoryBeanAndServiceExporterWithGzipCompression() throws Throwable {\n  TestBean target=new TestBean(\"myname\",99);\n  final HttpInvokerServiceExporter exporter=new HttpInvokerServiceExporter(){\n    @Override protected InputStream decorateInputStream(    HttpServletRequest request,    InputStream is) throws IOException {\n      if (\"gzip\".equals(request.getHeader(\"Compression\"))) {\n        return new GZIPInputStream(is);\n      }\n else {\n        return is;\n      }\n    }\n    @Override protected OutputStream decorateOutputStream(    HttpServletRequest request,    HttpServletResponse response,    OutputStream os) throws IOException {\n      if (\"gzip\".equals(request.getHeader(\"Compression\"))) {\n        return new GZIPOutputStream(os);\n      }\n else {\n        return os;\n      }\n    }\n  }\n;\n  exporter.setServiceInterface(ITestBean.class);\n  exporter.setService(target);\n  exporter.afterPropertiesSet();\n  HttpInvokerProxyFactoryBean pfb=new HttpInvokerProxyFactoryBean();\n  pfb.setServiceInterface(ITestBean.class);\n  pfb.setServiceUrl(\"http://myurl\");\n  pfb.setHttpInvokerRequestExecutor(new AbstractHttpInvokerRequestExecutor(){\n    @Override protected RemoteInvocationResult doExecuteRequest(    HttpInvokerClientConfiguration config,    ByteArrayOutputStream baos) throws IOException, ClassNotFoundException {\n      assertEquals(\"http://myurl\",config.getServiceUrl());\n      MockHttpServletRequest request=new MockHttpServletRequest();\n      request.addHeader(\"Compression\",\"gzip\");\n      MockHttpServletResponse response=new MockHttpServletResponse();\n      request.setContent(baos.toByteArray());\n      try {\n        exporter.handleRequest(request,response);\n      }\n catch (      ServletException ex) {\n        throw new IOException(ex.toString());\n      }\n      return readRemoteInvocationResult(new ByteArrayInputStream(response.getContentAsByteArray()),config.getCodebaseUrl());\n    }\n    @Override protected OutputStream decorateOutputStream(    OutputStream os) throws IOException {\n      return new GZIPOutputStream(os);\n    }\n    @Override protected InputStream decorateInputStream(    InputStream is) throws IOException {\n      return new GZIPInputStream(is);\n    }\n  }\n);\n  pfb.afterPropertiesSet();\n  ITestBean proxy=(ITestBean)pfb.getObject();\n  assertEquals(\"myname\",proxy.getName());\n  assertEquals(99,proxy.getAge());\n  proxy.setAge(50);\n  assertEquals(50,proxy.getAge());\n  try {\n    proxy.exceptional(new IllegalStateException());\n    fail(\"Should have thrown IllegalStateException\");\n  }\n catch (  IllegalStateException ex) {\n  }\n  try {\n    proxy.exceptional(new IllegalAccessException());\n    fail(\"Should have thrown IllegalAccessException\");\n  }\n catch (  IllegalAccessException ex) {\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 353,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 649,
        "startLineNumber" : 171,
        "startColumnNumber" : 2,
        "endLineNumber" : 191,
        "endColumnNumber" : 4
      },
      "nodeContext" : "final HttpInvokerServiceExporter exporter=new HttpInvokerServiceExporter(){\n  @Override protected InputStream decorateInputStream(  HttpServletRequest request,  InputStream is) throws IOException {\n    if (\"gzip\".equals(request.getHeader(\"Compression\"))) {\n      return new GZIPInputStream(is);\n    }\n else {\n      return is;\n    }\n  }\n  @Override protected OutputStream decorateOutputStream(  HttpServletRequest request,  HttpServletResponse response,  OutputStream os) throws IOException {\n    if (\"gzip\".equals(request.getHeader(\"Compression\"))) {\n      return new GZIPOutputStream(os);\n    }\n else {\n      return os;\n    }\n  }\n}\n;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 84,
      "astHeight" : 12
    },
    "tokenLength" : 35,
    "type" : ""
  } ],
  "positionList" : [ {
    "charLength" : 604,
    "startLineNumber" : 171,
    "startColumnNumber" : 46,
    "endLineNumber" : 191,
    "endColumnNumber" : 3
  } ],
  "layoutRelationDataList" : [ ]
}