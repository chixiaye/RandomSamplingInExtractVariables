{
  "id" : 85,
  "expression" : "Modifier.STATIC",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/core/lombok/eclipse/handlers/HandleSynchronized.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Modifier.STATIC",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 86,
      "startColumnNumber" : 37,
      "endLineNumber" : 86,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 86,
        "startColumnNumber" : 26,
        "endLineNumber" : 86,
        "endColumnNumber" : 56
      },
      "nodeContext" : "isStatic ? Modifier.STATIC : 0",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 86,
        "startColumnNumber" : 25,
        "endLineNumber" : 86,
        "endColumnNumber" : 57
      },
      "nodeContext" : "(isStatic ? Modifier.STATIC : 0)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 86,
        "startColumnNumber" : 25,
        "endLineNumber" : 86,
        "endColumnNumber" : 93
      },
      "nodeContext" : "(isStatic ? Modifier.STATIC : 0) | Modifier.FINAL | Modifier.PRIVATE",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 86,
        "startColumnNumber" : 3,
        "endLineNumber" : 86,
        "endColumnNumber" : 93
      },
      "nodeContext" : "fieldDecl.modifiers=(isStatic ? Modifier.STATIC : 0) | Modifier.FINAL | Modifier.PRIVATE",
      "nodeType" : "Assignment",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 86,
        "startColumnNumber" : 3,
        "endLineNumber" : 86,
        "endColumnNumber" : 94
      },
      "nodeContext" : "fieldDecl.modifiers=(isStatic ? Modifier.STATIC : 0) | Modifier.FINAL | Modifier.PRIVATE;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1284,
        "startLineNumber" : 77,
        "startColumnNumber" : 90,
        "endLineNumber" : 100,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!autoMake) {\n    if (reportErrors)     annotationNode.addError(String.format(\"The field %s does not exist.\",new String(lockName)));\n    return null;\n  }\n  FieldDeclaration fieldDecl=new FieldDeclaration(lockName,0,-1);\n  setGeneratedBy(fieldDecl,source);\n  fieldDecl.declarationSourceEnd=-1;\n  fieldDecl.modifiers=(isStatic ? Modifier.STATIC : 0) | Modifier.FINAL | Modifier.PRIVATE;\n  ArrayAllocationExpression arrayAlloc=new ArrayAllocationExpression();\n  setGeneratedBy(arrayAlloc,source);\n  arrayAlloc.dimensions=new Expression[]{makeIntLiteral(\"0\".toCharArray(),source)};\n  arrayAlloc.type=new QualifiedTypeReference(TypeConstants.JAVA_LANG_OBJECT,new long[]{0,0,0});\n  setGeneratedBy(arrayAlloc.type,source);\n  fieldDecl.type=new QualifiedTypeReference(TypeConstants.JAVA_LANG_OBJECT,new long[]{0,0,0});\n  setGeneratedBy(fieldDecl.type,source);\n  fieldDecl.initialization=arrayAlloc;\n  injectField(annotationNode.up().up(),fieldDecl);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 161,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1372,
        "startLineNumber" : 77,
        "startColumnNumber" : 2,
        "endLineNumber" : 100,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (fieldExists(new String(lockName),annotationNode) == MemberExistsResult.NOT_EXISTS) {\n  if (!autoMake) {\n    if (reportErrors)     annotationNode.addError(String.format(\"The field %s does not exist.\",new String(lockName)));\n    return null;\n  }\n  FieldDeclaration fieldDecl=new FieldDeclaration(lockName,0,-1);\n  setGeneratedBy(fieldDecl,source);\n  fieldDecl.declarationSourceEnd=-1;\n  fieldDecl.modifiers=(isStatic ? Modifier.STATIC : 0) | Modifier.FINAL | Modifier.PRIVATE;\n  ArrayAllocationExpression arrayAlloc=new ArrayAllocationExpression();\n  setGeneratedBy(arrayAlloc,source);\n  arrayAlloc.dimensions=new Expression[]{makeIntLiteral(\"0\".toCharArray(),source)};\n  arrayAlloc.type=new QualifiedTypeReference(TypeConstants.JAVA_LANG_OBJECT,new long[]{0,0,0});\n  setGeneratedBy(arrayAlloc.type,source);\n  fieldDecl.type=new QualifiedTypeReference(TypeConstants.JAVA_LANG_OBJECT,new long[]{0,0,0});\n  setGeneratedBy(fieldDecl.type,source);\n  fieldDecl.initialization=arrayAlloc;\n  injectField(annotationNode.up().up(),fieldDecl);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 173,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1675,
        "startLineNumber" : 68,
        "startColumnNumber" : 143,
        "endLineNumber" : 103,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  char[] lockName=annotation.getInstance().value().toCharArray();\n  Annotation source=(Annotation)annotationNode.get();\n  boolean autoMake=false;\n  if (lockName.length == 0) {\n    autoMake=true;\n    lockName=isStatic ? STATIC_LOCK_NAME : INSTANCE_LOCK_NAME;\n  }\n  if (fieldExists(new String(lockName),annotationNode) == MemberExistsResult.NOT_EXISTS) {\n    if (!autoMake) {\n      if (reportErrors)       annotationNode.addError(String.format(\"The field %s does not exist.\",new String(lockName)));\n      return null;\n    }\n    FieldDeclaration fieldDecl=new FieldDeclaration(lockName,0,-1);\n    setGeneratedBy(fieldDecl,source);\n    fieldDecl.declarationSourceEnd=-1;\n    fieldDecl.modifiers=(isStatic ? Modifier.STATIC : 0) | Modifier.FINAL | Modifier.PRIVATE;\n    ArrayAllocationExpression arrayAlloc=new ArrayAllocationExpression();\n    setGeneratedBy(arrayAlloc,source);\n    arrayAlloc.dimensions=new Expression[]{makeIntLiteral(\"0\".toCharArray(),source)};\n    arrayAlloc.type=new QualifiedTypeReference(TypeConstants.JAVA_LANG_OBJECT,new long[]{0,0,0});\n    setGeneratedBy(arrayAlloc.type,source);\n    fieldDecl.type=new QualifiedTypeReference(TypeConstants.JAVA_LANG_OBJECT,new long[]{0,0,0});\n    setGeneratedBy(fieldDecl.type,source);\n    fieldDecl.initialization=arrayAlloc;\n    injectField(annotationNode.up().up(),fieldDecl);\n  }\n  return lockName;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 223,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1817,
        "startLineNumber" : 68,
        "startColumnNumber" : 1,
        "endLineNumber" : 103,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private char[] createLockField(AnnotationValues<Synchronized> annotation,EclipseNode annotationNode,boolean isStatic,boolean reportErrors){\n  char[] lockName=annotation.getInstance().value().toCharArray();\n  Annotation source=(Annotation)annotationNode.get();\n  boolean autoMake=false;\n  if (lockName.length == 0) {\n    autoMake=true;\n    lockName=isStatic ? STATIC_LOCK_NAME : INSTANCE_LOCK_NAME;\n  }\n  if (fieldExists(new String(lockName),annotationNode) == MemberExistsResult.NOT_EXISTS) {\n    if (!autoMake) {\n      if (reportErrors)       annotationNode.addError(String.format(\"The field %s does not exist.\",new String(lockName)));\n      return null;\n    }\n    FieldDeclaration fieldDecl=new FieldDeclaration(lockName,0,-1);\n    setGeneratedBy(fieldDecl,source);\n    fieldDecl.declarationSourceEnd=-1;\n    fieldDecl.modifiers=(isStatic ? Modifier.STATIC : 0) | Modifier.FINAL | Modifier.PRIVATE;\n    ArrayAllocationExpression arrayAlloc=new ArrayAllocationExpression();\n    setGeneratedBy(arrayAlloc,source);\n    arrayAlloc.dimensions=new Expression[]{makeIntLiteral(\"0\".toCharArray(),source)};\n    arrayAlloc.type=new QualifiedTypeReference(TypeConstants.JAVA_LANG_OBJECT,new long[]{0,0,0});\n    setGeneratedBy(arrayAlloc.type,source);\n    fieldDecl.type=new QualifiedTypeReference(TypeConstants.JAVA_LANG_OBJECT,new long[]{0,0,0});\n    setGeneratedBy(fieldDecl.type,source);\n    fieldDecl.initialization=arrayAlloc;\n    injectField(annotationNode.up().up(),fieldDecl);\n  }\n  return lockName;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 246,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 86,
        "startColumnNumber" : 3,
        "endLineNumber" : 86,
        "endColumnNumber" : 94
      },
      "nodeContext" : "fieldDecl.modifiers=(isStatic ? Modifier.STATIC : 0) | Modifier.FINAL | Modifier.PRIVATE;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 86,
    "startColumnNumber" : 37,
    "endLineNumber" : 86,
    "endColumnNumber" : 52
  } ],
  "layoutRelationDataList" : [ ]
}