{
  "id" : 92,
  "expression" : "\"to contain\"",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-core-test/src/test/java/org/springframework/core/test/tools/SourceFileAssertTests.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"to contain\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 63,
      "startColumnNumber" : 40,
      "endLineNumber" : 63,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 170,
        "startLineNumber" : 61,
        "startColumnNumber" : 2,
        "endLineNumber" : 63,
        "endColumnNumber" : 53
      },
      "nodeContext" : "assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(this.sourceFile).contains(\"Sample\",\"missing\")).withMessageContaining(\"to contain\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 171,
        "startLineNumber" : 61,
        "startColumnNumber" : 2,
        "endLineNumber" : 63,
        "endColumnNumber" : 54
      },
      "nodeContext" : "assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(this.sourceFile).contains(\"Sample\",\"missing\")).withMessageContaining(\"to contain\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 21,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 178,
        "startLineNumber" : 60,
        "startColumnNumber" : 46,
        "endLineNumber" : 64,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(this.sourceFile).contains(\"Sample\",\"missing\")).withMessageContaining(\"to contain\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 230,
        "startLineNumber" : 59,
        "startColumnNumber" : 1,
        "endLineNumber" : 64,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test void containsWhenMissingOneThrowsException(){\n  assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(this.sourceFile).contains(\"Sample\",\"missing\")).withMessageContaining(\"to contain\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 27,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 170,
        "startLineNumber" : 61,
        "startColumnNumber" : 2,
        "endLineNumber" : 63,
        "endColumnNumber" : 53
      },
      "nodeContext" : "assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(this.sourceFile).contains(\"Sample\",\"missing\")).withMessageContaining(\"to contain\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 20,
      "astHeight" : 7
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 63,
    "startColumnNumber" : 40,
    "endLineNumber" : 63,
    "endColumnNumber" : 52
  } ],
  "layoutRelationDataList" : [ ]
}