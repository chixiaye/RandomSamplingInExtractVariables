{
  "id" : 121,
  "expression" : "elementOptions.append(\"tokenIndex=\")",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/tool/src/org/antlr/v4/analysis/LeftRecursiveRuleAnalyzer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "elementOptions.append(\"tokenIndex=\")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 36,
      "startLineNumber" : 367,
      "startColumnNumber" : 5,
      "endLineNumber" : 367,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 367,
        "startColumnNumber" : 5,
        "endLineNumber" : 367,
        "endColumnNumber" : 69
      },
      "nodeContext" : "elementOptions.append(\"tokenIndex=\").append(tok.getTokenIndex())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 367,
        "startColumnNumber" : 5,
        "endLineNumber" : 367,
        "endColumnNumber" : 70
      },
      "nodeContext" : "elementOptions.append(\"tokenIndex=\").append(tok.getTokenIndex());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 366,
        "startColumnNumber" : 4,
        "endLineNumber" : 368,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  elementOptions.append(\"tokenIndex=\").append(tok.getTokenIndex());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 216,
        "startLineNumber" : 362,
        "startColumnNumber" : 4,
        "endLineNumber" : 368,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (node != null && (tok.getType() == TOKEN_REF || tok.getType() == STRING_LITERAL || tok.getType() == RULE_REF)) {\n  elementOptions.append(\"tokenIndex=\").append(tok.getTokenIndex());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 34,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 734,
        "startLineNumber" : 360,
        "startColumnNumber" : 31,
        "endLineNumber" : 382,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  GrammarAST node=t.getNodeWithTokenIndex(tok.getTokenIndex());\n  if (node != null && (tok.getType() == TOKEN_REF || tok.getType() == STRING_LITERAL || tok.getType() == RULE_REF)) {\n    elementOptions.append(\"tokenIndex=\").append(tok.getTokenIndex());\n  }\n  if (node instanceof GrammarASTWithOptions) {\n    GrammarASTWithOptions o=(GrammarASTWithOptions)node;\n    for (    Map.Entry<String,GrammarAST> entry : o.getOptions().entrySet()) {\n      if (elementOptions.length() > 0) {\n        elementOptions.append(',');\n      }\n      elementOptions.append(entry.getKey());\n      elementOptions.append('=');\n      elementOptions.append(entry.getValue().getText());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 112,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 762,
        "startLineNumber" : 360,
        "startColumnNumber" : 3,
        "endLineNumber" : 382,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (!noOptions.contains(i)) {\n  GrammarAST node=t.getNodeWithTokenIndex(tok.getTokenIndex());\n  if (node != null && (tok.getType() == TOKEN_REF || tok.getType() == STRING_LITERAL || tok.getType() == RULE_REF)) {\n    elementOptions.append(\"tokenIndex=\").append(tok.getTokenIndex());\n  }\n  if (node instanceof GrammarASTWithOptions) {\n    GrammarASTWithOptions o=(GrammarASTWithOptions)node;\n    for (    Map.Entry<String,GrammarAST> entry : o.getOptions().entrySet()) {\n      if (elementOptions.length() > 0) {\n        elementOptions.append(',');\n      }\n      elementOptions.append(entry.getKey());\n      elementOptions.append('=');\n      elementOptions.append(entry.getValue().getText());\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 118,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1511,
        "startLineNumber" : 350,
        "startColumnNumber" : 30,
        "endLineNumber" : 397,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (ignore.contains(i)) {\n    i++;\n    continue;\n  }\n  Token tok=tokenStream.get(i);\n  StringBuilder elementOptions=new StringBuilder();\n  if (!noOptions.contains(i)) {\n    GrammarAST node=t.getNodeWithTokenIndex(tok.getTokenIndex());\n    if (node != null && (tok.getType() == TOKEN_REF || tok.getType() == STRING_LITERAL || tok.getType() == RULE_REF)) {\n      elementOptions.append(\"tokenIndex=\").append(tok.getTokenIndex());\n    }\n    if (node instanceof GrammarASTWithOptions) {\n      GrammarASTWithOptions o=(GrammarASTWithOptions)node;\n      for (      Map.Entry<String,GrammarAST> entry : o.getOptions().entrySet()) {\n        if (elementOptions.length() > 0) {\n          elementOptions.append(',');\n        }\n        elementOptions.append(entry.getKey());\n        elementOptions.append('=');\n        elementOptions.append(entry.getValue().getText());\n      }\n    }\n  }\n  buf.append(tok.getText());\n  i++;\n  if (tok.getType() == RULE_REF && i <= tokenStopIndex && tokenStream.get(i).getType() == ARG_ACTION) {\n    buf.append('[' + tokenStream.get(i).getText() + ']');\n    i++;\n  }\n  if (elementOptions.length() > 0) {\n    buf.append('<').append(elementOptions).append('>');\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 210,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1539,
        "startLineNumber" : 350,
        "startColumnNumber" : 2,
        "endLineNumber" : 397,
        "endColumnNumber" : 3
      },
      "nodeContext" : "while (i <= tokenStopIndex) {\n  if (ignore.contains(i)) {\n    i++;\n    continue;\n  }\n  Token tok=tokenStream.get(i);\n  StringBuilder elementOptions=new StringBuilder();\n  if (!noOptions.contains(i)) {\n    GrammarAST node=t.getNodeWithTokenIndex(tok.getTokenIndex());\n    if (node != null && (tok.getType() == TOKEN_REF || tok.getType() == STRING_LITERAL || tok.getType() == RULE_REF)) {\n      elementOptions.append(\"tokenIndex=\").append(tok.getTokenIndex());\n    }\n    if (node instanceof GrammarASTWithOptions) {\n      GrammarASTWithOptions o=(GrammarASTWithOptions)node;\n      for (      Map.Entry<String,GrammarAST> entry : o.getOptions().entrySet()) {\n        if (elementOptions.length() > 0) {\n          elementOptions.append(',');\n        }\n        elementOptions.append(entry.getKey());\n        elementOptions.append('=');\n        elementOptions.append(entry.getValue().getText());\n      }\n    }\n  }\n  buf.append(tok.getText());\n  i++;\n  if (tok.getType() == RULE_REF && i <= tokenStopIndex && tokenStream.get(i).getType() == ARG_ACTION) {\n    buf.append('[' + tokenStream.get(i).getText() + ']');\n    i++;\n  }\n  if (elementOptions.length() > 0) {\n    buf.append('<').append(elementOptions).append('>');\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 214,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2680,
        "startLineNumber" : 322,
        "startColumnNumber" : 34,
        "endLineNumber" : 399,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (t == null)   return \"\";\n  int tokenStartIndex=t.getTokenStartIndex();\n  int tokenStopIndex=t.getTokenStopIndex();\n  IntervalSet ignore=new IntervalSet();\n  List<GrammarAST> optionsSubTrees=t.getNodesWithType(ELEMENT_OPTIONS);\n  for (  GrammarAST sub : optionsSubTrees) {\n    ignore.add(sub.getTokenStartIndex(),sub.getTokenStopIndex());\n  }\n  IntervalSet noOptions=new IntervalSet();\n  List<GrammarAST> labeledSubTrees=t.getNodesWithType(new IntervalSet(ASSIGN,PLUS_ASSIGN));\n  for (  GrammarAST sub : labeledSubTrees) {\n    noOptions.add(sub.getChild(0).getTokenStartIndex());\n  }\n  StringBuilder buf=new StringBuilder();\n  int i=tokenStartIndex;\n  while (i <= tokenStopIndex) {\n    if (ignore.contains(i)) {\n      i++;\n      continue;\n    }\n    Token tok=tokenStream.get(i);\n    StringBuilder elementOptions=new StringBuilder();\n    if (!noOptions.contains(i)) {\n      GrammarAST node=t.getNodeWithTokenIndex(tok.getTokenIndex());\n      if (node != null && (tok.getType() == TOKEN_REF || tok.getType() == STRING_LITERAL || tok.getType() == RULE_REF)) {\n        elementOptions.append(\"tokenIndex=\").append(tok.getTokenIndex());\n      }\n      if (node instanceof GrammarASTWithOptions) {\n        GrammarASTWithOptions o=(GrammarASTWithOptions)node;\n        for (        Map.Entry<String,GrammarAST> entry : o.getOptions().entrySet()) {\n          if (elementOptions.length() > 0) {\n            elementOptions.append(',');\n          }\n          elementOptions.append(entry.getKey());\n          elementOptions.append('=');\n          elementOptions.append(entry.getValue().getText());\n        }\n      }\n    }\n    buf.append(tok.getText());\n    i++;\n    if (tok.getType() == RULE_REF && i <= tokenStopIndex && tokenStream.get(i).getType() == ARG_ACTION) {\n      buf.append('[' + tokenStream.get(i).getText() + ']');\n      i++;\n    }\n    if (elementOptions.length() > 0) {\n      buf.append('<').append(elementOptions).append('>');\n    }\n  }\n  return buf.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 330,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2713,
        "startLineNumber" : 322,
        "startColumnNumber" : 1,
        "endLineNumber" : 399,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public String text(GrammarAST t){\n  if (t == null)   return \"\";\n  int tokenStartIndex=t.getTokenStartIndex();\n  int tokenStopIndex=t.getTokenStopIndex();\n  IntervalSet ignore=new IntervalSet();\n  List<GrammarAST> optionsSubTrees=t.getNodesWithType(ELEMENT_OPTIONS);\n  for (  GrammarAST sub : optionsSubTrees) {\n    ignore.add(sub.getTokenStartIndex(),sub.getTokenStopIndex());\n  }\n  IntervalSet noOptions=new IntervalSet();\n  List<GrammarAST> labeledSubTrees=t.getNodesWithType(new IntervalSet(ASSIGN,PLUS_ASSIGN));\n  for (  GrammarAST sub : labeledSubTrees) {\n    noOptions.add(sub.getChild(0).getTokenStartIndex());\n  }\n  StringBuilder buf=new StringBuilder();\n  int i=tokenStartIndex;\n  while (i <= tokenStopIndex) {\n    if (ignore.contains(i)) {\n      i++;\n      continue;\n    }\n    Token tok=tokenStream.get(i);\n    StringBuilder elementOptions=new StringBuilder();\n    if (!noOptions.contains(i)) {\n      GrammarAST node=t.getNodeWithTokenIndex(tok.getTokenIndex());\n      if (node != null && (tok.getType() == TOKEN_REF || tok.getType() == STRING_LITERAL || tok.getType() == RULE_REF)) {\n        elementOptions.append(\"tokenIndex=\").append(tok.getTokenIndex());\n      }\n      if (node instanceof GrammarASTWithOptions) {\n        GrammarASTWithOptions o=(GrammarASTWithOptions)node;\n        for (        Map.Entry<String,GrammarAST> entry : o.getOptions().entrySet()) {\n          if (elementOptions.length() > 0) {\n            elementOptions.append(',');\n          }\n          elementOptions.append(entry.getKey());\n          elementOptions.append('=');\n          elementOptions.append(entry.getValue().getText());\n        }\n      }\n    }\n    buf.append(tok.getText());\n    i++;\n    if (tok.getType() == RULE_REF && i <= tokenStopIndex && tokenStream.get(i).getType() == ARG_ACTION) {\n      buf.append('[' + tokenStream.get(i).getText() + ']');\n      i++;\n    }\n    if (elementOptions.length() > 0) {\n      buf.append('<').append(elementOptions).append('>');\n    }\n  }\n  return buf.toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 339,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 367,
        "startColumnNumber" : 5,
        "endLineNumber" : 367,
        "endColumnNumber" : 70
      },
      "nodeContext" : "elementOptions.append(\"tokenIndex=\").append(tok.getTokenIndex());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "java.lang.StringBuilder"
  } ],
  "positionList" : [ {
    "charLength" : 36,
    "startLineNumber" : 367,
    "startColumnNumber" : 5,
    "endLineNumber" : 367,
    "endColumnNumber" : 41
  } ],
  "layoutRelationDataList" : [ ]
}