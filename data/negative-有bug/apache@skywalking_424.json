{
  "id" : 424,
  "expression" : "histogram",
  "projectName" : "apache@skywalking",
  "commitID" : "16b51d55baec4f779f312e07081d1397addbcfe9",
  "filePath" : "/oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/meter/process/MeterProcessor.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "histogram",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 92,
      "startColumnNumber" : 48,
      "endLineNumber" : 92,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 92,
        "startColumnNumber" : 48,
        "endLineNumber" : 92,
        "endColumnNumber" : 73
      },
      "nodeContext" : "histogram.getLabelsList()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 92,
        "startColumnNumber" : 48,
        "endLineNumber" : 92,
        "endColumnNumber" : 82
      },
      "nodeContext" : "histogram.getLabelsList().stream()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 92,
        "startColumnNumber" : 48,
        "endLineNumber" : 92,
        "endColumnNumber" : 141
      },
      "nodeContext" : "histogram.getLabelsList().stream().collect(Collectors.toMap(Label::getName,Label::getValue))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 92,
        "startColumnNumber" : 36,
        "endLineNumber" : 92,
        "endColumnNumber" : 141
      },
      "nodeContext" : "baseLabel=histogram.getLabelsList().stream().collect(Collectors.toMap(Label::getName,Label::getValue))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 126,
        "startLineNumber" : 92,
        "startColumnNumber" : 16,
        "endLineNumber" : 92,
        "endColumnNumber" : 142
      },
      "nodeContext" : "Map<String,String> baseLabel=histogram.getLabelsList().stream().collect(Collectors.toMap(Label::getName,Label::getValue));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 26,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1384,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 105,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (data.getMetricCase()) {\ncase SINGLEVALUE:  MeterSingleValue single=data.getSingleValue();\nmeters.computeIfAbsent(single.getName(),k -> new ArrayList<>()).add(SampleBuilder.builder().name(single.getName()).labels(single.getLabelsList().stream().collect(toImmutableMap(Label::getName,Label::getValue))).value(single.getValue()).build());\nbreak;\ncase HISTOGRAM:MeterHistogram histogram=data.getHistogram();\nMap<String,String> baseLabel=histogram.getLabelsList().stream().collect(Collectors.toMap(Label::getName,Label::getValue));\nmeters.computeIfAbsent(histogram.getName(),k -> new ArrayList<>()).addAll(histogram.getValuesList().stream().map(v -> SampleBuilder.builder().name(histogram.getName()).labels(ImmutableMap.<String,String>builder().putAll(baseLabel).put(\"le\",String.valueOf(v.getBucket())).build()).value(v.getCount()).build()).collect(Collectors.toList()));\nbreak;\ndefault:return;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 171,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1787,
        "startLineNumber" : 79,
        "startColumnNumber" : 37,
        "endLineNumber" : 117,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\nswitch (data.getMetricCase()) {\ncase SINGLEVALUE:    MeterSingleValue single=data.getSingleValue();\n  meters.computeIfAbsent(single.getName(),k -> new ArrayList<>()).add(SampleBuilder.builder().name(single.getName()).labels(single.getLabelsList().stream().collect(toImmutableMap(Label::getName,Label::getValue))).value(single.getValue()).build());\nbreak;\ncase HISTOGRAM:MeterHistogram histogram=data.getHistogram();\nMap<String,String> baseLabel=histogram.getLabelsList().stream().collect(Collectors.toMap(Label::getName,Label::getValue));\nmeters.computeIfAbsent(histogram.getName(),k -> new ArrayList<>()).addAll(histogram.getValuesList().stream().map(v -> SampleBuilder.builder().name(histogram.getName()).labels(ImmutableMap.<String,String>builder().putAll(baseLabel).put(\"le\",String.valueOf(v.getBucket())).build()).value(v.getCount()).build()).collect(Collectors.toList()));\nbreak;\ndefault:return;\n}\nif (StringUtil.isNotEmpty(data.getService())) {\nservice=data.getService();\n}\nif (StringUtil.isNotEmpty(data.getServiceInstance())) {\nserviceInstance=data.getServiceInstance();\n}\nif (data.getTimestamp() > 0) {\ntimestamp=data.getTimestamp();\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 213,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1820,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 117,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void read(MeterData data){\nswitch (data.getMetricCase()) {\ncase SINGLEVALUE:    MeterSingleValue single=data.getSingleValue();\n  meters.computeIfAbsent(single.getName(),k -> new ArrayList<>()).add(SampleBuilder.builder().name(single.getName()).labels(single.getLabelsList().stream().collect(toImmutableMap(Label::getName,Label::getValue))).value(single.getValue()).build());\nbreak;\ncase HISTOGRAM:MeterHistogram histogram=data.getHistogram();\nMap<String,String> baseLabel=histogram.getLabelsList().stream().collect(Collectors.toMap(Label::getName,Label::getValue));\nmeters.computeIfAbsent(histogram.getName(),k -> new ArrayList<>()).addAll(histogram.getValuesList().stream().map(v -> SampleBuilder.builder().name(histogram.getName()).labels(ImmutableMap.<String,String>builder().putAll(baseLabel).put(\"le\",String.valueOf(v.getBucket())).build()).value(v.getCount()).build()).collect(Collectors.toList()));\nbreak;\ndefault:return;\n}\nif (StringUtil.isNotEmpty(data.getService())) {\nservice=data.getService();\n}\nif (StringUtil.isNotEmpty(data.getServiceInstance())) {\nserviceInstance=data.getServiceInstance();\n}\nif (data.getTimestamp() > 0) {\ntimestamp=data.getTimestamp();\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 221,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 126,
        "startLineNumber" : 92,
        "startColumnNumber" : 16,
        "endLineNumber" : 92,
        "endColumnNumber" : 142
      },
      "nodeContext" : "Map<String,String> baseLabel=histogram.getLabelsList().stream().collect(Collectors.toMap(Label::getName,Label::getValue));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 26,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "org.apache.skywalking.oap.server.analyzer.provider.meter.process.MeterHistogram"
  }, {
    "nodeContext" : "histogram",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 93,
      "startColumnNumber" : 39,
      "endLineNumber" : 93,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 93,
        "startColumnNumber" : 39,
        "endLineNumber" : 93,
        "endColumnNumber" : 58
      },
      "nodeContext" : "histogram.getName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 93,
        "startColumnNumber" : 16,
        "endLineNumber" : 93,
        "endColumnNumber" : 83
      },
      "nodeContext" : "meters.computeIfAbsent(histogram.getName(),k -> new ArrayList<>())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 556,
        "startLineNumber" : 93,
        "startColumnNumber" : 16,
        "endLineNumber" : 101,
        "endColumnNumber" : 47
      },
      "nodeContext" : "meters.computeIfAbsent(histogram.getName(),k -> new ArrayList<>()).addAll(histogram.getValuesList().stream().map(v -> SampleBuilder.builder().name(histogram.getName()).labels(ImmutableMap.<String,String>builder().putAll(baseLabel).put(\"le\",String.valueOf(v.getBucket())).build()).value(v.getCount()).build()).collect(Collectors.toList()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 68,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 557,
        "startLineNumber" : 93,
        "startColumnNumber" : 16,
        "endLineNumber" : 101,
        "endColumnNumber" : 48
      },
      "nodeContext" : "meters.computeIfAbsent(histogram.getName(),k -> new ArrayList<>()).addAll(histogram.getValuesList().stream().map(v -> SampleBuilder.builder().name(histogram.getName()).labels(ImmutableMap.<String,String>builder().putAll(baseLabel).put(\"le\",String.valueOf(v.getBucket())).build()).value(v.getCount()).build()).collect(Collectors.toList()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 69,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1384,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 105,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (data.getMetricCase()) {\ncase SINGLEVALUE:  MeterSingleValue single=data.getSingleValue();\nmeters.computeIfAbsent(single.getName(),k -> new ArrayList<>()).add(SampleBuilder.builder().name(single.getName()).labels(single.getLabelsList().stream().collect(toImmutableMap(Label::getName,Label::getValue))).value(single.getValue()).build());\nbreak;\ncase HISTOGRAM:MeterHistogram histogram=data.getHistogram();\nMap<String,String> baseLabel=histogram.getLabelsList().stream().collect(Collectors.toMap(Label::getName,Label::getValue));\nmeters.computeIfAbsent(histogram.getName(),k -> new ArrayList<>()).addAll(histogram.getValuesList().stream().map(v -> SampleBuilder.builder().name(histogram.getName()).labels(ImmutableMap.<String,String>builder().putAll(baseLabel).put(\"le\",String.valueOf(v.getBucket())).build()).value(v.getCount()).build()).collect(Collectors.toList()));\nbreak;\ndefault:return;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 171,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1787,
        "startLineNumber" : 79,
        "startColumnNumber" : 37,
        "endLineNumber" : 117,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\nswitch (data.getMetricCase()) {\ncase SINGLEVALUE:    MeterSingleValue single=data.getSingleValue();\n  meters.computeIfAbsent(single.getName(),k -> new ArrayList<>()).add(SampleBuilder.builder().name(single.getName()).labels(single.getLabelsList().stream().collect(toImmutableMap(Label::getName,Label::getValue))).value(single.getValue()).build());\nbreak;\ncase HISTOGRAM:MeterHistogram histogram=data.getHistogram();\nMap<String,String> baseLabel=histogram.getLabelsList().stream().collect(Collectors.toMap(Label::getName,Label::getValue));\nmeters.computeIfAbsent(histogram.getName(),k -> new ArrayList<>()).addAll(histogram.getValuesList().stream().map(v -> SampleBuilder.builder().name(histogram.getName()).labels(ImmutableMap.<String,String>builder().putAll(baseLabel).put(\"le\",String.valueOf(v.getBucket())).build()).value(v.getCount()).build()).collect(Collectors.toList()));\nbreak;\ndefault:return;\n}\nif (StringUtil.isNotEmpty(data.getService())) {\nservice=data.getService();\n}\nif (StringUtil.isNotEmpty(data.getServiceInstance())) {\nserviceInstance=data.getServiceInstance();\n}\nif (data.getTimestamp() > 0) {\ntimestamp=data.getTimestamp();\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 213,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1820,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 117,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void read(MeterData data){\nswitch (data.getMetricCase()) {\ncase SINGLEVALUE:    MeterSingleValue single=data.getSingleValue();\n  meters.computeIfAbsent(single.getName(),k -> new ArrayList<>()).add(SampleBuilder.builder().name(single.getName()).labels(single.getLabelsList().stream().collect(toImmutableMap(Label::getName,Label::getValue))).value(single.getValue()).build());\nbreak;\ncase HISTOGRAM:MeterHistogram histogram=data.getHistogram();\nMap<String,String> baseLabel=histogram.getLabelsList().stream().collect(Collectors.toMap(Label::getName,Label::getValue));\nmeters.computeIfAbsent(histogram.getName(),k -> new ArrayList<>()).addAll(histogram.getValuesList().stream().map(v -> SampleBuilder.builder().name(histogram.getName()).labels(ImmutableMap.<String,String>builder().putAll(baseLabel).put(\"le\",String.valueOf(v.getBucket())).build()).value(v.getCount()).build()).collect(Collectors.toList()));\nbreak;\ndefault:return;\n}\nif (StringUtil.isNotEmpty(data.getService())) {\nservice=data.getService();\n}\nif (StringUtil.isNotEmpty(data.getServiceInstance())) {\nserviceInstance=data.getServiceInstance();\n}\nif (data.getTimestamp() > 0) {\ntimestamp=data.getTimestamp();\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 221,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 93,
        "startColumnNumber" : 16,
        "endLineNumber" : 93,
        "endColumnNumber" : 83
      },
      "nodeContext" : "meters.computeIfAbsent(histogram.getName(),k -> new ArrayList<>())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "org.apache.skywalking.oap.server.analyzer.provider.meter.process.MeterHistogram"
  }, {
    "nodeContext" : "histogram",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 94,
      "startColumnNumber" : 28,
      "endLineNumber" : 94,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 94,
        "startColumnNumber" : 28,
        "endLineNumber" : 94,
        "endColumnNumber" : 53
      },
      "nodeContext" : "histogram.getValuesList()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 94,
        "startColumnNumber" : 28,
        "endLineNumber" : 94,
        "endColumnNumber" : 62
      },
      "nodeContext" : "histogram.getValuesList().stream()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 430,
        "startLineNumber" : 94,
        "startColumnNumber" : 28,
        "endLineNumber" : 101,
        "endColumnNumber" : 17
      },
      "nodeContext" : "histogram.getValuesList().stream().map(v -> SampleBuilder.builder().name(histogram.getName()).labels(ImmutableMap.<String,String>builder().putAll(baseLabel).put(\"le\",String.valueOf(v.getBucket())).build()).value(v.getCount()).build())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 48,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 459,
        "startLineNumber" : 94,
        "startColumnNumber" : 28,
        "endLineNumber" : 101,
        "endColumnNumber" : 46
      },
      "nodeContext" : "histogram.getValuesList().stream().map(v -> SampleBuilder.builder().name(histogram.getName()).labels(ImmutableMap.<String,String>builder().putAll(baseLabel).put(\"le\",String.valueOf(v.getBucket())).build()).value(v.getCount()).build()).collect(Collectors.toList())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 53,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 556,
        "startLineNumber" : 93,
        "startColumnNumber" : 16,
        "endLineNumber" : 101,
        "endColumnNumber" : 47
      },
      "nodeContext" : "meters.computeIfAbsent(histogram.getName(),k -> new ArrayList<>()).addAll(histogram.getValuesList().stream().map(v -> SampleBuilder.builder().name(histogram.getName()).labels(ImmutableMap.<String,String>builder().putAll(baseLabel).put(\"le\",String.valueOf(v.getBucket())).build()).value(v.getCount()).build()).collect(Collectors.toList()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 68,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 557,
        "startLineNumber" : 93,
        "startColumnNumber" : 16,
        "endLineNumber" : 101,
        "endColumnNumber" : 48
      },
      "nodeContext" : "meters.computeIfAbsent(histogram.getName(),k -> new ArrayList<>()).addAll(histogram.getValuesList().stream().map(v -> SampleBuilder.builder().name(histogram.getName()).labels(ImmutableMap.<String,String>builder().putAll(baseLabel).put(\"le\",String.valueOf(v.getBucket())).build()).value(v.getCount()).build()).collect(Collectors.toList()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 69,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1384,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 105,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (data.getMetricCase()) {\ncase SINGLEVALUE:  MeterSingleValue single=data.getSingleValue();\nmeters.computeIfAbsent(single.getName(),k -> new ArrayList<>()).add(SampleBuilder.builder().name(single.getName()).labels(single.getLabelsList().stream().collect(toImmutableMap(Label::getName,Label::getValue))).value(single.getValue()).build());\nbreak;\ncase HISTOGRAM:MeterHistogram histogram=data.getHistogram();\nMap<String,String> baseLabel=histogram.getLabelsList().stream().collect(Collectors.toMap(Label::getName,Label::getValue));\nmeters.computeIfAbsent(histogram.getName(),k -> new ArrayList<>()).addAll(histogram.getValuesList().stream().map(v -> SampleBuilder.builder().name(histogram.getName()).labels(ImmutableMap.<String,String>builder().putAll(baseLabel).put(\"le\",String.valueOf(v.getBucket())).build()).value(v.getCount()).build()).collect(Collectors.toList()));\nbreak;\ndefault:return;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 171,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1787,
        "startLineNumber" : 79,
        "startColumnNumber" : 37,
        "endLineNumber" : 117,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\nswitch (data.getMetricCase()) {\ncase SINGLEVALUE:    MeterSingleValue single=data.getSingleValue();\n  meters.computeIfAbsent(single.getName(),k -> new ArrayList<>()).add(SampleBuilder.builder().name(single.getName()).labels(single.getLabelsList().stream().collect(toImmutableMap(Label::getName,Label::getValue))).value(single.getValue()).build());\nbreak;\ncase HISTOGRAM:MeterHistogram histogram=data.getHistogram();\nMap<String,String> baseLabel=histogram.getLabelsList().stream().collect(Collectors.toMap(Label::getName,Label::getValue));\nmeters.computeIfAbsent(histogram.getName(),k -> new ArrayList<>()).addAll(histogram.getValuesList().stream().map(v -> SampleBuilder.builder().name(histogram.getName()).labels(ImmutableMap.<String,String>builder().putAll(baseLabel).put(\"le\",String.valueOf(v.getBucket())).build()).value(v.getCount()).build()).collect(Collectors.toList()));\nbreak;\ndefault:return;\n}\nif (StringUtil.isNotEmpty(data.getService())) {\nservice=data.getService();\n}\nif (StringUtil.isNotEmpty(data.getServiceInstance())) {\nserviceInstance=data.getServiceInstance();\n}\nif (data.getTimestamp() > 0) {\ntimestamp=data.getTimestamp();\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 213,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1820,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 117,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void read(MeterData data){\nswitch (data.getMetricCase()) {\ncase SINGLEVALUE:    MeterSingleValue single=data.getSingleValue();\n  meters.computeIfAbsent(single.getName(),k -> new ArrayList<>()).add(SampleBuilder.builder().name(single.getName()).labels(single.getLabelsList().stream().collect(toImmutableMap(Label::getName,Label::getValue))).value(single.getValue()).build());\nbreak;\ncase HISTOGRAM:MeterHistogram histogram=data.getHistogram();\nMap<String,String> baseLabel=histogram.getLabelsList().stream().collect(Collectors.toMap(Label::getName,Label::getValue));\nmeters.computeIfAbsent(histogram.getName(),k -> new ArrayList<>()).addAll(histogram.getValuesList().stream().map(v -> SampleBuilder.builder().name(histogram.getName()).labels(ImmutableMap.<String,String>builder().putAll(baseLabel).put(\"le\",String.valueOf(v.getBucket())).build()).value(v.getCount()).build()).collect(Collectors.toList()));\nbreak;\ndefault:return;\n}\nif (StringUtil.isNotEmpty(data.getService())) {\nservice=data.getService();\n}\nif (StringUtil.isNotEmpty(data.getServiceInstance())) {\nserviceInstance=data.getServiceInstance();\n}\nif (data.getTimestamp() > 0) {\ntimestamp=data.getTimestamp();\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 221,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 94,
        "startColumnNumber" : 28,
        "endLineNumber" : 94,
        "endColumnNumber" : 62
      },
      "nodeContext" : "histogram.getValuesList().stream()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.skywalking.oap.server.analyzer.provider.meter.process.MeterHistogram"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 92,
    "startColumnNumber" : 48,
    "endLineNumber" : 92,
    "endColumnNumber" : 57
  }, {
    "charLength" : 9,
    "startLineNumber" : 93,
    "startColumnNumber" : 39,
    "endLineNumber" : 93,
    "endColumnNumber" : 48
  }, {
    "charLength" : 9,
    "startLineNumber" : 94,
    "startColumnNumber" : 28,
    "endLineNumber" : 94,
    "endColumnNumber" : 37
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  } ]
}