{
  "id" : 316,
  "expression" : "((Number)objectNameColumn).intValue()",
  "projectName" : "dbeaver@dbeaver",
  "commitID" : "aecf0da5baef5ea4aa1675578670cf057248123d",
  "filePath" : "/plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/cache/JDBCStructCache.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "((Number)objectNameColumn).intValue()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 38,
      "startLineNumber" : 110,
      "startColumnNumber" : 83,
      "endLineNumber" : 110,
      "endColumnNumber" : 121
    },
    "astNodeNumber" : 7,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 110,
        "startColumnNumber" : 49,
        "endLineNumber" : 110,
        "endColumnNumber" : 122
      },
      "nodeContext" : "JDBCUtils.safeGetString(dbResult,((Number)objectNameColumn).intValue())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 110,
        "startColumnNumber" : 36,
        "endLineNumber" : 110,
        "endColumnNumber" : 122
      },
      "nodeContext" : "objectName=JDBCUtils.safeGetString(dbResult,((Number)objectNameColumn).intValue())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 13,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 110,
        "startColumnNumber" : 36,
        "endLineNumber" : 110,
        "endColumnNumber" : 123
      },
      "nodeContext" : "objectName=JDBCUtils.safeGetString(dbResult,((Number)objectNameColumn).intValue());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 161,
        "startLineNumber" : 109,
        "startColumnNumber" : 72,
        "endLineNumber" : 111,
        "endColumnNumber" : 33
      },
      "nodeContext" : "{\n  objectName=JDBCUtils.safeGetString(dbResult,((Number)objectNameColumn).intValue());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 364,
        "startLineNumber" : 109,
        "startColumnNumber" : 32,
        "endLineNumber" : 113,
        "endColumnNumber" : 33
      },
      "nodeContext" : "if (objectNameColumn instanceof Number) {\n  objectName=JDBCUtils.safeGetString(dbResult,((Number)objectNameColumn).intValue());\n}\n else {\n  objectName=JDBCUtils.safeGetStringTrimmed(dbResult,objectNameColumn.toString());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 31,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1060,
        "startLineNumber" : 107,
        "startColumnNumber" : 48,
        "endLineNumber" : 124,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  String objectName;\n  if (objectNameColumn instanceof Number) {\n    objectName=JDBCUtils.safeGetString(dbResult,((Number)objectNameColumn).intValue());\n  }\n else {\n    objectName=JDBCUtils.safeGetStringTrimmed(dbResult,objectNameColumn.toString());\n  }\n  if (objectName == null) {\n    log.debug(\"NULL object name in \" + this);\n    continue;\n  }\n  object=super.getCachedObject(objectName);\n  if (object == null) {\n    log.debug(\"Object '\" + objectName + \"' not found in struct cache (\"+ getClass().getSimpleName()+ \")\");\n    continue;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 75,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1080,
        "startLineNumber" : 107,
        "startColumnNumber" : 28,
        "endLineNumber" : 124,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (object == null) {\n  String objectName;\n  if (objectNameColumn instanceof Number) {\n    objectName=JDBCUtils.safeGetString(dbResult,((Number)objectNameColumn).intValue());\n  }\n else {\n    objectName=JDBCUtils.safeGetStringTrimmed(dbResult,objectNameColumn.toString());\n  }\n  if (objectName == null) {\n    log.debug(\"NULL object name in \" + this);\n    continue;\n  }\n  object=super.getCachedObject(objectName);\n  if (object == null) {\n    log.debug(\"Object '\" + objectName + \"' not found in struct cache (\"+ getClass().getSimpleName()+ \")\");\n    continue;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 79,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 2103,
        "startLineNumber" : 102,
        "startColumnNumber" : 48,
        "endLineNumber" : 141,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  if (monitor.isCanceled()) {\n    return;\n  }\n  OBJECT object=forObject;\n  if (object == null) {\n    String objectName;\n    if (objectNameColumn instanceof Number) {\n      objectName=JDBCUtils.safeGetString(dbResult,((Number)objectNameColumn).intValue());\n    }\n else {\n      objectName=JDBCUtils.safeGetStringTrimmed(dbResult,objectNameColumn.toString());\n    }\n    if (objectName == null) {\n      log.debug(\"NULL object name in \" + this);\n      continue;\n    }\n    object=super.getCachedObject(objectName);\n    if (object == null) {\n      log.debug(\"Object '\" + objectName + \"' not found in struct cache (\"+ getClass().getSimpleName()+ \")\");\n      continue;\n    }\n  }\n  if (isChildrenCached(object)) {\n    continue;\n  }\n  CHILD child=fetchChild(session,owner,object,dbResult);\n  if (child == null) {\n    continue;\n  }\n  List<CHILD> children=objectMap.get(object);\n  if (children == null) {\n    children=new ArrayList<>();\n    objectMap.put(object,children);\n  }\n  children.add(child);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 150,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2127,
        "startLineNumber" : 102,
        "startColumnNumber" : 24,
        "endLineNumber" : 141,
        "endColumnNumber" : 25
      },
      "nodeContext" : "while (dbResult.next()) {\n  if (monitor.isCanceled()) {\n    return;\n  }\n  OBJECT object=forObject;\n  if (object == null) {\n    String objectName;\n    if (objectNameColumn instanceof Number) {\n      objectName=JDBCUtils.safeGetString(dbResult,((Number)objectNameColumn).intValue());\n    }\n else {\n      objectName=JDBCUtils.safeGetStringTrimmed(dbResult,objectNameColumn.toString());\n    }\n    if (objectName == null) {\n      log.debug(\"NULL object name in \" + this);\n      continue;\n    }\n    object=super.getCachedObject(objectName);\n    if (object == null) {\n      log.debug(\"Object '\" + objectName + \"' not found in struct cache (\"+ getClass().getSimpleName()+ \")\");\n      continue;\n    }\n  }\n  if (isChildrenCached(object)) {\n    continue;\n  }\n  CHILD child=fetchChild(session,owner,object,dbResult);\n  if (child == null) {\n    continue;\n  }\n  List<CHILD> children=objectMap.get(object);\n  if (children == null) {\n    children=new ArrayList<>();\n    objectMap.put(object,children);\n  }\n  children.add(child);\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 154,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3885,
        "startLineNumber" : 101,
        "startColumnNumber" : 24,
        "endLineNumber" : 171,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  while (dbResult.next()) {\n    if (monitor.isCanceled()) {\n      return;\n    }\n    OBJECT object=forObject;\n    if (object == null) {\n      String objectName;\n      if (objectNameColumn instanceof Number) {\n        objectName=JDBCUtils.safeGetString(dbResult,((Number)objectNameColumn).intValue());\n      }\n else {\n        objectName=JDBCUtils.safeGetStringTrimmed(dbResult,objectNameColumn.toString());\n      }\n      if (objectName == null) {\n        log.debug(\"NULL object name in \" + this);\n        continue;\n      }\n      object=super.getCachedObject(objectName);\n      if (object == null) {\n        log.debug(\"Object '\" + objectName + \"' not found in struct cache (\"+ getClass().getSimpleName()+ \")\");\n        continue;\n      }\n    }\n    if (isChildrenCached(object)) {\n      continue;\n    }\n    CHILD child=fetchChild(session,owner,object,dbResult);\n    if (child == null) {\n      continue;\n    }\n    List<CHILD> children=objectMap.get(object);\n    if (children == null) {\n      children=new ArrayList<>();\n      objectMap.put(object,children);\n    }\n    children.add(child);\n  }\n  if (monitor.isCanceled()) {\n    return;\n  }\n  for (  Map.Entry<OBJECT,List<CHILD>> colEntry : objectMap.entrySet()) {\n    if (!isChildrenCached(colEntry.getKey())) {\n      cacheChildren(colEntry.getKey(),colEntry.getValue());\n    }\n  }\n  if (forObject == null) {\n    if (objectMap.isEmpty()) {\n    }\n else {\n      for (      OBJECT tmpObject : getAllObjects(monitor,owner)) {\n        if (!isChildrenCached(tmpObject) && !objectMap.containsKey(tmpObject)) {\n          cacheChildren(tmpObject,new ArrayList<>());\n        }\n      }\n      this.childrenCached=true;\n    }\n  }\n else   if (!objectMap.containsKey(forObject)) {\n    cacheChildren(forObject,new ArrayList<>());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 259,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3965,
        "startLineNumber" : 101,
        "startColumnNumber" : 20,
        "endLineNumber" : 173,
        "endColumnNumber" : 21
      },
      "nodeContext" : "try {\n  while (dbResult.next()) {\n    if (monitor.isCanceled()) {\n      return;\n    }\n    OBJECT object=forObject;\n    if (object == null) {\n      String objectName;\n      if (objectNameColumn instanceof Number) {\n        objectName=JDBCUtils.safeGetString(dbResult,((Number)objectNameColumn).intValue());\n      }\n else {\n        objectName=JDBCUtils.safeGetStringTrimmed(dbResult,objectNameColumn.toString());\n      }\n      if (objectName == null) {\n        log.debug(\"NULL object name in \" + this);\n        continue;\n      }\n      object=super.getCachedObject(objectName);\n      if (object == null) {\n        log.debug(\"Object '\" + objectName + \"' not found in struct cache (\"+ getClass().getSimpleName()+ \")\");\n        continue;\n      }\n    }\n    if (isChildrenCached(object)) {\n      continue;\n    }\n    CHILD child=fetchChild(session,owner,object,dbResult);\n    if (child == null) {\n      continue;\n    }\n    List<CHILD> children=objectMap.get(object);\n    if (children == null) {\n      children=new ArrayList<>();\n      objectMap.put(object,children);\n    }\n    children.add(child);\n  }\n  if (monitor.isCanceled()) {\n    return;\n  }\n  for (  Map.Entry<OBJECT,List<CHILD>> colEntry : objectMap.entrySet()) {\n    if (!isChildrenCached(colEntry.getKey())) {\n      cacheChildren(colEntry.getKey(),colEntry.getValue());\n    }\n  }\n  if (forObject == null) {\n    if (objectMap.isEmpty()) {\n    }\n else {\n      for (      OBJECT tmpObject : getAllObjects(monitor,owner)) {\n        if (!isChildrenCached(tmpObject) && !objectMap.containsKey(tmpObject)) {\n          cacheChildren(tmpObject,new ArrayList<>());\n        }\n      }\n      this.childrenCached=true;\n    }\n  }\n else   if (!objectMap.containsKey(forObject)) {\n    cacheChildren(forObject,new ArrayList<>());\n  }\n}\n  finally {\n  dbResult.close();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 265,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 4007,
        "startLineNumber" : 100,
        "startColumnNumber" : 38,
        "endLineNumber" : 174,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  try {\n    while (dbResult.next()) {\n      if (monitor.isCanceled()) {\n        return;\n      }\n      OBJECT object=forObject;\n      if (object == null) {\n        String objectName;\n        if (objectNameColumn instanceof Number) {\n          objectName=JDBCUtils.safeGetString(dbResult,((Number)objectNameColumn).intValue());\n        }\n else {\n          objectName=JDBCUtils.safeGetStringTrimmed(dbResult,objectNameColumn.toString());\n        }\n        if (objectName == null) {\n          log.debug(\"NULL object name in \" + this);\n          continue;\n        }\n        object=super.getCachedObject(objectName);\n        if (object == null) {\n          log.debug(\"Object '\" + objectName + \"' not found in struct cache (\"+ getClass().getSimpleName()+ \")\");\n          continue;\n        }\n      }\n      if (isChildrenCached(object)) {\n        continue;\n      }\n      CHILD child=fetchChild(session,owner,object,dbResult);\n      if (child == null) {\n        continue;\n      }\n      List<CHILD> children=objectMap.get(object);\n      if (children == null) {\n        children=new ArrayList<>();\n        objectMap.put(object,children);\n      }\n      children.add(child);\n    }\n    if (monitor.isCanceled()) {\n      return;\n    }\n    for (    Map.Entry<OBJECT,List<CHILD>> colEntry : objectMap.entrySet()) {\n      if (!isChildrenCached(colEntry.getKey())) {\n        cacheChildren(colEntry.getKey(),colEntry.getValue());\n      }\n    }\n    if (forObject == null) {\n      if (objectMap.isEmpty()) {\n      }\n else {\n        for (        OBJECT tmpObject : getAllObjects(monitor,owner)) {\n          if (!isChildrenCached(tmpObject) && !objectMap.containsKey(tmpObject)) {\n            cacheChildren(tmpObject,new ArrayList<>());\n          }\n        }\n        this.childrenCached=true;\n      }\n    }\n else     if (!objectMap.containsKey(forObject)) {\n      cacheChildren(forObject,new ArrayList<>());\n    }\n  }\n  finally {\n    dbResult.close();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 266,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4029,
        "startLineNumber" : 100,
        "startColumnNumber" : 16,
        "endLineNumber" : 174,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (dbResult != null) {\n  try {\n    while (dbResult.next()) {\n      if (monitor.isCanceled()) {\n        return;\n      }\n      OBJECT object=forObject;\n      if (object == null) {\n        String objectName;\n        if (objectNameColumn instanceof Number) {\n          objectName=JDBCUtils.safeGetString(dbResult,((Number)objectNameColumn).intValue());\n        }\n else {\n          objectName=JDBCUtils.safeGetStringTrimmed(dbResult,objectNameColumn.toString());\n        }\n        if (objectName == null) {\n          log.debug(\"NULL object name in \" + this);\n          continue;\n        }\n        object=super.getCachedObject(objectName);\n        if (object == null) {\n          log.debug(\"Object '\" + objectName + \"' not found in struct cache (\"+ getClass().getSimpleName()+ \")\");\n          continue;\n        }\n      }\n      if (isChildrenCached(object)) {\n        continue;\n      }\n      CHILD child=fetchChild(session,owner,object,dbResult);\n      if (child == null) {\n        continue;\n      }\n      List<CHILD> children=objectMap.get(object);\n      if (children == null) {\n        children=new ArrayList<>();\n        objectMap.put(object,children);\n      }\n      children.add(child);\n    }\n    if (monitor.isCanceled()) {\n      return;\n    }\n    for (    Map.Entry<OBJECT,List<CHILD>> colEntry : objectMap.entrySet()) {\n      if (!isChildrenCached(colEntry.getKey())) {\n        cacheChildren(colEntry.getKey(),colEntry.getValue());\n      }\n    }\n    if (forObject == null) {\n      if (objectMap.isEmpty()) {\n      }\n else {\n        for (        OBJECT tmpObject : getAllObjects(monitor,owner)) {\n          if (!isChildrenCached(tmpObject) && !objectMap.containsKey(tmpObject)) {\n            cacheChildren(tmpObject,new ArrayList<>());\n          }\n        }\n        this.childrenCached=true;\n      }\n    }\n else     if (!objectMap.containsKey(forObject)) {\n      cacheChildren(forObject,new ArrayList<>());\n    }\n  }\n  finally {\n    dbResult.close();\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 270,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4243,
        "startLineNumber" : 96,
        "startColumnNumber" : 93,
        "endLineNumber" : 175,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  dbStat.setFetchSize(DBConstants.METADATA_FETCH_SIZE);\n  dbStat.executeStatement();\n  JDBCResultSet dbResult=dbStat.getResultSet();\n  if (dbResult != null) {\n    try {\n      while (dbResult.next()) {\n        if (monitor.isCanceled()) {\n          return;\n        }\n        OBJECT object=forObject;\n        if (object == null) {\n          String objectName;\n          if (objectNameColumn instanceof Number) {\n            objectName=JDBCUtils.safeGetString(dbResult,((Number)objectNameColumn).intValue());\n          }\n else {\n            objectName=JDBCUtils.safeGetStringTrimmed(dbResult,objectNameColumn.toString());\n          }\n          if (objectName == null) {\n            log.debug(\"NULL object name in \" + this);\n            continue;\n          }\n          object=super.getCachedObject(objectName);\n          if (object == null) {\n            log.debug(\"Object '\" + objectName + \"' not found in struct cache (\"+ getClass().getSimpleName()+ \")\");\n            continue;\n          }\n        }\n        if (isChildrenCached(object)) {\n          continue;\n        }\n        CHILD child=fetchChild(session,owner,object,dbResult);\n        if (child == null) {\n          continue;\n        }\n        List<CHILD> children=objectMap.get(object);\n        if (children == null) {\n          children=new ArrayList<>();\n          objectMap.put(object,children);\n        }\n        children.add(child);\n      }\n      if (monitor.isCanceled()) {\n        return;\n      }\n      for (      Map.Entry<OBJECT,List<CHILD>> colEntry : objectMap.entrySet()) {\n        if (!isChildrenCached(colEntry.getKey())) {\n          cacheChildren(colEntry.getKey(),colEntry.getValue());\n        }\n      }\n      if (forObject == null) {\n        if (objectMap.isEmpty()) {\n        }\n else {\n          for (          OBJECT tmpObject : getAllObjects(monitor,owner)) {\n            if (!isChildrenCached(tmpObject) && !objectMap.containsKey(tmpObject)) {\n              cacheChildren(tmpObject,new ArrayList<>());\n            }\n          }\n          this.childrenCached=true;\n        }\n      }\n else       if (!objectMap.containsKey(forObject)) {\n        cacheChildren(forObject,new ArrayList<>());\n      }\n    }\n  finally {\n      dbResult.close();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 290,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4324,
        "startLineNumber" : 96,
        "startColumnNumber" : 12,
        "endLineNumber" : 175,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try (JDBCStatement dbStat=prepareChildrenStatement(session,owner,forObject)){\n  dbStat.setFetchSize(DBConstants.METADATA_FETCH_SIZE);\n  dbStat.executeStatement();\n  JDBCResultSet dbResult=dbStat.getResultSet();\n  if (dbResult != null) {\n    try {\n      while (dbResult.next()) {\n        if (monitor.isCanceled()) {\n          return;\n        }\n        OBJECT object=forObject;\n        if (object == null) {\n          String objectName;\n          if (objectNameColumn instanceof Number) {\n            objectName=JDBCUtils.safeGetString(dbResult,((Number)objectNameColumn).intValue());\n          }\n else {\n            objectName=JDBCUtils.safeGetStringTrimmed(dbResult,objectNameColumn.toString());\n          }\n          if (objectName == null) {\n            log.debug(\"NULL object name in \" + this);\n            continue;\n          }\n          object=super.getCachedObject(objectName);\n          if (object == null) {\n            log.debug(\"Object '\" + objectName + \"' not found in struct cache (\"+ getClass().getSimpleName()+ \")\");\n            continue;\n          }\n        }\n        if (isChildrenCached(object)) {\n          continue;\n        }\n        CHILD child=fetchChild(session,owner,object,dbResult);\n        if (child == null) {\n          continue;\n        }\n        List<CHILD> children=objectMap.get(object);\n        if (children == null) {\n          children=new ArrayList<>();\n          objectMap.put(object,children);\n        }\n        children.add(child);\n      }\n      if (monitor.isCanceled()) {\n        return;\n      }\n      for (      Map.Entry<OBJECT,List<CHILD>> colEntry : objectMap.entrySet()) {\n        if (!isChildrenCached(colEntry.getKey())) {\n          cacheChildren(colEntry.getKey(),colEntry.getValue());\n        }\n      }\n      if (forObject == null) {\n        if (objectMap.isEmpty()) {\n        }\n else {\n          for (          OBJECT tmpObject : getAllObjects(monitor,owner)) {\n            if (!isChildrenCached(tmpObject) && !objectMap.containsKey(tmpObject)) {\n              cacheChildren(tmpObject,new ArrayList<>());\n            }\n          }\n          this.childrenCached=true;\n        }\n      }\n else       if (!objectMap.containsKey(forObject)) {\n        cacheChildren(forObject,new ArrayList<>());\n      }\n    }\n  finally {\n      dbResult.close();\n    }\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 301,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4448,
        "startLineNumber" : 92,
        "startColumnNumber" : 98,
        "endLineNumber" : 176,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Map<OBJECT,List<CHILD>> objectMap=new HashMap<>();\n  try (JDBCStatement dbStat=prepareChildrenStatement(session,owner,forObject)){\n    dbStat.setFetchSize(DBConstants.METADATA_FETCH_SIZE);\n    dbStat.executeStatement();\n    JDBCResultSet dbResult=dbStat.getResultSet();\n    if (dbResult != null) {\n      try {\n        while (dbResult.next()) {\n          if (monitor.isCanceled()) {\n            return;\n          }\n          OBJECT object=forObject;\n          if (object == null) {\n            String objectName;\n            if (objectNameColumn instanceof Number) {\n              objectName=JDBCUtils.safeGetString(dbResult,((Number)objectNameColumn).intValue());\n            }\n else {\n              objectName=JDBCUtils.safeGetStringTrimmed(dbResult,objectNameColumn.toString());\n            }\n            if (objectName == null) {\n              log.debug(\"NULL object name in \" + this);\n              continue;\n            }\n            object=super.getCachedObject(objectName);\n            if (object == null) {\n              log.debug(\"Object '\" + objectName + \"' not found in struct cache (\"+ getClass().getSimpleName()+ \")\");\n              continue;\n            }\n          }\n          if (isChildrenCached(object)) {\n            continue;\n          }\n          CHILD child=fetchChild(session,owner,object,dbResult);\n          if (child == null) {\n            continue;\n          }\n          List<CHILD> children=objectMap.get(object);\n          if (children == null) {\n            children=new ArrayList<>();\n            objectMap.put(object,children);\n          }\n          children.add(child);\n        }\n        if (monitor.isCanceled()) {\n          return;\n        }\n        for (        Map.Entry<OBJECT,List<CHILD>> colEntry : objectMap.entrySet()) {\n          if (!isChildrenCached(colEntry.getKey())) {\n            cacheChildren(colEntry.getKey(),colEntry.getValue());\n          }\n        }\n        if (forObject == null) {\n          if (objectMap.isEmpty()) {\n          }\n else {\n            for (            OBJECT tmpObject : getAllObjects(monitor,owner)) {\n              if (!isChildrenCached(tmpObject) && !objectMap.containsKey(tmpObject)) {\n                cacheChildren(tmpObject,new ArrayList<>());\n              }\n            }\n            this.childrenCached=true;\n          }\n        }\n else         if (!objectMap.containsKey(forObject)) {\n          cacheChildren(forObject,new ArrayList<>());\n        }\n      }\n  finally {\n        dbResult.close();\n      }\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 319,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4627,
        "startLineNumber" : 92,
        "startColumnNumber" : 8,
        "endLineNumber" : 178,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (JDBCSession session=DBUtils.openMetaSession(monitor,owner,\"Load child objects\")){\n  Map<OBJECT,List<CHILD>> objectMap=new HashMap<>();\n  try (JDBCStatement dbStat=prepareChildrenStatement(session,owner,forObject)){\n    dbStat.setFetchSize(DBConstants.METADATA_FETCH_SIZE);\n    dbStat.executeStatement();\n    JDBCResultSet dbResult=dbStat.getResultSet();\n    if (dbResult != null) {\n      try {\n        while (dbResult.next()) {\n          if (monitor.isCanceled()) {\n            return;\n          }\n          OBJECT object=forObject;\n          if (object == null) {\n            String objectName;\n            if (objectNameColumn instanceof Number) {\n              objectName=JDBCUtils.safeGetString(dbResult,((Number)objectNameColumn).intValue());\n            }\n else {\n              objectName=JDBCUtils.safeGetStringTrimmed(dbResult,objectNameColumn.toString());\n            }\n            if (objectName == null) {\n              log.debug(\"NULL object name in \" + this);\n              continue;\n            }\n            object=super.getCachedObject(objectName);\n            if (object == null) {\n              log.debug(\"Object '\" + objectName + \"' not found in struct cache (\"+ getClass().getSimpleName()+ \")\");\n              continue;\n            }\n          }\n          if (isChildrenCached(object)) {\n            continue;\n          }\n          CHILD child=fetchChild(session,owner,object,dbResult);\n          if (child == null) {\n            continue;\n          }\n          List<CHILD> children=objectMap.get(object);\n          if (children == null) {\n            children=new ArrayList<>();\n            objectMap.put(object,children);\n          }\n          children.add(child);\n        }\n        if (monitor.isCanceled()) {\n          return;\n        }\n        for (        Map.Entry<OBJECT,List<CHILD>> colEntry : objectMap.entrySet()) {\n          if (!isChildrenCached(colEntry.getKey())) {\n            cacheChildren(colEntry.getKey(),colEntry.getValue());\n          }\n        }\n        if (forObject == null) {\n          if (objectMap.isEmpty()) {\n          }\n else {\n            for (            OBJECT tmpObject : getAllObjects(monitor,owner)) {\n              if (!isChildrenCached(tmpObject) && !objectMap.containsKey(tmpObject)) {\n                cacheChildren(tmpObject,new ArrayList<>());\n              }\n            }\n            this.childrenCached=true;\n          }\n        }\n else         if (!objectMap.containsKey(forObject)) {\n          cacheChildren(forObject,new ArrayList<>());\n        }\n      }\n  finally {\n        dbResult.close();\n      }\n    }\n  }\n }\n catch (SQLException ex) {\n  throw new DBException(ex,dataSource);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 343,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5358,
        "startLineNumber" : 76,
        "startColumnNumber" : 4,
        "endLineNumber" : 179,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if ((forObject == null && this.childrenCached) || (forObject != null && (!forObject.isPersisted() || isChildrenCached(forObject))) || monitor.isCanceled()) {\n    return;\n  }\n  if (forObject == null) {\n    super.loadObjects(monitor,owner);\n  }\n  DBPDataSource dataSource=owner.getDataSource();\n  if (dataSource == null) {\n    throw new DBException(ModelMessages.error_not_connected_to_database);\n  }\n  try (JDBCSession session=DBUtils.openMetaSession(monitor,owner,\"Load child objects\")){\n    Map<OBJECT,List<CHILD>> objectMap=new HashMap<>();\n    try (JDBCStatement dbStat=prepareChildrenStatement(session,owner,forObject)){\n      dbStat.setFetchSize(DBConstants.METADATA_FETCH_SIZE);\n      dbStat.executeStatement();\n      JDBCResultSet dbResult=dbStat.getResultSet();\n      if (dbResult != null) {\n        try {\n          while (dbResult.next()) {\n            if (monitor.isCanceled()) {\n              return;\n            }\n            OBJECT object=forObject;\n            if (object == null) {\n              String objectName;\n              if (objectNameColumn instanceof Number) {\n                objectName=JDBCUtils.safeGetString(dbResult,((Number)objectNameColumn).intValue());\n              }\n else {\n                objectName=JDBCUtils.safeGetStringTrimmed(dbResult,objectNameColumn.toString());\n              }\n              if (objectName == null) {\n                log.debug(\"NULL object name in \" + this);\n                continue;\n              }\n              object=super.getCachedObject(objectName);\n              if (object == null) {\n                log.debug(\"Object '\" + objectName + \"' not found in struct cache (\"+ getClass().getSimpleName()+ \")\");\n                continue;\n              }\n            }\n            if (isChildrenCached(object)) {\n              continue;\n            }\n            CHILD child=fetchChild(session,owner,object,dbResult);\n            if (child == null) {\n              continue;\n            }\n            List<CHILD> children=objectMap.get(object);\n            if (children == null) {\n              children=new ArrayList<>();\n              objectMap.put(object,children);\n            }\n            children.add(child);\n          }\n          if (monitor.isCanceled()) {\n            return;\n          }\n          for (          Map.Entry<OBJECT,List<CHILD>> colEntry : objectMap.entrySet()) {\n            if (!isChildrenCached(colEntry.getKey())) {\n              cacheChildren(colEntry.getKey(),colEntry.getValue());\n            }\n          }\n          if (forObject == null) {\n            if (objectMap.isEmpty()) {\n            }\n else {\n              for (              OBJECT tmpObject : getAllObjects(monitor,owner)) {\n                if (!isChildrenCached(tmpObject) && !objectMap.containsKey(tmpObject)) {\n                  cacheChildren(tmpObject,new ArrayList<>());\n                }\n              }\n              this.childrenCached=true;\n            }\n          }\n else           if (!objectMap.containsKey(forObject)) {\n            cacheChildren(forObject,new ArrayList<>());\n          }\n        }\n  finally {\n          dbResult.close();\n        }\n      }\n    }\n   }\n catch (  SQLException ex) {\n    throw new DBException(ex,dataSource);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 403,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5834,
        "startLineNumber" : 65,
        "startColumnNumber" : 4,
        "endLineNumber" : 179,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Reads children objects from database\n * @param monitor monitor\n * @param forObject object for which to read children. If null then reads children for all objects in this container.\n * @throws org.jkiss.dbeaver.DBException on error\n */\npublic synchronized void loadChildren(DBRProgressMonitor monitor,OWNER owner,@Nullable final OBJECT forObject) throws DBException {\n  if ((forObject == null && this.childrenCached) || (forObject != null && (!forObject.isPersisted() || isChildrenCached(forObject))) || monitor.isCanceled()) {\n    return;\n  }\n  if (forObject == null) {\n    super.loadObjects(monitor,owner);\n  }\n  DBPDataSource dataSource=owner.getDataSource();\n  if (dataSource == null) {\n    throw new DBException(ModelMessages.error_not_connected_to_database);\n  }\n  try (JDBCSession session=DBUtils.openMetaSession(monitor,owner,\"Load child objects\")){\n    Map<OBJECT,List<CHILD>> objectMap=new HashMap<>();\n    try (JDBCStatement dbStat=prepareChildrenStatement(session,owner,forObject)){\n      dbStat.setFetchSize(DBConstants.METADATA_FETCH_SIZE);\n      dbStat.executeStatement();\n      JDBCResultSet dbResult=dbStat.getResultSet();\n      if (dbResult != null) {\n        try {\n          while (dbResult.next()) {\n            if (monitor.isCanceled()) {\n              return;\n            }\n            OBJECT object=forObject;\n            if (object == null) {\n              String objectName;\n              if (objectNameColumn instanceof Number) {\n                objectName=JDBCUtils.safeGetString(dbResult,((Number)objectNameColumn).intValue());\n              }\n else {\n                objectName=JDBCUtils.safeGetStringTrimmed(dbResult,objectNameColumn.toString());\n              }\n              if (objectName == null) {\n                log.debug(\"NULL object name in \" + this);\n                continue;\n              }\n              object=super.getCachedObject(objectName);\n              if (object == null) {\n                log.debug(\"Object '\" + objectName + \"' not found in struct cache (\"+ getClass().getSimpleName()+ \")\");\n                continue;\n              }\n            }\n            if (isChildrenCached(object)) {\n              continue;\n            }\n            CHILD child=fetchChild(session,owner,object,dbResult);\n            if (child == null) {\n              continue;\n            }\n            List<CHILD> children=objectMap.get(object);\n            if (children == null) {\n              children=new ArrayList<>();\n              objectMap.put(object,children);\n            }\n            children.add(child);\n          }\n          if (monitor.isCanceled()) {\n            return;\n          }\n          for (          Map.Entry<OBJECT,List<CHILD>> colEntry : objectMap.entrySet()) {\n            if (!isChildrenCached(colEntry.getKey())) {\n              cacheChildren(colEntry.getKey(),colEntry.getValue());\n            }\n          }\n          if (forObject == null) {\n            if (objectMap.isEmpty()) {\n            }\n else {\n              for (              OBJECT tmpObject : getAllObjects(monitor,owner)) {\n                if (!isChildrenCached(tmpObject) && !objectMap.containsKey(tmpObject)) {\n                  cacheChildren(tmpObject,new ArrayList<>());\n                }\n              }\n              this.childrenCached=true;\n            }\n          }\n else           if (!objectMap.containsKey(forObject)) {\n            cacheChildren(forObject,new ArrayList<>());\n          }\n        }\n  finally {\n          dbResult.close();\n        }\n      }\n    }\n   }\n catch (  SQLException ex) {\n    throw new DBException(ex,dataSource);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 426,
      "astHeight" : 24
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 110,
        "startColumnNumber" : 36,
        "endLineNumber" : 110,
        "endColumnNumber" : 123
      },
      "nodeContext" : "objectName=JDBCUtils.safeGetString(dbResult,((Number)objectNameColumn).intValue());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 8
    },
    "tokenLength" : 3,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 38,
    "startLineNumber" : 110,
    "startColumnNumber" : 83,
    "endLineNumber" : 110,
    "endColumnNumber" : 121
  } ],
  "layoutRelationDataList" : [ ]
}