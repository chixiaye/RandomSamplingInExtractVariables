{
  "id" : 11,
  "expression" : "Collections",
  "projectName" : "termux@termux-app",
  "commitID" : "6334470f81bdf003b8567af9e3531cec4dce560d",
  "filePath" : "/termux-shared/src/main/java/com/termux/shared/shell/command/environment/ShellEnvironmentUtils.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Collections",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 76,
      "startColumnNumber" : 8,
      "endLineNumber" : 76,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 76,
        "startColumnNumber" : 8,
        "endLineNumber" : 76,
        "endColumnNumber" : 41
      },
      "nodeContext" : "Collections.sort(environmentList)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 76,
        "startColumnNumber" : 8,
        "endLineNumber" : 76,
        "endColumnNumber" : 42
      },
      "nodeContext" : "Collections.sort(environmentList);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 607,
        "startLineNumber" : 74,
        "startColumnNumber" : 113,
        "endLineNumber" : 85,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  StringBuilder environment=new StringBuilder();\n  Collections.sort(environmentList);\n  for (  ShellEnvironmentVariable variable : environmentList) {\n    if (isValidEnvironmentVariableNameValuePair(variable.name,variable.value,true) && variable.value != null) {\n      environment.append(\"export \").append(variable.name).append(\"=\\\"\").append(variable.escaped ? variable.value : variable.value.replaceAll(\"([\\\"`\\\\\\\\$])\",\"\\\\\\\\$1\")).append(\"\\\"\\n\");\n    }\n  }\n  return environment.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 74,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1795,
        "startLineNumber" : 54,
        "startColumnNumber" : 4,
        "endLineNumber" : 85,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Convert environment  {@link HashMap} to `.env` file {@link String}. The items in the `.env` file have the format `export name=\"value\"`. If the  {@link ShellEnvironmentVariable#escaped} is set to {@code true}, then {@link ShellEnvironmentVariable#value} will be considered to be a literal value that hasalready been escaped by the caller, otherwise all the `\"`\\$` in the value will be escaped with `a backslash `\\`, like `\\\"`. Note that if `$` is escaped and if its part of variable, then variable expansion will not happen if `.env` file is sourced. The `\\` at the end of a value line means line continuation. Value can contain newline characters. Check  {@link #isValidEnvironmentVariableName(String)} and {@link #isValidEnvironmentVariableValue(String)}for valid variable names and values. https://github.com/ko1nksm/shdotenv#env-file-syntax https://github.com/ko1nksm/shdotenv/blob/main/docs/specification.md\n */\n@NonNull public static String convertEnvironmentToDotEnvFile(@NonNull List<ShellEnvironmentVariable> environmentList){\n  StringBuilder environment=new StringBuilder();\n  Collections.sort(environmentList);\n  for (  ShellEnvironmentVariable variable : environmentList) {\n    if (isValidEnvironmentVariableNameValuePair(variable.name,variable.value,true) && variable.value != null) {\n      environment.append(\"export \").append(variable.name).append(\"=\\\"\").append(variable.escaped ? variable.value : variable.value.replaceAll(\"([\\\"`\\\\\\\\$])\",\"\\\\\\\\$1\")).append(\"\\\"\\n\");\n    }\n  }\n  return environment.toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 92,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 76,
        "startColumnNumber" : 8,
        "endLineNumber" : 76,
        "endColumnNumber" : 42
      },
      "nodeContext" : "Collections.sort(environmentList);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.Collections"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 76,
    "startColumnNumber" : 8,
    "endLineNumber" : 76,
    "endColumnNumber" : 19
  } ],
  "layoutRelationDataList" : [ ]
}