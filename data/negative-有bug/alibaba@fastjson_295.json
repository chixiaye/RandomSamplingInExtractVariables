{
  "id" : 295,
  "expression" : "\"\\\"\"",
  "projectName" : "alibaba@fastjson",
  "commitID" : "d3797da65a3d9f804c9e275c25395c59e31f097d",
  "filePath" : "/src/test/java/com/alibaba/json/bvt/parser/JSONScannerTest__x.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"\\\"\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 12,
      "startColumnNumber" : 19,
      "endLineNumber" : 12,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 12,
        "startColumnNumber" : 8,
        "endLineNumber" : 12,
        "endColumnNumber" : 24
      },
      "nodeContext" : "buf.append(\"\\\"\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 12,
        "startColumnNumber" : 8,
        "endLineNumber" : 12,
        "endColumnNumber" : 25
      },
      "nodeContext" : "buf.append(\"\\\"\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 670,
        "startLineNumber" : 10,
        "startColumnNumber" : 42,
        "endLineNumber" : 29,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  StringBuilder buf=new StringBuilder();\n  buf.append(\"\\\"\");\n  for (int i=0; i < 16; ++i) {\n    for (int j=0; j < 16; ++j) {\n      buf.append(\"\\\\x\");\n      buf.append(Integer.toHexString(i));\n      buf.append(Integer.toHexString(j));\n    }\n  }\n  buf.append(\"\\\"\");\n  String jsonString=(String)JSON.parse(buf.toString());\n  Assert.assertEquals(16 * 16,jsonString.length());\n  for (int i=0; i < 16 * 16; ++i) {\n    char c=jsonString.charAt(i);\n    if ((int)c != i) {\n      Assert.fail();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 121,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 708,
        "startLineNumber" : 10,
        "startColumnNumber" : 4,
        "endLineNumber" : 29,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void test_x() throws Exception {\n  StringBuilder buf=new StringBuilder();\n  buf.append(\"\\\"\");\n  for (int i=0; i < 16; ++i) {\n    for (int j=0; j < 16; ++j) {\n      buf.append(\"\\\\x\");\n      buf.append(Integer.toHexString(i));\n      buf.append(Integer.toHexString(j));\n    }\n  }\n  buf.append(\"\\\"\");\n  String jsonString=(String)JSON.parse(buf.toString());\n  Assert.assertEquals(16 * 16,jsonString.length());\n  for (int i=0; i < 16 * 16; ++i) {\n    char c=jsonString.charAt(i);\n    if ((int)c != i) {\n      Assert.fail();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 127,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 12,
        "startColumnNumber" : 8,
        "endLineNumber" : 12,
        "endColumnNumber" : 25
      },
      "nodeContext" : "buf.append(\"\\\"\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"\\\"\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 20,
      "startColumnNumber" : 19,
      "endLineNumber" : 20,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 20,
        "startColumnNumber" : 8,
        "endLineNumber" : 20,
        "endColumnNumber" : 24
      },
      "nodeContext" : "buf.append(\"\\\"\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 20,
        "startColumnNumber" : 8,
        "endLineNumber" : 20,
        "endColumnNumber" : 25
      },
      "nodeContext" : "buf.append(\"\\\"\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 670,
        "startLineNumber" : 10,
        "startColumnNumber" : 42,
        "endLineNumber" : 29,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  StringBuilder buf=new StringBuilder();\n  buf.append(\"\\\"\");\n  for (int i=0; i < 16; ++i) {\n    for (int j=0; j < 16; ++j) {\n      buf.append(\"\\\\x\");\n      buf.append(Integer.toHexString(i));\n      buf.append(Integer.toHexString(j));\n    }\n  }\n  buf.append(\"\\\"\");\n  String jsonString=(String)JSON.parse(buf.toString());\n  Assert.assertEquals(16 * 16,jsonString.length());\n  for (int i=0; i < 16 * 16; ++i) {\n    char c=jsonString.charAt(i);\n    if ((int)c != i) {\n      Assert.fail();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 121,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 708,
        "startLineNumber" : 10,
        "startColumnNumber" : 4,
        "endLineNumber" : 29,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void test_x() throws Exception {\n  StringBuilder buf=new StringBuilder();\n  buf.append(\"\\\"\");\n  for (int i=0; i < 16; ++i) {\n    for (int j=0; j < 16; ++j) {\n      buf.append(\"\\\\x\");\n      buf.append(Integer.toHexString(i));\n      buf.append(Integer.toHexString(j));\n    }\n  }\n  buf.append(\"\\\"\");\n  String jsonString=(String)JSON.parse(buf.toString());\n  Assert.assertEquals(16 * 16,jsonString.length());\n  for (int i=0; i < 16 * 16; ++i) {\n    char c=jsonString.charAt(i);\n    if ((int)c != i) {\n      Assert.fail();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 127,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 20,
        "startColumnNumber" : 8,
        "endLineNumber" : 20,
        "endColumnNumber" : 25
      },
      "nodeContext" : "buf.append(\"\\\"\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 12,
    "startColumnNumber" : 19,
    "endLineNumber" : 12,
    "endColumnNumber" : 23
  }, {
    "charLength" : 4,
    "startLineNumber" : 20,
    "startColumnNumber" : 19,
    "endLineNumber" : 20,
    "endColumnNumber" : 23
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}