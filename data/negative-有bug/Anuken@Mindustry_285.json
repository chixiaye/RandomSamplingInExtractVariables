{
  "id" : 285,
  "expression" : "(wx % chunkSize)",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/core/src/mindustry/editor/MapRenderer.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(wx % chunkSize)",
    "nodeType" : "ParenthesizedExpression",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 106,
      "startColumnNumber" : 22,
      "endLineNumber" : 106,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 106,
        "startColumnNumber" : 22,
        "endLineNumber" : 106,
        "endColumnNumber" : 69
      },
      "nodeContext" : "(wx % chunkSize) + (wy % chunkSize) * chunkSize",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 106,
        "startColumnNumber" : 12,
        "endLineNumber" : 106,
        "endColumnNumber" : 69
      },
      "nodeContext" : "idxWall=(wx % chunkSize) + (wy % chunkSize) * chunkSize",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 106,
        "startColumnNumber" : 8,
        "endLineNumber" : 106,
        "endColumnNumber" : 70
      },
      "nodeContext" : "int idxWall=(wx % chunkSize) + (wy % chunkSize) * chunkSize;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2543,
        "startLineNumber" : 95,
        "startColumnNumber" : 39,
        "endLineNumber" : 151,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int x=wx / chunkSize, y=wy / chunkSize;\n  IndexedRenderer mesh=chunks[x][y];\n  Tile tile=editor.tiles().getn(wx,wy);\n  Team team=tile.team();\n  Block floor=tile.floor();\n  Block wall=tile.block();\n  TextureRegion region;\n  int idxWall=(wx % chunkSize) + (wy % chunkSize) * chunkSize;\n  int idxDecal=(wx % chunkSize) + (wy % chunkSize) * chunkSize + chunkSize * chunkSize;\n  boolean center=tile.isCenter();\n  if (wall != Blocks.air && wall.synthetic()) {\n    region=!Core.atlas.isFound(wall.editorIcon()) || !center ? Core.atlas.find(\"clear-editor\") : wall.editorIcon();\n    float width=region.width * Draw.scl, height=region.height * Draw.scl;\n    mesh.draw(idxWall,region,wx * tilesize + wall.offset + (tilesize - width) / 2f,wy * tilesize + wall.offset + (tilesize - height) / 2f,width,height,tile.build == null || !wall.rotate ? 0 : tile.build.rotdeg());\n  }\n else {\n    region=floor.editorVariantRegions()[Mathf.randomSeed(idxWall,0,floor.editorVariantRegions().length - 1)];\n    mesh.draw(idxWall,region,wx * tilesize,wy * tilesize,8,8);\n  }\n  float offsetX=-(wall.size / 3) * tilesize, offsetY=-(wall.size / 3) * tilesize;\n  if ((wall.update || wall.destructible) && center) {\n    mesh.setColor(team.color);\n    region=Core.atlas.find(\"block-border-editor\");\n  }\n else   if (!wall.synthetic() && wall != Blocks.air && center) {\n    region=!Core.atlas.isFound(wall.editorIcon()) ? Core.atlas.find(\"clear-editor\") : wall.editorIcon();\n    offsetX=tilesize / 2f - region.width / 2f * Draw.scl;\n    offsetY=tilesize / 2f - region.height / 2f * Draw.scl;\n  }\n else   if (wall == Blocks.air && !tile.overlay().isAir()) {\n    region=tile.overlay().editorVariantRegions()[Mathf.randomSeed(idxWall,0,tile.overlay().editorVariantRegions().length - 1)];\n  }\n else {\n    region=Core.atlas.find(\"clear-editor\");\n  }\n  float width=region.width * Draw.scl, height=region.height * Draw.scl;\n  if (!wall.synthetic() && wall != Blocks.air && !wall.isMultiblock()) {\n    offsetX=0;\n    offsetY=0;\n    width=tilesize;\n    height=tilesize;\n  }\n  mesh.draw(idxDecal,region,wx * tilesize + offsetX,wy * tilesize + offsetY,width,height);\n  mesh.setColor(Color.white);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 493,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2578,
        "startLineNumber" : 95,
        "startColumnNumber" : 4,
        "endLineNumber" : 151,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void render(int wx,int wy){\n  int x=wx / chunkSize, y=wy / chunkSize;\n  IndexedRenderer mesh=chunks[x][y];\n  Tile tile=editor.tiles().getn(wx,wy);\n  Team team=tile.team();\n  Block floor=tile.floor();\n  Block wall=tile.block();\n  TextureRegion region;\n  int idxWall=(wx % chunkSize) + (wy % chunkSize) * chunkSize;\n  int idxDecal=(wx % chunkSize) + (wy % chunkSize) * chunkSize + chunkSize * chunkSize;\n  boolean center=tile.isCenter();\n  if (wall != Blocks.air && wall.synthetic()) {\n    region=!Core.atlas.isFound(wall.editorIcon()) || !center ? Core.atlas.find(\"clear-editor\") : wall.editorIcon();\n    float width=region.width * Draw.scl, height=region.height * Draw.scl;\n    mesh.draw(idxWall,region,wx * tilesize + wall.offset + (tilesize - width) / 2f,wy * tilesize + wall.offset + (tilesize - height) / 2f,width,height,tile.build == null || !wall.rotate ? 0 : tile.build.rotdeg());\n  }\n else {\n    region=floor.editorVariantRegions()[Mathf.randomSeed(idxWall,0,floor.editorVariantRegions().length - 1)];\n    mesh.draw(idxWall,region,wx * tilesize,wy * tilesize,8,8);\n  }\n  float offsetX=-(wall.size / 3) * tilesize, offsetY=-(wall.size / 3) * tilesize;\n  if ((wall.update || wall.destructible) && center) {\n    mesh.setColor(team.color);\n    region=Core.atlas.find(\"block-border-editor\");\n  }\n else   if (!wall.synthetic() && wall != Blocks.air && center) {\n    region=!Core.atlas.isFound(wall.editorIcon()) ? Core.atlas.find(\"clear-editor\") : wall.editorIcon();\n    offsetX=tilesize / 2f - region.width / 2f * Draw.scl;\n    offsetY=tilesize / 2f - region.height / 2f * Draw.scl;\n  }\n else   if (wall == Blocks.air && !tile.overlay().isAir()) {\n    region=tile.overlay().editorVariantRegions()[Mathf.randomSeed(idxWall,0,tile.overlay().editorVariantRegions().length - 1)];\n  }\n else {\n    region=Core.atlas.find(\"clear-editor\");\n  }\n  float width=region.width * Draw.scl, height=region.height * Draw.scl;\n  if (!wall.synthetic() && wall != Blocks.air && !wall.isMultiblock()) {\n    offsetX=0;\n    offsetY=0;\n    width=tilesize;\n    height=tilesize;\n  }\n  mesh.draw(idxDecal,region,wx * tilesize + offsetX,wy * tilesize + offsetY,width,height);\n  mesh.setColor(Color.white);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 503,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 106,
        "startColumnNumber" : 8,
        "endLineNumber" : 106,
        "endColumnNumber" : 70
      },
      "nodeContext" : "int idxWall=(wx % chunkSize) + (wy % chunkSize) * chunkSize;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    },
    "tokenLength" : 3,
    "type" : "int"
  }, {
    "nodeContext" : "(wx % chunkSize)",
    "nodeType" : "ParenthesizedExpression",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 107,
      "startColumnNumber" : 23,
      "endLineNumber" : 107,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 107,
        "startColumnNumber" : 23,
        "endLineNumber" : 107,
        "endColumnNumber" : 70
      },
      "nodeContext" : "(wx % chunkSize) + (wy % chunkSize) * chunkSize",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 107,
        "startColumnNumber" : 23,
        "endLineNumber" : 107,
        "endColumnNumber" : 94
      },
      "nodeContext" : "(wx % chunkSize) + (wy % chunkSize) * chunkSize + chunkSize * chunkSize",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 107,
        "startColumnNumber" : 12,
        "endLineNumber" : 107,
        "endColumnNumber" : 94
      },
      "nodeContext" : "idxDecal=(wx % chunkSize) + (wy % chunkSize) * chunkSize + chunkSize * chunkSize",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 107,
        "endColumnNumber" : 95
      },
      "nodeContext" : "int idxDecal=(wx % chunkSize) + (wy % chunkSize) * chunkSize + chunkSize * chunkSize;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2543,
        "startLineNumber" : 95,
        "startColumnNumber" : 39,
        "endLineNumber" : 151,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int x=wx / chunkSize, y=wy / chunkSize;\n  IndexedRenderer mesh=chunks[x][y];\n  Tile tile=editor.tiles().getn(wx,wy);\n  Team team=tile.team();\n  Block floor=tile.floor();\n  Block wall=tile.block();\n  TextureRegion region;\n  int idxWall=(wx % chunkSize) + (wy % chunkSize) * chunkSize;\n  int idxDecal=(wx % chunkSize) + (wy % chunkSize) * chunkSize + chunkSize * chunkSize;\n  boolean center=tile.isCenter();\n  if (wall != Blocks.air && wall.synthetic()) {\n    region=!Core.atlas.isFound(wall.editorIcon()) || !center ? Core.atlas.find(\"clear-editor\") : wall.editorIcon();\n    float width=region.width * Draw.scl, height=region.height * Draw.scl;\n    mesh.draw(idxWall,region,wx * tilesize + wall.offset + (tilesize - width) / 2f,wy * tilesize + wall.offset + (tilesize - height) / 2f,width,height,tile.build == null || !wall.rotate ? 0 : tile.build.rotdeg());\n  }\n else {\n    region=floor.editorVariantRegions()[Mathf.randomSeed(idxWall,0,floor.editorVariantRegions().length - 1)];\n    mesh.draw(idxWall,region,wx * tilesize,wy * tilesize,8,8);\n  }\n  float offsetX=-(wall.size / 3) * tilesize, offsetY=-(wall.size / 3) * tilesize;\n  if ((wall.update || wall.destructible) && center) {\n    mesh.setColor(team.color);\n    region=Core.atlas.find(\"block-border-editor\");\n  }\n else   if (!wall.synthetic() && wall != Blocks.air && center) {\n    region=!Core.atlas.isFound(wall.editorIcon()) ? Core.atlas.find(\"clear-editor\") : wall.editorIcon();\n    offsetX=tilesize / 2f - region.width / 2f * Draw.scl;\n    offsetY=tilesize / 2f - region.height / 2f * Draw.scl;\n  }\n else   if (wall == Blocks.air && !tile.overlay().isAir()) {\n    region=tile.overlay().editorVariantRegions()[Mathf.randomSeed(idxWall,0,tile.overlay().editorVariantRegions().length - 1)];\n  }\n else {\n    region=Core.atlas.find(\"clear-editor\");\n  }\n  float width=region.width * Draw.scl, height=region.height * Draw.scl;\n  if (!wall.synthetic() && wall != Blocks.air && !wall.isMultiblock()) {\n    offsetX=0;\n    offsetY=0;\n    width=tilesize;\n    height=tilesize;\n  }\n  mesh.draw(idxDecal,region,wx * tilesize + offsetX,wy * tilesize + offsetY,width,height);\n  mesh.setColor(Color.white);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 493,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2578,
        "startLineNumber" : 95,
        "startColumnNumber" : 4,
        "endLineNumber" : 151,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void render(int wx,int wy){\n  int x=wx / chunkSize, y=wy / chunkSize;\n  IndexedRenderer mesh=chunks[x][y];\n  Tile tile=editor.tiles().getn(wx,wy);\n  Team team=tile.team();\n  Block floor=tile.floor();\n  Block wall=tile.block();\n  TextureRegion region;\n  int idxWall=(wx % chunkSize) + (wy % chunkSize) * chunkSize;\n  int idxDecal=(wx % chunkSize) + (wy % chunkSize) * chunkSize + chunkSize * chunkSize;\n  boolean center=tile.isCenter();\n  if (wall != Blocks.air && wall.synthetic()) {\n    region=!Core.atlas.isFound(wall.editorIcon()) || !center ? Core.atlas.find(\"clear-editor\") : wall.editorIcon();\n    float width=region.width * Draw.scl, height=region.height * Draw.scl;\n    mesh.draw(idxWall,region,wx * tilesize + wall.offset + (tilesize - width) / 2f,wy * tilesize + wall.offset + (tilesize - height) / 2f,width,height,tile.build == null || !wall.rotate ? 0 : tile.build.rotdeg());\n  }\n else {\n    region=floor.editorVariantRegions()[Mathf.randomSeed(idxWall,0,floor.editorVariantRegions().length - 1)];\n    mesh.draw(idxWall,region,wx * tilesize,wy * tilesize,8,8);\n  }\n  float offsetX=-(wall.size / 3) * tilesize, offsetY=-(wall.size / 3) * tilesize;\n  if ((wall.update || wall.destructible) && center) {\n    mesh.setColor(team.color);\n    region=Core.atlas.find(\"block-border-editor\");\n  }\n else   if (!wall.synthetic() && wall != Blocks.air && center) {\n    region=!Core.atlas.isFound(wall.editorIcon()) ? Core.atlas.find(\"clear-editor\") : wall.editorIcon();\n    offsetX=tilesize / 2f - region.width / 2f * Draw.scl;\n    offsetY=tilesize / 2f - region.height / 2f * Draw.scl;\n  }\n else   if (wall == Blocks.air && !tile.overlay().isAir()) {\n    region=tile.overlay().editorVariantRegions()[Mathf.randomSeed(idxWall,0,tile.overlay().editorVariantRegions().length - 1)];\n  }\n else {\n    region=Core.atlas.find(\"clear-editor\");\n  }\n  float width=region.width * Draw.scl, height=region.height * Draw.scl;\n  if (!wall.synthetic() && wall != Blocks.air && !wall.isMultiblock()) {\n    offsetX=0;\n    offsetY=0;\n    width=tilesize;\n    height=tilesize;\n  }\n  mesh.draw(idxDecal,region,wx * tilesize + offsetX,wy * tilesize + offsetY,width,height);\n  mesh.setColor(Color.white);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 503,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 107,
        "endColumnNumber" : 95
      },
      "nodeContext" : "int idxDecal=(wx % chunkSize) + (wy % chunkSize) * chunkSize + chunkSize * chunkSize;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 8
    },
    "tokenLength" : 3,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 106,
    "startColumnNumber" : 22,
    "endLineNumber" : 106,
    "endColumnNumber" : 38
  }, {
    "charLength" : 16,
    "startLineNumber" : 107,
    "startColumnNumber" : 23,
    "endLineNumber" : 107,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}