{
  "id" : 386,
  "expression" : "p2",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/geometry/LineSegmentLineSegmentIntersection.java",
  "occurrences" : 18,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "p2",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 44,
      "startColumnNumber" : 31,
      "endLineNumber" : 44,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 44,
        "startColumnNumber" : 9,
        "endLineNumber" : 44,
        "endColumnNumber" : 42
      },
      "nodeContext" : "segmentsIntersect(p1,p2,p3,p4)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 44,
        "startColumnNumber" : 8,
        "endLineNumber" : 44,
        "endColumnNumber" : 42
      },
      "nodeContext" : "!segmentsIntersect(p1,p2,p3,p4)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 44,
        "endColumnNumber" : 63
      },
      "nodeContext" : "if (!segmentsIntersect(p1,p2,p3,p4)) return new Pt[]{};\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2413,
        "startLineNumber" : 41,
        "startColumnNumber" : 84,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!segmentsIntersect(p1,p2,p3,p4))   return new Pt[]{};\n  if (p1.equals(p2) && p2.equals(p3) && p3.equals(p4))   return new Pt[]{p1};\n  List<Pt> endpoints=getCommonEndpoints(p1,p2,p3,p4);\n  int n=endpoints.size();\n  boolean singleton=p1.equals(p2) || p3.equals(p4);\n  if (n == 1 && singleton)   return new Pt[]{endpoints.get(0)};\n  if (n == 2)   return new Pt[]{endpoints.get(0),endpoints.get(1)};\n  boolean collinearSegments=(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0);\n  if (collinearSegments) {\n    if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))     return new Pt[]{p3,p4};\n    if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))     return new Pt[]{p1,p2};\n    Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n    Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n    if (midPoint1.equals(midPoint2))     return new Pt[]{midPoint1};\n    return new Pt[]{midPoint1,midPoint2};\n  }\n  if (abs(p1.x - p2.x) < EPS) {\n    double m=(p4.y - p3.y) / (p4.x - p3.x);\n    double b=p3.y - m * p3.x;\n    return new Pt[]{new Pt(p1.x,m * p1.x + b)};\n  }\n  if (abs(p3.x - p4.x) < EPS) {\n    double m=(p2.y - p1.y) / (p2.x - p1.x);\n    double b=p1.y - m * p1.x;\n    return new Pt[]{new Pt(p3.x,m * p3.x + b)};\n  }\n  double m1=(p2.y - p1.y) / (p2.x - p1.x);\n  double m2=(p4.y - p3.y) / (p4.x - p3.x);\n  double b1=p1.y - m1 * p1.x;\n  double b2=p3.y - m2 * p3.x;\n  double x=(b2 - b1) / (m1 - m2);\n  double y=(m1 * b2 - m2 * b1) / (m1 - m2);\n  return new Pt[]{new Pt(x,y)};\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 466,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2495,
        "startLineNumber" : 41,
        "startColumnNumber" : 2,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static Pt[] lineSegmentLineSegmentIntersection(Pt p1,Pt p2,Pt p3,Pt p4){\n  if (!segmentsIntersect(p1,p2,p3,p4))   return new Pt[]{};\n  if (p1.equals(p2) && p2.equals(p3) && p3.equals(p4))   return new Pt[]{p1};\n  List<Pt> endpoints=getCommonEndpoints(p1,p2,p3,p4);\n  int n=endpoints.size();\n  boolean singleton=p1.equals(p2) || p3.equals(p4);\n  if (n == 1 && singleton)   return new Pt[]{endpoints.get(0)};\n  if (n == 2)   return new Pt[]{endpoints.get(0),endpoints.get(1)};\n  boolean collinearSegments=(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0);\n  if (collinearSegments) {\n    if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))     return new Pt[]{p3,p4};\n    if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))     return new Pt[]{p1,p2};\n    Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n    Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n    if (midPoint1.equals(midPoint2))     return new Pt[]{midPoint1};\n    return new Pt[]{midPoint1,midPoint2};\n  }\n  if (abs(p1.x - p2.x) < EPS) {\n    double m=(p4.y - p3.y) / (p4.x - p3.x);\n    double b=p3.y - m * p3.x;\n    return new Pt[]{new Pt(p1.x,m * p1.x + b)};\n  }\n  if (abs(p3.x - p4.x) < EPS) {\n    double m=(p2.y - p1.y) / (p2.x - p1.x);\n    double b=p1.y - m * p1.x;\n    return new Pt[]{new Pt(p3.x,m * p3.x + b)};\n  }\n  double m1=(p2.y - p1.y) / (p2.x - p1.x);\n  double m2=(p4.y - p3.y) / (p4.x - p3.x);\n  double b1=p1.y - m1 * p1.x;\n  double b2=p3.y - m2 * p3.x;\n  double x=(b2 - b1) / (m1 - m2);\n  double y=(m1 * b2 - m2 * b1) / (m1 - m2);\n  return new Pt[]{new Pt(x,y)};\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 490,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 44,
        "endColumnNumber" : 63
      },
      "nodeContext" : "if (!segmentsIntersect(p1,p2,p3,p4)) return new Pt[]{};\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "com.williamfiset.algorithms.geometry.LineSegmentLineSegmentIntersection.Pt"
  }, {
    "nodeContext" : "p2",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 47,
      "startColumnNumber" : 18,
      "endLineNumber" : 47,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 47,
        "startColumnNumber" : 8,
        "endLineNumber" : 47,
        "endColumnNumber" : 21
      },
      "nodeContext" : "p1.equals(p2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 47,
        "startColumnNumber" : 8,
        "endLineNumber" : 47,
        "endColumnNumber" : 55
      },
      "nodeContext" : "p1.equals(p2) && p2.equals(p3) && p3.equals(p4)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 47,
        "endColumnNumber" : 78
      },
      "nodeContext" : "if (p1.equals(p2) && p2.equals(p3) && p3.equals(p4)) return new Pt[]{p1};\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2413,
        "startLineNumber" : 41,
        "startColumnNumber" : 84,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!segmentsIntersect(p1,p2,p3,p4))   return new Pt[]{};\n  if (p1.equals(p2) && p2.equals(p3) && p3.equals(p4))   return new Pt[]{p1};\n  List<Pt> endpoints=getCommonEndpoints(p1,p2,p3,p4);\n  int n=endpoints.size();\n  boolean singleton=p1.equals(p2) || p3.equals(p4);\n  if (n == 1 && singleton)   return new Pt[]{endpoints.get(0)};\n  if (n == 2)   return new Pt[]{endpoints.get(0),endpoints.get(1)};\n  boolean collinearSegments=(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0);\n  if (collinearSegments) {\n    if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))     return new Pt[]{p3,p4};\n    if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))     return new Pt[]{p1,p2};\n    Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n    Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n    if (midPoint1.equals(midPoint2))     return new Pt[]{midPoint1};\n    return new Pt[]{midPoint1,midPoint2};\n  }\n  if (abs(p1.x - p2.x) < EPS) {\n    double m=(p4.y - p3.y) / (p4.x - p3.x);\n    double b=p3.y - m * p3.x;\n    return new Pt[]{new Pt(p1.x,m * p1.x + b)};\n  }\n  if (abs(p3.x - p4.x) < EPS) {\n    double m=(p2.y - p1.y) / (p2.x - p1.x);\n    double b=p1.y - m * p1.x;\n    return new Pt[]{new Pt(p3.x,m * p3.x + b)};\n  }\n  double m1=(p2.y - p1.y) / (p2.x - p1.x);\n  double m2=(p4.y - p3.y) / (p4.x - p3.x);\n  double b1=p1.y - m1 * p1.x;\n  double b2=p3.y - m2 * p3.x;\n  double x=(b2 - b1) / (m1 - m2);\n  double y=(m1 * b2 - m2 * b1) / (m1 - m2);\n  return new Pt[]{new Pt(x,y)};\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 466,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2495,
        "startLineNumber" : 41,
        "startColumnNumber" : 2,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static Pt[] lineSegmentLineSegmentIntersection(Pt p1,Pt p2,Pt p3,Pt p4){\n  if (!segmentsIntersect(p1,p2,p3,p4))   return new Pt[]{};\n  if (p1.equals(p2) && p2.equals(p3) && p3.equals(p4))   return new Pt[]{p1};\n  List<Pt> endpoints=getCommonEndpoints(p1,p2,p3,p4);\n  int n=endpoints.size();\n  boolean singleton=p1.equals(p2) || p3.equals(p4);\n  if (n == 1 && singleton)   return new Pt[]{endpoints.get(0)};\n  if (n == 2)   return new Pt[]{endpoints.get(0),endpoints.get(1)};\n  boolean collinearSegments=(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0);\n  if (collinearSegments) {\n    if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))     return new Pt[]{p3,p4};\n    if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))     return new Pt[]{p1,p2};\n    Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n    Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n    if (midPoint1.equals(midPoint2))     return new Pt[]{midPoint1};\n    return new Pt[]{midPoint1,midPoint2};\n  }\n  if (abs(p1.x - p2.x) < EPS) {\n    double m=(p4.y - p3.y) / (p4.x - p3.x);\n    double b=p3.y - m * p3.x;\n    return new Pt[]{new Pt(p1.x,m * p1.x + b)};\n  }\n  if (abs(p3.x - p4.x) < EPS) {\n    double m=(p2.y - p1.y) / (p2.x - p1.x);\n    double b=p1.y - m * p1.x;\n    return new Pt[]{new Pt(p3.x,m * p3.x + b)};\n  }\n  double m1=(p2.y - p1.y) / (p2.x - p1.x);\n  double m2=(p4.y - p3.y) / (p4.x - p3.x);\n  double b1=p1.y - m1 * p1.x;\n  double b2=p3.y - m2 * p3.x;\n  double x=(b2 - b1) / (m1 - m2);\n  double y=(m1 * b2 - m2 * b1) / (m1 - m2);\n  return new Pt[]{new Pt(x,y)};\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 490,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 47,
        "endColumnNumber" : 78
      },
      "nodeContext" : "if (p1.equals(p2) && p2.equals(p3) && p3.equals(p4)) return new Pt[]{p1};\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "com.williamfiset.algorithms.geometry.LineSegmentLineSegmentIntersection.Pt"
  }, {
    "nodeContext" : "p2",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 47,
      "startColumnNumber" : 25,
      "endLineNumber" : 47,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 47,
        "startColumnNumber" : 25,
        "endLineNumber" : 47,
        "endColumnNumber" : 38
      },
      "nodeContext" : "p2.equals(p3)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 47,
        "startColumnNumber" : 8,
        "endLineNumber" : 47,
        "endColumnNumber" : 55
      },
      "nodeContext" : "p1.equals(p2) && p2.equals(p3) && p3.equals(p4)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 47,
        "endColumnNumber" : 78
      },
      "nodeContext" : "if (p1.equals(p2) && p2.equals(p3) && p3.equals(p4)) return new Pt[]{p1};\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2413,
        "startLineNumber" : 41,
        "startColumnNumber" : 84,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!segmentsIntersect(p1,p2,p3,p4))   return new Pt[]{};\n  if (p1.equals(p2) && p2.equals(p3) && p3.equals(p4))   return new Pt[]{p1};\n  List<Pt> endpoints=getCommonEndpoints(p1,p2,p3,p4);\n  int n=endpoints.size();\n  boolean singleton=p1.equals(p2) || p3.equals(p4);\n  if (n == 1 && singleton)   return new Pt[]{endpoints.get(0)};\n  if (n == 2)   return new Pt[]{endpoints.get(0),endpoints.get(1)};\n  boolean collinearSegments=(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0);\n  if (collinearSegments) {\n    if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))     return new Pt[]{p3,p4};\n    if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))     return new Pt[]{p1,p2};\n    Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n    Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n    if (midPoint1.equals(midPoint2))     return new Pt[]{midPoint1};\n    return new Pt[]{midPoint1,midPoint2};\n  }\n  if (abs(p1.x - p2.x) < EPS) {\n    double m=(p4.y - p3.y) / (p4.x - p3.x);\n    double b=p3.y - m * p3.x;\n    return new Pt[]{new Pt(p1.x,m * p1.x + b)};\n  }\n  if (abs(p3.x - p4.x) < EPS) {\n    double m=(p2.y - p1.y) / (p2.x - p1.x);\n    double b=p1.y - m * p1.x;\n    return new Pt[]{new Pt(p3.x,m * p3.x + b)};\n  }\n  double m1=(p2.y - p1.y) / (p2.x - p1.x);\n  double m2=(p4.y - p3.y) / (p4.x - p3.x);\n  double b1=p1.y - m1 * p1.x;\n  double b2=p3.y - m2 * p3.x;\n  double x=(b2 - b1) / (m1 - m2);\n  double y=(m1 * b2 - m2 * b1) / (m1 - m2);\n  return new Pt[]{new Pt(x,y)};\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 466,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2495,
        "startLineNumber" : 41,
        "startColumnNumber" : 2,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static Pt[] lineSegmentLineSegmentIntersection(Pt p1,Pt p2,Pt p3,Pt p4){\n  if (!segmentsIntersect(p1,p2,p3,p4))   return new Pt[]{};\n  if (p1.equals(p2) && p2.equals(p3) && p3.equals(p4))   return new Pt[]{p1};\n  List<Pt> endpoints=getCommonEndpoints(p1,p2,p3,p4);\n  int n=endpoints.size();\n  boolean singleton=p1.equals(p2) || p3.equals(p4);\n  if (n == 1 && singleton)   return new Pt[]{endpoints.get(0)};\n  if (n == 2)   return new Pt[]{endpoints.get(0),endpoints.get(1)};\n  boolean collinearSegments=(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0);\n  if (collinearSegments) {\n    if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))     return new Pt[]{p3,p4};\n    if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))     return new Pt[]{p1,p2};\n    Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n    Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n    if (midPoint1.equals(midPoint2))     return new Pt[]{midPoint1};\n    return new Pt[]{midPoint1,midPoint2};\n  }\n  if (abs(p1.x - p2.x) < EPS) {\n    double m=(p4.y - p3.y) / (p4.x - p3.x);\n    double b=p3.y - m * p3.x;\n    return new Pt[]{new Pt(p1.x,m * p1.x + b)};\n  }\n  if (abs(p3.x - p4.x) < EPS) {\n    double m=(p2.y - p1.y) / (p2.x - p1.x);\n    double b=p1.y - m * p1.x;\n    return new Pt[]{new Pt(p3.x,m * p3.x + b)};\n  }\n  double m1=(p2.y - p1.y) / (p2.x - p1.x);\n  double m2=(p4.y - p3.y) / (p4.x - p3.x);\n  double b1=p1.y - m1 * p1.x;\n  double b2=p3.y - m2 * p3.x;\n  double x=(b2 - b1) / (m1 - m2);\n  double y=(m1 * b2 - m2 * b1) / (m1 - m2);\n  return new Pt[]{new Pt(x,y)};\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 490,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 47,
        "endColumnNumber" : 78
      },
      "nodeContext" : "if (p1.equals(p2) && p2.equals(p3) && p3.equals(p4)) return new Pt[]{p1};\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "com.williamfiset.algorithms.geometry.LineSegmentLineSegmentIntersection.Pt"
  }, {
    "nodeContext" : "p2",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 49,
      "startColumnNumber" : 48,
      "endLineNumber" : 49,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 49,
        "startColumnNumber" : 25,
        "endLineNumber" : 49,
        "endColumnNumber" : 59
      },
      "nodeContext" : "getCommonEndpoints(p1,p2,p3,p4)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 49,
        "startColumnNumber" : 13,
        "endLineNumber" : 49,
        "endColumnNumber" : 59
      },
      "nodeContext" : "endpoints=getCommonEndpoints(p1,p2,p3,p4)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 49,
        "startColumnNumber" : 4,
        "endLineNumber" : 49,
        "endColumnNumber" : 60
      },
      "nodeContext" : "List<Pt> endpoints=getCommonEndpoints(p1,p2,p3,p4);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2413,
        "startLineNumber" : 41,
        "startColumnNumber" : 84,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!segmentsIntersect(p1,p2,p3,p4))   return new Pt[]{};\n  if (p1.equals(p2) && p2.equals(p3) && p3.equals(p4))   return new Pt[]{p1};\n  List<Pt> endpoints=getCommonEndpoints(p1,p2,p3,p4);\n  int n=endpoints.size();\n  boolean singleton=p1.equals(p2) || p3.equals(p4);\n  if (n == 1 && singleton)   return new Pt[]{endpoints.get(0)};\n  if (n == 2)   return new Pt[]{endpoints.get(0),endpoints.get(1)};\n  boolean collinearSegments=(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0);\n  if (collinearSegments) {\n    if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))     return new Pt[]{p3,p4};\n    if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))     return new Pt[]{p1,p2};\n    Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n    Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n    if (midPoint1.equals(midPoint2))     return new Pt[]{midPoint1};\n    return new Pt[]{midPoint1,midPoint2};\n  }\n  if (abs(p1.x - p2.x) < EPS) {\n    double m=(p4.y - p3.y) / (p4.x - p3.x);\n    double b=p3.y - m * p3.x;\n    return new Pt[]{new Pt(p1.x,m * p1.x + b)};\n  }\n  if (abs(p3.x - p4.x) < EPS) {\n    double m=(p2.y - p1.y) / (p2.x - p1.x);\n    double b=p1.y - m * p1.x;\n    return new Pt[]{new Pt(p3.x,m * p3.x + b)};\n  }\n  double m1=(p2.y - p1.y) / (p2.x - p1.x);\n  double m2=(p4.y - p3.y) / (p4.x - p3.x);\n  double b1=p1.y - m1 * p1.x;\n  double b2=p3.y - m2 * p3.x;\n  double x=(b2 - b1) / (m1 - m2);\n  double y=(m1 * b2 - m2 * b1) / (m1 - m2);\n  return new Pt[]{new Pt(x,y)};\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 466,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2495,
        "startLineNumber" : 41,
        "startColumnNumber" : 2,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static Pt[] lineSegmentLineSegmentIntersection(Pt p1,Pt p2,Pt p3,Pt p4){\n  if (!segmentsIntersect(p1,p2,p3,p4))   return new Pt[]{};\n  if (p1.equals(p2) && p2.equals(p3) && p3.equals(p4))   return new Pt[]{p1};\n  List<Pt> endpoints=getCommonEndpoints(p1,p2,p3,p4);\n  int n=endpoints.size();\n  boolean singleton=p1.equals(p2) || p3.equals(p4);\n  if (n == 1 && singleton)   return new Pt[]{endpoints.get(0)};\n  if (n == 2)   return new Pt[]{endpoints.get(0),endpoints.get(1)};\n  boolean collinearSegments=(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0);\n  if (collinearSegments) {\n    if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))     return new Pt[]{p3,p4};\n    if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))     return new Pt[]{p1,p2};\n    Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n    Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n    if (midPoint1.equals(midPoint2))     return new Pt[]{midPoint1};\n    return new Pt[]{midPoint1,midPoint2};\n  }\n  if (abs(p1.x - p2.x) < EPS) {\n    double m=(p4.y - p3.y) / (p4.x - p3.x);\n    double b=p3.y - m * p3.x;\n    return new Pt[]{new Pt(p1.x,m * p1.x + b)};\n  }\n  if (abs(p3.x - p4.x) < EPS) {\n    double m=(p2.y - p1.y) / (p2.x - p1.x);\n    double b=p1.y - m * p1.x;\n    return new Pt[]{new Pt(p3.x,m * p3.x + b)};\n  }\n  double m1=(p2.y - p1.y) / (p2.x - p1.x);\n  double m2=(p4.y - p3.y) / (p4.x - p3.x);\n  double b1=p1.y - m1 * p1.x;\n  double b2=p3.y - m2 * p3.x;\n  double x=(b2 - b1) / (m1 - m2);\n  double y=(m1 * b2 - m2 * b1) / (m1 - m2);\n  return new Pt[]{new Pt(x,y)};\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 490,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 49,
        "startColumnNumber" : 4,
        "endLineNumber" : 49,
        "endColumnNumber" : 60
      },
      "nodeContext" : "List<Pt> endpoints=getCommonEndpoints(p1,p2,p3,p4);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.williamfiset.algorithms.geometry.LineSegmentLineSegmentIntersection.Pt"
  }, {
    "nodeContext" : "p2",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 55,
      "startColumnNumber" : 34,
      "endLineNumber" : 55,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 55,
        "startColumnNumber" : 24,
        "endLineNumber" : 55,
        "endColumnNumber" : 37
      },
      "nodeContext" : "p1.equals(p2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 55,
        "startColumnNumber" : 24,
        "endLineNumber" : 55,
        "endColumnNumber" : 54
      },
      "nodeContext" : "p1.equals(p2) || p3.equals(p4)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 55,
        "startColumnNumber" : 12,
        "endLineNumber" : 55,
        "endColumnNumber" : 54
      },
      "nodeContext" : "singleton=p1.equals(p2) || p3.equals(p4)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 55,
        "endColumnNumber" : 55
      },
      "nodeContext" : "boolean singleton=p1.equals(p2) || p3.equals(p4);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2413,
        "startLineNumber" : 41,
        "startColumnNumber" : 84,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!segmentsIntersect(p1,p2,p3,p4))   return new Pt[]{};\n  if (p1.equals(p2) && p2.equals(p3) && p3.equals(p4))   return new Pt[]{p1};\n  List<Pt> endpoints=getCommonEndpoints(p1,p2,p3,p4);\n  int n=endpoints.size();\n  boolean singleton=p1.equals(p2) || p3.equals(p4);\n  if (n == 1 && singleton)   return new Pt[]{endpoints.get(0)};\n  if (n == 2)   return new Pt[]{endpoints.get(0),endpoints.get(1)};\n  boolean collinearSegments=(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0);\n  if (collinearSegments) {\n    if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))     return new Pt[]{p3,p4};\n    if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))     return new Pt[]{p1,p2};\n    Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n    Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n    if (midPoint1.equals(midPoint2))     return new Pt[]{midPoint1};\n    return new Pt[]{midPoint1,midPoint2};\n  }\n  if (abs(p1.x - p2.x) < EPS) {\n    double m=(p4.y - p3.y) / (p4.x - p3.x);\n    double b=p3.y - m * p3.x;\n    return new Pt[]{new Pt(p1.x,m * p1.x + b)};\n  }\n  if (abs(p3.x - p4.x) < EPS) {\n    double m=(p2.y - p1.y) / (p2.x - p1.x);\n    double b=p1.y - m * p1.x;\n    return new Pt[]{new Pt(p3.x,m * p3.x + b)};\n  }\n  double m1=(p2.y - p1.y) / (p2.x - p1.x);\n  double m2=(p4.y - p3.y) / (p4.x - p3.x);\n  double b1=p1.y - m1 * p1.x;\n  double b2=p3.y - m2 * p3.x;\n  double x=(b2 - b1) / (m1 - m2);\n  double y=(m1 * b2 - m2 * b1) / (m1 - m2);\n  return new Pt[]{new Pt(x,y)};\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 466,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2495,
        "startLineNumber" : 41,
        "startColumnNumber" : 2,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static Pt[] lineSegmentLineSegmentIntersection(Pt p1,Pt p2,Pt p3,Pt p4){\n  if (!segmentsIntersect(p1,p2,p3,p4))   return new Pt[]{};\n  if (p1.equals(p2) && p2.equals(p3) && p3.equals(p4))   return new Pt[]{p1};\n  List<Pt> endpoints=getCommonEndpoints(p1,p2,p3,p4);\n  int n=endpoints.size();\n  boolean singleton=p1.equals(p2) || p3.equals(p4);\n  if (n == 1 && singleton)   return new Pt[]{endpoints.get(0)};\n  if (n == 2)   return new Pt[]{endpoints.get(0),endpoints.get(1)};\n  boolean collinearSegments=(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0);\n  if (collinearSegments) {\n    if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))     return new Pt[]{p3,p4};\n    if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))     return new Pt[]{p1,p2};\n    Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n    Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n    if (midPoint1.equals(midPoint2))     return new Pt[]{midPoint1};\n    return new Pt[]{midPoint1,midPoint2};\n  }\n  if (abs(p1.x - p2.x) < EPS) {\n    double m=(p4.y - p3.y) / (p4.x - p3.x);\n    double b=p3.y - m * p3.x;\n    return new Pt[]{new Pt(p1.x,m * p1.x + b)};\n  }\n  if (abs(p3.x - p4.x) < EPS) {\n    double m=(p2.y - p1.y) / (p2.x - p1.x);\n    double b=p1.y - m * p1.x;\n    return new Pt[]{new Pt(p3.x,m * p3.x + b)};\n  }\n  double m1=(p2.y - p1.y) / (p2.x - p1.x);\n  double m2=(p4.y - p3.y) / (p4.x - p3.x);\n  double b1=p1.y - m1 * p1.x;\n  double b2=p3.y - m2 * p3.x;\n  double x=(b2 - b1) / (m1 - m2);\n  double y=(m1 * b2 - m2 * b1) / (m1 - m2);\n  return new Pt[]{new Pt(x,y)};\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 490,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 55,
        "endColumnNumber" : 55
      },
      "nodeContext" : "boolean singleton=p1.equals(p2) || p3.equals(p4);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.williamfiset.algorithms.geometry.LineSegmentLineSegmentIntersection.Pt"
  }, {
    "nodeContext" : "p2",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 61,
      "startColumnNumber" : 49,
      "endLineNumber" : 61,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 61,
        "startColumnNumber" : 33,
        "endLineNumber" : 61,
        "endColumnNumber" : 56
      },
      "nodeContext" : "orientation(p1,p2,p3)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 61,
        "startColumnNumber" : 33,
        "endLineNumber" : 61,
        "endColumnNumber" : 61
      },
      "nodeContext" : "orientation(p1,p2,p3) == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 61,
        "startColumnNumber" : 32,
        "endLineNumber" : 61,
        "endColumnNumber" : 62
      },
      "nodeContext" : "(orientation(p1,p2,p3) == 0)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 61,
        "startColumnNumber" : 32,
        "endLineNumber" : 61,
        "endColumnNumber" : 96
      },
      "nodeContext" : "(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 61,
        "startColumnNumber" : 12,
        "endLineNumber" : 61,
        "endColumnNumber" : 96
      },
      "nodeContext" : "collinearSegments=(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 61,
        "startColumnNumber" : 4,
        "endLineNumber" : 61,
        "endColumnNumber" : 97
      },
      "nodeContext" : "boolean collinearSegments=(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2413,
        "startLineNumber" : 41,
        "startColumnNumber" : 84,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!segmentsIntersect(p1,p2,p3,p4))   return new Pt[]{};\n  if (p1.equals(p2) && p2.equals(p3) && p3.equals(p4))   return new Pt[]{p1};\n  List<Pt> endpoints=getCommonEndpoints(p1,p2,p3,p4);\n  int n=endpoints.size();\n  boolean singleton=p1.equals(p2) || p3.equals(p4);\n  if (n == 1 && singleton)   return new Pt[]{endpoints.get(0)};\n  if (n == 2)   return new Pt[]{endpoints.get(0),endpoints.get(1)};\n  boolean collinearSegments=(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0);\n  if (collinearSegments) {\n    if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))     return new Pt[]{p3,p4};\n    if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))     return new Pt[]{p1,p2};\n    Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n    Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n    if (midPoint1.equals(midPoint2))     return new Pt[]{midPoint1};\n    return new Pt[]{midPoint1,midPoint2};\n  }\n  if (abs(p1.x - p2.x) < EPS) {\n    double m=(p4.y - p3.y) / (p4.x - p3.x);\n    double b=p3.y - m * p3.x;\n    return new Pt[]{new Pt(p1.x,m * p1.x + b)};\n  }\n  if (abs(p3.x - p4.x) < EPS) {\n    double m=(p2.y - p1.y) / (p2.x - p1.x);\n    double b=p1.y - m * p1.x;\n    return new Pt[]{new Pt(p3.x,m * p3.x + b)};\n  }\n  double m1=(p2.y - p1.y) / (p2.x - p1.x);\n  double m2=(p4.y - p3.y) / (p4.x - p3.x);\n  double b1=p1.y - m1 * p1.x;\n  double b2=p3.y - m2 * p3.x;\n  double x=(b2 - b1) / (m1 - m2);\n  double y=(m1 * b2 - m2 * b1) / (m1 - m2);\n  return new Pt[]{new Pt(x,y)};\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 466,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2495,
        "startLineNumber" : 41,
        "startColumnNumber" : 2,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static Pt[] lineSegmentLineSegmentIntersection(Pt p1,Pt p2,Pt p3,Pt p4){\n  if (!segmentsIntersect(p1,p2,p3,p4))   return new Pt[]{};\n  if (p1.equals(p2) && p2.equals(p3) && p3.equals(p4))   return new Pt[]{p1};\n  List<Pt> endpoints=getCommonEndpoints(p1,p2,p3,p4);\n  int n=endpoints.size();\n  boolean singleton=p1.equals(p2) || p3.equals(p4);\n  if (n == 1 && singleton)   return new Pt[]{endpoints.get(0)};\n  if (n == 2)   return new Pt[]{endpoints.get(0),endpoints.get(1)};\n  boolean collinearSegments=(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0);\n  if (collinearSegments) {\n    if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))     return new Pt[]{p3,p4};\n    if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))     return new Pt[]{p1,p2};\n    Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n    Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n    if (midPoint1.equals(midPoint2))     return new Pt[]{midPoint1};\n    return new Pt[]{midPoint1,midPoint2};\n  }\n  if (abs(p1.x - p2.x) < EPS) {\n    double m=(p4.y - p3.y) / (p4.x - p3.x);\n    double b=p3.y - m * p3.x;\n    return new Pt[]{new Pt(p1.x,m * p1.x + b)};\n  }\n  if (abs(p3.x - p4.x) < EPS) {\n    double m=(p2.y - p1.y) / (p2.x - p1.x);\n    double b=p1.y - m * p1.x;\n    return new Pt[]{new Pt(p3.x,m * p3.x + b)};\n  }\n  double m1=(p2.y - p1.y) / (p2.x - p1.x);\n  double m2=(p4.y - p3.y) / (p4.x - p3.x);\n  double b1=p1.y - m1 * p1.x;\n  double b2=p3.y - m2 * p3.x;\n  double x=(b2 - b1) / (m1 - m2);\n  double y=(m1 * b2 - m2 * b1) / (m1 - m2);\n  return new Pt[]{new Pt(x,y)};\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 490,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 61,
        "startColumnNumber" : 4,
        "endLineNumber" : 61,
        "endColumnNumber" : 97
      },
      "nodeContext" : "boolean collinearSegments=(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "com.williamfiset.algorithms.geometry.LineSegmentLineSegmentIntersection.Pt"
  }, {
    "nodeContext" : "p2",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 61,
      "startColumnNumber" : 83,
      "endLineNumber" : 61,
      "endColumnNumber" : 85
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 61,
        "startColumnNumber" : 67,
        "endLineNumber" : 61,
        "endColumnNumber" : 90
      },
      "nodeContext" : "orientation(p1,p2,p4)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 61,
        "startColumnNumber" : 67,
        "endLineNumber" : 61,
        "endColumnNumber" : 95
      },
      "nodeContext" : "orientation(p1,p2,p4) == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 61,
        "startColumnNumber" : 66,
        "endLineNumber" : 61,
        "endColumnNumber" : 96
      },
      "nodeContext" : "(orientation(p1,p2,p4) == 0)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 61,
        "startColumnNumber" : 32,
        "endLineNumber" : 61,
        "endColumnNumber" : 96
      },
      "nodeContext" : "(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 61,
        "startColumnNumber" : 12,
        "endLineNumber" : 61,
        "endColumnNumber" : 96
      },
      "nodeContext" : "collinearSegments=(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 61,
        "startColumnNumber" : 4,
        "endLineNumber" : 61,
        "endColumnNumber" : 97
      },
      "nodeContext" : "boolean collinearSegments=(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2413,
        "startLineNumber" : 41,
        "startColumnNumber" : 84,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!segmentsIntersect(p1,p2,p3,p4))   return new Pt[]{};\n  if (p1.equals(p2) && p2.equals(p3) && p3.equals(p4))   return new Pt[]{p1};\n  List<Pt> endpoints=getCommonEndpoints(p1,p2,p3,p4);\n  int n=endpoints.size();\n  boolean singleton=p1.equals(p2) || p3.equals(p4);\n  if (n == 1 && singleton)   return new Pt[]{endpoints.get(0)};\n  if (n == 2)   return new Pt[]{endpoints.get(0),endpoints.get(1)};\n  boolean collinearSegments=(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0);\n  if (collinearSegments) {\n    if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))     return new Pt[]{p3,p4};\n    if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))     return new Pt[]{p1,p2};\n    Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n    Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n    if (midPoint1.equals(midPoint2))     return new Pt[]{midPoint1};\n    return new Pt[]{midPoint1,midPoint2};\n  }\n  if (abs(p1.x - p2.x) < EPS) {\n    double m=(p4.y - p3.y) / (p4.x - p3.x);\n    double b=p3.y - m * p3.x;\n    return new Pt[]{new Pt(p1.x,m * p1.x + b)};\n  }\n  if (abs(p3.x - p4.x) < EPS) {\n    double m=(p2.y - p1.y) / (p2.x - p1.x);\n    double b=p1.y - m * p1.x;\n    return new Pt[]{new Pt(p3.x,m * p3.x + b)};\n  }\n  double m1=(p2.y - p1.y) / (p2.x - p1.x);\n  double m2=(p4.y - p3.y) / (p4.x - p3.x);\n  double b1=p1.y - m1 * p1.x;\n  double b2=p3.y - m2 * p3.x;\n  double x=(b2 - b1) / (m1 - m2);\n  double y=(m1 * b2 - m2 * b1) / (m1 - m2);\n  return new Pt[]{new Pt(x,y)};\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 466,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2495,
        "startLineNumber" : 41,
        "startColumnNumber" : 2,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static Pt[] lineSegmentLineSegmentIntersection(Pt p1,Pt p2,Pt p3,Pt p4){\n  if (!segmentsIntersect(p1,p2,p3,p4))   return new Pt[]{};\n  if (p1.equals(p2) && p2.equals(p3) && p3.equals(p4))   return new Pt[]{p1};\n  List<Pt> endpoints=getCommonEndpoints(p1,p2,p3,p4);\n  int n=endpoints.size();\n  boolean singleton=p1.equals(p2) || p3.equals(p4);\n  if (n == 1 && singleton)   return new Pt[]{endpoints.get(0)};\n  if (n == 2)   return new Pt[]{endpoints.get(0),endpoints.get(1)};\n  boolean collinearSegments=(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0);\n  if (collinearSegments) {\n    if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))     return new Pt[]{p3,p4};\n    if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))     return new Pt[]{p1,p2};\n    Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n    Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n    if (midPoint1.equals(midPoint2))     return new Pt[]{midPoint1};\n    return new Pt[]{midPoint1,midPoint2};\n  }\n  if (abs(p1.x - p2.x) < EPS) {\n    double m=(p4.y - p3.y) / (p4.x - p3.x);\n    double b=p3.y - m * p3.x;\n    return new Pt[]{new Pt(p1.x,m * p1.x + b)};\n  }\n  if (abs(p3.x - p4.x) < EPS) {\n    double m=(p2.y - p1.y) / (p2.x - p1.x);\n    double b=p1.y - m * p1.x;\n    return new Pt[]{new Pt(p3.x,m * p3.x + b)};\n  }\n  double m1=(p2.y - p1.y) / (p2.x - p1.x);\n  double m2=(p4.y - p3.y) / (p4.x - p3.x);\n  double b1=p1.y - m1 * p1.x;\n  double b2=p3.y - m2 * p3.x;\n  double x=(b2 - b1) / (m1 - m2);\n  double y=(m1 * b2 - m2 * b1) / (m1 - m2);\n  return new Pt[]{new Pt(x,y)};\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 490,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 61,
        "startColumnNumber" : 4,
        "endLineNumber" : 61,
        "endColumnNumber" : 97
      },
      "nodeContext" : "boolean collinearSegments=(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "com.williamfiset.algorithms.geometry.LineSegmentLineSegmentIntersection.Pt"
  }, {
    "nodeContext" : "p2",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 68,
      "startColumnNumber" : 26,
      "endLineNumber" : 68,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 68,
        "startColumnNumber" : 10,
        "endLineNumber" : 68,
        "endColumnNumber" : 33
      },
      "nodeContext" : "pointOnLine(p1,p2,p3)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 68,
        "startColumnNumber" : 10,
        "endLineNumber" : 68,
        "endColumnNumber" : 60
      },
      "nodeContext" : "pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 68,
        "startColumnNumber" : 6,
        "endLineNumber" : 68,
        "endColumnNumber" : 87
      },
      "nodeContext" : "if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4)) return new Pt[]{p3,p4};\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 692,
        "startLineNumber" : 65,
        "startColumnNumber" : 27,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))   return new Pt[]{p3,p4};\n  if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))   return new Pt[]{p1,p2};\n  Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n  Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n  if (midPoint1.equals(midPoint2))   return new Pt[]{midPoint1};\n  return new Pt[]{midPoint1,midPoint2};\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 715,
        "startLineNumber" : 65,
        "startColumnNumber" : 4,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (collinearSegments) {\n  if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))   return new Pt[]{p3,p4};\n  if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))   return new Pt[]{p1,p2};\n  Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n  Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n  if (midPoint1.equals(midPoint2))   return new Pt[]{midPoint1};\n  return new Pt[]{midPoint1,midPoint2};\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 93,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2413,
        "startLineNumber" : 41,
        "startColumnNumber" : 84,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!segmentsIntersect(p1,p2,p3,p4))   return new Pt[]{};\n  if (p1.equals(p2) && p2.equals(p3) && p3.equals(p4))   return new Pt[]{p1};\n  List<Pt> endpoints=getCommonEndpoints(p1,p2,p3,p4);\n  int n=endpoints.size();\n  boolean singleton=p1.equals(p2) || p3.equals(p4);\n  if (n == 1 && singleton)   return new Pt[]{endpoints.get(0)};\n  if (n == 2)   return new Pt[]{endpoints.get(0),endpoints.get(1)};\n  boolean collinearSegments=(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0);\n  if (collinearSegments) {\n    if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))     return new Pt[]{p3,p4};\n    if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))     return new Pt[]{p1,p2};\n    Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n    Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n    if (midPoint1.equals(midPoint2))     return new Pt[]{midPoint1};\n    return new Pt[]{midPoint1,midPoint2};\n  }\n  if (abs(p1.x - p2.x) < EPS) {\n    double m=(p4.y - p3.y) / (p4.x - p3.x);\n    double b=p3.y - m * p3.x;\n    return new Pt[]{new Pt(p1.x,m * p1.x + b)};\n  }\n  if (abs(p3.x - p4.x) < EPS) {\n    double m=(p2.y - p1.y) / (p2.x - p1.x);\n    double b=p1.y - m * p1.x;\n    return new Pt[]{new Pt(p3.x,m * p3.x + b)};\n  }\n  double m1=(p2.y - p1.y) / (p2.x - p1.x);\n  double m2=(p4.y - p3.y) / (p4.x - p3.x);\n  double b1=p1.y - m1 * p1.x;\n  double b2=p3.y - m2 * p3.x;\n  double x=(b2 - b1) / (m1 - m2);\n  double y=(m1 * b2 - m2 * b1) / (m1 - m2);\n  return new Pt[]{new Pt(x,y)};\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 466,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2495,
        "startLineNumber" : 41,
        "startColumnNumber" : 2,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static Pt[] lineSegmentLineSegmentIntersection(Pt p1,Pt p2,Pt p3,Pt p4){\n  if (!segmentsIntersect(p1,p2,p3,p4))   return new Pt[]{};\n  if (p1.equals(p2) && p2.equals(p3) && p3.equals(p4))   return new Pt[]{p1};\n  List<Pt> endpoints=getCommonEndpoints(p1,p2,p3,p4);\n  int n=endpoints.size();\n  boolean singleton=p1.equals(p2) || p3.equals(p4);\n  if (n == 1 && singleton)   return new Pt[]{endpoints.get(0)};\n  if (n == 2)   return new Pt[]{endpoints.get(0),endpoints.get(1)};\n  boolean collinearSegments=(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0);\n  if (collinearSegments) {\n    if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))     return new Pt[]{p3,p4};\n    if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))     return new Pt[]{p1,p2};\n    Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n    Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n    if (midPoint1.equals(midPoint2))     return new Pt[]{midPoint1};\n    return new Pt[]{midPoint1,midPoint2};\n  }\n  if (abs(p1.x - p2.x) < EPS) {\n    double m=(p4.y - p3.y) / (p4.x - p3.x);\n    double b=p3.y - m * p3.x;\n    return new Pt[]{new Pt(p1.x,m * p1.x + b)};\n  }\n  if (abs(p3.x - p4.x) < EPS) {\n    double m=(p2.y - p1.y) / (p2.x - p1.x);\n    double b=p1.y - m * p1.x;\n    return new Pt[]{new Pt(p3.x,m * p3.x + b)};\n  }\n  double m1=(p2.y - p1.y) / (p2.x - p1.x);\n  double m2=(p4.y - p3.y) / (p4.x - p3.x);\n  double b1=p1.y - m1 * p1.x;\n  double b2=p3.y - m2 * p3.x;\n  double x=(b2 - b1) / (m1 - m2);\n  double y=(m1 * b2 - m2 * b1) / (m1 - m2);\n  return new Pt[]{new Pt(x,y)};\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 490,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 68,
        "startColumnNumber" : 6,
        "endLineNumber" : 68,
        "endColumnNumber" : 87
      },
      "nodeContext" : "if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4)) return new Pt[]{p3,p4};\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "com.williamfiset.algorithms.geometry.LineSegmentLineSegmentIntersection.Pt"
  }, {
    "nodeContext" : "p2",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 68,
      "startColumnNumber" : 53,
      "endLineNumber" : 68,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 68,
        "startColumnNumber" : 37,
        "endLineNumber" : 68,
        "endColumnNumber" : 60
      },
      "nodeContext" : "pointOnLine(p1,p2,p4)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 68,
        "startColumnNumber" : 10,
        "endLineNumber" : 68,
        "endColumnNumber" : 60
      },
      "nodeContext" : "pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 68,
        "startColumnNumber" : 6,
        "endLineNumber" : 68,
        "endColumnNumber" : 87
      },
      "nodeContext" : "if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4)) return new Pt[]{p3,p4};\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 692,
        "startLineNumber" : 65,
        "startColumnNumber" : 27,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))   return new Pt[]{p3,p4};\n  if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))   return new Pt[]{p1,p2};\n  Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n  Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n  if (midPoint1.equals(midPoint2))   return new Pt[]{midPoint1};\n  return new Pt[]{midPoint1,midPoint2};\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 715,
        "startLineNumber" : 65,
        "startColumnNumber" : 4,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (collinearSegments) {\n  if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))   return new Pt[]{p3,p4};\n  if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))   return new Pt[]{p1,p2};\n  Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n  Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n  if (midPoint1.equals(midPoint2))   return new Pt[]{midPoint1};\n  return new Pt[]{midPoint1,midPoint2};\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 93,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2413,
        "startLineNumber" : 41,
        "startColumnNumber" : 84,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!segmentsIntersect(p1,p2,p3,p4))   return new Pt[]{};\n  if (p1.equals(p2) && p2.equals(p3) && p3.equals(p4))   return new Pt[]{p1};\n  List<Pt> endpoints=getCommonEndpoints(p1,p2,p3,p4);\n  int n=endpoints.size();\n  boolean singleton=p1.equals(p2) || p3.equals(p4);\n  if (n == 1 && singleton)   return new Pt[]{endpoints.get(0)};\n  if (n == 2)   return new Pt[]{endpoints.get(0),endpoints.get(1)};\n  boolean collinearSegments=(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0);\n  if (collinearSegments) {\n    if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))     return new Pt[]{p3,p4};\n    if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))     return new Pt[]{p1,p2};\n    Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n    Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n    if (midPoint1.equals(midPoint2))     return new Pt[]{midPoint1};\n    return new Pt[]{midPoint1,midPoint2};\n  }\n  if (abs(p1.x - p2.x) < EPS) {\n    double m=(p4.y - p3.y) / (p4.x - p3.x);\n    double b=p3.y - m * p3.x;\n    return new Pt[]{new Pt(p1.x,m * p1.x + b)};\n  }\n  if (abs(p3.x - p4.x) < EPS) {\n    double m=(p2.y - p1.y) / (p2.x - p1.x);\n    double b=p1.y - m * p1.x;\n    return new Pt[]{new Pt(p3.x,m * p3.x + b)};\n  }\n  double m1=(p2.y - p1.y) / (p2.x - p1.x);\n  double m2=(p4.y - p3.y) / (p4.x - p3.x);\n  double b1=p1.y - m1 * p1.x;\n  double b2=p3.y - m2 * p3.x;\n  double x=(b2 - b1) / (m1 - m2);\n  double y=(m1 * b2 - m2 * b1) / (m1 - m2);\n  return new Pt[]{new Pt(x,y)};\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 466,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2495,
        "startLineNumber" : 41,
        "startColumnNumber" : 2,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static Pt[] lineSegmentLineSegmentIntersection(Pt p1,Pt p2,Pt p3,Pt p4){\n  if (!segmentsIntersect(p1,p2,p3,p4))   return new Pt[]{};\n  if (p1.equals(p2) && p2.equals(p3) && p3.equals(p4))   return new Pt[]{p1};\n  List<Pt> endpoints=getCommonEndpoints(p1,p2,p3,p4);\n  int n=endpoints.size();\n  boolean singleton=p1.equals(p2) || p3.equals(p4);\n  if (n == 1 && singleton)   return new Pt[]{endpoints.get(0)};\n  if (n == 2)   return new Pt[]{endpoints.get(0),endpoints.get(1)};\n  boolean collinearSegments=(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0);\n  if (collinearSegments) {\n    if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))     return new Pt[]{p3,p4};\n    if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))     return new Pt[]{p1,p2};\n    Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n    Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n    if (midPoint1.equals(midPoint2))     return new Pt[]{midPoint1};\n    return new Pt[]{midPoint1,midPoint2};\n  }\n  if (abs(p1.x - p2.x) < EPS) {\n    double m=(p4.y - p3.y) / (p4.x - p3.x);\n    double b=p3.y - m * p3.x;\n    return new Pt[]{new Pt(p1.x,m * p1.x + b)};\n  }\n  if (abs(p3.x - p4.x) < EPS) {\n    double m=(p2.y - p1.y) / (p2.x - p1.x);\n    double b=p1.y - m * p1.x;\n    return new Pt[]{new Pt(p3.x,m * p3.x + b)};\n  }\n  double m1=(p2.y - p1.y) / (p2.x - p1.x);\n  double m2=(p4.y - p3.y) / (p4.x - p3.x);\n  double b1=p1.y - m1 * p1.x;\n  double b2=p3.y - m2 * p3.x;\n  double x=(b2 - b1) / (m1 - m2);\n  double y=(m1 * b2 - m2 * b1) / (m1 - m2);\n  return new Pt[]{new Pt(x,y)};\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 490,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 68,
        "startColumnNumber" : 6,
        "endLineNumber" : 68,
        "endColumnNumber" : 87
      },
      "nodeContext" : "if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4)) return new Pt[]{p3,p4};\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "com.williamfiset.algorithms.geometry.LineSegmentLineSegmentIntersection.Pt"
  }, {
    "nodeContext" : "p2",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 71,
      "startColumnNumber" : 57,
      "endLineNumber" : 71,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 71,
        "startColumnNumber" : 37,
        "endLineNumber" : 71,
        "endColumnNumber" : 60
      },
      "nodeContext" : "pointOnLine(p3,p4,p2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 71,
        "startColumnNumber" : 10,
        "endLineNumber" : 71,
        "endColumnNumber" : 60
      },
      "nodeContext" : "pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 71,
        "startColumnNumber" : 6,
        "endLineNumber" : 71,
        "endColumnNumber" : 87
      },
      "nodeContext" : "if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2)) return new Pt[]{p1,p2};\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 692,
        "startLineNumber" : 65,
        "startColumnNumber" : 27,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))   return new Pt[]{p3,p4};\n  if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))   return new Pt[]{p1,p2};\n  Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n  Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n  if (midPoint1.equals(midPoint2))   return new Pt[]{midPoint1};\n  return new Pt[]{midPoint1,midPoint2};\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 715,
        "startLineNumber" : 65,
        "startColumnNumber" : 4,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (collinearSegments) {\n  if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))   return new Pt[]{p3,p4};\n  if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))   return new Pt[]{p1,p2};\n  Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n  Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n  if (midPoint1.equals(midPoint2))   return new Pt[]{midPoint1};\n  return new Pt[]{midPoint1,midPoint2};\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 93,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2413,
        "startLineNumber" : 41,
        "startColumnNumber" : 84,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!segmentsIntersect(p1,p2,p3,p4))   return new Pt[]{};\n  if (p1.equals(p2) && p2.equals(p3) && p3.equals(p4))   return new Pt[]{p1};\n  List<Pt> endpoints=getCommonEndpoints(p1,p2,p3,p4);\n  int n=endpoints.size();\n  boolean singleton=p1.equals(p2) || p3.equals(p4);\n  if (n == 1 && singleton)   return new Pt[]{endpoints.get(0)};\n  if (n == 2)   return new Pt[]{endpoints.get(0),endpoints.get(1)};\n  boolean collinearSegments=(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0);\n  if (collinearSegments) {\n    if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))     return new Pt[]{p3,p4};\n    if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))     return new Pt[]{p1,p2};\n    Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n    Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n    if (midPoint1.equals(midPoint2))     return new Pt[]{midPoint1};\n    return new Pt[]{midPoint1,midPoint2};\n  }\n  if (abs(p1.x - p2.x) < EPS) {\n    double m=(p4.y - p3.y) / (p4.x - p3.x);\n    double b=p3.y - m * p3.x;\n    return new Pt[]{new Pt(p1.x,m * p1.x + b)};\n  }\n  if (abs(p3.x - p4.x) < EPS) {\n    double m=(p2.y - p1.y) / (p2.x - p1.x);\n    double b=p1.y - m * p1.x;\n    return new Pt[]{new Pt(p3.x,m * p3.x + b)};\n  }\n  double m1=(p2.y - p1.y) / (p2.x - p1.x);\n  double m2=(p4.y - p3.y) / (p4.x - p3.x);\n  double b1=p1.y - m1 * p1.x;\n  double b2=p3.y - m2 * p3.x;\n  double x=(b2 - b1) / (m1 - m2);\n  double y=(m1 * b2 - m2 * b1) / (m1 - m2);\n  return new Pt[]{new Pt(x,y)};\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 466,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2495,
        "startLineNumber" : 41,
        "startColumnNumber" : 2,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static Pt[] lineSegmentLineSegmentIntersection(Pt p1,Pt p2,Pt p3,Pt p4){\n  if (!segmentsIntersect(p1,p2,p3,p4))   return new Pt[]{};\n  if (p1.equals(p2) && p2.equals(p3) && p3.equals(p4))   return new Pt[]{p1};\n  List<Pt> endpoints=getCommonEndpoints(p1,p2,p3,p4);\n  int n=endpoints.size();\n  boolean singleton=p1.equals(p2) || p3.equals(p4);\n  if (n == 1 && singleton)   return new Pt[]{endpoints.get(0)};\n  if (n == 2)   return new Pt[]{endpoints.get(0),endpoints.get(1)};\n  boolean collinearSegments=(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0);\n  if (collinearSegments) {\n    if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))     return new Pt[]{p3,p4};\n    if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))     return new Pt[]{p1,p2};\n    Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n    Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n    if (midPoint1.equals(midPoint2))     return new Pt[]{midPoint1};\n    return new Pt[]{midPoint1,midPoint2};\n  }\n  if (abs(p1.x - p2.x) < EPS) {\n    double m=(p4.y - p3.y) / (p4.x - p3.x);\n    double b=p3.y - m * p3.x;\n    return new Pt[]{new Pt(p1.x,m * p1.x + b)};\n  }\n  if (abs(p3.x - p4.x) < EPS) {\n    double m=(p2.y - p1.y) / (p2.x - p1.x);\n    double b=p1.y - m * p1.x;\n    return new Pt[]{new Pt(p3.x,m * p3.x + b)};\n  }\n  double m1=(p2.y - p1.y) / (p2.x - p1.x);\n  double m2=(p4.y - p3.y) / (p4.x - p3.x);\n  double b1=p1.y - m1 * p1.x;\n  double b2=p3.y - m2 * p3.x;\n  double x=(b2 - b1) / (m1 - m2);\n  double y=(m1 * b2 - m2 * b1) / (m1 - m2);\n  return new Pt[]{new Pt(x,y)};\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 490,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 71,
        "startColumnNumber" : 6,
        "endLineNumber" : 71,
        "endColumnNumber" : 87
      },
      "nodeContext" : "if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2)) return new Pt[]{p1,p2};\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "com.williamfiset.algorithms.geometry.LineSegmentLineSegmentIntersection.Pt"
  }, {
    "nodeContext" : "p2",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 71,
      "startColumnNumber" : 83,
      "endLineNumber" : 71,
      "endColumnNumber" : 85
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayCreation,initializer]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 71,
        "startColumnNumber" : 78,
        "endLineNumber" : 71,
        "endColumnNumber" : 86
      },
      "nodeContext" : "{p1,p2}",
      "nodeType" : "ArrayInitializer",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 71,
        "startColumnNumber" : 69,
        "endLineNumber" : 71,
        "endColumnNumber" : 86
      },
      "nodeContext" : "new Pt[]{p1,p2}",
      "nodeType" : "ArrayCreation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 71,
        "startColumnNumber" : 62,
        "endLineNumber" : 71,
        "endColumnNumber" : 87
      },
      "nodeContext" : "return new Pt[]{p1,p2};\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 71,
        "startColumnNumber" : 6,
        "endLineNumber" : 71,
        "endColumnNumber" : 87
      },
      "nodeContext" : "if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2)) return new Pt[]{p1,p2};\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 692,
        "startLineNumber" : 65,
        "startColumnNumber" : 27,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))   return new Pt[]{p3,p4};\n  if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))   return new Pt[]{p1,p2};\n  Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n  Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n  if (midPoint1.equals(midPoint2))   return new Pt[]{midPoint1};\n  return new Pt[]{midPoint1,midPoint2};\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 715,
        "startLineNumber" : 65,
        "startColumnNumber" : 4,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (collinearSegments) {\n  if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))   return new Pt[]{p3,p4};\n  if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))   return new Pt[]{p1,p2};\n  Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n  Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n  if (midPoint1.equals(midPoint2))   return new Pt[]{midPoint1};\n  return new Pt[]{midPoint1,midPoint2};\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 93,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2413,
        "startLineNumber" : 41,
        "startColumnNumber" : 84,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!segmentsIntersect(p1,p2,p3,p4))   return new Pt[]{};\n  if (p1.equals(p2) && p2.equals(p3) && p3.equals(p4))   return new Pt[]{p1};\n  List<Pt> endpoints=getCommonEndpoints(p1,p2,p3,p4);\n  int n=endpoints.size();\n  boolean singleton=p1.equals(p2) || p3.equals(p4);\n  if (n == 1 && singleton)   return new Pt[]{endpoints.get(0)};\n  if (n == 2)   return new Pt[]{endpoints.get(0),endpoints.get(1)};\n  boolean collinearSegments=(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0);\n  if (collinearSegments) {\n    if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))     return new Pt[]{p3,p4};\n    if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))     return new Pt[]{p1,p2};\n    Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n    Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n    if (midPoint1.equals(midPoint2))     return new Pt[]{midPoint1};\n    return new Pt[]{midPoint1,midPoint2};\n  }\n  if (abs(p1.x - p2.x) < EPS) {\n    double m=(p4.y - p3.y) / (p4.x - p3.x);\n    double b=p3.y - m * p3.x;\n    return new Pt[]{new Pt(p1.x,m * p1.x + b)};\n  }\n  if (abs(p3.x - p4.x) < EPS) {\n    double m=(p2.y - p1.y) / (p2.x - p1.x);\n    double b=p1.y - m * p1.x;\n    return new Pt[]{new Pt(p3.x,m * p3.x + b)};\n  }\n  double m1=(p2.y - p1.y) / (p2.x - p1.x);\n  double m2=(p4.y - p3.y) / (p4.x - p3.x);\n  double b1=p1.y - m1 * p1.x;\n  double b2=p3.y - m2 * p3.x;\n  double x=(b2 - b1) / (m1 - m2);\n  double y=(m1 * b2 - m2 * b1) / (m1 - m2);\n  return new Pt[]{new Pt(x,y)};\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 466,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2495,
        "startLineNumber" : 41,
        "startColumnNumber" : 2,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static Pt[] lineSegmentLineSegmentIntersection(Pt p1,Pt p2,Pt p3,Pt p4){\n  if (!segmentsIntersect(p1,p2,p3,p4))   return new Pt[]{};\n  if (p1.equals(p2) && p2.equals(p3) && p3.equals(p4))   return new Pt[]{p1};\n  List<Pt> endpoints=getCommonEndpoints(p1,p2,p3,p4);\n  int n=endpoints.size();\n  boolean singleton=p1.equals(p2) || p3.equals(p4);\n  if (n == 1 && singleton)   return new Pt[]{endpoints.get(0)};\n  if (n == 2)   return new Pt[]{endpoints.get(0),endpoints.get(1)};\n  boolean collinearSegments=(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0);\n  if (collinearSegments) {\n    if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))     return new Pt[]{p3,p4};\n    if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))     return new Pt[]{p1,p2};\n    Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n    Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n    if (midPoint1.equals(midPoint2))     return new Pt[]{midPoint1};\n    return new Pt[]{midPoint1,midPoint2};\n  }\n  if (abs(p1.x - p2.x) < EPS) {\n    double m=(p4.y - p3.y) / (p4.x - p3.x);\n    double b=p3.y - m * p3.x;\n    return new Pt[]{new Pt(p1.x,m * p1.x + b)};\n  }\n  if (abs(p3.x - p4.x) < EPS) {\n    double m=(p2.y - p1.y) / (p2.x - p1.x);\n    double b=p1.y - m * p1.x;\n    return new Pt[]{new Pt(p3.x,m * p3.x + b)};\n  }\n  double m1=(p2.y - p1.y) / (p2.x - p1.x);\n  double m2=(p4.y - p3.y) / (p4.x - p3.x);\n  double b1=p1.y - m1 * p1.x;\n  double b2=p3.y - m2 * p3.x;\n  double x=(b2 - b1) / (m1 - m2);\n  double y=(m1 * b2 - m2 * b1) / (m1 - m2);\n  return new Pt[]{new Pt(x,y)};\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 490,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 71,
        "startColumnNumber" : 6,
        "endLineNumber" : 71,
        "endColumnNumber" : 87
      },
      "nodeContext" : "if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2)) return new Pt[]{p1,p2};\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "com.williamfiset.algorithms.geometry.LineSegmentLineSegmentIntersection.Pt"
  }, {
    "nodeContext" : "p2",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 75,
      "startColumnNumber" : 37,
      "endLineNumber" : 75,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 75,
        "startColumnNumber" : 21,
        "endLineNumber" : 75,
        "endColumnNumber" : 44
      },
      "nodeContext" : "pointOnLine(p1,p2,p3)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 75,
        "startColumnNumber" : 21,
        "endLineNumber" : 75,
        "endColumnNumber" : 54
      },
      "nodeContext" : "pointOnLine(p1,p2,p3) ? p3 : p4",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 75,
        "startColumnNumber" : 9,
        "endLineNumber" : 75,
        "endColumnNumber" : 54
      },
      "nodeContext" : "midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 75,
        "startColumnNumber" : 6,
        "endLineNumber" : 75,
        "endColumnNumber" : 55
      },
      "nodeContext" : "Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 692,
        "startLineNumber" : 65,
        "startColumnNumber" : 27,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))   return new Pt[]{p3,p4};\n  if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))   return new Pt[]{p1,p2};\n  Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n  Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n  if (midPoint1.equals(midPoint2))   return new Pt[]{midPoint1};\n  return new Pt[]{midPoint1,midPoint2};\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 715,
        "startLineNumber" : 65,
        "startColumnNumber" : 4,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (collinearSegments) {\n  if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))   return new Pt[]{p3,p4};\n  if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))   return new Pt[]{p1,p2};\n  Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n  Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n  if (midPoint1.equals(midPoint2))   return new Pt[]{midPoint1};\n  return new Pt[]{midPoint1,midPoint2};\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 93,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2413,
        "startLineNumber" : 41,
        "startColumnNumber" : 84,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!segmentsIntersect(p1,p2,p3,p4))   return new Pt[]{};\n  if (p1.equals(p2) && p2.equals(p3) && p3.equals(p4))   return new Pt[]{p1};\n  List<Pt> endpoints=getCommonEndpoints(p1,p2,p3,p4);\n  int n=endpoints.size();\n  boolean singleton=p1.equals(p2) || p3.equals(p4);\n  if (n == 1 && singleton)   return new Pt[]{endpoints.get(0)};\n  if (n == 2)   return new Pt[]{endpoints.get(0),endpoints.get(1)};\n  boolean collinearSegments=(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0);\n  if (collinearSegments) {\n    if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))     return new Pt[]{p3,p4};\n    if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))     return new Pt[]{p1,p2};\n    Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n    Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n    if (midPoint1.equals(midPoint2))     return new Pt[]{midPoint1};\n    return new Pt[]{midPoint1,midPoint2};\n  }\n  if (abs(p1.x - p2.x) < EPS) {\n    double m=(p4.y - p3.y) / (p4.x - p3.x);\n    double b=p3.y - m * p3.x;\n    return new Pt[]{new Pt(p1.x,m * p1.x + b)};\n  }\n  if (abs(p3.x - p4.x) < EPS) {\n    double m=(p2.y - p1.y) / (p2.x - p1.x);\n    double b=p1.y - m * p1.x;\n    return new Pt[]{new Pt(p3.x,m * p3.x + b)};\n  }\n  double m1=(p2.y - p1.y) / (p2.x - p1.x);\n  double m2=(p4.y - p3.y) / (p4.x - p3.x);\n  double b1=p1.y - m1 * p1.x;\n  double b2=p3.y - m2 * p3.x;\n  double x=(b2 - b1) / (m1 - m2);\n  double y=(m1 * b2 - m2 * b1) / (m1 - m2);\n  return new Pt[]{new Pt(x,y)};\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 466,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2495,
        "startLineNumber" : 41,
        "startColumnNumber" : 2,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static Pt[] lineSegmentLineSegmentIntersection(Pt p1,Pt p2,Pt p3,Pt p4){\n  if (!segmentsIntersect(p1,p2,p3,p4))   return new Pt[]{};\n  if (p1.equals(p2) && p2.equals(p3) && p3.equals(p4))   return new Pt[]{p1};\n  List<Pt> endpoints=getCommonEndpoints(p1,p2,p3,p4);\n  int n=endpoints.size();\n  boolean singleton=p1.equals(p2) || p3.equals(p4);\n  if (n == 1 && singleton)   return new Pt[]{endpoints.get(0)};\n  if (n == 2)   return new Pt[]{endpoints.get(0),endpoints.get(1)};\n  boolean collinearSegments=(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0);\n  if (collinearSegments) {\n    if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))     return new Pt[]{p3,p4};\n    if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))     return new Pt[]{p1,p2};\n    Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n    Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n    if (midPoint1.equals(midPoint2))     return new Pt[]{midPoint1};\n    return new Pt[]{midPoint1,midPoint2};\n  }\n  if (abs(p1.x - p2.x) < EPS) {\n    double m=(p4.y - p3.y) / (p4.x - p3.x);\n    double b=p3.y - m * p3.x;\n    return new Pt[]{new Pt(p1.x,m * p1.x + b)};\n  }\n  if (abs(p3.x - p4.x) < EPS) {\n    double m=(p2.y - p1.y) / (p2.x - p1.x);\n    double b=p1.y - m * p1.x;\n    return new Pt[]{new Pt(p3.x,m * p3.x + b)};\n  }\n  double m1=(p2.y - p1.y) / (p2.x - p1.x);\n  double m2=(p4.y - p3.y) / (p4.x - p3.x);\n  double b1=p1.y - m1 * p1.x;\n  double b2=p3.y - m2 * p3.x;\n  double x=(b2 - b1) / (m1 - m2);\n  double y=(m1 * b2 - m2 * b1) / (m1 - m2);\n  return new Pt[]{new Pt(x,y)};\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 490,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 75,
        "startColumnNumber" : 6,
        "endLineNumber" : 75,
        "endColumnNumber" : 55
      },
      "nodeContext" : "Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.williamfiset.algorithms.geometry.LineSegmentLineSegmentIntersection.Pt"
  }, {
    "nodeContext" : "p2",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 76,
      "startColumnNumber" : 52,
      "endLineNumber" : 76,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 76,
        "startColumnNumber" : 21,
        "endLineNumber" : 76,
        "endColumnNumber" : 54
      },
      "nodeContext" : "pointOnLine(p3,p4,p1) ? p1 : p2",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 76,
        "startColumnNumber" : 9,
        "endLineNumber" : 76,
        "endColumnNumber" : 54
      },
      "nodeContext" : "midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 76,
        "startColumnNumber" : 6,
        "endLineNumber" : 76,
        "endColumnNumber" : 55
      },
      "nodeContext" : "Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 692,
        "startLineNumber" : 65,
        "startColumnNumber" : 27,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))   return new Pt[]{p3,p4};\n  if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))   return new Pt[]{p1,p2};\n  Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n  Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n  if (midPoint1.equals(midPoint2))   return new Pt[]{midPoint1};\n  return new Pt[]{midPoint1,midPoint2};\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 715,
        "startLineNumber" : 65,
        "startColumnNumber" : 4,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (collinearSegments) {\n  if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))   return new Pt[]{p3,p4};\n  if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))   return new Pt[]{p1,p2};\n  Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n  Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n  if (midPoint1.equals(midPoint2))   return new Pt[]{midPoint1};\n  return new Pt[]{midPoint1,midPoint2};\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 93,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2413,
        "startLineNumber" : 41,
        "startColumnNumber" : 84,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!segmentsIntersect(p1,p2,p3,p4))   return new Pt[]{};\n  if (p1.equals(p2) && p2.equals(p3) && p3.equals(p4))   return new Pt[]{p1};\n  List<Pt> endpoints=getCommonEndpoints(p1,p2,p3,p4);\n  int n=endpoints.size();\n  boolean singleton=p1.equals(p2) || p3.equals(p4);\n  if (n == 1 && singleton)   return new Pt[]{endpoints.get(0)};\n  if (n == 2)   return new Pt[]{endpoints.get(0),endpoints.get(1)};\n  boolean collinearSegments=(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0);\n  if (collinearSegments) {\n    if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))     return new Pt[]{p3,p4};\n    if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))     return new Pt[]{p1,p2};\n    Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n    Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n    if (midPoint1.equals(midPoint2))     return new Pt[]{midPoint1};\n    return new Pt[]{midPoint1,midPoint2};\n  }\n  if (abs(p1.x - p2.x) < EPS) {\n    double m=(p4.y - p3.y) / (p4.x - p3.x);\n    double b=p3.y - m * p3.x;\n    return new Pt[]{new Pt(p1.x,m * p1.x + b)};\n  }\n  if (abs(p3.x - p4.x) < EPS) {\n    double m=(p2.y - p1.y) / (p2.x - p1.x);\n    double b=p1.y - m * p1.x;\n    return new Pt[]{new Pt(p3.x,m * p3.x + b)};\n  }\n  double m1=(p2.y - p1.y) / (p2.x - p1.x);\n  double m2=(p4.y - p3.y) / (p4.x - p3.x);\n  double b1=p1.y - m1 * p1.x;\n  double b2=p3.y - m2 * p3.x;\n  double x=(b2 - b1) / (m1 - m2);\n  double y=(m1 * b2 - m2 * b1) / (m1 - m2);\n  return new Pt[]{new Pt(x,y)};\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 466,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2495,
        "startLineNumber" : 41,
        "startColumnNumber" : 2,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static Pt[] lineSegmentLineSegmentIntersection(Pt p1,Pt p2,Pt p3,Pt p4){\n  if (!segmentsIntersect(p1,p2,p3,p4))   return new Pt[]{};\n  if (p1.equals(p2) && p2.equals(p3) && p3.equals(p4))   return new Pt[]{p1};\n  List<Pt> endpoints=getCommonEndpoints(p1,p2,p3,p4);\n  int n=endpoints.size();\n  boolean singleton=p1.equals(p2) || p3.equals(p4);\n  if (n == 1 && singleton)   return new Pt[]{endpoints.get(0)};\n  if (n == 2)   return new Pt[]{endpoints.get(0),endpoints.get(1)};\n  boolean collinearSegments=(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0);\n  if (collinearSegments) {\n    if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))     return new Pt[]{p3,p4};\n    if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))     return new Pt[]{p1,p2};\n    Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n    Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n    if (midPoint1.equals(midPoint2))     return new Pt[]{midPoint1};\n    return new Pt[]{midPoint1,midPoint2};\n  }\n  if (abs(p1.x - p2.x) < EPS) {\n    double m=(p4.y - p3.y) / (p4.x - p3.x);\n    double b=p3.y - m * p3.x;\n    return new Pt[]{new Pt(p1.x,m * p1.x + b)};\n  }\n  if (abs(p3.x - p4.x) < EPS) {\n    double m=(p2.y - p1.y) / (p2.x - p1.x);\n    double b=p1.y - m * p1.x;\n    return new Pt[]{new Pt(p3.x,m * p3.x + b)};\n  }\n  double m1=(p2.y - p1.y) / (p2.x - p1.x);\n  double m2=(p4.y - p3.y) / (p4.x - p3.x);\n  double b1=p1.y - m1 * p1.x;\n  double b2=p3.y - m2 * p3.x;\n  double x=(b2 - b1) / (m1 - m2);\n  double y=(m1 * b2 - m2 * b1) / (m1 - m2);\n  return new Pt[]{new Pt(x,y)};\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 490,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 76,
        "startColumnNumber" : 6,
        "endLineNumber" : 76,
        "endColumnNumber" : 55
      },
      "nodeContext" : "Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.williamfiset.algorithms.geometry.LineSegmentLineSegmentIntersection.Pt"
  }, {
    "nodeContext" : "p2",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 87,
      "startColumnNumber" : 19,
      "endLineNumber" : 87,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 4,
        "startLineNumber" : 87,
        "startColumnNumber" : 19,
        "endLineNumber" : 87,
        "endColumnNumber" : 23
      },
      "nodeContext" : "p2.x",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 87,
        "startColumnNumber" : 12,
        "endLineNumber" : 87,
        "endColumnNumber" : 23
      },
      "nodeContext" : "p1.x - p2.x",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 24
      },
      "nodeContext" : "abs(p1.x - p2.x)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 30
      },
      "nodeContext" : "abs(p1.x - p2.x) < EPS",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 169,
        "startLineNumber" : 87,
        "startColumnNumber" : 4,
        "endLineNumber" : 91,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (abs(p1.x - p2.x) < EPS) {\n  double m=(p4.y - p3.y) / (p4.x - p3.x);\n  double b=p3.y - m * p3.x;\n  return new Pt[]{new Pt(p1.x,m * p1.x + b)};\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 67,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2413,
        "startLineNumber" : 41,
        "startColumnNumber" : 84,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!segmentsIntersect(p1,p2,p3,p4))   return new Pt[]{};\n  if (p1.equals(p2) && p2.equals(p3) && p3.equals(p4))   return new Pt[]{p1};\n  List<Pt> endpoints=getCommonEndpoints(p1,p2,p3,p4);\n  int n=endpoints.size();\n  boolean singleton=p1.equals(p2) || p3.equals(p4);\n  if (n == 1 && singleton)   return new Pt[]{endpoints.get(0)};\n  if (n == 2)   return new Pt[]{endpoints.get(0),endpoints.get(1)};\n  boolean collinearSegments=(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0);\n  if (collinearSegments) {\n    if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))     return new Pt[]{p3,p4};\n    if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))     return new Pt[]{p1,p2};\n    Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n    Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n    if (midPoint1.equals(midPoint2))     return new Pt[]{midPoint1};\n    return new Pt[]{midPoint1,midPoint2};\n  }\n  if (abs(p1.x - p2.x) < EPS) {\n    double m=(p4.y - p3.y) / (p4.x - p3.x);\n    double b=p3.y - m * p3.x;\n    return new Pt[]{new Pt(p1.x,m * p1.x + b)};\n  }\n  if (abs(p3.x - p4.x) < EPS) {\n    double m=(p2.y - p1.y) / (p2.x - p1.x);\n    double b=p1.y - m * p1.x;\n    return new Pt[]{new Pt(p3.x,m * p3.x + b)};\n  }\n  double m1=(p2.y - p1.y) / (p2.x - p1.x);\n  double m2=(p4.y - p3.y) / (p4.x - p3.x);\n  double b1=p1.y - m1 * p1.x;\n  double b2=p3.y - m2 * p3.x;\n  double x=(b2 - b1) / (m1 - m2);\n  double y=(m1 * b2 - m2 * b1) / (m1 - m2);\n  return new Pt[]{new Pt(x,y)};\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 466,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2495,
        "startLineNumber" : 41,
        "startColumnNumber" : 2,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static Pt[] lineSegmentLineSegmentIntersection(Pt p1,Pt p2,Pt p3,Pt p4){\n  if (!segmentsIntersect(p1,p2,p3,p4))   return new Pt[]{};\n  if (p1.equals(p2) && p2.equals(p3) && p3.equals(p4))   return new Pt[]{p1};\n  List<Pt> endpoints=getCommonEndpoints(p1,p2,p3,p4);\n  int n=endpoints.size();\n  boolean singleton=p1.equals(p2) || p3.equals(p4);\n  if (n == 1 && singleton)   return new Pt[]{endpoints.get(0)};\n  if (n == 2)   return new Pt[]{endpoints.get(0),endpoints.get(1)};\n  boolean collinearSegments=(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0);\n  if (collinearSegments) {\n    if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))     return new Pt[]{p3,p4};\n    if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))     return new Pt[]{p1,p2};\n    Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n    Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n    if (midPoint1.equals(midPoint2))     return new Pt[]{midPoint1};\n    return new Pt[]{midPoint1,midPoint2};\n  }\n  if (abs(p1.x - p2.x) < EPS) {\n    double m=(p4.y - p3.y) / (p4.x - p3.x);\n    double b=p3.y - m * p3.x;\n    return new Pt[]{new Pt(p1.x,m * p1.x + b)};\n  }\n  if (abs(p3.x - p4.x) < EPS) {\n    double m=(p2.y - p1.y) / (p2.x - p1.x);\n    double b=p1.y - m * p1.x;\n    return new Pt[]{new Pt(p3.x,m * p3.x + b)};\n  }\n  double m1=(p2.y - p1.y) / (p2.x - p1.x);\n  double m2=(p4.y - p3.y) / (p4.x - p3.x);\n  double b1=p1.y - m1 * p1.x;\n  double b2=p3.y - m2 * p3.x;\n  double x=(b2 - b1) / (m1 - m2);\n  double y=(m1 * b2 - m2 * b1) / (m1 - m2);\n  return new Pt[]{new Pt(x,y)};\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 490,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 30
      },
      "nodeContext" : "abs(p1.x - p2.x) < EPS",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.williamfiset.algorithms.geometry.LineSegmentLineSegmentIntersection.Pt"
  }, {
    "nodeContext" : "p2",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 95,
      "startColumnNumber" : 18,
      "endLineNumber" : 95,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 4,
        "startLineNumber" : 95,
        "startColumnNumber" : 18,
        "endLineNumber" : 95,
        "endColumnNumber" : 22
      },
      "nodeContext" : "p2.y",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 95,
        "startColumnNumber" : 18,
        "endLineNumber" : 95,
        "endColumnNumber" : 29
      },
      "nodeContext" : "p2.y - p1.y",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 95,
        "startColumnNumber" : 17,
        "endLineNumber" : 95,
        "endColumnNumber" : 30
      },
      "nodeContext" : "(p2.y - p1.y)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 95,
        "startColumnNumber" : 17,
        "endLineNumber" : 95,
        "endColumnNumber" : 46
      },
      "nodeContext" : "(p2.y - p1.y) / (p2.x - p1.x)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 95,
        "startColumnNumber" : 13,
        "endLineNumber" : 95,
        "endColumnNumber" : 46
      },
      "nodeContext" : "m=(p2.y - p1.y) / (p2.x - p1.x)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 95,
        "startColumnNumber" : 6,
        "endLineNumber" : 95,
        "endColumnNumber" : 47
      },
      "nodeContext" : "double m=(p2.y - p1.y) / (p2.x - p1.x);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 141,
        "startLineNumber" : 94,
        "startColumnNumber" : 32,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  double m=(p2.y - p1.y) / (p2.x - p1.x);\n  double b=p1.y - m * p1.x;\n  return new Pt[]{new Pt(p3.x,m * p3.x + b)};\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 55,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 169,
        "startLineNumber" : 94,
        "startColumnNumber" : 4,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (abs(p3.x - p4.x) < EPS) {\n  double m=(p2.y - p1.y) / (p2.x - p1.x);\n  double b=p1.y - m * p1.x;\n  return new Pt[]{new Pt(p3.x,m * p3.x + b)};\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 67,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2413,
        "startLineNumber" : 41,
        "startColumnNumber" : 84,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!segmentsIntersect(p1,p2,p3,p4))   return new Pt[]{};\n  if (p1.equals(p2) && p2.equals(p3) && p3.equals(p4))   return new Pt[]{p1};\n  List<Pt> endpoints=getCommonEndpoints(p1,p2,p3,p4);\n  int n=endpoints.size();\n  boolean singleton=p1.equals(p2) || p3.equals(p4);\n  if (n == 1 && singleton)   return new Pt[]{endpoints.get(0)};\n  if (n == 2)   return new Pt[]{endpoints.get(0),endpoints.get(1)};\n  boolean collinearSegments=(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0);\n  if (collinearSegments) {\n    if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))     return new Pt[]{p3,p4};\n    if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))     return new Pt[]{p1,p2};\n    Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n    Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n    if (midPoint1.equals(midPoint2))     return new Pt[]{midPoint1};\n    return new Pt[]{midPoint1,midPoint2};\n  }\n  if (abs(p1.x - p2.x) < EPS) {\n    double m=(p4.y - p3.y) / (p4.x - p3.x);\n    double b=p3.y - m * p3.x;\n    return new Pt[]{new Pt(p1.x,m * p1.x + b)};\n  }\n  if (abs(p3.x - p4.x) < EPS) {\n    double m=(p2.y - p1.y) / (p2.x - p1.x);\n    double b=p1.y - m * p1.x;\n    return new Pt[]{new Pt(p3.x,m * p3.x + b)};\n  }\n  double m1=(p2.y - p1.y) / (p2.x - p1.x);\n  double m2=(p4.y - p3.y) / (p4.x - p3.x);\n  double b1=p1.y - m1 * p1.x;\n  double b2=p3.y - m2 * p3.x;\n  double x=(b2 - b1) / (m1 - m2);\n  double y=(m1 * b2 - m2 * b1) / (m1 - m2);\n  return new Pt[]{new Pt(x,y)};\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 466,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2495,
        "startLineNumber" : 41,
        "startColumnNumber" : 2,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static Pt[] lineSegmentLineSegmentIntersection(Pt p1,Pt p2,Pt p3,Pt p4){\n  if (!segmentsIntersect(p1,p2,p3,p4))   return new Pt[]{};\n  if (p1.equals(p2) && p2.equals(p3) && p3.equals(p4))   return new Pt[]{p1};\n  List<Pt> endpoints=getCommonEndpoints(p1,p2,p3,p4);\n  int n=endpoints.size();\n  boolean singleton=p1.equals(p2) || p3.equals(p4);\n  if (n == 1 && singleton)   return new Pt[]{endpoints.get(0)};\n  if (n == 2)   return new Pt[]{endpoints.get(0),endpoints.get(1)};\n  boolean collinearSegments=(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0);\n  if (collinearSegments) {\n    if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))     return new Pt[]{p3,p4};\n    if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))     return new Pt[]{p1,p2};\n    Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n    Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n    if (midPoint1.equals(midPoint2))     return new Pt[]{midPoint1};\n    return new Pt[]{midPoint1,midPoint2};\n  }\n  if (abs(p1.x - p2.x) < EPS) {\n    double m=(p4.y - p3.y) / (p4.x - p3.x);\n    double b=p3.y - m * p3.x;\n    return new Pt[]{new Pt(p1.x,m * p1.x + b)};\n  }\n  if (abs(p3.x - p4.x) < EPS) {\n    double m=(p2.y - p1.y) / (p2.x - p1.x);\n    double b=p1.y - m * p1.x;\n    return new Pt[]{new Pt(p3.x,m * p3.x + b)};\n  }\n  double m1=(p2.y - p1.y) / (p2.x - p1.x);\n  double m2=(p4.y - p3.y) / (p4.x - p3.x);\n  double b1=p1.y - m1 * p1.x;\n  double b2=p3.y - m2 * p3.x;\n  double x=(b2 - b1) / (m1 - m2);\n  double y=(m1 * b2 - m2 * b1) / (m1 - m2);\n  return new Pt[]{new Pt(x,y)};\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 490,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 95,
        "startColumnNumber" : 6,
        "endLineNumber" : 95,
        "endColumnNumber" : 47
      },
      "nodeContext" : "double m=(p2.y - p1.y) / (p2.x - p1.x);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "com.williamfiset.algorithms.geometry.LineSegmentLineSegmentIntersection.Pt"
  }, {
    "nodeContext" : "p2",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 95,
      "startColumnNumber" : 34,
      "endLineNumber" : 95,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 4,
        "startLineNumber" : 95,
        "startColumnNumber" : 34,
        "endLineNumber" : 95,
        "endColumnNumber" : 38
      },
      "nodeContext" : "p2.x",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 95,
        "startColumnNumber" : 34,
        "endLineNumber" : 95,
        "endColumnNumber" : 45
      },
      "nodeContext" : "p2.x - p1.x",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 95,
        "startColumnNumber" : 33,
        "endLineNumber" : 95,
        "endColumnNumber" : 46
      },
      "nodeContext" : "(p2.x - p1.x)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 95,
        "startColumnNumber" : 17,
        "endLineNumber" : 95,
        "endColumnNumber" : 46
      },
      "nodeContext" : "(p2.y - p1.y) / (p2.x - p1.x)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 95,
        "startColumnNumber" : 13,
        "endLineNumber" : 95,
        "endColumnNumber" : 46
      },
      "nodeContext" : "m=(p2.y - p1.y) / (p2.x - p1.x)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 95,
        "startColumnNumber" : 6,
        "endLineNumber" : 95,
        "endColumnNumber" : 47
      },
      "nodeContext" : "double m=(p2.y - p1.y) / (p2.x - p1.x);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 141,
        "startLineNumber" : 94,
        "startColumnNumber" : 32,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  double m=(p2.y - p1.y) / (p2.x - p1.x);\n  double b=p1.y - m * p1.x;\n  return new Pt[]{new Pt(p3.x,m * p3.x + b)};\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 55,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 169,
        "startLineNumber" : 94,
        "startColumnNumber" : 4,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (abs(p3.x - p4.x) < EPS) {\n  double m=(p2.y - p1.y) / (p2.x - p1.x);\n  double b=p1.y - m * p1.x;\n  return new Pt[]{new Pt(p3.x,m * p3.x + b)};\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 67,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2413,
        "startLineNumber" : 41,
        "startColumnNumber" : 84,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!segmentsIntersect(p1,p2,p3,p4))   return new Pt[]{};\n  if (p1.equals(p2) && p2.equals(p3) && p3.equals(p4))   return new Pt[]{p1};\n  List<Pt> endpoints=getCommonEndpoints(p1,p2,p3,p4);\n  int n=endpoints.size();\n  boolean singleton=p1.equals(p2) || p3.equals(p4);\n  if (n == 1 && singleton)   return new Pt[]{endpoints.get(0)};\n  if (n == 2)   return new Pt[]{endpoints.get(0),endpoints.get(1)};\n  boolean collinearSegments=(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0);\n  if (collinearSegments) {\n    if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))     return new Pt[]{p3,p4};\n    if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))     return new Pt[]{p1,p2};\n    Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n    Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n    if (midPoint1.equals(midPoint2))     return new Pt[]{midPoint1};\n    return new Pt[]{midPoint1,midPoint2};\n  }\n  if (abs(p1.x - p2.x) < EPS) {\n    double m=(p4.y - p3.y) / (p4.x - p3.x);\n    double b=p3.y - m * p3.x;\n    return new Pt[]{new Pt(p1.x,m * p1.x + b)};\n  }\n  if (abs(p3.x - p4.x) < EPS) {\n    double m=(p2.y - p1.y) / (p2.x - p1.x);\n    double b=p1.y - m * p1.x;\n    return new Pt[]{new Pt(p3.x,m * p3.x + b)};\n  }\n  double m1=(p2.y - p1.y) / (p2.x - p1.x);\n  double m2=(p4.y - p3.y) / (p4.x - p3.x);\n  double b1=p1.y - m1 * p1.x;\n  double b2=p3.y - m2 * p3.x;\n  double x=(b2 - b1) / (m1 - m2);\n  double y=(m1 * b2 - m2 * b1) / (m1 - m2);\n  return new Pt[]{new Pt(x,y)};\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 466,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2495,
        "startLineNumber" : 41,
        "startColumnNumber" : 2,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static Pt[] lineSegmentLineSegmentIntersection(Pt p1,Pt p2,Pt p3,Pt p4){\n  if (!segmentsIntersect(p1,p2,p3,p4))   return new Pt[]{};\n  if (p1.equals(p2) && p2.equals(p3) && p3.equals(p4))   return new Pt[]{p1};\n  List<Pt> endpoints=getCommonEndpoints(p1,p2,p3,p4);\n  int n=endpoints.size();\n  boolean singleton=p1.equals(p2) || p3.equals(p4);\n  if (n == 1 && singleton)   return new Pt[]{endpoints.get(0)};\n  if (n == 2)   return new Pt[]{endpoints.get(0),endpoints.get(1)};\n  boolean collinearSegments=(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0);\n  if (collinearSegments) {\n    if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))     return new Pt[]{p3,p4};\n    if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))     return new Pt[]{p1,p2};\n    Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n    Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n    if (midPoint1.equals(midPoint2))     return new Pt[]{midPoint1};\n    return new Pt[]{midPoint1,midPoint2};\n  }\n  if (abs(p1.x - p2.x) < EPS) {\n    double m=(p4.y - p3.y) / (p4.x - p3.x);\n    double b=p3.y - m * p3.x;\n    return new Pt[]{new Pt(p1.x,m * p1.x + b)};\n  }\n  if (abs(p3.x - p4.x) < EPS) {\n    double m=(p2.y - p1.y) / (p2.x - p1.x);\n    double b=p1.y - m * p1.x;\n    return new Pt[]{new Pt(p3.x,m * p3.x + b)};\n  }\n  double m1=(p2.y - p1.y) / (p2.x - p1.x);\n  double m2=(p4.y - p3.y) / (p4.x - p3.x);\n  double b1=p1.y - m1 * p1.x;\n  double b2=p3.y - m2 * p3.x;\n  double x=(b2 - b1) / (m1 - m2);\n  double y=(m1 * b2 - m2 * b1) / (m1 - m2);\n  return new Pt[]{new Pt(x,y)};\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 490,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 95,
        "startColumnNumber" : 6,
        "endLineNumber" : 95,
        "endColumnNumber" : 47
      },
      "nodeContext" : "double m=(p2.y - p1.y) / (p2.x - p1.x);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "com.williamfiset.algorithms.geometry.LineSegmentLineSegmentIntersection.Pt"
  }, {
    "nodeContext" : "p2",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 100,
      "startColumnNumber" : 17,
      "endLineNumber" : 100,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 4,
        "startLineNumber" : 100,
        "startColumnNumber" : 17,
        "endLineNumber" : 100,
        "endColumnNumber" : 21
      },
      "nodeContext" : "p2.y",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 100,
        "startColumnNumber" : 17,
        "endLineNumber" : 100,
        "endColumnNumber" : 28
      },
      "nodeContext" : "p2.y - p1.y",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 100,
        "startColumnNumber" : 16,
        "endLineNumber" : 100,
        "endColumnNumber" : 29
      },
      "nodeContext" : "(p2.y - p1.y)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 100,
        "startColumnNumber" : 16,
        "endLineNumber" : 100,
        "endColumnNumber" : 45
      },
      "nodeContext" : "(p2.y - p1.y) / (p2.x - p1.x)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 100,
        "startColumnNumber" : 11,
        "endLineNumber" : 100,
        "endColumnNumber" : 45
      },
      "nodeContext" : "m1=(p2.y - p1.y) / (p2.x - p1.x)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 100,
        "startColumnNumber" : 4,
        "endLineNumber" : 100,
        "endColumnNumber" : 46
      },
      "nodeContext" : "double m1=(p2.y - p1.y) / (p2.x - p1.x);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2413,
        "startLineNumber" : 41,
        "startColumnNumber" : 84,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!segmentsIntersect(p1,p2,p3,p4))   return new Pt[]{};\n  if (p1.equals(p2) && p2.equals(p3) && p3.equals(p4))   return new Pt[]{p1};\n  List<Pt> endpoints=getCommonEndpoints(p1,p2,p3,p4);\n  int n=endpoints.size();\n  boolean singleton=p1.equals(p2) || p3.equals(p4);\n  if (n == 1 && singleton)   return new Pt[]{endpoints.get(0)};\n  if (n == 2)   return new Pt[]{endpoints.get(0),endpoints.get(1)};\n  boolean collinearSegments=(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0);\n  if (collinearSegments) {\n    if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))     return new Pt[]{p3,p4};\n    if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))     return new Pt[]{p1,p2};\n    Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n    Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n    if (midPoint1.equals(midPoint2))     return new Pt[]{midPoint1};\n    return new Pt[]{midPoint1,midPoint2};\n  }\n  if (abs(p1.x - p2.x) < EPS) {\n    double m=(p4.y - p3.y) / (p4.x - p3.x);\n    double b=p3.y - m * p3.x;\n    return new Pt[]{new Pt(p1.x,m * p1.x + b)};\n  }\n  if (abs(p3.x - p4.x) < EPS) {\n    double m=(p2.y - p1.y) / (p2.x - p1.x);\n    double b=p1.y - m * p1.x;\n    return new Pt[]{new Pt(p3.x,m * p3.x + b)};\n  }\n  double m1=(p2.y - p1.y) / (p2.x - p1.x);\n  double m2=(p4.y - p3.y) / (p4.x - p3.x);\n  double b1=p1.y - m1 * p1.x;\n  double b2=p3.y - m2 * p3.x;\n  double x=(b2 - b1) / (m1 - m2);\n  double y=(m1 * b2 - m2 * b1) / (m1 - m2);\n  return new Pt[]{new Pt(x,y)};\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 466,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2495,
        "startLineNumber" : 41,
        "startColumnNumber" : 2,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static Pt[] lineSegmentLineSegmentIntersection(Pt p1,Pt p2,Pt p3,Pt p4){\n  if (!segmentsIntersect(p1,p2,p3,p4))   return new Pt[]{};\n  if (p1.equals(p2) && p2.equals(p3) && p3.equals(p4))   return new Pt[]{p1};\n  List<Pt> endpoints=getCommonEndpoints(p1,p2,p3,p4);\n  int n=endpoints.size();\n  boolean singleton=p1.equals(p2) || p3.equals(p4);\n  if (n == 1 && singleton)   return new Pt[]{endpoints.get(0)};\n  if (n == 2)   return new Pt[]{endpoints.get(0),endpoints.get(1)};\n  boolean collinearSegments=(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0);\n  if (collinearSegments) {\n    if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))     return new Pt[]{p3,p4};\n    if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))     return new Pt[]{p1,p2};\n    Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n    Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n    if (midPoint1.equals(midPoint2))     return new Pt[]{midPoint1};\n    return new Pt[]{midPoint1,midPoint2};\n  }\n  if (abs(p1.x - p2.x) < EPS) {\n    double m=(p4.y - p3.y) / (p4.x - p3.x);\n    double b=p3.y - m * p3.x;\n    return new Pt[]{new Pt(p1.x,m * p1.x + b)};\n  }\n  if (abs(p3.x - p4.x) < EPS) {\n    double m=(p2.y - p1.y) / (p2.x - p1.x);\n    double b=p1.y - m * p1.x;\n    return new Pt[]{new Pt(p3.x,m * p3.x + b)};\n  }\n  double m1=(p2.y - p1.y) / (p2.x - p1.x);\n  double m2=(p4.y - p3.y) / (p4.x - p3.x);\n  double b1=p1.y - m1 * p1.x;\n  double b2=p3.y - m2 * p3.x;\n  double x=(b2 - b1) / (m1 - m2);\n  double y=(m1 * b2 - m2 * b1) / (m1 - m2);\n  return new Pt[]{new Pt(x,y)};\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 490,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 100,
        "startColumnNumber" : 4,
        "endLineNumber" : 100,
        "endColumnNumber" : 46
      },
      "nodeContext" : "double m1=(p2.y - p1.y) / (p2.x - p1.x);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "com.williamfiset.algorithms.geometry.LineSegmentLineSegmentIntersection.Pt"
  }, {
    "nodeContext" : "p2",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 100,
      "startColumnNumber" : 33,
      "endLineNumber" : 100,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 4,
        "startLineNumber" : 100,
        "startColumnNumber" : 33,
        "endLineNumber" : 100,
        "endColumnNumber" : 37
      },
      "nodeContext" : "p2.x",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 100,
        "startColumnNumber" : 33,
        "endLineNumber" : 100,
        "endColumnNumber" : 44
      },
      "nodeContext" : "p2.x - p1.x",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 100,
        "startColumnNumber" : 32,
        "endLineNumber" : 100,
        "endColumnNumber" : 45
      },
      "nodeContext" : "(p2.x - p1.x)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 100,
        "startColumnNumber" : 16,
        "endLineNumber" : 100,
        "endColumnNumber" : 45
      },
      "nodeContext" : "(p2.y - p1.y) / (p2.x - p1.x)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 100,
        "startColumnNumber" : 11,
        "endLineNumber" : 100,
        "endColumnNumber" : 45
      },
      "nodeContext" : "m1=(p2.y - p1.y) / (p2.x - p1.x)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 100,
        "startColumnNumber" : 4,
        "endLineNumber" : 100,
        "endColumnNumber" : 46
      },
      "nodeContext" : "double m1=(p2.y - p1.y) / (p2.x - p1.x);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2413,
        "startLineNumber" : 41,
        "startColumnNumber" : 84,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!segmentsIntersect(p1,p2,p3,p4))   return new Pt[]{};\n  if (p1.equals(p2) && p2.equals(p3) && p3.equals(p4))   return new Pt[]{p1};\n  List<Pt> endpoints=getCommonEndpoints(p1,p2,p3,p4);\n  int n=endpoints.size();\n  boolean singleton=p1.equals(p2) || p3.equals(p4);\n  if (n == 1 && singleton)   return new Pt[]{endpoints.get(0)};\n  if (n == 2)   return new Pt[]{endpoints.get(0),endpoints.get(1)};\n  boolean collinearSegments=(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0);\n  if (collinearSegments) {\n    if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))     return new Pt[]{p3,p4};\n    if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))     return new Pt[]{p1,p2};\n    Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n    Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n    if (midPoint1.equals(midPoint2))     return new Pt[]{midPoint1};\n    return new Pt[]{midPoint1,midPoint2};\n  }\n  if (abs(p1.x - p2.x) < EPS) {\n    double m=(p4.y - p3.y) / (p4.x - p3.x);\n    double b=p3.y - m * p3.x;\n    return new Pt[]{new Pt(p1.x,m * p1.x + b)};\n  }\n  if (abs(p3.x - p4.x) < EPS) {\n    double m=(p2.y - p1.y) / (p2.x - p1.x);\n    double b=p1.y - m * p1.x;\n    return new Pt[]{new Pt(p3.x,m * p3.x + b)};\n  }\n  double m1=(p2.y - p1.y) / (p2.x - p1.x);\n  double m2=(p4.y - p3.y) / (p4.x - p3.x);\n  double b1=p1.y - m1 * p1.x;\n  double b2=p3.y - m2 * p3.x;\n  double x=(b2 - b1) / (m1 - m2);\n  double y=(m1 * b2 - m2 * b1) / (m1 - m2);\n  return new Pt[]{new Pt(x,y)};\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 466,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2495,
        "startLineNumber" : 41,
        "startColumnNumber" : 2,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static Pt[] lineSegmentLineSegmentIntersection(Pt p1,Pt p2,Pt p3,Pt p4){\n  if (!segmentsIntersect(p1,p2,p3,p4))   return new Pt[]{};\n  if (p1.equals(p2) && p2.equals(p3) && p3.equals(p4))   return new Pt[]{p1};\n  List<Pt> endpoints=getCommonEndpoints(p1,p2,p3,p4);\n  int n=endpoints.size();\n  boolean singleton=p1.equals(p2) || p3.equals(p4);\n  if (n == 1 && singleton)   return new Pt[]{endpoints.get(0)};\n  if (n == 2)   return new Pt[]{endpoints.get(0),endpoints.get(1)};\n  boolean collinearSegments=(orientation(p1,p2,p3) == 0) && (orientation(p1,p2,p4) == 0);\n  if (collinearSegments) {\n    if (pointOnLine(p1,p2,p3) && pointOnLine(p1,p2,p4))     return new Pt[]{p3,p4};\n    if (pointOnLine(p3,p4,p1) && pointOnLine(p3,p4,p2))     return new Pt[]{p1,p2};\n    Pt midPoint1=pointOnLine(p1,p2,p3) ? p3 : p4;\n    Pt midPoint2=pointOnLine(p3,p4,p1) ? p1 : p2;\n    if (midPoint1.equals(midPoint2))     return new Pt[]{midPoint1};\n    return new Pt[]{midPoint1,midPoint2};\n  }\n  if (abs(p1.x - p2.x) < EPS) {\n    double m=(p4.y - p3.y) / (p4.x - p3.x);\n    double b=p3.y - m * p3.x;\n    return new Pt[]{new Pt(p1.x,m * p1.x + b)};\n  }\n  if (abs(p3.x - p4.x) < EPS) {\n    double m=(p2.y - p1.y) / (p2.x - p1.x);\n    double b=p1.y - m * p1.x;\n    return new Pt[]{new Pt(p3.x,m * p3.x + b)};\n  }\n  double m1=(p2.y - p1.y) / (p2.x - p1.x);\n  double m2=(p4.y - p3.y) / (p4.x - p3.x);\n  double b1=p1.y - m1 * p1.x;\n  double b2=p3.y - m2 * p3.x;\n  double x=(b2 - b1) / (m1 - m2);\n  double y=(m1 * b2 - m2 * b1) / (m1 - m2);\n  return new Pt[]{new Pt(x,y)};\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 490,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 100,
        "startColumnNumber" : 4,
        "endLineNumber" : 100,
        "endColumnNumber" : 46
      },
      "nodeContext" : "double m1=(p2.y - p1.y) / (p2.x - p1.x);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "com.williamfiset.algorithms.geometry.LineSegmentLineSegmentIntersection.Pt"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 44,
    "startColumnNumber" : 31,
    "endLineNumber" : 44,
    "endColumnNumber" : 33
  }, {
    "charLength" : 2,
    "startLineNumber" : 47,
    "startColumnNumber" : 18,
    "endLineNumber" : 47,
    "endColumnNumber" : 20
  }, {
    "charLength" : 2,
    "startLineNumber" : 47,
    "startColumnNumber" : 25,
    "endLineNumber" : 47,
    "endColumnNumber" : 27
  }, {
    "charLength" : 2,
    "startLineNumber" : 49,
    "startColumnNumber" : 48,
    "endLineNumber" : 49,
    "endColumnNumber" : 50
  }, {
    "charLength" : 2,
    "startLineNumber" : 55,
    "startColumnNumber" : 34,
    "endLineNumber" : 55,
    "endColumnNumber" : 36
  }, {
    "charLength" : 2,
    "startLineNumber" : 61,
    "startColumnNumber" : 49,
    "endLineNumber" : 61,
    "endColumnNumber" : 51
  }, {
    "charLength" : 2,
    "startLineNumber" : 61,
    "startColumnNumber" : 83,
    "endLineNumber" : 61,
    "endColumnNumber" : 85
  }, {
    "charLength" : 2,
    "startLineNumber" : 68,
    "startColumnNumber" : 26,
    "endLineNumber" : 68,
    "endColumnNumber" : 28
  }, {
    "charLength" : 2,
    "startLineNumber" : 68,
    "startColumnNumber" : 53,
    "endLineNumber" : 68,
    "endColumnNumber" : 55
  }, {
    "charLength" : 2,
    "startLineNumber" : 71,
    "startColumnNumber" : 57,
    "endLineNumber" : 71,
    "endColumnNumber" : 59
  }, {
    "charLength" : 2,
    "startLineNumber" : 71,
    "startColumnNumber" : 83,
    "endLineNumber" : 71,
    "endColumnNumber" : 85
  }, {
    "charLength" : 2,
    "startLineNumber" : 75,
    "startColumnNumber" : 37,
    "endLineNumber" : 75,
    "endColumnNumber" : 39
  }, {
    "charLength" : 2,
    "startLineNumber" : 76,
    "startColumnNumber" : 52,
    "endLineNumber" : 76,
    "endColumnNumber" : 54
  }, {
    "charLength" : 2,
    "startLineNumber" : 87,
    "startColumnNumber" : 19,
    "endLineNumber" : 87,
    "endColumnNumber" : 21
  }, {
    "charLength" : 2,
    "startLineNumber" : 95,
    "startColumnNumber" : 18,
    "endLineNumber" : 95,
    "endColumnNumber" : 20
  }, {
    "charLength" : 2,
    "startLineNumber" : 95,
    "startColumnNumber" : 34,
    "endLineNumber" : 95,
    "endColumnNumber" : 36
  }, {
    "charLength" : 2,
    "startLineNumber" : 100,
    "startColumnNumber" : 17,
    "endLineNumber" : 100,
    "endColumnNumber" : 19
  }, {
    "charLength" : 2,
    "startLineNumber" : 100,
    "startColumnNumber" : 33,
    "endLineNumber" : 100,
    "endColumnNumber" : 35
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 17,
    "layout" : 8
  }, {
    "firstKey" : 15,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 15,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 15,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 15,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 15,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 15,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 15,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 15,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 15,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 15,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 15,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 15,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 15,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 15,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 15,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 15,
    "secondKey" : 17,
    "layout" : 8
  }, {
    "firstKey" : 16,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 16,
    "layout" : 3
  } ]
}