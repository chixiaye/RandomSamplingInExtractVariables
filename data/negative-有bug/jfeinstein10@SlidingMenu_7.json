{
  "id" : 7,
  "expression" : "indexx",
  "projectName" : "jfeinstein10@SlidingMenu",
  "commitID" : "2e55ca5b4ff0f935f915d81b9a3f21eeb4647a26",
  "filePath" : "/library/src/com/jeremyfeinstein/slidingmenu/lib/CustomViewAbove.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "indexx",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 762,
      "startColumnNumber" : 45,
      "endLineNumber" : 762,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 762,
        "startColumnNumber" : 18,
        "endLineNumber" : 762,
        "endColumnNumber" : 52
      },
      "nodeContext" : "MotionEventCompat.getX(ev,indexx)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 762,
        "startColumnNumber" : 3,
        "endLineNumber" : 762,
        "endColumnNumber" : 52
      },
      "nodeContext" : "mLastMotionX=MotionEventCompat.getX(ev,indexx)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 762,
        "startColumnNumber" : 3,
        "endLineNumber" : 762,
        "endColumnNumber" : 53
      },
      "nodeContext" : "mLastMotionX=MotionEventCompat.getX(ev,indexx);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 200,
        "startLineNumber" : 760,
        "startColumnNumber" : 46,
        "endLineNumber" : 765,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final int indexx=MotionEventCompat.getActionIndex(ev);\n  mLastMotionX=MotionEventCompat.getX(ev,indexx);\n  mActivePointerId=MotionEventCompat.getPointerId(ev,indexx);\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 27,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3304,
        "startLineNumber" : 686,
        "startColumnNumber" : 2,
        "endLineNumber" : 773,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (action & MotionEventCompat.ACTION_MASK) {\ncase MotionEvent.ACTION_DOWN:  completeScroll();\nint index=MotionEventCompat.getActionIndex(ev);\nmActivePointerId=MotionEventCompat.getPointerId(ev,index);\nmLastMotionX=mInitialMotionX=ev.getX();\nbreak;\ncase MotionEvent.ACTION_MOVE:if (!mIsBeingDragged) {\ndetermineDrag(ev);\nif (mIsUnableToDrag) return false;\n}\nif (mIsBeingDragged) {\nfinal int activePointerIndex=getPointerIndex(ev,mActivePointerId);\nif (mActivePointerId == INVALID_POINTER) break;\nfinal float x=MotionEventCompat.getX(ev,activePointerIndex);\nfinal float deltaX=mLastMotionX - x;\nmLastMotionX=x;\nfloat oldScrollX=getScrollX();\nfloat scrollX=oldScrollX + deltaX;\nfinal float leftBound=getLeftBound();\nfinal float rightBound=getRightBound();\nif (scrollX < leftBound) {\nscrollX=leftBound;\n}\n else if (scrollX > rightBound) {\nscrollX=rightBound;\n}\nmLastMotionX+=scrollX - (int)scrollX;\nscrollTo((int)scrollX,getScrollY());\npageScrolled((int)scrollX);\n}\nbreak;\ncase MotionEvent.ACTION_UP:if (mIsBeingDragged) {\nfinal VelocityTracker velocityTracker=mVelocityTracker;\nvelocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);\nint initialVelocity=(int)VelocityTrackerCompat.getXVelocity(velocityTracker,mActivePointerId);\nfinal int scrollX=getScrollX();\nfinal float pageOffset=(float)(scrollX - getDestScrollX(mCurItem)) / getBehindWidth();\nfinal int activePointerIndex=getPointerIndex(ev,mActivePointerId);\nif (mActivePointerId != INVALID_POINTER) {\nfinal float x=MotionEventCompat.getX(ev,activePointerIndex);\nfinal int totalDelta=(int)(x - mInitialMotionX);\nint nextPage=determineTargetPage(pageOffset,initialVelocity,totalDelta);\nsetCurrentItemInternal(nextPage,true,true,initialVelocity);\n}\n else {\nsetCurrentItemInternal(mCurItem,true,true,initialVelocity);\n}\nmActivePointerId=INVALID_POINTER;\nendDrag();\n}\n else if (mQuickReturn && mViewBehind.menuTouchInQuickReturn(mContent,mCurItem,ev.getX() + mScrollX)) {\nsetCurrentItem(1);\nendDrag();\n}\nbreak;\ncase MotionEvent.ACTION_CANCEL:if (mIsBeingDragged) {\nsetCurrentItemInternal(mCurItem,true,true);\nmActivePointerId=INVALID_POINTER;\nendDrag();\n}\nbreak;\ncase MotionEventCompat.ACTION_POINTER_DOWN:{\nfinal int indexx=MotionEventCompat.getActionIndex(ev);\nmLastMotionX=MotionEventCompat.getX(ev,indexx);\nmActivePointerId=MotionEventCompat.getPointerId(ev,indexx);\nbreak;\n}\ncase MotionEventCompat.ACTION_POINTER_UP:onSecondaryPointerUp(ev);\nint pointerIndex=getPointerIndex(ev,mActivePointerId);\nif (mActivePointerId == INVALID_POINTER) break;\nmLastMotionX=MotionEventCompat.getX(ev,pointerIndex);\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 385,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3677,
        "startLineNumber" : 668,
        "startColumnNumber" : 45,
        "endLineNumber" : 775,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (!mEnabled)   return false;\n  if (!mIsBeingDragged && !thisTouchAllowed(ev))   return false;\n  final int action=ev.getAction();\n  if (mVelocityTracker == null) {\n    mVelocityTracker=VelocityTracker.obtain();\n  }\n  mVelocityTracker.addMovement(ev);\nswitch (action & MotionEventCompat.ACTION_MASK) {\ncase MotionEvent.ACTION_DOWN:    completeScroll();\n  int index=MotionEventCompat.getActionIndex(ev);\nmActivePointerId=MotionEventCompat.getPointerId(ev,index);\nmLastMotionX=mInitialMotionX=ev.getX();\nbreak;\ncase MotionEvent.ACTION_MOVE:if (!mIsBeingDragged) {\ndetermineDrag(ev);\nif (mIsUnableToDrag) return false;\n}\nif (mIsBeingDragged) {\nfinal int activePointerIndex=getPointerIndex(ev,mActivePointerId);\nif (mActivePointerId == INVALID_POINTER) break;\nfinal float x=MotionEventCompat.getX(ev,activePointerIndex);\nfinal float deltaX=mLastMotionX - x;\nmLastMotionX=x;\nfloat oldScrollX=getScrollX();\nfloat scrollX=oldScrollX + deltaX;\nfinal float leftBound=getLeftBound();\nfinal float rightBound=getRightBound();\nif (scrollX < leftBound) {\nscrollX=leftBound;\n}\n else if (scrollX > rightBound) {\nscrollX=rightBound;\n}\nmLastMotionX+=scrollX - (int)scrollX;\nscrollTo((int)scrollX,getScrollY());\npageScrolled((int)scrollX);\n}\nbreak;\ncase MotionEvent.ACTION_UP:if (mIsBeingDragged) {\nfinal VelocityTracker velocityTracker=mVelocityTracker;\nvelocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);\nint initialVelocity=(int)VelocityTrackerCompat.getXVelocity(velocityTracker,mActivePointerId);\nfinal int scrollX=getScrollX();\nfinal float pageOffset=(float)(scrollX - getDestScrollX(mCurItem)) / getBehindWidth();\nfinal int activePointerIndex=getPointerIndex(ev,mActivePointerId);\nif (mActivePointerId != INVALID_POINTER) {\nfinal float x=MotionEventCompat.getX(ev,activePointerIndex);\nfinal int totalDelta=(int)(x - mInitialMotionX);\nint nextPage=determineTargetPage(pageOffset,initialVelocity,totalDelta);\nsetCurrentItemInternal(nextPage,true,true,initialVelocity);\n}\n else {\nsetCurrentItemInternal(mCurItem,true,true,initialVelocity);\n}\nmActivePointerId=INVALID_POINTER;\nendDrag();\n}\n else if (mQuickReturn && mViewBehind.menuTouchInQuickReturn(mContent,mCurItem,ev.getX() + mScrollX)) {\nsetCurrentItem(1);\nendDrag();\n}\nbreak;\ncase MotionEvent.ACTION_CANCEL:if (mIsBeingDragged) {\nsetCurrentItemInternal(mCurItem,true,true);\nmActivePointerId=INVALID_POINTER;\nendDrag();\n}\nbreak;\ncase MotionEventCompat.ACTION_POINTER_DOWN:{\nfinal int indexx=MotionEventCompat.getActionIndex(ev);\nmLastMotionX=MotionEventCompat.getX(ev,indexx);\nmActivePointerId=MotionEventCompat.getPointerId(ev,indexx);\nbreak;\n}\ncase MotionEventCompat.ACTION_POINTER_UP:onSecondaryPointerUp(ev);\nint pointerIndex=getPointerIndex(ev,mActivePointerId);\nif (mActivePointerId == INVALID_POINTER) break;\nmLastMotionX=MotionEventCompat.getX(ev,pointerIndex);\nbreak;\n}\nreturn true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 427,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3733,
        "startLineNumber" : 667,
        "startColumnNumber" : 1,
        "endLineNumber" : 775,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public boolean onTouchEvent(MotionEvent ev){\n  if (!mEnabled)   return false;\n  if (!mIsBeingDragged && !thisTouchAllowed(ev))   return false;\n  final int action=ev.getAction();\n  if (mVelocityTracker == null) {\n    mVelocityTracker=VelocityTracker.obtain();\n  }\n  mVelocityTracker.addMovement(ev);\nswitch (action & MotionEventCompat.ACTION_MASK) {\ncase MotionEvent.ACTION_DOWN:    completeScroll();\n  int index=MotionEventCompat.getActionIndex(ev);\nmActivePointerId=MotionEventCompat.getPointerId(ev,index);\nmLastMotionX=mInitialMotionX=ev.getX();\nbreak;\ncase MotionEvent.ACTION_MOVE:if (!mIsBeingDragged) {\ndetermineDrag(ev);\nif (mIsUnableToDrag) return false;\n}\nif (mIsBeingDragged) {\nfinal int activePointerIndex=getPointerIndex(ev,mActivePointerId);\nif (mActivePointerId == INVALID_POINTER) break;\nfinal float x=MotionEventCompat.getX(ev,activePointerIndex);\nfinal float deltaX=mLastMotionX - x;\nmLastMotionX=x;\nfloat oldScrollX=getScrollX();\nfloat scrollX=oldScrollX + deltaX;\nfinal float leftBound=getLeftBound();\nfinal float rightBound=getRightBound();\nif (scrollX < leftBound) {\nscrollX=leftBound;\n}\n else if (scrollX > rightBound) {\nscrollX=rightBound;\n}\nmLastMotionX+=scrollX - (int)scrollX;\nscrollTo((int)scrollX,getScrollY());\npageScrolled((int)scrollX);\n}\nbreak;\ncase MotionEvent.ACTION_UP:if (mIsBeingDragged) {\nfinal VelocityTracker velocityTracker=mVelocityTracker;\nvelocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);\nint initialVelocity=(int)VelocityTrackerCompat.getXVelocity(velocityTracker,mActivePointerId);\nfinal int scrollX=getScrollX();\nfinal float pageOffset=(float)(scrollX - getDestScrollX(mCurItem)) / getBehindWidth();\nfinal int activePointerIndex=getPointerIndex(ev,mActivePointerId);\nif (mActivePointerId != INVALID_POINTER) {\nfinal float x=MotionEventCompat.getX(ev,activePointerIndex);\nfinal int totalDelta=(int)(x - mInitialMotionX);\nint nextPage=determineTargetPage(pageOffset,initialVelocity,totalDelta);\nsetCurrentItemInternal(nextPage,true,true,initialVelocity);\n}\n else {\nsetCurrentItemInternal(mCurItem,true,true,initialVelocity);\n}\nmActivePointerId=INVALID_POINTER;\nendDrag();\n}\n else if (mQuickReturn && mViewBehind.menuTouchInQuickReturn(mContent,mCurItem,ev.getX() + mScrollX)) {\nsetCurrentItem(1);\nendDrag();\n}\nbreak;\ncase MotionEvent.ACTION_CANCEL:if (mIsBeingDragged) {\nsetCurrentItemInternal(mCurItem,true,true);\nmActivePointerId=INVALID_POINTER;\nendDrag();\n}\nbreak;\ncase MotionEventCompat.ACTION_POINTER_DOWN:{\nfinal int indexx=MotionEventCompat.getActionIndex(ev);\nmLastMotionX=MotionEventCompat.getX(ev,indexx);\nmActivePointerId=MotionEventCompat.getPointerId(ev,indexx);\nbreak;\n}\ncase MotionEventCompat.ACTION_POINTER_UP:onSecondaryPointerUp(ev);\nint pointerIndex=getPointerIndex(ev,mActivePointerId);\nif (mActivePointerId == INVALID_POINTER) break;\nmLastMotionX=MotionEventCompat.getX(ev,pointerIndex);\nbreak;\n}\nreturn true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 437,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 762,
        "startColumnNumber" : 3,
        "endLineNumber" : 762,
        "endColumnNumber" : 53
      },
      "nodeContext" : "mLastMotionX=MotionEventCompat.getX(ev,indexx);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "indexx",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 763,
      "startColumnNumber" : 57,
      "endLineNumber" : 763,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 763,
        "startColumnNumber" : 22,
        "endLineNumber" : 763,
        "endColumnNumber" : 64
      },
      "nodeContext" : "MotionEventCompat.getPointerId(ev,indexx)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 763,
        "startColumnNumber" : 3,
        "endLineNumber" : 763,
        "endColumnNumber" : 64
      },
      "nodeContext" : "mActivePointerId=MotionEventCompat.getPointerId(ev,indexx)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 763,
        "startColumnNumber" : 3,
        "endLineNumber" : 763,
        "endColumnNumber" : 65
      },
      "nodeContext" : "mActivePointerId=MotionEventCompat.getPointerId(ev,indexx);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 200,
        "startLineNumber" : 760,
        "startColumnNumber" : 46,
        "endLineNumber" : 765,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final int indexx=MotionEventCompat.getActionIndex(ev);\n  mLastMotionX=MotionEventCompat.getX(ev,indexx);\n  mActivePointerId=MotionEventCompat.getPointerId(ev,indexx);\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 27,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3304,
        "startLineNumber" : 686,
        "startColumnNumber" : 2,
        "endLineNumber" : 773,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (action & MotionEventCompat.ACTION_MASK) {\ncase MotionEvent.ACTION_DOWN:  completeScroll();\nint index=MotionEventCompat.getActionIndex(ev);\nmActivePointerId=MotionEventCompat.getPointerId(ev,index);\nmLastMotionX=mInitialMotionX=ev.getX();\nbreak;\ncase MotionEvent.ACTION_MOVE:if (!mIsBeingDragged) {\ndetermineDrag(ev);\nif (mIsUnableToDrag) return false;\n}\nif (mIsBeingDragged) {\nfinal int activePointerIndex=getPointerIndex(ev,mActivePointerId);\nif (mActivePointerId == INVALID_POINTER) break;\nfinal float x=MotionEventCompat.getX(ev,activePointerIndex);\nfinal float deltaX=mLastMotionX - x;\nmLastMotionX=x;\nfloat oldScrollX=getScrollX();\nfloat scrollX=oldScrollX + deltaX;\nfinal float leftBound=getLeftBound();\nfinal float rightBound=getRightBound();\nif (scrollX < leftBound) {\nscrollX=leftBound;\n}\n else if (scrollX > rightBound) {\nscrollX=rightBound;\n}\nmLastMotionX+=scrollX - (int)scrollX;\nscrollTo((int)scrollX,getScrollY());\npageScrolled((int)scrollX);\n}\nbreak;\ncase MotionEvent.ACTION_UP:if (mIsBeingDragged) {\nfinal VelocityTracker velocityTracker=mVelocityTracker;\nvelocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);\nint initialVelocity=(int)VelocityTrackerCompat.getXVelocity(velocityTracker,mActivePointerId);\nfinal int scrollX=getScrollX();\nfinal float pageOffset=(float)(scrollX - getDestScrollX(mCurItem)) / getBehindWidth();\nfinal int activePointerIndex=getPointerIndex(ev,mActivePointerId);\nif (mActivePointerId != INVALID_POINTER) {\nfinal float x=MotionEventCompat.getX(ev,activePointerIndex);\nfinal int totalDelta=(int)(x - mInitialMotionX);\nint nextPage=determineTargetPage(pageOffset,initialVelocity,totalDelta);\nsetCurrentItemInternal(nextPage,true,true,initialVelocity);\n}\n else {\nsetCurrentItemInternal(mCurItem,true,true,initialVelocity);\n}\nmActivePointerId=INVALID_POINTER;\nendDrag();\n}\n else if (mQuickReturn && mViewBehind.menuTouchInQuickReturn(mContent,mCurItem,ev.getX() + mScrollX)) {\nsetCurrentItem(1);\nendDrag();\n}\nbreak;\ncase MotionEvent.ACTION_CANCEL:if (mIsBeingDragged) {\nsetCurrentItemInternal(mCurItem,true,true);\nmActivePointerId=INVALID_POINTER;\nendDrag();\n}\nbreak;\ncase MotionEventCompat.ACTION_POINTER_DOWN:{\nfinal int indexx=MotionEventCompat.getActionIndex(ev);\nmLastMotionX=MotionEventCompat.getX(ev,indexx);\nmActivePointerId=MotionEventCompat.getPointerId(ev,indexx);\nbreak;\n}\ncase MotionEventCompat.ACTION_POINTER_UP:onSecondaryPointerUp(ev);\nint pointerIndex=getPointerIndex(ev,mActivePointerId);\nif (mActivePointerId == INVALID_POINTER) break;\nmLastMotionX=MotionEventCompat.getX(ev,pointerIndex);\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 385,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3677,
        "startLineNumber" : 668,
        "startColumnNumber" : 45,
        "endLineNumber" : 775,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (!mEnabled)   return false;\n  if (!mIsBeingDragged && !thisTouchAllowed(ev))   return false;\n  final int action=ev.getAction();\n  if (mVelocityTracker == null) {\n    mVelocityTracker=VelocityTracker.obtain();\n  }\n  mVelocityTracker.addMovement(ev);\nswitch (action & MotionEventCompat.ACTION_MASK) {\ncase MotionEvent.ACTION_DOWN:    completeScroll();\n  int index=MotionEventCompat.getActionIndex(ev);\nmActivePointerId=MotionEventCompat.getPointerId(ev,index);\nmLastMotionX=mInitialMotionX=ev.getX();\nbreak;\ncase MotionEvent.ACTION_MOVE:if (!mIsBeingDragged) {\ndetermineDrag(ev);\nif (mIsUnableToDrag) return false;\n}\nif (mIsBeingDragged) {\nfinal int activePointerIndex=getPointerIndex(ev,mActivePointerId);\nif (mActivePointerId == INVALID_POINTER) break;\nfinal float x=MotionEventCompat.getX(ev,activePointerIndex);\nfinal float deltaX=mLastMotionX - x;\nmLastMotionX=x;\nfloat oldScrollX=getScrollX();\nfloat scrollX=oldScrollX + deltaX;\nfinal float leftBound=getLeftBound();\nfinal float rightBound=getRightBound();\nif (scrollX < leftBound) {\nscrollX=leftBound;\n}\n else if (scrollX > rightBound) {\nscrollX=rightBound;\n}\nmLastMotionX+=scrollX - (int)scrollX;\nscrollTo((int)scrollX,getScrollY());\npageScrolled((int)scrollX);\n}\nbreak;\ncase MotionEvent.ACTION_UP:if (mIsBeingDragged) {\nfinal VelocityTracker velocityTracker=mVelocityTracker;\nvelocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);\nint initialVelocity=(int)VelocityTrackerCompat.getXVelocity(velocityTracker,mActivePointerId);\nfinal int scrollX=getScrollX();\nfinal float pageOffset=(float)(scrollX - getDestScrollX(mCurItem)) / getBehindWidth();\nfinal int activePointerIndex=getPointerIndex(ev,mActivePointerId);\nif (mActivePointerId != INVALID_POINTER) {\nfinal float x=MotionEventCompat.getX(ev,activePointerIndex);\nfinal int totalDelta=(int)(x - mInitialMotionX);\nint nextPage=determineTargetPage(pageOffset,initialVelocity,totalDelta);\nsetCurrentItemInternal(nextPage,true,true,initialVelocity);\n}\n else {\nsetCurrentItemInternal(mCurItem,true,true,initialVelocity);\n}\nmActivePointerId=INVALID_POINTER;\nendDrag();\n}\n else if (mQuickReturn && mViewBehind.menuTouchInQuickReturn(mContent,mCurItem,ev.getX() + mScrollX)) {\nsetCurrentItem(1);\nendDrag();\n}\nbreak;\ncase MotionEvent.ACTION_CANCEL:if (mIsBeingDragged) {\nsetCurrentItemInternal(mCurItem,true,true);\nmActivePointerId=INVALID_POINTER;\nendDrag();\n}\nbreak;\ncase MotionEventCompat.ACTION_POINTER_DOWN:{\nfinal int indexx=MotionEventCompat.getActionIndex(ev);\nmLastMotionX=MotionEventCompat.getX(ev,indexx);\nmActivePointerId=MotionEventCompat.getPointerId(ev,indexx);\nbreak;\n}\ncase MotionEventCompat.ACTION_POINTER_UP:onSecondaryPointerUp(ev);\nint pointerIndex=getPointerIndex(ev,mActivePointerId);\nif (mActivePointerId == INVALID_POINTER) break;\nmLastMotionX=MotionEventCompat.getX(ev,pointerIndex);\nbreak;\n}\nreturn true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 427,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3733,
        "startLineNumber" : 667,
        "startColumnNumber" : 1,
        "endLineNumber" : 775,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public boolean onTouchEvent(MotionEvent ev){\n  if (!mEnabled)   return false;\n  if (!mIsBeingDragged && !thisTouchAllowed(ev))   return false;\n  final int action=ev.getAction();\n  if (mVelocityTracker == null) {\n    mVelocityTracker=VelocityTracker.obtain();\n  }\n  mVelocityTracker.addMovement(ev);\nswitch (action & MotionEventCompat.ACTION_MASK) {\ncase MotionEvent.ACTION_DOWN:    completeScroll();\n  int index=MotionEventCompat.getActionIndex(ev);\nmActivePointerId=MotionEventCompat.getPointerId(ev,index);\nmLastMotionX=mInitialMotionX=ev.getX();\nbreak;\ncase MotionEvent.ACTION_MOVE:if (!mIsBeingDragged) {\ndetermineDrag(ev);\nif (mIsUnableToDrag) return false;\n}\nif (mIsBeingDragged) {\nfinal int activePointerIndex=getPointerIndex(ev,mActivePointerId);\nif (mActivePointerId == INVALID_POINTER) break;\nfinal float x=MotionEventCompat.getX(ev,activePointerIndex);\nfinal float deltaX=mLastMotionX - x;\nmLastMotionX=x;\nfloat oldScrollX=getScrollX();\nfloat scrollX=oldScrollX + deltaX;\nfinal float leftBound=getLeftBound();\nfinal float rightBound=getRightBound();\nif (scrollX < leftBound) {\nscrollX=leftBound;\n}\n else if (scrollX > rightBound) {\nscrollX=rightBound;\n}\nmLastMotionX+=scrollX - (int)scrollX;\nscrollTo((int)scrollX,getScrollY());\npageScrolled((int)scrollX);\n}\nbreak;\ncase MotionEvent.ACTION_UP:if (mIsBeingDragged) {\nfinal VelocityTracker velocityTracker=mVelocityTracker;\nvelocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);\nint initialVelocity=(int)VelocityTrackerCompat.getXVelocity(velocityTracker,mActivePointerId);\nfinal int scrollX=getScrollX();\nfinal float pageOffset=(float)(scrollX - getDestScrollX(mCurItem)) / getBehindWidth();\nfinal int activePointerIndex=getPointerIndex(ev,mActivePointerId);\nif (mActivePointerId != INVALID_POINTER) {\nfinal float x=MotionEventCompat.getX(ev,activePointerIndex);\nfinal int totalDelta=(int)(x - mInitialMotionX);\nint nextPage=determineTargetPage(pageOffset,initialVelocity,totalDelta);\nsetCurrentItemInternal(nextPage,true,true,initialVelocity);\n}\n else {\nsetCurrentItemInternal(mCurItem,true,true,initialVelocity);\n}\nmActivePointerId=INVALID_POINTER;\nendDrag();\n}\n else if (mQuickReturn && mViewBehind.menuTouchInQuickReturn(mContent,mCurItem,ev.getX() + mScrollX)) {\nsetCurrentItem(1);\nendDrag();\n}\nbreak;\ncase MotionEvent.ACTION_CANCEL:if (mIsBeingDragged) {\nsetCurrentItemInternal(mCurItem,true,true);\nmActivePointerId=INVALID_POINTER;\nendDrag();\n}\nbreak;\ncase MotionEventCompat.ACTION_POINTER_DOWN:{\nfinal int indexx=MotionEventCompat.getActionIndex(ev);\nmLastMotionX=MotionEventCompat.getX(ev,indexx);\nmActivePointerId=MotionEventCompat.getPointerId(ev,indexx);\nbreak;\n}\ncase MotionEventCompat.ACTION_POINTER_UP:onSecondaryPointerUp(ev);\nint pointerIndex=getPointerIndex(ev,mActivePointerId);\nif (mActivePointerId == INVALID_POINTER) break;\nmLastMotionX=MotionEventCompat.getX(ev,pointerIndex);\nbreak;\n}\nreturn true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 437,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 763,
        "startColumnNumber" : 3,
        "endLineNumber" : 763,
        "endColumnNumber" : 65
      },
      "nodeContext" : "mActivePointerId=MotionEventCompat.getPointerId(ev,indexx);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 762,
    "startColumnNumber" : 45,
    "endLineNumber" : 762,
    "endColumnNumber" : 51
  }, {
    "charLength" : 6,
    "startLineNumber" : 763,
    "startColumnNumber" : 57,
    "endLineNumber" : 763,
    "endColumnNumber" : 63
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}