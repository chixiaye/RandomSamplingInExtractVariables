{
  "id" : 117,
  "expression" : "\" with apiId[\"",
  "projectName" : "pinpoint-apm@pinpoint",
  "commitID" : "cd51da314be7fe261d7dc630dd7c51ce6bb3cc0c",
  "filePath" : "/profiler-test/src/main/java/com/navercorp/pinpoint/test/PluginTestAgent.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\" with apiId[\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 597,
      "startColumnNumber" : 85,
      "endLineNumber" : 597,
      "endColumnNumber" : 99
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 165,
        "startLineNumber" : 597,
        "startColumnNumber" : 37,
        "endLineNumber" : 597,
        "endColumnNumber" : 202
      },
      "nodeContext" : "\"Expected a \" + expected.type.getSimpleName() + \" with apiId[\"+ expected.apiId+ \"] but was [\"+ actual.getApiId()+ \"]. expected: \"+ expected+ \", was: \"+ actual",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 19,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 185,
        "startLineNumber" : 597,
        "startColumnNumber" : 18,
        "endLineNumber" : 597,
        "endColumnNumber" : 203
      },
      "nodeContext" : "new AssertionError(\"Expected a \" + expected.type.getSimpleName() + \" with apiId[\"+ expected.apiId+ \"] but was [\"+ actual.getApiId()+ \"]. expected: \"+ expected+ \", was: \"+ actual)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 22,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 192,
        "startLineNumber" : 597,
        "startColumnNumber" : 12,
        "endLineNumber" : 597,
        "endColumnNumber" : 204
      },
      "nodeContext" : "throw new AssertionError(\"Expected a \" + expected.type.getSimpleName() + \" with apiId[\"+ expected.apiId+ \"] but was [\"+ actual.getApiId()+ \"]. expected: \"+ expected+ \", was: \"+ actual);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 216,
        "startLineNumber" : 596,
        "startColumnNumber" : 56,
        "endLineNumber" : 598,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  throw new AssertionError(\"Expected a \" + expected.type.getSimpleName() + \" with apiId[\"+ expected.apiId+ \"] but was [\"+ actual.getApiId()+ \"]. expected: \"+ expected+ \", was: \"+ actual);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 24,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 264,
        "startLineNumber" : 596,
        "startColumnNumber" : 8,
        "endLineNumber" : 598,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!equals(expected.apiId,actual.getApiId())) {\n  throw new AssertionError(\"Expected a \" + expected.type.getSimpleName() + \" with apiId[\"+ expected.apiId+ \"] but was [\"+ actual.getApiId()+ \"]. expected: \"+ expected+ \", was: \"+ actual);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 34,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4323,
        "startLineNumber" : 587,
        "startColumnNumber" : 80,
        "endLineNumber" : 657,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!expected.type.equals(actual.getType())) {\n    throw new AssertionError(\"Expected an instance of \" + expected.type.getSimpleName() + \" but was \"+ actual.getType().getName()+ \". expected: \"+ expected+ \", was: \"+ actual);\n  }\n  if (!equals(expected.serviceType.getCode(),actual.getServiceType())) {\n    throw new AssertionError(\"Expected a \" + expected.type.getSimpleName() + \" with serviceType[\"+ expected.serviceType.getCode()+ \"] but was [\"+ actual.getServiceType()+ \"]. expected: \"+ expected+ \", was: \"+ actual);\n  }\n  if (!equals(expected.apiId,actual.getApiId())) {\n    throw new AssertionError(\"Expected a \" + expected.type.getSimpleName() + \" with apiId[\"+ expected.apiId+ \"] but was [\"+ actual.getApiId()+ \"]. expected: \"+ expected+ \", was: \"+ actual);\n  }\n  if (!equals(expected.rpc,actual.getRpc())) {\n    throw new AssertionError(\"Expected a \" + expected.type.getSimpleName() + \" with rpc[\"+ expected.rpc+ \"] but was [\"+ actual.getRpc()+ \"]. expected: \"+ expected+ \", was: \"+ actual);\n  }\n  if (!equals(expected.endPoint,actual.getEndPoint())) {\n    throw new AssertionError(\"Expected a \" + expected.type.getSimpleName() + \" with endPoint[\"+ expected.endPoint+ \"] but was [\"+ actual.getEndPoint()+ \"]. expected: \"+ expected+ \", was: \"+ actual);\n  }\n  if (!equals(expected.remoteAddr,actual.getRemoteAddr())) {\n    throw new AssertionError(\"Expected a \" + expected.type.getSimpleName() + \" with remoteAddr[\"+ expected.remoteAddr+ \"] but was [\"+ actual.getRemoteAddr()+ \"]. expected: \"+ expected+ \", was: \"+ actual);\n  }\n  if (!equals(expected.destinationId,actual.getDestinationId())) {\n    throw new AssertionError(\"Expected a \" + expected.type.getSimpleName() + \" with destinationId[\"+ expected.destinationId+ \"] but was [\"+ actual.getDestinationId()+ \"]. expected: \"+ expected+ \", was: \"+ actual);\n  }\n  if (!equals(expected.asyncId,actual.getAsyncId())) {\n    throw new AssertionError(\"Expected a \" + expected.type.getSimpleName() + \" with asyncId[\"+ expected.asyncId+ \"] but was [\"+ actual.getAsyncId()+ \"]. expected: \"+ expected+ \", was: \"+ actual);\n  }\n  List<TAnnotation> actualAnnotations=actual.getAnnotations();\n  int len=expected.annotations == null ? 0 : expected.annotations.length;\n  int actualLen=actualAnnotations == null ? 0 : actualAnnotations.size();\n  if (actualLen != len) {\n    throw new AssertionError(\"Expected [\" + len + \"] annotations but was [\"+ actualLen+ \"], expected: \"+ expected+ \", was: \"+ actual);\n  }\n  for (int i=0; i < len; i++) {\n    ExpectedAnnotation expect=expected.annotations[i];\n    AnnotationKey expectedAnnotationKey=annotationKeyRegistryService.findAnnotationKeyByName(expect.getKeyName());\n    TAnnotation actualAnnotation=actualAnnotations.get(i);\n    if (expectedAnnotationKey.getCode() != actualAnnotation.getKey()) {\n      throw new AssertionError(\"Expected \" + i + \"th annotation [\"+ expectedAnnotationKey.getCode()+ \"=\"+ expect.getValue()+ \"] but was [\"+ toString(actualAnnotation)+ \"], expected: \"+ expected+ \", was: \"+ actual);\n    }\n    if (expectedAnnotationKey == AnnotationKey.SQL_ID && expect instanceof ExpectedSql) {\n      verifySql((ExpectedSql)expect,actualAnnotation);\n    }\n else {\n      Object expectedValue=expect.getValue();\n      if (expectedValue == Expectations.anyAnnotationValue()) {\n        continue;\n      }\n      if (AnnotationKeyUtils.isCachedArgsKey(expectedAnnotationKey.getCode())) {\n        expectedValue=getTestTcpDataSender().getStringId(expectedValue.toString());\n      }\n      if (!Objects.equal(expectedValue,actualAnnotation.getValue().getFieldValue())) {\n        throw new AssertionError(\"Expected \" + i + \"th annotation [\"+ expectedAnnotationKey.getCode()+ \"=\"+ expect.getValue()+ \"] but was [\"+ toString(actualAnnotation)+ \"], expected: \"+ expected+ \", was: \"+ actual);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 496,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4399,
        "startLineNumber" : 587,
        "startColumnNumber" : 4,
        "endLineNumber" : 657,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void verifySpan(ResolvedExpectedTrace expected,ActualTrace actual){\n  if (!expected.type.equals(actual.getType())) {\n    throw new AssertionError(\"Expected an instance of \" + expected.type.getSimpleName() + \" but was \"+ actual.getType().getName()+ \". expected: \"+ expected+ \", was: \"+ actual);\n  }\n  if (!equals(expected.serviceType.getCode(),actual.getServiceType())) {\n    throw new AssertionError(\"Expected a \" + expected.type.getSimpleName() + \" with serviceType[\"+ expected.serviceType.getCode()+ \"] but was [\"+ actual.getServiceType()+ \"]. expected: \"+ expected+ \", was: \"+ actual);\n  }\n  if (!equals(expected.apiId,actual.getApiId())) {\n    throw new AssertionError(\"Expected a \" + expected.type.getSimpleName() + \" with apiId[\"+ expected.apiId+ \"] but was [\"+ actual.getApiId()+ \"]. expected: \"+ expected+ \", was: \"+ actual);\n  }\n  if (!equals(expected.rpc,actual.getRpc())) {\n    throw new AssertionError(\"Expected a \" + expected.type.getSimpleName() + \" with rpc[\"+ expected.rpc+ \"] but was [\"+ actual.getRpc()+ \"]. expected: \"+ expected+ \", was: \"+ actual);\n  }\n  if (!equals(expected.endPoint,actual.getEndPoint())) {\n    throw new AssertionError(\"Expected a \" + expected.type.getSimpleName() + \" with endPoint[\"+ expected.endPoint+ \"] but was [\"+ actual.getEndPoint()+ \"]. expected: \"+ expected+ \", was: \"+ actual);\n  }\n  if (!equals(expected.remoteAddr,actual.getRemoteAddr())) {\n    throw new AssertionError(\"Expected a \" + expected.type.getSimpleName() + \" with remoteAddr[\"+ expected.remoteAddr+ \"] but was [\"+ actual.getRemoteAddr()+ \"]. expected: \"+ expected+ \", was: \"+ actual);\n  }\n  if (!equals(expected.destinationId,actual.getDestinationId())) {\n    throw new AssertionError(\"Expected a \" + expected.type.getSimpleName() + \" with destinationId[\"+ expected.destinationId+ \"] but was [\"+ actual.getDestinationId()+ \"]. expected: \"+ expected+ \", was: \"+ actual);\n  }\n  if (!equals(expected.asyncId,actual.getAsyncId())) {\n    throw new AssertionError(\"Expected a \" + expected.type.getSimpleName() + \" with asyncId[\"+ expected.asyncId+ \"] but was [\"+ actual.getAsyncId()+ \"]. expected: \"+ expected+ \", was: \"+ actual);\n  }\n  List<TAnnotation> actualAnnotations=actual.getAnnotations();\n  int len=expected.annotations == null ? 0 : expected.annotations.length;\n  int actualLen=actualAnnotations == null ? 0 : actualAnnotations.size();\n  if (actualLen != len) {\n    throw new AssertionError(\"Expected [\" + len + \"] annotations but was [\"+ actualLen+ \"], expected: \"+ expected+ \", was: \"+ actual);\n  }\n  for (int i=0; i < len; i++) {\n    ExpectedAnnotation expect=expected.annotations[i];\n    AnnotationKey expectedAnnotationKey=annotationKeyRegistryService.findAnnotationKeyByName(expect.getKeyName());\n    TAnnotation actualAnnotation=actualAnnotations.get(i);\n    if (expectedAnnotationKey.getCode() != actualAnnotation.getKey()) {\n      throw new AssertionError(\"Expected \" + i + \"th annotation [\"+ expectedAnnotationKey.getCode()+ \"=\"+ expect.getValue()+ \"] but was [\"+ toString(actualAnnotation)+ \"], expected: \"+ expected+ \", was: \"+ actual);\n    }\n    if (expectedAnnotationKey == AnnotationKey.SQL_ID && expect instanceof ExpectedSql) {\n      verifySql((ExpectedSql)expect,actualAnnotation);\n    }\n else {\n      Object expectedValue=expect.getValue();\n      if (expectedValue == Expectations.anyAnnotationValue()) {\n        continue;\n      }\n      if (AnnotationKeyUtils.isCachedArgsKey(expectedAnnotationKey.getCode())) {\n        expectedValue=getTestTcpDataSender().getStringId(expectedValue.toString());\n      }\n      if (!Objects.equal(expectedValue,actualAnnotation.getValue().getFieldValue())) {\n        throw new AssertionError(\"Expected \" + i + \"th annotation [\"+ expectedAnnotationKey.getCode()+ \"=\"+ expect.getValue()+ \"] but was [\"+ toString(actualAnnotation)+ \"], expected: \"+ expected+ \", was: \"+ actual);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 508,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 192,
        "startLineNumber" : 597,
        "startColumnNumber" : 12,
        "endLineNumber" : 597,
        "endColumnNumber" : 204
      },
      "nodeContext" : "throw new AssertionError(\"Expected a \" + expected.type.getSimpleName() + \" with apiId[\"+ expected.apiId+ \"] but was [\"+ actual.getApiId()+ \"]. expected: \"+ expected+ \", was: \"+ actual);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 597,
    "startColumnNumber" : 85,
    "endLineNumber" : 597,
    "endColumnNumber" : 99
  } ],
  "layoutRelationDataList" : [ ]
}