{
  "id" : 175,
  "expression" : "ByteBuffer.allocateDirect(outputSize).order(ByteOrder.nativeOrder())",
  "projectName" : "DrKLO@Telegram",
  "commitID" : "11fbfb1329df700b203e1852a71c4c11b5ab12f4",
  "filePath" : "/TMessagesProj/src/main/java/com/google/android/exoplayer2/audio/SonicAudioProcessor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ByteBuffer.allocateDirect(outputSize).order(ByteOrder.nativeOrder())",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 68,
      "startLineNumber" : 202,
      "startColumnNumber" : 17,
      "endLineNumber" : 202,
      "endColumnNumber" : 85
    },
    "astNodeNumber" : 9,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 202,
        "startColumnNumber" : 8,
        "endLineNumber" : 202,
        "endColumnNumber" : 85
      },
      "nodeContext" : "buffer=ByteBuffer.allocateDirect(outputSize).order(ByteOrder.nativeOrder())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 202,
        "startColumnNumber" : 8,
        "endLineNumber" : 202,
        "endColumnNumber" : 86
      },
      "nodeContext" : "buffer=ByteBuffer.allocateDirect(outputSize).order(ByteOrder.nativeOrder());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 142,
        "startLineNumber" : 201,
        "startColumnNumber" : 42,
        "endLineNumber" : 204,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  buffer=ByteBuffer.allocateDirect(outputSize).order(ByteOrder.nativeOrder());\n  shortBuffer=buffer.asShortBuffer();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 246,
        "startLineNumber" : 201,
        "startColumnNumber" : 6,
        "endLineNumber" : 207,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (buffer.capacity() < outputSize) {\n  buffer=ByteBuffer.allocateDirect(outputSize).order(ByteOrder.nativeOrder());\n  shortBuffer=buffer.asShortBuffer();\n}\n else {\n  buffer.clear();\n  shortBuffer.clear();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 34,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 390,
        "startLineNumber" : 200,
        "startColumnNumber" : 24,
        "endLineNumber" : 212,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (buffer.capacity() < outputSize) {\n    buffer=ByteBuffer.allocateDirect(outputSize).order(ByteOrder.nativeOrder());\n    shortBuffer=buffer.asShortBuffer();\n  }\n else {\n    buffer.clear();\n    shortBuffer.clear();\n  }\n  sonic.getOutput(shortBuffer);\n  outputBytes+=outputSize;\n  buffer.limit(outputSize);\n  outputBuffer=buffer;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 53,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 410,
        "startLineNumber" : 200,
        "startColumnNumber" : 4,
        "endLineNumber" : 212,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (outputSize > 0) {\n  if (buffer.capacity() < outputSize) {\n    buffer=ByteBuffer.allocateDirect(outputSize).order(ByteOrder.nativeOrder());\n    shortBuffer=buffer.asShortBuffer();\n  }\n else {\n    buffer.clear();\n    shortBuffer.clear();\n  }\n  sonic.getOutput(shortBuffer);\n  outputBytes+=outputSize;\n  buffer.limit(outputSize);\n  outputBuffer=buffer;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 57,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 803,
        "startLineNumber" : 190,
        "startColumnNumber" : 49,
        "endLineNumber" : 213,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Sonic sonic=Assertions.checkNotNull(this.sonic);\n  if (inputBuffer.hasRemaining()) {\n    ShortBuffer shortBuffer=inputBuffer.asShortBuffer();\n    int inputSize=inputBuffer.remaining();\n    inputBytes+=inputSize;\n    sonic.queueInput(shortBuffer);\n    inputBuffer.position(inputBuffer.position() + inputSize);\n  }\n  int outputSize=sonic.getOutputSize();\n  if (outputSize > 0) {\n    if (buffer.capacity() < outputSize) {\n      buffer=ByteBuffer.allocateDirect(outputSize).order(ByteOrder.nativeOrder());\n      shortBuffer=buffer.asShortBuffer();\n    }\n else {\n      buffer.clear();\n      shortBuffer.clear();\n    }\n    sonic.getOutput(shortBuffer);\n    outputBytes+=outputSize;\n    buffer.limit(outputSize);\n    outputBuffer=buffer;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 114,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 862,
        "startLineNumber" : 189,
        "startColumnNumber" : 2,
        "endLineNumber" : 213,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public void queueInput(ByteBuffer inputBuffer){\n  Sonic sonic=Assertions.checkNotNull(this.sonic);\n  if (inputBuffer.hasRemaining()) {\n    ShortBuffer shortBuffer=inputBuffer.asShortBuffer();\n    int inputSize=inputBuffer.remaining();\n    inputBytes+=inputSize;\n    sonic.queueInput(shortBuffer);\n    inputBuffer.position(inputBuffer.position() + inputSize);\n  }\n  int outputSize=sonic.getOutputSize();\n  if (outputSize > 0) {\n    if (buffer.capacity() < outputSize) {\n      buffer=ByteBuffer.allocateDirect(outputSize).order(ByteOrder.nativeOrder());\n      shortBuffer=buffer.asShortBuffer();\n    }\n else {\n      buffer.clear();\n      shortBuffer.clear();\n    }\n    sonic.getOutput(shortBuffer);\n    outputBytes+=outputSize;\n    buffer.limit(outputSize);\n    outputBuffer=buffer;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 124,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 202,
        "startColumnNumber" : 8,
        "endLineNumber" : 202,
        "endColumnNumber" : 86
      },
      "nodeContext" : "buffer=ByteBuffer.allocateDirect(outputSize).order(ByteOrder.nativeOrder());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 6,
    "type" : "java.nio.ByteBuffer"
  } ],
  "positionList" : [ {
    "charLength" : 68,
    "startLineNumber" : 202,
    "startColumnNumber" : 17,
    "endLineNumber" : 202,
    "endColumnNumber" : 85
  } ],
  "layoutRelationDataList" : [ ]
}