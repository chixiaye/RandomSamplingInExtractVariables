{
  "id" : 398,
  "expression" : "defaultAddress",
  "projectName" : "Netflix@eureka",
  "commitID" : "2f6d04dae7f6fca2a17e85fc53020e13272a79b2",
  "filePath" : "/eureka-core/src/main/java/com/netflix/eureka2/registry/datacenter/BasicDataCenterInfo.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "defaultAddress",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 68,
      "startColumnNumber" : 12,
      "endLineNumber" : 68,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 68,
        "startColumnNumber" : 12,
        "endLineNumber" : 68,
        "endColumnNumber" : 34
      },
      "nodeContext" : "defaultAddress != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 68,
        "startColumnNumber" : 8,
        "endLineNumber" : 70,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (defaultAddress != null) {\n  return defaultAddress;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 629,
        "startLineNumber" : 67,
        "startColumnNumber" : 46,
        "endLineNumber" : 88,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (defaultAddress != null) {\n    return defaultAddress;\n  }\n  if (addresses == null | addresses.isEmpty()) {\n    return null;\n  }\n  NetworkAddress best=null;\n  for (  NetworkAddress address : addresses) {\n    if (best == null) {\n      best=address;\n      if (best.hasLabel(PUBLIC_ADDRESS)) {\n        break;\n      }\n    }\n else     if (address.hasLabel(PUBLIC_ADDRESS)) {\n      best=address;\n      break;\n    }\n  }\n  defaultAddress=best;\n  return defaultAddress;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 65,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 891,
        "startLineNumber" : 61,
        "startColumnNumber" : 4,
        "endLineNumber" : 88,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * The order of selection: first public, next private. If there are multiple addresses within a group (for example multiple public IPs), the first in the list is be taken.\n */\n@Override public NetworkAddress getDefaultAddress(){\n  if (defaultAddress != null) {\n    return defaultAddress;\n  }\n  if (addresses == null | addresses.isEmpty()) {\n    return null;\n  }\n  NetworkAddress best=null;\n  for (  NetworkAddress address : addresses) {\n    if (best == null) {\n      best=address;\n      if (best.hasLabel(PUBLIC_ADDRESS)) {\n        break;\n      }\n    }\n else     if (address.hasLabel(PUBLIC_ADDRESS)) {\n      best=address;\n      break;\n    }\n  }\n  defaultAddress=best;\n  return defaultAddress;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 73,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 68,
        "startColumnNumber" : 12,
        "endLineNumber" : 68,
        "endColumnNumber" : 34
      },
      "nodeContext" : "defaultAddress != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.netflix.eureka2.registry.instance.NetworkAddress"
  }, {
    "nodeContext" : "defaultAddress",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 69,
      "startColumnNumber" : 19,
      "endLineNumber" : 69,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 69,
        "startColumnNumber" : 12,
        "endLineNumber" : 69,
        "endColumnNumber" : 34
      },
      "nodeContext" : "return defaultAddress;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 68,
        "startColumnNumber" : 36,
        "endLineNumber" : 70,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  return defaultAddress;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 3,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 68,
        "startColumnNumber" : 8,
        "endLineNumber" : 70,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (defaultAddress != null) {\n  return defaultAddress;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 629,
        "startLineNumber" : 67,
        "startColumnNumber" : 46,
        "endLineNumber" : 88,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (defaultAddress != null) {\n    return defaultAddress;\n  }\n  if (addresses == null | addresses.isEmpty()) {\n    return null;\n  }\n  NetworkAddress best=null;\n  for (  NetworkAddress address : addresses) {\n    if (best == null) {\n      best=address;\n      if (best.hasLabel(PUBLIC_ADDRESS)) {\n        break;\n      }\n    }\n else     if (address.hasLabel(PUBLIC_ADDRESS)) {\n      best=address;\n      break;\n    }\n  }\n  defaultAddress=best;\n  return defaultAddress;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 65,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 891,
        "startLineNumber" : 61,
        "startColumnNumber" : 4,
        "endLineNumber" : 88,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * The order of selection: first public, next private. If there are multiple addresses within a group (for example multiple public IPs), the first in the list is be taken.\n */\n@Override public NetworkAddress getDefaultAddress(){\n  if (defaultAddress != null) {\n    return defaultAddress;\n  }\n  if (addresses == null | addresses.isEmpty()) {\n    return null;\n  }\n  NetworkAddress best=null;\n  for (  NetworkAddress address : addresses) {\n    if (best == null) {\n      best=address;\n      if (best.hasLabel(PUBLIC_ADDRESS)) {\n        break;\n      }\n    }\n else     if (address.hasLabel(PUBLIC_ADDRESS)) {\n      best=address;\n      break;\n    }\n  }\n  defaultAddress=best;\n  return defaultAddress;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 73,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 69,
        "startColumnNumber" : 12,
        "endLineNumber" : 69,
        "endColumnNumber" : 34
      },
      "nodeContext" : "return defaultAddress;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.netflix.eureka2.registry.instance.NetworkAddress"
  }, {
    "nodeContext" : "defaultAddress",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 87,
      "startColumnNumber" : 15,
      "endLineNumber" : 87,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 30
      },
      "nodeContext" : "return defaultAddress;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 629,
        "startLineNumber" : 67,
        "startColumnNumber" : 46,
        "endLineNumber" : 88,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (defaultAddress != null) {\n    return defaultAddress;\n  }\n  if (addresses == null | addresses.isEmpty()) {\n    return null;\n  }\n  NetworkAddress best=null;\n  for (  NetworkAddress address : addresses) {\n    if (best == null) {\n      best=address;\n      if (best.hasLabel(PUBLIC_ADDRESS)) {\n        break;\n      }\n    }\n else     if (address.hasLabel(PUBLIC_ADDRESS)) {\n      best=address;\n      break;\n    }\n  }\n  defaultAddress=best;\n  return defaultAddress;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 65,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 891,
        "startLineNumber" : 61,
        "startColumnNumber" : 4,
        "endLineNumber" : 88,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * The order of selection: first public, next private. If there are multiple addresses within a group (for example multiple public IPs), the first in the list is be taken.\n */\n@Override public NetworkAddress getDefaultAddress(){\n  if (defaultAddress != null) {\n    return defaultAddress;\n  }\n  if (addresses == null | addresses.isEmpty()) {\n    return null;\n  }\n  NetworkAddress best=null;\n  for (  NetworkAddress address : addresses) {\n    if (best == null) {\n      best=address;\n      if (best.hasLabel(PUBLIC_ADDRESS)) {\n        break;\n      }\n    }\n else     if (address.hasLabel(PUBLIC_ADDRESS)) {\n      best=address;\n      break;\n    }\n  }\n  defaultAddress=best;\n  return defaultAddress;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 73,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 30
      },
      "nodeContext" : "return defaultAddress;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.netflix.eureka2.registry.instance.NetworkAddress"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 68,
    "startColumnNumber" : 12,
    "endLineNumber" : 68,
    "endColumnNumber" : 26
  }, {
    "charLength" : 14,
    "startLineNumber" : 69,
    "startColumnNumber" : 19,
    "endLineNumber" : 69,
    "endColumnNumber" : 33
  }, {
    "charLength" : 14,
    "startLineNumber" : 87,
    "startColumnNumber" : 15,
    "endLineNumber" : 87,
    "endColumnNumber" : 29
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 1
  } ]
}