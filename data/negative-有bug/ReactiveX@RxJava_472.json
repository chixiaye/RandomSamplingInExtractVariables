{
  "id" : 472,
  "expression" : "observer",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/internal/operators/flowable/FlowableOnErrorReturnTest.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "observer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 52,
      "startColumnNumber" : 29,
      "endLineNumber" : 52,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 52,
        "startColumnNumber" : 8,
        "endLineNumber" : 52,
        "endColumnNumber" : 38
      },
      "nodeContext" : "observable.subscribe(observer)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 52,
        "startColumnNumber" : 8,
        "endLineNumber" : 52,
        "endColumnNumber" : 39
      },
      "nodeContext" : "observable.subscribe(observer);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1052,
        "startLineNumber" : 35,
        "startColumnNumber" : 33,
        "endLineNumber" : 65,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TestObservable f=new TestObservable(\"one\");\n  Flowable<String> w=Flowable.create(f);\n  final AtomicReference<Throwable> capturedException=new AtomicReference<Throwable>();\n  Flowable<String> observable=w.onErrorReturn(new Function<Throwable,String>(){\n    @Override public String apply(    Throwable e){\n      capturedException.set(e);\n      return \"failure\";\n    }\n  }\n);\n  @SuppressWarnings(\"unchecked\") DefaultObserver<String> observer=mock(DefaultObserver.class);\n  observable.subscribe(observer);\n  try {\n    f.t.join();\n  }\n catch (  InterruptedException e) {\n    fail(e.getMessage());\n  }\n  verify(observer,Mockito.never()).onError(any(Throwable.class));\n  verify(observer,times(1)).onComplete();\n  verify(observer,times(1)).onNext(\"one\");\n  verify(observer,times(1)).onNext(\"failure\");\n  assertNotNull(capturedException.get());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 166,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1092,
        "startLineNumber" : 34,
        "startColumnNumber" : 4,
        "endLineNumber" : 65,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testResumeNext(){\n  TestObservable f=new TestObservable(\"one\");\n  Flowable<String> w=Flowable.create(f);\n  final AtomicReference<Throwable> capturedException=new AtomicReference<Throwable>();\n  Flowable<String> observable=w.onErrorReturn(new Function<Throwable,String>(){\n    @Override public String apply(    Throwable e){\n      capturedException.set(e);\n      return \"failure\";\n    }\n  }\n);\n  @SuppressWarnings(\"unchecked\") DefaultObserver<String> observer=mock(DefaultObserver.class);\n  observable.subscribe(observer);\n  try {\n    f.t.join();\n  }\n catch (  InterruptedException e) {\n    fail(e.getMessage());\n  }\n  verify(observer,Mockito.never()).onError(any(Throwable.class));\n  verify(observer,times(1)).onComplete();\n  verify(observer,times(1)).onNext(\"one\");\n  verify(observer,times(1)).onNext(\"failure\");\n  assertNotNull(capturedException.get());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 172,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 52,
        "startColumnNumber" : 8,
        "endLineNumber" : 52,
        "endColumnNumber" : 39
      },
      "nodeContext" : "observable.subscribe(observer);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "io.reactivex.subscribers.DefaultObserver<java.lang.String>"
  }, {
    "nodeContext" : "observer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 60,
      "startColumnNumber" : 15,
      "endLineNumber" : 60,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 60,
        "endColumnNumber" : 41
      },
      "nodeContext" : "verify(observer,Mockito.never())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 60,
        "endColumnNumber" : 71
      },
      "nodeContext" : "verify(observer,Mockito.never()).onError(any(Throwable.class))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 60,
        "endColumnNumber" : 72
      },
      "nodeContext" : "verify(observer,Mockito.never()).onError(any(Throwable.class));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1052,
        "startLineNumber" : 35,
        "startColumnNumber" : 33,
        "endLineNumber" : 65,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TestObservable f=new TestObservable(\"one\");\n  Flowable<String> w=Flowable.create(f);\n  final AtomicReference<Throwable> capturedException=new AtomicReference<Throwable>();\n  Flowable<String> observable=w.onErrorReturn(new Function<Throwable,String>(){\n    @Override public String apply(    Throwable e){\n      capturedException.set(e);\n      return \"failure\";\n    }\n  }\n);\n  @SuppressWarnings(\"unchecked\") DefaultObserver<String> observer=mock(DefaultObserver.class);\n  observable.subscribe(observer);\n  try {\n    f.t.join();\n  }\n catch (  InterruptedException e) {\n    fail(e.getMessage());\n  }\n  verify(observer,Mockito.never()).onError(any(Throwable.class));\n  verify(observer,times(1)).onComplete();\n  verify(observer,times(1)).onNext(\"one\");\n  verify(observer,times(1)).onNext(\"failure\");\n  assertNotNull(capturedException.get());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 166,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1092,
        "startLineNumber" : 34,
        "startColumnNumber" : 4,
        "endLineNumber" : 65,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testResumeNext(){\n  TestObservable f=new TestObservable(\"one\");\n  Flowable<String> w=Flowable.create(f);\n  final AtomicReference<Throwable> capturedException=new AtomicReference<Throwable>();\n  Flowable<String> observable=w.onErrorReturn(new Function<Throwable,String>(){\n    @Override public String apply(    Throwable e){\n      capturedException.set(e);\n      return \"failure\";\n    }\n  }\n);\n  @SuppressWarnings(\"unchecked\") DefaultObserver<String> observer=mock(DefaultObserver.class);\n  observable.subscribe(observer);\n  try {\n    f.t.join();\n  }\n catch (  InterruptedException e) {\n    fail(e.getMessage());\n  }\n  verify(observer,Mockito.never()).onError(any(Throwable.class));\n  verify(observer,times(1)).onComplete();\n  verify(observer,times(1)).onNext(\"one\");\n  verify(observer,times(1)).onNext(\"failure\");\n  assertNotNull(capturedException.get());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 172,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 60,
        "endColumnNumber" : 72
      },
      "nodeContext" : "verify(observer,Mockito.never()).onError(any(Throwable.class));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "io.reactivex.subscribers.DefaultObserver<java.lang.String>"
  }, {
    "nodeContext" : "observer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 61,
      "startColumnNumber" : 15,
      "endLineNumber" : 61,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 61,
        "startColumnNumber" : 8,
        "endLineNumber" : 61,
        "endColumnNumber" : 34
      },
      "nodeContext" : "verify(observer,times(1))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 61,
        "startColumnNumber" : 8,
        "endLineNumber" : 61,
        "endColumnNumber" : 47
      },
      "nodeContext" : "verify(observer,times(1)).onComplete()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 61,
        "startColumnNumber" : 8,
        "endLineNumber" : 61,
        "endColumnNumber" : 48
      },
      "nodeContext" : "verify(observer,times(1)).onComplete();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1052,
        "startLineNumber" : 35,
        "startColumnNumber" : 33,
        "endLineNumber" : 65,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TestObservable f=new TestObservable(\"one\");\n  Flowable<String> w=Flowable.create(f);\n  final AtomicReference<Throwable> capturedException=new AtomicReference<Throwable>();\n  Flowable<String> observable=w.onErrorReturn(new Function<Throwable,String>(){\n    @Override public String apply(    Throwable e){\n      capturedException.set(e);\n      return \"failure\";\n    }\n  }\n);\n  @SuppressWarnings(\"unchecked\") DefaultObserver<String> observer=mock(DefaultObserver.class);\n  observable.subscribe(observer);\n  try {\n    f.t.join();\n  }\n catch (  InterruptedException e) {\n    fail(e.getMessage());\n  }\n  verify(observer,Mockito.never()).onError(any(Throwable.class));\n  verify(observer,times(1)).onComplete();\n  verify(observer,times(1)).onNext(\"one\");\n  verify(observer,times(1)).onNext(\"failure\");\n  assertNotNull(capturedException.get());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 166,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1092,
        "startLineNumber" : 34,
        "startColumnNumber" : 4,
        "endLineNumber" : 65,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testResumeNext(){\n  TestObservable f=new TestObservable(\"one\");\n  Flowable<String> w=Flowable.create(f);\n  final AtomicReference<Throwable> capturedException=new AtomicReference<Throwable>();\n  Flowable<String> observable=w.onErrorReturn(new Function<Throwable,String>(){\n    @Override public String apply(    Throwable e){\n      capturedException.set(e);\n      return \"failure\";\n    }\n  }\n);\n  @SuppressWarnings(\"unchecked\") DefaultObserver<String> observer=mock(DefaultObserver.class);\n  observable.subscribe(observer);\n  try {\n    f.t.join();\n  }\n catch (  InterruptedException e) {\n    fail(e.getMessage());\n  }\n  verify(observer,Mockito.never()).onError(any(Throwable.class));\n  verify(observer,times(1)).onComplete();\n  verify(observer,times(1)).onNext(\"one\");\n  verify(observer,times(1)).onNext(\"failure\");\n  assertNotNull(capturedException.get());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 172,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 61,
        "startColumnNumber" : 8,
        "endLineNumber" : 61,
        "endColumnNumber" : 48
      },
      "nodeContext" : "verify(observer,times(1)).onComplete();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "io.reactivex.subscribers.DefaultObserver<java.lang.String>"
  }, {
    "nodeContext" : "observer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 62,
      "startColumnNumber" : 15,
      "endLineNumber" : 62,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 62,
        "startColumnNumber" : 8,
        "endLineNumber" : 62,
        "endColumnNumber" : 34
      },
      "nodeContext" : "verify(observer,times(1))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 62,
        "startColumnNumber" : 8,
        "endLineNumber" : 62,
        "endColumnNumber" : 48
      },
      "nodeContext" : "verify(observer,times(1)).onNext(\"one\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 62,
        "startColumnNumber" : 8,
        "endLineNumber" : 62,
        "endColumnNumber" : 49
      },
      "nodeContext" : "verify(observer,times(1)).onNext(\"one\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1052,
        "startLineNumber" : 35,
        "startColumnNumber" : 33,
        "endLineNumber" : 65,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TestObservable f=new TestObservable(\"one\");\n  Flowable<String> w=Flowable.create(f);\n  final AtomicReference<Throwable> capturedException=new AtomicReference<Throwable>();\n  Flowable<String> observable=w.onErrorReturn(new Function<Throwable,String>(){\n    @Override public String apply(    Throwable e){\n      capturedException.set(e);\n      return \"failure\";\n    }\n  }\n);\n  @SuppressWarnings(\"unchecked\") DefaultObserver<String> observer=mock(DefaultObserver.class);\n  observable.subscribe(observer);\n  try {\n    f.t.join();\n  }\n catch (  InterruptedException e) {\n    fail(e.getMessage());\n  }\n  verify(observer,Mockito.never()).onError(any(Throwable.class));\n  verify(observer,times(1)).onComplete();\n  verify(observer,times(1)).onNext(\"one\");\n  verify(observer,times(1)).onNext(\"failure\");\n  assertNotNull(capturedException.get());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 166,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1092,
        "startLineNumber" : 34,
        "startColumnNumber" : 4,
        "endLineNumber" : 65,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testResumeNext(){\n  TestObservable f=new TestObservable(\"one\");\n  Flowable<String> w=Flowable.create(f);\n  final AtomicReference<Throwable> capturedException=new AtomicReference<Throwable>();\n  Flowable<String> observable=w.onErrorReturn(new Function<Throwable,String>(){\n    @Override public String apply(    Throwable e){\n      capturedException.set(e);\n      return \"failure\";\n    }\n  }\n);\n  @SuppressWarnings(\"unchecked\") DefaultObserver<String> observer=mock(DefaultObserver.class);\n  observable.subscribe(observer);\n  try {\n    f.t.join();\n  }\n catch (  InterruptedException e) {\n    fail(e.getMessage());\n  }\n  verify(observer,Mockito.never()).onError(any(Throwable.class));\n  verify(observer,times(1)).onComplete();\n  verify(observer,times(1)).onNext(\"one\");\n  verify(observer,times(1)).onNext(\"failure\");\n  assertNotNull(capturedException.get());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 172,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 62,
        "startColumnNumber" : 8,
        "endLineNumber" : 62,
        "endColumnNumber" : 49
      },
      "nodeContext" : "verify(observer,times(1)).onNext(\"one\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "io.reactivex.subscribers.DefaultObserver<java.lang.String>"
  }, {
    "nodeContext" : "observer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 63,
      "startColumnNumber" : 15,
      "endLineNumber" : 63,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 63,
        "endColumnNumber" : 34
      },
      "nodeContext" : "verify(observer,times(1))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 63,
        "endColumnNumber" : 52
      },
      "nodeContext" : "verify(observer,times(1)).onNext(\"failure\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 63,
        "endColumnNumber" : 53
      },
      "nodeContext" : "verify(observer,times(1)).onNext(\"failure\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1052,
        "startLineNumber" : 35,
        "startColumnNumber" : 33,
        "endLineNumber" : 65,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TestObservable f=new TestObservable(\"one\");\n  Flowable<String> w=Flowable.create(f);\n  final AtomicReference<Throwable> capturedException=new AtomicReference<Throwable>();\n  Flowable<String> observable=w.onErrorReturn(new Function<Throwable,String>(){\n    @Override public String apply(    Throwable e){\n      capturedException.set(e);\n      return \"failure\";\n    }\n  }\n);\n  @SuppressWarnings(\"unchecked\") DefaultObserver<String> observer=mock(DefaultObserver.class);\n  observable.subscribe(observer);\n  try {\n    f.t.join();\n  }\n catch (  InterruptedException e) {\n    fail(e.getMessage());\n  }\n  verify(observer,Mockito.never()).onError(any(Throwable.class));\n  verify(observer,times(1)).onComplete();\n  verify(observer,times(1)).onNext(\"one\");\n  verify(observer,times(1)).onNext(\"failure\");\n  assertNotNull(capturedException.get());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 166,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1092,
        "startLineNumber" : 34,
        "startColumnNumber" : 4,
        "endLineNumber" : 65,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testResumeNext(){\n  TestObservable f=new TestObservable(\"one\");\n  Flowable<String> w=Flowable.create(f);\n  final AtomicReference<Throwable> capturedException=new AtomicReference<Throwable>();\n  Flowable<String> observable=w.onErrorReturn(new Function<Throwable,String>(){\n    @Override public String apply(    Throwable e){\n      capturedException.set(e);\n      return \"failure\";\n    }\n  }\n);\n  @SuppressWarnings(\"unchecked\") DefaultObserver<String> observer=mock(DefaultObserver.class);\n  observable.subscribe(observer);\n  try {\n    f.t.join();\n  }\n catch (  InterruptedException e) {\n    fail(e.getMessage());\n  }\n  verify(observer,Mockito.never()).onError(any(Throwable.class));\n  verify(observer,times(1)).onComplete();\n  verify(observer,times(1)).onNext(\"one\");\n  verify(observer,times(1)).onNext(\"failure\");\n  assertNotNull(capturedException.get());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 172,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 63,
        "endColumnNumber" : 53
      },
      "nodeContext" : "verify(observer,times(1)).onNext(\"failure\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "io.reactivex.subscribers.DefaultObserver<java.lang.String>"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 52,
    "startColumnNumber" : 29,
    "endLineNumber" : 52,
    "endColumnNumber" : 37
  }, {
    "charLength" : 8,
    "startLineNumber" : 60,
    "startColumnNumber" : 15,
    "endLineNumber" : 60,
    "endColumnNumber" : 23
  }, {
    "charLength" : 8,
    "startLineNumber" : 61,
    "startColumnNumber" : 15,
    "endLineNumber" : 61,
    "endColumnNumber" : 23
  }, {
    "charLength" : 8,
    "startLineNumber" : 62,
    "startColumnNumber" : 15,
    "endLineNumber" : 62,
    "endColumnNumber" : 23
  }, {
    "charLength" : 8,
    "startLineNumber" : 63,
    "startColumnNumber" : 15,
    "endLineNumber" : 63,
    "endColumnNumber" : 23
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  } ]
}