{
  "id" : 251,
  "expression" : "cluster.getService().getName()",
  "projectName" : "alibaba@nacos",
  "commitID" : "4e7346db1d6657ffe07c96bebd2d348229c2812f",
  "filePath" : "/naming/src/main/java/com/alibaba/nacos/naming/healthcheck/MysqlHealthCheckProcessor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "cluster.getService().getName()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 138,
      "startColumnNumber" : 29,
      "endLineNumber" : 138,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 121,
        "startLineNumber" : 138,
        "startColumnNumber" : 29,
        "endLineNumber" : 139,
        "endColumnNumber" : 34
      },
      "nodeContext" : "cluster.getService().getName() + \":\" + cluster.getName()+ \":\"+ ip.getIp()+ \":\"+ ip.getPort()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 127,
        "startLineNumber" : 138,
        "startColumnNumber" : 23,
        "endLineNumber" : 139,
        "endColumnNumber" : 34
      },
      "nodeContext" : "key=cluster.getService().getName() + \":\" + cluster.getName()+ \":\"+ ip.getIp()+ \":\"+ ip.getPort()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 135,
        "startLineNumber" : 138,
        "startColumnNumber" : 16,
        "endLineNumber" : 139,
        "endColumnNumber" : 35
      },
      "nodeContext" : "String key=cluster.getService().getName() + \":\" + cluster.getName()+ \":\"+ ip.getIp()+ \":\"+ ip.getPort();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1722,
        "startLineNumber" : 135,
        "startColumnNumber" : 16,
        "endLineNumber" : 167,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Cluster cluster=task.getCluster();\n  String key=cluster.getService().getName() + \":\" + cluster.getName()+ \":\"+ ip.getIp()+ \":\"+ ip.getPort();\n  Connection connection=CONNECTION_POOL.get(key);\n  Mysql config=(Mysql)cluster.getHealthChecker();\n  if (connection == null || connection.isClosed()) {\n    String url=\"jdbc:mysql://\" + ip.getIp() + \":\"+ ip.getPort()+ \"?connectTimeout=\"+ CONNECT_TIMEOUT_MS+ \"&socketTimeout=\"+ CONNECT_TIMEOUT_MS+ \"&loginTimeout=\"+ 1;\n    connection=DriverManager.getConnection(url,config.getUser(),config.getPwd());\n    CONNECTION_POOL.put(key,connection);\n  }\n  statement=connection.createStatement();\n  statement.setQueryTimeout(1);\n  resultSet=statement.executeQuery(config.getCmd());\n  int resultColumnIndex=2;\n  if (CHECK_MYSQL_MASTER_SQL.equals(config.getCmd())) {\n    resultSet.next();\n    if (MYSQL_SLAVE_READONLY.equals(resultSet.getString(resultColumnIndex))) {\n      throw new IllegalStateException(\"current node is slave!\");\n    }\n  }\n  healthCheckCommon.checkOK(ip,task,\"mysql:+ok\");\n  healthCheckCommon.reEvaluateCheckRT(System.currentTimeMillis() - startTime,task,switchDomain.getMysqlHealthParams());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 171,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3945,
        "startLineNumber" : 135,
        "startColumnNumber" : 12,
        "endLineNumber" : 208,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  Cluster cluster=task.getCluster();\n  String key=cluster.getService().getName() + \":\" + cluster.getName()+ \":\"+ ip.getIp()+ \":\"+ ip.getPort();\n  Connection connection=CONNECTION_POOL.get(key);\n  Mysql config=(Mysql)cluster.getHealthChecker();\n  if (connection == null || connection.isClosed()) {\n    String url=\"jdbc:mysql://\" + ip.getIp() + \":\"+ ip.getPort()+ \"?connectTimeout=\"+ CONNECT_TIMEOUT_MS+ \"&socketTimeout=\"+ CONNECT_TIMEOUT_MS+ \"&loginTimeout=\"+ 1;\n    connection=DriverManager.getConnection(url,config.getUser(),config.getPwd());\n    CONNECTION_POOL.put(key,connection);\n  }\n  statement=connection.createStatement();\n  statement.setQueryTimeout(1);\n  resultSet=statement.executeQuery(config.getCmd());\n  int resultColumnIndex=2;\n  if (CHECK_MYSQL_MASTER_SQL.equals(config.getCmd())) {\n    resultSet.next();\n    if (MYSQL_SLAVE_READONLY.equals(resultSet.getString(resultColumnIndex))) {\n      throw new IllegalStateException(\"current node is slave!\");\n    }\n  }\n  healthCheckCommon.checkOK(ip,task,\"mysql:+ok\");\n  healthCheckCommon.reEvaluateCheckRT(System.currentTimeMillis() - startTime,task,switchDomain.getMysqlHealthParams());\n}\n catch (SQLException e) {\n  healthCheckCommon.checkFailNow(ip,task,\"mysql:\" + e.getMessage());\n  healthCheckCommon.reEvaluateCheckRT(switchDomain.getHttpHealthParams().getMax(),task,switchDomain.getMysqlHealthParams());\n}\ncatch (Throwable t) {\n  Throwable cause=t;\n  int maxStackDepth=50;\n  for (int deepth=0; deepth < maxStackDepth && cause != null; deepth++) {\n    if (cause instanceof SocketTimeoutException || cause instanceof ConnectTimeoutException || cause instanceof TimeoutException|| cause.getCause() instanceof TimeoutException) {\n      healthCheckCommon.checkFail(ip,task,\"mysql:timeout:\" + cause.getMessage());\n      healthCheckCommon.reEvaluateCheckRT(task.getCheckRtNormalized() * 2,task,switchDomain.getMysqlHealthParams());\n      return;\n    }\n    cause=cause.getCause();\n  }\n  healthCheckCommon.checkFail(ip,task,\"mysql:error:\" + t.getMessage());\n  healthCheckCommon.reEvaluateCheckRT(switchDomain.getMysqlHealthParams().getMax(),task,switchDomain.getMysqlHealthParams());\n}\n finally {\n  ip.setCheckRt(System.currentTimeMillis() - startTime);\n  if (statement != null) {\n    try {\n      statement.close();\n    }\n catch (    SQLException e) {\n      Loggers.SRV_LOG.error(\"[MYSQL-CHECK] failed to close statement:\" + statement,e);\n    }\n  }\n  if (resultSet != null) {\n    try {\n      resultSet.close();\n    }\n catch (    SQLException e) {\n      Loggers.SRV_LOG.error(\"[MYSQL-CHECK] failed to close resultSet:\" + resultSet,e);\n    }\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 375,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4075,
        "startLineNumber" : 130,
        "startColumnNumber" : 26,
        "endLineNumber" : 209,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Statement statement=null;\n  ResultSet resultSet=null;\n  try {\n    Cluster cluster=task.getCluster();\n    String key=cluster.getService().getName() + \":\" + cluster.getName()+ \":\"+ ip.getIp()+ \":\"+ ip.getPort();\n    Connection connection=CONNECTION_POOL.get(key);\n    Mysql config=(Mysql)cluster.getHealthChecker();\n    if (connection == null || connection.isClosed()) {\n      String url=\"jdbc:mysql://\" + ip.getIp() + \":\"+ ip.getPort()+ \"?connectTimeout=\"+ CONNECT_TIMEOUT_MS+ \"&socketTimeout=\"+ CONNECT_TIMEOUT_MS+ \"&loginTimeout=\"+ 1;\n      connection=DriverManager.getConnection(url,config.getUser(),config.getPwd());\n      CONNECTION_POOL.put(key,connection);\n    }\n    statement=connection.createStatement();\n    statement.setQueryTimeout(1);\n    resultSet=statement.executeQuery(config.getCmd());\n    int resultColumnIndex=2;\n    if (CHECK_MYSQL_MASTER_SQL.equals(config.getCmd())) {\n      resultSet.next();\n      if (MYSQL_SLAVE_READONLY.equals(resultSet.getString(resultColumnIndex))) {\n        throw new IllegalStateException(\"current node is slave!\");\n      }\n    }\n    healthCheckCommon.checkOK(ip,task,\"mysql:+ok\");\n    healthCheckCommon.reEvaluateCheckRT(System.currentTimeMillis() - startTime,task,switchDomain.getMysqlHealthParams());\n  }\n catch (  SQLException e) {\n    healthCheckCommon.checkFailNow(ip,task,\"mysql:\" + e.getMessage());\n    healthCheckCommon.reEvaluateCheckRT(switchDomain.getHttpHealthParams().getMax(),task,switchDomain.getMysqlHealthParams());\n  }\ncatch (  Throwable t) {\n    Throwable cause=t;\n    int maxStackDepth=50;\n    for (int deepth=0; deepth < maxStackDepth && cause != null; deepth++) {\n      if (cause instanceof SocketTimeoutException || cause instanceof ConnectTimeoutException || cause instanceof TimeoutException|| cause.getCause() instanceof TimeoutException) {\n        healthCheckCommon.checkFail(ip,task,\"mysql:timeout:\" + cause.getMessage());\n        healthCheckCommon.reEvaluateCheckRT(task.getCheckRtNormalized() * 2,task,switchDomain.getMysqlHealthParams());\n        return;\n      }\n      cause=cause.getCause();\n    }\n    healthCheckCommon.checkFail(ip,task,\"mysql:error:\" + t.getMessage());\n    healthCheckCommon.reEvaluateCheckRT(switchDomain.getMysqlHealthParams().getMax(),task,switchDomain.getMysqlHealthParams());\n  }\n finally {\n    ip.setCheckRt(System.currentTimeMillis() - startTime);\n    if (statement != null) {\n      try {\n        statement.close();\n      }\n catch (      SQLException e) {\n        Loggers.SRV_LOG.error(\"[MYSQL-CHECK] failed to close statement:\" + statement,e);\n      }\n    }\n    if (resultSet != null) {\n      try {\n        resultSet.close();\n      }\n catch (      SQLException e) {\n        Loggers.SRV_LOG.error(\"[MYSQL-CHECK] failed to close resultSet:\" + resultSet,e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 388,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4111,
        "startLineNumber" : 129,
        "startColumnNumber" : 8,
        "endLineNumber" : 209,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(){\n  Statement statement=null;\n  ResultSet resultSet=null;\n  try {\n    Cluster cluster=task.getCluster();\n    String key=cluster.getService().getName() + \":\" + cluster.getName()+ \":\"+ ip.getIp()+ \":\"+ ip.getPort();\n    Connection connection=CONNECTION_POOL.get(key);\n    Mysql config=(Mysql)cluster.getHealthChecker();\n    if (connection == null || connection.isClosed()) {\n      String url=\"jdbc:mysql://\" + ip.getIp() + \":\"+ ip.getPort()+ \"?connectTimeout=\"+ CONNECT_TIMEOUT_MS+ \"&socketTimeout=\"+ CONNECT_TIMEOUT_MS+ \"&loginTimeout=\"+ 1;\n      connection=DriverManager.getConnection(url,config.getUser(),config.getPwd());\n      CONNECTION_POOL.put(key,connection);\n    }\n    statement=connection.createStatement();\n    statement.setQueryTimeout(1);\n    resultSet=statement.executeQuery(config.getCmd());\n    int resultColumnIndex=2;\n    if (CHECK_MYSQL_MASTER_SQL.equals(config.getCmd())) {\n      resultSet.next();\n      if (MYSQL_SLAVE_READONLY.equals(resultSet.getString(resultColumnIndex))) {\n        throw new IllegalStateException(\"current node is slave!\");\n      }\n    }\n    healthCheckCommon.checkOK(ip,task,\"mysql:+ok\");\n    healthCheckCommon.reEvaluateCheckRT(System.currentTimeMillis() - startTime,task,switchDomain.getMysqlHealthParams());\n  }\n catch (  SQLException e) {\n    healthCheckCommon.checkFailNow(ip,task,\"mysql:\" + e.getMessage());\n    healthCheckCommon.reEvaluateCheckRT(switchDomain.getHttpHealthParams().getMax(),task,switchDomain.getMysqlHealthParams());\n  }\ncatch (  Throwable t) {\n    Throwable cause=t;\n    int maxStackDepth=50;\n    for (int deepth=0; deepth < maxStackDepth && cause != null; deepth++) {\n      if (cause instanceof SocketTimeoutException || cause instanceof ConnectTimeoutException || cause instanceof TimeoutException|| cause.getCause() instanceof TimeoutException) {\n        healthCheckCommon.checkFail(ip,task,\"mysql:timeout:\" + cause.getMessage());\n        healthCheckCommon.reEvaluateCheckRT(task.getCheckRtNormalized() * 2,task,switchDomain.getMysqlHealthParams());\n        return;\n      }\n      cause=cause.getCause();\n    }\n    healthCheckCommon.checkFail(ip,task,\"mysql:error:\" + t.getMessage());\n    healthCheckCommon.reEvaluateCheckRT(switchDomain.getMysqlHealthParams().getMax(),task,switchDomain.getMysqlHealthParams());\n  }\n finally {\n    ip.setCheckRt(System.currentTimeMillis() - startTime);\n    if (statement != null) {\n      try {\n        statement.close();\n      }\n catch (      SQLException e) {\n        Loggers.SRV_LOG.error(\"[MYSQL-CHECK] failed to close statement:\" + statement,e);\n      }\n    }\n    if (resultSet != null) {\n      try {\n        resultSet.close();\n      }\n catch (      SQLException e) {\n        Loggers.SRV_LOG.error(\"[MYSQL-CHECK] failed to close resultSet:\" + resultSet,e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 394,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 121,
        "startLineNumber" : 138,
        "startColumnNumber" : 29,
        "endLineNumber" : 139,
        "endColumnNumber" : 34
      },
      "nodeContext" : "cluster.getService().getName() + \":\" + cluster.getName()+ \":\"+ ip.getIp()+ \":\"+ ip.getPort()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 30,
    "startLineNumber" : 138,
    "startColumnNumber" : 29,
    "endLineNumber" : 138,
    "endColumnNumber" : 59
  } ],
  "layoutRelationDataList" : [ ]
}