{
  "id" : 360,
  "expression" : "array[0]",
  "projectName" : "OpenAPITools@openapi-generator",
  "commitID" : "9e1972bb1d3a4f1e3f47c87613f4050feada0146",
  "filePath" : "/samples/client/petstore/java/feign/src/main/java/org/openapitools/client/StringUtil.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "array[0]",
    "nodeType" : "ArrayAccess",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 58,
      "startColumnNumber" : 15,
      "endLineNumber" : 58,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 58,
        "endColumnNumber" : 24
      },
      "nodeContext" : "out.append(array[0])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 58,
        "endColumnNumber" : 25
      },
      "nodeContext" : "out.append(array[0]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 263,
        "startLineNumber" : 51,
        "startColumnNumber" : 62,
        "endLineNumber" : 63,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int len=array.length;\n  if (len == 0) {\n    return \"\";\n  }\n  StringBuilder out=new StringBuilder();\n  out.append(array[0]);\n  for (int i=1; i < len; i++) {\n    out.append(separator).append(array[i]);\n  }\n  return out.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 56,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 670,
        "startLineNumber" : 40,
        "startColumnNumber" : 2,
        "endLineNumber" : 63,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Join an array of strings with the given separator. <p> Note: This might be replaced by utility method from commons-lang or guava someday if one of those libraries is added as dependency. </p>\n * @param array     The array of strings\n * @param separator The separator\n * @return the resulting string\n */\npublic static String join(String[] array,String separator){\n  int len=array.length;\n  if (len == 0) {\n    return \"\";\n  }\n  StringBuilder out=new StringBuilder();\n  out.append(array[0]);\n  for (int i=1; i < len; i++) {\n    out.append(separator).append(array[i]);\n  }\n  return out.toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 73,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 58,
        "endColumnNumber" : 25
      },
      "nodeContext" : "out.append(array[0]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 58,
    "startColumnNumber" : 15,
    "endLineNumber" : 58,
    "endColumnNumber" : 23
  } ],
  "layoutRelationDataList" : [ ]
}