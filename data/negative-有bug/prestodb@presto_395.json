{
  "id" : 395,
  "expression" : "outputPages.isEmpty()",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-main/src/test/java/com/facebook/presto/operator/TestHashAggregationOperator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "outputPages.isEmpty()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 547,
      "startColumnNumber" : 24,
      "endLineNumber" : 547,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 547,
        "startColumnNumber" : 23,
        "endLineNumber" : 547,
        "endColumnNumber" : 45
      },
      "nodeContext" : "!outputPages.isEmpty()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 547,
        "startColumnNumber" : 12,
        "endLineNumber" : 547,
        "endColumnNumber" : 46
      },
      "nodeContext" : "assertTrue(!outputPages.isEmpty())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 547,
        "startColumnNumber" : 12,
        "endLineNumber" : 547,
        "endColumnNumber" : 47
      },
      "nodeContext" : "assertTrue(!outputPages.isEmpty());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1896,
        "startLineNumber" : 518,
        "startColumnNumber" : 80,
        "endLineNumber" : 564,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  List<Page> expectedPages=rowPagesBuilder(BIGINT,BIGINT).addSequencePage(2000,0,0).build();\n  MaterializedResult expected=resultBuilder(driverContext.getSession(),BIGINT,BIGINT).pages(expectedPages).build();\n  Iterator<Page> inputIterator=input.iterator();\n  while (operator.needsInput() && inputIterator.hasNext()) {\n    operator.addInput(inputIterator.next());\n  }\n  assertThat(driverContext.getSystemMemoryUsage()).isGreaterThan(0);\n  assertEquals(driverContext.getMemoryUsage(),0);\n  List<Page> outputPages=new ArrayList<>();\n  while (true) {\n    Page output=operator.getOutput();\n    if (output == null) {\n      break;\n    }\n    outputPages.add(output);\n  }\n  assertTrue(!outputPages.isEmpty());\n  assertTrue(operator.needsInput());\n  outputPages.addAll(toPages(operator,inputIterator));\n  MaterializedResult actual;\n  if (hashEnabled) {\n    outputPages=dropChannel(outputPages,ImmutableList.of(1));\n  }\n  actual=toMaterializedResult(operator.getOperatorContext().getSession(),expected.getTypes(),outputPages);\n  assertEquals(actual.getTypes(),expected.getTypes());\n  assertEqualsIgnoreOrder(actual.getMaterializedRows(),expected.getMaterializedRows());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 185,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1968,
        "startLineNumber" : 518,
        "startColumnNumber" : 8,
        "endLineNumber" : 564,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (Operator operator=operatorFactory.createOperator(driverContext)){\n  List<Page> expectedPages=rowPagesBuilder(BIGINT,BIGINT).addSequencePage(2000,0,0).build();\n  MaterializedResult expected=resultBuilder(driverContext.getSession(),BIGINT,BIGINT).pages(expectedPages).build();\n  Iterator<Page> inputIterator=input.iterator();\n  while (operator.needsInput() && inputIterator.hasNext()) {\n    operator.addInput(inputIterator.next());\n  }\n  assertThat(driverContext.getSystemMemoryUsage()).isGreaterThan(0);\n  assertEquals(driverContext.getMemoryUsage(),0);\n  List<Page> outputPages=new ArrayList<>();\n  while (true) {\n    Page output=operator.getOutput();\n    if (output == null) {\n      break;\n    }\n    outputPages.add(output);\n  }\n  assertTrue(!outputPages.isEmpty());\n  assertTrue(operator.needsInput());\n  outputPages.addAll(toPages(operator,inputIterator));\n  MaterializedResult actual;\n  if (hashEnabled) {\n    outputPages=dropChannel(outputPages,ImmutableList.of(1));\n  }\n  actual=toMaterializedResult(operator.getOperatorContext().getSession(),expected.getTypes(),outputPages);\n  assertEquals(actual.getTypes(),expected.getTypes());\n  assertEqualsIgnoreOrder(actual.getMaterializedRows(),expected.getMaterializedRows());\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 195,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3157,
        "startLineNumber" : 491,
        "startColumnNumber" : 4,
        "endLineNumber" : 568,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<Integer> hashChannels=Ints.asList(0);\n  RowPagesBuilder rowPagesBuilder=rowPagesBuilder(hashEnabled,hashChannels,BIGINT);\n  List<Page> input=rowPagesBuilder.addSequencePage(500,0).addSequencePage(500,500).addSequencePage(500,1000).addSequencePage(500,1500).build();\n  HashAggregationOperatorFactory operatorFactory=new HashAggregationOperatorFactory(0,new PlanNodeId(\"test\"),ImmutableList.of(BIGINT),hashChannels,ImmutableList.of(),Step.PARTIAL,ImmutableList.of(LONG_SUM.bind(ImmutableList.of(0),Optional.empty())),rowPagesBuilder.getHashChannel(),Optional.empty(),100_000,Optional.of(new DataSize(1,KILOBYTE)),joinCompiler,true);\n  DriverContext driverContext=createDriverContext(1024);\n  try (Operator operator=operatorFactory.createOperator(driverContext)){\n    List<Page> expectedPages=rowPagesBuilder(BIGINT,BIGINT).addSequencePage(2000,0,0).build();\n    MaterializedResult expected=resultBuilder(driverContext.getSession(),BIGINT,BIGINT).pages(expectedPages).build();\n    Iterator<Page> inputIterator=input.iterator();\n    while (operator.needsInput() && inputIterator.hasNext()) {\n      operator.addInput(inputIterator.next());\n    }\n    assertThat(driverContext.getSystemMemoryUsage()).isGreaterThan(0);\n    assertEquals(driverContext.getMemoryUsage(),0);\n    List<Page> outputPages=new ArrayList<>();\n    while (true) {\n      Page output=operator.getOutput();\n      if (output == null) {\n        break;\n      }\n      outputPages.add(output);\n    }\n    assertTrue(!outputPages.isEmpty());\n    assertTrue(operator.needsInput());\n    outputPages.addAll(toPages(operator,inputIterator));\n    MaterializedResult actual;\n    if (hashEnabled) {\n      outputPages=dropChannel(outputPages,ImmutableList.of(1));\n    }\n    actual=toMaterializedResult(operator.getOperatorContext().getSession(),expected.getTypes(),outputPages);\n    assertEquals(actual.getTypes(),expected.getTypes());\n    assertEqualsIgnoreOrder(actual.getMaterializedRows(),expected.getMaterializedRows());\n  }\n   assertEquals(driverContext.getSystemMemoryUsage(),0);\n  assertEquals(driverContext.getMemoryUsage(),0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 321,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3290,
        "startLineNumber" : 488,
        "startColumnNumber" : 4,
        "endLineNumber" : 568,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(dataProvider=\"hashEnabled\") public void testMultiplePartialFlushes(boolean hashEnabled) throws Exception {\n  List<Integer> hashChannels=Ints.asList(0);\n  RowPagesBuilder rowPagesBuilder=rowPagesBuilder(hashEnabled,hashChannels,BIGINT);\n  List<Page> input=rowPagesBuilder.addSequencePage(500,0).addSequencePage(500,500).addSequencePage(500,1000).addSequencePage(500,1500).build();\n  HashAggregationOperatorFactory operatorFactory=new HashAggregationOperatorFactory(0,new PlanNodeId(\"test\"),ImmutableList.of(BIGINT),hashChannels,ImmutableList.of(),Step.PARTIAL,ImmutableList.of(LONG_SUM.bind(ImmutableList.of(0),Optional.empty())),rowPagesBuilder.getHashChannel(),Optional.empty(),100_000,Optional.of(new DataSize(1,KILOBYTE)),joinCompiler,true);\n  DriverContext driverContext=createDriverContext(1024);\n  try (Operator operator=operatorFactory.createOperator(driverContext)){\n    List<Page> expectedPages=rowPagesBuilder(BIGINT,BIGINT).addSequencePage(2000,0,0).build();\n    MaterializedResult expected=resultBuilder(driverContext.getSession(),BIGINT,BIGINT).pages(expectedPages).build();\n    Iterator<Page> inputIterator=input.iterator();\n    while (operator.needsInput() && inputIterator.hasNext()) {\n      operator.addInput(inputIterator.next());\n    }\n    assertThat(driverContext.getSystemMemoryUsage()).isGreaterThan(0);\n    assertEquals(driverContext.getMemoryUsage(),0);\n    List<Page> outputPages=new ArrayList<>();\n    while (true) {\n      Page output=operator.getOutput();\n      if (output == null) {\n        break;\n      }\n      outputPages.add(output);\n    }\n    assertTrue(!outputPages.isEmpty());\n    assertTrue(operator.needsInput());\n    outputPages.addAll(toPages(operator,inputIterator));\n    MaterializedResult actual;\n    if (hashEnabled) {\n      outputPages=dropChannel(outputPages,ImmutableList.of(1));\n    }\n    actual=toMaterializedResult(operator.getOperatorContext().getSession(),expected.getTypes(),outputPages);\n    assertEquals(actual.getTypes(),expected.getTypes());\n    assertEqualsIgnoreOrder(actual.getMaterializedRows(),expected.getMaterializedRows());\n  }\n   assertEquals(driverContext.getSystemMemoryUsage(),0);\n  assertEquals(driverContext.getMemoryUsage(),0);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 335,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 547,
        "startColumnNumber" : 12,
        "endLineNumber" : 547,
        "endColumnNumber" : 47
      },
      "nodeContext" : "assertTrue(!outputPages.isEmpty());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 547,
    "startColumnNumber" : 24,
    "endLineNumber" : 547,
    "endColumnNumber" : 45
  } ],
  "layoutRelationDataList" : [ ]
}