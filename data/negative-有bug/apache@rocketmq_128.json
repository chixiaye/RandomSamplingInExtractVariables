{
  "id" : 128,
  "expression" : "1000 * 10",
  "projectName" : "apache@rocketmq",
  "commitID" : "7692d466e1fda6c29d52a61617cab1d82de8b884",
  "filePath" : "/snode/src/main/java/org/apache/rocketmq/snode/service/impl/ScheduledServiceImpl.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "1000 * 10",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 86,
      "startColumnNumber" : 15,
      "endLineNumber" : 86,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 465,
        "startLineNumber" : 77,
        "startColumnNumber" : 12,
        "endLineNumber" : 86,
        "endColumnNumber" : 63
      },
      "nodeContext" : "this.scheduledExecutorService.scheduleAtFixedRate(new Runnable(){\n  @Override public void run(){\n    try {\n      snodeController.getNnodeService().fetchNnodeAdress();\n    }\n catch (    Throwable e) {\n      log.error(\"ScheduledTask fetchNameServerAddr exception\",e);\n    }\n  }\n}\n,1000 * 10,1000 * 60 * 2,TimeUnit.MILLISECONDS)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 46,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 466,
        "startLineNumber" : 77,
        "startColumnNumber" : 12,
        "endLineNumber" : 86,
        "endColumnNumber" : 64
      },
      "nodeContext" : "this.scheduledExecutorService.scheduleAtFixedRate(new Runnable(){\n  @Override public void run(){\n    try {\n      snodeController.getNnodeService().fetchNnodeAdress();\n    }\n catch (    Throwable e) {\n      log.error(\"ScheduledTask fetchNameServerAddr exception\",e);\n    }\n  }\n}\n,1000 * 10,1000 * 60 * 2,TimeUnit.MILLISECONDS);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 47,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 490,
        "startLineNumber" : 76,
        "startColumnNumber" : 61,
        "endLineNumber" : 87,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  this.scheduledExecutorService.scheduleAtFixedRate(new Runnable(){\n    @Override public void run(){\n      try {\n        snodeController.getNnodeService().fetchNnodeAdress();\n      }\n catch (      Throwable e) {\n        log.error(\"ScheduledTask fetchNameServerAddr exception\",e);\n      }\n    }\n  }\n,1000 * 10,1000 * 60 * 2,TimeUnit.MILLISECONDS);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 48,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 543,
        "startLineNumber" : 76,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (snodeConfig.isFetchNamesrvAddrByAddressServer()) {\n  this.scheduledExecutorService.scheduleAtFixedRate(new Runnable(){\n    @Override public void run(){\n      try {\n        snodeController.getNnodeService().fetchNnodeAdress();\n      }\n catch (      Throwable e) {\n        log.error(\"ScheduledTask fetchNameServerAddr exception\",e);\n      }\n    }\n  }\n,1000 * 10,1000 * 60 * 2,TimeUnit.MILLISECONDS);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 52,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3014,
        "startLineNumber" : 63,
        "startColumnNumber" : 36,
        "endLineNumber" : 133,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.scheduledExecutorService.scheduleAtFixedRate(new Runnable(){\n    @Override public void run(){\n      try {\n        snodeController.getEnodeService().sendHeartbeat(enodeHeartbeat);\n      }\n catch (      Exception e) {\n        log.error(\"ScheduledTask updateTopicRouteInfoFromNameServer exception\",e);\n      }\n    }\n  }\n,0,this.snodeConfig.getSnodeHeartBeatInterval(),TimeUnit.MILLISECONDS);\n  if (snodeConfig.isFetchNamesrvAddrByAddressServer()) {\n    this.scheduledExecutorService.scheduleAtFixedRate(new Runnable(){\n      @Override public void run(){\n        try {\n          snodeController.getNnodeService().fetchNnodeAdress();\n        }\n catch (        Throwable e) {\n          log.error(\"ScheduledTask fetchNameServerAddr exception\",e);\n        }\n      }\n    }\n,1000 * 10,1000 * 60 * 2,TimeUnit.MILLISECONDS);\n  }\n  this.scheduledExecutorService.scheduleAtFixedRate(new Runnable(){\n    @Override public void run(){\n      try {\n        snodeController.getNnodeService().registerSnode(snodeConfig);\n      }\n catch (      Exception ex) {\n        log.warn(\"Register snode error\",ex);\n      }\n    }\n  }\n,0,Math.max(10000,Math.min(snodeConfig.getRegisterNameServerPeriod(),60000)),TimeUnit.MILLISECONDS);\n  this.scheduledExecutorService.scheduleAtFixedRate(new Runnable(){\n    @Override public void run(){\n      try {\n        snodeController.getEnodeService().updateEnodeAddress(snodeConfig.getClusterName());\n      }\n catch (      Exception ex) {\n        log.warn(\"Update broker addr error:{}\",ex);\n      }\n    }\n  }\n,0,Math.max(10000,Math.min(snodeConfig.getRegisterNameServerPeriod(),60000)),TimeUnit.MILLISECONDS);\n  this.scheduledExecutorService.scheduleAtFixedRate(new Runnable(){\n    @Override public void run(){\n      try {\n        snodeController.getNnodeService().updateTopicRouteDataByTopic();\n      }\n catch (      Exception ex) {\n        log.warn(\"Update broker addr error:{}\",ex);\n      }\n    }\n  }\n,0,Math.max(10000,Math.min(snodeConfig.getRegisterNameServerPeriod(),60000)),TimeUnit.MILLISECONDS);\n  this.scheduledExecutorService.scheduleAtFixedRate(new Runnable(){\n    @Override public void run(){\n      try {\n        snodeController.getNnodeService().updateEnodeClusterInfo();\n      }\n catch (      Exception ex) {\n        log.warn(\"Update broker addr error:{}\",ex);\n      }\n    }\n  }\n,0,Math.max(10000,Math.min(snodeConfig.getRegisterNameServerPeriod(),60000)),TimeUnit.MILLISECONDS);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 312,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3060,
        "startLineNumber" : 62,
        "startColumnNumber" : 4,
        "endLineNumber" : 133,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void startScheduleTask(){\n  this.scheduledExecutorService.scheduleAtFixedRate(new Runnable(){\n    @Override public void run(){\n      try {\n        snodeController.getEnodeService().sendHeartbeat(enodeHeartbeat);\n      }\n catch (      Exception e) {\n        log.error(\"ScheduledTask updateTopicRouteInfoFromNameServer exception\",e);\n      }\n    }\n  }\n,0,this.snodeConfig.getSnodeHeartBeatInterval(),TimeUnit.MILLISECONDS);\n  if (snodeConfig.isFetchNamesrvAddrByAddressServer()) {\n    this.scheduledExecutorService.scheduleAtFixedRate(new Runnable(){\n      @Override public void run(){\n        try {\n          snodeController.getNnodeService().fetchNnodeAdress();\n        }\n catch (        Throwable e) {\n          log.error(\"ScheduledTask fetchNameServerAddr exception\",e);\n        }\n      }\n    }\n,1000 * 10,1000 * 60 * 2,TimeUnit.MILLISECONDS);\n  }\n  this.scheduledExecutorService.scheduleAtFixedRate(new Runnable(){\n    @Override public void run(){\n      try {\n        snodeController.getNnodeService().registerSnode(snodeConfig);\n      }\n catch (      Exception ex) {\n        log.warn(\"Register snode error\",ex);\n      }\n    }\n  }\n,0,Math.max(10000,Math.min(snodeConfig.getRegisterNameServerPeriod(),60000)),TimeUnit.MILLISECONDS);\n  this.scheduledExecutorService.scheduleAtFixedRate(new Runnable(){\n    @Override public void run(){\n      try {\n        snodeController.getEnodeService().updateEnodeAddress(snodeConfig.getClusterName());\n      }\n catch (      Exception ex) {\n        log.warn(\"Update broker addr error:{}\",ex);\n      }\n    }\n  }\n,0,Math.max(10000,Math.min(snodeConfig.getRegisterNameServerPeriod(),60000)),TimeUnit.MILLISECONDS);\n  this.scheduledExecutorService.scheduleAtFixedRate(new Runnable(){\n    @Override public void run(){\n      try {\n        snodeController.getNnodeService().updateTopicRouteDataByTopic();\n      }\n catch (      Exception ex) {\n        log.warn(\"Update broker addr error:{}\",ex);\n      }\n    }\n  }\n,0,Math.max(10000,Math.min(snodeConfig.getRegisterNameServerPeriod(),60000)),TimeUnit.MILLISECONDS);\n  this.scheduledExecutorService.scheduleAtFixedRate(new Runnable(){\n    @Override public void run(){\n      try {\n        snodeController.getNnodeService().updateEnodeClusterInfo();\n      }\n catch (      Exception ex) {\n        log.warn(\"Update broker addr error:{}\",ex);\n      }\n    }\n  }\n,0,Math.max(10000,Math.min(snodeConfig.getRegisterNameServerPeriod(),60000)),TimeUnit.MILLISECONDS);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 318,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 465,
        "startLineNumber" : 77,
        "startColumnNumber" : 12,
        "endLineNumber" : 86,
        "endColumnNumber" : 63
      },
      "nodeContext" : "this.scheduledExecutorService.scheduleAtFixedRate(new Runnable(){\n  @Override public void run(){\n    try {\n      snodeController.getNnodeService().fetchNnodeAdress();\n    }\n catch (    Throwable e) {\n      log.error(\"ScheduledTask fetchNameServerAddr exception\",e);\n    }\n  }\n}\n,1000 * 10,1000 * 60 * 2,TimeUnit.MILLISECONDS)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 46,
      "astHeight" : 11
    },
    "tokenLength" : 3,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 86,
    "startColumnNumber" : 15,
    "endLineNumber" : 86,
    "endColumnNumber" : 24
  } ],
  "layoutRelationDataList" : [ ]
}