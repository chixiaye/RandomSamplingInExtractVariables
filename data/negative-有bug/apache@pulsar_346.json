{
  "id" : 346,
  "expression" : "Maps",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/tiered-storage/jcloud/src/main/java/org/apache/bookkeeper/mledger/offload/jcloud/impl/OffloadIndexBlockV2Impl.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Maps",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 94,
      "startColumnNumber" : 29,
      "endLineNumber" : 94,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 94,
        "startColumnNumber" : 29,
        "endLineNumber" : 94,
        "endColumnNumber" : 46
      },
      "nodeContext" : "Maps.newTreeMap()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 46
      },
      "nodeContext" : "block.indexEntries=Maps.newTreeMap()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 47
      },
      "nodeContext" : "block.indexEntries=Maps.newTreeMap();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 413,
        "startLineNumber" : 92,
        "startColumnNumber" : 100,
        "endLineNumber" : 102,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  OffloadIndexBlockV2Impl block=RECYCLER.get();\n  block.indexEntries=Maps.newTreeMap();\n  block.segmentMetadata=Maps.newTreeMap();\n  if (magic != INDEX_MAGIC_WORD) {\n    throw new IOException(String.format(\"Invalid MagicWord. read: 0x%x  expected: 0x%x\",magic,INDEX_MAGIC_WORD));\n  }\n  block.fromStream(stream);\n  return block;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 47,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 509,
        "startLineNumber" : 92,
        "startColumnNumber" : 4,
        "endLineNumber" : 102,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static OffloadIndexBlockV2Impl get(int magic,DataInputStream stream) throws IOException {\n  OffloadIndexBlockV2Impl block=RECYCLER.get();\n  block.indexEntries=Maps.newTreeMap();\n  block.segmentMetadata=Maps.newTreeMap();\n  if (magic != INDEX_MAGIC_WORD) {\n    throw new IOException(String.format(\"Invalid MagicWord. read: 0x%x  expected: 0x%x\",magic,INDEX_MAGIC_WORD));\n  }\n  block.fromStream(stream);\n  return block;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 62,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 47
      },
      "nodeContext" : "block.indexEntries=Maps.newTreeMap();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "Maps",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 95,
      "startColumnNumber" : 32,
      "endLineNumber" : 95,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 95,
        "startColumnNumber" : 32,
        "endLineNumber" : 95,
        "endColumnNumber" : 49
      },
      "nodeContext" : "Maps.newTreeMap()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 95,
        "endColumnNumber" : 49
      },
      "nodeContext" : "block.segmentMetadata=Maps.newTreeMap()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 95,
        "endColumnNumber" : 50
      },
      "nodeContext" : "block.segmentMetadata=Maps.newTreeMap();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 413,
        "startLineNumber" : 92,
        "startColumnNumber" : 100,
        "endLineNumber" : 102,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  OffloadIndexBlockV2Impl block=RECYCLER.get();\n  block.indexEntries=Maps.newTreeMap();\n  block.segmentMetadata=Maps.newTreeMap();\n  if (magic != INDEX_MAGIC_WORD) {\n    throw new IOException(String.format(\"Invalid MagicWord. read: 0x%x  expected: 0x%x\",magic,INDEX_MAGIC_WORD));\n  }\n  block.fromStream(stream);\n  return block;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 47,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 509,
        "startLineNumber" : 92,
        "startColumnNumber" : 4,
        "endLineNumber" : 102,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static OffloadIndexBlockV2Impl get(int magic,DataInputStream stream) throws IOException {\n  OffloadIndexBlockV2Impl block=RECYCLER.get();\n  block.indexEntries=Maps.newTreeMap();\n  block.segmentMetadata=Maps.newTreeMap();\n  if (magic != INDEX_MAGIC_WORD) {\n    throw new IOException(String.format(\"Invalid MagicWord. read: 0x%x  expected: 0x%x\",magic,INDEX_MAGIC_WORD));\n  }\n  block.fromStream(stream);\n  return block;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 62,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 95,
        "endColumnNumber" : 50
      },
      "nodeContext" : "block.segmentMetadata=Maps.newTreeMap();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 94,
    "startColumnNumber" : 29,
    "endLineNumber" : 94,
    "endColumnNumber" : 33
  }, {
    "charLength" : 4,
    "startLineNumber" : 95,
    "startColumnNumber" : 32,
    "endLineNumber" : 95,
    "endColumnNumber" : 36
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}