{
  "id" : 468,
  "expression" : "Util.getUtf8Bytes(\"Foo12345Foo12345\")",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "/library/datasource/src/test/java/com/google/android/exoplayer2/upstream/cache/CachedContentIndexTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Util.getUtf8Bytes(\"Foo12345Foo12345\")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 37,
      "startLineNumber" : 356,
      "startColumnNumber" : 18,
      "endLineNumber" : 356,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 356,
        "startColumnNumber" : 11,
        "endLineNumber" : 356,
        "endColumnNumber" : 55
      },
      "nodeContext" : "key2=Util.getUtf8Bytes(\"Foo12345Foo12345\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 356,
        "startColumnNumber" : 4,
        "endLineNumber" : 356,
        "endColumnNumber" : 56
      },
      "nodeContext" : "byte[] key2=Util.getUtf8Bytes(\"Foo12345Foo12345\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1814,
        "startLineNumber" : 354,
        "startColumnNumber" : 50,
        "endLineNumber" : 403,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  byte[] key=Util.getUtf8Bytes(\"Bar12345Bar12345\");\n  byte[] key2=Util.getUtf8Bytes(\"Foo12345Foo12345\");\n  assertStoredAndLoadedEqual(newLegacyInstance(key),newLegacyInstance(key));\n  File file1=new File(cacheDir,CachedContentIndex.FILE_NAME_ATOMIC);\n  File file2=new File(cacheDir,\"file2compare\");\n  assertThat(file1.renameTo(file2)).isTrue();\n  assertStoredAndLoadedEqual(newLegacyInstance(key),newLegacyInstance(key));\n  assertThat(file1.length()).isEqualTo(file2.length());\n  FileInputStream fis1=new FileInputStream(file1);\n  FileInputStream fis2=new FileInputStream(file2);\n  for (int b; (b=fis1.read()) == fis2.read(); ) {\n    assertThat(b != -1).isTrue();\n  }\n  boolean threw=false;\n  try {\n    assertStoredAndLoadedEqual(newLegacyInstance(key),newLegacyInstance(key2));\n  }\n catch (  AssertionError e) {\n    threw=true;\n  }\n  assertWithMessage(\"Encrypted index file can not be read with different encryption key\").that(threw).isTrue();\n  try {\n    assertStoredAndLoadedEqual(newLegacyInstance(key),newLegacyInstance());\n  }\n catch (  AssertionError e) {\n    threw=true;\n  }\n  assertWithMessage(\"Encrypted index file can not be read without encryption key\").that(threw).isTrue();\n  assertStoredAndLoadedEqual(newLegacyInstance(),newLegacyInstance(key));\n  CachedContentIndex index=newLegacyInstance(key);\n  index.getOrAdd(\"key3\");\n  index.store();\n  assertStoredAndLoadedEqual(index,newLegacyInstance(key));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 220,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1870,
        "startLineNumber" : 353,
        "startColumnNumber" : 2,
        "endLineNumber" : 403,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void legacyEncryption() throws Exception {\n  byte[] key=Util.getUtf8Bytes(\"Bar12345Bar12345\");\n  byte[] key2=Util.getUtf8Bytes(\"Foo12345Foo12345\");\n  assertStoredAndLoadedEqual(newLegacyInstance(key),newLegacyInstance(key));\n  File file1=new File(cacheDir,CachedContentIndex.FILE_NAME_ATOMIC);\n  File file2=new File(cacheDir,\"file2compare\");\n  assertThat(file1.renameTo(file2)).isTrue();\n  assertStoredAndLoadedEqual(newLegacyInstance(key),newLegacyInstance(key));\n  assertThat(file1.length()).isEqualTo(file2.length());\n  FileInputStream fis1=new FileInputStream(file1);\n  FileInputStream fis2=new FileInputStream(file2);\n  for (int b; (b=fis1.read()) == fis2.read(); ) {\n    assertThat(b != -1).isTrue();\n  }\n  boolean threw=false;\n  try {\n    assertStoredAndLoadedEqual(newLegacyInstance(key),newLegacyInstance(key2));\n  }\n catch (  AssertionError e) {\n    threw=true;\n  }\n  assertWithMessage(\"Encrypted index file can not be read with different encryption key\").that(threw).isTrue();\n  try {\n    assertStoredAndLoadedEqual(newLegacyInstance(key),newLegacyInstance());\n  }\n catch (  AssertionError e) {\n    threw=true;\n  }\n  assertWithMessage(\"Encrypted index file can not be read without encryption key\").that(threw).isTrue();\n  assertStoredAndLoadedEqual(newLegacyInstance(),newLegacyInstance(key));\n  CachedContentIndex index=newLegacyInstance(key);\n  index.getOrAdd(\"key3\");\n  index.store();\n  assertStoredAndLoadedEqual(index,newLegacyInstance(key));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 228,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 356,
        "startColumnNumber" : 4,
        "endLineNumber" : 356,
        "endColumnNumber" : 56
      },
      "nodeContext" : "byte[] key2=Util.getUtf8Bytes(\"Foo12345Foo12345\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "byte[]"
  } ],
  "positionList" : [ {
    "charLength" : 37,
    "startLineNumber" : 356,
    "startColumnNumber" : 18,
    "endLineNumber" : 356,
    "endColumnNumber" : 55
  } ],
  "layoutRelationDataList" : [ ]
}