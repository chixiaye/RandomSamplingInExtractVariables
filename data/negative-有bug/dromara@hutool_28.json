{
  "id" : 28,
  "expression" : "new BCrypt()",
  "projectName" : "dromara@hutool",
  "commitID" : "c99b48a4c4a6121eaad38ca9706953d7ce7c3a77",
  "filePath" : "/hutool-crypto/src/main/java/cn/hutool/crypto/digest/BCrypt.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new BCrypt()",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 441,
      "startColumnNumber" : 11,
      "endLineNumber" : 441,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 441,
        "startColumnNumber" : 2,
        "endLineNumber" : 441,
        "endColumnNumber" : 23
      },
      "nodeContext" : "bcrypt=new BCrypt()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 441,
        "startColumnNumber" : 2,
        "endLineNumber" : 441,
        "endColumnNumber" : 24
      },
      "nodeContext" : "bcrypt=new BCrypt();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1418,
        "startLineNumber" : 412,
        "startColumnNumber" : 59,
        "endLineNumber" : 458,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  BCrypt bcrypt;\n  String real_salt;\n  byte[] saltb;\n  byte[] hashed;\n  char minor=(char)0;\n  int rounds, off;\n  StringBuilder rs=new StringBuilder();\n  if (salt.charAt(0) != '$' || salt.charAt(1) != '2')   throw new IllegalArgumentException(\"Invalid salt version\");\n  if (salt.charAt(2) == '$')   off=3;\n else {\n    minor=salt.charAt(2);\n    if (minor != 'a' || salt.charAt(3) != '$')     throw new IllegalArgumentException(\"Invalid salt revision\");\n    off=4;\n  }\n  if (salt.charAt(off + 2) > '$')   throw new IllegalArgumentException(\"Missing salt rounds\");\n  rounds=Integer.parseInt(salt.substring(off,off + 2));\n  real_salt=salt.substring(off + 3,off + 25);\n  byte[] passwordb=(password + (minor >= 'a' ? \"\\000\" : \"\")).getBytes(CharsetUtil.CHARSET_UTF_8);\n  saltb=decodeBase64(real_salt,BCRYPT_SALT_LEN);\n  bcrypt=new BCrypt();\n  hashed=bcrypt.crypt(passwordb,saltb,rounds,bf_crypt_ciphertext.clone());\n  rs.append(\"$2\");\n  if (minor >= 'a')   rs.append(minor);\n  rs.append(\"$\");\n  if (rounds < 10)   rs.append(\"0\");\n  if (rounds > 30) {\n    throw new IllegalArgumentException(\"rounds exceeds maximum (30)\");\n  }\n  rs.append(rounds);\n  rs.append(\"$\");\n  rs.append(encode_base64(saltb,saltb.length));\n  rs.append(encode_base64(hashed,bf_crypt_ciphertext.length * 4 - 1));\n  return rs.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 263,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1595,
        "startLineNumber" : 405,
        "startColumnNumber" : 1,
        "endLineNumber" : 458,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * 生成密文\n * @param password 需要加密的明文\n * @param salt     盐，使用{@link #gensalt()} 生成\n * @return 密文\n */\npublic static String hashpw(String password,String salt){\n  BCrypt bcrypt;\n  String real_salt;\n  byte[] saltb;\n  byte[] hashed;\n  char minor=(char)0;\n  int rounds, off;\n  StringBuilder rs=new StringBuilder();\n  if (salt.charAt(0) != '$' || salt.charAt(1) != '2')   throw new IllegalArgumentException(\"Invalid salt version\");\n  if (salt.charAt(2) == '$')   off=3;\n else {\n    minor=salt.charAt(2);\n    if (minor != 'a' || salt.charAt(3) != '$')     throw new IllegalArgumentException(\"Invalid salt revision\");\n    off=4;\n  }\n  if (salt.charAt(off + 2) > '$')   throw new IllegalArgumentException(\"Missing salt rounds\");\n  rounds=Integer.parseInt(salt.substring(off,off + 2));\n  real_salt=salt.substring(off + 3,off + 25);\n  byte[] passwordb=(password + (minor >= 'a' ? \"\\000\" : \"\")).getBytes(CharsetUtil.CHARSET_UTF_8);\n  saltb=decodeBase64(real_salt,BCRYPT_SALT_LEN);\n  bcrypt=new BCrypt();\n  hashed=bcrypt.crypt(passwordb,saltb,rounds,bf_crypt_ciphertext.clone());\n  rs.append(\"$2\");\n  if (minor >= 'a')   rs.append(minor);\n  rs.append(\"$\");\n  if (rounds < 10)   rs.append(\"0\");\n  if (rounds > 30) {\n    throw new IllegalArgumentException(\"rounds exceeds maximum (30)\");\n  }\n  rs.append(rounds);\n  rs.append(\"$\");\n  rs.append(encode_base64(saltb,saltb.length));\n  rs.append(encode_base64(hashed,bf_crypt_ciphertext.length * 4 - 1));\n  return rs.toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 278,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 441,
        "startColumnNumber" : 2,
        "endLineNumber" : 441,
        "endColumnNumber" : 24
      },
      "nodeContext" : "bcrypt=new BCrypt();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "cn.hutool.crypto.digest.BCrypt"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 441,
    "startColumnNumber" : 11,
    "endLineNumber" : 441,
    "endColumnNumber" : 23
  } ],
  "layoutRelationDataList" : [ ]
}