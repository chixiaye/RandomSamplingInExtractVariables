{
  "id" : 53,
  "expression" : "0xA2",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/android/guava-tests/test/com/google/common/base/Utf8Test.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "0xA2",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 214,
      "startColumnNumber" : 39,
      "endLineNumber" : 214,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 214,
        "startColumnNumber" : 4,
        "endLineNumber" : 214,
        "endColumnNumber" : 44
      },
      "nodeContext" : "assertWellFormed(0xF0,0xA4,0xAD,0xA2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 214,
        "startColumnNumber" : 4,
        "endLineNumber" : 214,
        "endColumnNumber" : 45
      },
      "nodeContext" : "assertWellFormed(0xF0,0xA4,0xAD,0xA2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 334,
        "startLineNumber" : 212,
        "startColumnNumber" : 47,
        "endLineNumber" : 221,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  assertWellFormed(0xF0,0xA4,0xAD,0xA2);\n  assertNotWellFormed(0xF0,0xA4,0xAD,0x7F);\n  assertNotWellFormed(0xF0,0xA4,0xAD,0xC0);\n  assertNotWellFormed(0xF0,0x8F,0xAD,0xA2);\n  assertNotWellFormed(0xF4,0x90,0xAD,0xA2);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 36,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 592,
        "startLineNumber" : 208,
        "startColumnNumber" : 2,
        "endLineNumber" : 221,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Tests that round tripping of a sample of four byte permutations work. All permutations are prohibitively expensive to test for automated runs. This method tests specific four-byte cases.\n */\npublic void testIsWellFormed_4BytesSamples(){\n  assertWellFormed(0xF0,0xA4,0xAD,0xA2);\n  assertNotWellFormed(0xF0,0xA4,0xAD,0x7F);\n  assertNotWellFormed(0xF0,0xA4,0xAD,0xC0);\n  assertNotWellFormed(0xF0,0x8F,0xAD,0xA2);\n  assertNotWellFormed(0xF4,0x90,0xAD,0xA2);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 41,
      "astHeight" : 5
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 214,
        "startColumnNumber" : 4,
        "endLineNumber" : 214,
        "endColumnNumber" : 45
      },
      "nodeContext" : "assertWellFormed(0xF0,0xA4,0xAD,0xA2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0xA2",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 219,
      "startColumnNumber" : 42,
      "endLineNumber" : 219,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 219,
        "startColumnNumber" : 4,
        "endLineNumber" : 219,
        "endColumnNumber" : 47
      },
      "nodeContext" : "assertNotWellFormed(0xF0,0x8F,0xAD,0xA2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 219,
        "startColumnNumber" : 4,
        "endLineNumber" : 219,
        "endColumnNumber" : 48
      },
      "nodeContext" : "assertNotWellFormed(0xF0,0x8F,0xAD,0xA2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 334,
        "startLineNumber" : 212,
        "startColumnNumber" : 47,
        "endLineNumber" : 221,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  assertWellFormed(0xF0,0xA4,0xAD,0xA2);\n  assertNotWellFormed(0xF0,0xA4,0xAD,0x7F);\n  assertNotWellFormed(0xF0,0xA4,0xAD,0xC0);\n  assertNotWellFormed(0xF0,0x8F,0xAD,0xA2);\n  assertNotWellFormed(0xF4,0x90,0xAD,0xA2);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 36,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 592,
        "startLineNumber" : 208,
        "startColumnNumber" : 2,
        "endLineNumber" : 221,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Tests that round tripping of a sample of four byte permutations work. All permutations are prohibitively expensive to test for automated runs. This method tests specific four-byte cases.\n */\npublic void testIsWellFormed_4BytesSamples(){\n  assertWellFormed(0xF0,0xA4,0xAD,0xA2);\n  assertNotWellFormed(0xF0,0xA4,0xAD,0x7F);\n  assertNotWellFormed(0xF0,0xA4,0xAD,0xC0);\n  assertNotWellFormed(0xF0,0x8F,0xAD,0xA2);\n  assertNotWellFormed(0xF4,0x90,0xAD,0xA2);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 41,
      "astHeight" : 5
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 219,
        "startColumnNumber" : 4,
        "endLineNumber" : 219,
        "endColumnNumber" : 48
      },
      "nodeContext" : "assertNotWellFormed(0xF0,0x8F,0xAD,0xA2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0xA2",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 220,
      "startColumnNumber" : 42,
      "endLineNumber" : 220,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 220,
        "startColumnNumber" : 4,
        "endLineNumber" : 220,
        "endColumnNumber" : 47
      },
      "nodeContext" : "assertNotWellFormed(0xF4,0x90,0xAD,0xA2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 220,
        "startColumnNumber" : 4,
        "endLineNumber" : 220,
        "endColumnNumber" : 48
      },
      "nodeContext" : "assertNotWellFormed(0xF4,0x90,0xAD,0xA2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 334,
        "startLineNumber" : 212,
        "startColumnNumber" : 47,
        "endLineNumber" : 221,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  assertWellFormed(0xF0,0xA4,0xAD,0xA2);\n  assertNotWellFormed(0xF0,0xA4,0xAD,0x7F);\n  assertNotWellFormed(0xF0,0xA4,0xAD,0xC0);\n  assertNotWellFormed(0xF0,0x8F,0xAD,0xA2);\n  assertNotWellFormed(0xF4,0x90,0xAD,0xA2);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 36,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 592,
        "startLineNumber" : 208,
        "startColumnNumber" : 2,
        "endLineNumber" : 221,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Tests that round tripping of a sample of four byte permutations work. All permutations are prohibitively expensive to test for automated runs. This method tests specific four-byte cases.\n */\npublic void testIsWellFormed_4BytesSamples(){\n  assertWellFormed(0xF0,0xA4,0xAD,0xA2);\n  assertNotWellFormed(0xF0,0xA4,0xAD,0x7F);\n  assertNotWellFormed(0xF0,0xA4,0xAD,0xC0);\n  assertNotWellFormed(0xF0,0x8F,0xAD,0xA2);\n  assertNotWellFormed(0xF4,0x90,0xAD,0xA2);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 41,
      "astHeight" : 5
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 220,
        "startColumnNumber" : 4,
        "endLineNumber" : 220,
        "endColumnNumber" : 48
      },
      "nodeContext" : "assertNotWellFormed(0xF4,0x90,0xAD,0xA2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 214,
    "startColumnNumber" : 39,
    "endLineNumber" : 214,
    "endColumnNumber" : 43
  }, {
    "charLength" : 4,
    "startLineNumber" : 219,
    "startColumnNumber" : 42,
    "endLineNumber" : 219,
    "endColumnNumber" : 46
  }, {
    "charLength" : 4,
    "startLineNumber" : 220,
    "startColumnNumber" : 42,
    "endLineNumber" : 220,
    "endColumnNumber" : 46
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  } ]
}