{
  "id" : 161,
  "expression" : "Collections.singletonMap(\"min\",\"2\")",
  "projectName" : "keycloak@keycloak",
  "commitID" : "aacae9b9acb0fbedc49d4f88c9fbd7aa11922dce",
  "filePath" : "/server-spi-private/src/test/java/org/keycloak/validate/ValidatorTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Collections.singletonMap(\"min\",\"2\")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 36,
      "startLineNumber" : 78,
      "startColumnNumber" : 68,
      "endLineNumber" : 78,
      "endColumnNumber" : 104
    },
    "astNodeNumber" : 5,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 78,
        "startColumnNumber" : 54,
        "endLineNumber" : 78,
        "endColumnNumber" : 105
      },
      "nodeContext" : "configFromMap(Collections.singletonMap(\"min\",\"2\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 106
      },
      "nodeContext" : "validator.validate(input,inputHint,context,configFromMap(Collections.singletonMap(\"min\",\"2\")))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 107
      },
      "nodeContext" : "validator.validate(input,inputHint,context,configFromMap(Collections.singletonMap(\"min\",\"2\")));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1428,
        "startLineNumber" : 70,
        "startColumnNumber" : 40,
        "endLineNumber" : 100,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Validator validator=LengthValidator.INSTANCE;\n  String input=\"a\";\n  String inputHint=\"username\";\n  ValidationContext context=new ValidationContext(session);\n  validator.validate(input,inputHint,context,configFromMap(Collections.singletonMap(\"min\",\"2\")));\n  ValidationResult result=context.toResult();\n  Assert.assertFalse(result.isValid());\n  Assert.assertEquals(1,result.getErrors().size());\n  ValidationError[] errors=result.getErrors().toArray(new ValidationError[0]);\n  ValidationError error=errors[0];\n  Assert.assertNotNull(error);\n  Assert.assertEquals(LengthValidator.ID,error.getValidatorId());\n  Assert.assertEquals(inputHint,error.getInputHint());\n  Assert.assertEquals(LengthValidator.MESSAGE_INVALID_LENGTH_TOO_SHORT,error.getMessage());\n  Assert.assertEquals(new Integer(2),error.getMessageParameters()[0]);\n  Assert.assertTrue(result.hasErrorsForValidatorId(LengthValidator.ID));\n  Assert.assertFalse(result.hasErrorsForValidatorId(\"unknown\"));\n  Assert.assertEquals(result.getErrors(),result.getErrorsForValidatorId(LengthValidator.ID));\n  Assert.assertEquals(result.getErrors(),result.getErrorsForInputHint(inputHint));\n  Assert.assertTrue(result.hasErrorsForInputHint(inputHint));\n  Assert.assertFalse(result.hasErrorsForInputHint(\"email\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 199,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1474,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 100,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void simpleValidationError(){\n  Validator validator=LengthValidator.INSTANCE;\n  String input=\"a\";\n  String inputHint=\"username\";\n  ValidationContext context=new ValidationContext(session);\n  validator.validate(input,inputHint,context,configFromMap(Collections.singletonMap(\"min\",\"2\")));\n  ValidationResult result=context.toResult();\n  Assert.assertFalse(result.isValid());\n  Assert.assertEquals(1,result.getErrors().size());\n  ValidationError[] errors=result.getErrors().toArray(new ValidationError[0]);\n  ValidationError error=errors[0];\n  Assert.assertNotNull(error);\n  Assert.assertEquals(LengthValidator.ID,error.getValidatorId());\n  Assert.assertEquals(inputHint,error.getInputHint());\n  Assert.assertEquals(LengthValidator.MESSAGE_INVALID_LENGTH_TOO_SHORT,error.getMessage());\n  Assert.assertEquals(new Integer(2),error.getMessageParameters()[0]);\n  Assert.assertTrue(result.hasErrorsForValidatorId(LengthValidator.ID));\n  Assert.assertFalse(result.hasErrorsForValidatorId(\"unknown\"));\n  Assert.assertEquals(result.getErrors(),result.getErrorsForValidatorId(LengthValidator.ID));\n  Assert.assertEquals(result.getErrors(),result.getErrorsForInputHint(inputHint));\n  Assert.assertTrue(result.hasErrorsForInputHint(inputHint));\n  Assert.assertFalse(result.hasErrorsForInputHint(\"email\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 205,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 107
      },
      "nodeContext" : "validator.validate(input,inputHint,context,configFromMap(Collections.singletonMap(\"min\",\"2\")));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "java.util.Map<java.lang.String,java.lang.Object>"
  } ],
  "positionList" : [ {
    "charLength" : 36,
    "startLineNumber" : 78,
    "startColumnNumber" : 68,
    "endLineNumber" : 78,
    "endColumnNumber" : 104
  } ],
  "layoutRelationDataList" : [ ]
}