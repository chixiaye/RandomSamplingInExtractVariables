{
  "id" : 9,
  "expression" : "tokenStream.getTokens()",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/runtime/Java/src/org/antlr/v4/runtime/tree/xpath/XPath.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "tokenStream.getTokens()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 109,
      "startColumnNumber" : 23,
      "endLineNumber" : 109,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 109,
        "startColumnNumber" : 14,
        "endLineNumber" : 109,
        "endColumnNumber" : 46
      },
      "nodeContext" : "tokens=tokenStream.getTokens()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 109,
        "startColumnNumber" : 2,
        "endLineNumber" : 109,
        "endColumnNumber" : 47
      },
      "nodeContext" : "List<Token> tokens=tokenStream.getTokens();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1876,
        "startLineNumber" : 85,
        "startColumnNumber" : 42,
        "endLineNumber" : 150,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  ANTLRInputStream in;\n  try {\n    in=new ANTLRInputStream(new StringReader(path));\n  }\n catch (  IOException ioe) {\n    throw new IllegalArgumentException(\"Could not read path: \" + path,ioe);\n  }\n  XPathLexer lexer=new XPathLexer(in){\n    @Override public void recover(    LexerNoViableAltException e){\n      throw e;\n    }\n  }\n;\n  lexer.removeErrorListeners();\n  lexer.addErrorListener(new XPathLexerErrorListener());\n  CommonTokenStream tokenStream=new CommonTokenStream(lexer);\n  try {\n    tokenStream.fill();\n  }\n catch (  LexerNoViableAltException e) {\n    int pos=lexer.getCharPositionInLine();\n    String msg=\"Invalid tokens or characters at index \" + pos + \" in path '\"+ path+ \"'\";\n    throw new IllegalArgumentException(msg,e);\n  }\n  List<Token> tokens=tokenStream.getTokens();\n  List<XPathElement> elements=new ArrayList<XPathElement>();\n  int n=tokens.size();\n  int i=0;\n  loop:   while (i < n) {\n    Token el=tokens.get(i);\n    Token next=null;\nswitch (el.getType()) {\ncase XPathLexer.ROOT:case XPathLexer.ANYWHERE:      boolean anywhere=el.getType() == XPathLexer.ANYWHERE;\n    i++;\n  next=tokens.get(i);\nboolean invert=next.getType() == XPathLexer.BANG;\nif (invert) {\ni++;\nnext=tokens.get(i);\n}\nXPathElement pathElement=getXPathElement(next,anywhere);\npathElement.invert=invert;\nelements.add(pathElement);\ni++;\nbreak;\ncase XPathLexer.TOKEN_REF:case XPathLexer.RULE_REF:case XPathLexer.WILDCARD:elements.add(getXPathElement(el,false));\ni++;\nbreak;\ncase Token.EOF:break loop;\ndefault:throw new IllegalArgumentException(\"Unknowth path element \" + el);\n}\n}\nreturn elements.toArray(new XPathElement[0]);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 299,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1917,
        "startLineNumber" : 85,
        "startColumnNumber" : 1,
        "endLineNumber" : 150,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public XPathElement[] split(String path){\n  ANTLRInputStream in;\n  try {\n    in=new ANTLRInputStream(new StringReader(path));\n  }\n catch (  IOException ioe) {\n    throw new IllegalArgumentException(\"Could not read path: \" + path,ioe);\n  }\n  XPathLexer lexer=new XPathLexer(in){\n    @Override public void recover(    LexerNoViableAltException e){\n      throw e;\n    }\n  }\n;\n  lexer.removeErrorListeners();\n  lexer.addErrorListener(new XPathLexerErrorListener());\n  CommonTokenStream tokenStream=new CommonTokenStream(lexer);\n  try {\n    tokenStream.fill();\n  }\n catch (  LexerNoViableAltException e) {\n    int pos=lexer.getCharPositionInLine();\n    String msg=\"Invalid tokens or characters at index \" + pos + \" in path '\"+ path+ \"'\";\n    throw new IllegalArgumentException(msg,e);\n  }\n  List<Token> tokens=tokenStream.getTokens();\n  List<XPathElement> elements=new ArrayList<XPathElement>();\n  int n=tokens.size();\n  int i=0;\n  loop:   while (i < n) {\n    Token el=tokens.get(i);\n    Token next=null;\nswitch (el.getType()) {\ncase XPathLexer.ROOT:case XPathLexer.ANYWHERE:      boolean anywhere=el.getType() == XPathLexer.ANYWHERE;\n    i++;\n  next=tokens.get(i);\nboolean invert=next.getType() == XPathLexer.BANG;\nif (invert) {\ni++;\nnext=tokens.get(i);\n}\nXPathElement pathElement=getXPathElement(next,anywhere);\npathElement.invert=invert;\nelements.add(pathElement);\ni++;\nbreak;\ncase XPathLexer.TOKEN_REF:case XPathLexer.RULE_REF:case XPathLexer.WILDCARD:elements.add(getXPathElement(el,false));\ni++;\nbreak;\ncase Token.EOF:break loop;\ndefault:throw new IllegalArgumentException(\"Unknowth path element \" + el);\n}\n}\nreturn elements.toArray(new XPathElement[0]);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 310,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 109,
        "startColumnNumber" : 2,
        "endLineNumber" : 109,
        "endColumnNumber" : 47
      },
      "nodeContext" : "List<Token> tokens=tokenStream.getTokens();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.util.List<org.antlr.v4.runtime.Token>"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 109,
    "startColumnNumber" : 23,
    "endLineNumber" : 109,
    "endColumnNumber" : 46
  } ],
  "layoutRelationDataList" : [ ]
}