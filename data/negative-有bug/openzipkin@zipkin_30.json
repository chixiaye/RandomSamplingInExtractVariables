{
  "id" : 30,
  "expression" : "groupedByTraceId.containsKey(traceId)",
  "projectName" : "openzipkin@zipkin",
  "commitID" : "f02a993656f506277ca83737ddf494ed45fde4b3",
  "filePath" : "/zipkin/src/main/java/zipkin2/storage/GroupByTraceId.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "groupedByTraceId.containsKey(traceId)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 37,
      "startLineNumber" : 49,
      "startColumnNumber" : 11,
      "endLineNumber" : 49,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 49,
        "startColumnNumber" : 10,
        "endLineNumber" : 49,
        "endColumnNumber" : 48
      },
      "nodeContext" : "!groupedByTraceId.containsKey(traceId)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 49,
        "startColumnNumber" : 6,
        "endLineNumber" : 51,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (!groupedByTraceId.containsKey(traceId)) {\n  groupedByTraceId.put(traceId,new ArrayList<Span>());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 274,
        "startLineNumber" : 46,
        "startColumnNumber" : 28,
        "endLineNumber" : 53,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String traceId=span.traceId();\n  if (!strictTraceId)   traceId=lowerTraceId(traceId);\n  if (!groupedByTraceId.containsKey(traceId)) {\n    groupedByTraceId.put(traceId,new ArrayList<Span>());\n  }\n  groupedByTraceId.get(traceId).add(span);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 44,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 298,
        "startLineNumber" : 46,
        "startColumnNumber" : 4,
        "endLineNumber" : 53,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Span span : input) {\n  String traceId=span.traceId();\n  if (!strictTraceId)   traceId=lowerTraceId(traceId);\n  if (!groupedByTraceId.containsKey(traceId)) {\n    groupedByTraceId.put(traceId,new ArrayList<Span>());\n  }\n  groupedByTraceId.get(traceId).add(span);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 50,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 600,
        "startLineNumber" : 42,
        "startColumnNumber" : 58,
        "endLineNumber" : 56,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (input.isEmpty())   return Collections.emptyList();\n  Map<String,List<Span>> groupedByTraceId=new LinkedHashMap<String,List<Span>>();\n  for (  Span span : input) {\n    String traceId=span.traceId();\n    if (!strictTraceId)     traceId=lowerTraceId(traceId);\n    if (!groupedByTraceId.containsKey(traceId)) {\n      groupedByTraceId.put(traceId,new ArrayList<Span>());\n    }\n    groupedByTraceId.get(traceId).add(span);\n  }\n  return new ArrayList<List<Span>>(groupedByTraceId.values());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 96,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 705,
        "startLineNumber" : 41,
        "startColumnNumber" : 2,
        "endLineNumber" : 56,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@SuppressWarnings(\"MixedMutabilityReturnType\") @Override public List<List<Span>> map(List<Span> input){\n  if (input.isEmpty())   return Collections.emptyList();\n  Map<String,List<Span>> groupedByTraceId=new LinkedHashMap<String,List<Span>>();\n  for (  Span span : input) {\n    String traceId=span.traceId();\n    if (!strictTraceId)     traceId=lowerTraceId(traceId);\n    if (!groupedByTraceId.containsKey(traceId)) {\n      groupedByTraceId.put(traceId,new ArrayList<Span>());\n    }\n    groupedByTraceId.get(traceId).add(span);\n  }\n  return new ArrayList<List<Span>>(groupedByTraceId.values());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 119,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 49,
        "startColumnNumber" : 10,
        "endLineNumber" : 49,
        "endColumnNumber" : 48
      },
      "nodeContext" : "!groupedByTraceId.containsKey(traceId)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 37,
    "startLineNumber" : 49,
    "startColumnNumber" : 11,
    "endLineNumber" : 49,
    "endColumnNumber" : 48
  } ],
  "layoutRelationDataList" : [ ]
}