{
  "id" : 173,
  "expression" : "zk",
  "projectName" : "apache@zookeeper",
  "commitID" : "c6639c9842973a7954c8baa412d6825cb833d51f",
  "filePath" : "/src/java/test/org/apache/zookeeper/test/WatcherTest.java",
  "occurrences" : 7,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "zk",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 101,
      "startColumnNumber" : 30,
      "endLineNumber" : 101,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 101,
        "startColumnNumber" : 30,
        "endLineNumber" : 102,
        "endColumnNumber" : 78
      },
      "nodeContext" : "zk.create(\"/tc-\",\"initialvalue\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 130,
        "startLineNumber" : 101,
        "startColumnNumber" : 23,
        "endLineNumber" : 102,
        "endColumnNumber" : 78
      },
      "nodeContext" : "name=zk.create(\"/tc-\",\"initialvalue\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 138,
        "startLineNumber" : 101,
        "startColumnNumber" : 16,
        "endLineNumber" : 102,
        "endColumnNumber" : 79
      },
      "nodeContext" : "String name=zk.create(\"/tc-\",\"initialvalue\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 487,
        "startLineNumber" : 100,
        "startColumnNumber" : 51,
        "endLineNumber" : 110,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  String name=zk.create(\"/tc-\",\"initialvalue\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL);\n  names[i]=name;\n  Stat stat=new Stat();\n  zk.getData(name,watcher,stat);\n  zk.setData(name,\"new\".getBytes(),stat.getVersion(),scb,null);\n  stat=zk.exists(name,watcher);\n  zk.delete(name,stat.getVersion(),vcb,null);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 71,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 526,
        "startLineNumber" : 100,
        "startColumnNumber" : 12,
        "endLineNumber" : 110,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < names.length; i++) {\n  String name=zk.create(\"/tc-\",\"initialvalue\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL);\n  names[i]=name;\n  Stat stat=new Stat();\n  zk.getData(name,watcher,stat);\n  zk.setData(name,\"new\".getBytes(),stat.getVersion(),scb,null);\n  stat=zk.exists(name,watcher);\n  zk.delete(name,stat.getVersion(),vcb,null);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 84,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1816,
        "startLineNumber" : 83,
        "startColumnNumber" : 12,
        "endLineNumber" : 123,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  MyWatcher watcher=new MyWatcher();\n  zk=createClient(watcher,hostPort);\n  StatCallback scb=new StatCallback(){\n    public void processResult(    int rc,    String path,    Object ctx,    Stat stat){\n    }\n  }\n;\n  VoidCallback vcb=new VoidCallback(){\n    public void processResult(    int rc,    String path,    Object ctx){\n    }\n  }\n;\n  String names[]=new String[10];\n  for (int i=0; i < names.length; i++) {\n    String name=zk.create(\"/tc-\",\"initialvalue\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL);\n    names[i]=name;\n    Stat stat=new Stat();\n    zk.getData(name,watcher,stat);\n    zk.setData(name,\"new\".getBytes(),stat.getVersion(),scb,null);\n    stat=zk.exists(name,watcher);\n    zk.delete(name,stat.getVersion(),vcb,null);\n  }\n  for (int i=0; i < names.length; i++) {\n    String name=names[i];\n    WatchedEvent event=watcher.events.poll(10,TimeUnit.SECONDS);\n    assertEquals(name,event.getPath());\n    assertEquals(Event.EventType.NodeDataChanged,event.getType());\n    assertEquals(Event.KeeperState.SyncConnected,event.getState());\n    event=watcher.events.poll(10,TimeUnit.SECONDS);\n    assertEquals(name,event.getPath());\n    assertEquals(Event.EventType.NodeDeleted,event.getType());\n    assertEquals(Event.KeeperState.SyncConnected,event.getState());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 272,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1912,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 127,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  MyWatcher watcher=new MyWatcher();\n  zk=createClient(watcher,hostPort);\n  StatCallback scb=new StatCallback(){\n    public void processResult(    int rc,    String path,    Object ctx,    Stat stat){\n    }\n  }\n;\n  VoidCallback vcb=new VoidCallback(){\n    public void processResult(    int rc,    String path,    Object ctx){\n    }\n  }\n;\n  String names[]=new String[10];\n  for (int i=0; i < names.length; i++) {\n    String name=zk.create(\"/tc-\",\"initialvalue\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL);\n    names[i]=name;\n    Stat stat=new Stat();\n    zk.getData(name,watcher,stat);\n    zk.setData(name,\"new\".getBytes(),stat.getVersion(),scb,null);\n    stat=zk.exists(name,watcher);\n    zk.delete(name,stat.getVersion(),vcb,null);\n  }\n  for (int i=0; i < names.length; i++) {\n    String name=names[i];\n    WatchedEvent event=watcher.events.poll(10,TimeUnit.SECONDS);\n    assertEquals(name,event.getPath());\n    assertEquals(Event.EventType.NodeDataChanged,event.getType());\n    assertEquals(Event.KeeperState.SyncConnected,event.getState());\n    event=watcher.events.poll(10,TimeUnit.SECONDS);\n    assertEquals(name,event.getPath());\n    assertEquals(Event.EventType.NodeDeleted,event.getType());\n    assertEquals(Event.KeeperState.SyncConnected,event.getState());\n  }\n}\n  finally {\n  if (zk != null) {\n    zk.close();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 283,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1957,
        "startLineNumber" : 81,
        "startColumnNumber" : 4,
        "endLineNumber" : 128,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ZooKeeper zk=null;\n  try {\n    MyWatcher watcher=new MyWatcher();\n    zk=createClient(watcher,hostPort);\n    StatCallback scb=new StatCallback(){\n      public void processResult(      int rc,      String path,      Object ctx,      Stat stat){\n      }\n    }\n;\n    VoidCallback vcb=new VoidCallback(){\n      public void processResult(      int rc,      String path,      Object ctx){\n      }\n    }\n;\n    String names[]=new String[10];\n    for (int i=0; i < names.length; i++) {\n      String name=zk.create(\"/tc-\",\"initialvalue\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL);\n      names[i]=name;\n      Stat stat=new Stat();\n      zk.getData(name,watcher,stat);\n      zk.setData(name,\"new\".getBytes(),stat.getVersion(),scb,null);\n      stat=zk.exists(name,watcher);\n      zk.delete(name,stat.getVersion(),vcb,null);\n    }\n    for (int i=0; i < names.length; i++) {\n      String name=names[i];\n      WatchedEvent event=watcher.events.poll(10,TimeUnit.SECONDS);\n      assertEquals(name,event.getPath());\n      assertEquals(Event.EventType.NodeDataChanged,event.getType());\n      assertEquals(Event.KeeperState.SyncConnected,event.getState());\n      event=watcher.events.poll(10,TimeUnit.SECONDS);\n      assertEquals(name,event.getPath());\n      assertEquals(Event.EventType.NodeDeleted,event.getType());\n      assertEquals(Event.KeeperState.SyncConnected,event.getState());\n    }\n  }\n  finally {\n    if (zk != null) {\n      zk.close();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 290,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2455,
        "startLineNumber" : 68,
        "startColumnNumber" : 4,
        "endLineNumber" : 128,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Verify that we get all of the events we expect to get. This particular case verifies that we see all of the data events on a particular node. There was a bug (ZOOKEEPER-137) that resulted in events being dropped in some cases (timing).\n * @throws IOException\n * @throws InterruptedException\n * @throws KeeperException\n */\n@Test public void testWatcherCorrectness() throws IOException, InterruptedException, KeeperException {\n  ZooKeeper zk=null;\n  try {\n    MyWatcher watcher=new MyWatcher();\n    zk=createClient(watcher,hostPort);\n    StatCallback scb=new StatCallback(){\n      public void processResult(      int rc,      String path,      Object ctx,      Stat stat){\n      }\n    }\n;\n    VoidCallback vcb=new VoidCallback(){\n      public void processResult(      int rc,      String path,      Object ctx){\n      }\n    }\n;\n    String names[]=new String[10];\n    for (int i=0; i < names.length; i++) {\n      String name=zk.create(\"/tc-\",\"initialvalue\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL);\n      names[i]=name;\n      Stat stat=new Stat();\n      zk.getData(name,watcher,stat);\n      zk.setData(name,\"new\".getBytes(),stat.getVersion(),scb,null);\n      stat=zk.exists(name,watcher);\n      zk.delete(name,stat.getVersion(),vcb,null);\n    }\n    for (int i=0; i < names.length; i++) {\n      String name=names[i];\n      WatchedEvent event=watcher.events.poll(10,TimeUnit.SECONDS);\n      assertEquals(name,event.getPath());\n      assertEquals(Event.EventType.NodeDataChanged,event.getType());\n      assertEquals(Event.KeeperState.SyncConnected,event.getState());\n      event=watcher.events.poll(10,TimeUnit.SECONDS);\n      assertEquals(name,event.getPath());\n      assertEquals(Event.EventType.NodeDeleted,event.getType());\n      assertEquals(Event.KeeperState.SyncConnected,event.getState());\n    }\n  }\n  finally {\n    if (zk != null) {\n      zk.close();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 303,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 101,
        "startColumnNumber" : 30,
        "endLineNumber" : 102,
        "endColumnNumber" : 78
      },
      "nodeContext" : "zk.create(\"/tc-\",\"initialvalue\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.zookeeper.ZooKeeper"
  }, {
    "nodeContext" : "zk",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 106,
      "startColumnNumber" : 16,
      "endLineNumber" : 106,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 106,
        "startColumnNumber" : 16,
        "endLineNumber" : 106,
        "endColumnNumber" : 47
      },
      "nodeContext" : "zk.getData(name,watcher,stat)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 106,
        "startColumnNumber" : 16,
        "endLineNumber" : 106,
        "endColumnNumber" : 48
      },
      "nodeContext" : "zk.getData(name,watcher,stat);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 487,
        "startLineNumber" : 100,
        "startColumnNumber" : 51,
        "endLineNumber" : 110,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  String name=zk.create(\"/tc-\",\"initialvalue\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL);\n  names[i]=name;\n  Stat stat=new Stat();\n  zk.getData(name,watcher,stat);\n  zk.setData(name,\"new\".getBytes(),stat.getVersion(),scb,null);\n  stat=zk.exists(name,watcher);\n  zk.delete(name,stat.getVersion(),vcb,null);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 71,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 526,
        "startLineNumber" : 100,
        "startColumnNumber" : 12,
        "endLineNumber" : 110,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < names.length; i++) {\n  String name=zk.create(\"/tc-\",\"initialvalue\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL);\n  names[i]=name;\n  Stat stat=new Stat();\n  zk.getData(name,watcher,stat);\n  zk.setData(name,\"new\".getBytes(),stat.getVersion(),scb,null);\n  stat=zk.exists(name,watcher);\n  zk.delete(name,stat.getVersion(),vcb,null);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 84,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1816,
        "startLineNumber" : 83,
        "startColumnNumber" : 12,
        "endLineNumber" : 123,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  MyWatcher watcher=new MyWatcher();\n  zk=createClient(watcher,hostPort);\n  StatCallback scb=new StatCallback(){\n    public void processResult(    int rc,    String path,    Object ctx,    Stat stat){\n    }\n  }\n;\n  VoidCallback vcb=new VoidCallback(){\n    public void processResult(    int rc,    String path,    Object ctx){\n    }\n  }\n;\n  String names[]=new String[10];\n  for (int i=0; i < names.length; i++) {\n    String name=zk.create(\"/tc-\",\"initialvalue\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL);\n    names[i]=name;\n    Stat stat=new Stat();\n    zk.getData(name,watcher,stat);\n    zk.setData(name,\"new\".getBytes(),stat.getVersion(),scb,null);\n    stat=zk.exists(name,watcher);\n    zk.delete(name,stat.getVersion(),vcb,null);\n  }\n  for (int i=0; i < names.length; i++) {\n    String name=names[i];\n    WatchedEvent event=watcher.events.poll(10,TimeUnit.SECONDS);\n    assertEquals(name,event.getPath());\n    assertEquals(Event.EventType.NodeDataChanged,event.getType());\n    assertEquals(Event.KeeperState.SyncConnected,event.getState());\n    event=watcher.events.poll(10,TimeUnit.SECONDS);\n    assertEquals(name,event.getPath());\n    assertEquals(Event.EventType.NodeDeleted,event.getType());\n    assertEquals(Event.KeeperState.SyncConnected,event.getState());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 272,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1912,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 127,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  MyWatcher watcher=new MyWatcher();\n  zk=createClient(watcher,hostPort);\n  StatCallback scb=new StatCallback(){\n    public void processResult(    int rc,    String path,    Object ctx,    Stat stat){\n    }\n  }\n;\n  VoidCallback vcb=new VoidCallback(){\n    public void processResult(    int rc,    String path,    Object ctx){\n    }\n  }\n;\n  String names[]=new String[10];\n  for (int i=0; i < names.length; i++) {\n    String name=zk.create(\"/tc-\",\"initialvalue\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL);\n    names[i]=name;\n    Stat stat=new Stat();\n    zk.getData(name,watcher,stat);\n    zk.setData(name,\"new\".getBytes(),stat.getVersion(),scb,null);\n    stat=zk.exists(name,watcher);\n    zk.delete(name,stat.getVersion(),vcb,null);\n  }\n  for (int i=0; i < names.length; i++) {\n    String name=names[i];\n    WatchedEvent event=watcher.events.poll(10,TimeUnit.SECONDS);\n    assertEquals(name,event.getPath());\n    assertEquals(Event.EventType.NodeDataChanged,event.getType());\n    assertEquals(Event.KeeperState.SyncConnected,event.getState());\n    event=watcher.events.poll(10,TimeUnit.SECONDS);\n    assertEquals(name,event.getPath());\n    assertEquals(Event.EventType.NodeDeleted,event.getType());\n    assertEquals(Event.KeeperState.SyncConnected,event.getState());\n  }\n}\n  finally {\n  if (zk != null) {\n    zk.close();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 283,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1957,
        "startLineNumber" : 81,
        "startColumnNumber" : 4,
        "endLineNumber" : 128,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ZooKeeper zk=null;\n  try {\n    MyWatcher watcher=new MyWatcher();\n    zk=createClient(watcher,hostPort);\n    StatCallback scb=new StatCallback(){\n      public void processResult(      int rc,      String path,      Object ctx,      Stat stat){\n      }\n    }\n;\n    VoidCallback vcb=new VoidCallback(){\n      public void processResult(      int rc,      String path,      Object ctx){\n      }\n    }\n;\n    String names[]=new String[10];\n    for (int i=0; i < names.length; i++) {\n      String name=zk.create(\"/tc-\",\"initialvalue\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL);\n      names[i]=name;\n      Stat stat=new Stat();\n      zk.getData(name,watcher,stat);\n      zk.setData(name,\"new\".getBytes(),stat.getVersion(),scb,null);\n      stat=zk.exists(name,watcher);\n      zk.delete(name,stat.getVersion(),vcb,null);\n    }\n    for (int i=0; i < names.length; i++) {\n      String name=names[i];\n      WatchedEvent event=watcher.events.poll(10,TimeUnit.SECONDS);\n      assertEquals(name,event.getPath());\n      assertEquals(Event.EventType.NodeDataChanged,event.getType());\n      assertEquals(Event.KeeperState.SyncConnected,event.getState());\n      event=watcher.events.poll(10,TimeUnit.SECONDS);\n      assertEquals(name,event.getPath());\n      assertEquals(Event.EventType.NodeDeleted,event.getType());\n      assertEquals(Event.KeeperState.SyncConnected,event.getState());\n    }\n  }\n  finally {\n    if (zk != null) {\n      zk.close();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 290,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2455,
        "startLineNumber" : 68,
        "startColumnNumber" : 4,
        "endLineNumber" : 128,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Verify that we get all of the events we expect to get. This particular case verifies that we see all of the data events on a particular node. There was a bug (ZOOKEEPER-137) that resulted in events being dropped in some cases (timing).\n * @throws IOException\n * @throws InterruptedException\n * @throws KeeperException\n */\n@Test public void testWatcherCorrectness() throws IOException, InterruptedException, KeeperException {\n  ZooKeeper zk=null;\n  try {\n    MyWatcher watcher=new MyWatcher();\n    zk=createClient(watcher,hostPort);\n    StatCallback scb=new StatCallback(){\n      public void processResult(      int rc,      String path,      Object ctx,      Stat stat){\n      }\n    }\n;\n    VoidCallback vcb=new VoidCallback(){\n      public void processResult(      int rc,      String path,      Object ctx){\n      }\n    }\n;\n    String names[]=new String[10];\n    for (int i=0; i < names.length; i++) {\n      String name=zk.create(\"/tc-\",\"initialvalue\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL);\n      names[i]=name;\n      Stat stat=new Stat();\n      zk.getData(name,watcher,stat);\n      zk.setData(name,\"new\".getBytes(),stat.getVersion(),scb,null);\n      stat=zk.exists(name,watcher);\n      zk.delete(name,stat.getVersion(),vcb,null);\n    }\n    for (int i=0; i < names.length; i++) {\n      String name=names[i];\n      WatchedEvent event=watcher.events.poll(10,TimeUnit.SECONDS);\n      assertEquals(name,event.getPath());\n      assertEquals(Event.EventType.NodeDataChanged,event.getType());\n      assertEquals(Event.KeeperState.SyncConnected,event.getState());\n      event=watcher.events.poll(10,TimeUnit.SECONDS);\n      assertEquals(name,event.getPath());\n      assertEquals(Event.EventType.NodeDeleted,event.getType());\n      assertEquals(Event.KeeperState.SyncConnected,event.getState());\n    }\n  }\n  finally {\n    if (zk != null) {\n      zk.close();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 303,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 106,
        "startColumnNumber" : 16,
        "endLineNumber" : 106,
        "endColumnNumber" : 48
      },
      "nodeContext" : "zk.getData(name,watcher,stat);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.zookeeper.ZooKeeper"
  }, {
    "nodeContext" : "zk",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 107,
      "startColumnNumber" : 16,
      "endLineNumber" : 107,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 107,
        "startColumnNumber" : 16,
        "endLineNumber" : 107,
        "endColumnNumber" : 80
      },
      "nodeContext" : "zk.setData(name,\"new\".getBytes(),stat.getVersion(),scb,null)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 107,
        "startColumnNumber" : 16,
        "endLineNumber" : 107,
        "endColumnNumber" : 81
      },
      "nodeContext" : "zk.setData(name,\"new\".getBytes(),stat.getVersion(),scb,null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 487,
        "startLineNumber" : 100,
        "startColumnNumber" : 51,
        "endLineNumber" : 110,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  String name=zk.create(\"/tc-\",\"initialvalue\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL);\n  names[i]=name;\n  Stat stat=new Stat();\n  zk.getData(name,watcher,stat);\n  zk.setData(name,\"new\".getBytes(),stat.getVersion(),scb,null);\n  stat=zk.exists(name,watcher);\n  zk.delete(name,stat.getVersion(),vcb,null);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 71,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 526,
        "startLineNumber" : 100,
        "startColumnNumber" : 12,
        "endLineNumber" : 110,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < names.length; i++) {\n  String name=zk.create(\"/tc-\",\"initialvalue\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL);\n  names[i]=name;\n  Stat stat=new Stat();\n  zk.getData(name,watcher,stat);\n  zk.setData(name,\"new\".getBytes(),stat.getVersion(),scb,null);\n  stat=zk.exists(name,watcher);\n  zk.delete(name,stat.getVersion(),vcb,null);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 84,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1816,
        "startLineNumber" : 83,
        "startColumnNumber" : 12,
        "endLineNumber" : 123,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  MyWatcher watcher=new MyWatcher();\n  zk=createClient(watcher,hostPort);\n  StatCallback scb=new StatCallback(){\n    public void processResult(    int rc,    String path,    Object ctx,    Stat stat){\n    }\n  }\n;\n  VoidCallback vcb=new VoidCallback(){\n    public void processResult(    int rc,    String path,    Object ctx){\n    }\n  }\n;\n  String names[]=new String[10];\n  for (int i=0; i < names.length; i++) {\n    String name=zk.create(\"/tc-\",\"initialvalue\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL);\n    names[i]=name;\n    Stat stat=new Stat();\n    zk.getData(name,watcher,stat);\n    zk.setData(name,\"new\".getBytes(),stat.getVersion(),scb,null);\n    stat=zk.exists(name,watcher);\n    zk.delete(name,stat.getVersion(),vcb,null);\n  }\n  for (int i=0; i < names.length; i++) {\n    String name=names[i];\n    WatchedEvent event=watcher.events.poll(10,TimeUnit.SECONDS);\n    assertEquals(name,event.getPath());\n    assertEquals(Event.EventType.NodeDataChanged,event.getType());\n    assertEquals(Event.KeeperState.SyncConnected,event.getState());\n    event=watcher.events.poll(10,TimeUnit.SECONDS);\n    assertEquals(name,event.getPath());\n    assertEquals(Event.EventType.NodeDeleted,event.getType());\n    assertEquals(Event.KeeperState.SyncConnected,event.getState());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 272,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1912,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 127,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  MyWatcher watcher=new MyWatcher();\n  zk=createClient(watcher,hostPort);\n  StatCallback scb=new StatCallback(){\n    public void processResult(    int rc,    String path,    Object ctx,    Stat stat){\n    }\n  }\n;\n  VoidCallback vcb=new VoidCallback(){\n    public void processResult(    int rc,    String path,    Object ctx){\n    }\n  }\n;\n  String names[]=new String[10];\n  for (int i=0; i < names.length; i++) {\n    String name=zk.create(\"/tc-\",\"initialvalue\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL);\n    names[i]=name;\n    Stat stat=new Stat();\n    zk.getData(name,watcher,stat);\n    zk.setData(name,\"new\".getBytes(),stat.getVersion(),scb,null);\n    stat=zk.exists(name,watcher);\n    zk.delete(name,stat.getVersion(),vcb,null);\n  }\n  for (int i=0; i < names.length; i++) {\n    String name=names[i];\n    WatchedEvent event=watcher.events.poll(10,TimeUnit.SECONDS);\n    assertEquals(name,event.getPath());\n    assertEquals(Event.EventType.NodeDataChanged,event.getType());\n    assertEquals(Event.KeeperState.SyncConnected,event.getState());\n    event=watcher.events.poll(10,TimeUnit.SECONDS);\n    assertEquals(name,event.getPath());\n    assertEquals(Event.EventType.NodeDeleted,event.getType());\n    assertEquals(Event.KeeperState.SyncConnected,event.getState());\n  }\n}\n  finally {\n  if (zk != null) {\n    zk.close();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 283,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1957,
        "startLineNumber" : 81,
        "startColumnNumber" : 4,
        "endLineNumber" : 128,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ZooKeeper zk=null;\n  try {\n    MyWatcher watcher=new MyWatcher();\n    zk=createClient(watcher,hostPort);\n    StatCallback scb=new StatCallback(){\n      public void processResult(      int rc,      String path,      Object ctx,      Stat stat){\n      }\n    }\n;\n    VoidCallback vcb=new VoidCallback(){\n      public void processResult(      int rc,      String path,      Object ctx){\n      }\n    }\n;\n    String names[]=new String[10];\n    for (int i=0; i < names.length; i++) {\n      String name=zk.create(\"/tc-\",\"initialvalue\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL);\n      names[i]=name;\n      Stat stat=new Stat();\n      zk.getData(name,watcher,stat);\n      zk.setData(name,\"new\".getBytes(),stat.getVersion(),scb,null);\n      stat=zk.exists(name,watcher);\n      zk.delete(name,stat.getVersion(),vcb,null);\n    }\n    for (int i=0; i < names.length; i++) {\n      String name=names[i];\n      WatchedEvent event=watcher.events.poll(10,TimeUnit.SECONDS);\n      assertEquals(name,event.getPath());\n      assertEquals(Event.EventType.NodeDataChanged,event.getType());\n      assertEquals(Event.KeeperState.SyncConnected,event.getState());\n      event=watcher.events.poll(10,TimeUnit.SECONDS);\n      assertEquals(name,event.getPath());\n      assertEquals(Event.EventType.NodeDeleted,event.getType());\n      assertEquals(Event.KeeperState.SyncConnected,event.getState());\n    }\n  }\n  finally {\n    if (zk != null) {\n      zk.close();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 290,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2455,
        "startLineNumber" : 68,
        "startColumnNumber" : 4,
        "endLineNumber" : 128,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Verify that we get all of the events we expect to get. This particular case verifies that we see all of the data events on a particular node. There was a bug (ZOOKEEPER-137) that resulted in events being dropped in some cases (timing).\n * @throws IOException\n * @throws InterruptedException\n * @throws KeeperException\n */\n@Test public void testWatcherCorrectness() throws IOException, InterruptedException, KeeperException {\n  ZooKeeper zk=null;\n  try {\n    MyWatcher watcher=new MyWatcher();\n    zk=createClient(watcher,hostPort);\n    StatCallback scb=new StatCallback(){\n      public void processResult(      int rc,      String path,      Object ctx,      Stat stat){\n      }\n    }\n;\n    VoidCallback vcb=new VoidCallback(){\n      public void processResult(      int rc,      String path,      Object ctx){\n      }\n    }\n;\n    String names[]=new String[10];\n    for (int i=0; i < names.length; i++) {\n      String name=zk.create(\"/tc-\",\"initialvalue\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL);\n      names[i]=name;\n      Stat stat=new Stat();\n      zk.getData(name,watcher,stat);\n      zk.setData(name,\"new\".getBytes(),stat.getVersion(),scb,null);\n      stat=zk.exists(name,watcher);\n      zk.delete(name,stat.getVersion(),vcb,null);\n    }\n    for (int i=0; i < names.length; i++) {\n      String name=names[i];\n      WatchedEvent event=watcher.events.poll(10,TimeUnit.SECONDS);\n      assertEquals(name,event.getPath());\n      assertEquals(Event.EventType.NodeDataChanged,event.getType());\n      assertEquals(Event.KeeperState.SyncConnected,event.getState());\n      event=watcher.events.poll(10,TimeUnit.SECONDS);\n      assertEquals(name,event.getPath());\n      assertEquals(Event.EventType.NodeDeleted,event.getType());\n      assertEquals(Event.KeeperState.SyncConnected,event.getState());\n    }\n  }\n  finally {\n    if (zk != null) {\n      zk.close();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 303,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 107,
        "startColumnNumber" : 16,
        "endLineNumber" : 107,
        "endColumnNumber" : 81
      },
      "nodeContext" : "zk.setData(name,\"new\".getBytes(),stat.getVersion(),scb,null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.zookeeper.ZooKeeper"
  }, {
    "nodeContext" : "zk",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 108,
      "startColumnNumber" : 23,
      "endLineNumber" : 108,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 108,
        "startColumnNumber" : 23,
        "endLineNumber" : 108,
        "endColumnNumber" : 47
      },
      "nodeContext" : "zk.exists(name,watcher)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 108,
        "startColumnNumber" : 16,
        "endLineNumber" : 108,
        "endColumnNumber" : 47
      },
      "nodeContext" : "stat=zk.exists(name,watcher)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 108,
        "startColumnNumber" : 16,
        "endLineNumber" : 108,
        "endColumnNumber" : 48
      },
      "nodeContext" : "stat=zk.exists(name,watcher);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 487,
        "startLineNumber" : 100,
        "startColumnNumber" : 51,
        "endLineNumber" : 110,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  String name=zk.create(\"/tc-\",\"initialvalue\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL);\n  names[i]=name;\n  Stat stat=new Stat();\n  zk.getData(name,watcher,stat);\n  zk.setData(name,\"new\".getBytes(),stat.getVersion(),scb,null);\n  stat=zk.exists(name,watcher);\n  zk.delete(name,stat.getVersion(),vcb,null);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 71,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 526,
        "startLineNumber" : 100,
        "startColumnNumber" : 12,
        "endLineNumber" : 110,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < names.length; i++) {\n  String name=zk.create(\"/tc-\",\"initialvalue\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL);\n  names[i]=name;\n  Stat stat=new Stat();\n  zk.getData(name,watcher,stat);\n  zk.setData(name,\"new\".getBytes(),stat.getVersion(),scb,null);\n  stat=zk.exists(name,watcher);\n  zk.delete(name,stat.getVersion(),vcb,null);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 84,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1816,
        "startLineNumber" : 83,
        "startColumnNumber" : 12,
        "endLineNumber" : 123,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  MyWatcher watcher=new MyWatcher();\n  zk=createClient(watcher,hostPort);\n  StatCallback scb=new StatCallback(){\n    public void processResult(    int rc,    String path,    Object ctx,    Stat stat){\n    }\n  }\n;\n  VoidCallback vcb=new VoidCallback(){\n    public void processResult(    int rc,    String path,    Object ctx){\n    }\n  }\n;\n  String names[]=new String[10];\n  for (int i=0; i < names.length; i++) {\n    String name=zk.create(\"/tc-\",\"initialvalue\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL);\n    names[i]=name;\n    Stat stat=new Stat();\n    zk.getData(name,watcher,stat);\n    zk.setData(name,\"new\".getBytes(),stat.getVersion(),scb,null);\n    stat=zk.exists(name,watcher);\n    zk.delete(name,stat.getVersion(),vcb,null);\n  }\n  for (int i=0; i < names.length; i++) {\n    String name=names[i];\n    WatchedEvent event=watcher.events.poll(10,TimeUnit.SECONDS);\n    assertEquals(name,event.getPath());\n    assertEquals(Event.EventType.NodeDataChanged,event.getType());\n    assertEquals(Event.KeeperState.SyncConnected,event.getState());\n    event=watcher.events.poll(10,TimeUnit.SECONDS);\n    assertEquals(name,event.getPath());\n    assertEquals(Event.EventType.NodeDeleted,event.getType());\n    assertEquals(Event.KeeperState.SyncConnected,event.getState());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 272,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1912,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 127,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  MyWatcher watcher=new MyWatcher();\n  zk=createClient(watcher,hostPort);\n  StatCallback scb=new StatCallback(){\n    public void processResult(    int rc,    String path,    Object ctx,    Stat stat){\n    }\n  }\n;\n  VoidCallback vcb=new VoidCallback(){\n    public void processResult(    int rc,    String path,    Object ctx){\n    }\n  }\n;\n  String names[]=new String[10];\n  for (int i=0; i < names.length; i++) {\n    String name=zk.create(\"/tc-\",\"initialvalue\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL);\n    names[i]=name;\n    Stat stat=new Stat();\n    zk.getData(name,watcher,stat);\n    zk.setData(name,\"new\".getBytes(),stat.getVersion(),scb,null);\n    stat=zk.exists(name,watcher);\n    zk.delete(name,stat.getVersion(),vcb,null);\n  }\n  for (int i=0; i < names.length; i++) {\n    String name=names[i];\n    WatchedEvent event=watcher.events.poll(10,TimeUnit.SECONDS);\n    assertEquals(name,event.getPath());\n    assertEquals(Event.EventType.NodeDataChanged,event.getType());\n    assertEquals(Event.KeeperState.SyncConnected,event.getState());\n    event=watcher.events.poll(10,TimeUnit.SECONDS);\n    assertEquals(name,event.getPath());\n    assertEquals(Event.EventType.NodeDeleted,event.getType());\n    assertEquals(Event.KeeperState.SyncConnected,event.getState());\n  }\n}\n  finally {\n  if (zk != null) {\n    zk.close();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 283,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1957,
        "startLineNumber" : 81,
        "startColumnNumber" : 4,
        "endLineNumber" : 128,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ZooKeeper zk=null;\n  try {\n    MyWatcher watcher=new MyWatcher();\n    zk=createClient(watcher,hostPort);\n    StatCallback scb=new StatCallback(){\n      public void processResult(      int rc,      String path,      Object ctx,      Stat stat){\n      }\n    }\n;\n    VoidCallback vcb=new VoidCallback(){\n      public void processResult(      int rc,      String path,      Object ctx){\n      }\n    }\n;\n    String names[]=new String[10];\n    for (int i=0; i < names.length; i++) {\n      String name=zk.create(\"/tc-\",\"initialvalue\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL);\n      names[i]=name;\n      Stat stat=new Stat();\n      zk.getData(name,watcher,stat);\n      zk.setData(name,\"new\".getBytes(),stat.getVersion(),scb,null);\n      stat=zk.exists(name,watcher);\n      zk.delete(name,stat.getVersion(),vcb,null);\n    }\n    for (int i=0; i < names.length; i++) {\n      String name=names[i];\n      WatchedEvent event=watcher.events.poll(10,TimeUnit.SECONDS);\n      assertEquals(name,event.getPath());\n      assertEquals(Event.EventType.NodeDataChanged,event.getType());\n      assertEquals(Event.KeeperState.SyncConnected,event.getState());\n      event=watcher.events.poll(10,TimeUnit.SECONDS);\n      assertEquals(name,event.getPath());\n      assertEquals(Event.EventType.NodeDeleted,event.getType());\n      assertEquals(Event.KeeperState.SyncConnected,event.getState());\n    }\n  }\n  finally {\n    if (zk != null) {\n      zk.close();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 290,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2455,
        "startLineNumber" : 68,
        "startColumnNumber" : 4,
        "endLineNumber" : 128,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Verify that we get all of the events we expect to get. This particular case verifies that we see all of the data events on a particular node. There was a bug (ZOOKEEPER-137) that resulted in events being dropped in some cases (timing).\n * @throws IOException\n * @throws InterruptedException\n * @throws KeeperException\n */\n@Test public void testWatcherCorrectness() throws IOException, InterruptedException, KeeperException {\n  ZooKeeper zk=null;\n  try {\n    MyWatcher watcher=new MyWatcher();\n    zk=createClient(watcher,hostPort);\n    StatCallback scb=new StatCallback(){\n      public void processResult(      int rc,      String path,      Object ctx,      Stat stat){\n      }\n    }\n;\n    VoidCallback vcb=new VoidCallback(){\n      public void processResult(      int rc,      String path,      Object ctx){\n      }\n    }\n;\n    String names[]=new String[10];\n    for (int i=0; i < names.length; i++) {\n      String name=zk.create(\"/tc-\",\"initialvalue\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL);\n      names[i]=name;\n      Stat stat=new Stat();\n      zk.getData(name,watcher,stat);\n      zk.setData(name,\"new\".getBytes(),stat.getVersion(),scb,null);\n      stat=zk.exists(name,watcher);\n      zk.delete(name,stat.getVersion(),vcb,null);\n    }\n    for (int i=0; i < names.length; i++) {\n      String name=names[i];\n      WatchedEvent event=watcher.events.poll(10,TimeUnit.SECONDS);\n      assertEquals(name,event.getPath());\n      assertEquals(Event.EventType.NodeDataChanged,event.getType());\n      assertEquals(Event.KeeperState.SyncConnected,event.getState());\n      event=watcher.events.poll(10,TimeUnit.SECONDS);\n      assertEquals(name,event.getPath());\n      assertEquals(Event.EventType.NodeDeleted,event.getType());\n      assertEquals(Event.KeeperState.SyncConnected,event.getState());\n    }\n  }\n  finally {\n    if (zk != null) {\n      zk.close();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 303,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 108,
        "startColumnNumber" : 16,
        "endLineNumber" : 108,
        "endColumnNumber" : 48
      },
      "nodeContext" : "stat=zk.exists(name,watcher);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.zookeeper.ZooKeeper"
  }, {
    "nodeContext" : "zk",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 109,
      "startColumnNumber" : 16,
      "endLineNumber" : 109,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 109,
        "startColumnNumber" : 16,
        "endLineNumber" : 109,
        "endColumnNumber" : 61
      },
      "nodeContext" : "zk.delete(name,stat.getVersion(),vcb,null)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 109,
        "startColumnNumber" : 16,
        "endLineNumber" : 109,
        "endColumnNumber" : 62
      },
      "nodeContext" : "zk.delete(name,stat.getVersion(),vcb,null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 487,
        "startLineNumber" : 100,
        "startColumnNumber" : 51,
        "endLineNumber" : 110,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  String name=zk.create(\"/tc-\",\"initialvalue\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL);\n  names[i]=name;\n  Stat stat=new Stat();\n  zk.getData(name,watcher,stat);\n  zk.setData(name,\"new\".getBytes(),stat.getVersion(),scb,null);\n  stat=zk.exists(name,watcher);\n  zk.delete(name,stat.getVersion(),vcb,null);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 71,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 526,
        "startLineNumber" : 100,
        "startColumnNumber" : 12,
        "endLineNumber" : 110,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < names.length; i++) {\n  String name=zk.create(\"/tc-\",\"initialvalue\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL);\n  names[i]=name;\n  Stat stat=new Stat();\n  zk.getData(name,watcher,stat);\n  zk.setData(name,\"new\".getBytes(),stat.getVersion(),scb,null);\n  stat=zk.exists(name,watcher);\n  zk.delete(name,stat.getVersion(),vcb,null);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 84,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1816,
        "startLineNumber" : 83,
        "startColumnNumber" : 12,
        "endLineNumber" : 123,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  MyWatcher watcher=new MyWatcher();\n  zk=createClient(watcher,hostPort);\n  StatCallback scb=new StatCallback(){\n    public void processResult(    int rc,    String path,    Object ctx,    Stat stat){\n    }\n  }\n;\n  VoidCallback vcb=new VoidCallback(){\n    public void processResult(    int rc,    String path,    Object ctx){\n    }\n  }\n;\n  String names[]=new String[10];\n  for (int i=0; i < names.length; i++) {\n    String name=zk.create(\"/tc-\",\"initialvalue\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL);\n    names[i]=name;\n    Stat stat=new Stat();\n    zk.getData(name,watcher,stat);\n    zk.setData(name,\"new\".getBytes(),stat.getVersion(),scb,null);\n    stat=zk.exists(name,watcher);\n    zk.delete(name,stat.getVersion(),vcb,null);\n  }\n  for (int i=0; i < names.length; i++) {\n    String name=names[i];\n    WatchedEvent event=watcher.events.poll(10,TimeUnit.SECONDS);\n    assertEquals(name,event.getPath());\n    assertEquals(Event.EventType.NodeDataChanged,event.getType());\n    assertEquals(Event.KeeperState.SyncConnected,event.getState());\n    event=watcher.events.poll(10,TimeUnit.SECONDS);\n    assertEquals(name,event.getPath());\n    assertEquals(Event.EventType.NodeDeleted,event.getType());\n    assertEquals(Event.KeeperState.SyncConnected,event.getState());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 272,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1912,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 127,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  MyWatcher watcher=new MyWatcher();\n  zk=createClient(watcher,hostPort);\n  StatCallback scb=new StatCallback(){\n    public void processResult(    int rc,    String path,    Object ctx,    Stat stat){\n    }\n  }\n;\n  VoidCallback vcb=new VoidCallback(){\n    public void processResult(    int rc,    String path,    Object ctx){\n    }\n  }\n;\n  String names[]=new String[10];\n  for (int i=0; i < names.length; i++) {\n    String name=zk.create(\"/tc-\",\"initialvalue\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL);\n    names[i]=name;\n    Stat stat=new Stat();\n    zk.getData(name,watcher,stat);\n    zk.setData(name,\"new\".getBytes(),stat.getVersion(),scb,null);\n    stat=zk.exists(name,watcher);\n    zk.delete(name,stat.getVersion(),vcb,null);\n  }\n  for (int i=0; i < names.length; i++) {\n    String name=names[i];\n    WatchedEvent event=watcher.events.poll(10,TimeUnit.SECONDS);\n    assertEquals(name,event.getPath());\n    assertEquals(Event.EventType.NodeDataChanged,event.getType());\n    assertEquals(Event.KeeperState.SyncConnected,event.getState());\n    event=watcher.events.poll(10,TimeUnit.SECONDS);\n    assertEquals(name,event.getPath());\n    assertEquals(Event.EventType.NodeDeleted,event.getType());\n    assertEquals(Event.KeeperState.SyncConnected,event.getState());\n  }\n}\n  finally {\n  if (zk != null) {\n    zk.close();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 283,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1957,
        "startLineNumber" : 81,
        "startColumnNumber" : 4,
        "endLineNumber" : 128,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ZooKeeper zk=null;\n  try {\n    MyWatcher watcher=new MyWatcher();\n    zk=createClient(watcher,hostPort);\n    StatCallback scb=new StatCallback(){\n      public void processResult(      int rc,      String path,      Object ctx,      Stat stat){\n      }\n    }\n;\n    VoidCallback vcb=new VoidCallback(){\n      public void processResult(      int rc,      String path,      Object ctx){\n      }\n    }\n;\n    String names[]=new String[10];\n    for (int i=0; i < names.length; i++) {\n      String name=zk.create(\"/tc-\",\"initialvalue\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL);\n      names[i]=name;\n      Stat stat=new Stat();\n      zk.getData(name,watcher,stat);\n      zk.setData(name,\"new\".getBytes(),stat.getVersion(),scb,null);\n      stat=zk.exists(name,watcher);\n      zk.delete(name,stat.getVersion(),vcb,null);\n    }\n    for (int i=0; i < names.length; i++) {\n      String name=names[i];\n      WatchedEvent event=watcher.events.poll(10,TimeUnit.SECONDS);\n      assertEquals(name,event.getPath());\n      assertEquals(Event.EventType.NodeDataChanged,event.getType());\n      assertEquals(Event.KeeperState.SyncConnected,event.getState());\n      event=watcher.events.poll(10,TimeUnit.SECONDS);\n      assertEquals(name,event.getPath());\n      assertEquals(Event.EventType.NodeDeleted,event.getType());\n      assertEquals(Event.KeeperState.SyncConnected,event.getState());\n    }\n  }\n  finally {\n    if (zk != null) {\n      zk.close();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 290,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2455,
        "startLineNumber" : 68,
        "startColumnNumber" : 4,
        "endLineNumber" : 128,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Verify that we get all of the events we expect to get. This particular case verifies that we see all of the data events on a particular node. There was a bug (ZOOKEEPER-137) that resulted in events being dropped in some cases (timing).\n * @throws IOException\n * @throws InterruptedException\n * @throws KeeperException\n */\n@Test public void testWatcherCorrectness() throws IOException, InterruptedException, KeeperException {\n  ZooKeeper zk=null;\n  try {\n    MyWatcher watcher=new MyWatcher();\n    zk=createClient(watcher,hostPort);\n    StatCallback scb=new StatCallback(){\n      public void processResult(      int rc,      String path,      Object ctx,      Stat stat){\n      }\n    }\n;\n    VoidCallback vcb=new VoidCallback(){\n      public void processResult(      int rc,      String path,      Object ctx){\n      }\n    }\n;\n    String names[]=new String[10];\n    for (int i=0; i < names.length; i++) {\n      String name=zk.create(\"/tc-\",\"initialvalue\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL);\n      names[i]=name;\n      Stat stat=new Stat();\n      zk.getData(name,watcher,stat);\n      zk.setData(name,\"new\".getBytes(),stat.getVersion(),scb,null);\n      stat=zk.exists(name,watcher);\n      zk.delete(name,stat.getVersion(),vcb,null);\n    }\n    for (int i=0; i < names.length; i++) {\n      String name=names[i];\n      WatchedEvent event=watcher.events.poll(10,TimeUnit.SECONDS);\n      assertEquals(name,event.getPath());\n      assertEquals(Event.EventType.NodeDataChanged,event.getType());\n      assertEquals(Event.KeeperState.SyncConnected,event.getState());\n      event=watcher.events.poll(10,TimeUnit.SECONDS);\n      assertEquals(name,event.getPath());\n      assertEquals(Event.EventType.NodeDeleted,event.getType());\n      assertEquals(Event.KeeperState.SyncConnected,event.getState());\n    }\n  }\n  finally {\n    if (zk != null) {\n      zk.close();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 303,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 109,
        "startColumnNumber" : 16,
        "endLineNumber" : 109,
        "endColumnNumber" : 62
      },
      "nodeContext" : "zk.delete(name,stat.getVersion(),vcb,null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.zookeeper.ZooKeeper"
  }, {
    "nodeContext" : "zk",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 124,
      "startColumnNumber" : 16,
      "endLineNumber" : 124,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 124,
        "startColumnNumber" : 16,
        "endLineNumber" : 124,
        "endColumnNumber" : 26
      },
      "nodeContext" : "zk != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 124,
        "startColumnNumber" : 12,
        "endLineNumber" : 126,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (zk != null) {\n  zk.close();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,finally]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 123,
        "startColumnNumber" : 18,
        "endLineNumber" : 127,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (zk != null) {\n    zk.close();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1912,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 127,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  MyWatcher watcher=new MyWatcher();\n  zk=createClient(watcher,hostPort);\n  StatCallback scb=new StatCallback(){\n    public void processResult(    int rc,    String path,    Object ctx,    Stat stat){\n    }\n  }\n;\n  VoidCallback vcb=new VoidCallback(){\n    public void processResult(    int rc,    String path,    Object ctx){\n    }\n  }\n;\n  String names[]=new String[10];\n  for (int i=0; i < names.length; i++) {\n    String name=zk.create(\"/tc-\",\"initialvalue\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL);\n    names[i]=name;\n    Stat stat=new Stat();\n    zk.getData(name,watcher,stat);\n    zk.setData(name,\"new\".getBytes(),stat.getVersion(),scb,null);\n    stat=zk.exists(name,watcher);\n    zk.delete(name,stat.getVersion(),vcb,null);\n  }\n  for (int i=0; i < names.length; i++) {\n    String name=names[i];\n    WatchedEvent event=watcher.events.poll(10,TimeUnit.SECONDS);\n    assertEquals(name,event.getPath());\n    assertEquals(Event.EventType.NodeDataChanged,event.getType());\n    assertEquals(Event.KeeperState.SyncConnected,event.getState());\n    event=watcher.events.poll(10,TimeUnit.SECONDS);\n    assertEquals(name,event.getPath());\n    assertEquals(Event.EventType.NodeDeleted,event.getType());\n    assertEquals(Event.KeeperState.SyncConnected,event.getState());\n  }\n}\n  finally {\n  if (zk != null) {\n    zk.close();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 283,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1957,
        "startLineNumber" : 81,
        "startColumnNumber" : 4,
        "endLineNumber" : 128,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ZooKeeper zk=null;\n  try {\n    MyWatcher watcher=new MyWatcher();\n    zk=createClient(watcher,hostPort);\n    StatCallback scb=new StatCallback(){\n      public void processResult(      int rc,      String path,      Object ctx,      Stat stat){\n      }\n    }\n;\n    VoidCallback vcb=new VoidCallback(){\n      public void processResult(      int rc,      String path,      Object ctx){\n      }\n    }\n;\n    String names[]=new String[10];\n    for (int i=0; i < names.length; i++) {\n      String name=zk.create(\"/tc-\",\"initialvalue\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL);\n      names[i]=name;\n      Stat stat=new Stat();\n      zk.getData(name,watcher,stat);\n      zk.setData(name,\"new\".getBytes(),stat.getVersion(),scb,null);\n      stat=zk.exists(name,watcher);\n      zk.delete(name,stat.getVersion(),vcb,null);\n    }\n    for (int i=0; i < names.length; i++) {\n      String name=names[i];\n      WatchedEvent event=watcher.events.poll(10,TimeUnit.SECONDS);\n      assertEquals(name,event.getPath());\n      assertEquals(Event.EventType.NodeDataChanged,event.getType());\n      assertEquals(Event.KeeperState.SyncConnected,event.getState());\n      event=watcher.events.poll(10,TimeUnit.SECONDS);\n      assertEquals(name,event.getPath());\n      assertEquals(Event.EventType.NodeDeleted,event.getType());\n      assertEquals(Event.KeeperState.SyncConnected,event.getState());\n    }\n  }\n  finally {\n    if (zk != null) {\n      zk.close();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 290,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2455,
        "startLineNumber" : 68,
        "startColumnNumber" : 4,
        "endLineNumber" : 128,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Verify that we get all of the events we expect to get. This particular case verifies that we see all of the data events on a particular node. There was a bug (ZOOKEEPER-137) that resulted in events being dropped in some cases (timing).\n * @throws IOException\n * @throws InterruptedException\n * @throws KeeperException\n */\n@Test public void testWatcherCorrectness() throws IOException, InterruptedException, KeeperException {\n  ZooKeeper zk=null;\n  try {\n    MyWatcher watcher=new MyWatcher();\n    zk=createClient(watcher,hostPort);\n    StatCallback scb=new StatCallback(){\n      public void processResult(      int rc,      String path,      Object ctx,      Stat stat){\n      }\n    }\n;\n    VoidCallback vcb=new VoidCallback(){\n      public void processResult(      int rc,      String path,      Object ctx){\n      }\n    }\n;\n    String names[]=new String[10];\n    for (int i=0; i < names.length; i++) {\n      String name=zk.create(\"/tc-\",\"initialvalue\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL);\n      names[i]=name;\n      Stat stat=new Stat();\n      zk.getData(name,watcher,stat);\n      zk.setData(name,\"new\".getBytes(),stat.getVersion(),scb,null);\n      stat=zk.exists(name,watcher);\n      zk.delete(name,stat.getVersion(),vcb,null);\n    }\n    for (int i=0; i < names.length; i++) {\n      String name=names[i];\n      WatchedEvent event=watcher.events.poll(10,TimeUnit.SECONDS);\n      assertEquals(name,event.getPath());\n      assertEquals(Event.EventType.NodeDataChanged,event.getType());\n      assertEquals(Event.KeeperState.SyncConnected,event.getState());\n      event=watcher.events.poll(10,TimeUnit.SECONDS);\n      assertEquals(name,event.getPath());\n      assertEquals(Event.EventType.NodeDeleted,event.getType());\n      assertEquals(Event.KeeperState.SyncConnected,event.getState());\n    }\n  }\n  finally {\n    if (zk != null) {\n      zk.close();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 303,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 124,
        "startColumnNumber" : 16,
        "endLineNumber" : 124,
        "endColumnNumber" : 26
      },
      "nodeContext" : "zk != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.zookeeper.ZooKeeper"
  }, {
    "nodeContext" : "zk",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 125,
      "startColumnNumber" : 16,
      "endLineNumber" : 125,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 125,
        "startColumnNumber" : 16,
        "endLineNumber" : 125,
        "endColumnNumber" : 26
      },
      "nodeContext" : "zk.close()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 125,
        "startColumnNumber" : 16,
        "endLineNumber" : 125,
        "endColumnNumber" : 27
      },
      "nodeContext" : "zk.close();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 124,
        "startColumnNumber" : 28,
        "endLineNumber" : 126,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  zk.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 124,
        "startColumnNumber" : 12,
        "endLineNumber" : 126,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (zk != null) {\n  zk.close();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,finally]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 123,
        "startColumnNumber" : 18,
        "endLineNumber" : 127,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (zk != null) {\n    zk.close();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1912,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 127,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  MyWatcher watcher=new MyWatcher();\n  zk=createClient(watcher,hostPort);\n  StatCallback scb=new StatCallback(){\n    public void processResult(    int rc,    String path,    Object ctx,    Stat stat){\n    }\n  }\n;\n  VoidCallback vcb=new VoidCallback(){\n    public void processResult(    int rc,    String path,    Object ctx){\n    }\n  }\n;\n  String names[]=new String[10];\n  for (int i=0; i < names.length; i++) {\n    String name=zk.create(\"/tc-\",\"initialvalue\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL);\n    names[i]=name;\n    Stat stat=new Stat();\n    zk.getData(name,watcher,stat);\n    zk.setData(name,\"new\".getBytes(),stat.getVersion(),scb,null);\n    stat=zk.exists(name,watcher);\n    zk.delete(name,stat.getVersion(),vcb,null);\n  }\n  for (int i=0; i < names.length; i++) {\n    String name=names[i];\n    WatchedEvent event=watcher.events.poll(10,TimeUnit.SECONDS);\n    assertEquals(name,event.getPath());\n    assertEquals(Event.EventType.NodeDataChanged,event.getType());\n    assertEquals(Event.KeeperState.SyncConnected,event.getState());\n    event=watcher.events.poll(10,TimeUnit.SECONDS);\n    assertEquals(name,event.getPath());\n    assertEquals(Event.EventType.NodeDeleted,event.getType());\n    assertEquals(Event.KeeperState.SyncConnected,event.getState());\n  }\n}\n  finally {\n  if (zk != null) {\n    zk.close();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 283,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1957,
        "startLineNumber" : 81,
        "startColumnNumber" : 4,
        "endLineNumber" : 128,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ZooKeeper zk=null;\n  try {\n    MyWatcher watcher=new MyWatcher();\n    zk=createClient(watcher,hostPort);\n    StatCallback scb=new StatCallback(){\n      public void processResult(      int rc,      String path,      Object ctx,      Stat stat){\n      }\n    }\n;\n    VoidCallback vcb=new VoidCallback(){\n      public void processResult(      int rc,      String path,      Object ctx){\n      }\n    }\n;\n    String names[]=new String[10];\n    for (int i=0; i < names.length; i++) {\n      String name=zk.create(\"/tc-\",\"initialvalue\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL);\n      names[i]=name;\n      Stat stat=new Stat();\n      zk.getData(name,watcher,stat);\n      zk.setData(name,\"new\".getBytes(),stat.getVersion(),scb,null);\n      stat=zk.exists(name,watcher);\n      zk.delete(name,stat.getVersion(),vcb,null);\n    }\n    for (int i=0; i < names.length; i++) {\n      String name=names[i];\n      WatchedEvent event=watcher.events.poll(10,TimeUnit.SECONDS);\n      assertEquals(name,event.getPath());\n      assertEquals(Event.EventType.NodeDataChanged,event.getType());\n      assertEquals(Event.KeeperState.SyncConnected,event.getState());\n      event=watcher.events.poll(10,TimeUnit.SECONDS);\n      assertEquals(name,event.getPath());\n      assertEquals(Event.EventType.NodeDeleted,event.getType());\n      assertEquals(Event.KeeperState.SyncConnected,event.getState());\n    }\n  }\n  finally {\n    if (zk != null) {\n      zk.close();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 290,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2455,
        "startLineNumber" : 68,
        "startColumnNumber" : 4,
        "endLineNumber" : 128,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Verify that we get all of the events we expect to get. This particular case verifies that we see all of the data events on a particular node. There was a bug (ZOOKEEPER-137) that resulted in events being dropped in some cases (timing).\n * @throws IOException\n * @throws InterruptedException\n * @throws KeeperException\n */\n@Test public void testWatcherCorrectness() throws IOException, InterruptedException, KeeperException {\n  ZooKeeper zk=null;\n  try {\n    MyWatcher watcher=new MyWatcher();\n    zk=createClient(watcher,hostPort);\n    StatCallback scb=new StatCallback(){\n      public void processResult(      int rc,      String path,      Object ctx,      Stat stat){\n      }\n    }\n;\n    VoidCallback vcb=new VoidCallback(){\n      public void processResult(      int rc,      String path,      Object ctx){\n      }\n    }\n;\n    String names[]=new String[10];\n    for (int i=0; i < names.length; i++) {\n      String name=zk.create(\"/tc-\",\"initialvalue\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL);\n      names[i]=name;\n      Stat stat=new Stat();\n      zk.getData(name,watcher,stat);\n      zk.setData(name,\"new\".getBytes(),stat.getVersion(),scb,null);\n      stat=zk.exists(name,watcher);\n      zk.delete(name,stat.getVersion(),vcb,null);\n    }\n    for (int i=0; i < names.length; i++) {\n      String name=names[i];\n      WatchedEvent event=watcher.events.poll(10,TimeUnit.SECONDS);\n      assertEquals(name,event.getPath());\n      assertEquals(Event.EventType.NodeDataChanged,event.getType());\n      assertEquals(Event.KeeperState.SyncConnected,event.getState());\n      event=watcher.events.poll(10,TimeUnit.SECONDS);\n      assertEquals(name,event.getPath());\n      assertEquals(Event.EventType.NodeDeleted,event.getType());\n      assertEquals(Event.KeeperState.SyncConnected,event.getState());\n    }\n  }\n  finally {\n    if (zk != null) {\n      zk.close();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 303,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 125,
        "startColumnNumber" : 16,
        "endLineNumber" : 125,
        "endColumnNumber" : 27
      },
      "nodeContext" : "zk.close();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.zookeeper.ZooKeeper"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 101,
    "startColumnNumber" : 30,
    "endLineNumber" : 101,
    "endColumnNumber" : 32
  }, {
    "charLength" : 2,
    "startLineNumber" : 106,
    "startColumnNumber" : 16,
    "endLineNumber" : 106,
    "endColumnNumber" : 18
  }, {
    "charLength" : 2,
    "startLineNumber" : 107,
    "startColumnNumber" : 16,
    "endLineNumber" : 107,
    "endColumnNumber" : 18
  }, {
    "charLength" : 2,
    "startLineNumber" : 108,
    "startColumnNumber" : 23,
    "endLineNumber" : 108,
    "endColumnNumber" : 25
  }, {
    "charLength" : 2,
    "startLineNumber" : 109,
    "startColumnNumber" : 16,
    "endLineNumber" : 109,
    "endColumnNumber" : 18
  }, {
    "charLength" : 2,
    "startLineNumber" : 124,
    "startColumnNumber" : 16,
    "endLineNumber" : 124,
    "endColumnNumber" : 18
  }, {
    "charLength" : 2,
    "startLineNumber" : 125,
    "startColumnNumber" : 16,
    "endLineNumber" : 125,
    "endColumnNumber" : 18
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 3
  } ]
}