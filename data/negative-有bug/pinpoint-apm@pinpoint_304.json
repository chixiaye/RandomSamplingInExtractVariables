{
  "id" : 304,
  "expression" : "bytes == null",
  "projectName" : "pinpoint-apm@pinpoint",
  "commitID" : "cd51da314be7fe261d7dc630dd7c51ce6bb3cc0c",
  "filePath" : "/bootstrap-core/src/main/java/com/navercorp/pinpoint/bootstrap/plugin/jdbc/ArrayUtils.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "bytes == null",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 32,
      "startColumnNumber" : 12,
      "endLineNumber" : 32,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 32,
        "startColumnNumber" : 8,
        "endLineNumber" : 34,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (bytes == null) {\n  return \"null\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1212,
        "startLineNumber" : 31,
        "startColumnNumber" : 63,
        "endLineNumber" : 71,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (bytes == null) {\n    return \"null\";\n  }\n  if (limit < 0) {\n    throw new IllegalArgumentException(\"negative limit:\" + limit);\n  }\n  int bytesMaxLength=bytes.length - 1;\n  final int maxLimit=limit - 1;\n  if (bytesMaxLength > maxLimit) {\n    bytesMaxLength=maxLimit;\n  }\n  if (bytesMaxLength == -1) {\n    if (bytes.length == 0) {\n      return \"[]\";\n    }\n else {\n      return \"[...(\" + bytes.length + \")]\";\n    }\n  }\n  final StringBuilder sb=new StringBuilder();\n  sb.append('[');\n  for (int i=0; ; i++) {\n    sb.append(bytes[i]);\n    if (i == bytesMaxLength) {\n      if ((bytes.length - 1) <= maxLimit) {\n        return sb.append(']').toString();\n      }\n else {\n        sb.append(\", ...(\");\n        sb.append(bytes.length - (i + 1));\n        sb.append(\")]\");\n        return sb.toString();\n      }\n    }\n    sb.append(\", \");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 153,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1271,
        "startLineNumber" : 31,
        "startColumnNumber" : 4,
        "endLineNumber" : 71,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static String dropToString(byte[] bytes,int limit){\n  if (bytes == null) {\n    return \"null\";\n  }\n  if (limit < 0) {\n    throw new IllegalArgumentException(\"negative limit:\" + limit);\n  }\n  int bytesMaxLength=bytes.length - 1;\n  final int maxLimit=limit - 1;\n  if (bytesMaxLength > maxLimit) {\n    bytesMaxLength=maxLimit;\n  }\n  if (bytesMaxLength == -1) {\n    if (bytes.length == 0) {\n      return \"[]\";\n    }\n else {\n      return \"[...(\" + bytes.length + \")]\";\n    }\n  }\n  final StringBuilder sb=new StringBuilder();\n  sb.append('[');\n  for (int i=0; ; i++) {\n    sb.append(bytes[i]);\n    if (i == bytesMaxLength) {\n      if ((bytes.length - 1) <= maxLimit) {\n        return sb.append(']').toString();\n      }\n else {\n        sb.append(\", ...(\");\n        sb.append(bytes.length - (i + 1));\n        sb.append(\")]\");\n        return sb.toString();\n      }\n    }\n    sb.append(\", \");\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 167,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 32,
        "startColumnNumber" : 8,
        "endLineNumber" : 34,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (bytes == null) {\n  return \"null\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 32,
    "startColumnNumber" : 12,
    "endLineNumber" : 32,
    "endColumnNumber" : 25
  } ],
  "layoutRelationDataList" : [ ]
}