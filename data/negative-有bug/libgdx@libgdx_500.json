{
  "id" : 500,
  "expression" : "val[M03] * val[M12] * val[M21] - val[M02] * val[M13] * val[M21]",
  "projectName" : "libgdx@libgdx",
  "commitID" : "3485b16e8979c0141421bc80cb8831b7a0403f67",
  "filePath" : "/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/math/Matrix4.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "val[M03] * val[M12] * val[M21] - val[M02] * val[M13] * val[M21]",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 63,
      "startLineNumber" : 483,
      "startColumnNumber" : 13,
      "endLineNumber" : 483,
      "endColumnNumber" : 76
    },
    "astNodeNumber" : 21,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 483,
        "startColumnNumber" : 13,
        "endLineNumber" : 483,
        "endColumnNumber" : 109
      },
      "nodeContext" : "val[M03] * val[M12] * val[M21] - val[M02] * val[M13] * val[M21] - val[M03] * val[M11] * val[M22]",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 32,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 483,
        "startColumnNumber" : 13,
        "endLineNumber" : 484,
        "endColumnNumber" : 24
      },
      "nodeContext" : "val[M03] * val[M12] * val[M21] - val[M02] * val[M13] * val[M21] - val[M03] * val[M11] * val[M22] + val[M01] * val[M13] * val[M22]",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 43,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 166,
        "startLineNumber" : 483,
        "startColumnNumber" : 13,
        "endLineNumber" : 484,
        "endColumnNumber" : 57
      },
      "nodeContext" : "val[M03] * val[M12] * val[M21] - val[M02] * val[M13] * val[M21] - val[M03] * val[M11] * val[M22] + val[M01] * val[M13] * val[M22] + val[M02] * val[M11] * val[M23]",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 54,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 199,
        "startLineNumber" : 483,
        "startColumnNumber" : 13,
        "endLineNumber" : 484,
        "endColumnNumber" : 90
      },
      "nodeContext" : "val[M03] * val[M12] * val[M21] - val[M02] * val[M13] * val[M21] - val[M03] * val[M11] * val[M22] + val[M01] * val[M13] * val[M22] + val[M02] * val[M11] * val[M23] - val[M01] * val[M12] * val[M23]",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 65,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 210,
        "startLineNumber" : 483,
        "startColumnNumber" : 2,
        "endLineNumber" : 484,
        "endColumnNumber" : 90
      },
      "nodeContext" : "tmp[M03]=val[M03] * val[M12] * val[M21] - val[M02] * val[M13] * val[M21] - val[M03] * val[M11] * val[M22] + val[M01] * val[M13] * val[M22] + val[M02] * val[M11] * val[M23] - val[M01] * val[M12] * val[M23]",
      "nodeType" : "Assignment",
      "astNodeNumber" : 69,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 211,
        "startLineNumber" : 483,
        "startColumnNumber" : 2,
        "endLineNumber" : 484,
        "endColumnNumber" : 91
      },
      "nodeContext" : "tmp[M03]=val[M03] * val[M12] * val[M21] - val[M02] * val[M13] * val[M21] - val[M03] * val[M11] * val[M22] + val[M01] * val[M13] * val[M22] + val[M02] * val[M11] * val[M23] - val[M01] * val[M12] * val[M23];\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 70,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5215,
        "startLineNumber" : 465,
        "startColumnNumber" : 23,
        "endLineNumber" : 526,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  float l_det=val[M30] * val[M21] * val[M12]* val[M03] - val[M20] * val[M31] * val[M12]* val[M03] - val[M30] * val[M11] * val[M22]* val[M03] + val[M10] * val[M31] * val[M22]* val[M03] + val[M20] * val[M11] * val[M32]* val[M03] - val[M10] * val[M21] * val[M32]* val[M03] - val[M30] * val[M21] * val[M02]* val[M13] + val[M20] * val[M31] * val[M02]* val[M13] + val[M30] * val[M01] * val[M22]* val[M13] - val[M00] * val[M31] * val[M22]* val[M13] - val[M20] * val[M01] * val[M32]* val[M13] + val[M00] * val[M21] * val[M32]* val[M13] + val[M30] * val[M11] * val[M02]* val[M23] - val[M10] * val[M31] * val[M02]* val[M23] - val[M30] * val[M01] * val[M12]* val[M23] + val[M00] * val[M31] * val[M12]* val[M23] + val[M10] * val[M01] * val[M32]* val[M23] - val[M00] * val[M11] * val[M32]* val[M23] - val[M20] * val[M11] * val[M02]* val[M33] + val[M10] * val[M21] * val[M02]* val[M33] + val[M20] * val[M01] * val[M12]* val[M33] - val[M00] * val[M21] * val[M12]* val[M33] - val[M10] * val[M01] * val[M22]* val[M33] + val[M00] * val[M11] * val[M22]* val[M33];\n  if (l_det == 0f)   throw new RuntimeException(\"non-invertible matrix\");\n  float inv_det=1.0f / l_det;\n  tmp[M00]=val[M12] * val[M23] * val[M31] - val[M13] * val[M22] * val[M31] + val[M13] * val[M21] * val[M32] - val[M11] * val[M23] * val[M32] - val[M12] * val[M21] * val[M33] + val[M11] * val[M22] * val[M33];\n  tmp[M01]=val[M03] * val[M22] * val[M31] - val[M02] * val[M23] * val[M31] - val[M03] * val[M21] * val[M32] + val[M01] * val[M23] * val[M32] + val[M02] * val[M21] * val[M33] - val[M01] * val[M22] * val[M33];\n  tmp[M02]=val[M02] * val[M13] * val[M31] - val[M03] * val[M12] * val[M31] + val[M03] * val[M11] * val[M32] - val[M01] * val[M13] * val[M32] - val[M02] * val[M11] * val[M33] + val[M01] * val[M12] * val[M33];\n  tmp[M03]=val[M03] * val[M12] * val[M21] - val[M02] * val[M13] * val[M21] - val[M03] * val[M11] * val[M22] + val[M01] * val[M13] * val[M22] + val[M02] * val[M11] * val[M23] - val[M01] * val[M12] * val[M23];\n  tmp[M10]=val[M13] * val[M22] * val[M30] - val[M12] * val[M23] * val[M30] - val[M13] * val[M20] * val[M32] + val[M10] * val[M23] * val[M32] + val[M12] * val[M20] * val[M33] - val[M10] * val[M22] * val[M33];\n  tmp[M11]=val[M02] * val[M23] * val[M30] - val[M03] * val[M22] * val[M30] + val[M03] * val[M20] * val[M32] - val[M00] * val[M23] * val[M32] - val[M02] * val[M20] * val[M33] + val[M00] * val[M22] * val[M33];\n  tmp[M12]=val[M03] * val[M12] * val[M30] - val[M02] * val[M13] * val[M30] - val[M03] * val[M10] * val[M32] + val[M00] * val[M13] * val[M32] + val[M02] * val[M10] * val[M33] - val[M00] * val[M12] * val[M33];\n  tmp[M13]=val[M02] * val[M13] * val[M20] - val[M03] * val[M12] * val[M20] + val[M03] * val[M10] * val[M22] - val[M00] * val[M13] * val[M22] - val[M02] * val[M10] * val[M23] + val[M00] * val[M12] * val[M23];\n  tmp[M20]=val[M11] * val[M23] * val[M30] - val[M13] * val[M21] * val[M30] + val[M13] * val[M20] * val[M31] - val[M10] * val[M23] * val[M31] - val[M11] * val[M20] * val[M33] + val[M10] * val[M21] * val[M33];\n  tmp[M21]=val[M03] * val[M21] * val[M30] - val[M01] * val[M23] * val[M30] - val[M03] * val[M20] * val[M31] + val[M00] * val[M23] * val[M31] + val[M01] * val[M20] * val[M33] - val[M00] * val[M21] * val[M33];\n  tmp[M22]=val[M01] * val[M13] * val[M30] - val[M03] * val[M11] * val[M30] + val[M03] * val[M10] * val[M31] - val[M00] * val[M13] * val[M31] - val[M01] * val[M10] * val[M33] + val[M00] * val[M11] * val[M33];\n  tmp[M23]=val[M03] * val[M11] * val[M20] - val[M01] * val[M13] * val[M20] - val[M03] * val[M10] * val[M21] + val[M00] * val[M13] * val[M21] + val[M01] * val[M10] * val[M23] - val[M00] * val[M11] * val[M23];\n  tmp[M30]=val[M12] * val[M21] * val[M30] - val[M11] * val[M22] * val[M30] - val[M12] * val[M20] * val[M31] + val[M10] * val[M22] * val[M31] + val[M11] * val[M20] * val[M32] - val[M10] * val[M21] * val[M32];\n  tmp[M31]=val[M01] * val[M22] * val[M30] - val[M02] * val[M21] * val[M30] + val[M02] * val[M20] * val[M31] - val[M00] * val[M22] * val[M31] - val[M01] * val[M20] * val[M32] + val[M00] * val[M21] * val[M32];\n  tmp[M32]=val[M02] * val[M11] * val[M30] - val[M01] * val[M12] * val[M30] - val[M02] * val[M10] * val[M31] + val[M00] * val[M12] * val[M31] + val[M01] * val[M10] * val[M32] - val[M00] * val[M11] * val[M32];\n  tmp[M33]=val[M01] * val[M12] * val[M20] - val[M02] * val[M11] * val[M20] + val[M02] * val[M10] * val[M21] - val[M00] * val[M12] * val[M21] - val[M01] * val[M10] * val[M22] + val[M00] * val[M11] * val[M22];\n  val[M00]=tmp[M00] * inv_det;\n  val[M01]=tmp[M01] * inv_det;\n  val[M02]=tmp[M02] * inv_det;\n  val[M03]=tmp[M03] * inv_det;\n  val[M10]=tmp[M10] * inv_det;\n  val[M11]=tmp[M11] * inv_det;\n  val[M12]=tmp[M12] * inv_det;\n  val[M13]=tmp[M13] * inv_det;\n  val[M20]=tmp[M20] * inv_det;\n  val[M21]=tmp[M21] * inv_det;\n  val[M22]=tmp[M22] * inv_det;\n  val[M23]=tmp[M23] * inv_det;\n  val[M30]=tmp[M30] * inv_det;\n  val[M31]=tmp[M31] * inv_det;\n  val[M32]=tmp[M32] * inv_det;\n  val[M33]=tmp[M33] * inv_det;\n  return this;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1638,
      "astHeight" : 29
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5450,
        "startLineNumber" : 461,
        "startColumnNumber" : 1,
        "endLineNumber" : 526,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Inverts the matrix. Stores the result in this matrix.\n * @return This matrix for the purpose of chaining methods together.\n * @throws RuntimeException if the matrix is singular (not invertible) \n */\npublic Matrix4 inv(){\n  float l_det=val[M30] * val[M21] * val[M12]* val[M03] - val[M20] * val[M31] * val[M12]* val[M03] - val[M30] * val[M11] * val[M22]* val[M03] + val[M10] * val[M31] * val[M22]* val[M03] + val[M20] * val[M11] * val[M32]* val[M03] - val[M10] * val[M21] * val[M32]* val[M03] - val[M30] * val[M21] * val[M02]* val[M13] + val[M20] * val[M31] * val[M02]* val[M13] + val[M30] * val[M01] * val[M22]* val[M13] - val[M00] * val[M31] * val[M22]* val[M13] - val[M20] * val[M01] * val[M32]* val[M13] + val[M00] * val[M21] * val[M32]* val[M13] + val[M30] * val[M11] * val[M02]* val[M23] - val[M10] * val[M31] * val[M02]* val[M23] - val[M30] * val[M01] * val[M12]* val[M23] + val[M00] * val[M31] * val[M12]* val[M23] + val[M10] * val[M01] * val[M32]* val[M23] - val[M00] * val[M11] * val[M32]* val[M23] - val[M20] * val[M11] * val[M02]* val[M33] + val[M10] * val[M21] * val[M02]* val[M33] + val[M20] * val[M01] * val[M12]* val[M33] - val[M00] * val[M21] * val[M12]* val[M33] - val[M10] * val[M01] * val[M22]* val[M33] + val[M00] * val[M11] * val[M22]* val[M33];\n  if (l_det == 0f)   throw new RuntimeException(\"non-invertible matrix\");\n  float inv_det=1.0f / l_det;\n  tmp[M00]=val[M12] * val[M23] * val[M31] - val[M13] * val[M22] * val[M31] + val[M13] * val[M21] * val[M32] - val[M11] * val[M23] * val[M32] - val[M12] * val[M21] * val[M33] + val[M11] * val[M22] * val[M33];\n  tmp[M01]=val[M03] * val[M22] * val[M31] - val[M02] * val[M23] * val[M31] - val[M03] * val[M21] * val[M32] + val[M01] * val[M23] * val[M32] + val[M02] * val[M21] * val[M33] - val[M01] * val[M22] * val[M33];\n  tmp[M02]=val[M02] * val[M13] * val[M31] - val[M03] * val[M12] * val[M31] + val[M03] * val[M11] * val[M32] - val[M01] * val[M13] * val[M32] - val[M02] * val[M11] * val[M33] + val[M01] * val[M12] * val[M33];\n  tmp[M03]=val[M03] * val[M12] * val[M21] - val[M02] * val[M13] * val[M21] - val[M03] * val[M11] * val[M22] + val[M01] * val[M13] * val[M22] + val[M02] * val[M11] * val[M23] - val[M01] * val[M12] * val[M23];\n  tmp[M10]=val[M13] * val[M22] * val[M30] - val[M12] * val[M23] * val[M30] - val[M13] * val[M20] * val[M32] + val[M10] * val[M23] * val[M32] + val[M12] * val[M20] * val[M33] - val[M10] * val[M22] * val[M33];\n  tmp[M11]=val[M02] * val[M23] * val[M30] - val[M03] * val[M22] * val[M30] + val[M03] * val[M20] * val[M32] - val[M00] * val[M23] * val[M32] - val[M02] * val[M20] * val[M33] + val[M00] * val[M22] * val[M33];\n  tmp[M12]=val[M03] * val[M12] * val[M30] - val[M02] * val[M13] * val[M30] - val[M03] * val[M10] * val[M32] + val[M00] * val[M13] * val[M32] + val[M02] * val[M10] * val[M33] - val[M00] * val[M12] * val[M33];\n  tmp[M13]=val[M02] * val[M13] * val[M20] - val[M03] * val[M12] * val[M20] + val[M03] * val[M10] * val[M22] - val[M00] * val[M13] * val[M22] - val[M02] * val[M10] * val[M23] + val[M00] * val[M12] * val[M23];\n  tmp[M20]=val[M11] * val[M23] * val[M30] - val[M13] * val[M21] * val[M30] + val[M13] * val[M20] * val[M31] - val[M10] * val[M23] * val[M31] - val[M11] * val[M20] * val[M33] + val[M10] * val[M21] * val[M33];\n  tmp[M21]=val[M03] * val[M21] * val[M30] - val[M01] * val[M23] * val[M30] - val[M03] * val[M20] * val[M31] + val[M00] * val[M23] * val[M31] + val[M01] * val[M20] * val[M33] - val[M00] * val[M21] * val[M33];\n  tmp[M22]=val[M01] * val[M13] * val[M30] - val[M03] * val[M11] * val[M30] + val[M03] * val[M10] * val[M31] - val[M00] * val[M13] * val[M31] - val[M01] * val[M10] * val[M33] + val[M00] * val[M11] * val[M33];\n  tmp[M23]=val[M03] * val[M11] * val[M20] - val[M01] * val[M13] * val[M20] - val[M03] * val[M10] * val[M21] + val[M00] * val[M13] * val[M21] + val[M01] * val[M10] * val[M23] - val[M00] * val[M11] * val[M23];\n  tmp[M30]=val[M12] * val[M21] * val[M30] - val[M11] * val[M22] * val[M30] - val[M12] * val[M20] * val[M31] + val[M10] * val[M22] * val[M31] + val[M11] * val[M20] * val[M32] - val[M10] * val[M21] * val[M32];\n  tmp[M31]=val[M01] * val[M22] * val[M30] - val[M02] * val[M21] * val[M30] + val[M02] * val[M20] * val[M31] - val[M00] * val[M22] * val[M31] - val[M01] * val[M20] * val[M32] + val[M00] * val[M21] * val[M32];\n  tmp[M32]=val[M02] * val[M11] * val[M30] - val[M01] * val[M12] * val[M30] - val[M02] * val[M10] * val[M31] + val[M00] * val[M12] * val[M31] + val[M01] * val[M10] * val[M32] - val[M00] * val[M11] * val[M32];\n  tmp[M33]=val[M01] * val[M12] * val[M20] - val[M02] * val[M11] * val[M20] + val[M02] * val[M10] * val[M21] - val[M00] * val[M12] * val[M21] - val[M01] * val[M10] * val[M22] + val[M00] * val[M11] * val[M22];\n  val[M00]=tmp[M00] * inv_det;\n  val[M01]=tmp[M01] * inv_det;\n  val[M02]=tmp[M02] * inv_det;\n  val[M03]=tmp[M03] * inv_det;\n  val[M10]=tmp[M10] * inv_det;\n  val[M11]=tmp[M11] * inv_det;\n  val[M12]=tmp[M12] * inv_det;\n  val[M13]=tmp[M13] * inv_det;\n  val[M20]=tmp[M20] * inv_det;\n  val[M21]=tmp[M21] * inv_det;\n  val[M22]=tmp[M22] * inv_det;\n  val[M23]=tmp[M23] * inv_det;\n  val[M30]=tmp[M30] * inv_det;\n  val[M31]=tmp[M31] * inv_det;\n  val[M32]=tmp[M32] * inv_det;\n  val[M33]=tmp[M33] * inv_det;\n  return this;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1644,
      "astHeight" : 30
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 483,
        "startColumnNumber" : 13,
        "endLineNumber" : 483,
        "endColumnNumber" : 109
      },
      "nodeContext" : "val[M03] * val[M12] * val[M21] - val[M02] * val[M13] * val[M21] - val[M03] * val[M11] * val[M22]",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 32,
      "astHeight" : 5
    },
    "tokenLength" : 17,
    "type" : "float"
  } ],
  "positionList" : [ {
    "charLength" : 63,
    "startLineNumber" : 483,
    "startColumnNumber" : 13,
    "endLineNumber" : 483,
    "endColumnNumber" : 76
  } ],
  "layoutRelationDataList" : [ ]
}