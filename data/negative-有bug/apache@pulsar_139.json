{
  "id" : 139,
  "expression" : "IS_CLOSED_UPDATER.get(this) == TRUE",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/AbstractDispatcherSingleActiveConsumer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "IS_CLOSED_UPDATER.get(this) == TRUE",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 35,
      "startLineNumber" : 138,
      "startColumnNumber" : 12,
      "endLineNumber" : 138,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 193,
        "startLineNumber" : 138,
        "startColumnNumber" : 8,
        "endLineNumber" : 141,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (IS_CLOSED_UPDATER.get(this) == TRUE) {\n  log.warn(\"[{}] Dispatcher is already closed. Closing consumer {}\",this.topicName,consumer);\n  consumer.disconnect();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1875,
        "startLineNumber" : 137,
        "startColumnNumber" : 90,
        "endLineNumber" : 182,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (IS_CLOSED_UPDATER.get(this) == TRUE) {\n    log.warn(\"[{}] Dispatcher is already closed. Closing consumer {}\",this.topicName,consumer);\n    consumer.disconnect();\n  }\n  if (subscriptionType == SubType.Exclusive && !consumers.isEmpty()) {\n    throw new ConsumerBusyException(\"Exclusive consumer is already connected\");\n  }\n  if (subscriptionType == SubType.Failover && isConsumersExceededOnSubscription()) {\n    log.warn(\"[{}] Attempting to add consumer to subscription which reached max consumers limit\",this.topicName);\n    throw new ConsumerBusyException(\"Subscription reached max consumers limit\");\n  }\n  if (subscriptionType == SubType.Exclusive && consumer.getKeySharedMeta() != null && consumer.getKeySharedMeta().getHashRangesList() != null && consumer.getKeySharedMeta().getHashRangesList().size() > 0) {\n    stickyKeyConsumerSelector=new HashRangeExclusiveStickyKeyConsumerSelector();\n    stickyKeyConsumerSelector.addConsumer(consumer);\n    isKeyHashRangeFiltered=true;\n  }\n else {\n    isKeyHashRangeFiltered=false;\n  }\n  if (consumers.isEmpty()) {\n    isFirstRead=true;\n  }\n  consumers.add(consumer);\n  if (!pickAndScheduleActiveConsumer()) {\n    Consumer currentActiveConsumer=ACTIVE_CONSUMER_UPDATER.get(this);\n    if (null == currentActiveConsumer) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"Current active consumer disappears while adding consumer {}\",consumer);\n      }\n    }\n else {\n      consumer.notifyActiveConsumerChange(currentActiveConsumer);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 163,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1961,
        "startLineNumber" : 137,
        "startColumnNumber" : 4,
        "endLineNumber" : 182,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public synchronized void addConsumer(Consumer consumer) throws BrokerServiceException {\n  if (IS_CLOSED_UPDATER.get(this) == TRUE) {\n    log.warn(\"[{}] Dispatcher is already closed. Closing consumer {}\",this.topicName,consumer);\n    consumer.disconnect();\n  }\n  if (subscriptionType == SubType.Exclusive && !consumers.isEmpty()) {\n    throw new ConsumerBusyException(\"Exclusive consumer is already connected\");\n  }\n  if (subscriptionType == SubType.Failover && isConsumersExceededOnSubscription()) {\n    log.warn(\"[{}] Attempting to add consumer to subscription which reached max consumers limit\",this.topicName);\n    throw new ConsumerBusyException(\"Subscription reached max consumers limit\");\n  }\n  if (subscriptionType == SubType.Exclusive && consumer.getKeySharedMeta() != null && consumer.getKeySharedMeta().getHashRangesList() != null && consumer.getKeySharedMeta().getHashRangesList().size() > 0) {\n    stickyKeyConsumerSelector=new HashRangeExclusiveStickyKeyConsumerSelector();\n    stickyKeyConsumerSelector.addConsumer(consumer);\n    isKeyHashRangeFiltered=true;\n  }\n else {\n    isKeyHashRangeFiltered=false;\n  }\n  if (consumers.isEmpty()) {\n    isFirstRead=true;\n  }\n  consumers.add(consumer);\n  if (!pickAndScheduleActiveConsumer()) {\n    Consumer currentActiveConsumer=ACTIVE_CONSUMER_UPDATER.get(this);\n    if (null == currentActiveConsumer) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"Current active consumer disappears while adding consumer {}\",consumer);\n      }\n    }\n else {\n      consumer.notifyActiveConsumerChange(currentActiveConsumer);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 174,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 193,
        "startLineNumber" : 138,
        "startColumnNumber" : 8,
        "endLineNumber" : 141,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (IS_CLOSED_UPDATER.get(this) == TRUE) {\n  log.warn(\"[{}] Dispatcher is already closed. Closing consumer {}\",this.topicName,consumer);\n  consumer.disconnect();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    },
    "tokenLength" : 6,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 35,
    "startLineNumber" : 138,
    "startColumnNumber" : 12,
    "endLineNumber" : 138,
    "endColumnNumber" : 47
  } ],
  "layoutRelationDataList" : [ ]
}