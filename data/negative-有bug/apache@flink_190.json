{
  "id" : 190,
  "expression" : "similarUsersGraph.joinWithVertices(idsWithInitialLabels,new VertexJoinFunction<Long,Long>(){\n  public Long vertexJoin(  Long vertexValue,  Long inputValue){\n    return inputValue;\n  }\n}\n).run(new LabelPropagation<>(maxIterations))",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-libraries/flink-gelly-examples/src/main/java/org/apache/flink/graph/examples/MusicProfiles.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "similarUsersGraph.joinWithVertices(idsWithInitialLabels,new VertexJoinFunction<Long,Long>(){\n  public Long vertexJoin(  Long vertexValue,  Long inputValue){\n    return inputValue;\n  }\n}\n).run(new LabelPropagation<>(maxIterations))",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 481,
      "startLineNumber" : 152,
      "startColumnNumber" : 16,
      "endLineNumber" : 160,
      "endColumnNumber" : 67
    },
    "astNodeNumber" : 36,
    "astHeight" : 8,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 521,
        "startLineNumber" : 151,
        "startColumnNumber" : 38,
        "endLineNumber" : 160,
        "endColumnNumber" : 67
      },
      "nodeContext" : "verticesWithCommunity=similarUsersGraph.joinWithVertices(idsWithInitialLabels,new VertexJoinFunction<Long,Long>(){\n  public Long vertexJoin(  Long vertexValue,  Long inputValue){\n    return inputValue;\n  }\n}\n).run(new LabelPropagation<>(maxIterations))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 38,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 552,
        "startLineNumber" : 151,
        "startColumnNumber" : 8,
        "endLineNumber" : 160,
        "endColumnNumber" : 68
      },
      "nodeContext" : "DataSet<Vertex<String,Long>> verticesWithCommunity=similarUsersGraph.joinWithVertices(idsWithInitialLabels,new VertexJoinFunction<Long,Long>(){\n  public Long vertexJoin(  Long vertexValue,  Long inputValue){\n    return inputValue;\n  }\n}\n).run(new LabelPropagation<>(maxIterations));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 49,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4557,
        "startLineNumber" : 69,
        "startColumnNumber" : 60,
        "endLineNumber" : 170,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!parseParameters(args)) {\n    return;\n  }\n  ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();\n  DataSet<Tuple3<String,String,Integer>> triplets=getUserSongTripletsData(env);\n  DataSet<Tuple1<String>> mismatches=getMismatchesData(env).map(new ExtractMismatchSongIds());\n  DataSet<Tuple3<String,String,Integer>> validTriplets=triplets.coGroup(mismatches).where(1).equalTo(0).with(new FilterOutMismatches());\n  Graph<String,NullValue,Integer> userSongGraph=Graph.fromTupleDataSet(validTriplets,env);\n  DataSet<Tuple2<String,String>> usersWithTopTrack=userSongGraph.groupReduceOnEdges(new GetTopSongPerUser(),EdgeDirection.OUT).filter(new FilterSongNodes());\n  if (fileOutput) {\n    usersWithTopTrack.writeAsCsv(topTracksOutputPath,\"\\n\",\"\\t\");\n  }\n else {\n    usersWithTopTrack.print();\n  }\n  DataSet<Edge<String,NullValue>> similarUsers=userSongGraph.getEdges().filter(new FilterFunction<Edge<String,Integer>>(){\n    public boolean filter(    Edge<String,Integer> edge){\n      return (edge.getValue() > playcountThreshold);\n    }\n  }\n).groupBy(1).reduceGroup(new CreateSimilarUserEdges()).distinct();\n  Graph<String,Long,NullValue> similarUsersGraph=Graph.fromDataSet(similarUsers,new MapFunction<String,Long>(){\n    public Long map(    String value){\n      return 1L;\n    }\n  }\n,env).getUndirected();\n  DataSet<Tuple2<String,Long>> idsWithInitialLabels=DataSetUtils.zipWithUniqueId(similarUsersGraph.getVertexIds()).map(new MapFunction<Tuple2<Long,String>,Tuple2<String,Long>>(){\n    @Override public Tuple2<String,Long> map(    Tuple2<Long,String> tuple2) throws Exception {\n      return new Tuple2<>(tuple2.f1,tuple2.f0);\n    }\n  }\n);\n  DataSet<Vertex<String,Long>> verticesWithCommunity=similarUsersGraph.joinWithVertices(idsWithInitialLabels,new VertexJoinFunction<Long,Long>(){\n    public Long vertexJoin(    Long vertexValue,    Long inputValue){\n      return inputValue;\n    }\n  }\n).run(new LabelPropagation<>(maxIterations));\n  if (fileOutput) {\n    verticesWithCommunity.writeAsCsv(communitiesOutputPath,\"\\n\",\"\\t\");\n    env.execute();\n  }\n else {\n    verticesWithCommunity.print();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 386,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4613,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 170,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void main(String[] args) throws Exception {\n  if (!parseParameters(args)) {\n    return;\n  }\n  ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();\n  DataSet<Tuple3<String,String,Integer>> triplets=getUserSongTripletsData(env);\n  DataSet<Tuple1<String>> mismatches=getMismatchesData(env).map(new ExtractMismatchSongIds());\n  DataSet<Tuple3<String,String,Integer>> validTriplets=triplets.coGroup(mismatches).where(1).equalTo(0).with(new FilterOutMismatches());\n  Graph<String,NullValue,Integer> userSongGraph=Graph.fromTupleDataSet(validTriplets,env);\n  DataSet<Tuple2<String,String>> usersWithTopTrack=userSongGraph.groupReduceOnEdges(new GetTopSongPerUser(),EdgeDirection.OUT).filter(new FilterSongNodes());\n  if (fileOutput) {\n    usersWithTopTrack.writeAsCsv(topTracksOutputPath,\"\\n\",\"\\t\");\n  }\n else {\n    usersWithTopTrack.print();\n  }\n  DataSet<Edge<String,NullValue>> similarUsers=userSongGraph.getEdges().filter(new FilterFunction<Edge<String,Integer>>(){\n    public boolean filter(    Edge<String,Integer> edge){\n      return (edge.getValue() > playcountThreshold);\n    }\n  }\n).groupBy(1).reduceGroup(new CreateSimilarUserEdges()).distinct();\n  Graph<String,Long,NullValue> similarUsersGraph=Graph.fromDataSet(similarUsers,new MapFunction<String,Long>(){\n    public Long map(    String value){\n      return 1L;\n    }\n  }\n,env).getUndirected();\n  DataSet<Tuple2<String,Long>> idsWithInitialLabels=DataSetUtils.zipWithUniqueId(similarUsersGraph.getVertexIds()).map(new MapFunction<Tuple2<Long,String>,Tuple2<String,Long>>(){\n    @Override public Tuple2<String,Long> map(    Tuple2<Long,String> tuple2) throws Exception {\n      return new Tuple2<>(tuple2.f1,tuple2.f0);\n    }\n  }\n);\n  DataSet<Vertex<String,Long>> verticesWithCommunity=similarUsersGraph.joinWithVertices(idsWithInitialLabels,new VertexJoinFunction<Long,Long>(){\n    public Long vertexJoin(    Long vertexValue,    Long inputValue){\n      return inputValue;\n    }\n  }\n).run(new LabelPropagation<>(maxIterations));\n  if (fileOutput) {\n    verticesWithCommunity.writeAsCsv(communitiesOutputPath,\"\\n\",\"\\t\");\n    env.execute();\n  }\n else {\n    verticesWithCommunity.print();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 399,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 521,
        "startLineNumber" : 151,
        "startColumnNumber" : 38,
        "endLineNumber" : 160,
        "endColumnNumber" : 67
      },
      "nodeContext" : "verticesWithCommunity=similarUsersGraph.joinWithVertices(idsWithInitialLabels,new VertexJoinFunction<Long,Long>(){\n  public Long vertexJoin(  Long vertexValue,  Long inputValue){\n    return inputValue;\n  }\n}\n).run(new LabelPropagation<>(maxIterations))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 38,
      "astHeight" : 9
    },
    "tokenLength" : 15,
    "type" : "org.apache.flink.api.java.DataSet<org.apache.flink.graph.Vertex<java.lang.String,java.lang.Long>>"
  } ],
  "positionList" : [ {
    "charLength" : 481,
    "startLineNumber" : 152,
    "startColumnNumber" : 16,
    "endLineNumber" : 160,
    "endColumnNumber" : 67
  } ],
  "layoutRelationDataList" : [ ]
}