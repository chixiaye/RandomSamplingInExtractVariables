{
  "id" : 40,
  "expression" : "PropertyChangeType.ADDED",
  "projectName" : "apolloconfig@apollo",
  "commitID" : "7b7d753f78e444f9cf97b0f238f7e33f585cb277",
  "filePath" : "/apollo-client/src/test/java/com/ctrip/framework/apollo/internals/SimpleConfigTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "PropertyChangeType.ADDED",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 24,
      "startLineNumber" : 115,
      "startColumnNumber" : 17,
      "endLineNumber" : 115,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 115,
        "startColumnNumber" : 4,
        "endLineNumber" : 115,
        "endColumnNumber" : 72
      },
      "nodeContext" : "assertEquals(PropertyChangeType.ADDED,newKeyChange.getChangeType())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 115,
        "startColumnNumber" : 4,
        "endLineNumber" : 115,
        "endColumnNumber" : 73
      },
      "nodeContext" : "assertEquals(PropertyChangeType.ADDED,newKeyChange.getChangeType());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2080,
        "startLineNumber" : 68,
        "startColumnNumber" : 56,
        "endLineNumber" : 116,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Properties someProperties=new Properties();\n  String someKey=\"someKey\";\n  String someValue=\"someValue\";\n  String anotherKey=\"anotherKey\";\n  String anotherValue=\"anotherValue\";\n  someProperties.putAll(ImmutableMap.of(someKey,someValue,anotherKey,anotherValue));\n  Properties anotherProperties=new Properties();\n  String newKey=\"newKey\";\n  String newValue=\"newValue\";\n  String someValueNew=\"someValueNew\";\n  anotherProperties.putAll(ImmutableMap.of(someKey,someValueNew,newKey,newValue));\n  when(configRepository.getConfig()).thenReturn(someProperties);\n  final SettableFuture<ConfigChangeEvent> configChangeFuture=SettableFuture.create();\n  ConfigChangeListener someListener=new ConfigChangeListener(){\n    @Override public void onChange(    ConfigChangeEvent changeEvent){\n      configChangeFuture.set(changeEvent);\n    }\n  }\n;\n  SimpleConfig config=new SimpleConfig(someNamespace,configRepository);\n  config.addChangeListener(someListener);\n  config.onRepositoryChange(someNamespace,anotherProperties);\n  ConfigChangeEvent changeEvent=configChangeFuture.get(500,TimeUnit.MILLISECONDS);\n  assertEquals(someNamespace,changeEvent.getNamespace());\n  assertEquals(3,changeEvent.changedKeys().size());\n  ConfigChange someKeyChange=changeEvent.getChange(someKey);\n  assertEquals(someValue,someKeyChange.getOldValue());\n  assertEquals(someValueNew,someKeyChange.getNewValue());\n  assertEquals(PropertyChangeType.MODIFIED,someKeyChange.getChangeType());\n  ConfigChange anotherKeyChange=changeEvent.getChange(anotherKey);\n  assertEquals(anotherValue,anotherKeyChange.getOldValue());\n  assertEquals(null,anotherKeyChange.getNewValue());\n  assertEquals(PropertyChangeType.DELETED,anotherKeyChange.getChangeType());\n  ConfigChange newKeyChange=changeEvent.getChange(newKey);\n  assertEquals(null,newKeyChange.getOldValue());\n  assertEquals(newValue,newKeyChange.getNewValue());\n  assertEquals(PropertyChangeType.ADDED,newKeyChange.getChangeType());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 272,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2142,
        "startLineNumber" : 67,
        "startColumnNumber" : 2,
        "endLineNumber" : 116,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testOnRepositoryChange() throws Exception {\n  Properties someProperties=new Properties();\n  String someKey=\"someKey\";\n  String someValue=\"someValue\";\n  String anotherKey=\"anotherKey\";\n  String anotherValue=\"anotherValue\";\n  someProperties.putAll(ImmutableMap.of(someKey,someValue,anotherKey,anotherValue));\n  Properties anotherProperties=new Properties();\n  String newKey=\"newKey\";\n  String newValue=\"newValue\";\n  String someValueNew=\"someValueNew\";\n  anotherProperties.putAll(ImmutableMap.of(someKey,someValueNew,newKey,newValue));\n  when(configRepository.getConfig()).thenReturn(someProperties);\n  final SettableFuture<ConfigChangeEvent> configChangeFuture=SettableFuture.create();\n  ConfigChangeListener someListener=new ConfigChangeListener(){\n    @Override public void onChange(    ConfigChangeEvent changeEvent){\n      configChangeFuture.set(changeEvent);\n    }\n  }\n;\n  SimpleConfig config=new SimpleConfig(someNamespace,configRepository);\n  config.addChangeListener(someListener);\n  config.onRepositoryChange(someNamespace,anotherProperties);\n  ConfigChangeEvent changeEvent=configChangeFuture.get(500,TimeUnit.MILLISECONDS);\n  assertEquals(someNamespace,changeEvent.getNamespace());\n  assertEquals(3,changeEvent.changedKeys().size());\n  ConfigChange someKeyChange=changeEvent.getChange(someKey);\n  assertEquals(someValue,someKeyChange.getOldValue());\n  assertEquals(someValueNew,someKeyChange.getNewValue());\n  assertEquals(PropertyChangeType.MODIFIED,someKeyChange.getChangeType());\n  ConfigChange anotherKeyChange=changeEvent.getChange(anotherKey);\n  assertEquals(anotherValue,anotherKeyChange.getOldValue());\n  assertEquals(null,anotherKeyChange.getNewValue());\n  assertEquals(PropertyChangeType.DELETED,anotherKeyChange.getChangeType());\n  ConfigChange newKeyChange=changeEvent.getChange(newKey);\n  assertEquals(null,newKeyChange.getOldValue());\n  assertEquals(newValue,newKeyChange.getNewValue());\n  assertEquals(PropertyChangeType.ADDED,newKeyChange.getChangeType());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 280,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 115,
        "startColumnNumber" : 4,
        "endLineNumber" : 115,
        "endColumnNumber" : 73
      },
      "nodeContext" : "assertEquals(PropertyChangeType.ADDED,newKeyChange.getChangeType());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "com.ctrip.framework.apollo.enums.PropertyChangeType"
  } ],
  "positionList" : [ {
    "charLength" : 24,
    "startLineNumber" : 115,
    "startColumnNumber" : 17,
    "endLineNumber" : 115,
    "endColumnNumber" : 41
  } ],
  "layoutRelationDataList" : [ ]
}