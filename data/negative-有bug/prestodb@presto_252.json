{
  "id" : 252,
  "expression" : "new CallSiteBinder()",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-main/src/main/java/com/facebook/presto/operator/scalar/ArrayConstructor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new CallSiteBinder()",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 171,
      "startColumnNumber" : 32,
      "endLineNumber" : 171,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 171,
        "startColumnNumber" : 23,
        "endLineNumber" : 171,
        "endColumnNumber" : 52
      },
      "nodeContext" : "binder=new CallSiteBinder()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 171,
        "startColumnNumber" : 8,
        "endLineNumber" : 171,
        "endColumnNumber" : 53
      },
      "nodeContext" : "CallSiteBinder binder=new CallSiteBinder();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2291,
        "startLineNumber" : 145,
        "startColumnNumber" : 4,
        "endLineNumber" : 189,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  checkCondition(stackTypes.size() <= 254,NOT_SUPPORTED,\"Too many arguments for array constructor\");\n  List<String> stackTypeNames=stackTypes.stream().map(Class::getSimpleName).collect(toImmutableList());\n  ClassDefinition definition=new ClassDefinition(a(PUBLIC,FINAL),makeClassName(Joiner.on(\"\").join(stackTypeNames) + \"ArrayConstructor\"),type(Object.class));\n  definition.declareDefaultConstructor(a(PRIVATE));\n  ImmutableList.Builder<Parameter> parameters=ImmutableList.builder();\n  for (int i=0; i < stackTypes.size(); i++) {\n    Class<?> stackType=stackTypes.get(i);\n    parameters.add(arg(\"arg\" + i,stackType));\n  }\n  MethodDefinition method=definition.declareMethod(a(PUBLIC,STATIC),\"arrayConstructor\",type(Block.class),parameters.build());\n  Scope scope=method.getScope();\n  BytecodeBlock body=method.getBody();\n  Variable blockBuilderVariable=scope.declareVariable(BlockBuilder.class,\"blockBuilder\");\n  CallSiteBinder binder=new CallSiteBinder();\n  BytecodeExpression createBlockBuilder=blockBuilderVariable.set(constantType(binder,elementType).invoke(\"createBlockBuilder\",BlockBuilder.class,constantNull(BlockBuilderStatus.class),constantInt(stackTypes.size())));\n  body.append(createBlockBuilder);\n  for (int i=0; i < stackTypes.size(); i++) {\n    Variable argument=scope.getVariable(\"arg\" + i);\n    IfStatement ifStatement=new IfStatement().condition(equal(argument,constantNull(stackTypes.get(i)))).ifTrue(blockBuilderVariable.invoke(\"appendNull\",BlockBuilder.class).pop()).ifFalse(constantType(binder,elementType).writeValue(blockBuilderVariable,argument.cast(elementType.getJavaType())));\n    body.append(ifStatement);\n  }\n  body.append(blockBuilderVariable.invoke(\"build\",Block.class).ret());\n  return defineClass(definition,Object.class,binder.getBindings(),new DynamicClassLoader(ArrayConstructor.class.getClassLoader()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 310,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2389,
        "startLineNumber" : 144,
        "startColumnNumber" : 4,
        "endLineNumber" : 189,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static Class<?> generateArrayConstructor(List<Class<?>> stackTypes,Type elementType){\n  checkCondition(stackTypes.size() <= 254,NOT_SUPPORTED,\"Too many arguments for array constructor\");\n  List<String> stackTypeNames=stackTypes.stream().map(Class::getSimpleName).collect(toImmutableList());\n  ClassDefinition definition=new ClassDefinition(a(PUBLIC,FINAL),makeClassName(Joiner.on(\"\").join(stackTypeNames) + \"ArrayConstructor\"),type(Object.class));\n  definition.declareDefaultConstructor(a(PRIVATE));\n  ImmutableList.Builder<Parameter> parameters=ImmutableList.builder();\n  for (int i=0; i < stackTypes.size(); i++) {\n    Class<?> stackType=stackTypes.get(i);\n    parameters.add(arg(\"arg\" + i,stackType));\n  }\n  MethodDefinition method=definition.declareMethod(a(PUBLIC,STATIC),\"arrayConstructor\",type(Block.class),parameters.build());\n  Scope scope=method.getScope();\n  BytecodeBlock body=method.getBody();\n  Variable blockBuilderVariable=scope.declareVariable(BlockBuilder.class,\"blockBuilder\");\n  CallSiteBinder binder=new CallSiteBinder();\n  BytecodeExpression createBlockBuilder=blockBuilderVariable.set(constantType(binder,elementType).invoke(\"createBlockBuilder\",BlockBuilder.class,constantNull(BlockBuilderStatus.class),constantInt(stackTypes.size())));\n  body.append(createBlockBuilder);\n  for (int i=0; i < stackTypes.size(); i++) {\n    Variable argument=scope.getVariable(\"arg\" + i);\n    IfStatement ifStatement=new IfStatement().condition(equal(argument,constantNull(stackTypes.get(i)))).ifTrue(blockBuilderVariable.invoke(\"appendNull\",BlockBuilder.class).pop()).ifFalse(constantType(binder,elementType).writeValue(blockBuilderVariable,argument.cast(elementType.getJavaType())));\n    body.append(ifStatement);\n  }\n  body.append(blockBuilderVariable.invoke(\"build\",Block.class).ret());\n  return defineClass(definition,Object.class,binder.getBindings(),new DynamicClassLoader(ArrayConstructor.class.getClassLoader()));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 331,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 171,
        "startColumnNumber" : 8,
        "endLineNumber" : 171,
        "endColumnNumber" : 53
      },
      "nodeContext" : "CallSiteBinder binder=new CallSiteBinder();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.facebook.presto.bytecode.CallSiteBinder"
  } ],
  "positionList" : [ {
    "charLength" : 20,
    "startLineNumber" : 171,
    "startColumnNumber" : 32,
    "endLineNumber" : 171,
    "endColumnNumber" : 52
  } ],
  "layoutRelationDataList" : [ ]
}