{
  "id" : 429,
  "expression" : "Recipient::requireServiceId",
  "projectName" : "signalapp@Signal-Android",
  "commitID" : "7e91132e7ed62a58b5f347de252ab1eda3f43b90",
  "filePath" : "/app/src/main/java/org/thoughtcrime/securesms/crypto/storage/TextSecureIdentityKeyStore.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Recipient::requireServiceId",
    "nodeType" : "ExpressionMethodReference",
    "nodePosition" : {
      "charLength" : 27,
      "startLineNumber" : 167,
      "startColumnNumber" : 47,
      "endLineNumber" : 167,
      "endColumnNumber" : 74
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 178,
        "startLineNumber" : 165,
        "startColumnNumber" : 32,
        "endLineNumber" : 167,
        "endColumnNumber" : 75
      },
      "nodeContext" : "recipients.stream().filter(Recipient::hasServiceIdentifier).map(Recipient::requireServiceId)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 250,
        "startLineNumber" : 165,
        "startColumnNumber" : 32,
        "endLineNumber" : 168,
        "endColumnNumber" : 71
      },
      "nodeContext" : "recipients.stream().filter(Recipient::hasServiceIdentifier).map(Recipient::requireServiceId).collect(Collectors.toList())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 265,
        "startLineNumber" : 165,
        "startColumnNumber" : 17,
        "endLineNumber" : 168,
        "endColumnNumber" : 71
      },
      "nodeContext" : "addressNames=recipients.stream().filter(Recipient::hasServiceIdentifier).map(Recipient::requireServiceId).collect(Collectors.toList())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 279,
        "startLineNumber" : 165,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 72
      },
      "nodeContext" : "List<String> addressNames=recipients.stream().filter(Recipient::hasServiceIdentifier).map(Recipient::requireServiceId).collect(Collectors.toList());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 26,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 875,
        "startLineNumber" : 164,
        "startColumnNumber" : 93,
        "endLineNumber" : 189,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<String> addressNames=recipients.stream().filter(Recipient::hasServiceIdentifier).map(Recipient::requireServiceId).collect(Collectors.toList());\n  if (addressNames.isEmpty()) {\n    return IdentityRecordList.EMPTY;\n  }\n  List<IdentityRecord> records=new ArrayList<>(recipients.size());\n  for (  Recipient recipient : recipients) {\n    if (recipient.hasServiceIdentifier()) {\n      IdentityStoreRecord record=cache.get(recipient.requireServiceId());\n      if (record != null) {\n        records.add(record.toIdentityRecord(recipient.getId()));\n      }\n    }\n else {\n      Log.w(TAG,\"[getIdentityRecords] No serviceId for \" + recipient.getId());\n    }\n  }\n  return new IdentityRecordList(records);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 105,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 966,
        "startLineNumber" : 164,
        "startColumnNumber" : 2,
        "endLineNumber" : 189,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public @NonNull IdentityRecordList getIdentityRecords(@NonNull List<Recipient> recipients){\n  List<String> addressNames=recipients.stream().filter(Recipient::hasServiceIdentifier).map(Recipient::requireServiceId).collect(Collectors.toList());\n  if (addressNames.isEmpty()) {\n    return IdentityRecordList.EMPTY;\n  }\n  List<IdentityRecord> records=new ArrayList<>(recipients.size());\n  for (  Recipient recipient : recipients) {\n    if (recipient.hasServiceIdentifier()) {\n      IdentityStoreRecord record=cache.get(recipient.requireServiceId());\n      if (record != null) {\n        records.add(record.toIdentityRecord(recipient.getId()));\n      }\n    }\n else {\n      Log.w(TAG,\"[getIdentityRecords] No serviceId for \" + recipient.getId());\n    }\n  }\n  return new IdentityRecordList(records);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 121,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 178,
        "startLineNumber" : 165,
        "startColumnNumber" : 32,
        "endLineNumber" : 167,
        "endColumnNumber" : 75
      },
      "nodeContext" : "recipients.stream().filter(Recipient::hasServiceIdentifier).map(Recipient::requireServiceId)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.util.function.Function<? super org.thoughtcrime.securesms.recipients.Recipient,? extends java.lang.String>"
  } ],
  "positionList" : [ {
    "charLength" : 27,
    "startLineNumber" : 167,
    "startColumnNumber" : 47,
    "endLineNumber" : 167,
    "endColumnNumber" : 74
  } ],
  "layoutRelationDataList" : [ ]
}