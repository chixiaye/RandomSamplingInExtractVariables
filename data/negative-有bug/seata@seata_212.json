{
  "id" : 212,
  "expression" : "index + 1",
  "projectName" : "seata@seata",
  "commitID" : "42d41623178ab076b11b27a0f049ac3ed7f1a9dc",
  "filePath" : "/discovery/seata-discovery-core/src/main/java/io/seata/discovery/loadbalance/XIDLoadBalance.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "index + 1",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 53,
      "startColumnNumber" : 64,
      "endLineNumber" : 53,
      "endColumnNumber" : 73
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 53,
        "startColumnNumber" : 40,
        "endLineNumber" : 53,
        "endColumnNumber" : 74
      },
      "nodeContext" : "serverAddress.substring(index + 1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 53,
        "startColumnNumber" : 23,
        "endLineNumber" : 53,
        "endColumnNumber" : 75
      },
      "nodeContext" : "Integer.parseInt(serverAddress.substring(index + 1))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 53,
        "startColumnNumber" : 16,
        "endLineNumber" : 53,
        "endColumnNumber" : 75
      },
      "nodeContext" : "port=Integer.parseInt(serverAddress.substring(index + 1))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 53,
        "startColumnNumber" : 12,
        "endLineNumber" : 53,
        "endColumnNumber" : 76
      },
      "nodeContext" : "int port=Integer.parseInt(serverAddress.substring(index + 1));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 871,
        "startLineNumber" : 48,
        "startColumnNumber" : 64,
        "endLineNumber" : 64,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String serverAddress=xid.substring(0,xid.lastIndexOf(SPLIT));\n  int index=serverAddress.lastIndexOf(SPLIT);\n  int port=Integer.parseInt(serverAddress.substring(index + 1));\n  String ip=serverAddress.substring(0,index);\n  InetSocketAddress xidInetSocketAddress=new InetSocketAddress(ip,port);\n  for (  T invoker : invokers) {\n    InetSocketAddress inetSocketAddress=(InetSocketAddress)invoker;\n    if (Objects.equals(xidInetSocketAddress,inetSocketAddress)) {\n      return (T)inetSocketAddress;\n    }\n  }\n  LOGGER.error(\"not found seata-server channel,xid: {}, try use random load balance\",xid);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 89,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 927,
        "startLineNumber" : 48,
        "startColumnNumber" : 8,
        "endLineNumber" : 64,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (StringUtils.isNotBlank(xid) && xid.contains(SPLIT)) {\n  String serverAddress=xid.substring(0,xid.lastIndexOf(SPLIT));\n  int index=serverAddress.lastIndexOf(SPLIT);\n  int port=Integer.parseInt(serverAddress.substring(index + 1));\n  String ip=serverAddress.substring(0,index);\n  InetSocketAddress xidInetSocketAddress=new InetSocketAddress(ip,port);\n  for (  T invoker : invokers) {\n    InetSocketAddress inetSocketAddress=(InetSocketAddress)invoker;\n    if (Objects.equals(xidInetSocketAddress,inetSocketAddress)) {\n      return (T)inetSocketAddress;\n    }\n  }\n  LOGGER.error(\"not found seata-server channel,xid: {}, try use random load balance\",xid);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 99,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1004,
        "startLineNumber" : 47,
        "startColumnNumber" : 71,
        "endLineNumber" : 66,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (StringUtils.isNotBlank(xid) && xid.contains(SPLIT)) {\n    String serverAddress=xid.substring(0,xid.lastIndexOf(SPLIT));\n    int index=serverAddress.lastIndexOf(SPLIT);\n    int port=Integer.parseInt(serverAddress.substring(index + 1));\n    String ip=serverAddress.substring(0,index);\n    InetSocketAddress xidInetSocketAddress=new InetSocketAddress(ip,port);\n    for (    T invoker : invokers) {\n      InetSocketAddress inetSocketAddress=(InetSocketAddress)invoker;\n      if (Objects.equals(xidInetSocketAddress,inetSocketAddress)) {\n        return (T)inetSocketAddress;\n      }\n    }\n    LOGGER.error(\"not found seata-server channel,xid: {}, try use random load balance\",xid);\n  }\n  return RANDOM_LOAD_BALANCE.select(invokers,xid);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 106,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1086,
        "startLineNumber" : 46,
        "startColumnNumber" : 4,
        "endLineNumber" : 66,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public <T>T select(List<T> invokers,String xid) throws Exception {\n  if (StringUtils.isNotBlank(xid) && xid.contains(SPLIT)) {\n    String serverAddress=xid.substring(0,xid.lastIndexOf(SPLIT));\n    int index=serverAddress.lastIndexOf(SPLIT);\n    int port=Integer.parseInt(serverAddress.substring(index + 1));\n    String ip=serverAddress.substring(0,index);\n    InetSocketAddress xidInetSocketAddress=new InetSocketAddress(ip,port);\n    for (    T invoker : invokers) {\n      InetSocketAddress inetSocketAddress=(InetSocketAddress)invoker;\n      if (Objects.equals(xidInetSocketAddress,inetSocketAddress)) {\n        return (T)inetSocketAddress;\n      }\n    }\n    LOGGER.error(\"not found seata-server channel,xid: {}, try use random load balance\",xid);\n  }\n  return RANDOM_LOAD_BALANCE.select(invokers,xid);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 128,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 53,
        "startColumnNumber" : 12,
        "endLineNumber" : 53,
        "endColumnNumber" : 76
      },
      "nodeContext" : "int port=Integer.parseInt(serverAddress.substring(index + 1));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 53,
    "startColumnNumber" : 64,
    "endLineNumber" : 53,
    "endColumnNumber" : 73
  } ],
  "layoutRelationDataList" : [ ]
}