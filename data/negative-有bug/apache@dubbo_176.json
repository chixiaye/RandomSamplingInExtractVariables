{
  "id" : 176,
  "expression" : "provider != null && StringUtils.isEmpty(hostToBind)",
  "projectName" : "apache@dubbo",
  "commitID" : "4ea0a09846fa74b7b1a6a1a548f31859a2cddcc8",
  "filePath" : "/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "provider != null && StringUtils.isEmpty(hostToBind)",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 51,
      "startLineNumber" : 579,
      "startColumnNumber" : 16,
      "endLineNumber" : 579,
      "endColumnNumber" : 67
    },
    "astNodeNumber" : 8,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 121,
        "startLineNumber" : 579,
        "startColumnNumber" : 12,
        "endLineNumber" : 581,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (provider != null && StringUtils.isEmpty(hostToBind)) {\n  hostToBind=provider.getHost();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1871,
        "startLineNumber" : 577,
        "startColumnNumber" : 45,
        "endLineNumber" : 614,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  hostToBind=protocolConfig.getHost();\n  if (provider != null && StringUtils.isEmpty(hostToBind)) {\n    hostToBind=provider.getHost();\n  }\n  if (isInvalidLocalHost(hostToBind)) {\n    anyhost=true;\n    try {\n      if (logger.isDebugEnabled()) {\n        logger.info(\"No valid ip found from environment, try to find valid host from DNS.\");\n      }\n      hostToBind=InetAddress.getLocalHost().getHostAddress();\n    }\n catch (    UnknownHostException e) {\n      logger.warn(e.getMessage(),e);\n    }\n    if (isInvalidLocalHost(hostToBind)) {\n      if (CollectionUtils.isNotEmpty(registryURLs)) {\n        for (        URL registryURL : registryURLs) {\n          if (MULTICAST.equalsIgnoreCase(registryURL.getParameter(\"registry\"))) {\n            continue;\n          }\n          try (Socket socket=new Socket()){\n            SocketAddress addr=new InetSocketAddress(registryURL.getHost(),registryURL.getPort());\n            socket.connect(addr,1000);\n            hostToBind=socket.getLocalAddress().getHostAddress();\n            break;\n          }\n catch (          Exception e) {\n            logger.warn(e.getMessage(),e);\n          }\n        }\n      }\n      if (isInvalidLocalHost(hostToBind)) {\n        hostToBind=getLocalHost();\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 157,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1908,
        "startLineNumber" : 577,
        "startColumnNumber" : 8,
        "endLineNumber" : 614,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (StringUtils.isEmpty(hostToBind)) {\n  hostToBind=protocolConfig.getHost();\n  if (provider != null && StringUtils.isEmpty(hostToBind)) {\n    hostToBind=provider.getHost();\n  }\n  if (isInvalidLocalHost(hostToBind)) {\n    anyhost=true;\n    try {\n      if (logger.isDebugEnabled()) {\n        logger.info(\"No valid ip found from environment, try to find valid host from DNS.\");\n      }\n      hostToBind=InetAddress.getLocalHost().getHostAddress();\n    }\n catch (    UnknownHostException e) {\n      logger.warn(e.getMessage(),e);\n    }\n    if (isInvalidLocalHost(hostToBind)) {\n      if (CollectionUtils.isNotEmpty(registryURLs)) {\n        for (        URL registryURL : registryURLs) {\n          if (MULTICAST.equalsIgnoreCase(registryURL.getParameter(\"registry\"))) {\n            continue;\n          }\n          try (Socket socket=new Socket()){\n            SocketAddress addr=new InetSocketAddress(registryURL.getHost(),registryURL.getPort());\n            socket.connect(addr,1000);\n            hostToBind=socket.getLocalAddress().getHostAddress();\n            break;\n          }\n catch (          Exception e) {\n            logger.warn(e.getMessage(),e);\n          }\n        }\n      }\n      if (isInvalidLocalHost(hostToBind)) {\n        hostToBind=getLocalHost();\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 162,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3052,
        "startLineNumber" : 568,
        "startColumnNumber" : 62,
        "endLineNumber" : 630,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean anyhost=false;\n  String hostToBind=getValueFromConfig(protocolConfig,DUBBO_IP_TO_BIND);\n  if (hostToBind != null && hostToBind.length() > 0 && isInvalidLocalHost(hostToBind)) {\n    throw new IllegalArgumentException(\"Specified invalid bind ip from property:\" + DUBBO_IP_TO_BIND + \", value:\"+ hostToBind);\n  }\n  if (StringUtils.isEmpty(hostToBind)) {\n    hostToBind=protocolConfig.getHost();\n    if (provider != null && StringUtils.isEmpty(hostToBind)) {\n      hostToBind=provider.getHost();\n    }\n    if (isInvalidLocalHost(hostToBind)) {\n      anyhost=true;\n      try {\n        if (logger.isDebugEnabled()) {\n          logger.info(\"No valid ip found from environment, try to find valid host from DNS.\");\n        }\n        hostToBind=InetAddress.getLocalHost().getHostAddress();\n      }\n catch (      UnknownHostException e) {\n        logger.warn(e.getMessage(),e);\n      }\n      if (isInvalidLocalHost(hostToBind)) {\n        if (CollectionUtils.isNotEmpty(registryURLs)) {\n          for (          URL registryURL : registryURLs) {\n            if (MULTICAST.equalsIgnoreCase(registryURL.getParameter(\"registry\"))) {\n              continue;\n            }\n            try (Socket socket=new Socket()){\n              SocketAddress addr=new InetSocketAddress(registryURL.getHost(),registryURL.getPort());\n              socket.connect(addr,1000);\n              hostToBind=socket.getLocalAddress().getHostAddress();\n              break;\n            }\n catch (            Exception e) {\n              logger.warn(e.getMessage(),e);\n            }\n          }\n        }\n        if (isInvalidLocalHost(hostToBind)) {\n          hostToBind=getLocalHost();\n        }\n      }\n    }\n  }\n  map.put(BIND_IP_KEY,hostToBind);\n  String hostToRegistry=getValueFromConfig(protocolConfig,DUBBO_IP_TO_REGISTRY);\n  if (hostToRegistry != null && hostToRegistry.length() > 0 && isInvalidLocalHost(hostToRegistry)) {\n    throw new IllegalArgumentException(\"Specified invalid registry ip from property:\" + DUBBO_IP_TO_REGISTRY + \", value:\"+ hostToRegistry);\n  }\n else   if (StringUtils.isEmpty(hostToRegistry)) {\n    hostToRegistry=hostToBind;\n  }\n  map.put(ANYHOST_KEY,String.valueOf(anyhost));\n  return hostToRegistry;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 261,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3631,
        "startLineNumber" : 556,
        "startColumnNumber" : 4,
        "endLineNumber" : 630,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Register & bind IP address for service provider, can be configured separately. Configuration priority: environment variables -> java system properties -> host property in config file -> /etc/hosts -> default network address -> first available network address\n * @param protocolConfig\n * @param registryURLs\n * @param map\n * @return\n */\nprivate String findConfigedHosts(ProtocolConfig protocolConfig,List<URL> registryURLs,Map<String,String> map){\n  boolean anyhost=false;\n  String hostToBind=getValueFromConfig(protocolConfig,DUBBO_IP_TO_BIND);\n  if (hostToBind != null && hostToBind.length() > 0 && isInvalidLocalHost(hostToBind)) {\n    throw new IllegalArgumentException(\"Specified invalid bind ip from property:\" + DUBBO_IP_TO_BIND + \", value:\"+ hostToBind);\n  }\n  if (StringUtils.isEmpty(hostToBind)) {\n    hostToBind=protocolConfig.getHost();\n    if (provider != null && StringUtils.isEmpty(hostToBind)) {\n      hostToBind=provider.getHost();\n    }\n    if (isInvalidLocalHost(hostToBind)) {\n      anyhost=true;\n      try {\n        if (logger.isDebugEnabled()) {\n          logger.info(\"No valid ip found from environment, try to find valid host from DNS.\");\n        }\n        hostToBind=InetAddress.getLocalHost().getHostAddress();\n      }\n catch (      UnknownHostException e) {\n        logger.warn(e.getMessage(),e);\n      }\n      if (isInvalidLocalHost(hostToBind)) {\n        if (CollectionUtils.isNotEmpty(registryURLs)) {\n          for (          URL registryURL : registryURLs) {\n            if (MULTICAST.equalsIgnoreCase(registryURL.getParameter(\"registry\"))) {\n              continue;\n            }\n            try (Socket socket=new Socket()){\n              SocketAddress addr=new InetSocketAddress(registryURL.getHost(),registryURL.getPort());\n              socket.connect(addr,1000);\n              hostToBind=socket.getLocalAddress().getHostAddress();\n              break;\n            }\n catch (            Exception e) {\n              logger.warn(e.getMessage(),e);\n            }\n          }\n        }\n        if (isInvalidLocalHost(hostToBind)) {\n          hostToBind=getLocalHost();\n        }\n      }\n    }\n  }\n  map.put(BIND_IP_KEY,hostToBind);\n  String hostToRegistry=getValueFromConfig(protocolConfig,DUBBO_IP_TO_REGISTRY);\n  if (hostToRegistry != null && hostToRegistry.length() > 0 && isInvalidLocalHost(hostToRegistry)) {\n    throw new IllegalArgumentException(\"Specified invalid registry ip from property:\" + DUBBO_IP_TO_REGISTRY + \", value:\"+ hostToRegistry);\n  }\n else   if (StringUtils.isEmpty(hostToRegistry)) {\n    hostToRegistry=hostToBind;\n  }\n  map.put(ANYHOST_KEY,String.valueOf(anyhost));\n  return hostToRegistry;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 287,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 121,
        "startLineNumber" : 579,
        "startColumnNumber" : 12,
        "endLineNumber" : 581,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (provider != null && StringUtils.isEmpty(hostToBind)) {\n  hostToBind=provider.getHost();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    },
    "tokenLength" : 7,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 51,
    "startLineNumber" : 579,
    "startColumnNumber" : 16,
    "endLineNumber" : 579,
    "endColumnNumber" : 67
  } ],
  "layoutRelationDataList" : [ ]
}