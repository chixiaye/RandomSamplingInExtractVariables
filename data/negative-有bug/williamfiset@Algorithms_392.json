{
  "id" : 392,
  "expression" : "TL",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/strings/RabinKarp.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "TL",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 80,
      "startColumnNumber" : 13,
      "endLineNumber" : 80,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 15
      },
      "nodeContext" : "PL > TL",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 80,
        "startColumnNumber" : 4,
        "endLineNumber" : 80,
        "endColumnNumber" : 32
      },
      "nodeContext" : "if (PL > TL) return matches;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1113,
        "startLineNumber" : 73,
        "startColumnNumber" : 69,
        "endLineNumber" : 107,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<Integer> matches=new ArrayList<>();\n  if (text == null || pattern == null)   return matches;\n  final int PL=pattern.length(), TL=text.length();\n  if (PL > TL)   return matches;\n  long[] patternHash=computeHash(pattern);\n  long[] rollingHash=computeHash(text.substring(0,PL));\n  final BigInteger BIG_PL=new BigInteger(String.valueOf(PL));\n  final long[] POWERS=new long[N_HASHES];\n  for (int i=0; i < N_HASHES; i++)   POWERS[i]=BIG_ALPHA.modPow(BIG_PL,BIG_MODS[i]).longValue();\n  for (int i=PL - 1; ; ) {\n    if (Arrays.equals(patternHash,rollingHash)) {\n      matches.add(i - PL + 1);\n    }\n    if (++i == TL)     return matches;\n    char firstValue=text.charAt(i - PL);\n    char lastValue=text.charAt(i);\n    for (int j=0; j < patternHash.length; j++) {\n      rollingHash[j]=addRight(rollingHash[j],lastValue,j);\n      rollingHash[j]=removeLeft(rollingHash[j],POWERS[j],firstValue,j);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 205,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1180,
        "startLineNumber" : 73,
        "startColumnNumber" : 2,
        "endLineNumber" : 107,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static List<Integer> rabinKarp(String text,String pattern){\n  List<Integer> matches=new ArrayList<>();\n  if (text == null || pattern == null)   return matches;\n  final int PL=pattern.length(), TL=text.length();\n  if (PL > TL)   return matches;\n  long[] patternHash=computeHash(pattern);\n  long[] rollingHash=computeHash(text.substring(0,PL));\n  final BigInteger BIG_PL=new BigInteger(String.valueOf(PL));\n  final long[] POWERS=new long[N_HASHES];\n  for (int i=0; i < N_HASHES; i++)   POWERS[i]=BIG_ALPHA.modPow(BIG_PL,BIG_MODS[i]).longValue();\n  for (int i=PL - 1; ; ) {\n    if (Arrays.equals(patternHash,rollingHash)) {\n      matches.add(i - PL + 1);\n    }\n    if (++i == TL)     return matches;\n    char firstValue=text.charAt(i - PL);\n    char lastValue=text.charAt(i);\n    for (int j=0; j < patternHash.length; j++) {\n      rollingHash[j]=addRight(rollingHash[j],lastValue,j);\n      rollingHash[j]=removeLeft(rollingHash[j],POWERS[j],firstValue,j);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 222,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 80,
        "startColumnNumber" : 4,
        "endLineNumber" : 80,
        "endColumnNumber" : 32
      },
      "nodeContext" : "if (PL > TL) return matches;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "TL",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 96,
      "startColumnNumber" : 17,
      "endLineNumber" : 96,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 96,
        "startColumnNumber" : 10,
        "endLineNumber" : 96,
        "endColumnNumber" : 19
      },
      "nodeContext" : "++i == TL",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 96,
        "startColumnNumber" : 6,
        "endLineNumber" : 96,
        "endColumnNumber" : 36
      },
      "nodeContext" : "if (++i == TL) return matches;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 459,
        "startLineNumber" : 91,
        "startColumnNumber" : 29,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (Arrays.equals(patternHash,rollingHash)) {\n    matches.add(i - PL + 1);\n  }\n  if (++i == TL)   return matches;\n  char firstValue=text.charAt(i - PL);\n  char lastValue=text.charAt(i);\n  for (int j=0; j < patternHash.length; j++) {\n    rollingHash[j]=addRight(rollingHash[j],lastValue,j);\n    rollingHash[j]=removeLeft(rollingHash[j],POWERS[j],firstValue,j);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 83,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 484,
        "startLineNumber" : 91,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=PL - 1; ; ) {\n  if (Arrays.equals(patternHash,rollingHash)) {\n    matches.add(i - PL + 1);\n  }\n  if (++i == TL)   return matches;\n  char firstValue=text.charAt(i - PL);\n  char lastValue=text.charAt(i);\n  for (int j=0; j < patternHash.length; j++) {\n    rollingHash[j]=addRight(rollingHash[j],lastValue,j);\n    rollingHash[j]=removeLeft(rollingHash[j],POWERS[j],firstValue,j);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 91,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1113,
        "startLineNumber" : 73,
        "startColumnNumber" : 69,
        "endLineNumber" : 107,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<Integer> matches=new ArrayList<>();\n  if (text == null || pattern == null)   return matches;\n  final int PL=pattern.length(), TL=text.length();\n  if (PL > TL)   return matches;\n  long[] patternHash=computeHash(pattern);\n  long[] rollingHash=computeHash(text.substring(0,PL));\n  final BigInteger BIG_PL=new BigInteger(String.valueOf(PL));\n  final long[] POWERS=new long[N_HASHES];\n  for (int i=0; i < N_HASHES; i++)   POWERS[i]=BIG_ALPHA.modPow(BIG_PL,BIG_MODS[i]).longValue();\n  for (int i=PL - 1; ; ) {\n    if (Arrays.equals(patternHash,rollingHash)) {\n      matches.add(i - PL + 1);\n    }\n    if (++i == TL)     return matches;\n    char firstValue=text.charAt(i - PL);\n    char lastValue=text.charAt(i);\n    for (int j=0; j < patternHash.length; j++) {\n      rollingHash[j]=addRight(rollingHash[j],lastValue,j);\n      rollingHash[j]=removeLeft(rollingHash[j],POWERS[j],firstValue,j);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 205,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1180,
        "startLineNumber" : 73,
        "startColumnNumber" : 2,
        "endLineNumber" : 107,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static List<Integer> rabinKarp(String text,String pattern){\n  List<Integer> matches=new ArrayList<>();\n  if (text == null || pattern == null)   return matches;\n  final int PL=pattern.length(), TL=text.length();\n  if (PL > TL)   return matches;\n  long[] patternHash=computeHash(pattern);\n  long[] rollingHash=computeHash(text.substring(0,PL));\n  final BigInteger BIG_PL=new BigInteger(String.valueOf(PL));\n  final long[] POWERS=new long[N_HASHES];\n  for (int i=0; i < N_HASHES; i++)   POWERS[i]=BIG_ALPHA.modPow(BIG_PL,BIG_MODS[i]).longValue();\n  for (int i=PL - 1; ; ) {\n    if (Arrays.equals(patternHash,rollingHash)) {\n      matches.add(i - PL + 1);\n    }\n    if (++i == TL)     return matches;\n    char firstValue=text.charAt(i - PL);\n    char lastValue=text.charAt(i);\n    for (int j=0; j < patternHash.length; j++) {\n      rollingHash[j]=addRight(rollingHash[j],lastValue,j);\n      rollingHash[j]=removeLeft(rollingHash[j],POWERS[j],firstValue,j);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 222,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 96,
        "startColumnNumber" : 6,
        "endLineNumber" : 96,
        "endColumnNumber" : 36
      },
      "nodeContext" : "if (++i == TL) return matches;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 80,
    "startColumnNumber" : 13,
    "endLineNumber" : 80,
    "endColumnNumber" : 15
  }, {
    "charLength" : 2,
    "startLineNumber" : 96,
    "startColumnNumber" : 17,
    "endLineNumber" : 96,
    "endColumnNumber" : 19
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}