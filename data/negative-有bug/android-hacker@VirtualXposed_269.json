{
  "id" : 269,
  "expression" : "new RuntimeException(\"Unable to create application \" + mInitialApplication.getClass().getName() + \": \"+ e.toString(),e)",
  "projectName" : "android-hacker@VirtualXposed",
  "commitID" : "8e98dd20e6a751089d4eb2642fa6bf088a3e7a79",
  "filePath" : "/VirtualApp/lib/src/main/java/com/lody/virtual/client/VClientImpl.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new RuntimeException(\"Unable to create application \" + mInitialApplication.getClass().getName() + \": \"+ e.toString(),e)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 178,
      "startLineNumber" : 313,
      "startColumnNumber" : 22,
      "endLineNumber" : 315,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 15,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 185,
        "startLineNumber" : 313,
        "startColumnNumber" : 16,
        "endLineNumber" : 315,
        "endColumnNumber" : 58
      },
      "nodeContext" : "throw new RuntimeException(\"Unable to create application \" + mInitialApplication.getClass().getName() + \": \"+ e.toString(),e);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 217,
        "startLineNumber" : 312,
        "startColumnNumber" : 71,
        "endLineNumber" : 316,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  throw new RuntimeException(\"Unable to create application \" + mInitialApplication.getClass().getName() + \": \"+ e.toString(),e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 276,
        "startLineNumber" : 312,
        "startColumnNumber" : 12,
        "endLineNumber" : 316,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!mInstrumentation.onException(mInitialApplication,e)) {\n  throw new RuntimeException(\"Unable to create application \" + mInitialApplication.getClass().getName() + \": \"+ e.toString(),e);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 24,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 300,
        "startLineNumber" : 311,
        "startColumnNumber" : 30,
        "endLineNumber" : 317,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (!mInstrumentation.onException(mInitialApplication,e)) {\n    throw new RuntimeException(\"Unable to create application \" + mInitialApplication.getClass().getName() + \": \"+ e.toString(),e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 25,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 320,
        "startLineNumber" : 311,
        "startColumnNumber" : 10,
        "endLineNumber" : 317,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (Exception e) {\n  if (!mInstrumentation.onException(mInitialApplication,e)) {\n    throw new RuntimeException(\"Unable to create application \" + mInitialApplication.getClass().getName() + \": \"+ e.toString(),e);\n  }\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 30,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 811,
        "startLineNumber" : 301,
        "startColumnNumber" : 8,
        "endLineNumber" : 317,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  mInstrumentation.callApplicationOnCreate(mInitialApplication);\n  InvocationStubManager.getInstance().checkEnv(HCallbackStub.class);\n  if (conflict) {\n    InvocationStubManager.getInstance().checkEnv(AppInstrumentation.class);\n  }\n  Application createdApp=ActivityThread.mInitialApplication.get(mainThread);\n  if (createdApp != null) {\n    mInitialApplication=createdApp;\n  }\n}\n catch (Exception e) {\n  if (!mInstrumentation.onException(mInitialApplication,e)) {\n    throw new RuntimeException(\"Unable to create application \" + mInitialApplication.getClass().getName() + \": \"+ e.toString(),e);\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 78,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5604,
        "startLineNumber" : 198,
        "startColumnNumber" : 104,
        "endLineNumber" : 319,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  mTempLock=lock;\n  try {\n    setupUncaughtHandler();\n  }\n catch (  Throwable e) {\n    e.printStackTrace();\n  }\n  try {\n    fixInstalledProviders();\n  }\n catch (  Throwable e) {\n    e.printStackTrace();\n  }\n  ActivityThread.mInitialApplication.set(VirtualCore.mainThread(),null);\n  AppBindData data=new AppBindData();\n  InstalledAppInfo info=VirtualCore.get().getInstalledAppInfo(packageName,0);\n  if (info == null) {\n    new Exception(\"App not exist!\").printStackTrace();\n    Process.killProcess(0);\n    System.exit(0);\n  }\n  if (!info.dependSystem && info.skipDexOpt) {\n    VLog.d(TAG,\"Dex opt skipped.\");\n    if (VirtualRuntime.isArt()) {\n      ARTUtils.init(VirtualCore.get().getContext());\n      ARTUtils.setIsDex2oatEnabled(false);\n    }\n else {\n      DalvikUtils.init();\n      DalvikUtils.setDexOptMode(DalvikUtils.OPTIMIZE_MODE_NONE);\n    }\n  }\n  data.appInfo=VPackageManager.get().getApplicationInfo(packageName,0,getUserId(vuid));\n  data.processName=processName;\n  data.providers=VPackageManager.get().queryContentProviders(processName,getVUid(),PackageManager.GET_META_DATA);\n  Log.i(TAG,\"Binding application \" + data.appInfo.packageName + \" (\"+ data.processName+ \")\");\n  mBoundApplication=data;\n  VirtualRuntime.setupRuntime(data.processName,data.appInfo);\n  int targetSdkVersion=data.appInfo.targetSdkVersion;\n  if (targetSdkVersion < Build.VERSION_CODES.GINGERBREAD) {\n    StrictMode.ThreadPolicy newPolicy=new StrictMode.ThreadPolicy.Builder(StrictMode.getThreadPolicy()).permitNetwork().build();\n    StrictMode.setThreadPolicy(newPolicy);\n  }\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n    if (mirror.android.os.StrictMode.sVmPolicyMask != null) {\n      mirror.android.os.StrictMode.sVmPolicyMask.set(0);\n    }\n  }\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP && targetSdkVersion < Build.VERSION_CODES.LOLLIPOP) {\n    mirror.android.os.Message.updateCheckRecycle.call(targetSdkVersion);\n  }\n  if (StubManifest.ENABLE_IO_REDIRECT) {\n    startIOUniformer();\n  }\n  NativeEngine.hookNative();\n  Object mainThread=VirtualCore.mainThread();\n  NativeEngine.startDexOverride();\n  Context context=createPackageContext(data.appInfo.packageName);\n  System.setProperty(\"java.io.tmpdir\",context.getCacheDir().getAbsolutePath());\n  File codeCacheDir;\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n    codeCacheDir=context.getCodeCacheDir();\n  }\n else {\n    codeCacheDir=context.getCacheDir();\n  }\n  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N) {\n    if (HardwareRenderer.setupDiskCache != null) {\n      HardwareRenderer.setupDiskCache.call(codeCacheDir);\n    }\n  }\n else {\n    if (ThreadedRenderer.setupDiskCache != null) {\n      ThreadedRenderer.setupDiskCache.call(codeCacheDir);\n    }\n  }\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n    if (RenderScriptCacheDir.setupDiskCache != null) {\n      RenderScriptCacheDir.setupDiskCache.call(codeCacheDir);\n    }\n  }\n else   if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {\n    if (RenderScript.setupDiskCache != null) {\n      RenderScript.setupDiskCache.call(codeCacheDir);\n    }\n  }\n  Object boundApp=fixBoundApp(mBoundApplication);\n  mBoundApplication.info=ContextImpl.mPackageInfo.get(context);\n  mirror.android.app.ActivityThread.AppBindData.info.set(boundApp,data.info);\n  VMRuntime.setTargetSdkVersion.call(VMRuntime.getRuntime.call(),data.appInfo.targetSdkVersion);\n  boolean conflict=SpecialComponentList.isConflictingInstrumentation(packageName);\n  if (!conflict) {\n    InvocationStubManager.getInstance().checkEnv(AppInstrumentation.class);\n  }\n  mInitialApplication=LoadedApk.makeApplication.call(data.info,false,null);\n  mirror.android.app.ActivityThread.mInitialApplication.set(mainThread,mInitialApplication);\n  ContextFixer.fixContext(mInitialApplication);\n  if (data.providers != null) {\n    installContentProviders(mInitialApplication,data.providers);\n  }\n  if (lock != null) {\n    lock.open();\n    mTempLock=null;\n  }\n  try {\n    mInstrumentation.callApplicationOnCreate(mInitialApplication);\n    InvocationStubManager.getInstance().checkEnv(HCallbackStub.class);\n    if (conflict) {\n      InvocationStubManager.getInstance().checkEnv(AppInstrumentation.class);\n    }\n    Application createdApp=ActivityThread.mInitialApplication.get(mainThread);\n    if (createdApp != null) {\n      mInitialApplication=createdApp;\n    }\n  }\n catch (  Exception e) {\n    if (!mInstrumentation.onException(mInitialApplication,e)) {\n      throw new RuntimeException(\"Unable to create application \" + mInitialApplication.getClass().getName() + \": \"+ e.toString(),e);\n    }\n  }\n  VActivityManager.get().appDoneExecuting();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 709,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5704,
        "startLineNumber" : 198,
        "startColumnNumber" : 4,
        "endLineNumber" : 319,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void bindApplicationNoCheck(String packageName,String processName,ConditionVariable lock){\n  mTempLock=lock;\n  try {\n    setupUncaughtHandler();\n  }\n catch (  Throwable e) {\n    e.printStackTrace();\n  }\n  try {\n    fixInstalledProviders();\n  }\n catch (  Throwable e) {\n    e.printStackTrace();\n  }\n  ActivityThread.mInitialApplication.set(VirtualCore.mainThread(),null);\n  AppBindData data=new AppBindData();\n  InstalledAppInfo info=VirtualCore.get().getInstalledAppInfo(packageName,0);\n  if (info == null) {\n    new Exception(\"App not exist!\").printStackTrace();\n    Process.killProcess(0);\n    System.exit(0);\n  }\n  if (!info.dependSystem && info.skipDexOpt) {\n    VLog.d(TAG,\"Dex opt skipped.\");\n    if (VirtualRuntime.isArt()) {\n      ARTUtils.init(VirtualCore.get().getContext());\n      ARTUtils.setIsDex2oatEnabled(false);\n    }\n else {\n      DalvikUtils.init();\n      DalvikUtils.setDexOptMode(DalvikUtils.OPTIMIZE_MODE_NONE);\n    }\n  }\n  data.appInfo=VPackageManager.get().getApplicationInfo(packageName,0,getUserId(vuid));\n  data.processName=processName;\n  data.providers=VPackageManager.get().queryContentProviders(processName,getVUid(),PackageManager.GET_META_DATA);\n  Log.i(TAG,\"Binding application \" + data.appInfo.packageName + \" (\"+ data.processName+ \")\");\n  mBoundApplication=data;\n  VirtualRuntime.setupRuntime(data.processName,data.appInfo);\n  int targetSdkVersion=data.appInfo.targetSdkVersion;\n  if (targetSdkVersion < Build.VERSION_CODES.GINGERBREAD) {\n    StrictMode.ThreadPolicy newPolicy=new StrictMode.ThreadPolicy.Builder(StrictMode.getThreadPolicy()).permitNetwork().build();\n    StrictMode.setThreadPolicy(newPolicy);\n  }\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n    if (mirror.android.os.StrictMode.sVmPolicyMask != null) {\n      mirror.android.os.StrictMode.sVmPolicyMask.set(0);\n    }\n  }\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP && targetSdkVersion < Build.VERSION_CODES.LOLLIPOP) {\n    mirror.android.os.Message.updateCheckRecycle.call(targetSdkVersion);\n  }\n  if (StubManifest.ENABLE_IO_REDIRECT) {\n    startIOUniformer();\n  }\n  NativeEngine.hookNative();\n  Object mainThread=VirtualCore.mainThread();\n  NativeEngine.startDexOverride();\n  Context context=createPackageContext(data.appInfo.packageName);\n  System.setProperty(\"java.io.tmpdir\",context.getCacheDir().getAbsolutePath());\n  File codeCacheDir;\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n    codeCacheDir=context.getCodeCacheDir();\n  }\n else {\n    codeCacheDir=context.getCacheDir();\n  }\n  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N) {\n    if (HardwareRenderer.setupDiskCache != null) {\n      HardwareRenderer.setupDiskCache.call(codeCacheDir);\n    }\n  }\n else {\n    if (ThreadedRenderer.setupDiskCache != null) {\n      ThreadedRenderer.setupDiskCache.call(codeCacheDir);\n    }\n  }\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n    if (RenderScriptCacheDir.setupDiskCache != null) {\n      RenderScriptCacheDir.setupDiskCache.call(codeCacheDir);\n    }\n  }\n else   if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {\n    if (RenderScript.setupDiskCache != null) {\n      RenderScript.setupDiskCache.call(codeCacheDir);\n    }\n  }\n  Object boundApp=fixBoundApp(mBoundApplication);\n  mBoundApplication.info=ContextImpl.mPackageInfo.get(context);\n  mirror.android.app.ActivityThread.AppBindData.info.set(boundApp,data.info);\n  VMRuntime.setTargetSdkVersion.call(VMRuntime.getRuntime.call(),data.appInfo.targetSdkVersion);\n  boolean conflict=SpecialComponentList.isConflictingInstrumentation(packageName);\n  if (!conflict) {\n    InvocationStubManager.getInstance().checkEnv(AppInstrumentation.class);\n  }\n  mInitialApplication=LoadedApk.makeApplication.call(data.info,false,null);\n  mirror.android.app.ActivityThread.mInitialApplication.set(mainThread,mInitialApplication);\n  ContextFixer.fixContext(mInitialApplication);\n  if (data.providers != null) {\n    installContentProviders(mInitialApplication,data.providers);\n  }\n  if (lock != null) {\n    lock.open();\n    mTempLock=null;\n  }\n  try {\n    mInstrumentation.callApplicationOnCreate(mInitialApplication);\n    InvocationStubManager.getInstance().checkEnv(HCallbackStub.class);\n    if (conflict) {\n      InvocationStubManager.getInstance().checkEnv(AppInstrumentation.class);\n    }\n    Application createdApp=ActivityThread.mInitialApplication.get(mainThread);\n    if (createdApp != null) {\n      mInitialApplication=createdApp;\n    }\n  }\n catch (  Exception e) {\n    if (!mInstrumentation.onException(mInitialApplication,e)) {\n      throw new RuntimeException(\"Unable to create application \" + mInitialApplication.getClass().getName() + \": \"+ e.toString(),e);\n    }\n  }\n  VActivityManager.get().appDoneExecuting();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 725,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 185,
        "startLineNumber" : 313,
        "startColumnNumber" : 16,
        "endLineNumber" : 315,
        "endColumnNumber" : 58
      },
      "nodeContext" : "throw new RuntimeException(\"Unable to create application \" + mInitialApplication.getClass().getName() + \": \"+ e.toString(),e);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    },
    "tokenLength" : 14,
    "type" : "java.lang.RuntimeException"
  } ],
  "positionList" : [ {
    "charLength" : 178,
    "startLineNumber" : 313,
    "startColumnNumber" : 22,
    "endLineNumber" : 315,
    "endColumnNumber" : 57
  } ],
  "layoutRelationDataList" : [ ]
}