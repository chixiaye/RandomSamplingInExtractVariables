{
  "id" : 249,
  "expression" : "new HTTPHeader(\"kit\",\"kat\")",
  "projectName" : "square@retrofit",
  "commitID" : "757278c7ab7f6c8e5a40d16a5707c35e0f61c5ab",
  "filePath" : "/retrofit-appengine/src/test/java/retrofit/appengine/UrlFetchClientTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new HTTPHeader(\"kit\",\"kat\")",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 28,
      "startLineNumber" : 91,
      "startColumnNumber" : 45,
      "endLineNumber" : 91,
      "endColumnNumber" : 73
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 57
      },
      "nodeContext" : "asList(new HTTPHeader(\"foo\",\"bar\"),new HTTPHeader(\"kit\",\"kat\"),new HTTPHeader(\"Content-Type\",\"text/plain\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 178,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 92,
        "endColumnNumber" : 58
      },
      "nodeContext" : "when(fetchResponse.getHeaders()).thenReturn(asList(new HTTPHeader(\"foo\",\"bar\"),new HTTPHeader(\"kit\",\"kat\"),new HTTPHeader(\"Content-Type\",\"text/plain\")))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 24,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 179,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 92,
        "endColumnNumber" : 59
      },
      "nodeContext" : "when(fetchResponse.getHeaders()).thenReturn(asList(new HTTPHeader(\"foo\",\"bar\"),new HTTPHeader(\"kit\",\"kat\"),new HTTPHeader(\"Content-Type\",\"text/plain\")));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 25,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1085,
        "startLineNumber" : 86,
        "startColumnNumber" : 48,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  HTTPRequest creatingRequest=mock(HTTPRequest.class);\n  HTTPResponse fetchResponse=mock(HTTPResponse.class);\n  when(fetchResponse.getHeaders()).thenReturn(asList(new HTTPHeader(\"foo\",\"bar\"),new HTTPHeader(\"kit\",\"kat\"),new HTTPHeader(\"Content-Type\",\"text/plain\")));\n  when(fetchResponse.getContent()).thenReturn(\"hello\".getBytes(\"UTF-8\"));\n  when(fetchResponse.getFinalUrl()).thenReturn(new URL(HOST + \"/foo/bar/\"));\n  when(fetchResponse.getResponseCode()).thenReturn(200);\n  Response response=UrlFetchClient.parseResponse(fetchResponse,creatingRequest);\n  assertThat(response.getUrl()).isEqualTo(HOST + \"/foo/bar/\");\n  assertThat(response.getStatus()).isEqualTo(200);\n  assertThat(response.getReason()).isEqualTo(\"\");\n  assertThat(response.getHeaders()).hasSize(3).containsOnly(new Header(\"foo\",\"bar\"),new Header(\"kit\",\"kat\"),new Header(\"Content-Type\",\"text/plain\"));\n  assertBytes(ByteStreams.toByteArray(response.getBody().in()),\"hello\");\n  verifyNoMoreInteractions(creatingRequest);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1131,
        "startLineNumber" : 86,
        "startColumnNumber" : 2,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void response() throws Exception {\n  HTTPRequest creatingRequest=mock(HTTPRequest.class);\n  HTTPResponse fetchResponse=mock(HTTPResponse.class);\n  when(fetchResponse.getHeaders()).thenReturn(asList(new HTTPHeader(\"foo\",\"bar\"),new HTTPHeader(\"kit\",\"kat\"),new HTTPHeader(\"Content-Type\",\"text/plain\")));\n  when(fetchResponse.getContent()).thenReturn(\"hello\".getBytes(\"UTF-8\"));\n  when(fetchResponse.getFinalUrl()).thenReturn(new URL(HOST + \"/foo/bar/\"));\n  when(fetchResponse.getResponseCode()).thenReturn(200);\n  Response response=UrlFetchClient.parseResponse(fetchResponse,creatingRequest);\n  assertThat(response.getUrl()).isEqualTo(HOST + \"/foo/bar/\");\n  assertThat(response.getStatus()).isEqualTo(200);\n  assertThat(response.getReason()).isEqualTo(\"\");\n  assertThat(response.getHeaders()).hasSize(3).containsOnly(new Header(\"foo\",\"bar\"),new Header(\"kit\",\"kat\"),new Header(\"Content-Type\",\"text/plain\"));\n  assertBytes(ByteStreams.toByteArray(response.getBody().in()),\"hello\");\n  verifyNoMoreInteractions(creatingRequest);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 170,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 57
      },
      "nodeContext" : "asList(new HTTPHeader(\"foo\",\"bar\"),new HTTPHeader(\"kit\",\"kat\"),new HTTPHeader(\"Content-Type\",\"text/plain\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "retrofit.appengine.HTTPHeader"
  } ],
  "positionList" : [ {
    "charLength" : 28,
    "startLineNumber" : 91,
    "startColumnNumber" : 45,
    "endLineNumber" : 91,
    "endColumnNumber" : 73
  } ],
  "layoutRelationDataList" : [ ]
}