{
  "id" : 232,
  "expression" : "0",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/graphtheory/TwoSatSolverAdjacencyList.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 35,
      "startColumnNumber" : 17,
      "endLineNumber" : 35,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 35,
        "startColumnNumber" : 13,
        "endLineNumber" : 35,
        "endColumnNumber" : 18
      },
      "nodeContext" : "i=0",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 35,
        "startColumnNumber" : 9,
        "endLineNumber" : 35,
        "endColumnNumber" : 18
      },
      "nodeContext" : "int i=0",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 138,
        "startLineNumber" : 35,
        "startColumnNumber" : 4,
        "endLineNumber" : 40,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < sccs.length; i+=2) {\n  if (sccs[i] == sccs[i ^ 1]) {\n    isSatisfiable=false;\n    break;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 31,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 529,
        "startLineNumber" : 26,
        "startColumnNumber" : 22,
        "endLineNumber" : 48,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (solved)   return;\n  int[] sccs=sccSolver.getSccs();\n  isSatisfiable=true;\n  for (int i=0; i < sccs.length; i+=2) {\n    if (sccs[i] == sccs[i ^ 1]) {\n      isSatisfiable=false;\n      break;\n    }\n  }\n  if (isSatisfiable) {\n  }\n  solved=true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 55,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 549,
        "startLineNumber" : 26,
        "startColumnNumber" : 2,
        "endLineNumber" : 48,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public void solve(){\n  if (solved)   return;\n  int[] sccs=sccSolver.getSccs();\n  isSatisfiable=true;\n  for (int i=0; i < sccs.length; i+=2) {\n    if (sccs[i] == sccs[i ^ 1]) {\n      isSatisfiable=false;\n      break;\n    }\n  }\n  if (isSatisfiable) {\n  }\n  solved=true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 59,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 35,
        "startColumnNumber" : 9,
        "endLineNumber" : 35,
        "endColumnNumber" : 18
      },
      "nodeContext" : "int i=0",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 35,
    "startColumnNumber" : 17,
    "endLineNumber" : 35,
    "endColumnNumber" : 18
  } ],
  "layoutRelationDataList" : [ ]
}