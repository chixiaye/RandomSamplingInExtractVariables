{
  "id" : 356,
  "expression" : "propertiesSize",
  "projectName" : "libgdx@libgdx",
  "commitID" : "3485b16e8979c0141421bc80cb8831b7a0403f67",
  "filePath" : "/gdx/src/com/badlogic/gdx/utils/compression/Lzma.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "propertiesSize",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 94,
      "startColumnNumber" : 31,
      "endLineNumber" : 94,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 94,
        "startColumnNumber" : 22,
        "endLineNumber" : 94,
        "endColumnNumber" : 46
      },
      "nodeContext" : "new byte[propertiesSize]",
      "nodeType" : "ArrayCreation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 94,
        "startColumnNumber" : 9,
        "endLineNumber" : 94,
        "endColumnNumber" : 46
      },
      "nodeContext" : "properties=new byte[propertiesSize]",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 94,
        "startColumnNumber" : 2,
        "endLineNumber" : 94,
        "endColumnNumber" : 47
      },
      "nodeContext" : "byte[] properties=new byte[propertiesSize];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 736,
        "startLineNumber" : 92,
        "startColumnNumber" : 85,
        "endLineNumber" : 109,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int propertiesSize=5;\n  byte[] properties=new byte[propertiesSize];\n  if (in.read(properties,0,propertiesSize) != propertiesSize)   throw new RuntimeException(\"input .lzma file is too short\");\n  com.badlogic.gdx.utils.compression.lzma.Decoder decoder=new com.badlogic.gdx.utils.compression.lzma.Decoder();\n  if (!decoder.SetDecoderProperties(properties))   throw new RuntimeException(\"Incorrect stream properties\");\n  long outSize=0;\n  for (int i=0; i < 8; i++) {\n    int v=in.read();\n    if (v < 0) {\n      throw new RuntimeException(\"Can't read stream size\");\n    }\n    outSize|=((long)v) << (8 * i);\n  }\n  if (!decoder.Code(in,out,outSize)) {\n    throw new RuntimeException(\"Error in data stream\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 134,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1051,
        "startLineNumber" : 87,
        "startColumnNumber" : 1,
        "endLineNumber" : 109,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Decompresses the given  {@link InputStream} into the given {@link OutputStream}.\n * @param in the {@link InputStream} to decompress\n * @param out the {@link OutputStream} to decompress to\n * @throws IOException \n */\nstatic public void decompress(InputStream in,OutputStream out) throws IOException {\n  int propertiesSize=5;\n  byte[] properties=new byte[propertiesSize];\n  if (in.read(properties,0,propertiesSize) != propertiesSize)   throw new RuntimeException(\"input .lzma file is too short\");\n  com.badlogic.gdx.utils.compression.lzma.Decoder decoder=new com.badlogic.gdx.utils.compression.lzma.Decoder();\n  if (!decoder.SetDecoderProperties(properties))   throw new RuntimeException(\"Incorrect stream properties\");\n  long outSize=0;\n  for (int i=0; i < 8; i++) {\n    int v=in.read();\n    if (v < 0) {\n      throw new RuntimeException(\"Can't read stream size\");\n    }\n    outSize|=((long)v) << (8 * i);\n  }\n  if (!decoder.Code(in,out,outSize)) {\n    throw new RuntimeException(\"Error in data stream\");\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 150,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 94,
        "startColumnNumber" : 2,
        "endLineNumber" : 94,
        "endColumnNumber" : 47
      },
      "nodeContext" : "byte[] properties=new byte[propertiesSize];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "propertiesSize",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 95,
      "startColumnNumber" : 29,
      "endLineNumber" : 95,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 95,
        "startColumnNumber" : 6,
        "endLineNumber" : 95,
        "endColumnNumber" : 44
      },
      "nodeContext" : "in.read(properties,0,propertiesSize)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 95,
        "startColumnNumber" : 6,
        "endLineNumber" : 95,
        "endColumnNumber" : 62
      },
      "nodeContext" : "in.read(properties,0,propertiesSize) != propertiesSize",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 122,
        "startLineNumber" : 95,
        "startColumnNumber" : 2,
        "endLineNumber" : 95,
        "endColumnNumber" : 124
      },
      "nodeContext" : "if (in.read(properties,0,propertiesSize) != propertiesSize) throw new RuntimeException(\"input .lzma file is too short\");\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 736,
        "startLineNumber" : 92,
        "startColumnNumber" : 85,
        "endLineNumber" : 109,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int propertiesSize=5;\n  byte[] properties=new byte[propertiesSize];\n  if (in.read(properties,0,propertiesSize) != propertiesSize)   throw new RuntimeException(\"input .lzma file is too short\");\n  com.badlogic.gdx.utils.compression.lzma.Decoder decoder=new com.badlogic.gdx.utils.compression.lzma.Decoder();\n  if (!decoder.SetDecoderProperties(properties))   throw new RuntimeException(\"Incorrect stream properties\");\n  long outSize=0;\n  for (int i=0; i < 8; i++) {\n    int v=in.read();\n    if (v < 0) {\n      throw new RuntimeException(\"Can't read stream size\");\n    }\n    outSize|=((long)v) << (8 * i);\n  }\n  if (!decoder.Code(in,out,outSize)) {\n    throw new RuntimeException(\"Error in data stream\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 134,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1051,
        "startLineNumber" : 87,
        "startColumnNumber" : 1,
        "endLineNumber" : 109,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Decompresses the given  {@link InputStream} into the given {@link OutputStream}.\n * @param in the {@link InputStream} to decompress\n * @param out the {@link OutputStream} to decompress to\n * @throws IOException \n */\nstatic public void decompress(InputStream in,OutputStream out) throws IOException {\n  int propertiesSize=5;\n  byte[] properties=new byte[propertiesSize];\n  if (in.read(properties,0,propertiesSize) != propertiesSize)   throw new RuntimeException(\"input .lzma file is too short\");\n  com.badlogic.gdx.utils.compression.lzma.Decoder decoder=new com.badlogic.gdx.utils.compression.lzma.Decoder();\n  if (!decoder.SetDecoderProperties(properties))   throw new RuntimeException(\"Incorrect stream properties\");\n  long outSize=0;\n  for (int i=0; i < 8; i++) {\n    int v=in.read();\n    if (v < 0) {\n      throw new RuntimeException(\"Can't read stream size\");\n    }\n    outSize|=((long)v) << (8 * i);\n  }\n  if (!decoder.Code(in,out,outSize)) {\n    throw new RuntimeException(\"Error in data stream\");\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 150,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 122,
        "startLineNumber" : 95,
        "startColumnNumber" : 2,
        "endLineNumber" : 95,
        "endColumnNumber" : 124
      },
      "nodeContext" : "if (in.read(properties,0,propertiesSize) != propertiesSize) throw new RuntimeException(\"input .lzma file is too short\");\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "propertiesSize",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 95,
      "startColumnNumber" : 48,
      "endLineNumber" : 95,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 95,
        "startColumnNumber" : 6,
        "endLineNumber" : 95,
        "endColumnNumber" : 62
      },
      "nodeContext" : "in.read(properties,0,propertiesSize) != propertiesSize",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 122,
        "startLineNumber" : 95,
        "startColumnNumber" : 2,
        "endLineNumber" : 95,
        "endColumnNumber" : 124
      },
      "nodeContext" : "if (in.read(properties,0,propertiesSize) != propertiesSize) throw new RuntimeException(\"input .lzma file is too short\");\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 736,
        "startLineNumber" : 92,
        "startColumnNumber" : 85,
        "endLineNumber" : 109,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int propertiesSize=5;\n  byte[] properties=new byte[propertiesSize];\n  if (in.read(properties,0,propertiesSize) != propertiesSize)   throw new RuntimeException(\"input .lzma file is too short\");\n  com.badlogic.gdx.utils.compression.lzma.Decoder decoder=new com.badlogic.gdx.utils.compression.lzma.Decoder();\n  if (!decoder.SetDecoderProperties(properties))   throw new RuntimeException(\"Incorrect stream properties\");\n  long outSize=0;\n  for (int i=0; i < 8; i++) {\n    int v=in.read();\n    if (v < 0) {\n      throw new RuntimeException(\"Can't read stream size\");\n    }\n    outSize|=((long)v) << (8 * i);\n  }\n  if (!decoder.Code(in,out,outSize)) {\n    throw new RuntimeException(\"Error in data stream\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 134,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1051,
        "startLineNumber" : 87,
        "startColumnNumber" : 1,
        "endLineNumber" : 109,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Decompresses the given  {@link InputStream} into the given {@link OutputStream}.\n * @param in the {@link InputStream} to decompress\n * @param out the {@link OutputStream} to decompress to\n * @throws IOException \n */\nstatic public void decompress(InputStream in,OutputStream out) throws IOException {\n  int propertiesSize=5;\n  byte[] properties=new byte[propertiesSize];\n  if (in.read(properties,0,propertiesSize) != propertiesSize)   throw new RuntimeException(\"input .lzma file is too short\");\n  com.badlogic.gdx.utils.compression.lzma.Decoder decoder=new com.badlogic.gdx.utils.compression.lzma.Decoder();\n  if (!decoder.SetDecoderProperties(properties))   throw new RuntimeException(\"Incorrect stream properties\");\n  long outSize=0;\n  for (int i=0; i < 8; i++) {\n    int v=in.read();\n    if (v < 0) {\n      throw new RuntimeException(\"Can't read stream size\");\n    }\n    outSize|=((long)v) << (8 * i);\n  }\n  if (!decoder.Code(in,out,outSize)) {\n    throw new RuntimeException(\"Error in data stream\");\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 150,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 122,
        "startLineNumber" : 95,
        "startColumnNumber" : 2,
        "endLineNumber" : 95,
        "endColumnNumber" : 124
      },
      "nodeContext" : "if (in.read(properties,0,propertiesSize) != propertiesSize) throw new RuntimeException(\"input .lzma file is too short\");\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 94,
    "startColumnNumber" : 31,
    "endLineNumber" : 94,
    "endColumnNumber" : 45
  }, {
    "charLength" : 14,
    "startLineNumber" : 95,
    "startColumnNumber" : 29,
    "endLineNumber" : 95,
    "endColumnNumber" : 43
  }, {
    "charLength" : 14,
    "startLineNumber" : 95,
    "startColumnNumber" : 48,
    "endLineNumber" : 95,
    "endColumnNumber" : 62
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 0
  } ]
}