{
  "id" : 183,
  "expression" : "source",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/core/lombok/eclipse/handlers/HandleToString.java",
  "occurrences" : 22,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "source",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 183,
      "startColumnNumber" : 11,
      "endLineNumber" : 183,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 183,
        "startColumnNumber" : 11,
        "endLineNumber" : 183,
        "endColumnNumber" : 29
      },
      "nodeContext" : "source.sourceStart",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 183,
        "startColumnNumber" : 6,
        "endLineNumber" : 183,
        "endColumnNumber" : 29
      },
      "nodeContext" : "pS=source.sourceStart",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 183,
        "startColumnNumber" : 2,
        "endLineNumber" : 183,
        "endColumnNumber" : 53
      },
      "nodeContext" : "int pS=source.sourceStart, pE=source.sourceEnd;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4152,
        "startLineNumber" : 178,
        "startColumnNumber" : 90,
        "endLineNumber" : 283,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String typeName=getTypeName(type);\n  char[] suffix=\")\".toCharArray();\n  String infixS=\", \";\n  char[] infix=infixS.toCharArray();\n  int pS=source.sourceStart, pE=source.sourceEnd;\n  long p=(long)pS << 32 | pE;\n  final int PLUS=OperatorIds.PLUS;\n  char[] prefix;\n  if (callSuper) {\n    prefix=(typeName + \"(super=\").toCharArray();\n  }\n else   if (fields.isEmpty()) {\n    prefix=(typeName + \"()\").toCharArray();\n  }\n else   if (includeFieldNames) {\n    prefix=(typeName + \"(\" + new String(((FieldDeclaration)fields.iterator().next().get()).name)+ \"=\").toCharArray();\n  }\n else {\n    prefix=(typeName + \"(\").toCharArray();\n  }\n  boolean first=true;\n  Expression current=new StringLiteral(prefix,pS,pE,0);\n  setGeneratedBy(current,source);\n  if (callSuper) {\n    MessageSend callToSuper=new MessageSend();\n    callToSuper.sourceStart=pS;\n    callToSuper.sourceEnd=pE;\n    setGeneratedBy(callToSuper,source);\n    callToSuper.receiver=new SuperReference(pS,pE);\n    setGeneratedBy(callToSuper,source);\n    callToSuper.selector=\"toString\".toCharArray();\n    current=new BinaryExpression(current,callToSuper,PLUS);\n    setGeneratedBy(current,source);\n    first=false;\n  }\n  for (  EclipseNode field : fields) {\n    TypeReference fType=getFieldType(field,fieldAccess);\n    Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n    Expression ex;\n    if (fType.dimensions() > 0) {\n      MessageSend arrayToString=new MessageSend();\n      arrayToString.sourceStart=pS;\n      arrayToString.sourceEnd=pE;\n      arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n      arrayToString.arguments=new Expression[]{fieldAccessor};\n      setGeneratedBy(arrayToString.arguments[0],source);\n      if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n        arrayToString.selector=\"deepToString\".toCharArray();\n      }\n else {\n        arrayToString.selector=\"toString\".toCharArray();\n      }\n      ex=arrayToString;\n    }\n else {\n      ex=fieldAccessor;\n    }\n    setGeneratedBy(ex,source);\n    if (first) {\n      current=new BinaryExpression(current,ex,PLUS);\n      current.sourceStart=pS;\n      current.sourceEnd=pE;\n      setGeneratedBy(current,source);\n      first=false;\n      continue;\n    }\n    StringLiteral fieldNameLiteral;\n    if (includeFieldNames) {\n      char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n      fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n    }\n else {\n      fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n    }\n    setGeneratedBy(fieldNameLiteral,source);\n    current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n    setGeneratedBy(current,source);\n    current=new BinaryExpression(current,ex,PLUS);\n    setGeneratedBy(current,source);\n  }\n  if (!first) {\n    StringLiteral suffixLiteral=new StringLiteral(suffix,pS,pE,0);\n    setGeneratedBy(suffixLiteral,source);\n    current=new BinaryExpression(current,suffixLiteral,PLUS);\n    setGeneratedBy(current,source);\n  }\n  ReturnStatement returnStatement=new ReturnStatement(current,pS,pE);\n  setGeneratedBy(returnStatement,source);\n  MethodDeclaration method=new MethodDeclaration(((CompilationUnitDeclaration)type.top().get()).compilationResult);\n  setGeneratedBy(method,source);\n  method.modifiers=toEclipseModifier(AccessLevel.PUBLIC);\n  method.returnType=new QualifiedTypeReference(TypeConstants.JAVA_LANG_STRING,new long[]{p,p,p});\n  setGeneratedBy(method.returnType,source);\n  method.annotations=new Annotation[]{makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)};\n  method.arguments=null;\n  method.selector=\"toString\".toCharArray();\n  method.thrownExceptions=null;\n  method.typeParameters=null;\n  method.bits|=Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\n  method.bodyStart=method.declarationSourceStart=method.sourceStart=source.sourceStart;\n  method.bodyEnd=method.declarationSourceEnd=method.sourceEnd=source.sourceEnd;\n  method.statements=new Statement[]{returnStatement};\n  return method;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 690,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4333,
        "startLineNumber" : 177,
        "startColumnNumber" : 1,
        "endLineNumber" : 283,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private MethodDeclaration createToString(EclipseNode type,Collection<EclipseNode> fields,boolean includeFieldNames,boolean callSuper,ASTNode source,FieldAccess fieldAccess){\n  String typeName=getTypeName(type);\n  char[] suffix=\")\".toCharArray();\n  String infixS=\", \";\n  char[] infix=infixS.toCharArray();\n  int pS=source.sourceStart, pE=source.sourceEnd;\n  long p=(long)pS << 32 | pE;\n  final int PLUS=OperatorIds.PLUS;\n  char[] prefix;\n  if (callSuper) {\n    prefix=(typeName + \"(super=\").toCharArray();\n  }\n else   if (fields.isEmpty()) {\n    prefix=(typeName + \"()\").toCharArray();\n  }\n else   if (includeFieldNames) {\n    prefix=(typeName + \"(\" + new String(((FieldDeclaration)fields.iterator().next().get()).name)+ \"=\").toCharArray();\n  }\n else {\n    prefix=(typeName + \"(\").toCharArray();\n  }\n  boolean first=true;\n  Expression current=new StringLiteral(prefix,pS,pE,0);\n  setGeneratedBy(current,source);\n  if (callSuper) {\n    MessageSend callToSuper=new MessageSend();\n    callToSuper.sourceStart=pS;\n    callToSuper.sourceEnd=pE;\n    setGeneratedBy(callToSuper,source);\n    callToSuper.receiver=new SuperReference(pS,pE);\n    setGeneratedBy(callToSuper,source);\n    callToSuper.selector=\"toString\".toCharArray();\n    current=new BinaryExpression(current,callToSuper,PLUS);\n    setGeneratedBy(current,source);\n    first=false;\n  }\n  for (  EclipseNode field : fields) {\n    TypeReference fType=getFieldType(field,fieldAccess);\n    Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n    Expression ex;\n    if (fType.dimensions() > 0) {\n      MessageSend arrayToString=new MessageSend();\n      arrayToString.sourceStart=pS;\n      arrayToString.sourceEnd=pE;\n      arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n      arrayToString.arguments=new Expression[]{fieldAccessor};\n      setGeneratedBy(arrayToString.arguments[0],source);\n      if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n        arrayToString.selector=\"deepToString\".toCharArray();\n      }\n else {\n        arrayToString.selector=\"toString\".toCharArray();\n      }\n      ex=arrayToString;\n    }\n else {\n      ex=fieldAccessor;\n    }\n    setGeneratedBy(ex,source);\n    if (first) {\n      current=new BinaryExpression(current,ex,PLUS);\n      current.sourceStart=pS;\n      current.sourceEnd=pE;\n      setGeneratedBy(current,source);\n      first=false;\n      continue;\n    }\n    StringLiteral fieldNameLiteral;\n    if (includeFieldNames) {\n      char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n      fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n    }\n else {\n      fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n    }\n    setGeneratedBy(fieldNameLiteral,source);\n    current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n    setGeneratedBy(current,source);\n    current=new BinaryExpression(current,ex,PLUS);\n    setGeneratedBy(current,source);\n  }\n  if (!first) {\n    StringLiteral suffixLiteral=new StringLiteral(suffix,pS,pE,0);\n    setGeneratedBy(suffixLiteral,source);\n    current=new BinaryExpression(current,suffixLiteral,PLUS);\n    setGeneratedBy(current,source);\n  }\n  ReturnStatement returnStatement=new ReturnStatement(current,pS,pE);\n  setGeneratedBy(returnStatement,source);\n  MethodDeclaration method=new MethodDeclaration(((CompilationUnitDeclaration)type.top().get()).compilationResult);\n  setGeneratedBy(method,source);\n  method.modifiers=toEclipseModifier(AccessLevel.PUBLIC);\n  method.returnType=new QualifiedTypeReference(TypeConstants.JAVA_LANG_STRING,new long[]{p,p,p});\n  setGeneratedBy(method.returnType,source);\n  method.annotations=new Annotation[]{makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)};\n  method.arguments=null;\n  method.selector=\"toString\".toCharArray();\n  method.thrownExceptions=null;\n  method.typeParameters=null;\n  method.bits|=Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\n  method.bodyStart=method.declarationSourceStart=method.sourceStart=source.sourceStart;\n  method.bodyEnd=method.declarationSourceEnd=method.sourceEnd=source.sourceEnd;\n  method.statements=new Statement[]{returnStatement};\n  return method;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 720,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 183,
        "startColumnNumber" : 2,
        "endLineNumber" : 183,
        "endColumnNumber" : 53
      },
      "nodeContext" : "int pS=source.sourceStart, pE=source.sourceEnd;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "source",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 183,
      "startColumnNumber" : 36,
      "endLineNumber" : 183,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 183,
        "startColumnNumber" : 36,
        "endLineNumber" : 183,
        "endColumnNumber" : 52
      },
      "nodeContext" : "source.sourceEnd",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 183,
        "startColumnNumber" : 31,
        "endLineNumber" : 183,
        "endColumnNumber" : 52
      },
      "nodeContext" : "pE=source.sourceEnd",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 183,
        "startColumnNumber" : 2,
        "endLineNumber" : 183,
        "endColumnNumber" : 53
      },
      "nodeContext" : "int pS=source.sourceStart, pE=source.sourceEnd;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4152,
        "startLineNumber" : 178,
        "startColumnNumber" : 90,
        "endLineNumber" : 283,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String typeName=getTypeName(type);\n  char[] suffix=\")\".toCharArray();\n  String infixS=\", \";\n  char[] infix=infixS.toCharArray();\n  int pS=source.sourceStart, pE=source.sourceEnd;\n  long p=(long)pS << 32 | pE;\n  final int PLUS=OperatorIds.PLUS;\n  char[] prefix;\n  if (callSuper) {\n    prefix=(typeName + \"(super=\").toCharArray();\n  }\n else   if (fields.isEmpty()) {\n    prefix=(typeName + \"()\").toCharArray();\n  }\n else   if (includeFieldNames) {\n    prefix=(typeName + \"(\" + new String(((FieldDeclaration)fields.iterator().next().get()).name)+ \"=\").toCharArray();\n  }\n else {\n    prefix=(typeName + \"(\").toCharArray();\n  }\n  boolean first=true;\n  Expression current=new StringLiteral(prefix,pS,pE,0);\n  setGeneratedBy(current,source);\n  if (callSuper) {\n    MessageSend callToSuper=new MessageSend();\n    callToSuper.sourceStart=pS;\n    callToSuper.sourceEnd=pE;\n    setGeneratedBy(callToSuper,source);\n    callToSuper.receiver=new SuperReference(pS,pE);\n    setGeneratedBy(callToSuper,source);\n    callToSuper.selector=\"toString\".toCharArray();\n    current=new BinaryExpression(current,callToSuper,PLUS);\n    setGeneratedBy(current,source);\n    first=false;\n  }\n  for (  EclipseNode field : fields) {\n    TypeReference fType=getFieldType(field,fieldAccess);\n    Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n    Expression ex;\n    if (fType.dimensions() > 0) {\n      MessageSend arrayToString=new MessageSend();\n      arrayToString.sourceStart=pS;\n      arrayToString.sourceEnd=pE;\n      arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n      arrayToString.arguments=new Expression[]{fieldAccessor};\n      setGeneratedBy(arrayToString.arguments[0],source);\n      if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n        arrayToString.selector=\"deepToString\".toCharArray();\n      }\n else {\n        arrayToString.selector=\"toString\".toCharArray();\n      }\n      ex=arrayToString;\n    }\n else {\n      ex=fieldAccessor;\n    }\n    setGeneratedBy(ex,source);\n    if (first) {\n      current=new BinaryExpression(current,ex,PLUS);\n      current.sourceStart=pS;\n      current.sourceEnd=pE;\n      setGeneratedBy(current,source);\n      first=false;\n      continue;\n    }\n    StringLiteral fieldNameLiteral;\n    if (includeFieldNames) {\n      char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n      fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n    }\n else {\n      fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n    }\n    setGeneratedBy(fieldNameLiteral,source);\n    current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n    setGeneratedBy(current,source);\n    current=new BinaryExpression(current,ex,PLUS);\n    setGeneratedBy(current,source);\n  }\n  if (!first) {\n    StringLiteral suffixLiteral=new StringLiteral(suffix,pS,pE,0);\n    setGeneratedBy(suffixLiteral,source);\n    current=new BinaryExpression(current,suffixLiteral,PLUS);\n    setGeneratedBy(current,source);\n  }\n  ReturnStatement returnStatement=new ReturnStatement(current,pS,pE);\n  setGeneratedBy(returnStatement,source);\n  MethodDeclaration method=new MethodDeclaration(((CompilationUnitDeclaration)type.top().get()).compilationResult);\n  setGeneratedBy(method,source);\n  method.modifiers=toEclipseModifier(AccessLevel.PUBLIC);\n  method.returnType=new QualifiedTypeReference(TypeConstants.JAVA_LANG_STRING,new long[]{p,p,p});\n  setGeneratedBy(method.returnType,source);\n  method.annotations=new Annotation[]{makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)};\n  method.arguments=null;\n  method.selector=\"toString\".toCharArray();\n  method.thrownExceptions=null;\n  method.typeParameters=null;\n  method.bits|=Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\n  method.bodyStart=method.declarationSourceStart=method.sourceStart=source.sourceStart;\n  method.bodyEnd=method.declarationSourceEnd=method.sourceEnd=source.sourceEnd;\n  method.statements=new Statement[]{returnStatement};\n  return method;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 690,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4333,
        "startLineNumber" : 177,
        "startColumnNumber" : 1,
        "endLineNumber" : 283,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private MethodDeclaration createToString(EclipseNode type,Collection<EclipseNode> fields,boolean includeFieldNames,boolean callSuper,ASTNode source,FieldAccess fieldAccess){\n  String typeName=getTypeName(type);\n  char[] suffix=\")\".toCharArray();\n  String infixS=\", \";\n  char[] infix=infixS.toCharArray();\n  int pS=source.sourceStart, pE=source.sourceEnd;\n  long p=(long)pS << 32 | pE;\n  final int PLUS=OperatorIds.PLUS;\n  char[] prefix;\n  if (callSuper) {\n    prefix=(typeName + \"(super=\").toCharArray();\n  }\n else   if (fields.isEmpty()) {\n    prefix=(typeName + \"()\").toCharArray();\n  }\n else   if (includeFieldNames) {\n    prefix=(typeName + \"(\" + new String(((FieldDeclaration)fields.iterator().next().get()).name)+ \"=\").toCharArray();\n  }\n else {\n    prefix=(typeName + \"(\").toCharArray();\n  }\n  boolean first=true;\n  Expression current=new StringLiteral(prefix,pS,pE,0);\n  setGeneratedBy(current,source);\n  if (callSuper) {\n    MessageSend callToSuper=new MessageSend();\n    callToSuper.sourceStart=pS;\n    callToSuper.sourceEnd=pE;\n    setGeneratedBy(callToSuper,source);\n    callToSuper.receiver=new SuperReference(pS,pE);\n    setGeneratedBy(callToSuper,source);\n    callToSuper.selector=\"toString\".toCharArray();\n    current=new BinaryExpression(current,callToSuper,PLUS);\n    setGeneratedBy(current,source);\n    first=false;\n  }\n  for (  EclipseNode field : fields) {\n    TypeReference fType=getFieldType(field,fieldAccess);\n    Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n    Expression ex;\n    if (fType.dimensions() > 0) {\n      MessageSend arrayToString=new MessageSend();\n      arrayToString.sourceStart=pS;\n      arrayToString.sourceEnd=pE;\n      arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n      arrayToString.arguments=new Expression[]{fieldAccessor};\n      setGeneratedBy(arrayToString.arguments[0],source);\n      if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n        arrayToString.selector=\"deepToString\".toCharArray();\n      }\n else {\n        arrayToString.selector=\"toString\".toCharArray();\n      }\n      ex=arrayToString;\n    }\n else {\n      ex=fieldAccessor;\n    }\n    setGeneratedBy(ex,source);\n    if (first) {\n      current=new BinaryExpression(current,ex,PLUS);\n      current.sourceStart=pS;\n      current.sourceEnd=pE;\n      setGeneratedBy(current,source);\n      first=false;\n      continue;\n    }\n    StringLiteral fieldNameLiteral;\n    if (includeFieldNames) {\n      char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n      fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n    }\n else {\n      fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n    }\n    setGeneratedBy(fieldNameLiteral,source);\n    current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n    setGeneratedBy(current,source);\n    current=new BinaryExpression(current,ex,PLUS);\n    setGeneratedBy(current,source);\n  }\n  if (!first) {\n    StringLiteral suffixLiteral=new StringLiteral(suffix,pS,pE,0);\n    setGeneratedBy(suffixLiteral,source);\n    current=new BinaryExpression(current,suffixLiteral,PLUS);\n    setGeneratedBy(current,source);\n  }\n  ReturnStatement returnStatement=new ReturnStatement(current,pS,pE);\n  setGeneratedBy(returnStatement,source);\n  MethodDeclaration method=new MethodDeclaration(((CompilationUnitDeclaration)type.top().get()).compilationResult);\n  setGeneratedBy(method,source);\n  method.modifiers=toEclipseModifier(AccessLevel.PUBLIC);\n  method.returnType=new QualifiedTypeReference(TypeConstants.JAVA_LANG_STRING,new long[]{p,p,p});\n  setGeneratedBy(method.returnType,source);\n  method.annotations=new Annotation[]{makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)};\n  method.arguments=null;\n  method.selector=\"toString\".toCharArray();\n  method.thrownExceptions=null;\n  method.typeParameters=null;\n  method.bits|=Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\n  method.bodyStart=method.declarationSourceStart=method.sourceStart=source.sourceStart;\n  method.bodyEnd=method.declarationSourceEnd=method.sourceEnd=source.sourceEnd;\n  method.statements=new Statement[]{returnStatement};\n  return method;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 720,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 183,
        "startColumnNumber" : 2,
        "endLineNumber" : 183,
        "endColumnNumber" : 53
      },
      "nodeContext" : "int pS=source.sourceStart, pE=source.sourceEnd;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "source",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 201,
      "startColumnNumber" : 26,
      "endLineNumber" : 201,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 201,
        "startColumnNumber" : 2,
        "endLineNumber" : 201,
        "endColumnNumber" : 33
      },
      "nodeContext" : "setGeneratedBy(current,source)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 201,
        "startColumnNumber" : 2,
        "endLineNumber" : 201,
        "endColumnNumber" : 34
      },
      "nodeContext" : "setGeneratedBy(current,source);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4152,
        "startLineNumber" : 178,
        "startColumnNumber" : 90,
        "endLineNumber" : 283,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String typeName=getTypeName(type);\n  char[] suffix=\")\".toCharArray();\n  String infixS=\", \";\n  char[] infix=infixS.toCharArray();\n  int pS=source.sourceStart, pE=source.sourceEnd;\n  long p=(long)pS << 32 | pE;\n  final int PLUS=OperatorIds.PLUS;\n  char[] prefix;\n  if (callSuper) {\n    prefix=(typeName + \"(super=\").toCharArray();\n  }\n else   if (fields.isEmpty()) {\n    prefix=(typeName + \"()\").toCharArray();\n  }\n else   if (includeFieldNames) {\n    prefix=(typeName + \"(\" + new String(((FieldDeclaration)fields.iterator().next().get()).name)+ \"=\").toCharArray();\n  }\n else {\n    prefix=(typeName + \"(\").toCharArray();\n  }\n  boolean first=true;\n  Expression current=new StringLiteral(prefix,pS,pE,0);\n  setGeneratedBy(current,source);\n  if (callSuper) {\n    MessageSend callToSuper=new MessageSend();\n    callToSuper.sourceStart=pS;\n    callToSuper.sourceEnd=pE;\n    setGeneratedBy(callToSuper,source);\n    callToSuper.receiver=new SuperReference(pS,pE);\n    setGeneratedBy(callToSuper,source);\n    callToSuper.selector=\"toString\".toCharArray();\n    current=new BinaryExpression(current,callToSuper,PLUS);\n    setGeneratedBy(current,source);\n    first=false;\n  }\n  for (  EclipseNode field : fields) {\n    TypeReference fType=getFieldType(field,fieldAccess);\n    Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n    Expression ex;\n    if (fType.dimensions() > 0) {\n      MessageSend arrayToString=new MessageSend();\n      arrayToString.sourceStart=pS;\n      arrayToString.sourceEnd=pE;\n      arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n      arrayToString.arguments=new Expression[]{fieldAccessor};\n      setGeneratedBy(arrayToString.arguments[0],source);\n      if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n        arrayToString.selector=\"deepToString\".toCharArray();\n      }\n else {\n        arrayToString.selector=\"toString\".toCharArray();\n      }\n      ex=arrayToString;\n    }\n else {\n      ex=fieldAccessor;\n    }\n    setGeneratedBy(ex,source);\n    if (first) {\n      current=new BinaryExpression(current,ex,PLUS);\n      current.sourceStart=pS;\n      current.sourceEnd=pE;\n      setGeneratedBy(current,source);\n      first=false;\n      continue;\n    }\n    StringLiteral fieldNameLiteral;\n    if (includeFieldNames) {\n      char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n      fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n    }\n else {\n      fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n    }\n    setGeneratedBy(fieldNameLiteral,source);\n    current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n    setGeneratedBy(current,source);\n    current=new BinaryExpression(current,ex,PLUS);\n    setGeneratedBy(current,source);\n  }\n  if (!first) {\n    StringLiteral suffixLiteral=new StringLiteral(suffix,pS,pE,0);\n    setGeneratedBy(suffixLiteral,source);\n    current=new BinaryExpression(current,suffixLiteral,PLUS);\n    setGeneratedBy(current,source);\n  }\n  ReturnStatement returnStatement=new ReturnStatement(current,pS,pE);\n  setGeneratedBy(returnStatement,source);\n  MethodDeclaration method=new MethodDeclaration(((CompilationUnitDeclaration)type.top().get()).compilationResult);\n  setGeneratedBy(method,source);\n  method.modifiers=toEclipseModifier(AccessLevel.PUBLIC);\n  method.returnType=new QualifiedTypeReference(TypeConstants.JAVA_LANG_STRING,new long[]{p,p,p});\n  setGeneratedBy(method.returnType,source);\n  method.annotations=new Annotation[]{makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)};\n  method.arguments=null;\n  method.selector=\"toString\".toCharArray();\n  method.thrownExceptions=null;\n  method.typeParameters=null;\n  method.bits|=Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\n  method.bodyStart=method.declarationSourceStart=method.sourceStart=source.sourceStart;\n  method.bodyEnd=method.declarationSourceEnd=method.sourceEnd=source.sourceEnd;\n  method.statements=new Statement[]{returnStatement};\n  return method;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 690,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4333,
        "startLineNumber" : 177,
        "startColumnNumber" : 1,
        "endLineNumber" : 283,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private MethodDeclaration createToString(EclipseNode type,Collection<EclipseNode> fields,boolean includeFieldNames,boolean callSuper,ASTNode source,FieldAccess fieldAccess){\n  String typeName=getTypeName(type);\n  char[] suffix=\")\".toCharArray();\n  String infixS=\", \";\n  char[] infix=infixS.toCharArray();\n  int pS=source.sourceStart, pE=source.sourceEnd;\n  long p=(long)pS << 32 | pE;\n  final int PLUS=OperatorIds.PLUS;\n  char[] prefix;\n  if (callSuper) {\n    prefix=(typeName + \"(super=\").toCharArray();\n  }\n else   if (fields.isEmpty()) {\n    prefix=(typeName + \"()\").toCharArray();\n  }\n else   if (includeFieldNames) {\n    prefix=(typeName + \"(\" + new String(((FieldDeclaration)fields.iterator().next().get()).name)+ \"=\").toCharArray();\n  }\n else {\n    prefix=(typeName + \"(\").toCharArray();\n  }\n  boolean first=true;\n  Expression current=new StringLiteral(prefix,pS,pE,0);\n  setGeneratedBy(current,source);\n  if (callSuper) {\n    MessageSend callToSuper=new MessageSend();\n    callToSuper.sourceStart=pS;\n    callToSuper.sourceEnd=pE;\n    setGeneratedBy(callToSuper,source);\n    callToSuper.receiver=new SuperReference(pS,pE);\n    setGeneratedBy(callToSuper,source);\n    callToSuper.selector=\"toString\".toCharArray();\n    current=new BinaryExpression(current,callToSuper,PLUS);\n    setGeneratedBy(current,source);\n    first=false;\n  }\n  for (  EclipseNode field : fields) {\n    TypeReference fType=getFieldType(field,fieldAccess);\n    Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n    Expression ex;\n    if (fType.dimensions() > 0) {\n      MessageSend arrayToString=new MessageSend();\n      arrayToString.sourceStart=pS;\n      arrayToString.sourceEnd=pE;\n      arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n      arrayToString.arguments=new Expression[]{fieldAccessor};\n      setGeneratedBy(arrayToString.arguments[0],source);\n      if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n        arrayToString.selector=\"deepToString\".toCharArray();\n      }\n else {\n        arrayToString.selector=\"toString\".toCharArray();\n      }\n      ex=arrayToString;\n    }\n else {\n      ex=fieldAccessor;\n    }\n    setGeneratedBy(ex,source);\n    if (first) {\n      current=new BinaryExpression(current,ex,PLUS);\n      current.sourceStart=pS;\n      current.sourceEnd=pE;\n      setGeneratedBy(current,source);\n      first=false;\n      continue;\n    }\n    StringLiteral fieldNameLiteral;\n    if (includeFieldNames) {\n      char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n      fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n    }\n else {\n      fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n    }\n    setGeneratedBy(fieldNameLiteral,source);\n    current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n    setGeneratedBy(current,source);\n    current=new BinaryExpression(current,ex,PLUS);\n    setGeneratedBy(current,source);\n  }\n  if (!first) {\n    StringLiteral suffixLiteral=new StringLiteral(suffix,pS,pE,0);\n    setGeneratedBy(suffixLiteral,source);\n    current=new BinaryExpression(current,suffixLiteral,PLUS);\n    setGeneratedBy(current,source);\n  }\n  ReturnStatement returnStatement=new ReturnStatement(current,pS,pE);\n  setGeneratedBy(returnStatement,source);\n  MethodDeclaration method=new MethodDeclaration(((CompilationUnitDeclaration)type.top().get()).compilationResult);\n  setGeneratedBy(method,source);\n  method.modifiers=toEclipseModifier(AccessLevel.PUBLIC);\n  method.returnType=new QualifiedTypeReference(TypeConstants.JAVA_LANG_STRING,new long[]{p,p,p});\n  setGeneratedBy(method.returnType,source);\n  method.annotations=new Annotation[]{makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)};\n  method.arguments=null;\n  method.selector=\"toString\".toCharArray();\n  method.thrownExceptions=null;\n  method.typeParameters=null;\n  method.bits|=Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\n  method.bodyStart=method.declarationSourceStart=method.sourceStart=source.sourceStart;\n  method.bodyEnd=method.declarationSourceEnd=method.sourceEnd=source.sourceEnd;\n  method.statements=new Statement[]{returnStatement};\n  return method;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 720,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 201,
        "startColumnNumber" : 2,
        "endLineNumber" : 201,
        "endColumnNumber" : 34
      },
      "nodeContext" : "setGeneratedBy(current,source);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "lombok.eclipse.handlers.ASTNode"
  }, {
    "nodeContext" : "source",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 206,
      "startColumnNumber" : 31,
      "endLineNumber" : 206,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 206,
        "startColumnNumber" : 3,
        "endLineNumber" : 206,
        "endColumnNumber" : 38
      },
      "nodeContext" : "setGeneratedBy(callToSuper,source)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 206,
        "startColumnNumber" : 3,
        "endLineNumber" : 206,
        "endColumnNumber" : 39
      },
      "nodeContext" : "setGeneratedBy(callToSuper,source);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 417,
        "startLineNumber" : 203,
        "startColumnNumber" : 17,
        "endLineNumber" : 213,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  MessageSend callToSuper=new MessageSend();\n  callToSuper.sourceStart=pS;\n  callToSuper.sourceEnd=pE;\n  setGeneratedBy(callToSuper,source);\n  callToSuper.receiver=new SuperReference(pS,pE);\n  setGeneratedBy(callToSuper,source);\n  callToSuper.selector=\"toString\".toCharArray();\n  current=new BinaryExpression(current,callToSuper,PLUS);\n  setGeneratedBy(current,source);\n  first=false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 67,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 432,
        "startLineNumber" : 203,
        "startColumnNumber" : 2,
        "endLineNumber" : 213,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (callSuper) {\n  MessageSend callToSuper=new MessageSend();\n  callToSuper.sourceStart=pS;\n  callToSuper.sourceEnd=pE;\n  setGeneratedBy(callToSuper,source);\n  callToSuper.receiver=new SuperReference(pS,pE);\n  setGeneratedBy(callToSuper,source);\n  callToSuper.selector=\"toString\".toCharArray();\n  current=new BinaryExpression(current,callToSuper,PLUS);\n  setGeneratedBy(current,source);\n  first=false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 69,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4152,
        "startLineNumber" : 178,
        "startColumnNumber" : 90,
        "endLineNumber" : 283,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String typeName=getTypeName(type);\n  char[] suffix=\")\".toCharArray();\n  String infixS=\", \";\n  char[] infix=infixS.toCharArray();\n  int pS=source.sourceStart, pE=source.sourceEnd;\n  long p=(long)pS << 32 | pE;\n  final int PLUS=OperatorIds.PLUS;\n  char[] prefix;\n  if (callSuper) {\n    prefix=(typeName + \"(super=\").toCharArray();\n  }\n else   if (fields.isEmpty()) {\n    prefix=(typeName + \"()\").toCharArray();\n  }\n else   if (includeFieldNames) {\n    prefix=(typeName + \"(\" + new String(((FieldDeclaration)fields.iterator().next().get()).name)+ \"=\").toCharArray();\n  }\n else {\n    prefix=(typeName + \"(\").toCharArray();\n  }\n  boolean first=true;\n  Expression current=new StringLiteral(prefix,pS,pE,0);\n  setGeneratedBy(current,source);\n  if (callSuper) {\n    MessageSend callToSuper=new MessageSend();\n    callToSuper.sourceStart=pS;\n    callToSuper.sourceEnd=pE;\n    setGeneratedBy(callToSuper,source);\n    callToSuper.receiver=new SuperReference(pS,pE);\n    setGeneratedBy(callToSuper,source);\n    callToSuper.selector=\"toString\".toCharArray();\n    current=new BinaryExpression(current,callToSuper,PLUS);\n    setGeneratedBy(current,source);\n    first=false;\n  }\n  for (  EclipseNode field : fields) {\n    TypeReference fType=getFieldType(field,fieldAccess);\n    Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n    Expression ex;\n    if (fType.dimensions() > 0) {\n      MessageSend arrayToString=new MessageSend();\n      arrayToString.sourceStart=pS;\n      arrayToString.sourceEnd=pE;\n      arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n      arrayToString.arguments=new Expression[]{fieldAccessor};\n      setGeneratedBy(arrayToString.arguments[0],source);\n      if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n        arrayToString.selector=\"deepToString\".toCharArray();\n      }\n else {\n        arrayToString.selector=\"toString\".toCharArray();\n      }\n      ex=arrayToString;\n    }\n else {\n      ex=fieldAccessor;\n    }\n    setGeneratedBy(ex,source);\n    if (first) {\n      current=new BinaryExpression(current,ex,PLUS);\n      current.sourceStart=pS;\n      current.sourceEnd=pE;\n      setGeneratedBy(current,source);\n      first=false;\n      continue;\n    }\n    StringLiteral fieldNameLiteral;\n    if (includeFieldNames) {\n      char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n      fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n    }\n else {\n      fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n    }\n    setGeneratedBy(fieldNameLiteral,source);\n    current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n    setGeneratedBy(current,source);\n    current=new BinaryExpression(current,ex,PLUS);\n    setGeneratedBy(current,source);\n  }\n  if (!first) {\n    StringLiteral suffixLiteral=new StringLiteral(suffix,pS,pE,0);\n    setGeneratedBy(suffixLiteral,source);\n    current=new BinaryExpression(current,suffixLiteral,PLUS);\n    setGeneratedBy(current,source);\n  }\n  ReturnStatement returnStatement=new ReturnStatement(current,pS,pE);\n  setGeneratedBy(returnStatement,source);\n  MethodDeclaration method=new MethodDeclaration(((CompilationUnitDeclaration)type.top().get()).compilationResult);\n  setGeneratedBy(method,source);\n  method.modifiers=toEclipseModifier(AccessLevel.PUBLIC);\n  method.returnType=new QualifiedTypeReference(TypeConstants.JAVA_LANG_STRING,new long[]{p,p,p});\n  setGeneratedBy(method.returnType,source);\n  method.annotations=new Annotation[]{makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)};\n  method.arguments=null;\n  method.selector=\"toString\".toCharArray();\n  method.thrownExceptions=null;\n  method.typeParameters=null;\n  method.bits|=Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\n  method.bodyStart=method.declarationSourceStart=method.sourceStart=source.sourceStart;\n  method.bodyEnd=method.declarationSourceEnd=method.sourceEnd=source.sourceEnd;\n  method.statements=new Statement[]{returnStatement};\n  return method;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 690,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4333,
        "startLineNumber" : 177,
        "startColumnNumber" : 1,
        "endLineNumber" : 283,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private MethodDeclaration createToString(EclipseNode type,Collection<EclipseNode> fields,boolean includeFieldNames,boolean callSuper,ASTNode source,FieldAccess fieldAccess){\n  String typeName=getTypeName(type);\n  char[] suffix=\")\".toCharArray();\n  String infixS=\", \";\n  char[] infix=infixS.toCharArray();\n  int pS=source.sourceStart, pE=source.sourceEnd;\n  long p=(long)pS << 32 | pE;\n  final int PLUS=OperatorIds.PLUS;\n  char[] prefix;\n  if (callSuper) {\n    prefix=(typeName + \"(super=\").toCharArray();\n  }\n else   if (fields.isEmpty()) {\n    prefix=(typeName + \"()\").toCharArray();\n  }\n else   if (includeFieldNames) {\n    prefix=(typeName + \"(\" + new String(((FieldDeclaration)fields.iterator().next().get()).name)+ \"=\").toCharArray();\n  }\n else {\n    prefix=(typeName + \"(\").toCharArray();\n  }\n  boolean first=true;\n  Expression current=new StringLiteral(prefix,pS,pE,0);\n  setGeneratedBy(current,source);\n  if (callSuper) {\n    MessageSend callToSuper=new MessageSend();\n    callToSuper.sourceStart=pS;\n    callToSuper.sourceEnd=pE;\n    setGeneratedBy(callToSuper,source);\n    callToSuper.receiver=new SuperReference(pS,pE);\n    setGeneratedBy(callToSuper,source);\n    callToSuper.selector=\"toString\".toCharArray();\n    current=new BinaryExpression(current,callToSuper,PLUS);\n    setGeneratedBy(current,source);\n    first=false;\n  }\n  for (  EclipseNode field : fields) {\n    TypeReference fType=getFieldType(field,fieldAccess);\n    Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n    Expression ex;\n    if (fType.dimensions() > 0) {\n      MessageSend arrayToString=new MessageSend();\n      arrayToString.sourceStart=pS;\n      arrayToString.sourceEnd=pE;\n      arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n      arrayToString.arguments=new Expression[]{fieldAccessor};\n      setGeneratedBy(arrayToString.arguments[0],source);\n      if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n        arrayToString.selector=\"deepToString\".toCharArray();\n      }\n else {\n        arrayToString.selector=\"toString\".toCharArray();\n      }\n      ex=arrayToString;\n    }\n else {\n      ex=fieldAccessor;\n    }\n    setGeneratedBy(ex,source);\n    if (first) {\n      current=new BinaryExpression(current,ex,PLUS);\n      current.sourceStart=pS;\n      current.sourceEnd=pE;\n      setGeneratedBy(current,source);\n      first=false;\n      continue;\n    }\n    StringLiteral fieldNameLiteral;\n    if (includeFieldNames) {\n      char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n      fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n    }\n else {\n      fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n    }\n    setGeneratedBy(fieldNameLiteral,source);\n    current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n    setGeneratedBy(current,source);\n    current=new BinaryExpression(current,ex,PLUS);\n    setGeneratedBy(current,source);\n  }\n  if (!first) {\n    StringLiteral suffixLiteral=new StringLiteral(suffix,pS,pE,0);\n    setGeneratedBy(suffixLiteral,source);\n    current=new BinaryExpression(current,suffixLiteral,PLUS);\n    setGeneratedBy(current,source);\n  }\n  ReturnStatement returnStatement=new ReturnStatement(current,pS,pE);\n  setGeneratedBy(returnStatement,source);\n  MethodDeclaration method=new MethodDeclaration(((CompilationUnitDeclaration)type.top().get()).compilationResult);\n  setGeneratedBy(method,source);\n  method.modifiers=toEclipseModifier(AccessLevel.PUBLIC);\n  method.returnType=new QualifiedTypeReference(TypeConstants.JAVA_LANG_STRING,new long[]{p,p,p});\n  setGeneratedBy(method.returnType,source);\n  method.annotations=new Annotation[]{makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)};\n  method.arguments=null;\n  method.selector=\"toString\".toCharArray();\n  method.thrownExceptions=null;\n  method.typeParameters=null;\n  method.bits|=Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\n  method.bodyStart=method.declarationSourceStart=method.sourceStart=source.sourceStart;\n  method.bodyEnd=method.declarationSourceEnd=method.sourceEnd=source.sourceEnd;\n  method.statements=new Statement[]{returnStatement};\n  return method;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 720,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 206,
        "startColumnNumber" : 3,
        "endLineNumber" : 206,
        "endColumnNumber" : 39
      },
      "nodeContext" : "setGeneratedBy(callToSuper,source);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "lombok.eclipse.handlers.ASTNode"
  }, {
    "nodeContext" : "source",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 208,
      "startColumnNumber" : 31,
      "endLineNumber" : 208,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 208,
        "startColumnNumber" : 3,
        "endLineNumber" : 208,
        "endColumnNumber" : 38
      },
      "nodeContext" : "setGeneratedBy(callToSuper,source)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 208,
        "startColumnNumber" : 3,
        "endLineNumber" : 208,
        "endColumnNumber" : 39
      },
      "nodeContext" : "setGeneratedBy(callToSuper,source);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 417,
        "startLineNumber" : 203,
        "startColumnNumber" : 17,
        "endLineNumber" : 213,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  MessageSend callToSuper=new MessageSend();\n  callToSuper.sourceStart=pS;\n  callToSuper.sourceEnd=pE;\n  setGeneratedBy(callToSuper,source);\n  callToSuper.receiver=new SuperReference(pS,pE);\n  setGeneratedBy(callToSuper,source);\n  callToSuper.selector=\"toString\".toCharArray();\n  current=new BinaryExpression(current,callToSuper,PLUS);\n  setGeneratedBy(current,source);\n  first=false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 67,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 432,
        "startLineNumber" : 203,
        "startColumnNumber" : 2,
        "endLineNumber" : 213,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (callSuper) {\n  MessageSend callToSuper=new MessageSend();\n  callToSuper.sourceStart=pS;\n  callToSuper.sourceEnd=pE;\n  setGeneratedBy(callToSuper,source);\n  callToSuper.receiver=new SuperReference(pS,pE);\n  setGeneratedBy(callToSuper,source);\n  callToSuper.selector=\"toString\".toCharArray();\n  current=new BinaryExpression(current,callToSuper,PLUS);\n  setGeneratedBy(current,source);\n  first=false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 69,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4152,
        "startLineNumber" : 178,
        "startColumnNumber" : 90,
        "endLineNumber" : 283,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String typeName=getTypeName(type);\n  char[] suffix=\")\".toCharArray();\n  String infixS=\", \";\n  char[] infix=infixS.toCharArray();\n  int pS=source.sourceStart, pE=source.sourceEnd;\n  long p=(long)pS << 32 | pE;\n  final int PLUS=OperatorIds.PLUS;\n  char[] prefix;\n  if (callSuper) {\n    prefix=(typeName + \"(super=\").toCharArray();\n  }\n else   if (fields.isEmpty()) {\n    prefix=(typeName + \"()\").toCharArray();\n  }\n else   if (includeFieldNames) {\n    prefix=(typeName + \"(\" + new String(((FieldDeclaration)fields.iterator().next().get()).name)+ \"=\").toCharArray();\n  }\n else {\n    prefix=(typeName + \"(\").toCharArray();\n  }\n  boolean first=true;\n  Expression current=new StringLiteral(prefix,pS,pE,0);\n  setGeneratedBy(current,source);\n  if (callSuper) {\n    MessageSend callToSuper=new MessageSend();\n    callToSuper.sourceStart=pS;\n    callToSuper.sourceEnd=pE;\n    setGeneratedBy(callToSuper,source);\n    callToSuper.receiver=new SuperReference(pS,pE);\n    setGeneratedBy(callToSuper,source);\n    callToSuper.selector=\"toString\".toCharArray();\n    current=new BinaryExpression(current,callToSuper,PLUS);\n    setGeneratedBy(current,source);\n    first=false;\n  }\n  for (  EclipseNode field : fields) {\n    TypeReference fType=getFieldType(field,fieldAccess);\n    Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n    Expression ex;\n    if (fType.dimensions() > 0) {\n      MessageSend arrayToString=new MessageSend();\n      arrayToString.sourceStart=pS;\n      arrayToString.sourceEnd=pE;\n      arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n      arrayToString.arguments=new Expression[]{fieldAccessor};\n      setGeneratedBy(arrayToString.arguments[0],source);\n      if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n        arrayToString.selector=\"deepToString\".toCharArray();\n      }\n else {\n        arrayToString.selector=\"toString\".toCharArray();\n      }\n      ex=arrayToString;\n    }\n else {\n      ex=fieldAccessor;\n    }\n    setGeneratedBy(ex,source);\n    if (first) {\n      current=new BinaryExpression(current,ex,PLUS);\n      current.sourceStart=pS;\n      current.sourceEnd=pE;\n      setGeneratedBy(current,source);\n      first=false;\n      continue;\n    }\n    StringLiteral fieldNameLiteral;\n    if (includeFieldNames) {\n      char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n      fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n    }\n else {\n      fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n    }\n    setGeneratedBy(fieldNameLiteral,source);\n    current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n    setGeneratedBy(current,source);\n    current=new BinaryExpression(current,ex,PLUS);\n    setGeneratedBy(current,source);\n  }\n  if (!first) {\n    StringLiteral suffixLiteral=new StringLiteral(suffix,pS,pE,0);\n    setGeneratedBy(suffixLiteral,source);\n    current=new BinaryExpression(current,suffixLiteral,PLUS);\n    setGeneratedBy(current,source);\n  }\n  ReturnStatement returnStatement=new ReturnStatement(current,pS,pE);\n  setGeneratedBy(returnStatement,source);\n  MethodDeclaration method=new MethodDeclaration(((CompilationUnitDeclaration)type.top().get()).compilationResult);\n  setGeneratedBy(method,source);\n  method.modifiers=toEclipseModifier(AccessLevel.PUBLIC);\n  method.returnType=new QualifiedTypeReference(TypeConstants.JAVA_LANG_STRING,new long[]{p,p,p});\n  setGeneratedBy(method.returnType,source);\n  method.annotations=new Annotation[]{makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)};\n  method.arguments=null;\n  method.selector=\"toString\".toCharArray();\n  method.thrownExceptions=null;\n  method.typeParameters=null;\n  method.bits|=Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\n  method.bodyStart=method.declarationSourceStart=method.sourceStart=source.sourceStart;\n  method.bodyEnd=method.declarationSourceEnd=method.sourceEnd=source.sourceEnd;\n  method.statements=new Statement[]{returnStatement};\n  return method;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 690,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4333,
        "startLineNumber" : 177,
        "startColumnNumber" : 1,
        "endLineNumber" : 283,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private MethodDeclaration createToString(EclipseNode type,Collection<EclipseNode> fields,boolean includeFieldNames,boolean callSuper,ASTNode source,FieldAccess fieldAccess){\n  String typeName=getTypeName(type);\n  char[] suffix=\")\".toCharArray();\n  String infixS=\", \";\n  char[] infix=infixS.toCharArray();\n  int pS=source.sourceStart, pE=source.sourceEnd;\n  long p=(long)pS << 32 | pE;\n  final int PLUS=OperatorIds.PLUS;\n  char[] prefix;\n  if (callSuper) {\n    prefix=(typeName + \"(super=\").toCharArray();\n  }\n else   if (fields.isEmpty()) {\n    prefix=(typeName + \"()\").toCharArray();\n  }\n else   if (includeFieldNames) {\n    prefix=(typeName + \"(\" + new String(((FieldDeclaration)fields.iterator().next().get()).name)+ \"=\").toCharArray();\n  }\n else {\n    prefix=(typeName + \"(\").toCharArray();\n  }\n  boolean first=true;\n  Expression current=new StringLiteral(prefix,pS,pE,0);\n  setGeneratedBy(current,source);\n  if (callSuper) {\n    MessageSend callToSuper=new MessageSend();\n    callToSuper.sourceStart=pS;\n    callToSuper.sourceEnd=pE;\n    setGeneratedBy(callToSuper,source);\n    callToSuper.receiver=new SuperReference(pS,pE);\n    setGeneratedBy(callToSuper,source);\n    callToSuper.selector=\"toString\".toCharArray();\n    current=new BinaryExpression(current,callToSuper,PLUS);\n    setGeneratedBy(current,source);\n    first=false;\n  }\n  for (  EclipseNode field : fields) {\n    TypeReference fType=getFieldType(field,fieldAccess);\n    Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n    Expression ex;\n    if (fType.dimensions() > 0) {\n      MessageSend arrayToString=new MessageSend();\n      arrayToString.sourceStart=pS;\n      arrayToString.sourceEnd=pE;\n      arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n      arrayToString.arguments=new Expression[]{fieldAccessor};\n      setGeneratedBy(arrayToString.arguments[0],source);\n      if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n        arrayToString.selector=\"deepToString\".toCharArray();\n      }\n else {\n        arrayToString.selector=\"toString\".toCharArray();\n      }\n      ex=arrayToString;\n    }\n else {\n      ex=fieldAccessor;\n    }\n    setGeneratedBy(ex,source);\n    if (first) {\n      current=new BinaryExpression(current,ex,PLUS);\n      current.sourceStart=pS;\n      current.sourceEnd=pE;\n      setGeneratedBy(current,source);\n      first=false;\n      continue;\n    }\n    StringLiteral fieldNameLiteral;\n    if (includeFieldNames) {\n      char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n      fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n    }\n else {\n      fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n    }\n    setGeneratedBy(fieldNameLiteral,source);\n    current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n    setGeneratedBy(current,source);\n    current=new BinaryExpression(current,ex,PLUS);\n    setGeneratedBy(current,source);\n  }\n  if (!first) {\n    StringLiteral suffixLiteral=new StringLiteral(suffix,pS,pE,0);\n    setGeneratedBy(suffixLiteral,source);\n    current=new BinaryExpression(current,suffixLiteral,PLUS);\n    setGeneratedBy(current,source);\n  }\n  ReturnStatement returnStatement=new ReturnStatement(current,pS,pE);\n  setGeneratedBy(returnStatement,source);\n  MethodDeclaration method=new MethodDeclaration(((CompilationUnitDeclaration)type.top().get()).compilationResult);\n  setGeneratedBy(method,source);\n  method.modifiers=toEclipseModifier(AccessLevel.PUBLIC);\n  method.returnType=new QualifiedTypeReference(TypeConstants.JAVA_LANG_STRING,new long[]{p,p,p});\n  setGeneratedBy(method.returnType,source);\n  method.annotations=new Annotation[]{makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)};\n  method.arguments=null;\n  method.selector=\"toString\".toCharArray();\n  method.thrownExceptions=null;\n  method.typeParameters=null;\n  method.bits|=Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\n  method.bodyStart=method.declarationSourceStart=method.sourceStart=source.sourceStart;\n  method.bodyEnd=method.declarationSourceEnd=method.sourceEnd=source.sourceEnd;\n  method.statements=new Statement[]{returnStatement};\n  return method;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 720,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 208,
        "startColumnNumber" : 3,
        "endLineNumber" : 208,
        "endColumnNumber" : 39
      },
      "nodeContext" : "setGeneratedBy(callToSuper,source);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "lombok.eclipse.handlers.ASTNode"
  }, {
    "nodeContext" : "source",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 211,
      "startColumnNumber" : 27,
      "endLineNumber" : 211,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 211,
        "startColumnNumber" : 3,
        "endLineNumber" : 211,
        "endColumnNumber" : 34
      },
      "nodeContext" : "setGeneratedBy(current,source)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 211,
        "startColumnNumber" : 3,
        "endLineNumber" : 211,
        "endColumnNumber" : 35
      },
      "nodeContext" : "setGeneratedBy(current,source);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 417,
        "startLineNumber" : 203,
        "startColumnNumber" : 17,
        "endLineNumber" : 213,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  MessageSend callToSuper=new MessageSend();\n  callToSuper.sourceStart=pS;\n  callToSuper.sourceEnd=pE;\n  setGeneratedBy(callToSuper,source);\n  callToSuper.receiver=new SuperReference(pS,pE);\n  setGeneratedBy(callToSuper,source);\n  callToSuper.selector=\"toString\".toCharArray();\n  current=new BinaryExpression(current,callToSuper,PLUS);\n  setGeneratedBy(current,source);\n  first=false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 67,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 432,
        "startLineNumber" : 203,
        "startColumnNumber" : 2,
        "endLineNumber" : 213,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (callSuper) {\n  MessageSend callToSuper=new MessageSend();\n  callToSuper.sourceStart=pS;\n  callToSuper.sourceEnd=pE;\n  setGeneratedBy(callToSuper,source);\n  callToSuper.receiver=new SuperReference(pS,pE);\n  setGeneratedBy(callToSuper,source);\n  callToSuper.selector=\"toString\".toCharArray();\n  current=new BinaryExpression(current,callToSuper,PLUS);\n  setGeneratedBy(current,source);\n  first=false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 69,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4152,
        "startLineNumber" : 178,
        "startColumnNumber" : 90,
        "endLineNumber" : 283,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String typeName=getTypeName(type);\n  char[] suffix=\")\".toCharArray();\n  String infixS=\", \";\n  char[] infix=infixS.toCharArray();\n  int pS=source.sourceStart, pE=source.sourceEnd;\n  long p=(long)pS << 32 | pE;\n  final int PLUS=OperatorIds.PLUS;\n  char[] prefix;\n  if (callSuper) {\n    prefix=(typeName + \"(super=\").toCharArray();\n  }\n else   if (fields.isEmpty()) {\n    prefix=(typeName + \"()\").toCharArray();\n  }\n else   if (includeFieldNames) {\n    prefix=(typeName + \"(\" + new String(((FieldDeclaration)fields.iterator().next().get()).name)+ \"=\").toCharArray();\n  }\n else {\n    prefix=(typeName + \"(\").toCharArray();\n  }\n  boolean first=true;\n  Expression current=new StringLiteral(prefix,pS,pE,0);\n  setGeneratedBy(current,source);\n  if (callSuper) {\n    MessageSend callToSuper=new MessageSend();\n    callToSuper.sourceStart=pS;\n    callToSuper.sourceEnd=pE;\n    setGeneratedBy(callToSuper,source);\n    callToSuper.receiver=new SuperReference(pS,pE);\n    setGeneratedBy(callToSuper,source);\n    callToSuper.selector=\"toString\".toCharArray();\n    current=new BinaryExpression(current,callToSuper,PLUS);\n    setGeneratedBy(current,source);\n    first=false;\n  }\n  for (  EclipseNode field : fields) {\n    TypeReference fType=getFieldType(field,fieldAccess);\n    Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n    Expression ex;\n    if (fType.dimensions() > 0) {\n      MessageSend arrayToString=new MessageSend();\n      arrayToString.sourceStart=pS;\n      arrayToString.sourceEnd=pE;\n      arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n      arrayToString.arguments=new Expression[]{fieldAccessor};\n      setGeneratedBy(arrayToString.arguments[0],source);\n      if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n        arrayToString.selector=\"deepToString\".toCharArray();\n      }\n else {\n        arrayToString.selector=\"toString\".toCharArray();\n      }\n      ex=arrayToString;\n    }\n else {\n      ex=fieldAccessor;\n    }\n    setGeneratedBy(ex,source);\n    if (first) {\n      current=new BinaryExpression(current,ex,PLUS);\n      current.sourceStart=pS;\n      current.sourceEnd=pE;\n      setGeneratedBy(current,source);\n      first=false;\n      continue;\n    }\n    StringLiteral fieldNameLiteral;\n    if (includeFieldNames) {\n      char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n      fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n    }\n else {\n      fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n    }\n    setGeneratedBy(fieldNameLiteral,source);\n    current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n    setGeneratedBy(current,source);\n    current=new BinaryExpression(current,ex,PLUS);\n    setGeneratedBy(current,source);\n  }\n  if (!first) {\n    StringLiteral suffixLiteral=new StringLiteral(suffix,pS,pE,0);\n    setGeneratedBy(suffixLiteral,source);\n    current=new BinaryExpression(current,suffixLiteral,PLUS);\n    setGeneratedBy(current,source);\n  }\n  ReturnStatement returnStatement=new ReturnStatement(current,pS,pE);\n  setGeneratedBy(returnStatement,source);\n  MethodDeclaration method=new MethodDeclaration(((CompilationUnitDeclaration)type.top().get()).compilationResult);\n  setGeneratedBy(method,source);\n  method.modifiers=toEclipseModifier(AccessLevel.PUBLIC);\n  method.returnType=new QualifiedTypeReference(TypeConstants.JAVA_LANG_STRING,new long[]{p,p,p});\n  setGeneratedBy(method.returnType,source);\n  method.annotations=new Annotation[]{makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)};\n  method.arguments=null;\n  method.selector=\"toString\".toCharArray();\n  method.thrownExceptions=null;\n  method.typeParameters=null;\n  method.bits|=Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\n  method.bodyStart=method.declarationSourceStart=method.sourceStart=source.sourceStart;\n  method.bodyEnd=method.declarationSourceEnd=method.sourceEnd=source.sourceEnd;\n  method.statements=new Statement[]{returnStatement};\n  return method;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 690,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4333,
        "startLineNumber" : 177,
        "startColumnNumber" : 1,
        "endLineNumber" : 283,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private MethodDeclaration createToString(EclipseNode type,Collection<EclipseNode> fields,boolean includeFieldNames,boolean callSuper,ASTNode source,FieldAccess fieldAccess){\n  String typeName=getTypeName(type);\n  char[] suffix=\")\".toCharArray();\n  String infixS=\", \";\n  char[] infix=infixS.toCharArray();\n  int pS=source.sourceStart, pE=source.sourceEnd;\n  long p=(long)pS << 32 | pE;\n  final int PLUS=OperatorIds.PLUS;\n  char[] prefix;\n  if (callSuper) {\n    prefix=(typeName + \"(super=\").toCharArray();\n  }\n else   if (fields.isEmpty()) {\n    prefix=(typeName + \"()\").toCharArray();\n  }\n else   if (includeFieldNames) {\n    prefix=(typeName + \"(\" + new String(((FieldDeclaration)fields.iterator().next().get()).name)+ \"=\").toCharArray();\n  }\n else {\n    prefix=(typeName + \"(\").toCharArray();\n  }\n  boolean first=true;\n  Expression current=new StringLiteral(prefix,pS,pE,0);\n  setGeneratedBy(current,source);\n  if (callSuper) {\n    MessageSend callToSuper=new MessageSend();\n    callToSuper.sourceStart=pS;\n    callToSuper.sourceEnd=pE;\n    setGeneratedBy(callToSuper,source);\n    callToSuper.receiver=new SuperReference(pS,pE);\n    setGeneratedBy(callToSuper,source);\n    callToSuper.selector=\"toString\".toCharArray();\n    current=new BinaryExpression(current,callToSuper,PLUS);\n    setGeneratedBy(current,source);\n    first=false;\n  }\n  for (  EclipseNode field : fields) {\n    TypeReference fType=getFieldType(field,fieldAccess);\n    Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n    Expression ex;\n    if (fType.dimensions() > 0) {\n      MessageSend arrayToString=new MessageSend();\n      arrayToString.sourceStart=pS;\n      arrayToString.sourceEnd=pE;\n      arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n      arrayToString.arguments=new Expression[]{fieldAccessor};\n      setGeneratedBy(arrayToString.arguments[0],source);\n      if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n        arrayToString.selector=\"deepToString\".toCharArray();\n      }\n else {\n        arrayToString.selector=\"toString\".toCharArray();\n      }\n      ex=arrayToString;\n    }\n else {\n      ex=fieldAccessor;\n    }\n    setGeneratedBy(ex,source);\n    if (first) {\n      current=new BinaryExpression(current,ex,PLUS);\n      current.sourceStart=pS;\n      current.sourceEnd=pE;\n      setGeneratedBy(current,source);\n      first=false;\n      continue;\n    }\n    StringLiteral fieldNameLiteral;\n    if (includeFieldNames) {\n      char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n      fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n    }\n else {\n      fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n    }\n    setGeneratedBy(fieldNameLiteral,source);\n    current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n    setGeneratedBy(current,source);\n    current=new BinaryExpression(current,ex,PLUS);\n    setGeneratedBy(current,source);\n  }\n  if (!first) {\n    StringLiteral suffixLiteral=new StringLiteral(suffix,pS,pE,0);\n    setGeneratedBy(suffixLiteral,source);\n    current=new BinaryExpression(current,suffixLiteral,PLUS);\n    setGeneratedBy(current,source);\n  }\n  ReturnStatement returnStatement=new ReturnStatement(current,pS,pE);\n  setGeneratedBy(returnStatement,source);\n  MethodDeclaration method=new MethodDeclaration(((CompilationUnitDeclaration)type.top().get()).compilationResult);\n  setGeneratedBy(method,source);\n  method.modifiers=toEclipseModifier(AccessLevel.PUBLIC);\n  method.returnType=new QualifiedTypeReference(TypeConstants.JAVA_LANG_STRING,new long[]{p,p,p});\n  setGeneratedBy(method.returnType,source);\n  method.annotations=new Annotation[]{makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)};\n  method.arguments=null;\n  method.selector=\"toString\".toCharArray();\n  method.thrownExceptions=null;\n  method.typeParameters=null;\n  method.bits|=Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\n  method.bodyStart=method.declarationSourceStart=method.sourceStart=source.sourceStart;\n  method.bodyEnd=method.declarationSourceEnd=method.sourceEnd=source.sourceEnd;\n  method.statements=new Statement[]{returnStatement};\n  return method;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 720,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 211,
        "startColumnNumber" : 3,
        "endLineNumber" : 211,
        "endColumnNumber" : 35
      },
      "nodeContext" : "setGeneratedBy(current,source);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "lombok.eclipse.handlers.ASTNode"
  }, {
    "nodeContext" : "source",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 217,
      "startColumnNumber" : 70,
      "endLineNumber" : 217,
      "endColumnNumber" : 76
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 217,
        "startColumnNumber" : 30,
        "endLineNumber" : 217,
        "endColumnNumber" : 77
      },
      "nodeContext" : "createFieldAccessor(field,fieldAccess,source)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 217,
        "startColumnNumber" : 14,
        "endLineNumber" : 217,
        "endColumnNumber" : 77
      },
      "nodeContext" : "fieldAccessor=createFieldAccessor(field,fieldAccess,source)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 217,
        "startColumnNumber" : 3,
        "endLineNumber" : 217,
        "endColumnNumber" : 78
      },
      "nodeContext" : "Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1631,
        "startLineNumber" : 215,
        "startColumnNumber" : 35,
        "endLineNumber" : 257,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  TypeReference fType=getFieldType(field,fieldAccess);\n  Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n  Expression ex;\n  if (fType.dimensions() > 0) {\n    MessageSend arrayToString=new MessageSend();\n    arrayToString.sourceStart=pS;\n    arrayToString.sourceEnd=pE;\n    arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n    arrayToString.arguments=new Expression[]{fieldAccessor};\n    setGeneratedBy(arrayToString.arguments[0],source);\n    if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n      arrayToString.selector=\"deepToString\".toCharArray();\n    }\n else {\n      arrayToString.selector=\"toString\".toCharArray();\n    }\n    ex=arrayToString;\n  }\n else {\n    ex=fieldAccessor;\n  }\n  setGeneratedBy(ex,source);\n  if (first) {\n    current=new BinaryExpression(current,ex,PLUS);\n    current.sourceStart=pS;\n    current.sourceEnd=pE;\n    setGeneratedBy(current,source);\n    first=false;\n    continue;\n  }\n  StringLiteral fieldNameLiteral;\n  if (includeFieldNames) {\n    char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n    fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n  }\n else {\n    fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n  }\n  setGeneratedBy(fieldNameLiteral,source);\n  current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n  setGeneratedBy(current,source);\n  current=new BinaryExpression(current,ex,PLUS);\n  setGeneratedBy(current,source);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 250,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1664,
        "startLineNumber" : 215,
        "startColumnNumber" : 2,
        "endLineNumber" : 257,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (EclipseNode field : fields) {\n  TypeReference fType=getFieldType(field,fieldAccess);\n  Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n  Expression ex;\n  if (fType.dimensions() > 0) {\n    MessageSend arrayToString=new MessageSend();\n    arrayToString.sourceStart=pS;\n    arrayToString.sourceEnd=pE;\n    arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n    arrayToString.arguments=new Expression[]{fieldAccessor};\n    setGeneratedBy(arrayToString.arguments[0],source);\n    if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n      arrayToString.selector=\"deepToString\".toCharArray();\n    }\n else {\n      arrayToString.selector=\"toString\".toCharArray();\n    }\n    ex=arrayToString;\n  }\n else {\n    ex=fieldAccessor;\n  }\n  setGeneratedBy(ex,source);\n  if (first) {\n    current=new BinaryExpression(current,ex,PLUS);\n    current.sourceStart=pS;\n    current.sourceEnd=pE;\n    setGeneratedBy(current,source);\n    first=false;\n    continue;\n  }\n  StringLiteral fieldNameLiteral;\n  if (includeFieldNames) {\n    char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n    fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n  }\n else {\n    fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n  }\n  setGeneratedBy(fieldNameLiteral,source);\n  current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n  setGeneratedBy(current,source);\n  current=new BinaryExpression(current,ex,PLUS);\n  setGeneratedBy(current,source);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 256,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4152,
        "startLineNumber" : 178,
        "startColumnNumber" : 90,
        "endLineNumber" : 283,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String typeName=getTypeName(type);\n  char[] suffix=\")\".toCharArray();\n  String infixS=\", \";\n  char[] infix=infixS.toCharArray();\n  int pS=source.sourceStart, pE=source.sourceEnd;\n  long p=(long)pS << 32 | pE;\n  final int PLUS=OperatorIds.PLUS;\n  char[] prefix;\n  if (callSuper) {\n    prefix=(typeName + \"(super=\").toCharArray();\n  }\n else   if (fields.isEmpty()) {\n    prefix=(typeName + \"()\").toCharArray();\n  }\n else   if (includeFieldNames) {\n    prefix=(typeName + \"(\" + new String(((FieldDeclaration)fields.iterator().next().get()).name)+ \"=\").toCharArray();\n  }\n else {\n    prefix=(typeName + \"(\").toCharArray();\n  }\n  boolean first=true;\n  Expression current=new StringLiteral(prefix,pS,pE,0);\n  setGeneratedBy(current,source);\n  if (callSuper) {\n    MessageSend callToSuper=new MessageSend();\n    callToSuper.sourceStart=pS;\n    callToSuper.sourceEnd=pE;\n    setGeneratedBy(callToSuper,source);\n    callToSuper.receiver=new SuperReference(pS,pE);\n    setGeneratedBy(callToSuper,source);\n    callToSuper.selector=\"toString\".toCharArray();\n    current=new BinaryExpression(current,callToSuper,PLUS);\n    setGeneratedBy(current,source);\n    first=false;\n  }\n  for (  EclipseNode field : fields) {\n    TypeReference fType=getFieldType(field,fieldAccess);\n    Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n    Expression ex;\n    if (fType.dimensions() > 0) {\n      MessageSend arrayToString=new MessageSend();\n      arrayToString.sourceStart=pS;\n      arrayToString.sourceEnd=pE;\n      arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n      arrayToString.arguments=new Expression[]{fieldAccessor};\n      setGeneratedBy(arrayToString.arguments[0],source);\n      if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n        arrayToString.selector=\"deepToString\".toCharArray();\n      }\n else {\n        arrayToString.selector=\"toString\".toCharArray();\n      }\n      ex=arrayToString;\n    }\n else {\n      ex=fieldAccessor;\n    }\n    setGeneratedBy(ex,source);\n    if (first) {\n      current=new BinaryExpression(current,ex,PLUS);\n      current.sourceStart=pS;\n      current.sourceEnd=pE;\n      setGeneratedBy(current,source);\n      first=false;\n      continue;\n    }\n    StringLiteral fieldNameLiteral;\n    if (includeFieldNames) {\n      char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n      fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n    }\n else {\n      fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n    }\n    setGeneratedBy(fieldNameLiteral,source);\n    current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n    setGeneratedBy(current,source);\n    current=new BinaryExpression(current,ex,PLUS);\n    setGeneratedBy(current,source);\n  }\n  if (!first) {\n    StringLiteral suffixLiteral=new StringLiteral(suffix,pS,pE,0);\n    setGeneratedBy(suffixLiteral,source);\n    current=new BinaryExpression(current,suffixLiteral,PLUS);\n    setGeneratedBy(current,source);\n  }\n  ReturnStatement returnStatement=new ReturnStatement(current,pS,pE);\n  setGeneratedBy(returnStatement,source);\n  MethodDeclaration method=new MethodDeclaration(((CompilationUnitDeclaration)type.top().get()).compilationResult);\n  setGeneratedBy(method,source);\n  method.modifiers=toEclipseModifier(AccessLevel.PUBLIC);\n  method.returnType=new QualifiedTypeReference(TypeConstants.JAVA_LANG_STRING,new long[]{p,p,p});\n  setGeneratedBy(method.returnType,source);\n  method.annotations=new Annotation[]{makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)};\n  method.arguments=null;\n  method.selector=\"toString\".toCharArray();\n  method.thrownExceptions=null;\n  method.typeParameters=null;\n  method.bits|=Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\n  method.bodyStart=method.declarationSourceStart=method.sourceStart=source.sourceStart;\n  method.bodyEnd=method.declarationSourceEnd=method.sourceEnd=source.sourceEnd;\n  method.statements=new Statement[]{returnStatement};\n  return method;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 690,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4333,
        "startLineNumber" : 177,
        "startColumnNumber" : 1,
        "endLineNumber" : 283,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private MethodDeclaration createToString(EclipseNode type,Collection<EclipseNode> fields,boolean includeFieldNames,boolean callSuper,ASTNode source,FieldAccess fieldAccess){\n  String typeName=getTypeName(type);\n  char[] suffix=\")\".toCharArray();\n  String infixS=\", \";\n  char[] infix=infixS.toCharArray();\n  int pS=source.sourceStart, pE=source.sourceEnd;\n  long p=(long)pS << 32 | pE;\n  final int PLUS=OperatorIds.PLUS;\n  char[] prefix;\n  if (callSuper) {\n    prefix=(typeName + \"(super=\").toCharArray();\n  }\n else   if (fields.isEmpty()) {\n    prefix=(typeName + \"()\").toCharArray();\n  }\n else   if (includeFieldNames) {\n    prefix=(typeName + \"(\" + new String(((FieldDeclaration)fields.iterator().next().get()).name)+ \"=\").toCharArray();\n  }\n else {\n    prefix=(typeName + \"(\").toCharArray();\n  }\n  boolean first=true;\n  Expression current=new StringLiteral(prefix,pS,pE,0);\n  setGeneratedBy(current,source);\n  if (callSuper) {\n    MessageSend callToSuper=new MessageSend();\n    callToSuper.sourceStart=pS;\n    callToSuper.sourceEnd=pE;\n    setGeneratedBy(callToSuper,source);\n    callToSuper.receiver=new SuperReference(pS,pE);\n    setGeneratedBy(callToSuper,source);\n    callToSuper.selector=\"toString\".toCharArray();\n    current=new BinaryExpression(current,callToSuper,PLUS);\n    setGeneratedBy(current,source);\n    first=false;\n  }\n  for (  EclipseNode field : fields) {\n    TypeReference fType=getFieldType(field,fieldAccess);\n    Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n    Expression ex;\n    if (fType.dimensions() > 0) {\n      MessageSend arrayToString=new MessageSend();\n      arrayToString.sourceStart=pS;\n      arrayToString.sourceEnd=pE;\n      arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n      arrayToString.arguments=new Expression[]{fieldAccessor};\n      setGeneratedBy(arrayToString.arguments[0],source);\n      if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n        arrayToString.selector=\"deepToString\".toCharArray();\n      }\n else {\n        arrayToString.selector=\"toString\".toCharArray();\n      }\n      ex=arrayToString;\n    }\n else {\n      ex=fieldAccessor;\n    }\n    setGeneratedBy(ex,source);\n    if (first) {\n      current=new BinaryExpression(current,ex,PLUS);\n      current.sourceStart=pS;\n      current.sourceEnd=pE;\n      setGeneratedBy(current,source);\n      first=false;\n      continue;\n    }\n    StringLiteral fieldNameLiteral;\n    if (includeFieldNames) {\n      char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n      fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n    }\n else {\n      fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n    }\n    setGeneratedBy(fieldNameLiteral,source);\n    current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n    setGeneratedBy(current,source);\n    current=new BinaryExpression(current,ex,PLUS);\n    setGeneratedBy(current,source);\n  }\n  if (!first) {\n    StringLiteral suffixLiteral=new StringLiteral(suffix,pS,pE,0);\n    setGeneratedBy(suffixLiteral,source);\n    current=new BinaryExpression(current,suffixLiteral,PLUS);\n    setGeneratedBy(current,source);\n  }\n  ReturnStatement returnStatement=new ReturnStatement(current,pS,pE);\n  setGeneratedBy(returnStatement,source);\n  MethodDeclaration method=new MethodDeclaration(((CompilationUnitDeclaration)type.top().get()).compilationResult);\n  setGeneratedBy(method,source);\n  method.modifiers=toEclipseModifier(AccessLevel.PUBLIC);\n  method.returnType=new QualifiedTypeReference(TypeConstants.JAVA_LANG_STRING,new long[]{p,p,p});\n  setGeneratedBy(method.returnType,source);\n  method.annotations=new Annotation[]{makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)};\n  method.arguments=null;\n  method.selector=\"toString\".toCharArray();\n  method.thrownExceptions=null;\n  method.typeParameters=null;\n  method.bits|=Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\n  method.bodyStart=method.declarationSourceStart=method.sourceStart=source.sourceStart;\n  method.bodyEnd=method.declarationSourceEnd=method.sourceEnd=source.sourceEnd;\n  method.statements=new Statement[]{returnStatement};\n  return method;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 720,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 217,
        "startColumnNumber" : 3,
        "endLineNumber" : 217,
        "endColumnNumber" : 78
      },
      "nodeContext" : "Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "lombok.eclipse.handlers.ASTNode"
  }, {
    "nodeContext" : "source",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 223,
      "startColumnNumber" : 54,
      "endLineNumber" : 223,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 223,
        "startColumnNumber" : 29,
        "endLineNumber" : 223,
        "endColumnNumber" : 125
      },
      "nodeContext" : "generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 121,
        "startLineNumber" : 223,
        "startColumnNumber" : 4,
        "endLineNumber" : 223,
        "endColumnNumber" : 125
      },
      "nodeContext" : "arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 16,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 122,
        "startLineNumber" : 223,
        "startColumnNumber" : 4,
        "endLineNumber" : 223,
        "endColumnNumber" : 126
      },
      "nodeContext" : "arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 627,
        "startLineNumber" : 220,
        "startColumnNumber" : 31,
        "endLineNumber" : 232,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  MessageSend arrayToString=new MessageSend();\n  arrayToString.sourceStart=pS;\n  arrayToString.sourceEnd=pE;\n  arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n  arrayToString.arguments=new Expression[]{fieldAccessor};\n  setGeneratedBy(arrayToString.arguments[0],source);\n  if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n    arrayToString.selector=\"deepToString\".toCharArray();\n  }\n else {\n    arrayToString.selector=\"toString\".toCharArray();\n  }\n  ex=arrayToString;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 98,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 691,
        "startLineNumber" : 220,
        "startColumnNumber" : 3,
        "endLineNumber" : 234,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (fType.dimensions() > 0) {\n  MessageSend arrayToString=new MessageSend();\n  arrayToString.sourceStart=pS;\n  arrayToString.sourceEnd=pE;\n  arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n  arrayToString.arguments=new Expression[]{fieldAccessor};\n  setGeneratedBy(arrayToString.arguments[0],source);\n  if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n    arrayToString.selector=\"deepToString\".toCharArray();\n  }\n else {\n    arrayToString.selector=\"toString\".toCharArray();\n  }\n  ex=arrayToString;\n}\n else {\n  ex=fieldAccessor;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 109,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1631,
        "startLineNumber" : 215,
        "startColumnNumber" : 35,
        "endLineNumber" : 257,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  TypeReference fType=getFieldType(field,fieldAccess);\n  Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n  Expression ex;\n  if (fType.dimensions() > 0) {\n    MessageSend arrayToString=new MessageSend();\n    arrayToString.sourceStart=pS;\n    arrayToString.sourceEnd=pE;\n    arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n    arrayToString.arguments=new Expression[]{fieldAccessor};\n    setGeneratedBy(arrayToString.arguments[0],source);\n    if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n      arrayToString.selector=\"deepToString\".toCharArray();\n    }\n else {\n      arrayToString.selector=\"toString\".toCharArray();\n    }\n    ex=arrayToString;\n  }\n else {\n    ex=fieldAccessor;\n  }\n  setGeneratedBy(ex,source);\n  if (first) {\n    current=new BinaryExpression(current,ex,PLUS);\n    current.sourceStart=pS;\n    current.sourceEnd=pE;\n    setGeneratedBy(current,source);\n    first=false;\n    continue;\n  }\n  StringLiteral fieldNameLiteral;\n  if (includeFieldNames) {\n    char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n    fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n  }\n else {\n    fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n  }\n  setGeneratedBy(fieldNameLiteral,source);\n  current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n  setGeneratedBy(current,source);\n  current=new BinaryExpression(current,ex,PLUS);\n  setGeneratedBy(current,source);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 250,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1664,
        "startLineNumber" : 215,
        "startColumnNumber" : 2,
        "endLineNumber" : 257,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (EclipseNode field : fields) {\n  TypeReference fType=getFieldType(field,fieldAccess);\n  Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n  Expression ex;\n  if (fType.dimensions() > 0) {\n    MessageSend arrayToString=new MessageSend();\n    arrayToString.sourceStart=pS;\n    arrayToString.sourceEnd=pE;\n    arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n    arrayToString.arguments=new Expression[]{fieldAccessor};\n    setGeneratedBy(arrayToString.arguments[0],source);\n    if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n      arrayToString.selector=\"deepToString\".toCharArray();\n    }\n else {\n      arrayToString.selector=\"toString\".toCharArray();\n    }\n    ex=arrayToString;\n  }\n else {\n    ex=fieldAccessor;\n  }\n  setGeneratedBy(ex,source);\n  if (first) {\n    current=new BinaryExpression(current,ex,PLUS);\n    current.sourceStart=pS;\n    current.sourceEnd=pE;\n    setGeneratedBy(current,source);\n    first=false;\n    continue;\n  }\n  StringLiteral fieldNameLiteral;\n  if (includeFieldNames) {\n    char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n    fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n  }\n else {\n    fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n  }\n  setGeneratedBy(fieldNameLiteral,source);\n  current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n  setGeneratedBy(current,source);\n  current=new BinaryExpression(current,ex,PLUS);\n  setGeneratedBy(current,source);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 256,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4152,
        "startLineNumber" : 178,
        "startColumnNumber" : 90,
        "endLineNumber" : 283,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String typeName=getTypeName(type);\n  char[] suffix=\")\".toCharArray();\n  String infixS=\", \";\n  char[] infix=infixS.toCharArray();\n  int pS=source.sourceStart, pE=source.sourceEnd;\n  long p=(long)pS << 32 | pE;\n  final int PLUS=OperatorIds.PLUS;\n  char[] prefix;\n  if (callSuper) {\n    prefix=(typeName + \"(super=\").toCharArray();\n  }\n else   if (fields.isEmpty()) {\n    prefix=(typeName + \"()\").toCharArray();\n  }\n else   if (includeFieldNames) {\n    prefix=(typeName + \"(\" + new String(((FieldDeclaration)fields.iterator().next().get()).name)+ \"=\").toCharArray();\n  }\n else {\n    prefix=(typeName + \"(\").toCharArray();\n  }\n  boolean first=true;\n  Expression current=new StringLiteral(prefix,pS,pE,0);\n  setGeneratedBy(current,source);\n  if (callSuper) {\n    MessageSend callToSuper=new MessageSend();\n    callToSuper.sourceStart=pS;\n    callToSuper.sourceEnd=pE;\n    setGeneratedBy(callToSuper,source);\n    callToSuper.receiver=new SuperReference(pS,pE);\n    setGeneratedBy(callToSuper,source);\n    callToSuper.selector=\"toString\".toCharArray();\n    current=new BinaryExpression(current,callToSuper,PLUS);\n    setGeneratedBy(current,source);\n    first=false;\n  }\n  for (  EclipseNode field : fields) {\n    TypeReference fType=getFieldType(field,fieldAccess);\n    Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n    Expression ex;\n    if (fType.dimensions() > 0) {\n      MessageSend arrayToString=new MessageSend();\n      arrayToString.sourceStart=pS;\n      arrayToString.sourceEnd=pE;\n      arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n      arrayToString.arguments=new Expression[]{fieldAccessor};\n      setGeneratedBy(arrayToString.arguments[0],source);\n      if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n        arrayToString.selector=\"deepToString\".toCharArray();\n      }\n else {\n        arrayToString.selector=\"toString\".toCharArray();\n      }\n      ex=arrayToString;\n    }\n else {\n      ex=fieldAccessor;\n    }\n    setGeneratedBy(ex,source);\n    if (first) {\n      current=new BinaryExpression(current,ex,PLUS);\n      current.sourceStart=pS;\n      current.sourceEnd=pE;\n      setGeneratedBy(current,source);\n      first=false;\n      continue;\n    }\n    StringLiteral fieldNameLiteral;\n    if (includeFieldNames) {\n      char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n      fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n    }\n else {\n      fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n    }\n    setGeneratedBy(fieldNameLiteral,source);\n    current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n    setGeneratedBy(current,source);\n    current=new BinaryExpression(current,ex,PLUS);\n    setGeneratedBy(current,source);\n  }\n  if (!first) {\n    StringLiteral suffixLiteral=new StringLiteral(suffix,pS,pE,0);\n    setGeneratedBy(suffixLiteral,source);\n    current=new BinaryExpression(current,suffixLiteral,PLUS);\n    setGeneratedBy(current,source);\n  }\n  ReturnStatement returnStatement=new ReturnStatement(current,pS,pE);\n  setGeneratedBy(returnStatement,source);\n  MethodDeclaration method=new MethodDeclaration(((CompilationUnitDeclaration)type.top().get()).compilationResult);\n  setGeneratedBy(method,source);\n  method.modifiers=toEclipseModifier(AccessLevel.PUBLIC);\n  method.returnType=new QualifiedTypeReference(TypeConstants.JAVA_LANG_STRING,new long[]{p,p,p});\n  setGeneratedBy(method.returnType,source);\n  method.annotations=new Annotation[]{makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)};\n  method.arguments=null;\n  method.selector=\"toString\".toCharArray();\n  method.thrownExceptions=null;\n  method.typeParameters=null;\n  method.bits|=Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\n  method.bodyStart=method.declarationSourceStart=method.sourceStart=source.sourceStart;\n  method.bodyEnd=method.declarationSourceEnd=method.sourceEnd=source.sourceEnd;\n  method.statements=new Statement[]{returnStatement};\n  return method;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 690,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4333,
        "startLineNumber" : 177,
        "startColumnNumber" : 1,
        "endLineNumber" : 283,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private MethodDeclaration createToString(EclipseNode type,Collection<EclipseNode> fields,boolean includeFieldNames,boolean callSuper,ASTNode source,FieldAccess fieldAccess){\n  String typeName=getTypeName(type);\n  char[] suffix=\")\".toCharArray();\n  String infixS=\", \";\n  char[] infix=infixS.toCharArray();\n  int pS=source.sourceStart, pE=source.sourceEnd;\n  long p=(long)pS << 32 | pE;\n  final int PLUS=OperatorIds.PLUS;\n  char[] prefix;\n  if (callSuper) {\n    prefix=(typeName + \"(super=\").toCharArray();\n  }\n else   if (fields.isEmpty()) {\n    prefix=(typeName + \"()\").toCharArray();\n  }\n else   if (includeFieldNames) {\n    prefix=(typeName + \"(\" + new String(((FieldDeclaration)fields.iterator().next().get()).name)+ \"=\").toCharArray();\n  }\n else {\n    prefix=(typeName + \"(\").toCharArray();\n  }\n  boolean first=true;\n  Expression current=new StringLiteral(prefix,pS,pE,0);\n  setGeneratedBy(current,source);\n  if (callSuper) {\n    MessageSend callToSuper=new MessageSend();\n    callToSuper.sourceStart=pS;\n    callToSuper.sourceEnd=pE;\n    setGeneratedBy(callToSuper,source);\n    callToSuper.receiver=new SuperReference(pS,pE);\n    setGeneratedBy(callToSuper,source);\n    callToSuper.selector=\"toString\".toCharArray();\n    current=new BinaryExpression(current,callToSuper,PLUS);\n    setGeneratedBy(current,source);\n    first=false;\n  }\n  for (  EclipseNode field : fields) {\n    TypeReference fType=getFieldType(field,fieldAccess);\n    Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n    Expression ex;\n    if (fType.dimensions() > 0) {\n      MessageSend arrayToString=new MessageSend();\n      arrayToString.sourceStart=pS;\n      arrayToString.sourceEnd=pE;\n      arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n      arrayToString.arguments=new Expression[]{fieldAccessor};\n      setGeneratedBy(arrayToString.arguments[0],source);\n      if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n        arrayToString.selector=\"deepToString\".toCharArray();\n      }\n else {\n        arrayToString.selector=\"toString\".toCharArray();\n      }\n      ex=arrayToString;\n    }\n else {\n      ex=fieldAccessor;\n    }\n    setGeneratedBy(ex,source);\n    if (first) {\n      current=new BinaryExpression(current,ex,PLUS);\n      current.sourceStart=pS;\n      current.sourceEnd=pE;\n      setGeneratedBy(current,source);\n      first=false;\n      continue;\n    }\n    StringLiteral fieldNameLiteral;\n    if (includeFieldNames) {\n      char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n      fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n    }\n else {\n      fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n    }\n    setGeneratedBy(fieldNameLiteral,source);\n    current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n    setGeneratedBy(current,source);\n    current=new BinaryExpression(current,ex,PLUS);\n    setGeneratedBy(current,source);\n  }\n  if (!first) {\n    StringLiteral suffixLiteral=new StringLiteral(suffix,pS,pE,0);\n    setGeneratedBy(suffixLiteral,source);\n    current=new BinaryExpression(current,suffixLiteral,PLUS);\n    setGeneratedBy(current,source);\n  }\n  ReturnStatement returnStatement=new ReturnStatement(current,pS,pE);\n  setGeneratedBy(returnStatement,source);\n  MethodDeclaration method=new MethodDeclaration(((CompilationUnitDeclaration)type.top().get()).compilationResult);\n  setGeneratedBy(method,source);\n  method.modifiers=toEclipseModifier(AccessLevel.PUBLIC);\n  method.returnType=new QualifiedTypeReference(TypeConstants.JAVA_LANG_STRING,new long[]{p,p,p});\n  setGeneratedBy(method.returnType,source);\n  method.annotations=new Annotation[]{makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)};\n  method.arguments=null;\n  method.selector=\"toString\".toCharArray();\n  method.thrownExceptions=null;\n  method.typeParameters=null;\n  method.bits|=Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\n  method.bodyStart=method.declarationSourceStart=method.sourceStart=source.sourceStart;\n  method.bodyEnd=method.declarationSourceEnd=method.sourceEnd=source.sourceEnd;\n  method.statements=new Statement[]{returnStatement};\n  return method;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 720,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 122,
        "startLineNumber" : 223,
        "startColumnNumber" : 4,
        "endLineNumber" : 223,
        "endColumnNumber" : 126
      },
      "nodeContext" : "arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "lombok.eclipse.handlers.ASTNode"
  }, {
    "nodeContext" : "source",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 225,
      "startColumnNumber" : 47,
      "endLineNumber" : 225,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 225,
        "startColumnNumber" : 4,
        "endLineNumber" : 225,
        "endColumnNumber" : 54
      },
      "nodeContext" : "setGeneratedBy(arrayToString.arguments[0],source)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 225,
        "startColumnNumber" : 4,
        "endLineNumber" : 225,
        "endColumnNumber" : 55
      },
      "nodeContext" : "setGeneratedBy(arrayToString.arguments[0],source);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 627,
        "startLineNumber" : 220,
        "startColumnNumber" : 31,
        "endLineNumber" : 232,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  MessageSend arrayToString=new MessageSend();\n  arrayToString.sourceStart=pS;\n  arrayToString.sourceEnd=pE;\n  arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n  arrayToString.arguments=new Expression[]{fieldAccessor};\n  setGeneratedBy(arrayToString.arguments[0],source);\n  if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n    arrayToString.selector=\"deepToString\".toCharArray();\n  }\n else {\n    arrayToString.selector=\"toString\".toCharArray();\n  }\n  ex=arrayToString;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 98,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 691,
        "startLineNumber" : 220,
        "startColumnNumber" : 3,
        "endLineNumber" : 234,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (fType.dimensions() > 0) {\n  MessageSend arrayToString=new MessageSend();\n  arrayToString.sourceStart=pS;\n  arrayToString.sourceEnd=pE;\n  arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n  arrayToString.arguments=new Expression[]{fieldAccessor};\n  setGeneratedBy(arrayToString.arguments[0],source);\n  if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n    arrayToString.selector=\"deepToString\".toCharArray();\n  }\n else {\n    arrayToString.selector=\"toString\".toCharArray();\n  }\n  ex=arrayToString;\n}\n else {\n  ex=fieldAccessor;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 109,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1631,
        "startLineNumber" : 215,
        "startColumnNumber" : 35,
        "endLineNumber" : 257,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  TypeReference fType=getFieldType(field,fieldAccess);\n  Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n  Expression ex;\n  if (fType.dimensions() > 0) {\n    MessageSend arrayToString=new MessageSend();\n    arrayToString.sourceStart=pS;\n    arrayToString.sourceEnd=pE;\n    arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n    arrayToString.arguments=new Expression[]{fieldAccessor};\n    setGeneratedBy(arrayToString.arguments[0],source);\n    if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n      arrayToString.selector=\"deepToString\".toCharArray();\n    }\n else {\n      arrayToString.selector=\"toString\".toCharArray();\n    }\n    ex=arrayToString;\n  }\n else {\n    ex=fieldAccessor;\n  }\n  setGeneratedBy(ex,source);\n  if (first) {\n    current=new BinaryExpression(current,ex,PLUS);\n    current.sourceStart=pS;\n    current.sourceEnd=pE;\n    setGeneratedBy(current,source);\n    first=false;\n    continue;\n  }\n  StringLiteral fieldNameLiteral;\n  if (includeFieldNames) {\n    char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n    fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n  }\n else {\n    fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n  }\n  setGeneratedBy(fieldNameLiteral,source);\n  current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n  setGeneratedBy(current,source);\n  current=new BinaryExpression(current,ex,PLUS);\n  setGeneratedBy(current,source);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 250,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1664,
        "startLineNumber" : 215,
        "startColumnNumber" : 2,
        "endLineNumber" : 257,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (EclipseNode field : fields) {\n  TypeReference fType=getFieldType(field,fieldAccess);\n  Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n  Expression ex;\n  if (fType.dimensions() > 0) {\n    MessageSend arrayToString=new MessageSend();\n    arrayToString.sourceStart=pS;\n    arrayToString.sourceEnd=pE;\n    arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n    arrayToString.arguments=new Expression[]{fieldAccessor};\n    setGeneratedBy(arrayToString.arguments[0],source);\n    if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n      arrayToString.selector=\"deepToString\".toCharArray();\n    }\n else {\n      arrayToString.selector=\"toString\".toCharArray();\n    }\n    ex=arrayToString;\n  }\n else {\n    ex=fieldAccessor;\n  }\n  setGeneratedBy(ex,source);\n  if (first) {\n    current=new BinaryExpression(current,ex,PLUS);\n    current.sourceStart=pS;\n    current.sourceEnd=pE;\n    setGeneratedBy(current,source);\n    first=false;\n    continue;\n  }\n  StringLiteral fieldNameLiteral;\n  if (includeFieldNames) {\n    char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n    fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n  }\n else {\n    fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n  }\n  setGeneratedBy(fieldNameLiteral,source);\n  current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n  setGeneratedBy(current,source);\n  current=new BinaryExpression(current,ex,PLUS);\n  setGeneratedBy(current,source);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 256,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4152,
        "startLineNumber" : 178,
        "startColumnNumber" : 90,
        "endLineNumber" : 283,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String typeName=getTypeName(type);\n  char[] suffix=\")\".toCharArray();\n  String infixS=\", \";\n  char[] infix=infixS.toCharArray();\n  int pS=source.sourceStart, pE=source.sourceEnd;\n  long p=(long)pS << 32 | pE;\n  final int PLUS=OperatorIds.PLUS;\n  char[] prefix;\n  if (callSuper) {\n    prefix=(typeName + \"(super=\").toCharArray();\n  }\n else   if (fields.isEmpty()) {\n    prefix=(typeName + \"()\").toCharArray();\n  }\n else   if (includeFieldNames) {\n    prefix=(typeName + \"(\" + new String(((FieldDeclaration)fields.iterator().next().get()).name)+ \"=\").toCharArray();\n  }\n else {\n    prefix=(typeName + \"(\").toCharArray();\n  }\n  boolean first=true;\n  Expression current=new StringLiteral(prefix,pS,pE,0);\n  setGeneratedBy(current,source);\n  if (callSuper) {\n    MessageSend callToSuper=new MessageSend();\n    callToSuper.sourceStart=pS;\n    callToSuper.sourceEnd=pE;\n    setGeneratedBy(callToSuper,source);\n    callToSuper.receiver=new SuperReference(pS,pE);\n    setGeneratedBy(callToSuper,source);\n    callToSuper.selector=\"toString\".toCharArray();\n    current=new BinaryExpression(current,callToSuper,PLUS);\n    setGeneratedBy(current,source);\n    first=false;\n  }\n  for (  EclipseNode field : fields) {\n    TypeReference fType=getFieldType(field,fieldAccess);\n    Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n    Expression ex;\n    if (fType.dimensions() > 0) {\n      MessageSend arrayToString=new MessageSend();\n      arrayToString.sourceStart=pS;\n      arrayToString.sourceEnd=pE;\n      arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n      arrayToString.arguments=new Expression[]{fieldAccessor};\n      setGeneratedBy(arrayToString.arguments[0],source);\n      if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n        arrayToString.selector=\"deepToString\".toCharArray();\n      }\n else {\n        arrayToString.selector=\"toString\".toCharArray();\n      }\n      ex=arrayToString;\n    }\n else {\n      ex=fieldAccessor;\n    }\n    setGeneratedBy(ex,source);\n    if (first) {\n      current=new BinaryExpression(current,ex,PLUS);\n      current.sourceStart=pS;\n      current.sourceEnd=pE;\n      setGeneratedBy(current,source);\n      first=false;\n      continue;\n    }\n    StringLiteral fieldNameLiteral;\n    if (includeFieldNames) {\n      char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n      fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n    }\n else {\n      fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n    }\n    setGeneratedBy(fieldNameLiteral,source);\n    current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n    setGeneratedBy(current,source);\n    current=new BinaryExpression(current,ex,PLUS);\n    setGeneratedBy(current,source);\n  }\n  if (!first) {\n    StringLiteral suffixLiteral=new StringLiteral(suffix,pS,pE,0);\n    setGeneratedBy(suffixLiteral,source);\n    current=new BinaryExpression(current,suffixLiteral,PLUS);\n    setGeneratedBy(current,source);\n  }\n  ReturnStatement returnStatement=new ReturnStatement(current,pS,pE);\n  setGeneratedBy(returnStatement,source);\n  MethodDeclaration method=new MethodDeclaration(((CompilationUnitDeclaration)type.top().get()).compilationResult);\n  setGeneratedBy(method,source);\n  method.modifiers=toEclipseModifier(AccessLevel.PUBLIC);\n  method.returnType=new QualifiedTypeReference(TypeConstants.JAVA_LANG_STRING,new long[]{p,p,p});\n  setGeneratedBy(method.returnType,source);\n  method.annotations=new Annotation[]{makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)};\n  method.arguments=null;\n  method.selector=\"toString\".toCharArray();\n  method.thrownExceptions=null;\n  method.typeParameters=null;\n  method.bits|=Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\n  method.bodyStart=method.declarationSourceStart=method.sourceStart=source.sourceStart;\n  method.bodyEnd=method.declarationSourceEnd=method.sourceEnd=source.sourceEnd;\n  method.statements=new Statement[]{returnStatement};\n  return method;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 690,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4333,
        "startLineNumber" : 177,
        "startColumnNumber" : 1,
        "endLineNumber" : 283,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private MethodDeclaration createToString(EclipseNode type,Collection<EclipseNode> fields,boolean includeFieldNames,boolean callSuper,ASTNode source,FieldAccess fieldAccess){\n  String typeName=getTypeName(type);\n  char[] suffix=\")\".toCharArray();\n  String infixS=\", \";\n  char[] infix=infixS.toCharArray();\n  int pS=source.sourceStart, pE=source.sourceEnd;\n  long p=(long)pS << 32 | pE;\n  final int PLUS=OperatorIds.PLUS;\n  char[] prefix;\n  if (callSuper) {\n    prefix=(typeName + \"(super=\").toCharArray();\n  }\n else   if (fields.isEmpty()) {\n    prefix=(typeName + \"()\").toCharArray();\n  }\n else   if (includeFieldNames) {\n    prefix=(typeName + \"(\" + new String(((FieldDeclaration)fields.iterator().next().get()).name)+ \"=\").toCharArray();\n  }\n else {\n    prefix=(typeName + \"(\").toCharArray();\n  }\n  boolean first=true;\n  Expression current=new StringLiteral(prefix,pS,pE,0);\n  setGeneratedBy(current,source);\n  if (callSuper) {\n    MessageSend callToSuper=new MessageSend();\n    callToSuper.sourceStart=pS;\n    callToSuper.sourceEnd=pE;\n    setGeneratedBy(callToSuper,source);\n    callToSuper.receiver=new SuperReference(pS,pE);\n    setGeneratedBy(callToSuper,source);\n    callToSuper.selector=\"toString\".toCharArray();\n    current=new BinaryExpression(current,callToSuper,PLUS);\n    setGeneratedBy(current,source);\n    first=false;\n  }\n  for (  EclipseNode field : fields) {\n    TypeReference fType=getFieldType(field,fieldAccess);\n    Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n    Expression ex;\n    if (fType.dimensions() > 0) {\n      MessageSend arrayToString=new MessageSend();\n      arrayToString.sourceStart=pS;\n      arrayToString.sourceEnd=pE;\n      arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n      arrayToString.arguments=new Expression[]{fieldAccessor};\n      setGeneratedBy(arrayToString.arguments[0],source);\n      if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n        arrayToString.selector=\"deepToString\".toCharArray();\n      }\n else {\n        arrayToString.selector=\"toString\".toCharArray();\n      }\n      ex=arrayToString;\n    }\n else {\n      ex=fieldAccessor;\n    }\n    setGeneratedBy(ex,source);\n    if (first) {\n      current=new BinaryExpression(current,ex,PLUS);\n      current.sourceStart=pS;\n      current.sourceEnd=pE;\n      setGeneratedBy(current,source);\n      first=false;\n      continue;\n    }\n    StringLiteral fieldNameLiteral;\n    if (includeFieldNames) {\n      char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n      fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n    }\n else {\n      fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n    }\n    setGeneratedBy(fieldNameLiteral,source);\n    current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n    setGeneratedBy(current,source);\n    current=new BinaryExpression(current,ex,PLUS);\n    setGeneratedBy(current,source);\n  }\n  if (!first) {\n    StringLiteral suffixLiteral=new StringLiteral(suffix,pS,pE,0);\n    setGeneratedBy(suffixLiteral,source);\n    current=new BinaryExpression(current,suffixLiteral,PLUS);\n    setGeneratedBy(current,source);\n  }\n  ReturnStatement returnStatement=new ReturnStatement(current,pS,pE);\n  setGeneratedBy(returnStatement,source);\n  MethodDeclaration method=new MethodDeclaration(((CompilationUnitDeclaration)type.top().get()).compilationResult);\n  setGeneratedBy(method,source);\n  method.modifiers=toEclipseModifier(AccessLevel.PUBLIC);\n  method.returnType=new QualifiedTypeReference(TypeConstants.JAVA_LANG_STRING,new long[]{p,p,p});\n  setGeneratedBy(method.returnType,source);\n  method.annotations=new Annotation[]{makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)};\n  method.arguments=null;\n  method.selector=\"toString\".toCharArray();\n  method.thrownExceptions=null;\n  method.typeParameters=null;\n  method.bits|=Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\n  method.bodyStart=method.declarationSourceStart=method.sourceStart=source.sourceStart;\n  method.bodyEnd=method.declarationSourceEnd=method.sourceEnd=source.sourceEnd;\n  method.statements=new Statement[]{returnStatement};\n  return method;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 720,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 225,
        "startColumnNumber" : 4,
        "endLineNumber" : 225,
        "endColumnNumber" : 55
      },
      "nodeContext" : "setGeneratedBy(arrayToString.arguments[0],source);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "lombok.eclipse.handlers.ASTNode"
  }, {
    "nodeContext" : "source",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 235,
      "startColumnNumber" : 22,
      "endLineNumber" : 235,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 235,
        "startColumnNumber" : 3,
        "endLineNumber" : 235,
        "endColumnNumber" : 29
      },
      "nodeContext" : "setGeneratedBy(ex,source)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 235,
        "startColumnNumber" : 3,
        "endLineNumber" : 235,
        "endColumnNumber" : 30
      },
      "nodeContext" : "setGeneratedBy(ex,source);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1631,
        "startLineNumber" : 215,
        "startColumnNumber" : 35,
        "endLineNumber" : 257,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  TypeReference fType=getFieldType(field,fieldAccess);\n  Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n  Expression ex;\n  if (fType.dimensions() > 0) {\n    MessageSend arrayToString=new MessageSend();\n    arrayToString.sourceStart=pS;\n    arrayToString.sourceEnd=pE;\n    arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n    arrayToString.arguments=new Expression[]{fieldAccessor};\n    setGeneratedBy(arrayToString.arguments[0],source);\n    if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n      arrayToString.selector=\"deepToString\".toCharArray();\n    }\n else {\n      arrayToString.selector=\"toString\".toCharArray();\n    }\n    ex=arrayToString;\n  }\n else {\n    ex=fieldAccessor;\n  }\n  setGeneratedBy(ex,source);\n  if (first) {\n    current=new BinaryExpression(current,ex,PLUS);\n    current.sourceStart=pS;\n    current.sourceEnd=pE;\n    setGeneratedBy(current,source);\n    first=false;\n    continue;\n  }\n  StringLiteral fieldNameLiteral;\n  if (includeFieldNames) {\n    char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n    fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n  }\n else {\n    fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n  }\n  setGeneratedBy(fieldNameLiteral,source);\n  current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n  setGeneratedBy(current,source);\n  current=new BinaryExpression(current,ex,PLUS);\n  setGeneratedBy(current,source);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 250,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1664,
        "startLineNumber" : 215,
        "startColumnNumber" : 2,
        "endLineNumber" : 257,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (EclipseNode field : fields) {\n  TypeReference fType=getFieldType(field,fieldAccess);\n  Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n  Expression ex;\n  if (fType.dimensions() > 0) {\n    MessageSend arrayToString=new MessageSend();\n    arrayToString.sourceStart=pS;\n    arrayToString.sourceEnd=pE;\n    arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n    arrayToString.arguments=new Expression[]{fieldAccessor};\n    setGeneratedBy(arrayToString.arguments[0],source);\n    if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n      arrayToString.selector=\"deepToString\".toCharArray();\n    }\n else {\n      arrayToString.selector=\"toString\".toCharArray();\n    }\n    ex=arrayToString;\n  }\n else {\n    ex=fieldAccessor;\n  }\n  setGeneratedBy(ex,source);\n  if (first) {\n    current=new BinaryExpression(current,ex,PLUS);\n    current.sourceStart=pS;\n    current.sourceEnd=pE;\n    setGeneratedBy(current,source);\n    first=false;\n    continue;\n  }\n  StringLiteral fieldNameLiteral;\n  if (includeFieldNames) {\n    char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n    fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n  }\n else {\n    fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n  }\n  setGeneratedBy(fieldNameLiteral,source);\n  current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n  setGeneratedBy(current,source);\n  current=new BinaryExpression(current,ex,PLUS);\n  setGeneratedBy(current,source);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 256,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4152,
        "startLineNumber" : 178,
        "startColumnNumber" : 90,
        "endLineNumber" : 283,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String typeName=getTypeName(type);\n  char[] suffix=\")\".toCharArray();\n  String infixS=\", \";\n  char[] infix=infixS.toCharArray();\n  int pS=source.sourceStart, pE=source.sourceEnd;\n  long p=(long)pS << 32 | pE;\n  final int PLUS=OperatorIds.PLUS;\n  char[] prefix;\n  if (callSuper) {\n    prefix=(typeName + \"(super=\").toCharArray();\n  }\n else   if (fields.isEmpty()) {\n    prefix=(typeName + \"()\").toCharArray();\n  }\n else   if (includeFieldNames) {\n    prefix=(typeName + \"(\" + new String(((FieldDeclaration)fields.iterator().next().get()).name)+ \"=\").toCharArray();\n  }\n else {\n    prefix=(typeName + \"(\").toCharArray();\n  }\n  boolean first=true;\n  Expression current=new StringLiteral(prefix,pS,pE,0);\n  setGeneratedBy(current,source);\n  if (callSuper) {\n    MessageSend callToSuper=new MessageSend();\n    callToSuper.sourceStart=pS;\n    callToSuper.sourceEnd=pE;\n    setGeneratedBy(callToSuper,source);\n    callToSuper.receiver=new SuperReference(pS,pE);\n    setGeneratedBy(callToSuper,source);\n    callToSuper.selector=\"toString\".toCharArray();\n    current=new BinaryExpression(current,callToSuper,PLUS);\n    setGeneratedBy(current,source);\n    first=false;\n  }\n  for (  EclipseNode field : fields) {\n    TypeReference fType=getFieldType(field,fieldAccess);\n    Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n    Expression ex;\n    if (fType.dimensions() > 0) {\n      MessageSend arrayToString=new MessageSend();\n      arrayToString.sourceStart=pS;\n      arrayToString.sourceEnd=pE;\n      arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n      arrayToString.arguments=new Expression[]{fieldAccessor};\n      setGeneratedBy(arrayToString.arguments[0],source);\n      if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n        arrayToString.selector=\"deepToString\".toCharArray();\n      }\n else {\n        arrayToString.selector=\"toString\".toCharArray();\n      }\n      ex=arrayToString;\n    }\n else {\n      ex=fieldAccessor;\n    }\n    setGeneratedBy(ex,source);\n    if (first) {\n      current=new BinaryExpression(current,ex,PLUS);\n      current.sourceStart=pS;\n      current.sourceEnd=pE;\n      setGeneratedBy(current,source);\n      first=false;\n      continue;\n    }\n    StringLiteral fieldNameLiteral;\n    if (includeFieldNames) {\n      char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n      fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n    }\n else {\n      fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n    }\n    setGeneratedBy(fieldNameLiteral,source);\n    current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n    setGeneratedBy(current,source);\n    current=new BinaryExpression(current,ex,PLUS);\n    setGeneratedBy(current,source);\n  }\n  if (!first) {\n    StringLiteral suffixLiteral=new StringLiteral(suffix,pS,pE,0);\n    setGeneratedBy(suffixLiteral,source);\n    current=new BinaryExpression(current,suffixLiteral,PLUS);\n    setGeneratedBy(current,source);\n  }\n  ReturnStatement returnStatement=new ReturnStatement(current,pS,pE);\n  setGeneratedBy(returnStatement,source);\n  MethodDeclaration method=new MethodDeclaration(((CompilationUnitDeclaration)type.top().get()).compilationResult);\n  setGeneratedBy(method,source);\n  method.modifiers=toEclipseModifier(AccessLevel.PUBLIC);\n  method.returnType=new QualifiedTypeReference(TypeConstants.JAVA_LANG_STRING,new long[]{p,p,p});\n  setGeneratedBy(method.returnType,source);\n  method.annotations=new Annotation[]{makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)};\n  method.arguments=null;\n  method.selector=\"toString\".toCharArray();\n  method.thrownExceptions=null;\n  method.typeParameters=null;\n  method.bits|=Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\n  method.bodyStart=method.declarationSourceStart=method.sourceStart=source.sourceStart;\n  method.bodyEnd=method.declarationSourceEnd=method.sourceEnd=source.sourceEnd;\n  method.statements=new Statement[]{returnStatement};\n  return method;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 690,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4333,
        "startLineNumber" : 177,
        "startColumnNumber" : 1,
        "endLineNumber" : 283,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private MethodDeclaration createToString(EclipseNode type,Collection<EclipseNode> fields,boolean includeFieldNames,boolean callSuper,ASTNode source,FieldAccess fieldAccess){\n  String typeName=getTypeName(type);\n  char[] suffix=\")\".toCharArray();\n  String infixS=\", \";\n  char[] infix=infixS.toCharArray();\n  int pS=source.sourceStart, pE=source.sourceEnd;\n  long p=(long)pS << 32 | pE;\n  final int PLUS=OperatorIds.PLUS;\n  char[] prefix;\n  if (callSuper) {\n    prefix=(typeName + \"(super=\").toCharArray();\n  }\n else   if (fields.isEmpty()) {\n    prefix=(typeName + \"()\").toCharArray();\n  }\n else   if (includeFieldNames) {\n    prefix=(typeName + \"(\" + new String(((FieldDeclaration)fields.iterator().next().get()).name)+ \"=\").toCharArray();\n  }\n else {\n    prefix=(typeName + \"(\").toCharArray();\n  }\n  boolean first=true;\n  Expression current=new StringLiteral(prefix,pS,pE,0);\n  setGeneratedBy(current,source);\n  if (callSuper) {\n    MessageSend callToSuper=new MessageSend();\n    callToSuper.sourceStart=pS;\n    callToSuper.sourceEnd=pE;\n    setGeneratedBy(callToSuper,source);\n    callToSuper.receiver=new SuperReference(pS,pE);\n    setGeneratedBy(callToSuper,source);\n    callToSuper.selector=\"toString\".toCharArray();\n    current=new BinaryExpression(current,callToSuper,PLUS);\n    setGeneratedBy(current,source);\n    first=false;\n  }\n  for (  EclipseNode field : fields) {\n    TypeReference fType=getFieldType(field,fieldAccess);\n    Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n    Expression ex;\n    if (fType.dimensions() > 0) {\n      MessageSend arrayToString=new MessageSend();\n      arrayToString.sourceStart=pS;\n      arrayToString.sourceEnd=pE;\n      arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n      arrayToString.arguments=new Expression[]{fieldAccessor};\n      setGeneratedBy(arrayToString.arguments[0],source);\n      if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n        arrayToString.selector=\"deepToString\".toCharArray();\n      }\n else {\n        arrayToString.selector=\"toString\".toCharArray();\n      }\n      ex=arrayToString;\n    }\n else {\n      ex=fieldAccessor;\n    }\n    setGeneratedBy(ex,source);\n    if (first) {\n      current=new BinaryExpression(current,ex,PLUS);\n      current.sourceStart=pS;\n      current.sourceEnd=pE;\n      setGeneratedBy(current,source);\n      first=false;\n      continue;\n    }\n    StringLiteral fieldNameLiteral;\n    if (includeFieldNames) {\n      char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n      fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n    }\n else {\n      fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n    }\n    setGeneratedBy(fieldNameLiteral,source);\n    current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n    setGeneratedBy(current,source);\n    current=new BinaryExpression(current,ex,PLUS);\n    setGeneratedBy(current,source);\n  }\n  if (!first) {\n    StringLiteral suffixLiteral=new StringLiteral(suffix,pS,pE,0);\n    setGeneratedBy(suffixLiteral,source);\n    current=new BinaryExpression(current,suffixLiteral,PLUS);\n    setGeneratedBy(current,source);\n  }\n  ReturnStatement returnStatement=new ReturnStatement(current,pS,pE);\n  setGeneratedBy(returnStatement,source);\n  MethodDeclaration method=new MethodDeclaration(((CompilationUnitDeclaration)type.top().get()).compilationResult);\n  setGeneratedBy(method,source);\n  method.modifiers=toEclipseModifier(AccessLevel.PUBLIC);\n  method.returnType=new QualifiedTypeReference(TypeConstants.JAVA_LANG_STRING,new long[]{p,p,p});\n  setGeneratedBy(method.returnType,source);\n  method.annotations=new Annotation[]{makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)};\n  method.arguments=null;\n  method.selector=\"toString\".toCharArray();\n  method.thrownExceptions=null;\n  method.typeParameters=null;\n  method.bits|=Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\n  method.bodyStart=method.declarationSourceStart=method.sourceStart=source.sourceStart;\n  method.bodyEnd=method.declarationSourceEnd=method.sourceEnd=source.sourceEnd;\n  method.statements=new Statement[]{returnStatement};\n  return method;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 720,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 235,
        "startColumnNumber" : 3,
        "endLineNumber" : 235,
        "endColumnNumber" : 30
      },
      "nodeContext" : "setGeneratedBy(ex,source);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "lombok.eclipse.handlers.ASTNode"
  }, {
    "nodeContext" : "source",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 240,
      "startColumnNumber" : 28,
      "endLineNumber" : 240,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 240,
        "startColumnNumber" : 4,
        "endLineNumber" : 240,
        "endColumnNumber" : 35
      },
      "nodeContext" : "setGeneratedBy(current,source)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 240,
        "startColumnNumber" : 4,
        "endLineNumber" : 240,
        "endColumnNumber" : 36
      },
      "nodeContext" : "setGeneratedBy(current,source);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 185,
        "startLineNumber" : 237,
        "startColumnNumber" : 14,
        "endLineNumber" : 243,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  current=new BinaryExpression(current,ex,PLUS);\n  current.sourceStart=pS;\n  current.sourceEnd=pE;\n  setGeneratedBy(current,source);\n  first=false;\n  continue;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 32,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 196,
        "startLineNumber" : 237,
        "startColumnNumber" : 3,
        "endLineNumber" : 243,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (first) {\n  current=new BinaryExpression(current,ex,PLUS);\n  current.sourceStart=pS;\n  current.sourceEnd=pE;\n  setGeneratedBy(current,source);\n  first=false;\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 34,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1631,
        "startLineNumber" : 215,
        "startColumnNumber" : 35,
        "endLineNumber" : 257,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  TypeReference fType=getFieldType(field,fieldAccess);\n  Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n  Expression ex;\n  if (fType.dimensions() > 0) {\n    MessageSend arrayToString=new MessageSend();\n    arrayToString.sourceStart=pS;\n    arrayToString.sourceEnd=pE;\n    arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n    arrayToString.arguments=new Expression[]{fieldAccessor};\n    setGeneratedBy(arrayToString.arguments[0],source);\n    if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n      arrayToString.selector=\"deepToString\".toCharArray();\n    }\n else {\n      arrayToString.selector=\"toString\".toCharArray();\n    }\n    ex=arrayToString;\n  }\n else {\n    ex=fieldAccessor;\n  }\n  setGeneratedBy(ex,source);\n  if (first) {\n    current=new BinaryExpression(current,ex,PLUS);\n    current.sourceStart=pS;\n    current.sourceEnd=pE;\n    setGeneratedBy(current,source);\n    first=false;\n    continue;\n  }\n  StringLiteral fieldNameLiteral;\n  if (includeFieldNames) {\n    char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n    fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n  }\n else {\n    fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n  }\n  setGeneratedBy(fieldNameLiteral,source);\n  current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n  setGeneratedBy(current,source);\n  current=new BinaryExpression(current,ex,PLUS);\n  setGeneratedBy(current,source);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 250,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1664,
        "startLineNumber" : 215,
        "startColumnNumber" : 2,
        "endLineNumber" : 257,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (EclipseNode field : fields) {\n  TypeReference fType=getFieldType(field,fieldAccess);\n  Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n  Expression ex;\n  if (fType.dimensions() > 0) {\n    MessageSend arrayToString=new MessageSend();\n    arrayToString.sourceStart=pS;\n    arrayToString.sourceEnd=pE;\n    arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n    arrayToString.arguments=new Expression[]{fieldAccessor};\n    setGeneratedBy(arrayToString.arguments[0],source);\n    if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n      arrayToString.selector=\"deepToString\".toCharArray();\n    }\n else {\n      arrayToString.selector=\"toString\".toCharArray();\n    }\n    ex=arrayToString;\n  }\n else {\n    ex=fieldAccessor;\n  }\n  setGeneratedBy(ex,source);\n  if (first) {\n    current=new BinaryExpression(current,ex,PLUS);\n    current.sourceStart=pS;\n    current.sourceEnd=pE;\n    setGeneratedBy(current,source);\n    first=false;\n    continue;\n  }\n  StringLiteral fieldNameLiteral;\n  if (includeFieldNames) {\n    char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n    fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n  }\n else {\n    fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n  }\n  setGeneratedBy(fieldNameLiteral,source);\n  current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n  setGeneratedBy(current,source);\n  current=new BinaryExpression(current,ex,PLUS);\n  setGeneratedBy(current,source);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 256,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4152,
        "startLineNumber" : 178,
        "startColumnNumber" : 90,
        "endLineNumber" : 283,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String typeName=getTypeName(type);\n  char[] suffix=\")\".toCharArray();\n  String infixS=\", \";\n  char[] infix=infixS.toCharArray();\n  int pS=source.sourceStart, pE=source.sourceEnd;\n  long p=(long)pS << 32 | pE;\n  final int PLUS=OperatorIds.PLUS;\n  char[] prefix;\n  if (callSuper) {\n    prefix=(typeName + \"(super=\").toCharArray();\n  }\n else   if (fields.isEmpty()) {\n    prefix=(typeName + \"()\").toCharArray();\n  }\n else   if (includeFieldNames) {\n    prefix=(typeName + \"(\" + new String(((FieldDeclaration)fields.iterator().next().get()).name)+ \"=\").toCharArray();\n  }\n else {\n    prefix=(typeName + \"(\").toCharArray();\n  }\n  boolean first=true;\n  Expression current=new StringLiteral(prefix,pS,pE,0);\n  setGeneratedBy(current,source);\n  if (callSuper) {\n    MessageSend callToSuper=new MessageSend();\n    callToSuper.sourceStart=pS;\n    callToSuper.sourceEnd=pE;\n    setGeneratedBy(callToSuper,source);\n    callToSuper.receiver=new SuperReference(pS,pE);\n    setGeneratedBy(callToSuper,source);\n    callToSuper.selector=\"toString\".toCharArray();\n    current=new BinaryExpression(current,callToSuper,PLUS);\n    setGeneratedBy(current,source);\n    first=false;\n  }\n  for (  EclipseNode field : fields) {\n    TypeReference fType=getFieldType(field,fieldAccess);\n    Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n    Expression ex;\n    if (fType.dimensions() > 0) {\n      MessageSend arrayToString=new MessageSend();\n      arrayToString.sourceStart=pS;\n      arrayToString.sourceEnd=pE;\n      arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n      arrayToString.arguments=new Expression[]{fieldAccessor};\n      setGeneratedBy(arrayToString.arguments[0],source);\n      if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n        arrayToString.selector=\"deepToString\".toCharArray();\n      }\n else {\n        arrayToString.selector=\"toString\".toCharArray();\n      }\n      ex=arrayToString;\n    }\n else {\n      ex=fieldAccessor;\n    }\n    setGeneratedBy(ex,source);\n    if (first) {\n      current=new BinaryExpression(current,ex,PLUS);\n      current.sourceStart=pS;\n      current.sourceEnd=pE;\n      setGeneratedBy(current,source);\n      first=false;\n      continue;\n    }\n    StringLiteral fieldNameLiteral;\n    if (includeFieldNames) {\n      char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n      fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n    }\n else {\n      fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n    }\n    setGeneratedBy(fieldNameLiteral,source);\n    current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n    setGeneratedBy(current,source);\n    current=new BinaryExpression(current,ex,PLUS);\n    setGeneratedBy(current,source);\n  }\n  if (!first) {\n    StringLiteral suffixLiteral=new StringLiteral(suffix,pS,pE,0);\n    setGeneratedBy(suffixLiteral,source);\n    current=new BinaryExpression(current,suffixLiteral,PLUS);\n    setGeneratedBy(current,source);\n  }\n  ReturnStatement returnStatement=new ReturnStatement(current,pS,pE);\n  setGeneratedBy(returnStatement,source);\n  MethodDeclaration method=new MethodDeclaration(((CompilationUnitDeclaration)type.top().get()).compilationResult);\n  setGeneratedBy(method,source);\n  method.modifiers=toEclipseModifier(AccessLevel.PUBLIC);\n  method.returnType=new QualifiedTypeReference(TypeConstants.JAVA_LANG_STRING,new long[]{p,p,p});\n  setGeneratedBy(method.returnType,source);\n  method.annotations=new Annotation[]{makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)};\n  method.arguments=null;\n  method.selector=\"toString\".toCharArray();\n  method.thrownExceptions=null;\n  method.typeParameters=null;\n  method.bits|=Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\n  method.bodyStart=method.declarationSourceStart=method.sourceStart=source.sourceStart;\n  method.bodyEnd=method.declarationSourceEnd=method.sourceEnd=source.sourceEnd;\n  method.statements=new Statement[]{returnStatement};\n  return method;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 690,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4333,
        "startLineNumber" : 177,
        "startColumnNumber" : 1,
        "endLineNumber" : 283,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private MethodDeclaration createToString(EclipseNode type,Collection<EclipseNode> fields,boolean includeFieldNames,boolean callSuper,ASTNode source,FieldAccess fieldAccess){\n  String typeName=getTypeName(type);\n  char[] suffix=\")\".toCharArray();\n  String infixS=\", \";\n  char[] infix=infixS.toCharArray();\n  int pS=source.sourceStart, pE=source.sourceEnd;\n  long p=(long)pS << 32 | pE;\n  final int PLUS=OperatorIds.PLUS;\n  char[] prefix;\n  if (callSuper) {\n    prefix=(typeName + \"(super=\").toCharArray();\n  }\n else   if (fields.isEmpty()) {\n    prefix=(typeName + \"()\").toCharArray();\n  }\n else   if (includeFieldNames) {\n    prefix=(typeName + \"(\" + new String(((FieldDeclaration)fields.iterator().next().get()).name)+ \"=\").toCharArray();\n  }\n else {\n    prefix=(typeName + \"(\").toCharArray();\n  }\n  boolean first=true;\n  Expression current=new StringLiteral(prefix,pS,pE,0);\n  setGeneratedBy(current,source);\n  if (callSuper) {\n    MessageSend callToSuper=new MessageSend();\n    callToSuper.sourceStart=pS;\n    callToSuper.sourceEnd=pE;\n    setGeneratedBy(callToSuper,source);\n    callToSuper.receiver=new SuperReference(pS,pE);\n    setGeneratedBy(callToSuper,source);\n    callToSuper.selector=\"toString\".toCharArray();\n    current=new BinaryExpression(current,callToSuper,PLUS);\n    setGeneratedBy(current,source);\n    first=false;\n  }\n  for (  EclipseNode field : fields) {\n    TypeReference fType=getFieldType(field,fieldAccess);\n    Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n    Expression ex;\n    if (fType.dimensions() > 0) {\n      MessageSend arrayToString=new MessageSend();\n      arrayToString.sourceStart=pS;\n      arrayToString.sourceEnd=pE;\n      arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n      arrayToString.arguments=new Expression[]{fieldAccessor};\n      setGeneratedBy(arrayToString.arguments[0],source);\n      if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n        arrayToString.selector=\"deepToString\".toCharArray();\n      }\n else {\n        arrayToString.selector=\"toString\".toCharArray();\n      }\n      ex=arrayToString;\n    }\n else {\n      ex=fieldAccessor;\n    }\n    setGeneratedBy(ex,source);\n    if (first) {\n      current=new BinaryExpression(current,ex,PLUS);\n      current.sourceStart=pS;\n      current.sourceEnd=pE;\n      setGeneratedBy(current,source);\n      first=false;\n      continue;\n    }\n    StringLiteral fieldNameLiteral;\n    if (includeFieldNames) {\n      char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n      fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n    }\n else {\n      fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n    }\n    setGeneratedBy(fieldNameLiteral,source);\n    current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n    setGeneratedBy(current,source);\n    current=new BinaryExpression(current,ex,PLUS);\n    setGeneratedBy(current,source);\n  }\n  if (!first) {\n    StringLiteral suffixLiteral=new StringLiteral(suffix,pS,pE,0);\n    setGeneratedBy(suffixLiteral,source);\n    current=new BinaryExpression(current,suffixLiteral,PLUS);\n    setGeneratedBy(current,source);\n  }\n  ReturnStatement returnStatement=new ReturnStatement(current,pS,pE);\n  setGeneratedBy(returnStatement,source);\n  MethodDeclaration method=new MethodDeclaration(((CompilationUnitDeclaration)type.top().get()).compilationResult);\n  setGeneratedBy(method,source);\n  method.modifiers=toEclipseModifier(AccessLevel.PUBLIC);\n  method.returnType=new QualifiedTypeReference(TypeConstants.JAVA_LANG_STRING,new long[]{p,p,p});\n  setGeneratedBy(method.returnType,source);\n  method.annotations=new Annotation[]{makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)};\n  method.arguments=null;\n  method.selector=\"toString\".toCharArray();\n  method.thrownExceptions=null;\n  method.typeParameters=null;\n  method.bits|=Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\n  method.bodyStart=method.declarationSourceStart=method.sourceStart=source.sourceStart;\n  method.bodyEnd=method.declarationSourceEnd=method.sourceEnd=source.sourceEnd;\n  method.statements=new Statement[]{returnStatement};\n  return method;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 720,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 240,
        "startColumnNumber" : 4,
        "endLineNumber" : 240,
        "endColumnNumber" : 36
      },
      "nodeContext" : "setGeneratedBy(current,source);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "lombok.eclipse.handlers.ASTNode"
  }, {
    "nodeContext" : "source",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 252,
      "startColumnNumber" : 36,
      "endLineNumber" : 252,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 252,
        "startColumnNumber" : 3,
        "endLineNumber" : 252,
        "endColumnNumber" : 43
      },
      "nodeContext" : "setGeneratedBy(fieldNameLiteral,source)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 252,
        "startColumnNumber" : 3,
        "endLineNumber" : 252,
        "endColumnNumber" : 44
      },
      "nodeContext" : "setGeneratedBy(fieldNameLiteral,source);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1631,
        "startLineNumber" : 215,
        "startColumnNumber" : 35,
        "endLineNumber" : 257,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  TypeReference fType=getFieldType(field,fieldAccess);\n  Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n  Expression ex;\n  if (fType.dimensions() > 0) {\n    MessageSend arrayToString=new MessageSend();\n    arrayToString.sourceStart=pS;\n    arrayToString.sourceEnd=pE;\n    arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n    arrayToString.arguments=new Expression[]{fieldAccessor};\n    setGeneratedBy(arrayToString.arguments[0],source);\n    if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n      arrayToString.selector=\"deepToString\".toCharArray();\n    }\n else {\n      arrayToString.selector=\"toString\".toCharArray();\n    }\n    ex=arrayToString;\n  }\n else {\n    ex=fieldAccessor;\n  }\n  setGeneratedBy(ex,source);\n  if (first) {\n    current=new BinaryExpression(current,ex,PLUS);\n    current.sourceStart=pS;\n    current.sourceEnd=pE;\n    setGeneratedBy(current,source);\n    first=false;\n    continue;\n  }\n  StringLiteral fieldNameLiteral;\n  if (includeFieldNames) {\n    char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n    fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n  }\n else {\n    fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n  }\n  setGeneratedBy(fieldNameLiteral,source);\n  current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n  setGeneratedBy(current,source);\n  current=new BinaryExpression(current,ex,PLUS);\n  setGeneratedBy(current,source);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 250,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1664,
        "startLineNumber" : 215,
        "startColumnNumber" : 2,
        "endLineNumber" : 257,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (EclipseNode field : fields) {\n  TypeReference fType=getFieldType(field,fieldAccess);\n  Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n  Expression ex;\n  if (fType.dimensions() > 0) {\n    MessageSend arrayToString=new MessageSend();\n    arrayToString.sourceStart=pS;\n    arrayToString.sourceEnd=pE;\n    arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n    arrayToString.arguments=new Expression[]{fieldAccessor};\n    setGeneratedBy(arrayToString.arguments[0],source);\n    if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n      arrayToString.selector=\"deepToString\".toCharArray();\n    }\n else {\n      arrayToString.selector=\"toString\".toCharArray();\n    }\n    ex=arrayToString;\n  }\n else {\n    ex=fieldAccessor;\n  }\n  setGeneratedBy(ex,source);\n  if (first) {\n    current=new BinaryExpression(current,ex,PLUS);\n    current.sourceStart=pS;\n    current.sourceEnd=pE;\n    setGeneratedBy(current,source);\n    first=false;\n    continue;\n  }\n  StringLiteral fieldNameLiteral;\n  if (includeFieldNames) {\n    char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n    fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n  }\n else {\n    fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n  }\n  setGeneratedBy(fieldNameLiteral,source);\n  current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n  setGeneratedBy(current,source);\n  current=new BinaryExpression(current,ex,PLUS);\n  setGeneratedBy(current,source);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 256,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4152,
        "startLineNumber" : 178,
        "startColumnNumber" : 90,
        "endLineNumber" : 283,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String typeName=getTypeName(type);\n  char[] suffix=\")\".toCharArray();\n  String infixS=\", \";\n  char[] infix=infixS.toCharArray();\n  int pS=source.sourceStart, pE=source.sourceEnd;\n  long p=(long)pS << 32 | pE;\n  final int PLUS=OperatorIds.PLUS;\n  char[] prefix;\n  if (callSuper) {\n    prefix=(typeName + \"(super=\").toCharArray();\n  }\n else   if (fields.isEmpty()) {\n    prefix=(typeName + \"()\").toCharArray();\n  }\n else   if (includeFieldNames) {\n    prefix=(typeName + \"(\" + new String(((FieldDeclaration)fields.iterator().next().get()).name)+ \"=\").toCharArray();\n  }\n else {\n    prefix=(typeName + \"(\").toCharArray();\n  }\n  boolean first=true;\n  Expression current=new StringLiteral(prefix,pS,pE,0);\n  setGeneratedBy(current,source);\n  if (callSuper) {\n    MessageSend callToSuper=new MessageSend();\n    callToSuper.sourceStart=pS;\n    callToSuper.sourceEnd=pE;\n    setGeneratedBy(callToSuper,source);\n    callToSuper.receiver=new SuperReference(pS,pE);\n    setGeneratedBy(callToSuper,source);\n    callToSuper.selector=\"toString\".toCharArray();\n    current=new BinaryExpression(current,callToSuper,PLUS);\n    setGeneratedBy(current,source);\n    first=false;\n  }\n  for (  EclipseNode field : fields) {\n    TypeReference fType=getFieldType(field,fieldAccess);\n    Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n    Expression ex;\n    if (fType.dimensions() > 0) {\n      MessageSend arrayToString=new MessageSend();\n      arrayToString.sourceStart=pS;\n      arrayToString.sourceEnd=pE;\n      arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n      arrayToString.arguments=new Expression[]{fieldAccessor};\n      setGeneratedBy(arrayToString.arguments[0],source);\n      if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n        arrayToString.selector=\"deepToString\".toCharArray();\n      }\n else {\n        arrayToString.selector=\"toString\".toCharArray();\n      }\n      ex=arrayToString;\n    }\n else {\n      ex=fieldAccessor;\n    }\n    setGeneratedBy(ex,source);\n    if (first) {\n      current=new BinaryExpression(current,ex,PLUS);\n      current.sourceStart=pS;\n      current.sourceEnd=pE;\n      setGeneratedBy(current,source);\n      first=false;\n      continue;\n    }\n    StringLiteral fieldNameLiteral;\n    if (includeFieldNames) {\n      char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n      fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n    }\n else {\n      fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n    }\n    setGeneratedBy(fieldNameLiteral,source);\n    current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n    setGeneratedBy(current,source);\n    current=new BinaryExpression(current,ex,PLUS);\n    setGeneratedBy(current,source);\n  }\n  if (!first) {\n    StringLiteral suffixLiteral=new StringLiteral(suffix,pS,pE,0);\n    setGeneratedBy(suffixLiteral,source);\n    current=new BinaryExpression(current,suffixLiteral,PLUS);\n    setGeneratedBy(current,source);\n  }\n  ReturnStatement returnStatement=new ReturnStatement(current,pS,pE);\n  setGeneratedBy(returnStatement,source);\n  MethodDeclaration method=new MethodDeclaration(((CompilationUnitDeclaration)type.top().get()).compilationResult);\n  setGeneratedBy(method,source);\n  method.modifiers=toEclipseModifier(AccessLevel.PUBLIC);\n  method.returnType=new QualifiedTypeReference(TypeConstants.JAVA_LANG_STRING,new long[]{p,p,p});\n  setGeneratedBy(method.returnType,source);\n  method.annotations=new Annotation[]{makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)};\n  method.arguments=null;\n  method.selector=\"toString\".toCharArray();\n  method.thrownExceptions=null;\n  method.typeParameters=null;\n  method.bits|=Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\n  method.bodyStart=method.declarationSourceStart=method.sourceStart=source.sourceStart;\n  method.bodyEnd=method.declarationSourceEnd=method.sourceEnd=source.sourceEnd;\n  method.statements=new Statement[]{returnStatement};\n  return method;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 690,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4333,
        "startLineNumber" : 177,
        "startColumnNumber" : 1,
        "endLineNumber" : 283,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private MethodDeclaration createToString(EclipseNode type,Collection<EclipseNode> fields,boolean includeFieldNames,boolean callSuper,ASTNode source,FieldAccess fieldAccess){\n  String typeName=getTypeName(type);\n  char[] suffix=\")\".toCharArray();\n  String infixS=\", \";\n  char[] infix=infixS.toCharArray();\n  int pS=source.sourceStart, pE=source.sourceEnd;\n  long p=(long)pS << 32 | pE;\n  final int PLUS=OperatorIds.PLUS;\n  char[] prefix;\n  if (callSuper) {\n    prefix=(typeName + \"(super=\").toCharArray();\n  }\n else   if (fields.isEmpty()) {\n    prefix=(typeName + \"()\").toCharArray();\n  }\n else   if (includeFieldNames) {\n    prefix=(typeName + \"(\" + new String(((FieldDeclaration)fields.iterator().next().get()).name)+ \"=\").toCharArray();\n  }\n else {\n    prefix=(typeName + \"(\").toCharArray();\n  }\n  boolean first=true;\n  Expression current=new StringLiteral(prefix,pS,pE,0);\n  setGeneratedBy(current,source);\n  if (callSuper) {\n    MessageSend callToSuper=new MessageSend();\n    callToSuper.sourceStart=pS;\n    callToSuper.sourceEnd=pE;\n    setGeneratedBy(callToSuper,source);\n    callToSuper.receiver=new SuperReference(pS,pE);\n    setGeneratedBy(callToSuper,source);\n    callToSuper.selector=\"toString\".toCharArray();\n    current=new BinaryExpression(current,callToSuper,PLUS);\n    setGeneratedBy(current,source);\n    first=false;\n  }\n  for (  EclipseNode field : fields) {\n    TypeReference fType=getFieldType(field,fieldAccess);\n    Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n    Expression ex;\n    if (fType.dimensions() > 0) {\n      MessageSend arrayToString=new MessageSend();\n      arrayToString.sourceStart=pS;\n      arrayToString.sourceEnd=pE;\n      arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n      arrayToString.arguments=new Expression[]{fieldAccessor};\n      setGeneratedBy(arrayToString.arguments[0],source);\n      if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n        arrayToString.selector=\"deepToString\".toCharArray();\n      }\n else {\n        arrayToString.selector=\"toString\".toCharArray();\n      }\n      ex=arrayToString;\n    }\n else {\n      ex=fieldAccessor;\n    }\n    setGeneratedBy(ex,source);\n    if (first) {\n      current=new BinaryExpression(current,ex,PLUS);\n      current.sourceStart=pS;\n      current.sourceEnd=pE;\n      setGeneratedBy(current,source);\n      first=false;\n      continue;\n    }\n    StringLiteral fieldNameLiteral;\n    if (includeFieldNames) {\n      char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n      fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n    }\n else {\n      fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n    }\n    setGeneratedBy(fieldNameLiteral,source);\n    current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n    setGeneratedBy(current,source);\n    current=new BinaryExpression(current,ex,PLUS);\n    setGeneratedBy(current,source);\n  }\n  if (!first) {\n    StringLiteral suffixLiteral=new StringLiteral(suffix,pS,pE,0);\n    setGeneratedBy(suffixLiteral,source);\n    current=new BinaryExpression(current,suffixLiteral,PLUS);\n    setGeneratedBy(current,source);\n  }\n  ReturnStatement returnStatement=new ReturnStatement(current,pS,pE);\n  setGeneratedBy(returnStatement,source);\n  MethodDeclaration method=new MethodDeclaration(((CompilationUnitDeclaration)type.top().get()).compilationResult);\n  setGeneratedBy(method,source);\n  method.modifiers=toEclipseModifier(AccessLevel.PUBLIC);\n  method.returnType=new QualifiedTypeReference(TypeConstants.JAVA_LANG_STRING,new long[]{p,p,p});\n  setGeneratedBy(method.returnType,source);\n  method.annotations=new Annotation[]{makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)};\n  method.arguments=null;\n  method.selector=\"toString\".toCharArray();\n  method.thrownExceptions=null;\n  method.typeParameters=null;\n  method.bits|=Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\n  method.bodyStart=method.declarationSourceStart=method.sourceStart=source.sourceStart;\n  method.bodyEnd=method.declarationSourceEnd=method.sourceEnd=source.sourceEnd;\n  method.statements=new Statement[]{returnStatement};\n  return method;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 720,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 252,
        "startColumnNumber" : 3,
        "endLineNumber" : 252,
        "endColumnNumber" : 44
      },
      "nodeContext" : "setGeneratedBy(fieldNameLiteral,source);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "lombok.eclipse.handlers.ASTNode"
  }, {
    "nodeContext" : "source",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 254,
      "startColumnNumber" : 27,
      "endLineNumber" : 254,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 254,
        "startColumnNumber" : 3,
        "endLineNumber" : 254,
        "endColumnNumber" : 34
      },
      "nodeContext" : "setGeneratedBy(current,source)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 254,
        "startColumnNumber" : 3,
        "endLineNumber" : 254,
        "endColumnNumber" : 35
      },
      "nodeContext" : "setGeneratedBy(current,source);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1631,
        "startLineNumber" : 215,
        "startColumnNumber" : 35,
        "endLineNumber" : 257,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  TypeReference fType=getFieldType(field,fieldAccess);\n  Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n  Expression ex;\n  if (fType.dimensions() > 0) {\n    MessageSend arrayToString=new MessageSend();\n    arrayToString.sourceStart=pS;\n    arrayToString.sourceEnd=pE;\n    arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n    arrayToString.arguments=new Expression[]{fieldAccessor};\n    setGeneratedBy(arrayToString.arguments[0],source);\n    if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n      arrayToString.selector=\"deepToString\".toCharArray();\n    }\n else {\n      arrayToString.selector=\"toString\".toCharArray();\n    }\n    ex=arrayToString;\n  }\n else {\n    ex=fieldAccessor;\n  }\n  setGeneratedBy(ex,source);\n  if (first) {\n    current=new BinaryExpression(current,ex,PLUS);\n    current.sourceStart=pS;\n    current.sourceEnd=pE;\n    setGeneratedBy(current,source);\n    first=false;\n    continue;\n  }\n  StringLiteral fieldNameLiteral;\n  if (includeFieldNames) {\n    char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n    fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n  }\n else {\n    fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n  }\n  setGeneratedBy(fieldNameLiteral,source);\n  current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n  setGeneratedBy(current,source);\n  current=new BinaryExpression(current,ex,PLUS);\n  setGeneratedBy(current,source);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 250,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1664,
        "startLineNumber" : 215,
        "startColumnNumber" : 2,
        "endLineNumber" : 257,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (EclipseNode field : fields) {\n  TypeReference fType=getFieldType(field,fieldAccess);\n  Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n  Expression ex;\n  if (fType.dimensions() > 0) {\n    MessageSend arrayToString=new MessageSend();\n    arrayToString.sourceStart=pS;\n    arrayToString.sourceEnd=pE;\n    arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n    arrayToString.arguments=new Expression[]{fieldAccessor};\n    setGeneratedBy(arrayToString.arguments[0],source);\n    if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n      arrayToString.selector=\"deepToString\".toCharArray();\n    }\n else {\n      arrayToString.selector=\"toString\".toCharArray();\n    }\n    ex=arrayToString;\n  }\n else {\n    ex=fieldAccessor;\n  }\n  setGeneratedBy(ex,source);\n  if (first) {\n    current=new BinaryExpression(current,ex,PLUS);\n    current.sourceStart=pS;\n    current.sourceEnd=pE;\n    setGeneratedBy(current,source);\n    first=false;\n    continue;\n  }\n  StringLiteral fieldNameLiteral;\n  if (includeFieldNames) {\n    char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n    fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n  }\n else {\n    fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n  }\n  setGeneratedBy(fieldNameLiteral,source);\n  current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n  setGeneratedBy(current,source);\n  current=new BinaryExpression(current,ex,PLUS);\n  setGeneratedBy(current,source);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 256,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4152,
        "startLineNumber" : 178,
        "startColumnNumber" : 90,
        "endLineNumber" : 283,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String typeName=getTypeName(type);\n  char[] suffix=\")\".toCharArray();\n  String infixS=\", \";\n  char[] infix=infixS.toCharArray();\n  int pS=source.sourceStart, pE=source.sourceEnd;\n  long p=(long)pS << 32 | pE;\n  final int PLUS=OperatorIds.PLUS;\n  char[] prefix;\n  if (callSuper) {\n    prefix=(typeName + \"(super=\").toCharArray();\n  }\n else   if (fields.isEmpty()) {\n    prefix=(typeName + \"()\").toCharArray();\n  }\n else   if (includeFieldNames) {\n    prefix=(typeName + \"(\" + new String(((FieldDeclaration)fields.iterator().next().get()).name)+ \"=\").toCharArray();\n  }\n else {\n    prefix=(typeName + \"(\").toCharArray();\n  }\n  boolean first=true;\n  Expression current=new StringLiteral(prefix,pS,pE,0);\n  setGeneratedBy(current,source);\n  if (callSuper) {\n    MessageSend callToSuper=new MessageSend();\n    callToSuper.sourceStart=pS;\n    callToSuper.sourceEnd=pE;\n    setGeneratedBy(callToSuper,source);\n    callToSuper.receiver=new SuperReference(pS,pE);\n    setGeneratedBy(callToSuper,source);\n    callToSuper.selector=\"toString\".toCharArray();\n    current=new BinaryExpression(current,callToSuper,PLUS);\n    setGeneratedBy(current,source);\n    first=false;\n  }\n  for (  EclipseNode field : fields) {\n    TypeReference fType=getFieldType(field,fieldAccess);\n    Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n    Expression ex;\n    if (fType.dimensions() > 0) {\n      MessageSend arrayToString=new MessageSend();\n      arrayToString.sourceStart=pS;\n      arrayToString.sourceEnd=pE;\n      arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n      arrayToString.arguments=new Expression[]{fieldAccessor};\n      setGeneratedBy(arrayToString.arguments[0],source);\n      if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n        arrayToString.selector=\"deepToString\".toCharArray();\n      }\n else {\n        arrayToString.selector=\"toString\".toCharArray();\n      }\n      ex=arrayToString;\n    }\n else {\n      ex=fieldAccessor;\n    }\n    setGeneratedBy(ex,source);\n    if (first) {\n      current=new BinaryExpression(current,ex,PLUS);\n      current.sourceStart=pS;\n      current.sourceEnd=pE;\n      setGeneratedBy(current,source);\n      first=false;\n      continue;\n    }\n    StringLiteral fieldNameLiteral;\n    if (includeFieldNames) {\n      char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n      fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n    }\n else {\n      fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n    }\n    setGeneratedBy(fieldNameLiteral,source);\n    current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n    setGeneratedBy(current,source);\n    current=new BinaryExpression(current,ex,PLUS);\n    setGeneratedBy(current,source);\n  }\n  if (!first) {\n    StringLiteral suffixLiteral=new StringLiteral(suffix,pS,pE,0);\n    setGeneratedBy(suffixLiteral,source);\n    current=new BinaryExpression(current,suffixLiteral,PLUS);\n    setGeneratedBy(current,source);\n  }\n  ReturnStatement returnStatement=new ReturnStatement(current,pS,pE);\n  setGeneratedBy(returnStatement,source);\n  MethodDeclaration method=new MethodDeclaration(((CompilationUnitDeclaration)type.top().get()).compilationResult);\n  setGeneratedBy(method,source);\n  method.modifiers=toEclipseModifier(AccessLevel.PUBLIC);\n  method.returnType=new QualifiedTypeReference(TypeConstants.JAVA_LANG_STRING,new long[]{p,p,p});\n  setGeneratedBy(method.returnType,source);\n  method.annotations=new Annotation[]{makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)};\n  method.arguments=null;\n  method.selector=\"toString\".toCharArray();\n  method.thrownExceptions=null;\n  method.typeParameters=null;\n  method.bits|=Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\n  method.bodyStart=method.declarationSourceStart=method.sourceStart=source.sourceStart;\n  method.bodyEnd=method.declarationSourceEnd=method.sourceEnd=source.sourceEnd;\n  method.statements=new Statement[]{returnStatement};\n  return method;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 690,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4333,
        "startLineNumber" : 177,
        "startColumnNumber" : 1,
        "endLineNumber" : 283,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private MethodDeclaration createToString(EclipseNode type,Collection<EclipseNode> fields,boolean includeFieldNames,boolean callSuper,ASTNode source,FieldAccess fieldAccess){\n  String typeName=getTypeName(type);\n  char[] suffix=\")\".toCharArray();\n  String infixS=\", \";\n  char[] infix=infixS.toCharArray();\n  int pS=source.sourceStart, pE=source.sourceEnd;\n  long p=(long)pS << 32 | pE;\n  final int PLUS=OperatorIds.PLUS;\n  char[] prefix;\n  if (callSuper) {\n    prefix=(typeName + \"(super=\").toCharArray();\n  }\n else   if (fields.isEmpty()) {\n    prefix=(typeName + \"()\").toCharArray();\n  }\n else   if (includeFieldNames) {\n    prefix=(typeName + \"(\" + new String(((FieldDeclaration)fields.iterator().next().get()).name)+ \"=\").toCharArray();\n  }\n else {\n    prefix=(typeName + \"(\").toCharArray();\n  }\n  boolean first=true;\n  Expression current=new StringLiteral(prefix,pS,pE,0);\n  setGeneratedBy(current,source);\n  if (callSuper) {\n    MessageSend callToSuper=new MessageSend();\n    callToSuper.sourceStart=pS;\n    callToSuper.sourceEnd=pE;\n    setGeneratedBy(callToSuper,source);\n    callToSuper.receiver=new SuperReference(pS,pE);\n    setGeneratedBy(callToSuper,source);\n    callToSuper.selector=\"toString\".toCharArray();\n    current=new BinaryExpression(current,callToSuper,PLUS);\n    setGeneratedBy(current,source);\n    first=false;\n  }\n  for (  EclipseNode field : fields) {\n    TypeReference fType=getFieldType(field,fieldAccess);\n    Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n    Expression ex;\n    if (fType.dimensions() > 0) {\n      MessageSend arrayToString=new MessageSend();\n      arrayToString.sourceStart=pS;\n      arrayToString.sourceEnd=pE;\n      arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n      arrayToString.arguments=new Expression[]{fieldAccessor};\n      setGeneratedBy(arrayToString.arguments[0],source);\n      if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n        arrayToString.selector=\"deepToString\".toCharArray();\n      }\n else {\n        arrayToString.selector=\"toString\".toCharArray();\n      }\n      ex=arrayToString;\n    }\n else {\n      ex=fieldAccessor;\n    }\n    setGeneratedBy(ex,source);\n    if (first) {\n      current=new BinaryExpression(current,ex,PLUS);\n      current.sourceStart=pS;\n      current.sourceEnd=pE;\n      setGeneratedBy(current,source);\n      first=false;\n      continue;\n    }\n    StringLiteral fieldNameLiteral;\n    if (includeFieldNames) {\n      char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n      fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n    }\n else {\n      fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n    }\n    setGeneratedBy(fieldNameLiteral,source);\n    current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n    setGeneratedBy(current,source);\n    current=new BinaryExpression(current,ex,PLUS);\n    setGeneratedBy(current,source);\n  }\n  if (!first) {\n    StringLiteral suffixLiteral=new StringLiteral(suffix,pS,pE,0);\n    setGeneratedBy(suffixLiteral,source);\n    current=new BinaryExpression(current,suffixLiteral,PLUS);\n    setGeneratedBy(current,source);\n  }\n  ReturnStatement returnStatement=new ReturnStatement(current,pS,pE);\n  setGeneratedBy(returnStatement,source);\n  MethodDeclaration method=new MethodDeclaration(((CompilationUnitDeclaration)type.top().get()).compilationResult);\n  setGeneratedBy(method,source);\n  method.modifiers=toEclipseModifier(AccessLevel.PUBLIC);\n  method.returnType=new QualifiedTypeReference(TypeConstants.JAVA_LANG_STRING,new long[]{p,p,p});\n  setGeneratedBy(method.returnType,source);\n  method.annotations=new Annotation[]{makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)};\n  method.arguments=null;\n  method.selector=\"toString\".toCharArray();\n  method.thrownExceptions=null;\n  method.typeParameters=null;\n  method.bits|=Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\n  method.bodyStart=method.declarationSourceStart=method.sourceStart=source.sourceStart;\n  method.bodyEnd=method.declarationSourceEnd=method.sourceEnd=source.sourceEnd;\n  method.statements=new Statement[]{returnStatement};\n  return method;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 720,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 254,
        "startColumnNumber" : 3,
        "endLineNumber" : 254,
        "endColumnNumber" : 35
      },
      "nodeContext" : "setGeneratedBy(current,source);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "lombok.eclipse.handlers.ASTNode"
  }, {
    "nodeContext" : "source",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 256,
      "startColumnNumber" : 27,
      "endLineNumber" : 256,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 256,
        "startColumnNumber" : 3,
        "endLineNumber" : 256,
        "endColumnNumber" : 34
      },
      "nodeContext" : "setGeneratedBy(current,source)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 256,
        "startColumnNumber" : 3,
        "endLineNumber" : 256,
        "endColumnNumber" : 35
      },
      "nodeContext" : "setGeneratedBy(current,source);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1631,
        "startLineNumber" : 215,
        "startColumnNumber" : 35,
        "endLineNumber" : 257,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  TypeReference fType=getFieldType(field,fieldAccess);\n  Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n  Expression ex;\n  if (fType.dimensions() > 0) {\n    MessageSend arrayToString=new MessageSend();\n    arrayToString.sourceStart=pS;\n    arrayToString.sourceEnd=pE;\n    arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n    arrayToString.arguments=new Expression[]{fieldAccessor};\n    setGeneratedBy(arrayToString.arguments[0],source);\n    if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n      arrayToString.selector=\"deepToString\".toCharArray();\n    }\n else {\n      arrayToString.selector=\"toString\".toCharArray();\n    }\n    ex=arrayToString;\n  }\n else {\n    ex=fieldAccessor;\n  }\n  setGeneratedBy(ex,source);\n  if (first) {\n    current=new BinaryExpression(current,ex,PLUS);\n    current.sourceStart=pS;\n    current.sourceEnd=pE;\n    setGeneratedBy(current,source);\n    first=false;\n    continue;\n  }\n  StringLiteral fieldNameLiteral;\n  if (includeFieldNames) {\n    char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n    fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n  }\n else {\n    fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n  }\n  setGeneratedBy(fieldNameLiteral,source);\n  current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n  setGeneratedBy(current,source);\n  current=new BinaryExpression(current,ex,PLUS);\n  setGeneratedBy(current,source);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 250,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1664,
        "startLineNumber" : 215,
        "startColumnNumber" : 2,
        "endLineNumber" : 257,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (EclipseNode field : fields) {\n  TypeReference fType=getFieldType(field,fieldAccess);\n  Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n  Expression ex;\n  if (fType.dimensions() > 0) {\n    MessageSend arrayToString=new MessageSend();\n    arrayToString.sourceStart=pS;\n    arrayToString.sourceEnd=pE;\n    arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n    arrayToString.arguments=new Expression[]{fieldAccessor};\n    setGeneratedBy(arrayToString.arguments[0],source);\n    if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n      arrayToString.selector=\"deepToString\".toCharArray();\n    }\n else {\n      arrayToString.selector=\"toString\".toCharArray();\n    }\n    ex=arrayToString;\n  }\n else {\n    ex=fieldAccessor;\n  }\n  setGeneratedBy(ex,source);\n  if (first) {\n    current=new BinaryExpression(current,ex,PLUS);\n    current.sourceStart=pS;\n    current.sourceEnd=pE;\n    setGeneratedBy(current,source);\n    first=false;\n    continue;\n  }\n  StringLiteral fieldNameLiteral;\n  if (includeFieldNames) {\n    char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n    fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n  }\n else {\n    fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n  }\n  setGeneratedBy(fieldNameLiteral,source);\n  current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n  setGeneratedBy(current,source);\n  current=new BinaryExpression(current,ex,PLUS);\n  setGeneratedBy(current,source);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 256,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4152,
        "startLineNumber" : 178,
        "startColumnNumber" : 90,
        "endLineNumber" : 283,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String typeName=getTypeName(type);\n  char[] suffix=\")\".toCharArray();\n  String infixS=\", \";\n  char[] infix=infixS.toCharArray();\n  int pS=source.sourceStart, pE=source.sourceEnd;\n  long p=(long)pS << 32 | pE;\n  final int PLUS=OperatorIds.PLUS;\n  char[] prefix;\n  if (callSuper) {\n    prefix=(typeName + \"(super=\").toCharArray();\n  }\n else   if (fields.isEmpty()) {\n    prefix=(typeName + \"()\").toCharArray();\n  }\n else   if (includeFieldNames) {\n    prefix=(typeName + \"(\" + new String(((FieldDeclaration)fields.iterator().next().get()).name)+ \"=\").toCharArray();\n  }\n else {\n    prefix=(typeName + \"(\").toCharArray();\n  }\n  boolean first=true;\n  Expression current=new StringLiteral(prefix,pS,pE,0);\n  setGeneratedBy(current,source);\n  if (callSuper) {\n    MessageSend callToSuper=new MessageSend();\n    callToSuper.sourceStart=pS;\n    callToSuper.sourceEnd=pE;\n    setGeneratedBy(callToSuper,source);\n    callToSuper.receiver=new SuperReference(pS,pE);\n    setGeneratedBy(callToSuper,source);\n    callToSuper.selector=\"toString\".toCharArray();\n    current=new BinaryExpression(current,callToSuper,PLUS);\n    setGeneratedBy(current,source);\n    first=false;\n  }\n  for (  EclipseNode field : fields) {\n    TypeReference fType=getFieldType(field,fieldAccess);\n    Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n    Expression ex;\n    if (fType.dimensions() > 0) {\n      MessageSend arrayToString=new MessageSend();\n      arrayToString.sourceStart=pS;\n      arrayToString.sourceEnd=pE;\n      arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n      arrayToString.arguments=new Expression[]{fieldAccessor};\n      setGeneratedBy(arrayToString.arguments[0],source);\n      if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n        arrayToString.selector=\"deepToString\".toCharArray();\n      }\n else {\n        arrayToString.selector=\"toString\".toCharArray();\n      }\n      ex=arrayToString;\n    }\n else {\n      ex=fieldAccessor;\n    }\n    setGeneratedBy(ex,source);\n    if (first) {\n      current=new BinaryExpression(current,ex,PLUS);\n      current.sourceStart=pS;\n      current.sourceEnd=pE;\n      setGeneratedBy(current,source);\n      first=false;\n      continue;\n    }\n    StringLiteral fieldNameLiteral;\n    if (includeFieldNames) {\n      char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n      fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n    }\n else {\n      fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n    }\n    setGeneratedBy(fieldNameLiteral,source);\n    current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n    setGeneratedBy(current,source);\n    current=new BinaryExpression(current,ex,PLUS);\n    setGeneratedBy(current,source);\n  }\n  if (!first) {\n    StringLiteral suffixLiteral=new StringLiteral(suffix,pS,pE,0);\n    setGeneratedBy(suffixLiteral,source);\n    current=new BinaryExpression(current,suffixLiteral,PLUS);\n    setGeneratedBy(current,source);\n  }\n  ReturnStatement returnStatement=new ReturnStatement(current,pS,pE);\n  setGeneratedBy(returnStatement,source);\n  MethodDeclaration method=new MethodDeclaration(((CompilationUnitDeclaration)type.top().get()).compilationResult);\n  setGeneratedBy(method,source);\n  method.modifiers=toEclipseModifier(AccessLevel.PUBLIC);\n  method.returnType=new QualifiedTypeReference(TypeConstants.JAVA_LANG_STRING,new long[]{p,p,p});\n  setGeneratedBy(method.returnType,source);\n  method.annotations=new Annotation[]{makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)};\n  method.arguments=null;\n  method.selector=\"toString\".toCharArray();\n  method.thrownExceptions=null;\n  method.typeParameters=null;\n  method.bits|=Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\n  method.bodyStart=method.declarationSourceStart=method.sourceStart=source.sourceStart;\n  method.bodyEnd=method.declarationSourceEnd=method.sourceEnd=source.sourceEnd;\n  method.statements=new Statement[]{returnStatement};\n  return method;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 690,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4333,
        "startLineNumber" : 177,
        "startColumnNumber" : 1,
        "endLineNumber" : 283,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private MethodDeclaration createToString(EclipseNode type,Collection<EclipseNode> fields,boolean includeFieldNames,boolean callSuper,ASTNode source,FieldAccess fieldAccess){\n  String typeName=getTypeName(type);\n  char[] suffix=\")\".toCharArray();\n  String infixS=\", \";\n  char[] infix=infixS.toCharArray();\n  int pS=source.sourceStart, pE=source.sourceEnd;\n  long p=(long)pS << 32 | pE;\n  final int PLUS=OperatorIds.PLUS;\n  char[] prefix;\n  if (callSuper) {\n    prefix=(typeName + \"(super=\").toCharArray();\n  }\n else   if (fields.isEmpty()) {\n    prefix=(typeName + \"()\").toCharArray();\n  }\n else   if (includeFieldNames) {\n    prefix=(typeName + \"(\" + new String(((FieldDeclaration)fields.iterator().next().get()).name)+ \"=\").toCharArray();\n  }\n else {\n    prefix=(typeName + \"(\").toCharArray();\n  }\n  boolean first=true;\n  Expression current=new StringLiteral(prefix,pS,pE,0);\n  setGeneratedBy(current,source);\n  if (callSuper) {\n    MessageSend callToSuper=new MessageSend();\n    callToSuper.sourceStart=pS;\n    callToSuper.sourceEnd=pE;\n    setGeneratedBy(callToSuper,source);\n    callToSuper.receiver=new SuperReference(pS,pE);\n    setGeneratedBy(callToSuper,source);\n    callToSuper.selector=\"toString\".toCharArray();\n    current=new BinaryExpression(current,callToSuper,PLUS);\n    setGeneratedBy(current,source);\n    first=false;\n  }\n  for (  EclipseNode field : fields) {\n    TypeReference fType=getFieldType(field,fieldAccess);\n    Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n    Expression ex;\n    if (fType.dimensions() > 0) {\n      MessageSend arrayToString=new MessageSend();\n      arrayToString.sourceStart=pS;\n      arrayToString.sourceEnd=pE;\n      arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n      arrayToString.arguments=new Expression[]{fieldAccessor};\n      setGeneratedBy(arrayToString.arguments[0],source);\n      if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n        arrayToString.selector=\"deepToString\".toCharArray();\n      }\n else {\n        arrayToString.selector=\"toString\".toCharArray();\n      }\n      ex=arrayToString;\n    }\n else {\n      ex=fieldAccessor;\n    }\n    setGeneratedBy(ex,source);\n    if (first) {\n      current=new BinaryExpression(current,ex,PLUS);\n      current.sourceStart=pS;\n      current.sourceEnd=pE;\n      setGeneratedBy(current,source);\n      first=false;\n      continue;\n    }\n    StringLiteral fieldNameLiteral;\n    if (includeFieldNames) {\n      char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n      fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n    }\n else {\n      fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n    }\n    setGeneratedBy(fieldNameLiteral,source);\n    current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n    setGeneratedBy(current,source);\n    current=new BinaryExpression(current,ex,PLUS);\n    setGeneratedBy(current,source);\n  }\n  if (!first) {\n    StringLiteral suffixLiteral=new StringLiteral(suffix,pS,pE,0);\n    setGeneratedBy(suffixLiteral,source);\n    current=new BinaryExpression(current,suffixLiteral,PLUS);\n    setGeneratedBy(current,source);\n  }\n  ReturnStatement returnStatement=new ReturnStatement(current,pS,pE);\n  setGeneratedBy(returnStatement,source);\n  MethodDeclaration method=new MethodDeclaration(((CompilationUnitDeclaration)type.top().get()).compilationResult);\n  setGeneratedBy(method,source);\n  method.modifiers=toEclipseModifier(AccessLevel.PUBLIC);\n  method.returnType=new QualifiedTypeReference(TypeConstants.JAVA_LANG_STRING,new long[]{p,p,p});\n  setGeneratedBy(method.returnType,source);\n  method.annotations=new Annotation[]{makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)};\n  method.arguments=null;\n  method.selector=\"toString\".toCharArray();\n  method.thrownExceptions=null;\n  method.typeParameters=null;\n  method.bits|=Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\n  method.bodyStart=method.declarationSourceStart=method.sourceStart=source.sourceStart;\n  method.bodyEnd=method.declarationSourceEnd=method.sourceEnd=source.sourceEnd;\n  method.statements=new Statement[]{returnStatement};\n  return method;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 720,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 256,
        "startColumnNumber" : 3,
        "endLineNumber" : 256,
        "endColumnNumber" : 35
      },
      "nodeContext" : "setGeneratedBy(current,source);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "lombok.eclipse.handlers.ASTNode"
  }, {
    "nodeContext" : "source",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 260,
      "startColumnNumber" : 33,
      "endLineNumber" : 260,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 260,
        "startColumnNumber" : 3,
        "endLineNumber" : 260,
        "endColumnNumber" : 40
      },
      "nodeContext" : "setGeneratedBy(suffixLiteral,source)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 260,
        "startColumnNumber" : 3,
        "endLineNumber" : 260,
        "endColumnNumber" : 41
      },
      "nodeContext" : "setGeneratedBy(suffixLiteral,source);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 219,
        "startLineNumber" : 258,
        "startColumnNumber" : 14,
        "endLineNumber" : 263,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  StringLiteral suffixLiteral=new StringLiteral(suffix,pS,pE,0);\n  setGeneratedBy(suffixLiteral,source);\n  current=new BinaryExpression(current,suffixLiteral,PLUS);\n  setGeneratedBy(current,source);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 32,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 231,
        "startLineNumber" : 258,
        "startColumnNumber" : 2,
        "endLineNumber" : 263,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (!first) {\n  StringLiteral suffixLiteral=new StringLiteral(suffix,pS,pE,0);\n  setGeneratedBy(suffixLiteral,source);\n  current=new BinaryExpression(current,suffixLiteral,PLUS);\n  setGeneratedBy(current,source);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 35,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4152,
        "startLineNumber" : 178,
        "startColumnNumber" : 90,
        "endLineNumber" : 283,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String typeName=getTypeName(type);\n  char[] suffix=\")\".toCharArray();\n  String infixS=\", \";\n  char[] infix=infixS.toCharArray();\n  int pS=source.sourceStart, pE=source.sourceEnd;\n  long p=(long)pS << 32 | pE;\n  final int PLUS=OperatorIds.PLUS;\n  char[] prefix;\n  if (callSuper) {\n    prefix=(typeName + \"(super=\").toCharArray();\n  }\n else   if (fields.isEmpty()) {\n    prefix=(typeName + \"()\").toCharArray();\n  }\n else   if (includeFieldNames) {\n    prefix=(typeName + \"(\" + new String(((FieldDeclaration)fields.iterator().next().get()).name)+ \"=\").toCharArray();\n  }\n else {\n    prefix=(typeName + \"(\").toCharArray();\n  }\n  boolean first=true;\n  Expression current=new StringLiteral(prefix,pS,pE,0);\n  setGeneratedBy(current,source);\n  if (callSuper) {\n    MessageSend callToSuper=new MessageSend();\n    callToSuper.sourceStart=pS;\n    callToSuper.sourceEnd=pE;\n    setGeneratedBy(callToSuper,source);\n    callToSuper.receiver=new SuperReference(pS,pE);\n    setGeneratedBy(callToSuper,source);\n    callToSuper.selector=\"toString\".toCharArray();\n    current=new BinaryExpression(current,callToSuper,PLUS);\n    setGeneratedBy(current,source);\n    first=false;\n  }\n  for (  EclipseNode field : fields) {\n    TypeReference fType=getFieldType(field,fieldAccess);\n    Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n    Expression ex;\n    if (fType.dimensions() > 0) {\n      MessageSend arrayToString=new MessageSend();\n      arrayToString.sourceStart=pS;\n      arrayToString.sourceEnd=pE;\n      arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n      arrayToString.arguments=new Expression[]{fieldAccessor};\n      setGeneratedBy(arrayToString.arguments[0],source);\n      if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n        arrayToString.selector=\"deepToString\".toCharArray();\n      }\n else {\n        arrayToString.selector=\"toString\".toCharArray();\n      }\n      ex=arrayToString;\n    }\n else {\n      ex=fieldAccessor;\n    }\n    setGeneratedBy(ex,source);\n    if (first) {\n      current=new BinaryExpression(current,ex,PLUS);\n      current.sourceStart=pS;\n      current.sourceEnd=pE;\n      setGeneratedBy(current,source);\n      first=false;\n      continue;\n    }\n    StringLiteral fieldNameLiteral;\n    if (includeFieldNames) {\n      char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n      fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n    }\n else {\n      fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n    }\n    setGeneratedBy(fieldNameLiteral,source);\n    current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n    setGeneratedBy(current,source);\n    current=new BinaryExpression(current,ex,PLUS);\n    setGeneratedBy(current,source);\n  }\n  if (!first) {\n    StringLiteral suffixLiteral=new StringLiteral(suffix,pS,pE,0);\n    setGeneratedBy(suffixLiteral,source);\n    current=new BinaryExpression(current,suffixLiteral,PLUS);\n    setGeneratedBy(current,source);\n  }\n  ReturnStatement returnStatement=new ReturnStatement(current,pS,pE);\n  setGeneratedBy(returnStatement,source);\n  MethodDeclaration method=new MethodDeclaration(((CompilationUnitDeclaration)type.top().get()).compilationResult);\n  setGeneratedBy(method,source);\n  method.modifiers=toEclipseModifier(AccessLevel.PUBLIC);\n  method.returnType=new QualifiedTypeReference(TypeConstants.JAVA_LANG_STRING,new long[]{p,p,p});\n  setGeneratedBy(method.returnType,source);\n  method.annotations=new Annotation[]{makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)};\n  method.arguments=null;\n  method.selector=\"toString\".toCharArray();\n  method.thrownExceptions=null;\n  method.typeParameters=null;\n  method.bits|=Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\n  method.bodyStart=method.declarationSourceStart=method.sourceStart=source.sourceStart;\n  method.bodyEnd=method.declarationSourceEnd=method.sourceEnd=source.sourceEnd;\n  method.statements=new Statement[]{returnStatement};\n  return method;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 690,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4333,
        "startLineNumber" : 177,
        "startColumnNumber" : 1,
        "endLineNumber" : 283,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private MethodDeclaration createToString(EclipseNode type,Collection<EclipseNode> fields,boolean includeFieldNames,boolean callSuper,ASTNode source,FieldAccess fieldAccess){\n  String typeName=getTypeName(type);\n  char[] suffix=\")\".toCharArray();\n  String infixS=\", \";\n  char[] infix=infixS.toCharArray();\n  int pS=source.sourceStart, pE=source.sourceEnd;\n  long p=(long)pS << 32 | pE;\n  final int PLUS=OperatorIds.PLUS;\n  char[] prefix;\n  if (callSuper) {\n    prefix=(typeName + \"(super=\").toCharArray();\n  }\n else   if (fields.isEmpty()) {\n    prefix=(typeName + \"()\").toCharArray();\n  }\n else   if (includeFieldNames) {\n    prefix=(typeName + \"(\" + new String(((FieldDeclaration)fields.iterator().next().get()).name)+ \"=\").toCharArray();\n  }\n else {\n    prefix=(typeName + \"(\").toCharArray();\n  }\n  boolean first=true;\n  Expression current=new StringLiteral(prefix,pS,pE,0);\n  setGeneratedBy(current,source);\n  if (callSuper) {\n    MessageSend callToSuper=new MessageSend();\n    callToSuper.sourceStart=pS;\n    callToSuper.sourceEnd=pE;\n    setGeneratedBy(callToSuper,source);\n    callToSuper.receiver=new SuperReference(pS,pE);\n    setGeneratedBy(callToSuper,source);\n    callToSuper.selector=\"toString\".toCharArray();\n    current=new BinaryExpression(current,callToSuper,PLUS);\n    setGeneratedBy(current,source);\n    first=false;\n  }\n  for (  EclipseNode field : fields) {\n    TypeReference fType=getFieldType(field,fieldAccess);\n    Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n    Expression ex;\n    if (fType.dimensions() > 0) {\n      MessageSend arrayToString=new MessageSend();\n      arrayToString.sourceStart=pS;\n      arrayToString.sourceEnd=pE;\n      arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n      arrayToString.arguments=new Expression[]{fieldAccessor};\n      setGeneratedBy(arrayToString.arguments[0],source);\n      if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n        arrayToString.selector=\"deepToString\".toCharArray();\n      }\n else {\n        arrayToString.selector=\"toString\".toCharArray();\n      }\n      ex=arrayToString;\n    }\n else {\n      ex=fieldAccessor;\n    }\n    setGeneratedBy(ex,source);\n    if (first) {\n      current=new BinaryExpression(current,ex,PLUS);\n      current.sourceStart=pS;\n      current.sourceEnd=pE;\n      setGeneratedBy(current,source);\n      first=false;\n      continue;\n    }\n    StringLiteral fieldNameLiteral;\n    if (includeFieldNames) {\n      char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n      fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n    }\n else {\n      fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n    }\n    setGeneratedBy(fieldNameLiteral,source);\n    current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n    setGeneratedBy(current,source);\n    current=new BinaryExpression(current,ex,PLUS);\n    setGeneratedBy(current,source);\n  }\n  if (!first) {\n    StringLiteral suffixLiteral=new StringLiteral(suffix,pS,pE,0);\n    setGeneratedBy(suffixLiteral,source);\n    current=new BinaryExpression(current,suffixLiteral,PLUS);\n    setGeneratedBy(current,source);\n  }\n  ReturnStatement returnStatement=new ReturnStatement(current,pS,pE);\n  setGeneratedBy(returnStatement,source);\n  MethodDeclaration method=new MethodDeclaration(((CompilationUnitDeclaration)type.top().get()).compilationResult);\n  setGeneratedBy(method,source);\n  method.modifiers=toEclipseModifier(AccessLevel.PUBLIC);\n  method.returnType=new QualifiedTypeReference(TypeConstants.JAVA_LANG_STRING,new long[]{p,p,p});\n  setGeneratedBy(method.returnType,source);\n  method.annotations=new Annotation[]{makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)};\n  method.arguments=null;\n  method.selector=\"toString\".toCharArray();\n  method.thrownExceptions=null;\n  method.typeParameters=null;\n  method.bits|=Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\n  method.bodyStart=method.declarationSourceStart=method.sourceStart=source.sourceStart;\n  method.bodyEnd=method.declarationSourceEnd=method.sourceEnd=source.sourceEnd;\n  method.statements=new Statement[]{returnStatement};\n  return method;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 720,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 260,
        "startColumnNumber" : 3,
        "endLineNumber" : 260,
        "endColumnNumber" : 41
      },
      "nodeContext" : "setGeneratedBy(suffixLiteral,source);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "lombok.eclipse.handlers.ASTNode"
  }, {
    "nodeContext" : "source",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 262,
      "startColumnNumber" : 27,
      "endLineNumber" : 262,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 262,
        "startColumnNumber" : 3,
        "endLineNumber" : 262,
        "endColumnNumber" : 34
      },
      "nodeContext" : "setGeneratedBy(current,source)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 262,
        "startColumnNumber" : 3,
        "endLineNumber" : 262,
        "endColumnNumber" : 35
      },
      "nodeContext" : "setGeneratedBy(current,source);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 219,
        "startLineNumber" : 258,
        "startColumnNumber" : 14,
        "endLineNumber" : 263,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  StringLiteral suffixLiteral=new StringLiteral(suffix,pS,pE,0);\n  setGeneratedBy(suffixLiteral,source);\n  current=new BinaryExpression(current,suffixLiteral,PLUS);\n  setGeneratedBy(current,source);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 32,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 231,
        "startLineNumber" : 258,
        "startColumnNumber" : 2,
        "endLineNumber" : 263,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (!first) {\n  StringLiteral suffixLiteral=new StringLiteral(suffix,pS,pE,0);\n  setGeneratedBy(suffixLiteral,source);\n  current=new BinaryExpression(current,suffixLiteral,PLUS);\n  setGeneratedBy(current,source);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 35,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4152,
        "startLineNumber" : 178,
        "startColumnNumber" : 90,
        "endLineNumber" : 283,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String typeName=getTypeName(type);\n  char[] suffix=\")\".toCharArray();\n  String infixS=\", \";\n  char[] infix=infixS.toCharArray();\n  int pS=source.sourceStart, pE=source.sourceEnd;\n  long p=(long)pS << 32 | pE;\n  final int PLUS=OperatorIds.PLUS;\n  char[] prefix;\n  if (callSuper) {\n    prefix=(typeName + \"(super=\").toCharArray();\n  }\n else   if (fields.isEmpty()) {\n    prefix=(typeName + \"()\").toCharArray();\n  }\n else   if (includeFieldNames) {\n    prefix=(typeName + \"(\" + new String(((FieldDeclaration)fields.iterator().next().get()).name)+ \"=\").toCharArray();\n  }\n else {\n    prefix=(typeName + \"(\").toCharArray();\n  }\n  boolean first=true;\n  Expression current=new StringLiteral(prefix,pS,pE,0);\n  setGeneratedBy(current,source);\n  if (callSuper) {\n    MessageSend callToSuper=new MessageSend();\n    callToSuper.sourceStart=pS;\n    callToSuper.sourceEnd=pE;\n    setGeneratedBy(callToSuper,source);\n    callToSuper.receiver=new SuperReference(pS,pE);\n    setGeneratedBy(callToSuper,source);\n    callToSuper.selector=\"toString\".toCharArray();\n    current=new BinaryExpression(current,callToSuper,PLUS);\n    setGeneratedBy(current,source);\n    first=false;\n  }\n  for (  EclipseNode field : fields) {\n    TypeReference fType=getFieldType(field,fieldAccess);\n    Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n    Expression ex;\n    if (fType.dimensions() > 0) {\n      MessageSend arrayToString=new MessageSend();\n      arrayToString.sourceStart=pS;\n      arrayToString.sourceEnd=pE;\n      arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n      arrayToString.arguments=new Expression[]{fieldAccessor};\n      setGeneratedBy(arrayToString.arguments[0],source);\n      if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n        arrayToString.selector=\"deepToString\".toCharArray();\n      }\n else {\n        arrayToString.selector=\"toString\".toCharArray();\n      }\n      ex=arrayToString;\n    }\n else {\n      ex=fieldAccessor;\n    }\n    setGeneratedBy(ex,source);\n    if (first) {\n      current=new BinaryExpression(current,ex,PLUS);\n      current.sourceStart=pS;\n      current.sourceEnd=pE;\n      setGeneratedBy(current,source);\n      first=false;\n      continue;\n    }\n    StringLiteral fieldNameLiteral;\n    if (includeFieldNames) {\n      char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n      fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n    }\n else {\n      fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n    }\n    setGeneratedBy(fieldNameLiteral,source);\n    current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n    setGeneratedBy(current,source);\n    current=new BinaryExpression(current,ex,PLUS);\n    setGeneratedBy(current,source);\n  }\n  if (!first) {\n    StringLiteral suffixLiteral=new StringLiteral(suffix,pS,pE,0);\n    setGeneratedBy(suffixLiteral,source);\n    current=new BinaryExpression(current,suffixLiteral,PLUS);\n    setGeneratedBy(current,source);\n  }\n  ReturnStatement returnStatement=new ReturnStatement(current,pS,pE);\n  setGeneratedBy(returnStatement,source);\n  MethodDeclaration method=new MethodDeclaration(((CompilationUnitDeclaration)type.top().get()).compilationResult);\n  setGeneratedBy(method,source);\n  method.modifiers=toEclipseModifier(AccessLevel.PUBLIC);\n  method.returnType=new QualifiedTypeReference(TypeConstants.JAVA_LANG_STRING,new long[]{p,p,p});\n  setGeneratedBy(method.returnType,source);\n  method.annotations=new Annotation[]{makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)};\n  method.arguments=null;\n  method.selector=\"toString\".toCharArray();\n  method.thrownExceptions=null;\n  method.typeParameters=null;\n  method.bits|=Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\n  method.bodyStart=method.declarationSourceStart=method.sourceStart=source.sourceStart;\n  method.bodyEnd=method.declarationSourceEnd=method.sourceEnd=source.sourceEnd;\n  method.statements=new Statement[]{returnStatement};\n  return method;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 690,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4333,
        "startLineNumber" : 177,
        "startColumnNumber" : 1,
        "endLineNumber" : 283,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private MethodDeclaration createToString(EclipseNode type,Collection<EclipseNode> fields,boolean includeFieldNames,boolean callSuper,ASTNode source,FieldAccess fieldAccess){\n  String typeName=getTypeName(type);\n  char[] suffix=\")\".toCharArray();\n  String infixS=\", \";\n  char[] infix=infixS.toCharArray();\n  int pS=source.sourceStart, pE=source.sourceEnd;\n  long p=(long)pS << 32 | pE;\n  final int PLUS=OperatorIds.PLUS;\n  char[] prefix;\n  if (callSuper) {\n    prefix=(typeName + \"(super=\").toCharArray();\n  }\n else   if (fields.isEmpty()) {\n    prefix=(typeName + \"()\").toCharArray();\n  }\n else   if (includeFieldNames) {\n    prefix=(typeName + \"(\" + new String(((FieldDeclaration)fields.iterator().next().get()).name)+ \"=\").toCharArray();\n  }\n else {\n    prefix=(typeName + \"(\").toCharArray();\n  }\n  boolean first=true;\n  Expression current=new StringLiteral(prefix,pS,pE,0);\n  setGeneratedBy(current,source);\n  if (callSuper) {\n    MessageSend callToSuper=new MessageSend();\n    callToSuper.sourceStart=pS;\n    callToSuper.sourceEnd=pE;\n    setGeneratedBy(callToSuper,source);\n    callToSuper.receiver=new SuperReference(pS,pE);\n    setGeneratedBy(callToSuper,source);\n    callToSuper.selector=\"toString\".toCharArray();\n    current=new BinaryExpression(current,callToSuper,PLUS);\n    setGeneratedBy(current,source);\n    first=false;\n  }\n  for (  EclipseNode field : fields) {\n    TypeReference fType=getFieldType(field,fieldAccess);\n    Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n    Expression ex;\n    if (fType.dimensions() > 0) {\n      MessageSend arrayToString=new MessageSend();\n      arrayToString.sourceStart=pS;\n      arrayToString.sourceEnd=pE;\n      arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n      arrayToString.arguments=new Expression[]{fieldAccessor};\n      setGeneratedBy(arrayToString.arguments[0],source);\n      if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n        arrayToString.selector=\"deepToString\".toCharArray();\n      }\n else {\n        arrayToString.selector=\"toString\".toCharArray();\n      }\n      ex=arrayToString;\n    }\n else {\n      ex=fieldAccessor;\n    }\n    setGeneratedBy(ex,source);\n    if (first) {\n      current=new BinaryExpression(current,ex,PLUS);\n      current.sourceStart=pS;\n      current.sourceEnd=pE;\n      setGeneratedBy(current,source);\n      first=false;\n      continue;\n    }\n    StringLiteral fieldNameLiteral;\n    if (includeFieldNames) {\n      char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n      fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n    }\n else {\n      fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n    }\n    setGeneratedBy(fieldNameLiteral,source);\n    current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n    setGeneratedBy(current,source);\n    current=new BinaryExpression(current,ex,PLUS);\n    setGeneratedBy(current,source);\n  }\n  if (!first) {\n    StringLiteral suffixLiteral=new StringLiteral(suffix,pS,pE,0);\n    setGeneratedBy(suffixLiteral,source);\n    current=new BinaryExpression(current,suffixLiteral,PLUS);\n    setGeneratedBy(current,source);\n  }\n  ReturnStatement returnStatement=new ReturnStatement(current,pS,pE);\n  setGeneratedBy(returnStatement,source);\n  MethodDeclaration method=new MethodDeclaration(((CompilationUnitDeclaration)type.top().get()).compilationResult);\n  setGeneratedBy(method,source);\n  method.modifiers=toEclipseModifier(AccessLevel.PUBLIC);\n  method.returnType=new QualifiedTypeReference(TypeConstants.JAVA_LANG_STRING,new long[]{p,p,p});\n  setGeneratedBy(method.returnType,source);\n  method.annotations=new Annotation[]{makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)};\n  method.arguments=null;\n  method.selector=\"toString\".toCharArray();\n  method.thrownExceptions=null;\n  method.typeParameters=null;\n  method.bits|=Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\n  method.bodyStart=method.declarationSourceStart=method.sourceStart=source.sourceStart;\n  method.bodyEnd=method.declarationSourceEnd=method.sourceEnd=source.sourceEnd;\n  method.statements=new Statement[]{returnStatement};\n  return method;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 720,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 262,
        "startColumnNumber" : 3,
        "endLineNumber" : 262,
        "endColumnNumber" : 35
      },
      "nodeContext" : "setGeneratedBy(current,source);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "lombok.eclipse.handlers.ASTNode"
  }, {
    "nodeContext" : "source",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 266,
      "startColumnNumber" : 34,
      "endLineNumber" : 266,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 266,
        "startColumnNumber" : 2,
        "endLineNumber" : 266,
        "endColumnNumber" : 41
      },
      "nodeContext" : "setGeneratedBy(returnStatement,source)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 266,
        "startColumnNumber" : 2,
        "endLineNumber" : 266,
        "endColumnNumber" : 42
      },
      "nodeContext" : "setGeneratedBy(returnStatement,source);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4152,
        "startLineNumber" : 178,
        "startColumnNumber" : 90,
        "endLineNumber" : 283,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String typeName=getTypeName(type);\n  char[] suffix=\")\".toCharArray();\n  String infixS=\", \";\n  char[] infix=infixS.toCharArray();\n  int pS=source.sourceStart, pE=source.sourceEnd;\n  long p=(long)pS << 32 | pE;\n  final int PLUS=OperatorIds.PLUS;\n  char[] prefix;\n  if (callSuper) {\n    prefix=(typeName + \"(super=\").toCharArray();\n  }\n else   if (fields.isEmpty()) {\n    prefix=(typeName + \"()\").toCharArray();\n  }\n else   if (includeFieldNames) {\n    prefix=(typeName + \"(\" + new String(((FieldDeclaration)fields.iterator().next().get()).name)+ \"=\").toCharArray();\n  }\n else {\n    prefix=(typeName + \"(\").toCharArray();\n  }\n  boolean first=true;\n  Expression current=new StringLiteral(prefix,pS,pE,0);\n  setGeneratedBy(current,source);\n  if (callSuper) {\n    MessageSend callToSuper=new MessageSend();\n    callToSuper.sourceStart=pS;\n    callToSuper.sourceEnd=pE;\n    setGeneratedBy(callToSuper,source);\n    callToSuper.receiver=new SuperReference(pS,pE);\n    setGeneratedBy(callToSuper,source);\n    callToSuper.selector=\"toString\".toCharArray();\n    current=new BinaryExpression(current,callToSuper,PLUS);\n    setGeneratedBy(current,source);\n    first=false;\n  }\n  for (  EclipseNode field : fields) {\n    TypeReference fType=getFieldType(field,fieldAccess);\n    Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n    Expression ex;\n    if (fType.dimensions() > 0) {\n      MessageSend arrayToString=new MessageSend();\n      arrayToString.sourceStart=pS;\n      arrayToString.sourceEnd=pE;\n      arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n      arrayToString.arguments=new Expression[]{fieldAccessor};\n      setGeneratedBy(arrayToString.arguments[0],source);\n      if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n        arrayToString.selector=\"deepToString\".toCharArray();\n      }\n else {\n        arrayToString.selector=\"toString\".toCharArray();\n      }\n      ex=arrayToString;\n    }\n else {\n      ex=fieldAccessor;\n    }\n    setGeneratedBy(ex,source);\n    if (first) {\n      current=new BinaryExpression(current,ex,PLUS);\n      current.sourceStart=pS;\n      current.sourceEnd=pE;\n      setGeneratedBy(current,source);\n      first=false;\n      continue;\n    }\n    StringLiteral fieldNameLiteral;\n    if (includeFieldNames) {\n      char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n      fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n    }\n else {\n      fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n    }\n    setGeneratedBy(fieldNameLiteral,source);\n    current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n    setGeneratedBy(current,source);\n    current=new BinaryExpression(current,ex,PLUS);\n    setGeneratedBy(current,source);\n  }\n  if (!first) {\n    StringLiteral suffixLiteral=new StringLiteral(suffix,pS,pE,0);\n    setGeneratedBy(suffixLiteral,source);\n    current=new BinaryExpression(current,suffixLiteral,PLUS);\n    setGeneratedBy(current,source);\n  }\n  ReturnStatement returnStatement=new ReturnStatement(current,pS,pE);\n  setGeneratedBy(returnStatement,source);\n  MethodDeclaration method=new MethodDeclaration(((CompilationUnitDeclaration)type.top().get()).compilationResult);\n  setGeneratedBy(method,source);\n  method.modifiers=toEclipseModifier(AccessLevel.PUBLIC);\n  method.returnType=new QualifiedTypeReference(TypeConstants.JAVA_LANG_STRING,new long[]{p,p,p});\n  setGeneratedBy(method.returnType,source);\n  method.annotations=new Annotation[]{makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)};\n  method.arguments=null;\n  method.selector=\"toString\".toCharArray();\n  method.thrownExceptions=null;\n  method.typeParameters=null;\n  method.bits|=Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\n  method.bodyStart=method.declarationSourceStart=method.sourceStart=source.sourceStart;\n  method.bodyEnd=method.declarationSourceEnd=method.sourceEnd=source.sourceEnd;\n  method.statements=new Statement[]{returnStatement};\n  return method;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 690,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4333,
        "startLineNumber" : 177,
        "startColumnNumber" : 1,
        "endLineNumber" : 283,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private MethodDeclaration createToString(EclipseNode type,Collection<EclipseNode> fields,boolean includeFieldNames,boolean callSuper,ASTNode source,FieldAccess fieldAccess){\n  String typeName=getTypeName(type);\n  char[] suffix=\")\".toCharArray();\n  String infixS=\", \";\n  char[] infix=infixS.toCharArray();\n  int pS=source.sourceStart, pE=source.sourceEnd;\n  long p=(long)pS << 32 | pE;\n  final int PLUS=OperatorIds.PLUS;\n  char[] prefix;\n  if (callSuper) {\n    prefix=(typeName + \"(super=\").toCharArray();\n  }\n else   if (fields.isEmpty()) {\n    prefix=(typeName + \"()\").toCharArray();\n  }\n else   if (includeFieldNames) {\n    prefix=(typeName + \"(\" + new String(((FieldDeclaration)fields.iterator().next().get()).name)+ \"=\").toCharArray();\n  }\n else {\n    prefix=(typeName + \"(\").toCharArray();\n  }\n  boolean first=true;\n  Expression current=new StringLiteral(prefix,pS,pE,0);\n  setGeneratedBy(current,source);\n  if (callSuper) {\n    MessageSend callToSuper=new MessageSend();\n    callToSuper.sourceStart=pS;\n    callToSuper.sourceEnd=pE;\n    setGeneratedBy(callToSuper,source);\n    callToSuper.receiver=new SuperReference(pS,pE);\n    setGeneratedBy(callToSuper,source);\n    callToSuper.selector=\"toString\".toCharArray();\n    current=new BinaryExpression(current,callToSuper,PLUS);\n    setGeneratedBy(current,source);\n    first=false;\n  }\n  for (  EclipseNode field : fields) {\n    TypeReference fType=getFieldType(field,fieldAccess);\n    Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n    Expression ex;\n    if (fType.dimensions() > 0) {\n      MessageSend arrayToString=new MessageSend();\n      arrayToString.sourceStart=pS;\n      arrayToString.sourceEnd=pE;\n      arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n      arrayToString.arguments=new Expression[]{fieldAccessor};\n      setGeneratedBy(arrayToString.arguments[0],source);\n      if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n        arrayToString.selector=\"deepToString\".toCharArray();\n      }\n else {\n        arrayToString.selector=\"toString\".toCharArray();\n      }\n      ex=arrayToString;\n    }\n else {\n      ex=fieldAccessor;\n    }\n    setGeneratedBy(ex,source);\n    if (first) {\n      current=new BinaryExpression(current,ex,PLUS);\n      current.sourceStart=pS;\n      current.sourceEnd=pE;\n      setGeneratedBy(current,source);\n      first=false;\n      continue;\n    }\n    StringLiteral fieldNameLiteral;\n    if (includeFieldNames) {\n      char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n      fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n    }\n else {\n      fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n    }\n    setGeneratedBy(fieldNameLiteral,source);\n    current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n    setGeneratedBy(current,source);\n    current=new BinaryExpression(current,ex,PLUS);\n    setGeneratedBy(current,source);\n  }\n  if (!first) {\n    StringLiteral suffixLiteral=new StringLiteral(suffix,pS,pE,0);\n    setGeneratedBy(suffixLiteral,source);\n    current=new BinaryExpression(current,suffixLiteral,PLUS);\n    setGeneratedBy(current,source);\n  }\n  ReturnStatement returnStatement=new ReturnStatement(current,pS,pE);\n  setGeneratedBy(returnStatement,source);\n  MethodDeclaration method=new MethodDeclaration(((CompilationUnitDeclaration)type.top().get()).compilationResult);\n  setGeneratedBy(method,source);\n  method.modifiers=toEclipseModifier(AccessLevel.PUBLIC);\n  method.returnType=new QualifiedTypeReference(TypeConstants.JAVA_LANG_STRING,new long[]{p,p,p});\n  setGeneratedBy(method.returnType,source);\n  method.annotations=new Annotation[]{makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)};\n  method.arguments=null;\n  method.selector=\"toString\".toCharArray();\n  method.thrownExceptions=null;\n  method.typeParameters=null;\n  method.bits|=Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\n  method.bodyStart=method.declarationSourceStart=method.sourceStart=source.sourceStart;\n  method.bodyEnd=method.declarationSourceEnd=method.sourceEnd=source.sourceEnd;\n  method.statements=new Statement[]{returnStatement};\n  return method;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 720,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 266,
        "startColumnNumber" : 2,
        "endLineNumber" : 266,
        "endColumnNumber" : 42
      },
      "nodeContext" : "setGeneratedBy(returnStatement,source);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "lombok.eclipse.handlers.ASTNode"
  }, {
    "nodeContext" : "source",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 269,
      "startColumnNumber" : 25,
      "endLineNumber" : 269,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 269,
        "startColumnNumber" : 2,
        "endLineNumber" : 269,
        "endColumnNumber" : 32
      },
      "nodeContext" : "setGeneratedBy(method,source)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 269,
        "startColumnNumber" : 2,
        "endLineNumber" : 269,
        "endColumnNumber" : 33
      },
      "nodeContext" : "setGeneratedBy(method,source);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4152,
        "startLineNumber" : 178,
        "startColumnNumber" : 90,
        "endLineNumber" : 283,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String typeName=getTypeName(type);\n  char[] suffix=\")\".toCharArray();\n  String infixS=\", \";\n  char[] infix=infixS.toCharArray();\n  int pS=source.sourceStart, pE=source.sourceEnd;\n  long p=(long)pS << 32 | pE;\n  final int PLUS=OperatorIds.PLUS;\n  char[] prefix;\n  if (callSuper) {\n    prefix=(typeName + \"(super=\").toCharArray();\n  }\n else   if (fields.isEmpty()) {\n    prefix=(typeName + \"()\").toCharArray();\n  }\n else   if (includeFieldNames) {\n    prefix=(typeName + \"(\" + new String(((FieldDeclaration)fields.iterator().next().get()).name)+ \"=\").toCharArray();\n  }\n else {\n    prefix=(typeName + \"(\").toCharArray();\n  }\n  boolean first=true;\n  Expression current=new StringLiteral(prefix,pS,pE,0);\n  setGeneratedBy(current,source);\n  if (callSuper) {\n    MessageSend callToSuper=new MessageSend();\n    callToSuper.sourceStart=pS;\n    callToSuper.sourceEnd=pE;\n    setGeneratedBy(callToSuper,source);\n    callToSuper.receiver=new SuperReference(pS,pE);\n    setGeneratedBy(callToSuper,source);\n    callToSuper.selector=\"toString\".toCharArray();\n    current=new BinaryExpression(current,callToSuper,PLUS);\n    setGeneratedBy(current,source);\n    first=false;\n  }\n  for (  EclipseNode field : fields) {\n    TypeReference fType=getFieldType(field,fieldAccess);\n    Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n    Expression ex;\n    if (fType.dimensions() > 0) {\n      MessageSend arrayToString=new MessageSend();\n      arrayToString.sourceStart=pS;\n      arrayToString.sourceEnd=pE;\n      arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n      arrayToString.arguments=new Expression[]{fieldAccessor};\n      setGeneratedBy(arrayToString.arguments[0],source);\n      if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n        arrayToString.selector=\"deepToString\".toCharArray();\n      }\n else {\n        arrayToString.selector=\"toString\".toCharArray();\n      }\n      ex=arrayToString;\n    }\n else {\n      ex=fieldAccessor;\n    }\n    setGeneratedBy(ex,source);\n    if (first) {\n      current=new BinaryExpression(current,ex,PLUS);\n      current.sourceStart=pS;\n      current.sourceEnd=pE;\n      setGeneratedBy(current,source);\n      first=false;\n      continue;\n    }\n    StringLiteral fieldNameLiteral;\n    if (includeFieldNames) {\n      char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n      fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n    }\n else {\n      fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n    }\n    setGeneratedBy(fieldNameLiteral,source);\n    current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n    setGeneratedBy(current,source);\n    current=new BinaryExpression(current,ex,PLUS);\n    setGeneratedBy(current,source);\n  }\n  if (!first) {\n    StringLiteral suffixLiteral=new StringLiteral(suffix,pS,pE,0);\n    setGeneratedBy(suffixLiteral,source);\n    current=new BinaryExpression(current,suffixLiteral,PLUS);\n    setGeneratedBy(current,source);\n  }\n  ReturnStatement returnStatement=new ReturnStatement(current,pS,pE);\n  setGeneratedBy(returnStatement,source);\n  MethodDeclaration method=new MethodDeclaration(((CompilationUnitDeclaration)type.top().get()).compilationResult);\n  setGeneratedBy(method,source);\n  method.modifiers=toEclipseModifier(AccessLevel.PUBLIC);\n  method.returnType=new QualifiedTypeReference(TypeConstants.JAVA_LANG_STRING,new long[]{p,p,p});\n  setGeneratedBy(method.returnType,source);\n  method.annotations=new Annotation[]{makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)};\n  method.arguments=null;\n  method.selector=\"toString\".toCharArray();\n  method.thrownExceptions=null;\n  method.typeParameters=null;\n  method.bits|=Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\n  method.bodyStart=method.declarationSourceStart=method.sourceStart=source.sourceStart;\n  method.bodyEnd=method.declarationSourceEnd=method.sourceEnd=source.sourceEnd;\n  method.statements=new Statement[]{returnStatement};\n  return method;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 690,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4333,
        "startLineNumber" : 177,
        "startColumnNumber" : 1,
        "endLineNumber" : 283,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private MethodDeclaration createToString(EclipseNode type,Collection<EclipseNode> fields,boolean includeFieldNames,boolean callSuper,ASTNode source,FieldAccess fieldAccess){\n  String typeName=getTypeName(type);\n  char[] suffix=\")\".toCharArray();\n  String infixS=\", \";\n  char[] infix=infixS.toCharArray();\n  int pS=source.sourceStart, pE=source.sourceEnd;\n  long p=(long)pS << 32 | pE;\n  final int PLUS=OperatorIds.PLUS;\n  char[] prefix;\n  if (callSuper) {\n    prefix=(typeName + \"(super=\").toCharArray();\n  }\n else   if (fields.isEmpty()) {\n    prefix=(typeName + \"()\").toCharArray();\n  }\n else   if (includeFieldNames) {\n    prefix=(typeName + \"(\" + new String(((FieldDeclaration)fields.iterator().next().get()).name)+ \"=\").toCharArray();\n  }\n else {\n    prefix=(typeName + \"(\").toCharArray();\n  }\n  boolean first=true;\n  Expression current=new StringLiteral(prefix,pS,pE,0);\n  setGeneratedBy(current,source);\n  if (callSuper) {\n    MessageSend callToSuper=new MessageSend();\n    callToSuper.sourceStart=pS;\n    callToSuper.sourceEnd=pE;\n    setGeneratedBy(callToSuper,source);\n    callToSuper.receiver=new SuperReference(pS,pE);\n    setGeneratedBy(callToSuper,source);\n    callToSuper.selector=\"toString\".toCharArray();\n    current=new BinaryExpression(current,callToSuper,PLUS);\n    setGeneratedBy(current,source);\n    first=false;\n  }\n  for (  EclipseNode field : fields) {\n    TypeReference fType=getFieldType(field,fieldAccess);\n    Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n    Expression ex;\n    if (fType.dimensions() > 0) {\n      MessageSend arrayToString=new MessageSend();\n      arrayToString.sourceStart=pS;\n      arrayToString.sourceEnd=pE;\n      arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n      arrayToString.arguments=new Expression[]{fieldAccessor};\n      setGeneratedBy(arrayToString.arguments[0],source);\n      if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n        arrayToString.selector=\"deepToString\".toCharArray();\n      }\n else {\n        arrayToString.selector=\"toString\".toCharArray();\n      }\n      ex=arrayToString;\n    }\n else {\n      ex=fieldAccessor;\n    }\n    setGeneratedBy(ex,source);\n    if (first) {\n      current=new BinaryExpression(current,ex,PLUS);\n      current.sourceStart=pS;\n      current.sourceEnd=pE;\n      setGeneratedBy(current,source);\n      first=false;\n      continue;\n    }\n    StringLiteral fieldNameLiteral;\n    if (includeFieldNames) {\n      char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n      fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n    }\n else {\n      fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n    }\n    setGeneratedBy(fieldNameLiteral,source);\n    current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n    setGeneratedBy(current,source);\n    current=new BinaryExpression(current,ex,PLUS);\n    setGeneratedBy(current,source);\n  }\n  if (!first) {\n    StringLiteral suffixLiteral=new StringLiteral(suffix,pS,pE,0);\n    setGeneratedBy(suffixLiteral,source);\n    current=new BinaryExpression(current,suffixLiteral,PLUS);\n    setGeneratedBy(current,source);\n  }\n  ReturnStatement returnStatement=new ReturnStatement(current,pS,pE);\n  setGeneratedBy(returnStatement,source);\n  MethodDeclaration method=new MethodDeclaration(((CompilationUnitDeclaration)type.top().get()).compilationResult);\n  setGeneratedBy(method,source);\n  method.modifiers=toEclipseModifier(AccessLevel.PUBLIC);\n  method.returnType=new QualifiedTypeReference(TypeConstants.JAVA_LANG_STRING,new long[]{p,p,p});\n  setGeneratedBy(method.returnType,source);\n  method.annotations=new Annotation[]{makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)};\n  method.arguments=null;\n  method.selector=\"toString\".toCharArray();\n  method.thrownExceptions=null;\n  method.typeParameters=null;\n  method.bits|=Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\n  method.bodyStart=method.declarationSourceStart=method.sourceStart=source.sourceStart;\n  method.bodyEnd=method.declarationSourceEnd=method.sourceEnd=source.sourceEnd;\n  method.statements=new Statement[]{returnStatement};\n  return method;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 720,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 269,
        "startColumnNumber" : 2,
        "endLineNumber" : 269,
        "endColumnNumber" : 33
      },
      "nodeContext" : "setGeneratedBy(method,source);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "lombok.eclipse.handlers.ASTNode"
  }, {
    "nodeContext" : "source",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 272,
      "startColumnNumber" : 36,
      "endLineNumber" : 272,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 272,
        "startColumnNumber" : 2,
        "endLineNumber" : 272,
        "endColumnNumber" : 43
      },
      "nodeContext" : "setGeneratedBy(method.returnType,source)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 272,
        "startColumnNumber" : 2,
        "endLineNumber" : 272,
        "endColumnNumber" : 44
      },
      "nodeContext" : "setGeneratedBy(method.returnType,source);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4152,
        "startLineNumber" : 178,
        "startColumnNumber" : 90,
        "endLineNumber" : 283,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String typeName=getTypeName(type);\n  char[] suffix=\")\".toCharArray();\n  String infixS=\", \";\n  char[] infix=infixS.toCharArray();\n  int pS=source.sourceStart, pE=source.sourceEnd;\n  long p=(long)pS << 32 | pE;\n  final int PLUS=OperatorIds.PLUS;\n  char[] prefix;\n  if (callSuper) {\n    prefix=(typeName + \"(super=\").toCharArray();\n  }\n else   if (fields.isEmpty()) {\n    prefix=(typeName + \"()\").toCharArray();\n  }\n else   if (includeFieldNames) {\n    prefix=(typeName + \"(\" + new String(((FieldDeclaration)fields.iterator().next().get()).name)+ \"=\").toCharArray();\n  }\n else {\n    prefix=(typeName + \"(\").toCharArray();\n  }\n  boolean first=true;\n  Expression current=new StringLiteral(prefix,pS,pE,0);\n  setGeneratedBy(current,source);\n  if (callSuper) {\n    MessageSend callToSuper=new MessageSend();\n    callToSuper.sourceStart=pS;\n    callToSuper.sourceEnd=pE;\n    setGeneratedBy(callToSuper,source);\n    callToSuper.receiver=new SuperReference(pS,pE);\n    setGeneratedBy(callToSuper,source);\n    callToSuper.selector=\"toString\".toCharArray();\n    current=new BinaryExpression(current,callToSuper,PLUS);\n    setGeneratedBy(current,source);\n    first=false;\n  }\n  for (  EclipseNode field : fields) {\n    TypeReference fType=getFieldType(field,fieldAccess);\n    Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n    Expression ex;\n    if (fType.dimensions() > 0) {\n      MessageSend arrayToString=new MessageSend();\n      arrayToString.sourceStart=pS;\n      arrayToString.sourceEnd=pE;\n      arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n      arrayToString.arguments=new Expression[]{fieldAccessor};\n      setGeneratedBy(arrayToString.arguments[0],source);\n      if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n        arrayToString.selector=\"deepToString\".toCharArray();\n      }\n else {\n        arrayToString.selector=\"toString\".toCharArray();\n      }\n      ex=arrayToString;\n    }\n else {\n      ex=fieldAccessor;\n    }\n    setGeneratedBy(ex,source);\n    if (first) {\n      current=new BinaryExpression(current,ex,PLUS);\n      current.sourceStart=pS;\n      current.sourceEnd=pE;\n      setGeneratedBy(current,source);\n      first=false;\n      continue;\n    }\n    StringLiteral fieldNameLiteral;\n    if (includeFieldNames) {\n      char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n      fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n    }\n else {\n      fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n    }\n    setGeneratedBy(fieldNameLiteral,source);\n    current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n    setGeneratedBy(current,source);\n    current=new BinaryExpression(current,ex,PLUS);\n    setGeneratedBy(current,source);\n  }\n  if (!first) {\n    StringLiteral suffixLiteral=new StringLiteral(suffix,pS,pE,0);\n    setGeneratedBy(suffixLiteral,source);\n    current=new BinaryExpression(current,suffixLiteral,PLUS);\n    setGeneratedBy(current,source);\n  }\n  ReturnStatement returnStatement=new ReturnStatement(current,pS,pE);\n  setGeneratedBy(returnStatement,source);\n  MethodDeclaration method=new MethodDeclaration(((CompilationUnitDeclaration)type.top().get()).compilationResult);\n  setGeneratedBy(method,source);\n  method.modifiers=toEclipseModifier(AccessLevel.PUBLIC);\n  method.returnType=new QualifiedTypeReference(TypeConstants.JAVA_LANG_STRING,new long[]{p,p,p});\n  setGeneratedBy(method.returnType,source);\n  method.annotations=new Annotation[]{makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)};\n  method.arguments=null;\n  method.selector=\"toString\".toCharArray();\n  method.thrownExceptions=null;\n  method.typeParameters=null;\n  method.bits|=Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\n  method.bodyStart=method.declarationSourceStart=method.sourceStart=source.sourceStart;\n  method.bodyEnd=method.declarationSourceEnd=method.sourceEnd=source.sourceEnd;\n  method.statements=new Statement[]{returnStatement};\n  return method;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 690,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4333,
        "startLineNumber" : 177,
        "startColumnNumber" : 1,
        "endLineNumber" : 283,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private MethodDeclaration createToString(EclipseNode type,Collection<EclipseNode> fields,boolean includeFieldNames,boolean callSuper,ASTNode source,FieldAccess fieldAccess){\n  String typeName=getTypeName(type);\n  char[] suffix=\")\".toCharArray();\n  String infixS=\", \";\n  char[] infix=infixS.toCharArray();\n  int pS=source.sourceStart, pE=source.sourceEnd;\n  long p=(long)pS << 32 | pE;\n  final int PLUS=OperatorIds.PLUS;\n  char[] prefix;\n  if (callSuper) {\n    prefix=(typeName + \"(super=\").toCharArray();\n  }\n else   if (fields.isEmpty()) {\n    prefix=(typeName + \"()\").toCharArray();\n  }\n else   if (includeFieldNames) {\n    prefix=(typeName + \"(\" + new String(((FieldDeclaration)fields.iterator().next().get()).name)+ \"=\").toCharArray();\n  }\n else {\n    prefix=(typeName + \"(\").toCharArray();\n  }\n  boolean first=true;\n  Expression current=new StringLiteral(prefix,pS,pE,0);\n  setGeneratedBy(current,source);\n  if (callSuper) {\n    MessageSend callToSuper=new MessageSend();\n    callToSuper.sourceStart=pS;\n    callToSuper.sourceEnd=pE;\n    setGeneratedBy(callToSuper,source);\n    callToSuper.receiver=new SuperReference(pS,pE);\n    setGeneratedBy(callToSuper,source);\n    callToSuper.selector=\"toString\".toCharArray();\n    current=new BinaryExpression(current,callToSuper,PLUS);\n    setGeneratedBy(current,source);\n    first=false;\n  }\n  for (  EclipseNode field : fields) {\n    TypeReference fType=getFieldType(field,fieldAccess);\n    Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n    Expression ex;\n    if (fType.dimensions() > 0) {\n      MessageSend arrayToString=new MessageSend();\n      arrayToString.sourceStart=pS;\n      arrayToString.sourceEnd=pE;\n      arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n      arrayToString.arguments=new Expression[]{fieldAccessor};\n      setGeneratedBy(arrayToString.arguments[0],source);\n      if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n        arrayToString.selector=\"deepToString\".toCharArray();\n      }\n else {\n        arrayToString.selector=\"toString\".toCharArray();\n      }\n      ex=arrayToString;\n    }\n else {\n      ex=fieldAccessor;\n    }\n    setGeneratedBy(ex,source);\n    if (first) {\n      current=new BinaryExpression(current,ex,PLUS);\n      current.sourceStart=pS;\n      current.sourceEnd=pE;\n      setGeneratedBy(current,source);\n      first=false;\n      continue;\n    }\n    StringLiteral fieldNameLiteral;\n    if (includeFieldNames) {\n      char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n      fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n    }\n else {\n      fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n    }\n    setGeneratedBy(fieldNameLiteral,source);\n    current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n    setGeneratedBy(current,source);\n    current=new BinaryExpression(current,ex,PLUS);\n    setGeneratedBy(current,source);\n  }\n  if (!first) {\n    StringLiteral suffixLiteral=new StringLiteral(suffix,pS,pE,0);\n    setGeneratedBy(suffixLiteral,source);\n    current=new BinaryExpression(current,suffixLiteral,PLUS);\n    setGeneratedBy(current,source);\n  }\n  ReturnStatement returnStatement=new ReturnStatement(current,pS,pE);\n  setGeneratedBy(returnStatement,source);\n  MethodDeclaration method=new MethodDeclaration(((CompilationUnitDeclaration)type.top().get()).compilationResult);\n  setGeneratedBy(method,source);\n  method.modifiers=toEclipseModifier(AccessLevel.PUBLIC);\n  method.returnType=new QualifiedTypeReference(TypeConstants.JAVA_LANG_STRING,new long[]{p,p,p});\n  setGeneratedBy(method.returnType,source);\n  method.annotations=new Annotation[]{makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)};\n  method.arguments=null;\n  method.selector=\"toString\".toCharArray();\n  method.thrownExceptions=null;\n  method.typeParameters=null;\n  method.bits|=Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\n  method.bodyStart=method.declarationSourceStart=method.sourceStart=source.sourceStart;\n  method.bodyEnd=method.declarationSourceEnd=method.sourceEnd=source.sourceEnd;\n  method.statements=new Statement[]{returnStatement};\n  return method;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 720,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 272,
        "startColumnNumber" : 2,
        "endLineNumber" : 272,
        "endColumnNumber" : 44
      },
      "nodeContext" : "setGeneratedBy(method.returnType,source);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "lombok.eclipse.handlers.ASTNode"
  }, {
    "nodeContext" : "source",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 273,
      "startColumnNumber" : 96,
      "endLineNumber" : 273,
      "endColumnNumber" : 102
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ArrayInitializer,expressions]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 273,
        "startColumnNumber" : 41,
        "endLineNumber" : 273,
        "endColumnNumber" : 103
      },
      "nodeContext" : "makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayCreation,initializer]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 273,
        "startColumnNumber" : 40,
        "endLineNumber" : 273,
        "endColumnNumber" : 104
      },
      "nodeContext" : "{makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)}",
      "nodeType" : "ArrayInitializer",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 273,
        "startColumnNumber" : 23,
        "endLineNumber" : 273,
        "endColumnNumber" : 104
      },
      "nodeContext" : "new Annotation[]{makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)}",
      "nodeType" : "ArrayCreation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 273,
        "startColumnNumber" : 2,
        "endLineNumber" : 273,
        "endColumnNumber" : 104
      },
      "nodeContext" : "method.annotations=new Annotation[]{makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)}",
      "nodeType" : "Assignment",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 273,
        "startColumnNumber" : 2,
        "endLineNumber" : 273,
        "endColumnNumber" : 105
      },
      "nodeContext" : "method.annotations=new Annotation[]{makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)};\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4152,
        "startLineNumber" : 178,
        "startColumnNumber" : 90,
        "endLineNumber" : 283,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String typeName=getTypeName(type);\n  char[] suffix=\")\".toCharArray();\n  String infixS=\", \";\n  char[] infix=infixS.toCharArray();\n  int pS=source.sourceStart, pE=source.sourceEnd;\n  long p=(long)pS << 32 | pE;\n  final int PLUS=OperatorIds.PLUS;\n  char[] prefix;\n  if (callSuper) {\n    prefix=(typeName + \"(super=\").toCharArray();\n  }\n else   if (fields.isEmpty()) {\n    prefix=(typeName + \"()\").toCharArray();\n  }\n else   if (includeFieldNames) {\n    prefix=(typeName + \"(\" + new String(((FieldDeclaration)fields.iterator().next().get()).name)+ \"=\").toCharArray();\n  }\n else {\n    prefix=(typeName + \"(\").toCharArray();\n  }\n  boolean first=true;\n  Expression current=new StringLiteral(prefix,pS,pE,0);\n  setGeneratedBy(current,source);\n  if (callSuper) {\n    MessageSend callToSuper=new MessageSend();\n    callToSuper.sourceStart=pS;\n    callToSuper.sourceEnd=pE;\n    setGeneratedBy(callToSuper,source);\n    callToSuper.receiver=new SuperReference(pS,pE);\n    setGeneratedBy(callToSuper,source);\n    callToSuper.selector=\"toString\".toCharArray();\n    current=new BinaryExpression(current,callToSuper,PLUS);\n    setGeneratedBy(current,source);\n    first=false;\n  }\n  for (  EclipseNode field : fields) {\n    TypeReference fType=getFieldType(field,fieldAccess);\n    Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n    Expression ex;\n    if (fType.dimensions() > 0) {\n      MessageSend arrayToString=new MessageSend();\n      arrayToString.sourceStart=pS;\n      arrayToString.sourceEnd=pE;\n      arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n      arrayToString.arguments=new Expression[]{fieldAccessor};\n      setGeneratedBy(arrayToString.arguments[0],source);\n      if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n        arrayToString.selector=\"deepToString\".toCharArray();\n      }\n else {\n        arrayToString.selector=\"toString\".toCharArray();\n      }\n      ex=arrayToString;\n    }\n else {\n      ex=fieldAccessor;\n    }\n    setGeneratedBy(ex,source);\n    if (first) {\n      current=new BinaryExpression(current,ex,PLUS);\n      current.sourceStart=pS;\n      current.sourceEnd=pE;\n      setGeneratedBy(current,source);\n      first=false;\n      continue;\n    }\n    StringLiteral fieldNameLiteral;\n    if (includeFieldNames) {\n      char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n      fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n    }\n else {\n      fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n    }\n    setGeneratedBy(fieldNameLiteral,source);\n    current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n    setGeneratedBy(current,source);\n    current=new BinaryExpression(current,ex,PLUS);\n    setGeneratedBy(current,source);\n  }\n  if (!first) {\n    StringLiteral suffixLiteral=new StringLiteral(suffix,pS,pE,0);\n    setGeneratedBy(suffixLiteral,source);\n    current=new BinaryExpression(current,suffixLiteral,PLUS);\n    setGeneratedBy(current,source);\n  }\n  ReturnStatement returnStatement=new ReturnStatement(current,pS,pE);\n  setGeneratedBy(returnStatement,source);\n  MethodDeclaration method=new MethodDeclaration(((CompilationUnitDeclaration)type.top().get()).compilationResult);\n  setGeneratedBy(method,source);\n  method.modifiers=toEclipseModifier(AccessLevel.PUBLIC);\n  method.returnType=new QualifiedTypeReference(TypeConstants.JAVA_LANG_STRING,new long[]{p,p,p});\n  setGeneratedBy(method.returnType,source);\n  method.annotations=new Annotation[]{makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)};\n  method.arguments=null;\n  method.selector=\"toString\".toCharArray();\n  method.thrownExceptions=null;\n  method.typeParameters=null;\n  method.bits|=Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\n  method.bodyStart=method.declarationSourceStart=method.sourceStart=source.sourceStart;\n  method.bodyEnd=method.declarationSourceEnd=method.sourceEnd=source.sourceEnd;\n  method.statements=new Statement[]{returnStatement};\n  return method;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 690,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4333,
        "startLineNumber" : 177,
        "startColumnNumber" : 1,
        "endLineNumber" : 283,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private MethodDeclaration createToString(EclipseNode type,Collection<EclipseNode> fields,boolean includeFieldNames,boolean callSuper,ASTNode source,FieldAccess fieldAccess){\n  String typeName=getTypeName(type);\n  char[] suffix=\")\".toCharArray();\n  String infixS=\", \";\n  char[] infix=infixS.toCharArray();\n  int pS=source.sourceStart, pE=source.sourceEnd;\n  long p=(long)pS << 32 | pE;\n  final int PLUS=OperatorIds.PLUS;\n  char[] prefix;\n  if (callSuper) {\n    prefix=(typeName + \"(super=\").toCharArray();\n  }\n else   if (fields.isEmpty()) {\n    prefix=(typeName + \"()\").toCharArray();\n  }\n else   if (includeFieldNames) {\n    prefix=(typeName + \"(\" + new String(((FieldDeclaration)fields.iterator().next().get()).name)+ \"=\").toCharArray();\n  }\n else {\n    prefix=(typeName + \"(\").toCharArray();\n  }\n  boolean first=true;\n  Expression current=new StringLiteral(prefix,pS,pE,0);\n  setGeneratedBy(current,source);\n  if (callSuper) {\n    MessageSend callToSuper=new MessageSend();\n    callToSuper.sourceStart=pS;\n    callToSuper.sourceEnd=pE;\n    setGeneratedBy(callToSuper,source);\n    callToSuper.receiver=new SuperReference(pS,pE);\n    setGeneratedBy(callToSuper,source);\n    callToSuper.selector=\"toString\".toCharArray();\n    current=new BinaryExpression(current,callToSuper,PLUS);\n    setGeneratedBy(current,source);\n    first=false;\n  }\n  for (  EclipseNode field : fields) {\n    TypeReference fType=getFieldType(field,fieldAccess);\n    Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n    Expression ex;\n    if (fType.dimensions() > 0) {\n      MessageSend arrayToString=new MessageSend();\n      arrayToString.sourceStart=pS;\n      arrayToString.sourceEnd=pE;\n      arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n      arrayToString.arguments=new Expression[]{fieldAccessor};\n      setGeneratedBy(arrayToString.arguments[0],source);\n      if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n        arrayToString.selector=\"deepToString\".toCharArray();\n      }\n else {\n        arrayToString.selector=\"toString\".toCharArray();\n      }\n      ex=arrayToString;\n    }\n else {\n      ex=fieldAccessor;\n    }\n    setGeneratedBy(ex,source);\n    if (first) {\n      current=new BinaryExpression(current,ex,PLUS);\n      current.sourceStart=pS;\n      current.sourceEnd=pE;\n      setGeneratedBy(current,source);\n      first=false;\n      continue;\n    }\n    StringLiteral fieldNameLiteral;\n    if (includeFieldNames) {\n      char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n      fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n    }\n else {\n      fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n    }\n    setGeneratedBy(fieldNameLiteral,source);\n    current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n    setGeneratedBy(current,source);\n    current=new BinaryExpression(current,ex,PLUS);\n    setGeneratedBy(current,source);\n  }\n  if (!first) {\n    StringLiteral suffixLiteral=new StringLiteral(suffix,pS,pE,0);\n    setGeneratedBy(suffixLiteral,source);\n    current=new BinaryExpression(current,suffixLiteral,PLUS);\n    setGeneratedBy(current,source);\n  }\n  ReturnStatement returnStatement=new ReturnStatement(current,pS,pE);\n  setGeneratedBy(returnStatement,source);\n  MethodDeclaration method=new MethodDeclaration(((CompilationUnitDeclaration)type.top().get()).compilationResult);\n  setGeneratedBy(method,source);\n  method.modifiers=toEclipseModifier(AccessLevel.PUBLIC);\n  method.returnType=new QualifiedTypeReference(TypeConstants.JAVA_LANG_STRING,new long[]{p,p,p});\n  setGeneratedBy(method.returnType,source);\n  method.annotations=new Annotation[]{makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)};\n  method.arguments=null;\n  method.selector=\"toString\".toCharArray();\n  method.thrownExceptions=null;\n  method.typeParameters=null;\n  method.bits|=Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\n  method.bodyStart=method.declarationSourceStart=method.sourceStart=source.sourceStart;\n  method.bodyEnd=method.declarationSourceEnd=method.sourceEnd=source.sourceEnd;\n  method.statements=new Statement[]{returnStatement};\n  return method;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 720,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 273,
        "startColumnNumber" : 2,
        "endLineNumber" : 273,
        "endColumnNumber" : 105
      },
      "nodeContext" : "method.annotations=new Annotation[]{makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)};\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "lombok.eclipse.handlers.ASTNode"
  }, {
    "nodeContext" : "source",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 279,
      "startColumnNumber" : 74,
      "endLineNumber" : 279,
      "endColumnNumber" : 80
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 279,
        "startColumnNumber" : 74,
        "endLineNumber" : 279,
        "endColumnNumber" : 92
      },
      "nodeContext" : "source.sourceStart",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 279,
        "startColumnNumber" : 53,
        "endLineNumber" : 279,
        "endColumnNumber" : 92
      },
      "nodeContext" : "method.sourceStart=source.sourceStart",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 279,
        "startColumnNumber" : 21,
        "endLineNumber" : 279,
        "endColumnNumber" : 92
      },
      "nodeContext" : "method.declarationSourceStart=method.sourceStart=source.sourceStart",
      "nodeType" : "Assignment",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 279,
        "startColumnNumber" : 2,
        "endLineNumber" : 279,
        "endColumnNumber" : 92
      },
      "nodeContext" : "method.bodyStart=method.declarationSourceStart=method.sourceStart=source.sourceStart",
      "nodeType" : "Assignment",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 279,
        "startColumnNumber" : 2,
        "endLineNumber" : 279,
        "endColumnNumber" : 93
      },
      "nodeContext" : "method.bodyStart=method.declarationSourceStart=method.sourceStart=source.sourceStart;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4152,
        "startLineNumber" : 178,
        "startColumnNumber" : 90,
        "endLineNumber" : 283,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String typeName=getTypeName(type);\n  char[] suffix=\")\".toCharArray();\n  String infixS=\", \";\n  char[] infix=infixS.toCharArray();\n  int pS=source.sourceStart, pE=source.sourceEnd;\n  long p=(long)pS << 32 | pE;\n  final int PLUS=OperatorIds.PLUS;\n  char[] prefix;\n  if (callSuper) {\n    prefix=(typeName + \"(super=\").toCharArray();\n  }\n else   if (fields.isEmpty()) {\n    prefix=(typeName + \"()\").toCharArray();\n  }\n else   if (includeFieldNames) {\n    prefix=(typeName + \"(\" + new String(((FieldDeclaration)fields.iterator().next().get()).name)+ \"=\").toCharArray();\n  }\n else {\n    prefix=(typeName + \"(\").toCharArray();\n  }\n  boolean first=true;\n  Expression current=new StringLiteral(prefix,pS,pE,0);\n  setGeneratedBy(current,source);\n  if (callSuper) {\n    MessageSend callToSuper=new MessageSend();\n    callToSuper.sourceStart=pS;\n    callToSuper.sourceEnd=pE;\n    setGeneratedBy(callToSuper,source);\n    callToSuper.receiver=new SuperReference(pS,pE);\n    setGeneratedBy(callToSuper,source);\n    callToSuper.selector=\"toString\".toCharArray();\n    current=new BinaryExpression(current,callToSuper,PLUS);\n    setGeneratedBy(current,source);\n    first=false;\n  }\n  for (  EclipseNode field : fields) {\n    TypeReference fType=getFieldType(field,fieldAccess);\n    Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n    Expression ex;\n    if (fType.dimensions() > 0) {\n      MessageSend arrayToString=new MessageSend();\n      arrayToString.sourceStart=pS;\n      arrayToString.sourceEnd=pE;\n      arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n      arrayToString.arguments=new Expression[]{fieldAccessor};\n      setGeneratedBy(arrayToString.arguments[0],source);\n      if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n        arrayToString.selector=\"deepToString\".toCharArray();\n      }\n else {\n        arrayToString.selector=\"toString\".toCharArray();\n      }\n      ex=arrayToString;\n    }\n else {\n      ex=fieldAccessor;\n    }\n    setGeneratedBy(ex,source);\n    if (first) {\n      current=new BinaryExpression(current,ex,PLUS);\n      current.sourceStart=pS;\n      current.sourceEnd=pE;\n      setGeneratedBy(current,source);\n      first=false;\n      continue;\n    }\n    StringLiteral fieldNameLiteral;\n    if (includeFieldNames) {\n      char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n      fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n    }\n else {\n      fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n    }\n    setGeneratedBy(fieldNameLiteral,source);\n    current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n    setGeneratedBy(current,source);\n    current=new BinaryExpression(current,ex,PLUS);\n    setGeneratedBy(current,source);\n  }\n  if (!first) {\n    StringLiteral suffixLiteral=new StringLiteral(suffix,pS,pE,0);\n    setGeneratedBy(suffixLiteral,source);\n    current=new BinaryExpression(current,suffixLiteral,PLUS);\n    setGeneratedBy(current,source);\n  }\n  ReturnStatement returnStatement=new ReturnStatement(current,pS,pE);\n  setGeneratedBy(returnStatement,source);\n  MethodDeclaration method=new MethodDeclaration(((CompilationUnitDeclaration)type.top().get()).compilationResult);\n  setGeneratedBy(method,source);\n  method.modifiers=toEclipseModifier(AccessLevel.PUBLIC);\n  method.returnType=new QualifiedTypeReference(TypeConstants.JAVA_LANG_STRING,new long[]{p,p,p});\n  setGeneratedBy(method.returnType,source);\n  method.annotations=new Annotation[]{makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)};\n  method.arguments=null;\n  method.selector=\"toString\".toCharArray();\n  method.thrownExceptions=null;\n  method.typeParameters=null;\n  method.bits|=Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\n  method.bodyStart=method.declarationSourceStart=method.sourceStart=source.sourceStart;\n  method.bodyEnd=method.declarationSourceEnd=method.sourceEnd=source.sourceEnd;\n  method.statements=new Statement[]{returnStatement};\n  return method;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 690,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4333,
        "startLineNumber" : 177,
        "startColumnNumber" : 1,
        "endLineNumber" : 283,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private MethodDeclaration createToString(EclipseNode type,Collection<EclipseNode> fields,boolean includeFieldNames,boolean callSuper,ASTNode source,FieldAccess fieldAccess){\n  String typeName=getTypeName(type);\n  char[] suffix=\")\".toCharArray();\n  String infixS=\", \";\n  char[] infix=infixS.toCharArray();\n  int pS=source.sourceStart, pE=source.sourceEnd;\n  long p=(long)pS << 32 | pE;\n  final int PLUS=OperatorIds.PLUS;\n  char[] prefix;\n  if (callSuper) {\n    prefix=(typeName + \"(super=\").toCharArray();\n  }\n else   if (fields.isEmpty()) {\n    prefix=(typeName + \"()\").toCharArray();\n  }\n else   if (includeFieldNames) {\n    prefix=(typeName + \"(\" + new String(((FieldDeclaration)fields.iterator().next().get()).name)+ \"=\").toCharArray();\n  }\n else {\n    prefix=(typeName + \"(\").toCharArray();\n  }\n  boolean first=true;\n  Expression current=new StringLiteral(prefix,pS,pE,0);\n  setGeneratedBy(current,source);\n  if (callSuper) {\n    MessageSend callToSuper=new MessageSend();\n    callToSuper.sourceStart=pS;\n    callToSuper.sourceEnd=pE;\n    setGeneratedBy(callToSuper,source);\n    callToSuper.receiver=new SuperReference(pS,pE);\n    setGeneratedBy(callToSuper,source);\n    callToSuper.selector=\"toString\".toCharArray();\n    current=new BinaryExpression(current,callToSuper,PLUS);\n    setGeneratedBy(current,source);\n    first=false;\n  }\n  for (  EclipseNode field : fields) {\n    TypeReference fType=getFieldType(field,fieldAccess);\n    Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n    Expression ex;\n    if (fType.dimensions() > 0) {\n      MessageSend arrayToString=new MessageSend();\n      arrayToString.sourceStart=pS;\n      arrayToString.sourceEnd=pE;\n      arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n      arrayToString.arguments=new Expression[]{fieldAccessor};\n      setGeneratedBy(arrayToString.arguments[0],source);\n      if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n        arrayToString.selector=\"deepToString\".toCharArray();\n      }\n else {\n        arrayToString.selector=\"toString\".toCharArray();\n      }\n      ex=arrayToString;\n    }\n else {\n      ex=fieldAccessor;\n    }\n    setGeneratedBy(ex,source);\n    if (first) {\n      current=new BinaryExpression(current,ex,PLUS);\n      current.sourceStart=pS;\n      current.sourceEnd=pE;\n      setGeneratedBy(current,source);\n      first=false;\n      continue;\n    }\n    StringLiteral fieldNameLiteral;\n    if (includeFieldNames) {\n      char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n      fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n    }\n else {\n      fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n    }\n    setGeneratedBy(fieldNameLiteral,source);\n    current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n    setGeneratedBy(current,source);\n    current=new BinaryExpression(current,ex,PLUS);\n    setGeneratedBy(current,source);\n  }\n  if (!first) {\n    StringLiteral suffixLiteral=new StringLiteral(suffix,pS,pE,0);\n    setGeneratedBy(suffixLiteral,source);\n    current=new BinaryExpression(current,suffixLiteral,PLUS);\n    setGeneratedBy(current,source);\n  }\n  ReturnStatement returnStatement=new ReturnStatement(current,pS,pE);\n  setGeneratedBy(returnStatement,source);\n  MethodDeclaration method=new MethodDeclaration(((CompilationUnitDeclaration)type.top().get()).compilationResult);\n  setGeneratedBy(method,source);\n  method.modifiers=toEclipseModifier(AccessLevel.PUBLIC);\n  method.returnType=new QualifiedTypeReference(TypeConstants.JAVA_LANG_STRING,new long[]{p,p,p});\n  setGeneratedBy(method.returnType,source);\n  method.annotations=new Annotation[]{makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)};\n  method.arguments=null;\n  method.selector=\"toString\".toCharArray();\n  method.thrownExceptions=null;\n  method.typeParameters=null;\n  method.bits|=Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\n  method.bodyStart=method.declarationSourceStart=method.sourceStart=source.sourceStart;\n  method.bodyEnd=method.declarationSourceEnd=method.sourceEnd=source.sourceEnd;\n  method.statements=new Statement[]{returnStatement};\n  return method;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 720,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 279,
        "startColumnNumber" : 2,
        "endLineNumber" : 279,
        "endColumnNumber" : 93
      },
      "nodeContext" : "method.bodyStart=method.declarationSourceStart=method.sourceStart=source.sourceStart;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "source",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 280,
      "startColumnNumber" : 68,
      "endLineNumber" : 280,
      "endColumnNumber" : 74
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 280,
        "startColumnNumber" : 68,
        "endLineNumber" : 280,
        "endColumnNumber" : 84
      },
      "nodeContext" : "source.sourceEnd",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 280,
        "startColumnNumber" : 49,
        "endLineNumber" : 280,
        "endColumnNumber" : 84
      },
      "nodeContext" : "method.sourceEnd=source.sourceEnd",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 280,
        "startColumnNumber" : 19,
        "endLineNumber" : 280,
        "endColumnNumber" : 84
      },
      "nodeContext" : "method.declarationSourceEnd=method.sourceEnd=source.sourceEnd",
      "nodeType" : "Assignment",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 280,
        "startColumnNumber" : 2,
        "endLineNumber" : 280,
        "endColumnNumber" : 84
      },
      "nodeContext" : "method.bodyEnd=method.declarationSourceEnd=method.sourceEnd=source.sourceEnd",
      "nodeType" : "Assignment",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 280,
        "startColumnNumber" : 2,
        "endLineNumber" : 280,
        "endColumnNumber" : 85
      },
      "nodeContext" : "method.bodyEnd=method.declarationSourceEnd=method.sourceEnd=source.sourceEnd;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4152,
        "startLineNumber" : 178,
        "startColumnNumber" : 90,
        "endLineNumber" : 283,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String typeName=getTypeName(type);\n  char[] suffix=\")\".toCharArray();\n  String infixS=\", \";\n  char[] infix=infixS.toCharArray();\n  int pS=source.sourceStart, pE=source.sourceEnd;\n  long p=(long)pS << 32 | pE;\n  final int PLUS=OperatorIds.PLUS;\n  char[] prefix;\n  if (callSuper) {\n    prefix=(typeName + \"(super=\").toCharArray();\n  }\n else   if (fields.isEmpty()) {\n    prefix=(typeName + \"()\").toCharArray();\n  }\n else   if (includeFieldNames) {\n    prefix=(typeName + \"(\" + new String(((FieldDeclaration)fields.iterator().next().get()).name)+ \"=\").toCharArray();\n  }\n else {\n    prefix=(typeName + \"(\").toCharArray();\n  }\n  boolean first=true;\n  Expression current=new StringLiteral(prefix,pS,pE,0);\n  setGeneratedBy(current,source);\n  if (callSuper) {\n    MessageSend callToSuper=new MessageSend();\n    callToSuper.sourceStart=pS;\n    callToSuper.sourceEnd=pE;\n    setGeneratedBy(callToSuper,source);\n    callToSuper.receiver=new SuperReference(pS,pE);\n    setGeneratedBy(callToSuper,source);\n    callToSuper.selector=\"toString\".toCharArray();\n    current=new BinaryExpression(current,callToSuper,PLUS);\n    setGeneratedBy(current,source);\n    first=false;\n  }\n  for (  EclipseNode field : fields) {\n    TypeReference fType=getFieldType(field,fieldAccess);\n    Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n    Expression ex;\n    if (fType.dimensions() > 0) {\n      MessageSend arrayToString=new MessageSend();\n      arrayToString.sourceStart=pS;\n      arrayToString.sourceEnd=pE;\n      arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n      arrayToString.arguments=new Expression[]{fieldAccessor};\n      setGeneratedBy(arrayToString.arguments[0],source);\n      if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n        arrayToString.selector=\"deepToString\".toCharArray();\n      }\n else {\n        arrayToString.selector=\"toString\".toCharArray();\n      }\n      ex=arrayToString;\n    }\n else {\n      ex=fieldAccessor;\n    }\n    setGeneratedBy(ex,source);\n    if (first) {\n      current=new BinaryExpression(current,ex,PLUS);\n      current.sourceStart=pS;\n      current.sourceEnd=pE;\n      setGeneratedBy(current,source);\n      first=false;\n      continue;\n    }\n    StringLiteral fieldNameLiteral;\n    if (includeFieldNames) {\n      char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n      fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n    }\n else {\n      fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n    }\n    setGeneratedBy(fieldNameLiteral,source);\n    current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n    setGeneratedBy(current,source);\n    current=new BinaryExpression(current,ex,PLUS);\n    setGeneratedBy(current,source);\n  }\n  if (!first) {\n    StringLiteral suffixLiteral=new StringLiteral(suffix,pS,pE,0);\n    setGeneratedBy(suffixLiteral,source);\n    current=new BinaryExpression(current,suffixLiteral,PLUS);\n    setGeneratedBy(current,source);\n  }\n  ReturnStatement returnStatement=new ReturnStatement(current,pS,pE);\n  setGeneratedBy(returnStatement,source);\n  MethodDeclaration method=new MethodDeclaration(((CompilationUnitDeclaration)type.top().get()).compilationResult);\n  setGeneratedBy(method,source);\n  method.modifiers=toEclipseModifier(AccessLevel.PUBLIC);\n  method.returnType=new QualifiedTypeReference(TypeConstants.JAVA_LANG_STRING,new long[]{p,p,p});\n  setGeneratedBy(method.returnType,source);\n  method.annotations=new Annotation[]{makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)};\n  method.arguments=null;\n  method.selector=\"toString\".toCharArray();\n  method.thrownExceptions=null;\n  method.typeParameters=null;\n  method.bits|=Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\n  method.bodyStart=method.declarationSourceStart=method.sourceStart=source.sourceStart;\n  method.bodyEnd=method.declarationSourceEnd=method.sourceEnd=source.sourceEnd;\n  method.statements=new Statement[]{returnStatement};\n  return method;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 690,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4333,
        "startLineNumber" : 177,
        "startColumnNumber" : 1,
        "endLineNumber" : 283,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private MethodDeclaration createToString(EclipseNode type,Collection<EclipseNode> fields,boolean includeFieldNames,boolean callSuper,ASTNode source,FieldAccess fieldAccess){\n  String typeName=getTypeName(type);\n  char[] suffix=\")\".toCharArray();\n  String infixS=\", \";\n  char[] infix=infixS.toCharArray();\n  int pS=source.sourceStart, pE=source.sourceEnd;\n  long p=(long)pS << 32 | pE;\n  final int PLUS=OperatorIds.PLUS;\n  char[] prefix;\n  if (callSuper) {\n    prefix=(typeName + \"(super=\").toCharArray();\n  }\n else   if (fields.isEmpty()) {\n    prefix=(typeName + \"()\").toCharArray();\n  }\n else   if (includeFieldNames) {\n    prefix=(typeName + \"(\" + new String(((FieldDeclaration)fields.iterator().next().get()).name)+ \"=\").toCharArray();\n  }\n else {\n    prefix=(typeName + \"(\").toCharArray();\n  }\n  boolean first=true;\n  Expression current=new StringLiteral(prefix,pS,pE,0);\n  setGeneratedBy(current,source);\n  if (callSuper) {\n    MessageSend callToSuper=new MessageSend();\n    callToSuper.sourceStart=pS;\n    callToSuper.sourceEnd=pE;\n    setGeneratedBy(callToSuper,source);\n    callToSuper.receiver=new SuperReference(pS,pE);\n    setGeneratedBy(callToSuper,source);\n    callToSuper.selector=\"toString\".toCharArray();\n    current=new BinaryExpression(current,callToSuper,PLUS);\n    setGeneratedBy(current,source);\n    first=false;\n  }\n  for (  EclipseNode field : fields) {\n    TypeReference fType=getFieldType(field,fieldAccess);\n    Expression fieldAccessor=createFieldAccessor(field,fieldAccess,source);\n    Expression ex;\n    if (fType.dimensions() > 0) {\n      MessageSend arrayToString=new MessageSend();\n      arrayToString.sourceStart=pS;\n      arrayToString.sourceEnd=pE;\n      arrayToString.receiver=generateQualifiedNameRef(source,TypeConstants.JAVA,TypeConstants.UTIL,\"Arrays\".toCharArray());\n      arrayToString.arguments=new Expression[]{fieldAccessor};\n      setGeneratedBy(arrayToString.arguments[0],source);\n      if (fType.dimensions() > 1 || !BUILT_IN_TYPES.contains(new String(fType.getLastToken()))) {\n        arrayToString.selector=\"deepToString\".toCharArray();\n      }\n else {\n        arrayToString.selector=\"toString\".toCharArray();\n      }\n      ex=arrayToString;\n    }\n else {\n      ex=fieldAccessor;\n    }\n    setGeneratedBy(ex,source);\n    if (first) {\n      current=new BinaryExpression(current,ex,PLUS);\n      current.sourceStart=pS;\n      current.sourceEnd=pE;\n      setGeneratedBy(current,source);\n      first=false;\n      continue;\n    }\n    StringLiteral fieldNameLiteral;\n    if (includeFieldNames) {\n      char[] namePlusEqualsSign=(infixS + field.getName() + \"=\").toCharArray();\n      fieldNameLiteral=new StringLiteral(namePlusEqualsSign,pS,pE,0);\n    }\n else {\n      fieldNameLiteral=new StringLiteral(infix,pS,pE,0);\n    }\n    setGeneratedBy(fieldNameLiteral,source);\n    current=new BinaryExpression(current,fieldNameLiteral,PLUS);\n    setGeneratedBy(current,source);\n    current=new BinaryExpression(current,ex,PLUS);\n    setGeneratedBy(current,source);\n  }\n  if (!first) {\n    StringLiteral suffixLiteral=new StringLiteral(suffix,pS,pE,0);\n    setGeneratedBy(suffixLiteral,source);\n    current=new BinaryExpression(current,suffixLiteral,PLUS);\n    setGeneratedBy(current,source);\n  }\n  ReturnStatement returnStatement=new ReturnStatement(current,pS,pE);\n  setGeneratedBy(returnStatement,source);\n  MethodDeclaration method=new MethodDeclaration(((CompilationUnitDeclaration)type.top().get()).compilationResult);\n  setGeneratedBy(method,source);\n  method.modifiers=toEclipseModifier(AccessLevel.PUBLIC);\n  method.returnType=new QualifiedTypeReference(TypeConstants.JAVA_LANG_STRING,new long[]{p,p,p});\n  setGeneratedBy(method.returnType,source);\n  method.annotations=new Annotation[]{makeMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,source)};\n  method.arguments=null;\n  method.selector=\"toString\".toCharArray();\n  method.thrownExceptions=null;\n  method.typeParameters=null;\n  method.bits|=Eclipse.ECLIPSE_DO_NOT_TOUCH_FLAG;\n  method.bodyStart=method.declarationSourceStart=method.sourceStart=source.sourceStart;\n  method.bodyEnd=method.declarationSourceEnd=method.sourceEnd=source.sourceEnd;\n  method.statements=new Statement[]{returnStatement};\n  return method;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 720,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 280,
        "startColumnNumber" : 2,
        "endLineNumber" : 280,
        "endColumnNumber" : 85
      },
      "nodeContext" : "method.bodyEnd=method.declarationSourceEnd=method.sourceEnd=source.sourceEnd;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 183,
    "startColumnNumber" : 11,
    "endLineNumber" : 183,
    "endColumnNumber" : 17
  }, {
    "charLength" : 6,
    "startLineNumber" : 183,
    "startColumnNumber" : 36,
    "endLineNumber" : 183,
    "endColumnNumber" : 42
  }, {
    "charLength" : 6,
    "startLineNumber" : 201,
    "startColumnNumber" : 26,
    "endLineNumber" : 201,
    "endColumnNumber" : 32
  }, {
    "charLength" : 6,
    "startLineNumber" : 206,
    "startColumnNumber" : 31,
    "endLineNumber" : 206,
    "endColumnNumber" : 37
  }, {
    "charLength" : 6,
    "startLineNumber" : 208,
    "startColumnNumber" : 31,
    "endLineNumber" : 208,
    "endColumnNumber" : 37
  }, {
    "charLength" : 6,
    "startLineNumber" : 211,
    "startColumnNumber" : 27,
    "endLineNumber" : 211,
    "endColumnNumber" : 33
  }, {
    "charLength" : 6,
    "startLineNumber" : 217,
    "startColumnNumber" : 70,
    "endLineNumber" : 217,
    "endColumnNumber" : 76
  }, {
    "charLength" : 6,
    "startLineNumber" : 223,
    "startColumnNumber" : 54,
    "endLineNumber" : 223,
    "endColumnNumber" : 60
  }, {
    "charLength" : 6,
    "startLineNumber" : 225,
    "startColumnNumber" : 47,
    "endLineNumber" : 225,
    "endColumnNumber" : 53
  }, {
    "charLength" : 6,
    "startLineNumber" : 235,
    "startColumnNumber" : 22,
    "endLineNumber" : 235,
    "endColumnNumber" : 28
  }, {
    "charLength" : 6,
    "startLineNumber" : 240,
    "startColumnNumber" : 28,
    "endLineNumber" : 240,
    "endColumnNumber" : 34
  }, {
    "charLength" : 6,
    "startLineNumber" : 252,
    "startColumnNumber" : 36,
    "endLineNumber" : 252,
    "endColumnNumber" : 42
  }, {
    "charLength" : 6,
    "startLineNumber" : 254,
    "startColumnNumber" : 27,
    "endLineNumber" : 254,
    "endColumnNumber" : 33
  }, {
    "charLength" : 6,
    "startLineNumber" : 256,
    "startColumnNumber" : 27,
    "endLineNumber" : 256,
    "endColumnNumber" : 33
  }, {
    "charLength" : 6,
    "startLineNumber" : 260,
    "startColumnNumber" : 33,
    "endLineNumber" : 260,
    "endColumnNumber" : 39
  }, {
    "charLength" : 6,
    "startLineNumber" : 262,
    "startColumnNumber" : 27,
    "endLineNumber" : 262,
    "endColumnNumber" : 33
  }, {
    "charLength" : 6,
    "startLineNumber" : 266,
    "startColumnNumber" : 34,
    "endLineNumber" : 266,
    "endColumnNumber" : 40
  }, {
    "charLength" : 6,
    "startLineNumber" : 269,
    "startColumnNumber" : 25,
    "endLineNumber" : 269,
    "endColumnNumber" : 31
  }, {
    "charLength" : 6,
    "startLineNumber" : 272,
    "startColumnNumber" : 36,
    "endLineNumber" : 272,
    "endColumnNumber" : 42
  }, {
    "charLength" : 6,
    "startLineNumber" : 273,
    "startColumnNumber" : 96,
    "endLineNumber" : 273,
    "endColumnNumber" : 102
  }, {
    "charLength" : 6,
    "startLineNumber" : 279,
    "startColumnNumber" : 74,
    "endLineNumber" : 279,
    "endColumnNumber" : 80
  }, {
    "charLength" : 6,
    "startLineNumber" : 280,
    "startColumnNumber" : 68,
    "endLineNumber" : 280,
    "endColumnNumber" : 74
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 9,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 20,
    "layout" : 5
  } ]
}