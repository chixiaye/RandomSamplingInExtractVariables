{
  "id" : 467,
  "expression" : "jmap",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/test/java/com/williamfiset/algorithms/datastructures/hashtable/HashTableQuadraticProbingTest.java",
  "occurrences" : 10,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "jmap",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 244,
      "startColumnNumber" : 6,
      "endLineNumber" : 244,
      "endColumnNumber" : 10
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 244,
        "startColumnNumber" : 6,
        "endLineNumber" : 244,
        "endColumnNumber" : 18
      },
      "nodeContext" : "jmap.clear()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 244,
        "startColumnNumber" : 6,
        "endLineNumber" : 244,
        "endColumnNumber" : 19
      },
      "nodeContext" : "jmap.clear();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 925,
        "startLineNumber" : 241,
        "startColumnNumber" : 45,
        "endLineNumber" : 272,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  map.clear();\n  jmap.clear();\n  assertEquals(jmap.size(),map.size());\n  map=new HashTableQuadraticProbing<>();\n  final double probability1=Math.random();\n  final double probability2=Math.random();\n  List<Integer> nums=genRandList(MAX_SIZE);\n  for (int i=0; i < MAX_SIZE; i++) {\n    double r=Math.random();\n    int key=nums.get(i);\n    int val=i;\n    if (r < probability1)     assertEquals(jmap.put(key,val),map.put(key,val));\n    assertEquals(jmap.get(key),map.get(key));\n    assertEquals(jmap.containsKey(key),map.containsKey(key));\n    assertEquals(jmap.size(),map.size());\n    if (r > probability2)     assertEquals(map.remove(key),jmap.remove(key));\n    assertEquals(jmap.get(key),map.get(key));\n    assertEquals(jmap.containsKey(key),map.containsKey(key));\n    assertEquals(jmap.size(),map.size());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 178,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 966,
        "startLineNumber" : 241,
        "startColumnNumber" : 4,
        "endLineNumber" : 272,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int loop=0; loop < LOOPS; loop++) {\n  map.clear();\n  jmap.clear();\n  assertEquals(jmap.size(),map.size());\n  map=new HashTableQuadraticProbing<>();\n  final double probability1=Math.random();\n  final double probability2=Math.random();\n  List<Integer> nums=genRandList(MAX_SIZE);\n  for (int i=0; i < MAX_SIZE; i++) {\n    double r=Math.random();\n    int key=nums.get(i);\n    int val=i;\n    if (r < probability1)     assertEquals(jmap.put(key,val),map.put(key,val));\n    assertEquals(jmap.get(key),map.get(key));\n    assertEquals(jmap.containsKey(key),map.containsKey(key));\n    assertEquals(jmap.size(),map.size());\n    if (r > probability2)     assertEquals(map.remove(key),jmap.remove(key));\n    assertEquals(jmap.get(key),map.get(key));\n    assertEquals(jmap.containsKey(key),map.containsKey(key));\n    assertEquals(jmap.size(),map.size());\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 189,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1032,
        "startLineNumber" : 237,
        "startColumnNumber" : 40,
        "endLineNumber" : 273,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  HashMap<Integer,Integer> jmap=new HashMap<>();\n  for (int loop=0; loop < LOOPS; loop++) {\n    map.clear();\n    jmap.clear();\n    assertEquals(jmap.size(),map.size());\n    map=new HashTableQuadraticProbing<>();\n    final double probability1=Math.random();\n    final double probability2=Math.random();\n    List<Integer> nums=genRandList(MAX_SIZE);\n    for (int i=0; i < MAX_SIZE; i++) {\n      double r=Math.random();\n      int key=nums.get(i);\n      int val=i;\n      if (r < probability1)       assertEquals(jmap.put(key,val),map.put(key,val));\n      assertEquals(jmap.get(key),map.get(key));\n      assertEquals(jmap.containsKey(key),map.containsKey(key));\n      assertEquals(jmap.size(),map.size());\n      if (r > probability2)       assertEquals(map.remove(key),jmap.remove(key));\n      assertEquals(jmap.get(key),map.get(key));\n      assertEquals(jmap.containsKey(key),map.containsKey(key));\n      assertEquals(jmap.size(),map.size());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1078,
        "startLineNumber" : 236,
        "startColumnNumber" : 2,
        "endLineNumber" : 273,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testRandomMapOperations(){\n  HashMap<Integer,Integer> jmap=new HashMap<>();\n  for (int loop=0; loop < LOOPS; loop++) {\n    map.clear();\n    jmap.clear();\n    assertEquals(jmap.size(),map.size());\n    map=new HashTableQuadraticProbing<>();\n    final double probability1=Math.random();\n    final double probability2=Math.random();\n    List<Integer> nums=genRandList(MAX_SIZE);\n    for (int i=0; i < MAX_SIZE; i++) {\n      double r=Math.random();\n      int key=nums.get(i);\n      int val=i;\n      if (r < probability1)       assertEquals(jmap.put(key,val),map.put(key,val));\n      assertEquals(jmap.get(key),map.get(key));\n      assertEquals(jmap.containsKey(key),map.containsKey(key));\n      assertEquals(jmap.size(),map.size());\n      if (r > probability2)       assertEquals(map.remove(key),jmap.remove(key));\n      assertEquals(jmap.get(key),map.get(key));\n      assertEquals(jmap.containsKey(key),map.containsKey(key));\n      assertEquals(jmap.size(),map.size());\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 210,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 244,
        "startColumnNumber" : 6,
        "endLineNumber" : 244,
        "endColumnNumber" : 19
      },
      "nodeContext" : "jmap.clear();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.HashMap<java.lang.Integer,java.lang.Integer>"
  }, {
    "nodeContext" : "jmap",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 245,
      "startColumnNumber" : 19,
      "endLineNumber" : 245,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 245,
        "startColumnNumber" : 19,
        "endLineNumber" : 245,
        "endColumnNumber" : 30
      },
      "nodeContext" : "jmap.size()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 245,
        "startColumnNumber" : 6,
        "endLineNumber" : 245,
        "endColumnNumber" : 43
      },
      "nodeContext" : "assertEquals(jmap.size(),map.size())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 245,
        "startColumnNumber" : 6,
        "endLineNumber" : 245,
        "endColumnNumber" : 44
      },
      "nodeContext" : "assertEquals(jmap.size(),map.size());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 925,
        "startLineNumber" : 241,
        "startColumnNumber" : 45,
        "endLineNumber" : 272,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  map.clear();\n  jmap.clear();\n  assertEquals(jmap.size(),map.size());\n  map=new HashTableQuadraticProbing<>();\n  final double probability1=Math.random();\n  final double probability2=Math.random();\n  List<Integer> nums=genRandList(MAX_SIZE);\n  for (int i=0; i < MAX_SIZE; i++) {\n    double r=Math.random();\n    int key=nums.get(i);\n    int val=i;\n    if (r < probability1)     assertEquals(jmap.put(key,val),map.put(key,val));\n    assertEquals(jmap.get(key),map.get(key));\n    assertEquals(jmap.containsKey(key),map.containsKey(key));\n    assertEquals(jmap.size(),map.size());\n    if (r > probability2)     assertEquals(map.remove(key),jmap.remove(key));\n    assertEquals(jmap.get(key),map.get(key));\n    assertEquals(jmap.containsKey(key),map.containsKey(key));\n    assertEquals(jmap.size(),map.size());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 178,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 966,
        "startLineNumber" : 241,
        "startColumnNumber" : 4,
        "endLineNumber" : 272,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int loop=0; loop < LOOPS; loop++) {\n  map.clear();\n  jmap.clear();\n  assertEquals(jmap.size(),map.size());\n  map=new HashTableQuadraticProbing<>();\n  final double probability1=Math.random();\n  final double probability2=Math.random();\n  List<Integer> nums=genRandList(MAX_SIZE);\n  for (int i=0; i < MAX_SIZE; i++) {\n    double r=Math.random();\n    int key=nums.get(i);\n    int val=i;\n    if (r < probability1)     assertEquals(jmap.put(key,val),map.put(key,val));\n    assertEquals(jmap.get(key),map.get(key));\n    assertEquals(jmap.containsKey(key),map.containsKey(key));\n    assertEquals(jmap.size(),map.size());\n    if (r > probability2)     assertEquals(map.remove(key),jmap.remove(key));\n    assertEquals(jmap.get(key),map.get(key));\n    assertEquals(jmap.containsKey(key),map.containsKey(key));\n    assertEquals(jmap.size(),map.size());\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 189,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1032,
        "startLineNumber" : 237,
        "startColumnNumber" : 40,
        "endLineNumber" : 273,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  HashMap<Integer,Integer> jmap=new HashMap<>();\n  for (int loop=0; loop < LOOPS; loop++) {\n    map.clear();\n    jmap.clear();\n    assertEquals(jmap.size(),map.size());\n    map=new HashTableQuadraticProbing<>();\n    final double probability1=Math.random();\n    final double probability2=Math.random();\n    List<Integer> nums=genRandList(MAX_SIZE);\n    for (int i=0; i < MAX_SIZE; i++) {\n      double r=Math.random();\n      int key=nums.get(i);\n      int val=i;\n      if (r < probability1)       assertEquals(jmap.put(key,val),map.put(key,val));\n      assertEquals(jmap.get(key),map.get(key));\n      assertEquals(jmap.containsKey(key),map.containsKey(key));\n      assertEquals(jmap.size(),map.size());\n      if (r > probability2)       assertEquals(map.remove(key),jmap.remove(key));\n      assertEquals(jmap.get(key),map.get(key));\n      assertEquals(jmap.containsKey(key),map.containsKey(key));\n      assertEquals(jmap.size(),map.size());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1078,
        "startLineNumber" : 236,
        "startColumnNumber" : 2,
        "endLineNumber" : 273,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testRandomMapOperations(){\n  HashMap<Integer,Integer> jmap=new HashMap<>();\n  for (int loop=0; loop < LOOPS; loop++) {\n    map.clear();\n    jmap.clear();\n    assertEquals(jmap.size(),map.size());\n    map=new HashTableQuadraticProbing<>();\n    final double probability1=Math.random();\n    final double probability2=Math.random();\n    List<Integer> nums=genRandList(MAX_SIZE);\n    for (int i=0; i < MAX_SIZE; i++) {\n      double r=Math.random();\n      int key=nums.get(i);\n      int val=i;\n      if (r < probability1)       assertEquals(jmap.put(key,val),map.put(key,val));\n      assertEquals(jmap.get(key),map.get(key));\n      assertEquals(jmap.containsKey(key),map.containsKey(key));\n      assertEquals(jmap.size(),map.size());\n      if (r > probability2)       assertEquals(map.remove(key),jmap.remove(key));\n      assertEquals(jmap.get(key),map.get(key));\n      assertEquals(jmap.containsKey(key),map.containsKey(key));\n      assertEquals(jmap.size(),map.size());\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 210,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 245,
        "startColumnNumber" : 6,
        "endLineNumber" : 245,
        "endColumnNumber" : 44
      },
      "nodeContext" : "assertEquals(jmap.size(),map.size());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.HashMap<java.lang.Integer,java.lang.Integer>"
  }, {
    "nodeContext" : "jmap",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 260,
      "startColumnNumber" : 43,
      "endLineNumber" : 260,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 260,
        "startColumnNumber" : 43,
        "endLineNumber" : 260,
        "endColumnNumber" : 61
      },
      "nodeContext" : "jmap.put(key,val)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 260,
        "startColumnNumber" : 30,
        "endLineNumber" : 260,
        "endColumnNumber" : 81
      },
      "nodeContext" : "assertEquals(jmap.put(key,val),map.put(key,val))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 260,
        "startColumnNumber" : 30,
        "endLineNumber" : 260,
        "endColumnNumber" : 82
      },
      "nodeContext" : "assertEquals(jmap.put(key,val),map.put(key,val));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 260,
        "startColumnNumber" : 8,
        "endLineNumber" : 260,
        "endColumnNumber" : 82
      },
      "nodeContext" : "if (r < probability1) assertEquals(jmap.put(key,val),map.put(key,val));\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 593,
        "startLineNumber" : 253,
        "startColumnNumber" : 41,
        "endLineNumber" : 271,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  double r=Math.random();\n  int key=nums.get(i);\n  int val=i;\n  if (r < probability1)   assertEquals(jmap.put(key,val),map.put(key,val));\n  assertEquals(jmap.get(key),map.get(key));\n  assertEquals(jmap.containsKey(key),map.containsKey(key));\n  assertEquals(jmap.size(),map.size());\n  if (r > probability2)   assertEquals(map.remove(key),jmap.remove(key));\n  assertEquals(jmap.get(key),map.get(key));\n  assertEquals(jmap.containsKey(key),map.containsKey(key));\n  assertEquals(jmap.size(),map.size());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 115,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 628,
        "startLineNumber" : 253,
        "startColumnNumber" : 6,
        "endLineNumber" : 271,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < MAX_SIZE; i++) {\n  double r=Math.random();\n  int key=nums.get(i);\n  int val=i;\n  if (r < probability1)   assertEquals(jmap.put(key,val),map.put(key,val));\n  assertEquals(jmap.get(key),map.get(key));\n  assertEquals(jmap.containsKey(key),map.containsKey(key));\n  assertEquals(jmap.size(),map.size());\n  if (r > probability2)   assertEquals(map.remove(key),jmap.remove(key));\n  assertEquals(jmap.get(key),map.get(key));\n  assertEquals(jmap.containsKey(key),map.containsKey(key));\n  assertEquals(jmap.size(),map.size());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 126,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 925,
        "startLineNumber" : 241,
        "startColumnNumber" : 45,
        "endLineNumber" : 272,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  map.clear();\n  jmap.clear();\n  assertEquals(jmap.size(),map.size());\n  map=new HashTableQuadraticProbing<>();\n  final double probability1=Math.random();\n  final double probability2=Math.random();\n  List<Integer> nums=genRandList(MAX_SIZE);\n  for (int i=0; i < MAX_SIZE; i++) {\n    double r=Math.random();\n    int key=nums.get(i);\n    int val=i;\n    if (r < probability1)     assertEquals(jmap.put(key,val),map.put(key,val));\n    assertEquals(jmap.get(key),map.get(key));\n    assertEquals(jmap.containsKey(key),map.containsKey(key));\n    assertEquals(jmap.size(),map.size());\n    if (r > probability2)     assertEquals(map.remove(key),jmap.remove(key));\n    assertEquals(jmap.get(key),map.get(key));\n    assertEquals(jmap.containsKey(key),map.containsKey(key));\n    assertEquals(jmap.size(),map.size());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 178,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 966,
        "startLineNumber" : 241,
        "startColumnNumber" : 4,
        "endLineNumber" : 272,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int loop=0; loop < LOOPS; loop++) {\n  map.clear();\n  jmap.clear();\n  assertEquals(jmap.size(),map.size());\n  map=new HashTableQuadraticProbing<>();\n  final double probability1=Math.random();\n  final double probability2=Math.random();\n  List<Integer> nums=genRandList(MAX_SIZE);\n  for (int i=0; i < MAX_SIZE; i++) {\n    double r=Math.random();\n    int key=nums.get(i);\n    int val=i;\n    if (r < probability1)     assertEquals(jmap.put(key,val),map.put(key,val));\n    assertEquals(jmap.get(key),map.get(key));\n    assertEquals(jmap.containsKey(key),map.containsKey(key));\n    assertEquals(jmap.size(),map.size());\n    if (r > probability2)     assertEquals(map.remove(key),jmap.remove(key));\n    assertEquals(jmap.get(key),map.get(key));\n    assertEquals(jmap.containsKey(key),map.containsKey(key));\n    assertEquals(jmap.size(),map.size());\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 189,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1032,
        "startLineNumber" : 237,
        "startColumnNumber" : 40,
        "endLineNumber" : 273,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  HashMap<Integer,Integer> jmap=new HashMap<>();\n  for (int loop=0; loop < LOOPS; loop++) {\n    map.clear();\n    jmap.clear();\n    assertEquals(jmap.size(),map.size());\n    map=new HashTableQuadraticProbing<>();\n    final double probability1=Math.random();\n    final double probability2=Math.random();\n    List<Integer> nums=genRandList(MAX_SIZE);\n    for (int i=0; i < MAX_SIZE; i++) {\n      double r=Math.random();\n      int key=nums.get(i);\n      int val=i;\n      if (r < probability1)       assertEquals(jmap.put(key,val),map.put(key,val));\n      assertEquals(jmap.get(key),map.get(key));\n      assertEquals(jmap.containsKey(key),map.containsKey(key));\n      assertEquals(jmap.size(),map.size());\n      if (r > probability2)       assertEquals(map.remove(key),jmap.remove(key));\n      assertEquals(jmap.get(key),map.get(key));\n      assertEquals(jmap.containsKey(key),map.containsKey(key));\n      assertEquals(jmap.size(),map.size());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1078,
        "startLineNumber" : 236,
        "startColumnNumber" : 2,
        "endLineNumber" : 273,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testRandomMapOperations(){\n  HashMap<Integer,Integer> jmap=new HashMap<>();\n  for (int loop=0; loop < LOOPS; loop++) {\n    map.clear();\n    jmap.clear();\n    assertEquals(jmap.size(),map.size());\n    map=new HashTableQuadraticProbing<>();\n    final double probability1=Math.random();\n    final double probability2=Math.random();\n    List<Integer> nums=genRandList(MAX_SIZE);\n    for (int i=0; i < MAX_SIZE; i++) {\n      double r=Math.random();\n      int key=nums.get(i);\n      int val=i;\n      if (r < probability1)       assertEquals(jmap.put(key,val),map.put(key,val));\n      assertEquals(jmap.get(key),map.get(key));\n      assertEquals(jmap.containsKey(key),map.containsKey(key));\n      assertEquals(jmap.size(),map.size());\n      if (r > probability2)       assertEquals(map.remove(key),jmap.remove(key));\n      assertEquals(jmap.get(key),map.get(key));\n      assertEquals(jmap.containsKey(key),map.containsKey(key));\n      assertEquals(jmap.size(),map.size());\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 210,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 260,
        "startColumnNumber" : 8,
        "endLineNumber" : 260,
        "endColumnNumber" : 82
      },
      "nodeContext" : "if (r < probability1) assertEquals(jmap.put(key,val),map.put(key,val));\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.HashMap<java.lang.Integer,java.lang.Integer>"
  }, {
    "nodeContext" : "jmap",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 262,
      "startColumnNumber" : 21,
      "endLineNumber" : 262,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 262,
        "startColumnNumber" : 21,
        "endLineNumber" : 262,
        "endColumnNumber" : 34
      },
      "nodeContext" : "jmap.get(key)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 262,
        "startColumnNumber" : 8,
        "endLineNumber" : 262,
        "endColumnNumber" : 49
      },
      "nodeContext" : "assertEquals(jmap.get(key),map.get(key))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 262,
        "startColumnNumber" : 8,
        "endLineNumber" : 262,
        "endColumnNumber" : 50
      },
      "nodeContext" : "assertEquals(jmap.get(key),map.get(key));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 593,
        "startLineNumber" : 253,
        "startColumnNumber" : 41,
        "endLineNumber" : 271,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  double r=Math.random();\n  int key=nums.get(i);\n  int val=i;\n  if (r < probability1)   assertEquals(jmap.put(key,val),map.put(key,val));\n  assertEquals(jmap.get(key),map.get(key));\n  assertEquals(jmap.containsKey(key),map.containsKey(key));\n  assertEquals(jmap.size(),map.size());\n  if (r > probability2)   assertEquals(map.remove(key),jmap.remove(key));\n  assertEquals(jmap.get(key),map.get(key));\n  assertEquals(jmap.containsKey(key),map.containsKey(key));\n  assertEquals(jmap.size(),map.size());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 115,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 628,
        "startLineNumber" : 253,
        "startColumnNumber" : 6,
        "endLineNumber" : 271,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < MAX_SIZE; i++) {\n  double r=Math.random();\n  int key=nums.get(i);\n  int val=i;\n  if (r < probability1)   assertEquals(jmap.put(key,val),map.put(key,val));\n  assertEquals(jmap.get(key),map.get(key));\n  assertEquals(jmap.containsKey(key),map.containsKey(key));\n  assertEquals(jmap.size(),map.size());\n  if (r > probability2)   assertEquals(map.remove(key),jmap.remove(key));\n  assertEquals(jmap.get(key),map.get(key));\n  assertEquals(jmap.containsKey(key),map.containsKey(key));\n  assertEquals(jmap.size(),map.size());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 126,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 925,
        "startLineNumber" : 241,
        "startColumnNumber" : 45,
        "endLineNumber" : 272,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  map.clear();\n  jmap.clear();\n  assertEquals(jmap.size(),map.size());\n  map=new HashTableQuadraticProbing<>();\n  final double probability1=Math.random();\n  final double probability2=Math.random();\n  List<Integer> nums=genRandList(MAX_SIZE);\n  for (int i=0; i < MAX_SIZE; i++) {\n    double r=Math.random();\n    int key=nums.get(i);\n    int val=i;\n    if (r < probability1)     assertEquals(jmap.put(key,val),map.put(key,val));\n    assertEquals(jmap.get(key),map.get(key));\n    assertEquals(jmap.containsKey(key),map.containsKey(key));\n    assertEquals(jmap.size(),map.size());\n    if (r > probability2)     assertEquals(map.remove(key),jmap.remove(key));\n    assertEquals(jmap.get(key),map.get(key));\n    assertEquals(jmap.containsKey(key),map.containsKey(key));\n    assertEquals(jmap.size(),map.size());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 178,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 966,
        "startLineNumber" : 241,
        "startColumnNumber" : 4,
        "endLineNumber" : 272,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int loop=0; loop < LOOPS; loop++) {\n  map.clear();\n  jmap.clear();\n  assertEquals(jmap.size(),map.size());\n  map=new HashTableQuadraticProbing<>();\n  final double probability1=Math.random();\n  final double probability2=Math.random();\n  List<Integer> nums=genRandList(MAX_SIZE);\n  for (int i=0; i < MAX_SIZE; i++) {\n    double r=Math.random();\n    int key=nums.get(i);\n    int val=i;\n    if (r < probability1)     assertEquals(jmap.put(key,val),map.put(key,val));\n    assertEquals(jmap.get(key),map.get(key));\n    assertEquals(jmap.containsKey(key),map.containsKey(key));\n    assertEquals(jmap.size(),map.size());\n    if (r > probability2)     assertEquals(map.remove(key),jmap.remove(key));\n    assertEquals(jmap.get(key),map.get(key));\n    assertEquals(jmap.containsKey(key),map.containsKey(key));\n    assertEquals(jmap.size(),map.size());\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 189,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1032,
        "startLineNumber" : 237,
        "startColumnNumber" : 40,
        "endLineNumber" : 273,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  HashMap<Integer,Integer> jmap=new HashMap<>();\n  for (int loop=0; loop < LOOPS; loop++) {\n    map.clear();\n    jmap.clear();\n    assertEquals(jmap.size(),map.size());\n    map=new HashTableQuadraticProbing<>();\n    final double probability1=Math.random();\n    final double probability2=Math.random();\n    List<Integer> nums=genRandList(MAX_SIZE);\n    for (int i=0; i < MAX_SIZE; i++) {\n      double r=Math.random();\n      int key=nums.get(i);\n      int val=i;\n      if (r < probability1)       assertEquals(jmap.put(key,val),map.put(key,val));\n      assertEquals(jmap.get(key),map.get(key));\n      assertEquals(jmap.containsKey(key),map.containsKey(key));\n      assertEquals(jmap.size(),map.size());\n      if (r > probability2)       assertEquals(map.remove(key),jmap.remove(key));\n      assertEquals(jmap.get(key),map.get(key));\n      assertEquals(jmap.containsKey(key),map.containsKey(key));\n      assertEquals(jmap.size(),map.size());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1078,
        "startLineNumber" : 236,
        "startColumnNumber" : 2,
        "endLineNumber" : 273,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testRandomMapOperations(){\n  HashMap<Integer,Integer> jmap=new HashMap<>();\n  for (int loop=0; loop < LOOPS; loop++) {\n    map.clear();\n    jmap.clear();\n    assertEquals(jmap.size(),map.size());\n    map=new HashTableQuadraticProbing<>();\n    final double probability1=Math.random();\n    final double probability2=Math.random();\n    List<Integer> nums=genRandList(MAX_SIZE);\n    for (int i=0; i < MAX_SIZE; i++) {\n      double r=Math.random();\n      int key=nums.get(i);\n      int val=i;\n      if (r < probability1)       assertEquals(jmap.put(key,val),map.put(key,val));\n      assertEquals(jmap.get(key),map.get(key));\n      assertEquals(jmap.containsKey(key),map.containsKey(key));\n      assertEquals(jmap.size(),map.size());\n      if (r > probability2)       assertEquals(map.remove(key),jmap.remove(key));\n      assertEquals(jmap.get(key),map.get(key));\n      assertEquals(jmap.containsKey(key),map.containsKey(key));\n      assertEquals(jmap.size(),map.size());\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 210,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 262,
        "startColumnNumber" : 8,
        "endLineNumber" : 262,
        "endColumnNumber" : 50
      },
      "nodeContext" : "assertEquals(jmap.get(key),map.get(key));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.HashMap<java.lang.Integer,java.lang.Integer>"
  }, {
    "nodeContext" : "jmap",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 263,
      "startColumnNumber" : 21,
      "endLineNumber" : 263,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 263,
        "startColumnNumber" : 21,
        "endLineNumber" : 263,
        "endColumnNumber" : 42
      },
      "nodeContext" : "jmap.containsKey(key)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 263,
        "startColumnNumber" : 8,
        "endLineNumber" : 263,
        "endColumnNumber" : 65
      },
      "nodeContext" : "assertEquals(jmap.containsKey(key),map.containsKey(key))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 263,
        "startColumnNumber" : 8,
        "endLineNumber" : 263,
        "endColumnNumber" : 66
      },
      "nodeContext" : "assertEquals(jmap.containsKey(key),map.containsKey(key));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 593,
        "startLineNumber" : 253,
        "startColumnNumber" : 41,
        "endLineNumber" : 271,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  double r=Math.random();\n  int key=nums.get(i);\n  int val=i;\n  if (r < probability1)   assertEquals(jmap.put(key,val),map.put(key,val));\n  assertEquals(jmap.get(key),map.get(key));\n  assertEquals(jmap.containsKey(key),map.containsKey(key));\n  assertEquals(jmap.size(),map.size());\n  if (r > probability2)   assertEquals(map.remove(key),jmap.remove(key));\n  assertEquals(jmap.get(key),map.get(key));\n  assertEquals(jmap.containsKey(key),map.containsKey(key));\n  assertEquals(jmap.size(),map.size());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 115,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 628,
        "startLineNumber" : 253,
        "startColumnNumber" : 6,
        "endLineNumber" : 271,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < MAX_SIZE; i++) {\n  double r=Math.random();\n  int key=nums.get(i);\n  int val=i;\n  if (r < probability1)   assertEquals(jmap.put(key,val),map.put(key,val));\n  assertEquals(jmap.get(key),map.get(key));\n  assertEquals(jmap.containsKey(key),map.containsKey(key));\n  assertEquals(jmap.size(),map.size());\n  if (r > probability2)   assertEquals(map.remove(key),jmap.remove(key));\n  assertEquals(jmap.get(key),map.get(key));\n  assertEquals(jmap.containsKey(key),map.containsKey(key));\n  assertEquals(jmap.size(),map.size());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 126,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 925,
        "startLineNumber" : 241,
        "startColumnNumber" : 45,
        "endLineNumber" : 272,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  map.clear();\n  jmap.clear();\n  assertEquals(jmap.size(),map.size());\n  map=new HashTableQuadraticProbing<>();\n  final double probability1=Math.random();\n  final double probability2=Math.random();\n  List<Integer> nums=genRandList(MAX_SIZE);\n  for (int i=0; i < MAX_SIZE; i++) {\n    double r=Math.random();\n    int key=nums.get(i);\n    int val=i;\n    if (r < probability1)     assertEquals(jmap.put(key,val),map.put(key,val));\n    assertEquals(jmap.get(key),map.get(key));\n    assertEquals(jmap.containsKey(key),map.containsKey(key));\n    assertEquals(jmap.size(),map.size());\n    if (r > probability2)     assertEquals(map.remove(key),jmap.remove(key));\n    assertEquals(jmap.get(key),map.get(key));\n    assertEquals(jmap.containsKey(key),map.containsKey(key));\n    assertEquals(jmap.size(),map.size());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 178,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 966,
        "startLineNumber" : 241,
        "startColumnNumber" : 4,
        "endLineNumber" : 272,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int loop=0; loop < LOOPS; loop++) {\n  map.clear();\n  jmap.clear();\n  assertEquals(jmap.size(),map.size());\n  map=new HashTableQuadraticProbing<>();\n  final double probability1=Math.random();\n  final double probability2=Math.random();\n  List<Integer> nums=genRandList(MAX_SIZE);\n  for (int i=0; i < MAX_SIZE; i++) {\n    double r=Math.random();\n    int key=nums.get(i);\n    int val=i;\n    if (r < probability1)     assertEquals(jmap.put(key,val),map.put(key,val));\n    assertEquals(jmap.get(key),map.get(key));\n    assertEquals(jmap.containsKey(key),map.containsKey(key));\n    assertEquals(jmap.size(),map.size());\n    if (r > probability2)     assertEquals(map.remove(key),jmap.remove(key));\n    assertEquals(jmap.get(key),map.get(key));\n    assertEquals(jmap.containsKey(key),map.containsKey(key));\n    assertEquals(jmap.size(),map.size());\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 189,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1032,
        "startLineNumber" : 237,
        "startColumnNumber" : 40,
        "endLineNumber" : 273,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  HashMap<Integer,Integer> jmap=new HashMap<>();\n  for (int loop=0; loop < LOOPS; loop++) {\n    map.clear();\n    jmap.clear();\n    assertEquals(jmap.size(),map.size());\n    map=new HashTableQuadraticProbing<>();\n    final double probability1=Math.random();\n    final double probability2=Math.random();\n    List<Integer> nums=genRandList(MAX_SIZE);\n    for (int i=0; i < MAX_SIZE; i++) {\n      double r=Math.random();\n      int key=nums.get(i);\n      int val=i;\n      if (r < probability1)       assertEquals(jmap.put(key,val),map.put(key,val));\n      assertEquals(jmap.get(key),map.get(key));\n      assertEquals(jmap.containsKey(key),map.containsKey(key));\n      assertEquals(jmap.size(),map.size());\n      if (r > probability2)       assertEquals(map.remove(key),jmap.remove(key));\n      assertEquals(jmap.get(key),map.get(key));\n      assertEquals(jmap.containsKey(key),map.containsKey(key));\n      assertEquals(jmap.size(),map.size());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1078,
        "startLineNumber" : 236,
        "startColumnNumber" : 2,
        "endLineNumber" : 273,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testRandomMapOperations(){\n  HashMap<Integer,Integer> jmap=new HashMap<>();\n  for (int loop=0; loop < LOOPS; loop++) {\n    map.clear();\n    jmap.clear();\n    assertEquals(jmap.size(),map.size());\n    map=new HashTableQuadraticProbing<>();\n    final double probability1=Math.random();\n    final double probability2=Math.random();\n    List<Integer> nums=genRandList(MAX_SIZE);\n    for (int i=0; i < MAX_SIZE; i++) {\n      double r=Math.random();\n      int key=nums.get(i);\n      int val=i;\n      if (r < probability1)       assertEquals(jmap.put(key,val),map.put(key,val));\n      assertEquals(jmap.get(key),map.get(key));\n      assertEquals(jmap.containsKey(key),map.containsKey(key));\n      assertEquals(jmap.size(),map.size());\n      if (r > probability2)       assertEquals(map.remove(key),jmap.remove(key));\n      assertEquals(jmap.get(key),map.get(key));\n      assertEquals(jmap.containsKey(key),map.containsKey(key));\n      assertEquals(jmap.size(),map.size());\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 210,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 263,
        "startColumnNumber" : 8,
        "endLineNumber" : 263,
        "endColumnNumber" : 66
      },
      "nodeContext" : "assertEquals(jmap.containsKey(key),map.containsKey(key));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.HashMap<java.lang.Integer,java.lang.Integer>"
  }, {
    "nodeContext" : "jmap",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 264,
      "startColumnNumber" : 21,
      "endLineNumber" : 264,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 264,
        "startColumnNumber" : 21,
        "endLineNumber" : 264,
        "endColumnNumber" : 32
      },
      "nodeContext" : "jmap.size()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 264,
        "startColumnNumber" : 8,
        "endLineNumber" : 264,
        "endColumnNumber" : 45
      },
      "nodeContext" : "assertEquals(jmap.size(),map.size())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 264,
        "startColumnNumber" : 8,
        "endLineNumber" : 264,
        "endColumnNumber" : 46
      },
      "nodeContext" : "assertEquals(jmap.size(),map.size());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 593,
        "startLineNumber" : 253,
        "startColumnNumber" : 41,
        "endLineNumber" : 271,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  double r=Math.random();\n  int key=nums.get(i);\n  int val=i;\n  if (r < probability1)   assertEquals(jmap.put(key,val),map.put(key,val));\n  assertEquals(jmap.get(key),map.get(key));\n  assertEquals(jmap.containsKey(key),map.containsKey(key));\n  assertEquals(jmap.size(),map.size());\n  if (r > probability2)   assertEquals(map.remove(key),jmap.remove(key));\n  assertEquals(jmap.get(key),map.get(key));\n  assertEquals(jmap.containsKey(key),map.containsKey(key));\n  assertEquals(jmap.size(),map.size());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 115,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 628,
        "startLineNumber" : 253,
        "startColumnNumber" : 6,
        "endLineNumber" : 271,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < MAX_SIZE; i++) {\n  double r=Math.random();\n  int key=nums.get(i);\n  int val=i;\n  if (r < probability1)   assertEquals(jmap.put(key,val),map.put(key,val));\n  assertEquals(jmap.get(key),map.get(key));\n  assertEquals(jmap.containsKey(key),map.containsKey(key));\n  assertEquals(jmap.size(),map.size());\n  if (r > probability2)   assertEquals(map.remove(key),jmap.remove(key));\n  assertEquals(jmap.get(key),map.get(key));\n  assertEquals(jmap.containsKey(key),map.containsKey(key));\n  assertEquals(jmap.size(),map.size());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 126,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 925,
        "startLineNumber" : 241,
        "startColumnNumber" : 45,
        "endLineNumber" : 272,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  map.clear();\n  jmap.clear();\n  assertEquals(jmap.size(),map.size());\n  map=new HashTableQuadraticProbing<>();\n  final double probability1=Math.random();\n  final double probability2=Math.random();\n  List<Integer> nums=genRandList(MAX_SIZE);\n  for (int i=0; i < MAX_SIZE; i++) {\n    double r=Math.random();\n    int key=nums.get(i);\n    int val=i;\n    if (r < probability1)     assertEquals(jmap.put(key,val),map.put(key,val));\n    assertEquals(jmap.get(key),map.get(key));\n    assertEquals(jmap.containsKey(key),map.containsKey(key));\n    assertEquals(jmap.size(),map.size());\n    if (r > probability2)     assertEquals(map.remove(key),jmap.remove(key));\n    assertEquals(jmap.get(key),map.get(key));\n    assertEquals(jmap.containsKey(key),map.containsKey(key));\n    assertEquals(jmap.size(),map.size());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 178,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 966,
        "startLineNumber" : 241,
        "startColumnNumber" : 4,
        "endLineNumber" : 272,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int loop=0; loop < LOOPS; loop++) {\n  map.clear();\n  jmap.clear();\n  assertEquals(jmap.size(),map.size());\n  map=new HashTableQuadraticProbing<>();\n  final double probability1=Math.random();\n  final double probability2=Math.random();\n  List<Integer> nums=genRandList(MAX_SIZE);\n  for (int i=0; i < MAX_SIZE; i++) {\n    double r=Math.random();\n    int key=nums.get(i);\n    int val=i;\n    if (r < probability1)     assertEquals(jmap.put(key,val),map.put(key,val));\n    assertEquals(jmap.get(key),map.get(key));\n    assertEquals(jmap.containsKey(key),map.containsKey(key));\n    assertEquals(jmap.size(),map.size());\n    if (r > probability2)     assertEquals(map.remove(key),jmap.remove(key));\n    assertEquals(jmap.get(key),map.get(key));\n    assertEquals(jmap.containsKey(key),map.containsKey(key));\n    assertEquals(jmap.size(),map.size());\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 189,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1032,
        "startLineNumber" : 237,
        "startColumnNumber" : 40,
        "endLineNumber" : 273,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  HashMap<Integer,Integer> jmap=new HashMap<>();\n  for (int loop=0; loop < LOOPS; loop++) {\n    map.clear();\n    jmap.clear();\n    assertEquals(jmap.size(),map.size());\n    map=new HashTableQuadraticProbing<>();\n    final double probability1=Math.random();\n    final double probability2=Math.random();\n    List<Integer> nums=genRandList(MAX_SIZE);\n    for (int i=0; i < MAX_SIZE; i++) {\n      double r=Math.random();\n      int key=nums.get(i);\n      int val=i;\n      if (r < probability1)       assertEquals(jmap.put(key,val),map.put(key,val));\n      assertEquals(jmap.get(key),map.get(key));\n      assertEquals(jmap.containsKey(key),map.containsKey(key));\n      assertEquals(jmap.size(),map.size());\n      if (r > probability2)       assertEquals(map.remove(key),jmap.remove(key));\n      assertEquals(jmap.get(key),map.get(key));\n      assertEquals(jmap.containsKey(key),map.containsKey(key));\n      assertEquals(jmap.size(),map.size());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1078,
        "startLineNumber" : 236,
        "startColumnNumber" : 2,
        "endLineNumber" : 273,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testRandomMapOperations(){\n  HashMap<Integer,Integer> jmap=new HashMap<>();\n  for (int loop=0; loop < LOOPS; loop++) {\n    map.clear();\n    jmap.clear();\n    assertEquals(jmap.size(),map.size());\n    map=new HashTableQuadraticProbing<>();\n    final double probability1=Math.random();\n    final double probability2=Math.random();\n    List<Integer> nums=genRandList(MAX_SIZE);\n    for (int i=0; i < MAX_SIZE; i++) {\n      double r=Math.random();\n      int key=nums.get(i);\n      int val=i;\n      if (r < probability1)       assertEquals(jmap.put(key,val),map.put(key,val));\n      assertEquals(jmap.get(key),map.get(key));\n      assertEquals(jmap.containsKey(key),map.containsKey(key));\n      assertEquals(jmap.size(),map.size());\n      if (r > probability2)       assertEquals(map.remove(key),jmap.remove(key));\n      assertEquals(jmap.get(key),map.get(key));\n      assertEquals(jmap.containsKey(key),map.containsKey(key));\n      assertEquals(jmap.size(),map.size());\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 210,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 264,
        "startColumnNumber" : 8,
        "endLineNumber" : 264,
        "endColumnNumber" : 46
      },
      "nodeContext" : "assertEquals(jmap.size(),map.size());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.HashMap<java.lang.Integer,java.lang.Integer>"
  }, {
    "nodeContext" : "jmap",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 266,
      "startColumnNumber" : 60,
      "endLineNumber" : 266,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 266,
        "startColumnNumber" : 60,
        "endLineNumber" : 266,
        "endColumnNumber" : 76
      },
      "nodeContext" : "jmap.remove(key)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 266,
        "startColumnNumber" : 30,
        "endLineNumber" : 266,
        "endColumnNumber" : 77
      },
      "nodeContext" : "assertEquals(map.remove(key),jmap.remove(key))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 266,
        "startColumnNumber" : 30,
        "endLineNumber" : 266,
        "endColumnNumber" : 78
      },
      "nodeContext" : "assertEquals(map.remove(key),jmap.remove(key));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 266,
        "startColumnNumber" : 8,
        "endLineNumber" : 266,
        "endColumnNumber" : 78
      },
      "nodeContext" : "if (r > probability2) assertEquals(map.remove(key),jmap.remove(key));\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 593,
        "startLineNumber" : 253,
        "startColumnNumber" : 41,
        "endLineNumber" : 271,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  double r=Math.random();\n  int key=nums.get(i);\n  int val=i;\n  if (r < probability1)   assertEquals(jmap.put(key,val),map.put(key,val));\n  assertEquals(jmap.get(key),map.get(key));\n  assertEquals(jmap.containsKey(key),map.containsKey(key));\n  assertEquals(jmap.size(),map.size());\n  if (r > probability2)   assertEquals(map.remove(key),jmap.remove(key));\n  assertEquals(jmap.get(key),map.get(key));\n  assertEquals(jmap.containsKey(key),map.containsKey(key));\n  assertEquals(jmap.size(),map.size());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 115,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 628,
        "startLineNumber" : 253,
        "startColumnNumber" : 6,
        "endLineNumber" : 271,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < MAX_SIZE; i++) {\n  double r=Math.random();\n  int key=nums.get(i);\n  int val=i;\n  if (r < probability1)   assertEquals(jmap.put(key,val),map.put(key,val));\n  assertEquals(jmap.get(key),map.get(key));\n  assertEquals(jmap.containsKey(key),map.containsKey(key));\n  assertEquals(jmap.size(),map.size());\n  if (r > probability2)   assertEquals(map.remove(key),jmap.remove(key));\n  assertEquals(jmap.get(key),map.get(key));\n  assertEquals(jmap.containsKey(key),map.containsKey(key));\n  assertEquals(jmap.size(),map.size());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 126,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 925,
        "startLineNumber" : 241,
        "startColumnNumber" : 45,
        "endLineNumber" : 272,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  map.clear();\n  jmap.clear();\n  assertEquals(jmap.size(),map.size());\n  map=new HashTableQuadraticProbing<>();\n  final double probability1=Math.random();\n  final double probability2=Math.random();\n  List<Integer> nums=genRandList(MAX_SIZE);\n  for (int i=0; i < MAX_SIZE; i++) {\n    double r=Math.random();\n    int key=nums.get(i);\n    int val=i;\n    if (r < probability1)     assertEquals(jmap.put(key,val),map.put(key,val));\n    assertEquals(jmap.get(key),map.get(key));\n    assertEquals(jmap.containsKey(key),map.containsKey(key));\n    assertEquals(jmap.size(),map.size());\n    if (r > probability2)     assertEquals(map.remove(key),jmap.remove(key));\n    assertEquals(jmap.get(key),map.get(key));\n    assertEquals(jmap.containsKey(key),map.containsKey(key));\n    assertEquals(jmap.size(),map.size());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 178,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 966,
        "startLineNumber" : 241,
        "startColumnNumber" : 4,
        "endLineNumber" : 272,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int loop=0; loop < LOOPS; loop++) {\n  map.clear();\n  jmap.clear();\n  assertEquals(jmap.size(),map.size());\n  map=new HashTableQuadraticProbing<>();\n  final double probability1=Math.random();\n  final double probability2=Math.random();\n  List<Integer> nums=genRandList(MAX_SIZE);\n  for (int i=0; i < MAX_SIZE; i++) {\n    double r=Math.random();\n    int key=nums.get(i);\n    int val=i;\n    if (r < probability1)     assertEquals(jmap.put(key,val),map.put(key,val));\n    assertEquals(jmap.get(key),map.get(key));\n    assertEquals(jmap.containsKey(key),map.containsKey(key));\n    assertEquals(jmap.size(),map.size());\n    if (r > probability2)     assertEquals(map.remove(key),jmap.remove(key));\n    assertEquals(jmap.get(key),map.get(key));\n    assertEquals(jmap.containsKey(key),map.containsKey(key));\n    assertEquals(jmap.size(),map.size());\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 189,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1032,
        "startLineNumber" : 237,
        "startColumnNumber" : 40,
        "endLineNumber" : 273,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  HashMap<Integer,Integer> jmap=new HashMap<>();\n  for (int loop=0; loop < LOOPS; loop++) {\n    map.clear();\n    jmap.clear();\n    assertEquals(jmap.size(),map.size());\n    map=new HashTableQuadraticProbing<>();\n    final double probability1=Math.random();\n    final double probability2=Math.random();\n    List<Integer> nums=genRandList(MAX_SIZE);\n    for (int i=0; i < MAX_SIZE; i++) {\n      double r=Math.random();\n      int key=nums.get(i);\n      int val=i;\n      if (r < probability1)       assertEquals(jmap.put(key,val),map.put(key,val));\n      assertEquals(jmap.get(key),map.get(key));\n      assertEquals(jmap.containsKey(key),map.containsKey(key));\n      assertEquals(jmap.size(),map.size());\n      if (r > probability2)       assertEquals(map.remove(key),jmap.remove(key));\n      assertEquals(jmap.get(key),map.get(key));\n      assertEquals(jmap.containsKey(key),map.containsKey(key));\n      assertEquals(jmap.size(),map.size());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1078,
        "startLineNumber" : 236,
        "startColumnNumber" : 2,
        "endLineNumber" : 273,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testRandomMapOperations(){\n  HashMap<Integer,Integer> jmap=new HashMap<>();\n  for (int loop=0; loop < LOOPS; loop++) {\n    map.clear();\n    jmap.clear();\n    assertEquals(jmap.size(),map.size());\n    map=new HashTableQuadraticProbing<>();\n    final double probability1=Math.random();\n    final double probability2=Math.random();\n    List<Integer> nums=genRandList(MAX_SIZE);\n    for (int i=0; i < MAX_SIZE; i++) {\n      double r=Math.random();\n      int key=nums.get(i);\n      int val=i;\n      if (r < probability1)       assertEquals(jmap.put(key,val),map.put(key,val));\n      assertEquals(jmap.get(key),map.get(key));\n      assertEquals(jmap.containsKey(key),map.containsKey(key));\n      assertEquals(jmap.size(),map.size());\n      if (r > probability2)       assertEquals(map.remove(key),jmap.remove(key));\n      assertEquals(jmap.get(key),map.get(key));\n      assertEquals(jmap.containsKey(key),map.containsKey(key));\n      assertEquals(jmap.size(),map.size());\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 210,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 266,
        "startColumnNumber" : 8,
        "endLineNumber" : 266,
        "endColumnNumber" : 78
      },
      "nodeContext" : "if (r > probability2) assertEquals(map.remove(key),jmap.remove(key));\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.HashMap<java.lang.Integer,java.lang.Integer>"
  }, {
    "nodeContext" : "jmap",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 268,
      "startColumnNumber" : 21,
      "endLineNumber" : 268,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 268,
        "startColumnNumber" : 21,
        "endLineNumber" : 268,
        "endColumnNumber" : 34
      },
      "nodeContext" : "jmap.get(key)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 268,
        "startColumnNumber" : 8,
        "endLineNumber" : 268,
        "endColumnNumber" : 49
      },
      "nodeContext" : "assertEquals(jmap.get(key),map.get(key))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 268,
        "startColumnNumber" : 8,
        "endLineNumber" : 268,
        "endColumnNumber" : 50
      },
      "nodeContext" : "assertEquals(jmap.get(key),map.get(key));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 593,
        "startLineNumber" : 253,
        "startColumnNumber" : 41,
        "endLineNumber" : 271,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  double r=Math.random();\n  int key=nums.get(i);\n  int val=i;\n  if (r < probability1)   assertEquals(jmap.put(key,val),map.put(key,val));\n  assertEquals(jmap.get(key),map.get(key));\n  assertEquals(jmap.containsKey(key),map.containsKey(key));\n  assertEquals(jmap.size(),map.size());\n  if (r > probability2)   assertEquals(map.remove(key),jmap.remove(key));\n  assertEquals(jmap.get(key),map.get(key));\n  assertEquals(jmap.containsKey(key),map.containsKey(key));\n  assertEquals(jmap.size(),map.size());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 115,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 628,
        "startLineNumber" : 253,
        "startColumnNumber" : 6,
        "endLineNumber" : 271,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < MAX_SIZE; i++) {\n  double r=Math.random();\n  int key=nums.get(i);\n  int val=i;\n  if (r < probability1)   assertEquals(jmap.put(key,val),map.put(key,val));\n  assertEquals(jmap.get(key),map.get(key));\n  assertEquals(jmap.containsKey(key),map.containsKey(key));\n  assertEquals(jmap.size(),map.size());\n  if (r > probability2)   assertEquals(map.remove(key),jmap.remove(key));\n  assertEquals(jmap.get(key),map.get(key));\n  assertEquals(jmap.containsKey(key),map.containsKey(key));\n  assertEquals(jmap.size(),map.size());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 126,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 925,
        "startLineNumber" : 241,
        "startColumnNumber" : 45,
        "endLineNumber" : 272,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  map.clear();\n  jmap.clear();\n  assertEquals(jmap.size(),map.size());\n  map=new HashTableQuadraticProbing<>();\n  final double probability1=Math.random();\n  final double probability2=Math.random();\n  List<Integer> nums=genRandList(MAX_SIZE);\n  for (int i=0; i < MAX_SIZE; i++) {\n    double r=Math.random();\n    int key=nums.get(i);\n    int val=i;\n    if (r < probability1)     assertEquals(jmap.put(key,val),map.put(key,val));\n    assertEquals(jmap.get(key),map.get(key));\n    assertEquals(jmap.containsKey(key),map.containsKey(key));\n    assertEquals(jmap.size(),map.size());\n    if (r > probability2)     assertEquals(map.remove(key),jmap.remove(key));\n    assertEquals(jmap.get(key),map.get(key));\n    assertEquals(jmap.containsKey(key),map.containsKey(key));\n    assertEquals(jmap.size(),map.size());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 178,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 966,
        "startLineNumber" : 241,
        "startColumnNumber" : 4,
        "endLineNumber" : 272,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int loop=0; loop < LOOPS; loop++) {\n  map.clear();\n  jmap.clear();\n  assertEquals(jmap.size(),map.size());\n  map=new HashTableQuadraticProbing<>();\n  final double probability1=Math.random();\n  final double probability2=Math.random();\n  List<Integer> nums=genRandList(MAX_SIZE);\n  for (int i=0; i < MAX_SIZE; i++) {\n    double r=Math.random();\n    int key=nums.get(i);\n    int val=i;\n    if (r < probability1)     assertEquals(jmap.put(key,val),map.put(key,val));\n    assertEquals(jmap.get(key),map.get(key));\n    assertEquals(jmap.containsKey(key),map.containsKey(key));\n    assertEquals(jmap.size(),map.size());\n    if (r > probability2)     assertEquals(map.remove(key),jmap.remove(key));\n    assertEquals(jmap.get(key),map.get(key));\n    assertEquals(jmap.containsKey(key),map.containsKey(key));\n    assertEquals(jmap.size(),map.size());\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 189,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1032,
        "startLineNumber" : 237,
        "startColumnNumber" : 40,
        "endLineNumber" : 273,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  HashMap<Integer,Integer> jmap=new HashMap<>();\n  for (int loop=0; loop < LOOPS; loop++) {\n    map.clear();\n    jmap.clear();\n    assertEquals(jmap.size(),map.size());\n    map=new HashTableQuadraticProbing<>();\n    final double probability1=Math.random();\n    final double probability2=Math.random();\n    List<Integer> nums=genRandList(MAX_SIZE);\n    for (int i=0; i < MAX_SIZE; i++) {\n      double r=Math.random();\n      int key=nums.get(i);\n      int val=i;\n      if (r < probability1)       assertEquals(jmap.put(key,val),map.put(key,val));\n      assertEquals(jmap.get(key),map.get(key));\n      assertEquals(jmap.containsKey(key),map.containsKey(key));\n      assertEquals(jmap.size(),map.size());\n      if (r > probability2)       assertEquals(map.remove(key),jmap.remove(key));\n      assertEquals(jmap.get(key),map.get(key));\n      assertEquals(jmap.containsKey(key),map.containsKey(key));\n      assertEquals(jmap.size(),map.size());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1078,
        "startLineNumber" : 236,
        "startColumnNumber" : 2,
        "endLineNumber" : 273,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testRandomMapOperations(){\n  HashMap<Integer,Integer> jmap=new HashMap<>();\n  for (int loop=0; loop < LOOPS; loop++) {\n    map.clear();\n    jmap.clear();\n    assertEquals(jmap.size(),map.size());\n    map=new HashTableQuadraticProbing<>();\n    final double probability1=Math.random();\n    final double probability2=Math.random();\n    List<Integer> nums=genRandList(MAX_SIZE);\n    for (int i=0; i < MAX_SIZE; i++) {\n      double r=Math.random();\n      int key=nums.get(i);\n      int val=i;\n      if (r < probability1)       assertEquals(jmap.put(key,val),map.put(key,val));\n      assertEquals(jmap.get(key),map.get(key));\n      assertEquals(jmap.containsKey(key),map.containsKey(key));\n      assertEquals(jmap.size(),map.size());\n      if (r > probability2)       assertEquals(map.remove(key),jmap.remove(key));\n      assertEquals(jmap.get(key),map.get(key));\n      assertEquals(jmap.containsKey(key),map.containsKey(key));\n      assertEquals(jmap.size(),map.size());\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 210,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 268,
        "startColumnNumber" : 8,
        "endLineNumber" : 268,
        "endColumnNumber" : 50
      },
      "nodeContext" : "assertEquals(jmap.get(key),map.get(key));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.HashMap<java.lang.Integer,java.lang.Integer>"
  }, {
    "nodeContext" : "jmap",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 269,
      "startColumnNumber" : 21,
      "endLineNumber" : 269,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 269,
        "startColumnNumber" : 21,
        "endLineNumber" : 269,
        "endColumnNumber" : 42
      },
      "nodeContext" : "jmap.containsKey(key)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 269,
        "startColumnNumber" : 8,
        "endLineNumber" : 269,
        "endColumnNumber" : 65
      },
      "nodeContext" : "assertEquals(jmap.containsKey(key),map.containsKey(key))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 269,
        "startColumnNumber" : 8,
        "endLineNumber" : 269,
        "endColumnNumber" : 66
      },
      "nodeContext" : "assertEquals(jmap.containsKey(key),map.containsKey(key));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 593,
        "startLineNumber" : 253,
        "startColumnNumber" : 41,
        "endLineNumber" : 271,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  double r=Math.random();\n  int key=nums.get(i);\n  int val=i;\n  if (r < probability1)   assertEquals(jmap.put(key,val),map.put(key,val));\n  assertEquals(jmap.get(key),map.get(key));\n  assertEquals(jmap.containsKey(key),map.containsKey(key));\n  assertEquals(jmap.size(),map.size());\n  if (r > probability2)   assertEquals(map.remove(key),jmap.remove(key));\n  assertEquals(jmap.get(key),map.get(key));\n  assertEquals(jmap.containsKey(key),map.containsKey(key));\n  assertEquals(jmap.size(),map.size());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 115,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 628,
        "startLineNumber" : 253,
        "startColumnNumber" : 6,
        "endLineNumber" : 271,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < MAX_SIZE; i++) {\n  double r=Math.random();\n  int key=nums.get(i);\n  int val=i;\n  if (r < probability1)   assertEquals(jmap.put(key,val),map.put(key,val));\n  assertEquals(jmap.get(key),map.get(key));\n  assertEquals(jmap.containsKey(key),map.containsKey(key));\n  assertEquals(jmap.size(),map.size());\n  if (r > probability2)   assertEquals(map.remove(key),jmap.remove(key));\n  assertEquals(jmap.get(key),map.get(key));\n  assertEquals(jmap.containsKey(key),map.containsKey(key));\n  assertEquals(jmap.size(),map.size());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 126,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 925,
        "startLineNumber" : 241,
        "startColumnNumber" : 45,
        "endLineNumber" : 272,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  map.clear();\n  jmap.clear();\n  assertEquals(jmap.size(),map.size());\n  map=new HashTableQuadraticProbing<>();\n  final double probability1=Math.random();\n  final double probability2=Math.random();\n  List<Integer> nums=genRandList(MAX_SIZE);\n  for (int i=0; i < MAX_SIZE; i++) {\n    double r=Math.random();\n    int key=nums.get(i);\n    int val=i;\n    if (r < probability1)     assertEquals(jmap.put(key,val),map.put(key,val));\n    assertEquals(jmap.get(key),map.get(key));\n    assertEquals(jmap.containsKey(key),map.containsKey(key));\n    assertEquals(jmap.size(),map.size());\n    if (r > probability2)     assertEquals(map.remove(key),jmap.remove(key));\n    assertEquals(jmap.get(key),map.get(key));\n    assertEquals(jmap.containsKey(key),map.containsKey(key));\n    assertEquals(jmap.size(),map.size());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 178,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 966,
        "startLineNumber" : 241,
        "startColumnNumber" : 4,
        "endLineNumber" : 272,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int loop=0; loop < LOOPS; loop++) {\n  map.clear();\n  jmap.clear();\n  assertEquals(jmap.size(),map.size());\n  map=new HashTableQuadraticProbing<>();\n  final double probability1=Math.random();\n  final double probability2=Math.random();\n  List<Integer> nums=genRandList(MAX_SIZE);\n  for (int i=0; i < MAX_SIZE; i++) {\n    double r=Math.random();\n    int key=nums.get(i);\n    int val=i;\n    if (r < probability1)     assertEquals(jmap.put(key,val),map.put(key,val));\n    assertEquals(jmap.get(key),map.get(key));\n    assertEquals(jmap.containsKey(key),map.containsKey(key));\n    assertEquals(jmap.size(),map.size());\n    if (r > probability2)     assertEquals(map.remove(key),jmap.remove(key));\n    assertEquals(jmap.get(key),map.get(key));\n    assertEquals(jmap.containsKey(key),map.containsKey(key));\n    assertEquals(jmap.size(),map.size());\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 189,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1032,
        "startLineNumber" : 237,
        "startColumnNumber" : 40,
        "endLineNumber" : 273,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  HashMap<Integer,Integer> jmap=new HashMap<>();\n  for (int loop=0; loop < LOOPS; loop++) {\n    map.clear();\n    jmap.clear();\n    assertEquals(jmap.size(),map.size());\n    map=new HashTableQuadraticProbing<>();\n    final double probability1=Math.random();\n    final double probability2=Math.random();\n    List<Integer> nums=genRandList(MAX_SIZE);\n    for (int i=0; i < MAX_SIZE; i++) {\n      double r=Math.random();\n      int key=nums.get(i);\n      int val=i;\n      if (r < probability1)       assertEquals(jmap.put(key,val),map.put(key,val));\n      assertEquals(jmap.get(key),map.get(key));\n      assertEquals(jmap.containsKey(key),map.containsKey(key));\n      assertEquals(jmap.size(),map.size());\n      if (r > probability2)       assertEquals(map.remove(key),jmap.remove(key));\n      assertEquals(jmap.get(key),map.get(key));\n      assertEquals(jmap.containsKey(key),map.containsKey(key));\n      assertEquals(jmap.size(),map.size());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1078,
        "startLineNumber" : 236,
        "startColumnNumber" : 2,
        "endLineNumber" : 273,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testRandomMapOperations(){\n  HashMap<Integer,Integer> jmap=new HashMap<>();\n  for (int loop=0; loop < LOOPS; loop++) {\n    map.clear();\n    jmap.clear();\n    assertEquals(jmap.size(),map.size());\n    map=new HashTableQuadraticProbing<>();\n    final double probability1=Math.random();\n    final double probability2=Math.random();\n    List<Integer> nums=genRandList(MAX_SIZE);\n    for (int i=0; i < MAX_SIZE; i++) {\n      double r=Math.random();\n      int key=nums.get(i);\n      int val=i;\n      if (r < probability1)       assertEquals(jmap.put(key,val),map.put(key,val));\n      assertEquals(jmap.get(key),map.get(key));\n      assertEquals(jmap.containsKey(key),map.containsKey(key));\n      assertEquals(jmap.size(),map.size());\n      if (r > probability2)       assertEquals(map.remove(key),jmap.remove(key));\n      assertEquals(jmap.get(key),map.get(key));\n      assertEquals(jmap.containsKey(key),map.containsKey(key));\n      assertEquals(jmap.size(),map.size());\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 210,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 269,
        "startColumnNumber" : 8,
        "endLineNumber" : 269,
        "endColumnNumber" : 66
      },
      "nodeContext" : "assertEquals(jmap.containsKey(key),map.containsKey(key));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.HashMap<java.lang.Integer,java.lang.Integer>"
  }, {
    "nodeContext" : "jmap",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 270,
      "startColumnNumber" : 21,
      "endLineNumber" : 270,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 270,
        "startColumnNumber" : 21,
        "endLineNumber" : 270,
        "endColumnNumber" : 32
      },
      "nodeContext" : "jmap.size()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 270,
        "startColumnNumber" : 8,
        "endLineNumber" : 270,
        "endColumnNumber" : 45
      },
      "nodeContext" : "assertEquals(jmap.size(),map.size())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 270,
        "startColumnNumber" : 8,
        "endLineNumber" : 270,
        "endColumnNumber" : 46
      },
      "nodeContext" : "assertEquals(jmap.size(),map.size());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 593,
        "startLineNumber" : 253,
        "startColumnNumber" : 41,
        "endLineNumber" : 271,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  double r=Math.random();\n  int key=nums.get(i);\n  int val=i;\n  if (r < probability1)   assertEquals(jmap.put(key,val),map.put(key,val));\n  assertEquals(jmap.get(key),map.get(key));\n  assertEquals(jmap.containsKey(key),map.containsKey(key));\n  assertEquals(jmap.size(),map.size());\n  if (r > probability2)   assertEquals(map.remove(key),jmap.remove(key));\n  assertEquals(jmap.get(key),map.get(key));\n  assertEquals(jmap.containsKey(key),map.containsKey(key));\n  assertEquals(jmap.size(),map.size());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 115,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 628,
        "startLineNumber" : 253,
        "startColumnNumber" : 6,
        "endLineNumber" : 271,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < MAX_SIZE; i++) {\n  double r=Math.random();\n  int key=nums.get(i);\n  int val=i;\n  if (r < probability1)   assertEquals(jmap.put(key,val),map.put(key,val));\n  assertEquals(jmap.get(key),map.get(key));\n  assertEquals(jmap.containsKey(key),map.containsKey(key));\n  assertEquals(jmap.size(),map.size());\n  if (r > probability2)   assertEquals(map.remove(key),jmap.remove(key));\n  assertEquals(jmap.get(key),map.get(key));\n  assertEquals(jmap.containsKey(key),map.containsKey(key));\n  assertEquals(jmap.size(),map.size());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 126,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 925,
        "startLineNumber" : 241,
        "startColumnNumber" : 45,
        "endLineNumber" : 272,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  map.clear();\n  jmap.clear();\n  assertEquals(jmap.size(),map.size());\n  map=new HashTableQuadraticProbing<>();\n  final double probability1=Math.random();\n  final double probability2=Math.random();\n  List<Integer> nums=genRandList(MAX_SIZE);\n  for (int i=0; i < MAX_SIZE; i++) {\n    double r=Math.random();\n    int key=nums.get(i);\n    int val=i;\n    if (r < probability1)     assertEquals(jmap.put(key,val),map.put(key,val));\n    assertEquals(jmap.get(key),map.get(key));\n    assertEquals(jmap.containsKey(key),map.containsKey(key));\n    assertEquals(jmap.size(),map.size());\n    if (r > probability2)     assertEquals(map.remove(key),jmap.remove(key));\n    assertEquals(jmap.get(key),map.get(key));\n    assertEquals(jmap.containsKey(key),map.containsKey(key));\n    assertEquals(jmap.size(),map.size());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 178,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 966,
        "startLineNumber" : 241,
        "startColumnNumber" : 4,
        "endLineNumber" : 272,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int loop=0; loop < LOOPS; loop++) {\n  map.clear();\n  jmap.clear();\n  assertEquals(jmap.size(),map.size());\n  map=new HashTableQuadraticProbing<>();\n  final double probability1=Math.random();\n  final double probability2=Math.random();\n  List<Integer> nums=genRandList(MAX_SIZE);\n  for (int i=0; i < MAX_SIZE; i++) {\n    double r=Math.random();\n    int key=nums.get(i);\n    int val=i;\n    if (r < probability1)     assertEquals(jmap.put(key,val),map.put(key,val));\n    assertEquals(jmap.get(key),map.get(key));\n    assertEquals(jmap.containsKey(key),map.containsKey(key));\n    assertEquals(jmap.size(),map.size());\n    if (r > probability2)     assertEquals(map.remove(key),jmap.remove(key));\n    assertEquals(jmap.get(key),map.get(key));\n    assertEquals(jmap.containsKey(key),map.containsKey(key));\n    assertEquals(jmap.size(),map.size());\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 189,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1032,
        "startLineNumber" : 237,
        "startColumnNumber" : 40,
        "endLineNumber" : 273,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  HashMap<Integer,Integer> jmap=new HashMap<>();\n  for (int loop=0; loop < LOOPS; loop++) {\n    map.clear();\n    jmap.clear();\n    assertEquals(jmap.size(),map.size());\n    map=new HashTableQuadraticProbing<>();\n    final double probability1=Math.random();\n    final double probability2=Math.random();\n    List<Integer> nums=genRandList(MAX_SIZE);\n    for (int i=0; i < MAX_SIZE; i++) {\n      double r=Math.random();\n      int key=nums.get(i);\n      int val=i;\n      if (r < probability1)       assertEquals(jmap.put(key,val),map.put(key,val));\n      assertEquals(jmap.get(key),map.get(key));\n      assertEquals(jmap.containsKey(key),map.containsKey(key));\n      assertEquals(jmap.size(),map.size());\n      if (r > probability2)       assertEquals(map.remove(key),jmap.remove(key));\n      assertEquals(jmap.get(key),map.get(key));\n      assertEquals(jmap.containsKey(key),map.containsKey(key));\n      assertEquals(jmap.size(),map.size());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1078,
        "startLineNumber" : 236,
        "startColumnNumber" : 2,
        "endLineNumber" : 273,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testRandomMapOperations(){\n  HashMap<Integer,Integer> jmap=new HashMap<>();\n  for (int loop=0; loop < LOOPS; loop++) {\n    map.clear();\n    jmap.clear();\n    assertEquals(jmap.size(),map.size());\n    map=new HashTableQuadraticProbing<>();\n    final double probability1=Math.random();\n    final double probability2=Math.random();\n    List<Integer> nums=genRandList(MAX_SIZE);\n    for (int i=0; i < MAX_SIZE; i++) {\n      double r=Math.random();\n      int key=nums.get(i);\n      int val=i;\n      if (r < probability1)       assertEquals(jmap.put(key,val),map.put(key,val));\n      assertEquals(jmap.get(key),map.get(key));\n      assertEquals(jmap.containsKey(key),map.containsKey(key));\n      assertEquals(jmap.size(),map.size());\n      if (r > probability2)       assertEquals(map.remove(key),jmap.remove(key));\n      assertEquals(jmap.get(key),map.get(key));\n      assertEquals(jmap.containsKey(key),map.containsKey(key));\n      assertEquals(jmap.size(),map.size());\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 210,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 270,
        "startColumnNumber" : 8,
        "endLineNumber" : 270,
        "endColumnNumber" : 46
      },
      "nodeContext" : "assertEquals(jmap.size(),map.size());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.HashMap<java.lang.Integer,java.lang.Integer>"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 244,
    "startColumnNumber" : 6,
    "endLineNumber" : 244,
    "endColumnNumber" : 10
  }, {
    "charLength" : 4,
    "startLineNumber" : 245,
    "startColumnNumber" : 19,
    "endLineNumber" : 245,
    "endColumnNumber" : 23
  }, {
    "charLength" : 4,
    "startLineNumber" : 260,
    "startColumnNumber" : 43,
    "endLineNumber" : 260,
    "endColumnNumber" : 47
  }, {
    "charLength" : 4,
    "startLineNumber" : 262,
    "startColumnNumber" : 21,
    "endLineNumber" : 262,
    "endColumnNumber" : 25
  }, {
    "charLength" : 4,
    "startLineNumber" : 263,
    "startColumnNumber" : 21,
    "endLineNumber" : 263,
    "endColumnNumber" : 25
  }, {
    "charLength" : 4,
    "startLineNumber" : 264,
    "startColumnNumber" : 21,
    "endLineNumber" : 264,
    "endColumnNumber" : 25
  }, {
    "charLength" : 4,
    "startLineNumber" : 266,
    "startColumnNumber" : 60,
    "endLineNumber" : 266,
    "endColumnNumber" : 64
  }, {
    "charLength" : 4,
    "startLineNumber" : 268,
    "startColumnNumber" : 21,
    "endLineNumber" : 268,
    "endColumnNumber" : 25
  }, {
    "charLength" : 4,
    "startLineNumber" : 269,
    "startColumnNumber" : 21,
    "endLineNumber" : 269,
    "endColumnNumber" : 25
  }, {
    "charLength" : 4,
    "startLineNumber" : 270,
    "startColumnNumber" : 21,
    "endLineNumber" : 270,
    "endColumnNumber" : 25
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 3
  } ]
}