{
  "id" : 351,
  "expression" : "URL.valueOf(\"dubbo://10.10.10.10:2181\").addParameter(Constants.ACCESS_KEY_ID_KEY,\"ak\").addParameter(CommonConstants.APPLICATION_KEY,\"test\")",
  "projectName" : "apache@dubbo",
  "commitID" : "4ea0a09846fa74b7b1a6a1a548f31859a2cddcc8",
  "filePath" : "/dubbo-plugin/dubbo-auth/src/test/java/org/apache/dubbo/auth/AccessKeyAuthenticatorTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "URL.valueOf(\"dubbo://10.10.10.10:2181\").addParameter(Constants.ACCESS_KEY_ID_KEY,\"ak\").addParameter(CommonConstants.APPLICATION_KEY,\"test\")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 175,
      "startLineNumber" : 45,
      "startColumnNumber" : 18,
      "endLineNumber" : 47,
      "endColumnNumber" : 70
    },
    "astNodeNumber" : 16,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 244,
        "startLineNumber" : 45,
        "startColumnNumber" : 18,
        "endLineNumber" : 48,
        "endColumnNumber" : 68
      },
      "nodeContext" : "URL.valueOf(\"dubbo://10.10.10.10:2181\").addParameter(Constants.ACCESS_KEY_ID_KEY,\"ak\").addParameter(CommonConstants.APPLICATION_KEY,\"test\").addParameter(Constants.SECRET_ACCESS_KEY_KEY,\"sk\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 22,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 250,
        "startLineNumber" : 45,
        "startColumnNumber" : 12,
        "endLineNumber" : 48,
        "endColumnNumber" : 68
      },
      "nodeContext" : "url=URL.valueOf(\"dubbo://10.10.10.10:2181\").addParameter(Constants.ACCESS_KEY_ID_KEY,\"ak\").addParameter(CommonConstants.APPLICATION_KEY,\"test\").addParameter(Constants.SECRET_ACCESS_KEY_KEY,\"sk\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 24,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 255,
        "startLineNumber" : 45,
        "startColumnNumber" : 8,
        "endLineNumber" : 48,
        "endColumnNumber" : 69
      },
      "nodeContext" : "URL url=URL.valueOf(\"dubbo://10.10.10.10:2181\").addParameter(Constants.ACCESS_KEY_ID_KEY,\"ak\").addParameter(CommonConstants.APPLICATION_KEY,\"test\").addParameter(Constants.SECRET_ACCESS_KEY_KEY,\"sk\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1142,
        "startLineNumber" : 44,
        "startColumnNumber" : 30,
        "endLineNumber" : 63,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  URL url=URL.valueOf(\"dubbo://10.10.10.10:2181\").addParameter(Constants.ACCESS_KEY_ID_KEY,\"ak\").addParameter(CommonConstants.APPLICATION_KEY,\"test\").addParameter(Constants.SECRET_ACCESS_KEY_KEY,\"sk\");\n  Invocation invocation=new RpcInvocation();\n  AccessKeyAuthenticator helper=mock(AccessKeyAuthenticator.class);\n  doCallRealMethod().when(helper).sign(invocation,url);\n  when(helper.getSignature(eq(url),eq(invocation),eq(\"sk\"),anyString())).thenReturn(\"dubbo\");\n  AccessKeyPair accessKeyPair=mock(AccessKeyPair.class);\n  when(accessKeyPair.getSecretKey()).thenReturn(\"sk\");\n  when(helper.getAccessKeyPair(invocation,url)).thenReturn(accessKeyPair);\n  helper.sign(invocation,url);\n  assertEquals(String.valueOf(invocation.getAttachment(CommonConstants.CONSUMER)),url.getParameter(CommonConstants.APPLICATION_KEY));\n  assertNotNull(invocation.getAttachments().get(Constants.REQUEST_SIGNATURE_KEY));\n  assertEquals(invocation.getAttachments().get(Constants.REQUEST_SIGNATURE_KEY),\"dubbo\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 153,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1178,
        "startLineNumber" : 43,
        "startColumnNumber" : 4,
        "endLineNumber" : 63,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test void testSignForRequest(){\n  URL url=URL.valueOf(\"dubbo://10.10.10.10:2181\").addParameter(Constants.ACCESS_KEY_ID_KEY,\"ak\").addParameter(CommonConstants.APPLICATION_KEY,\"test\").addParameter(Constants.SECRET_ACCESS_KEY_KEY,\"sk\");\n  Invocation invocation=new RpcInvocation();\n  AccessKeyAuthenticator helper=mock(AccessKeyAuthenticator.class);\n  doCallRealMethod().when(helper).sign(invocation,url);\n  when(helper.getSignature(eq(url),eq(invocation),eq(\"sk\"),anyString())).thenReturn(\"dubbo\");\n  AccessKeyPair accessKeyPair=mock(AccessKeyPair.class);\n  when(accessKeyPair.getSecretKey()).thenReturn(\"sk\");\n  when(helper.getAccessKeyPair(invocation,url)).thenReturn(accessKeyPair);\n  helper.sign(invocation,url);\n  assertEquals(String.valueOf(invocation.getAttachment(CommonConstants.CONSUMER)),url.getParameter(CommonConstants.APPLICATION_KEY));\n  assertNotNull(invocation.getAttachments().get(Constants.REQUEST_SIGNATURE_KEY));\n  assertEquals(invocation.getAttachments().get(Constants.REQUEST_SIGNATURE_KEY),\"dubbo\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 158,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 244,
        "startLineNumber" : 45,
        "startColumnNumber" : 18,
        "endLineNumber" : 48,
        "endColumnNumber" : 68
      },
      "nodeContext" : "URL.valueOf(\"dubbo://10.10.10.10:2181\").addParameter(Constants.ACCESS_KEY_ID_KEY,\"ak\").addParameter(CommonConstants.APPLICATION_KEY,\"test\").addParameter(Constants.SECRET_ACCESS_KEY_KEY,\"sk\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 22,
      "astHeight" : 5
    },
    "tokenLength" : 20,
    "type" : "org.apache.dubbo.common.URL"
  } ],
  "positionList" : [ {
    "charLength" : 175,
    "startLineNumber" : 45,
    "startColumnNumber" : 18,
    "endLineNumber" : 47,
    "endColumnNumber" : 70
  } ],
  "layoutRelationDataList" : [ ]
}