{
  "id" : 72,
  "expression" : "lastOffsetSnapshotted",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/raft/src/main/java/org/apache/kafka/raft/ReplicatedCounter.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "lastOffsetSnapshotted",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 110,
      "startColumnNumber" : 16,
      "endLineNumber" : 110,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 110,
        "startColumnNumber" : 16,
        "endLineNumber" : 110,
        "endColumnNumber" : 62
      },
      "nodeContext" : "lastOffsetSnapshotted + snapshotDelayInRecords",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 110,
        "startColumnNumber" : 16,
        "endLineNumber" : 110,
        "endColumnNumber" : 84
      },
      "nodeContext" : "lastOffsetSnapshotted + snapshotDelayInRecords < lastCommittedOffset",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1064,
        "startLineNumber" : 110,
        "startColumnNumber" : 12,
        "endLineNumber" : 132,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (lastOffsetSnapshotted + snapshotDelayInRecords < lastCommittedOffset) {\n  log.debug(\"Generating new snapshot with committed offset {} and epoch {} since the previoud snapshot includes {}\",lastCommittedOffset,lastCommittedEpoch,lastOffsetSnapshotted);\n  Optional<SnapshotWriter<Integer>> snapshot=client.createSnapshot(lastCommittedOffset,lastCommittedEpoch,lastCommittedTimestamp);\n  if (snapshot.isPresent()) {\n    try {\n      snapshot.get().append(singletonList(committed));\n      snapshot.get().freeze();\n      lastOffsetSnapshotted=lastCommittedOffset;\n    }\n  finally {\n      snapshot.get().close();\n    }\n  }\n else {\n    lastOffsetSnapshotted=lastCommittedOffset;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 70,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2438,
        "startLineNumber" : 77,
        "startColumnNumber" : 12,
        "endLineNumber" : 133,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int initialCommitted=committed;\n  long lastCommittedOffset=-1;\n  int lastCommittedEpoch=0;\n  long lastCommittedTimestamp=-1;\n  while (reader.hasNext()) {\n    Batch<Integer> batch=reader.next();\n    log.debug(\"Handle commit of batch with records {} at base offset {}\",batch.records(),batch.baseOffset());\n    for (    Integer nextCommitted : batch.records()) {\n      if (nextCommitted != committed + 1) {\n        throw new AssertionError(String.format(\"Expected next committed value to be %s, but instead found %s on node %s\",committed + 1,nextCommitted,nodeId));\n      }\n      committed=nextCommitted;\n    }\n    lastCommittedOffset=batch.lastOffset();\n    lastCommittedEpoch=batch.epoch();\n    lastCommittedTimestamp=batch.appendTimestamp();\n  }\n  log.debug(\"Counter incremented from {} to {}\",initialCommitted,committed);\n  if (lastOffsetSnapshotted + snapshotDelayInRecords < lastCommittedOffset) {\n    log.debug(\"Generating new snapshot with committed offset {} and epoch {} since the previoud snapshot includes {}\",lastCommittedOffset,lastCommittedEpoch,lastOffsetSnapshotted);\n    Optional<SnapshotWriter<Integer>> snapshot=client.createSnapshot(lastCommittedOffset,lastCommittedEpoch,lastCommittedTimestamp);\n    if (snapshot.isPresent()) {\n      try {\n        snapshot.get().append(singletonList(committed));\n        snapshot.get().freeze();\n        lastOffsetSnapshotted=lastCommittedOffset;\n      }\n  finally {\n        snapshot.get().close();\n      }\n    }\n else {\n      lastOffsetSnapshotted=lastCommittedOffset;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 178,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2490,
        "startLineNumber" : 77,
        "startColumnNumber" : 8,
        "endLineNumber" : 135,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  int initialCommitted=committed;\n  long lastCommittedOffset=-1;\n  int lastCommittedEpoch=0;\n  long lastCommittedTimestamp=-1;\n  while (reader.hasNext()) {\n    Batch<Integer> batch=reader.next();\n    log.debug(\"Handle commit of batch with records {} at base offset {}\",batch.records(),batch.baseOffset());\n    for (    Integer nextCommitted : batch.records()) {\n      if (nextCommitted != committed + 1) {\n        throw new AssertionError(String.format(\"Expected next committed value to be %s, but instead found %s on node %s\",committed + 1,nextCommitted,nodeId));\n      }\n      committed=nextCommitted;\n    }\n    lastCommittedOffset=batch.lastOffset();\n    lastCommittedEpoch=batch.epoch();\n    lastCommittedTimestamp=batch.appendTimestamp();\n  }\n  log.debug(\"Counter incremented from {} to {}\",initialCommitted,committed);\n  if (lastOffsetSnapshotted + snapshotDelayInRecords < lastCommittedOffset) {\n    log.debug(\"Generating new snapshot with committed offset {} and epoch {} since the previoud snapshot includes {}\",lastCommittedOffset,lastCommittedEpoch,lastOffsetSnapshotted);\n    Optional<SnapshotWriter<Integer>> snapshot=client.createSnapshot(lastCommittedOffset,lastCommittedEpoch,lastCommittedTimestamp);\n    if (snapshot.isPresent()) {\n      try {\n        snapshot.get().append(singletonList(committed));\n        snapshot.get().freeze();\n        lastOffsetSnapshotted=lastCommittedOffset;\n      }\n  finally {\n        snapshot.get().close();\n      }\n    }\n else {\n      lastOffsetSnapshotted=lastCommittedOffset;\n    }\n  }\n}\n  finally {\n  reader.close();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 184,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2506,
        "startLineNumber" : 76,
        "startColumnNumber" : 71,
        "endLineNumber" : 136,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    int initialCommitted=committed;\n    long lastCommittedOffset=-1;\n    int lastCommittedEpoch=0;\n    long lastCommittedTimestamp=-1;\n    while (reader.hasNext()) {\n      Batch<Integer> batch=reader.next();\n      log.debug(\"Handle commit of batch with records {} at base offset {}\",batch.records(),batch.baseOffset());\n      for (      Integer nextCommitted : batch.records()) {\n        if (nextCommitted != committed + 1) {\n          throw new AssertionError(String.format(\"Expected next committed value to be %s, but instead found %s on node %s\",committed + 1,nextCommitted,nodeId));\n        }\n        committed=nextCommitted;\n      }\n      lastCommittedOffset=batch.lastOffset();\n      lastCommittedEpoch=batch.epoch();\n      lastCommittedTimestamp=batch.appendTimestamp();\n    }\n    log.debug(\"Counter incremented from {} to {}\",initialCommitted,committed);\n    if (lastOffsetSnapshotted + snapshotDelayInRecords < lastCommittedOffset) {\n      log.debug(\"Generating new snapshot with committed offset {} and epoch {} since the previoud snapshot includes {}\",lastCommittedOffset,lastCommittedEpoch,lastOffsetSnapshotted);\n      Optional<SnapshotWriter<Integer>> snapshot=client.createSnapshot(lastCommittedOffset,lastCommittedEpoch,lastCommittedTimestamp);\n      if (snapshot.isPresent()) {\n        try {\n          snapshot.get().append(singletonList(committed));\n          snapshot.get().freeze();\n          lastOffsetSnapshotted=lastCommittedOffset;\n        }\n  finally {\n          snapshot.get().close();\n        }\n      }\n else {\n        lastOffsetSnapshotted=lastCommittedOffset;\n      }\n    }\n  }\n  finally {\n    reader.close();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 185,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2587,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 136,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public synchronized void handleCommit(BatchReader<Integer> reader){\n  try {\n    int initialCommitted=committed;\n    long lastCommittedOffset=-1;\n    int lastCommittedEpoch=0;\n    long lastCommittedTimestamp=-1;\n    while (reader.hasNext()) {\n      Batch<Integer> batch=reader.next();\n      log.debug(\"Handle commit of batch with records {} at base offset {}\",batch.records(),batch.baseOffset());\n      for (      Integer nextCommitted : batch.records()) {\n        if (nextCommitted != committed + 1) {\n          throw new AssertionError(String.format(\"Expected next committed value to be %s, but instead found %s on node %s\",committed + 1,nextCommitted,nodeId));\n        }\n        committed=nextCommitted;\n      }\n      lastCommittedOffset=batch.lastOffset();\n      lastCommittedEpoch=batch.epoch();\n      lastCommittedTimestamp=batch.appendTimestamp();\n    }\n    log.debug(\"Counter incremented from {} to {}\",initialCommitted,committed);\n    if (lastOffsetSnapshotted + snapshotDelayInRecords < lastCommittedOffset) {\n      log.debug(\"Generating new snapshot with committed offset {} and epoch {} since the previoud snapshot includes {}\",lastCommittedOffset,lastCommittedEpoch,lastOffsetSnapshotted);\n      Optional<SnapshotWriter<Integer>> snapshot=client.createSnapshot(lastCommittedOffset,lastCommittedEpoch,lastCommittedTimestamp);\n      if (snapshot.isPresent()) {\n        try {\n          snapshot.get().append(singletonList(committed));\n          snapshot.get().freeze();\n          lastOffsetSnapshotted=lastCommittedOffset;\n        }\n  finally {\n          snapshot.get().close();\n        }\n      }\n else {\n        lastOffsetSnapshotted=lastCommittedOffset;\n      }\n    }\n  }\n  finally {\n    reader.close();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 199,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 110,
        "startColumnNumber" : 16,
        "endLineNumber" : 110,
        "endColumnNumber" : 84
      },
      "nodeContext" : "lastOffsetSnapshotted + snapshotDelayInRecords < lastCommittedOffset",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "long"
  }, {
    "nodeContext" : "lastOffsetSnapshotted",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 115,
      "startColumnNumber" : 20,
      "endLineNumber" : 115,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 276,
        "startLineNumber" : 111,
        "startColumnNumber" : 16,
        "endLineNumber" : 116,
        "endColumnNumber" : 17
      },
      "nodeContext" : "log.debug(\"Generating new snapshot with committed offset {} and epoch {} since the previoud snapshot includes {}\",lastCommittedOffset,lastCommittedEpoch,lastOffsetSnapshotted)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 277,
        "startLineNumber" : 111,
        "startColumnNumber" : 16,
        "endLineNumber" : 116,
        "endColumnNumber" : 18
      },
      "nodeContext" : "log.debug(\"Generating new snapshot with committed offset {} and epoch {} since the previoud snapshot includes {}\",lastCommittedOffset,lastCommittedEpoch,lastOffsetSnapshotted);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 990,
        "startLineNumber" : 110,
        "startColumnNumber" : 86,
        "endLineNumber" : 132,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  log.debug(\"Generating new snapshot with committed offset {} and epoch {} since the previoud snapshot includes {}\",lastCommittedOffset,lastCommittedEpoch,lastOffsetSnapshotted);\n  Optional<SnapshotWriter<Integer>> snapshot=client.createSnapshot(lastCommittedOffset,lastCommittedEpoch,lastCommittedTimestamp);\n  if (snapshot.isPresent()) {\n    try {\n      snapshot.get().append(singletonList(committed));\n      snapshot.get().freeze();\n      lastOffsetSnapshotted=lastCommittedOffset;\n    }\n  finally {\n      snapshot.get().close();\n    }\n  }\n else {\n    lastOffsetSnapshotted=lastCommittedOffset;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 64,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1064,
        "startLineNumber" : 110,
        "startColumnNumber" : 12,
        "endLineNumber" : 132,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (lastOffsetSnapshotted + snapshotDelayInRecords < lastCommittedOffset) {\n  log.debug(\"Generating new snapshot with committed offset {} and epoch {} since the previoud snapshot includes {}\",lastCommittedOffset,lastCommittedEpoch,lastOffsetSnapshotted);\n  Optional<SnapshotWriter<Integer>> snapshot=client.createSnapshot(lastCommittedOffset,lastCommittedEpoch,lastCommittedTimestamp);\n  if (snapshot.isPresent()) {\n    try {\n      snapshot.get().append(singletonList(committed));\n      snapshot.get().freeze();\n      lastOffsetSnapshotted=lastCommittedOffset;\n    }\n  finally {\n      snapshot.get().close();\n    }\n  }\n else {\n    lastOffsetSnapshotted=lastCommittedOffset;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 70,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2438,
        "startLineNumber" : 77,
        "startColumnNumber" : 12,
        "endLineNumber" : 133,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int initialCommitted=committed;\n  long lastCommittedOffset=-1;\n  int lastCommittedEpoch=0;\n  long lastCommittedTimestamp=-1;\n  while (reader.hasNext()) {\n    Batch<Integer> batch=reader.next();\n    log.debug(\"Handle commit of batch with records {} at base offset {}\",batch.records(),batch.baseOffset());\n    for (    Integer nextCommitted : batch.records()) {\n      if (nextCommitted != committed + 1) {\n        throw new AssertionError(String.format(\"Expected next committed value to be %s, but instead found %s on node %s\",committed + 1,nextCommitted,nodeId));\n      }\n      committed=nextCommitted;\n    }\n    lastCommittedOffset=batch.lastOffset();\n    lastCommittedEpoch=batch.epoch();\n    lastCommittedTimestamp=batch.appendTimestamp();\n  }\n  log.debug(\"Counter incremented from {} to {}\",initialCommitted,committed);\n  if (lastOffsetSnapshotted + snapshotDelayInRecords < lastCommittedOffset) {\n    log.debug(\"Generating new snapshot with committed offset {} and epoch {} since the previoud snapshot includes {}\",lastCommittedOffset,lastCommittedEpoch,lastOffsetSnapshotted);\n    Optional<SnapshotWriter<Integer>> snapshot=client.createSnapshot(lastCommittedOffset,lastCommittedEpoch,lastCommittedTimestamp);\n    if (snapshot.isPresent()) {\n      try {\n        snapshot.get().append(singletonList(committed));\n        snapshot.get().freeze();\n        lastOffsetSnapshotted=lastCommittedOffset;\n      }\n  finally {\n        snapshot.get().close();\n      }\n    }\n else {\n      lastOffsetSnapshotted=lastCommittedOffset;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 178,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2490,
        "startLineNumber" : 77,
        "startColumnNumber" : 8,
        "endLineNumber" : 135,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  int initialCommitted=committed;\n  long lastCommittedOffset=-1;\n  int lastCommittedEpoch=0;\n  long lastCommittedTimestamp=-1;\n  while (reader.hasNext()) {\n    Batch<Integer> batch=reader.next();\n    log.debug(\"Handle commit of batch with records {} at base offset {}\",batch.records(),batch.baseOffset());\n    for (    Integer nextCommitted : batch.records()) {\n      if (nextCommitted != committed + 1) {\n        throw new AssertionError(String.format(\"Expected next committed value to be %s, but instead found %s on node %s\",committed + 1,nextCommitted,nodeId));\n      }\n      committed=nextCommitted;\n    }\n    lastCommittedOffset=batch.lastOffset();\n    lastCommittedEpoch=batch.epoch();\n    lastCommittedTimestamp=batch.appendTimestamp();\n  }\n  log.debug(\"Counter incremented from {} to {}\",initialCommitted,committed);\n  if (lastOffsetSnapshotted + snapshotDelayInRecords < lastCommittedOffset) {\n    log.debug(\"Generating new snapshot with committed offset {} and epoch {} since the previoud snapshot includes {}\",lastCommittedOffset,lastCommittedEpoch,lastOffsetSnapshotted);\n    Optional<SnapshotWriter<Integer>> snapshot=client.createSnapshot(lastCommittedOffset,lastCommittedEpoch,lastCommittedTimestamp);\n    if (snapshot.isPresent()) {\n      try {\n        snapshot.get().append(singletonList(committed));\n        snapshot.get().freeze();\n        lastOffsetSnapshotted=lastCommittedOffset;\n      }\n  finally {\n        snapshot.get().close();\n      }\n    }\n else {\n      lastOffsetSnapshotted=lastCommittedOffset;\n    }\n  }\n}\n  finally {\n  reader.close();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 184,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2506,
        "startLineNumber" : 76,
        "startColumnNumber" : 71,
        "endLineNumber" : 136,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    int initialCommitted=committed;\n    long lastCommittedOffset=-1;\n    int lastCommittedEpoch=0;\n    long lastCommittedTimestamp=-1;\n    while (reader.hasNext()) {\n      Batch<Integer> batch=reader.next();\n      log.debug(\"Handle commit of batch with records {} at base offset {}\",batch.records(),batch.baseOffset());\n      for (      Integer nextCommitted : batch.records()) {\n        if (nextCommitted != committed + 1) {\n          throw new AssertionError(String.format(\"Expected next committed value to be %s, but instead found %s on node %s\",committed + 1,nextCommitted,nodeId));\n        }\n        committed=nextCommitted;\n      }\n      lastCommittedOffset=batch.lastOffset();\n      lastCommittedEpoch=batch.epoch();\n      lastCommittedTimestamp=batch.appendTimestamp();\n    }\n    log.debug(\"Counter incremented from {} to {}\",initialCommitted,committed);\n    if (lastOffsetSnapshotted + snapshotDelayInRecords < lastCommittedOffset) {\n      log.debug(\"Generating new snapshot with committed offset {} and epoch {} since the previoud snapshot includes {}\",lastCommittedOffset,lastCommittedEpoch,lastOffsetSnapshotted);\n      Optional<SnapshotWriter<Integer>> snapshot=client.createSnapshot(lastCommittedOffset,lastCommittedEpoch,lastCommittedTimestamp);\n      if (snapshot.isPresent()) {\n        try {\n          snapshot.get().append(singletonList(committed));\n          snapshot.get().freeze();\n          lastOffsetSnapshotted=lastCommittedOffset;\n        }\n  finally {\n          snapshot.get().close();\n        }\n      }\n else {\n        lastOffsetSnapshotted=lastCommittedOffset;\n      }\n    }\n  }\n  finally {\n    reader.close();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 185,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2587,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 136,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public synchronized void handleCommit(BatchReader<Integer> reader){\n  try {\n    int initialCommitted=committed;\n    long lastCommittedOffset=-1;\n    int lastCommittedEpoch=0;\n    long lastCommittedTimestamp=-1;\n    while (reader.hasNext()) {\n      Batch<Integer> batch=reader.next();\n      log.debug(\"Handle commit of batch with records {} at base offset {}\",batch.records(),batch.baseOffset());\n      for (      Integer nextCommitted : batch.records()) {\n        if (nextCommitted != committed + 1) {\n          throw new AssertionError(String.format(\"Expected next committed value to be %s, but instead found %s on node %s\",committed + 1,nextCommitted,nodeId));\n        }\n        committed=nextCommitted;\n      }\n      lastCommittedOffset=batch.lastOffset();\n      lastCommittedEpoch=batch.epoch();\n      lastCommittedTimestamp=batch.appendTimestamp();\n    }\n    log.debug(\"Counter incremented from {} to {}\",initialCommitted,committed);\n    if (lastOffsetSnapshotted + snapshotDelayInRecords < lastCommittedOffset) {\n      log.debug(\"Generating new snapshot with committed offset {} and epoch {} since the previoud snapshot includes {}\",lastCommittedOffset,lastCommittedEpoch,lastOffsetSnapshotted);\n      Optional<SnapshotWriter<Integer>> snapshot=client.createSnapshot(lastCommittedOffset,lastCommittedEpoch,lastCommittedTimestamp);\n      if (snapshot.isPresent()) {\n        try {\n          snapshot.get().append(singletonList(committed));\n          snapshot.get().freeze();\n          lastOffsetSnapshotted=lastCommittedOffset;\n        }\n  finally {\n          snapshot.get().close();\n        }\n      }\n else {\n        lastOffsetSnapshotted=lastCommittedOffset;\n      }\n    }\n  }\n  finally {\n    reader.close();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 199,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 276,
        "startLineNumber" : 111,
        "startColumnNumber" : 16,
        "endLineNumber" : 116,
        "endColumnNumber" : 17
      },
      "nodeContext" : "log.debug(\"Generating new snapshot with committed offset {} and epoch {} since the previoud snapshot includes {}\",lastCommittedOffset,lastCommittedEpoch,lastOffsetSnapshotted)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 110,
    "startColumnNumber" : 16,
    "endLineNumber" : 110,
    "endColumnNumber" : 37
  }, {
    "charLength" : 21,
    "startLineNumber" : 115,
    "startColumnNumber" : 20,
    "endLineNumber" : 115,
    "endColumnNumber" : 41
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}