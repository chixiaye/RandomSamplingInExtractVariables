{
  "id" : 363,
  "expression" : "timeout",
  "projectName" : "redisson@redisson",
  "commitID" : "62b5e68c05b7475e1e0f98b4161aacb35d376b97",
  "filePath" : "/redisson/src/main/java/org/redisson/mapreduce/CollectionMapperTask.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "timeout",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 80,
      "startColumnNumber" : 123,
      "endLineNumber" : 80,
      "endColumnNumber" : 130
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 80,
        "startColumnNumber" : 47,
        "endLineNumber" : 80,
        "endColumnNumber" : 131
      },
      "nodeContext" : "new Collector<KOut,VOut>(codec,redisson,collectorMapName,workersAmount,timeout)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 80,
        "startColumnNumber" : 35,
        "endLineNumber" : 80,
        "endColumnNumber" : 131
      },
      "nodeContext" : "collector=new Collector<KOut,VOut>(codec,redisson,collectorMapName,workersAmount,timeout)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 80,
        "startColumnNumber" : 12,
        "endLineNumber" : 80,
        "endColumnNumber" : 132
      },
      "nodeContext" : "RCollector<KOut,VOut> collector=new Collector<KOut,VOut>(codec,redisson,collectorMapName,workersAmount,timeout);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1425,
        "startLineNumber" : 62,
        "startColumnNumber" : 46,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Iterable<VIn> collection=null;\n  if (RSetCache.class.isAssignableFrom(objectClass)) {\n    collection=redisson.getSetCache(objectName,codec);\n  }\n else   if (RSet.class.isAssignableFrom(objectClass)) {\n    collection=redisson.getSet(objectName,codec);\n  }\n else   if (RSortedSet.class.isAssignableFrom(objectClass)) {\n    collection=redisson.getSortedSet(objectName,codec);\n  }\n else   if (RScoredSortedSet.class.isAssignableFrom(objectClass)) {\n    collection=redisson.getScoredSortedSet(objectName,codec);\n  }\n else   if (RLexSortedSet.class.isAssignableFrom(objectClass)) {\n    collection=(Iterable<VIn>)redisson.getLexSortedSet(objectName);\n  }\n else   if (RList.class.isAssignableFrom(objectClass)) {\n    collection=redisson.getList(objectName,codec);\n  }\n else {\n    throw new IllegalStateException(\"Unable to work with \" + objectClass);\n  }\n  RCollector<KOut,VOut> collector=new Collector<KOut,VOut>(codec,redisson,collectorMapName,workersAmount,timeout);\n  for (  VIn value : collection) {\n    if (Thread.currentThread().isInterrupted()) {\n      return;\n    }\n    mapper.map(value,collector);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 163,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1463,
        "startLineNumber" : 62,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String objectName : objectNames) {\n  Iterable<VIn> collection=null;\n  if (RSetCache.class.isAssignableFrom(objectClass)) {\n    collection=redisson.getSetCache(objectName,codec);\n  }\n else   if (RSet.class.isAssignableFrom(objectClass)) {\n    collection=redisson.getSet(objectName,codec);\n  }\n else   if (RSortedSet.class.isAssignableFrom(objectClass)) {\n    collection=redisson.getSortedSet(objectName,codec);\n  }\n else   if (RScoredSortedSet.class.isAssignableFrom(objectClass)) {\n    collection=redisson.getScoredSortedSet(objectName,codec);\n  }\n else   if (RLexSortedSet.class.isAssignableFrom(objectClass)) {\n    collection=(Iterable<VIn>)redisson.getLexSortedSet(objectName);\n  }\n else   if (RList.class.isAssignableFrom(objectClass)) {\n    collection=redisson.getList(objectName,codec);\n  }\n else {\n    throw new IllegalStateException(\"Unable to work with \" + objectClass);\n  }\n  RCollector<KOut,VOut> collector=new Collector<KOut,VOut>(codec,redisson,collectorMapName,workersAmount,timeout);\n  for (  VIn value : collection) {\n    if (Thread.currentThread().isInterrupted()) {\n      return;\n    }\n    mapper.map(value,collector);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 169,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1734,
        "startLineNumber" : 52,
        "startColumnNumber" : 23,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Codec codec;\n  try {\n    codec=(Codec)objectCodecClass.getConstructor().newInstance();\n  }\n catch (  Exception e) {\n    throw new IllegalStateException(e);\n  }\n  Injector.inject(mapper,redisson);\n  for (  String objectName : objectNames) {\n    Iterable<VIn> collection=null;\n    if (RSetCache.class.isAssignableFrom(objectClass)) {\n      collection=redisson.getSetCache(objectName,codec);\n    }\n else     if (RSet.class.isAssignableFrom(objectClass)) {\n      collection=redisson.getSet(objectName,codec);\n    }\n else     if (RSortedSet.class.isAssignableFrom(objectClass)) {\n      collection=redisson.getSortedSet(objectName,codec);\n    }\n else     if (RScoredSortedSet.class.isAssignableFrom(objectClass)) {\n      collection=redisson.getScoredSortedSet(objectName,codec);\n    }\n else     if (RLexSortedSet.class.isAssignableFrom(objectClass)) {\n      collection=(Iterable<VIn>)redisson.getLexSortedSet(objectName);\n    }\n else     if (RList.class.isAssignableFrom(objectClass)) {\n      collection=redisson.getList(objectName,codec);\n    }\n else {\n      throw new IllegalStateException(\"Unable to work with \" + objectClass);\n    }\n    RCollector<KOut,VOut> collector=new Collector<KOut,VOut>(codec,redisson,collectorMapName,workersAmount,timeout);\n    for (    VIn value : collection) {\n      if (Thread.currentThread().isInterrupted()) {\n        return;\n      }\n      mapper.map(value,collector);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 205,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1767,
        "startLineNumber" : 51,
        "startColumnNumber" : 4,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  Codec codec;\n  try {\n    codec=(Codec)objectCodecClass.getConstructor().newInstance();\n  }\n catch (  Exception e) {\n    throw new IllegalStateException(e);\n  }\n  Injector.inject(mapper,redisson);\n  for (  String objectName : objectNames) {\n    Iterable<VIn> collection=null;\n    if (RSetCache.class.isAssignableFrom(objectClass)) {\n      collection=redisson.getSetCache(objectName,codec);\n    }\n else     if (RSet.class.isAssignableFrom(objectClass)) {\n      collection=redisson.getSet(objectName,codec);\n    }\n else     if (RSortedSet.class.isAssignableFrom(objectClass)) {\n      collection=redisson.getSortedSet(objectName,codec);\n    }\n else     if (RScoredSortedSet.class.isAssignableFrom(objectClass)) {\n      collection=redisson.getScoredSortedSet(objectName,codec);\n    }\n else     if (RLexSortedSet.class.isAssignableFrom(objectClass)) {\n      collection=(Iterable<VIn>)redisson.getLexSortedSet(objectName);\n    }\n else     if (RList.class.isAssignableFrom(objectClass)) {\n      collection=redisson.getList(objectName,codec);\n    }\n else {\n      throw new IllegalStateException(\"Unable to work with \" + objectClass);\n    }\n    RCollector<KOut,VOut> collector=new Collector<KOut,VOut>(codec,redisson,collectorMapName,workersAmount,timeout);\n    for (    VIn value : collection) {\n      if (Thread.currentThread().isInterrupted()) {\n        return;\n      }\n      mapper.map(value,collector);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 211,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 80,
        "startColumnNumber" : 12,
        "endLineNumber" : 80,
        "endColumnNumber" : 132
      },
      "nodeContext" : "RCollector<KOut,VOut> collector=new Collector<KOut,VOut>(codec,redisson,collectorMapName,workersAmount,timeout);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 80,
    "startColumnNumber" : 123,
    "endLineNumber" : 80,
    "endColumnNumber" : 130
  } ],
  "layoutRelationDataList" : [ ]
}