{
  "id" : 199,
  "expression" : "!Modifier.isPrivate(constructor.getModifiers())",
  "projectName" : "apache@skywalking",
  "commitID" : "16b51d55baec4f779f312e07081d1397addbcfe9",
  "filePath" : "/apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/AutowiredAnnotationProcessorInterceptor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "!Modifier.isPrivate(constructor.getModifiers())",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 47,
      "startLineNumber" : 75,
      "startColumnNumber" : 28,
      "endLineNumber" : 75,
      "endColumnNumber" : 75
    },
    "astNodeNumber" : 7,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 151,
        "startLineNumber" : 75,
        "startColumnNumber" : 24,
        "endLineNumber" : 77,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (!Modifier.isPrivate(constructor.getModifiers())) {\n  candidateRawConstructors.add(constructor);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 199,
        "startLineNumber" : 74,
        "startColumnNumber" : 70,
        "endLineNumber" : 78,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (!Modifier.isPrivate(constructor.getModifiers())) {\n    candidateRawConstructors.add(constructor);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 249,
        "startLineNumber" : 74,
        "startColumnNumber" : 20,
        "endLineNumber" : 78,
        "endColumnNumber" : 21
      },
      "nodeContext" : "for (Constructor<?> constructor : rawConstructor) {\n  if (!Modifier.isPrivate(constructor.getModifiers())) {\n    candidateRawConstructors.add(constructor);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 928,
        "startLineNumber" : 71,
        "startColumnNumber" : 57,
        "endLineNumber" : 87,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  Constructor<?>[] rawConstructor=beanClass.getDeclaredConstructors();\n  List<Constructor<?>> candidateRawConstructors=new ArrayList<Constructor<?>>();\n  for (  Constructor<?> constructor : rawConstructor) {\n    if (!Modifier.isPrivate(constructor.getModifiers())) {\n      candidateRawConstructors.add(constructor);\n    }\n  }\n  if (candidateRawConstructors.size() == 1 && candidateRawConstructors.get(0).getParameterTypes().length > 0) {\n    candidateConstructors=new Constructor<?>[]{candidateRawConstructors.get(0)};\n  }\n else {\n    candidateConstructors=new Constructor<?>[0];\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 99,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1067,
        "startLineNumber" : 71,
        "startColumnNumber" : 16,
        "endLineNumber" : 89,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (returnCandidateConstructors == null) {\n  Constructor<?>[] rawConstructor=beanClass.getDeclaredConstructors();\n  List<Constructor<?>> candidateRawConstructors=new ArrayList<Constructor<?>>();\n  for (  Constructor<?> constructor : rawConstructor) {\n    if (!Modifier.isPrivate(constructor.getModifiers())) {\n      candidateRawConstructors.add(constructor);\n    }\n  }\n  if (candidateRawConstructors.size() == 1 && candidateRawConstructors.get(0).getParameterTypes().length > 0) {\n    candidateConstructors=new Constructor<?>[]{candidateRawConstructors.get(0)};\n  }\n else {\n    candidateConstructors=new Constructor<?>[0];\n  }\n}\n else {\n  candidateConstructors=returnCandidateConstructors;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 108,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2576,
        "startLineNumber" : 53,
        "startColumnNumber" : 47,
        "endLineNumber" : 92,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Constructor<?>[] returnCandidateConstructors=(Constructor<?>[])ret;\n  if (returnCandidateConstructors == null) {\n    Constructor<?>[] rawConstructor=beanClass.getDeclaredConstructors();\n    List<Constructor<?>> candidateRawConstructors=new ArrayList<Constructor<?>>();\n    for (    Constructor<?> constructor : rawConstructor) {\n      if (!Modifier.isPrivate(constructor.getModifiers())) {\n        candidateRawConstructors.add(constructor);\n      }\n    }\n    if (candidateRawConstructors.size() == 1 && candidateRawConstructors.get(0).getParameterTypes().length > 0) {\n      candidateConstructors=new Constructor<?>[]{candidateRawConstructors.get(0)};\n    }\n else {\n      candidateConstructors=new Constructor<?>[0];\n    }\n  }\n else {\n    candidateConstructors=returnCandidateConstructors;\n  }\n  candidateConstructorsCache.put(beanClass,candidateConstructors);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 132,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2611,
        "startLineNumber" : 53,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (candidateConstructors == null) {\n  Constructor<?>[] returnCandidateConstructors=(Constructor<?>[])ret;\n  if (returnCandidateConstructors == null) {\n    Constructor<?>[] rawConstructor=beanClass.getDeclaredConstructors();\n    List<Constructor<?>> candidateRawConstructors=new ArrayList<Constructor<?>>();\n    for (    Constructor<?> constructor : rawConstructor) {\n      if (!Modifier.isPrivate(constructor.getModifiers())) {\n        candidateRawConstructors.add(constructor);\n      }\n    }\n    if (candidateRawConstructors.size() == 1 && candidateRawConstructors.get(0).getParameterTypes().length > 0) {\n      candidateConstructors=new Constructor<?>[]{candidateRawConstructors.get(0)};\n    }\n else {\n      candidateConstructors=new Constructor<?>[0];\n    }\n  }\n else {\n    candidateConstructors=returnCandidateConstructors;\n  }\n  candidateConstructorsCache.put(beanClass,candidateConstructors);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 136,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2961,
        "startLineNumber" : 49,
        "startColumnNumber" : 64,
        "endLineNumber" : 95,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Map<Class<?>,Constructor<?>[]> candidateConstructorsCache=(Map<Class<?>,Constructor<?>[]>)objInst.getSkyWalkingDynamicField();\n  Constructor<?>[] candidateConstructors=candidateConstructorsCache.get(beanClass);\n  if (candidateConstructors == null) {\n    Constructor<?>[] returnCandidateConstructors=(Constructor<?>[])ret;\n    if (returnCandidateConstructors == null) {\n      Constructor<?>[] rawConstructor=beanClass.getDeclaredConstructors();\n      List<Constructor<?>> candidateRawConstructors=new ArrayList<Constructor<?>>();\n      for (      Constructor<?> constructor : rawConstructor) {\n        if (!Modifier.isPrivate(constructor.getModifiers())) {\n          candidateRawConstructors.add(constructor);\n        }\n      }\n      if (candidateRawConstructors.size() == 1 && candidateRawConstructors.get(0).getParameterTypes().length > 0) {\n        candidateConstructors=new Constructor<?>[]{candidateRawConstructors.get(0)};\n      }\n else {\n        candidateConstructors=new Constructor<?>[0];\n      }\n    }\n else {\n      candidateConstructors=returnCandidateConstructors;\n    }\n    candidateConstructorsCache.put(beanClass,candidateConstructors);\n  }\n  return candidateConstructors.length > 0 ? candidateConstructors : null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 192,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3017,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 95,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (EnhancedInstance.class.isAssignableFrom(beanClass)) {\n  Map<Class<?>,Constructor<?>[]> candidateConstructorsCache=(Map<Class<?>,Constructor<?>[]>)objInst.getSkyWalkingDynamicField();\n  Constructor<?>[] candidateConstructors=candidateConstructorsCache.get(beanClass);\n  if (candidateConstructors == null) {\n    Constructor<?>[] returnCandidateConstructors=(Constructor<?>[])ret;\n    if (returnCandidateConstructors == null) {\n      Constructor<?>[] rawConstructor=beanClass.getDeclaredConstructors();\n      List<Constructor<?>> candidateRawConstructors=new ArrayList<Constructor<?>>();\n      for (      Constructor<?> constructor : rawConstructor) {\n        if (!Modifier.isPrivate(constructor.getModifiers())) {\n          candidateRawConstructors.add(constructor);\n        }\n      }\n      if (candidateRawConstructors.size() == 1 && candidateRawConstructors.get(0).getParameterTypes().length > 0) {\n        candidateConstructors=new Constructor<?>[]{candidateRawConstructors.get(0)};\n      }\n else {\n        candidateConstructors=new Constructor<?>[0];\n      }\n    }\n else {\n      candidateConstructors=returnCandidateConstructors;\n    }\n    candidateConstructorsCache.put(beanClass,candidateConstructors);\n  }\n  return candidateConstructors.length > 0 ? candidateConstructors : null;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 199,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3110,
        "startLineNumber" : 47,
        "startColumnNumber" : 37,
        "endLineNumber" : 97,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Class<?> beanClass=(Class<?>)allArguments[0];\n  if (EnhancedInstance.class.isAssignableFrom(beanClass)) {\n    Map<Class<?>,Constructor<?>[]> candidateConstructorsCache=(Map<Class<?>,Constructor<?>[]>)objInst.getSkyWalkingDynamicField();\n    Constructor<?>[] candidateConstructors=candidateConstructorsCache.get(beanClass);\n    if (candidateConstructors == null) {\n      Constructor<?>[] returnCandidateConstructors=(Constructor<?>[])ret;\n      if (returnCandidateConstructors == null) {\n        Constructor<?>[] rawConstructor=beanClass.getDeclaredConstructors();\n        List<Constructor<?>> candidateRawConstructors=new ArrayList<Constructor<?>>();\n        for (        Constructor<?> constructor : rawConstructor) {\n          if (!Modifier.isPrivate(constructor.getModifiers())) {\n            candidateRawConstructors.add(constructor);\n          }\n        }\n        if (candidateRawConstructors.size() == 1 && candidateRawConstructors.get(0).getParameterTypes().length > 0) {\n          candidateConstructors=new Constructor<?>[]{candidateRawConstructors.get(0)};\n        }\n else {\n          candidateConstructors=new Constructor<?>[0];\n        }\n      }\n else {\n        candidateConstructors=returnCandidateConstructors;\n      }\n      candidateConstructorsCache.put(beanClass,candidateConstructors);\n    }\n    return candidateConstructors.length > 0 ? candidateConstructors : null;\n  }\n  return ret;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 217,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3278,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 97,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Object afterMethod(EnhancedInstance objInst,Method method,Object[] allArguments,Class<?>[] argumentsTypes,Object ret) throws Throwable {\n  Class<?> beanClass=(Class<?>)allArguments[0];\n  if (EnhancedInstance.class.isAssignableFrom(beanClass)) {\n    Map<Class<?>,Constructor<?>[]> candidateConstructorsCache=(Map<Class<?>,Constructor<?>[]>)objInst.getSkyWalkingDynamicField();\n    Constructor<?>[] candidateConstructors=candidateConstructorsCache.get(beanClass);\n    if (candidateConstructors == null) {\n      Constructor<?>[] returnCandidateConstructors=(Constructor<?>[])ret;\n      if (returnCandidateConstructors == null) {\n        Constructor<?>[] rawConstructor=beanClass.getDeclaredConstructors();\n        List<Constructor<?>> candidateRawConstructors=new ArrayList<Constructor<?>>();\n        for (        Constructor<?> constructor : rawConstructor) {\n          if (!Modifier.isPrivate(constructor.getModifiers())) {\n            candidateRawConstructors.add(constructor);\n          }\n        }\n        if (candidateRawConstructors.size() == 1 && candidateRawConstructors.get(0).getParameterTypes().length > 0) {\n          candidateConstructors=new Constructor<?>[]{candidateRawConstructors.get(0)};\n        }\n else {\n          candidateConstructors=new Constructor<?>[0];\n        }\n      }\n else {\n        candidateConstructors=returnCandidateConstructors;\n      }\n      candidateConstructorsCache.put(beanClass,candidateConstructors);\n    }\n    return candidateConstructors.length > 0 ? candidateConstructors : null;\n  }\n  return ret;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 252,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 151,
        "startLineNumber" : 75,
        "startColumnNumber" : 24,
        "endLineNumber" : 77,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (!Modifier.isPrivate(constructor.getModifiers())) {\n  candidateRawConstructors.add(constructor);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 47,
    "startLineNumber" : 75,
    "startColumnNumber" : 28,
    "endLineNumber" : 75,
    "endColumnNumber" : 75
  } ],
  "layoutRelationDataList" : [ ]
}