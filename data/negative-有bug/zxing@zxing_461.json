{
  "id" : 461,
  "expression" : "end - endRange[0]",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/core/src/com/google/zxing/oned/UPCEANReader.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "end - endRange[0]",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 173,
      "startColumnNumber" : 26,
      "endLineNumber" : 173,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 173,
        "startColumnNumber" : 25,
        "endLineNumber" : 173,
        "endColumnNumber" : 44
      },
      "nodeContext" : "(end - endRange[0])",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 173,
        "startColumnNumber" : 19,
        "endLineNumber" : 173,
        "endColumnNumber" : 44
      },
      "nodeContext" : "end + (end - endRange[0])",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 173,
        "startColumnNumber" : 8,
        "endLineNumber" : 173,
        "endColumnNumber" : 44
      },
      "nodeContext" : "quietEnd=end + (end - endRange[0])",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 173,
        "startColumnNumber" : 4,
        "endLineNumber" : 173,
        "endColumnNumber" : 45
      },
      "nodeContext" : "int quietEnd=end + (end - endRange[0]);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2649,
        "startLineNumber" : 140,
        "startColumnNumber" : 67,
        "endLineNumber" : 210,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ResultPointCallback resultPointCallback=hints == null ? null : (ResultPointCallback)hints.get(DecodeHintType.NEED_RESULT_POINT_CALLBACK);\n  if (resultPointCallback != null) {\n    resultPointCallback.foundPossibleResultPoint(new ResultPoint((startGuardRange[0] + startGuardRange[1]) / 2.0f,rowNumber));\n  }\n  StringBuilder result=decodeRowStringBuffer;\n  result.setLength(0);\n  int endStart=decodeMiddle(row,startGuardRange,result);\n  if (resultPointCallback != null) {\n    resultPointCallback.foundPossibleResultPoint(new ResultPoint(endStart,rowNumber));\n  }\n  int[] endRange=decodeEnd(row,endStart);\n  if (resultPointCallback != null) {\n    resultPointCallback.foundPossibleResultPoint(new ResultPoint((endRange[0] + endRange[1]) / 2.0f,rowNumber));\n  }\n  int end=endRange[1];\n  int quietEnd=end + (end - endRange[0]);\n  if (quietEnd >= row.getSize() || !row.isRange(end,quietEnd,false)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  String resultString=result.toString();\n  if (!checkChecksum(resultString)) {\n    throw ChecksumException.getChecksumInstance();\n  }\n  float left=(float)(startGuardRange[1] + startGuardRange[0]) / 2.0f;\n  float right=(float)(endRange[1] + endRange[0]) / 2.0f;\n  BarcodeFormat format=getBarcodeFormat();\n  Result decodeResult=new Result(resultString,null,new ResultPoint[]{new ResultPoint(left,(float)rowNumber),new ResultPoint(right,(float)rowNumber)},format);\n  try {\n    Result extensionResult=extensionReader.decodeRow(rowNumber,row,endRange[1]);\n    decodeResult.putMetadata(ResultMetadataType.UPC_EAN_EXTENSION,extensionResult.getText());\n    decodeResult.putAllMetadata(extensionResult.getResultMetadata());\n    decodeResult.addResultPoints(extensionResult.getResultPoints());\n  }\n catch (  ReaderException re) {\n  }\n  if (format == BarcodeFormat.EAN_13 || format == BarcodeFormat.UPC_A) {\n    String countryID=eanManSupport.lookupCountryIdentifier(resultString);\n    if (countryID != null) {\n      decodeResult.putMetadata(ResultMetadataType.POSSIBLE_COUNTRY,countryID);\n    }\n  }\n  return decodeResult;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 318,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3157,
        "startLineNumber" : 131,
        "startColumnNumber" : 2,
        "endLineNumber" : 210,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * <p>Like  {@link #decodeRow(int,BitArray,java.util.Map)}, but allows caller to inform method about where the UPC/EAN start pattern is found. This allows this to be computed once and reused across many implementations.</p>\n */\npublic Result decodeRow(int rowNumber,BitArray row,int[] startGuardRange,Map<DecodeHintType,?> hints) throws NotFoundException, ChecksumException, FormatException {\n  ResultPointCallback resultPointCallback=hints == null ? null : (ResultPointCallback)hints.get(DecodeHintType.NEED_RESULT_POINT_CALLBACK);\n  if (resultPointCallback != null) {\n    resultPointCallback.foundPossibleResultPoint(new ResultPoint((startGuardRange[0] + startGuardRange[1]) / 2.0f,rowNumber));\n  }\n  StringBuilder result=decodeRowStringBuffer;\n  result.setLength(0);\n  int endStart=decodeMiddle(row,startGuardRange,result);\n  if (resultPointCallback != null) {\n    resultPointCallback.foundPossibleResultPoint(new ResultPoint(endStart,rowNumber));\n  }\n  int[] endRange=decodeEnd(row,endStart);\n  if (resultPointCallback != null) {\n    resultPointCallback.foundPossibleResultPoint(new ResultPoint((endRange[0] + endRange[1]) / 2.0f,rowNumber));\n  }\n  int end=endRange[1];\n  int quietEnd=end + (end - endRange[0]);\n  if (quietEnd >= row.getSize() || !row.isRange(end,quietEnd,false)) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  String resultString=result.toString();\n  if (!checkChecksum(resultString)) {\n    throw ChecksumException.getChecksumInstance();\n  }\n  float left=(float)(startGuardRange[1] + startGuardRange[0]) / 2.0f;\n  float right=(float)(endRange[1] + endRange[0]) / 2.0f;\n  BarcodeFormat format=getBarcodeFormat();\n  Result decodeResult=new Result(resultString,null,new ResultPoint[]{new ResultPoint(left,(float)rowNumber),new ResultPoint(right,(float)rowNumber)},format);\n  try {\n    Result extensionResult=extensionReader.decodeRow(rowNumber,row,endRange[1]);\n    decodeResult.putMetadata(ResultMetadataType.UPC_EAN_EXTENSION,extensionResult.getText());\n    decodeResult.putAllMetadata(extensionResult.getResultMetadata());\n    decodeResult.addResultPoints(extensionResult.getResultPoints());\n  }\n catch (  ReaderException re) {\n  }\n  if (format == BarcodeFormat.EAN_13 || format == BarcodeFormat.UPC_A) {\n    String countryID=eanManSupport.lookupCountryIdentifier(resultString);\n    if (countryID != null) {\n      decodeResult.putMetadata(ResultMetadataType.POSSIBLE_COUNTRY,countryID);\n    }\n  }\n  return decodeResult;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 350,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 173,
        "startColumnNumber" : 4,
        "endLineNumber" : 173,
        "endColumnNumber" : 45
      },
      "nodeContext" : "int quietEnd=end + (end - endRange[0]);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 7
    },
    "tokenLength" : 4,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 173,
    "startColumnNumber" : 26,
    "endLineNumber" : 173,
    "endColumnNumber" : 43
  } ],
  "layoutRelationDataList" : [ ]
}