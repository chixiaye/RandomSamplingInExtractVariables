{
  "id" : 320,
  "expression" : "TimeUnit.MILLISECONDS",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/SourceTaskOffsetCommitterTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "TimeUnit.MILLISECONDS",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 85,
      "startColumnNumber" : 58,
      "endLineNumber" : 85,
      "endColumnNumber" : 79
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 85,
        "startColumnNumber" : 55,
        "endLineNumber" : 85,
        "endColumnNumber" : 80
      },
      "nodeContext" : "eq(TimeUnit.MILLISECONDS)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 200,
        "startLineNumber" : 83,
        "startColumnNumber" : 24,
        "endLineNumber" : 85,
        "endColumnNumber" : 81
      },
      "nodeContext" : "executor.scheduleWithFixedDelay(EasyMock.capture(taskWrapper),eq(DEFAULT_OFFSET_COMMIT_INTERVAL_MS),eq(DEFAULT_OFFSET_COMMIT_INTERVAL_MS),eq(TimeUnit.MILLISECONDS))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 226,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 86,
        "endColumnNumber" : 9
      },
      "nodeContext" : "EasyMock.expect(executor.scheduleWithFixedDelay(EasyMock.capture(taskWrapper),eq(DEFAULT_OFFSET_COMMIT_INTERVAL_MS),eq(DEFAULT_OFFSET_COMMIT_INTERVAL_MS),eq(TimeUnit.MILLISECONDS)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 21,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 268,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 86,
        "endColumnNumber" : 51
      },
      "nodeContext" : "EasyMock.expect(executor.scheduleWithFixedDelay(EasyMock.capture(taskWrapper),eq(DEFAULT_OFFSET_COMMIT_INTERVAL_MS),eq(DEFAULT_OFFSET_COMMIT_INTERVAL_MS),eq(TimeUnit.MILLISECONDS))).andReturn((ScheduledFuture)commitFuture)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 27,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 269,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 86,
        "endColumnNumber" : 52
      },
      "nodeContext" : "EasyMock.expect(executor.scheduleWithFixedDelay(EasyMock.capture(taskWrapper),eq(DEFAULT_OFFSET_COMMIT_INTERVAL_MS),eq(DEFAULT_OFFSET_COMMIT_INTERVAL_MS),eq(TimeUnit.MILLISECONDS))).andReturn((ScheduledFuture)commitFuture);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 28,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 620,
        "startLineNumber" : 80,
        "startColumnNumber" : 31,
        "endLineNumber" : 96,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Capture<Runnable> taskWrapper=EasyMock.newCapture();\n  EasyMock.expect(executor.scheduleWithFixedDelay(EasyMock.capture(taskWrapper),eq(DEFAULT_OFFSET_COMMIT_INTERVAL_MS),eq(DEFAULT_OFFSET_COMMIT_INTERVAL_MS),eq(TimeUnit.MILLISECONDS))).andReturn((ScheduledFuture)commitFuture);\n  PowerMock.replayAll();\n  committer.schedule(taskId,task);\n  assertTrue(taskWrapper.hasCaptured());\n  assertNotNull(taskWrapper.getValue());\n  assertEquals(singletonMap(taskId,commitFuture),committers);\n  PowerMock.verifyAll();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 74,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 692,
        "startLineNumber" : 78,
        "startColumnNumber" : 4,
        "endLineNumber" : 96,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") @Test public void testSchedule(){\n  Capture<Runnable> taskWrapper=EasyMock.newCapture();\n  EasyMock.expect(executor.scheduleWithFixedDelay(EasyMock.capture(taskWrapper),eq(DEFAULT_OFFSET_COMMIT_INTERVAL_MS),eq(DEFAULT_OFFSET_COMMIT_INTERVAL_MS),eq(TimeUnit.MILLISECONDS))).andReturn((ScheduledFuture)commitFuture);\n  PowerMock.replayAll();\n  committer.schedule(taskId,task);\n  assertTrue(taskWrapper.hasCaptured());\n  assertNotNull(taskWrapper.getValue());\n  assertEquals(singletonMap(taskId,commitFuture),committers);\n  PowerMock.verifyAll();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 83,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 85,
        "startColumnNumber" : 55,
        "endLineNumber" : 85,
        "endColumnNumber" : 80
      },
      "nodeContext" : "eq(TimeUnit.MILLISECONDS)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "java.util.concurrent.TimeUnit"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 85,
    "startColumnNumber" : 58,
    "endLineNumber" : 85,
    "endColumnNumber" : 79
  } ],
  "layoutRelationDataList" : [ ]
}