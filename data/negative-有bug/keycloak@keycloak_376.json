{
  "id" : 376,
  "expression" : "mce",
  "projectName" : "keycloak@keycloak",
  "commitID" : "aacae9b9acb0fbedc49d4f88c9fbd7aa11922dce",
  "filePath" : "/testsuite/model/src/test/java/org/keycloak/testsuite/model/storage/tree/sample/DictTest.java",
  "occurrences" : 13,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "mce",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 18,
      "startColumnNumber" : 19,
      "endLineNumber" : 18,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 18,
        "startColumnNumber" : 19,
        "endLineNumber" : 18,
        "endColumnNumber" : 36
      },
      "nodeContext" : "mce.getClientId()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 18,
        "startColumnNumber" : 8,
        "endLineNumber" : 18,
        "endColumnNumber" : 50
      },
      "nodeContext" : "assertThat(mce.getClientId(),nullValue())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 18,
        "startColumnNumber" : 8,
        "endLineNumber" : 18,
        "endColumnNumber" : 51
      },
      "nodeContext" : "assertThat(mce.getClientId(),nullValue());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 846,
        "startLineNumber" : 16,
        "startColumnNumber" : 40,
        "endLineNumber" : 33,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MapClientEntity mce=Dict.clientDelegate();\n  assertThat(mce.getClientId(),nullValue());\n  assertThat(mce.isEnabled(),nullValue());\n  assertThat(mce.getAttribute(\"logo\"),nullValue());\n  assertThat(mce.getAttributes().keySet(),is(empty()));\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_NAME,\"name\");\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_ENABLED,false);\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_LOGO,\"thisShouldBeBase64Logo\");\n  Dict.asDict(mce).put(\"nonexistent\",\"nonexistent\");\n  assertThat(mce.getId(),is(\"name\"));\n  assertThat(mce.getClientId(),is(\"name\"));\n  assertThat(mce.isEnabled(),is(false));\n  assertThat(mce.getAttribute(\"logo\"),hasItems(\"thisShouldBeBase64Logo\"));\n  assertThat(mce.getAttributes().keySet(),hasItems(\"logo\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 136,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 892,
        "startLineNumber" : 15,
        "startColumnNumber" : 4,
        "endLineNumber" : 33,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testDictClientFromMap(){\n  MapClientEntity mce=Dict.clientDelegate();\n  assertThat(mce.getClientId(),nullValue());\n  assertThat(mce.isEnabled(),nullValue());\n  assertThat(mce.getAttribute(\"logo\"),nullValue());\n  assertThat(mce.getAttributes().keySet(),is(empty()));\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_NAME,\"name\");\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_ENABLED,false);\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_LOGO,\"thisShouldBeBase64Logo\");\n  Dict.asDict(mce).put(\"nonexistent\",\"nonexistent\");\n  assertThat(mce.getId(),is(\"name\"));\n  assertThat(mce.getClientId(),is(\"name\"));\n  assertThat(mce.isEnabled(),is(false));\n  assertThat(mce.getAttribute(\"logo\"),hasItems(\"thisShouldBeBase64Logo\"));\n  assertThat(mce.getAttributes().keySet(),hasItems(\"logo\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 142,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 18,
        "startColumnNumber" : 8,
        "endLineNumber" : 18,
        "endColumnNumber" : 51
      },
      "nodeContext" : "assertThat(mce.getClientId(),nullValue());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.keycloak.models.map.client.MapClientEntity"
  }, {
    "nodeContext" : "mce",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 19,
      "startColumnNumber" : 19,
      "endLineNumber" : 19,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 19,
        "startColumnNumber" : 19,
        "endLineNumber" : 19,
        "endColumnNumber" : 34
      },
      "nodeContext" : "mce.isEnabled()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 19,
        "startColumnNumber" : 8,
        "endLineNumber" : 19,
        "endColumnNumber" : 48
      },
      "nodeContext" : "assertThat(mce.isEnabled(),nullValue())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 19,
        "startColumnNumber" : 8,
        "endLineNumber" : 19,
        "endColumnNumber" : 49
      },
      "nodeContext" : "assertThat(mce.isEnabled(),nullValue());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 846,
        "startLineNumber" : 16,
        "startColumnNumber" : 40,
        "endLineNumber" : 33,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MapClientEntity mce=Dict.clientDelegate();\n  assertThat(mce.getClientId(),nullValue());\n  assertThat(mce.isEnabled(),nullValue());\n  assertThat(mce.getAttribute(\"logo\"),nullValue());\n  assertThat(mce.getAttributes().keySet(),is(empty()));\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_NAME,\"name\");\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_ENABLED,false);\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_LOGO,\"thisShouldBeBase64Logo\");\n  Dict.asDict(mce).put(\"nonexistent\",\"nonexistent\");\n  assertThat(mce.getId(),is(\"name\"));\n  assertThat(mce.getClientId(),is(\"name\"));\n  assertThat(mce.isEnabled(),is(false));\n  assertThat(mce.getAttribute(\"logo\"),hasItems(\"thisShouldBeBase64Logo\"));\n  assertThat(mce.getAttributes().keySet(),hasItems(\"logo\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 136,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 892,
        "startLineNumber" : 15,
        "startColumnNumber" : 4,
        "endLineNumber" : 33,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testDictClientFromMap(){\n  MapClientEntity mce=Dict.clientDelegate();\n  assertThat(mce.getClientId(),nullValue());\n  assertThat(mce.isEnabled(),nullValue());\n  assertThat(mce.getAttribute(\"logo\"),nullValue());\n  assertThat(mce.getAttributes().keySet(),is(empty()));\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_NAME,\"name\");\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_ENABLED,false);\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_LOGO,\"thisShouldBeBase64Logo\");\n  Dict.asDict(mce).put(\"nonexistent\",\"nonexistent\");\n  assertThat(mce.getId(),is(\"name\"));\n  assertThat(mce.getClientId(),is(\"name\"));\n  assertThat(mce.isEnabled(),is(false));\n  assertThat(mce.getAttribute(\"logo\"),hasItems(\"thisShouldBeBase64Logo\"));\n  assertThat(mce.getAttributes().keySet(),hasItems(\"logo\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 142,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 19,
        "startColumnNumber" : 8,
        "endLineNumber" : 19,
        "endColumnNumber" : 49
      },
      "nodeContext" : "assertThat(mce.isEnabled(),nullValue());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.keycloak.models.map.client.MapClientEntity"
  }, {
    "nodeContext" : "mce",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 20,
      "startColumnNumber" : 19,
      "endLineNumber" : 20,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 20,
        "startColumnNumber" : 19,
        "endLineNumber" : 20,
        "endColumnNumber" : 43
      },
      "nodeContext" : "mce.getAttribute(\"logo\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 20,
        "startColumnNumber" : 8,
        "endLineNumber" : 20,
        "endColumnNumber" : 57
      },
      "nodeContext" : "assertThat(mce.getAttribute(\"logo\"),nullValue())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 20,
        "startColumnNumber" : 8,
        "endLineNumber" : 20,
        "endColumnNumber" : 58
      },
      "nodeContext" : "assertThat(mce.getAttribute(\"logo\"),nullValue());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 846,
        "startLineNumber" : 16,
        "startColumnNumber" : 40,
        "endLineNumber" : 33,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MapClientEntity mce=Dict.clientDelegate();\n  assertThat(mce.getClientId(),nullValue());\n  assertThat(mce.isEnabled(),nullValue());\n  assertThat(mce.getAttribute(\"logo\"),nullValue());\n  assertThat(mce.getAttributes().keySet(),is(empty()));\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_NAME,\"name\");\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_ENABLED,false);\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_LOGO,\"thisShouldBeBase64Logo\");\n  Dict.asDict(mce).put(\"nonexistent\",\"nonexistent\");\n  assertThat(mce.getId(),is(\"name\"));\n  assertThat(mce.getClientId(),is(\"name\"));\n  assertThat(mce.isEnabled(),is(false));\n  assertThat(mce.getAttribute(\"logo\"),hasItems(\"thisShouldBeBase64Logo\"));\n  assertThat(mce.getAttributes().keySet(),hasItems(\"logo\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 136,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 892,
        "startLineNumber" : 15,
        "startColumnNumber" : 4,
        "endLineNumber" : 33,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testDictClientFromMap(){\n  MapClientEntity mce=Dict.clientDelegate();\n  assertThat(mce.getClientId(),nullValue());\n  assertThat(mce.isEnabled(),nullValue());\n  assertThat(mce.getAttribute(\"logo\"),nullValue());\n  assertThat(mce.getAttributes().keySet(),is(empty()));\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_NAME,\"name\");\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_ENABLED,false);\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_LOGO,\"thisShouldBeBase64Logo\");\n  Dict.asDict(mce).put(\"nonexistent\",\"nonexistent\");\n  assertThat(mce.getId(),is(\"name\"));\n  assertThat(mce.getClientId(),is(\"name\"));\n  assertThat(mce.isEnabled(),is(false));\n  assertThat(mce.getAttribute(\"logo\"),hasItems(\"thisShouldBeBase64Logo\"));\n  assertThat(mce.getAttributes().keySet(),hasItems(\"logo\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 142,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 20,
        "startColumnNumber" : 8,
        "endLineNumber" : 20,
        "endColumnNumber" : 58
      },
      "nodeContext" : "assertThat(mce.getAttribute(\"logo\"),nullValue());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.keycloak.models.map.client.MapClientEntity"
  }, {
    "nodeContext" : "mce",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 21,
      "startColumnNumber" : 19,
      "endLineNumber" : 21,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 21,
        "startColumnNumber" : 19,
        "endLineNumber" : 21,
        "endColumnNumber" : 38
      },
      "nodeContext" : "mce.getAttributes()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 21,
        "startColumnNumber" : 19,
        "endLineNumber" : 21,
        "endColumnNumber" : 47
      },
      "nodeContext" : "mce.getAttributes().keySet()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 21,
        "startColumnNumber" : 8,
        "endLineNumber" : 21,
        "endColumnNumber" : 61
      },
      "nodeContext" : "assertThat(mce.getAttributes().keySet(),is(empty()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 21,
        "startColumnNumber" : 8,
        "endLineNumber" : 21,
        "endColumnNumber" : 62
      },
      "nodeContext" : "assertThat(mce.getAttributes().keySet(),is(empty()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 846,
        "startLineNumber" : 16,
        "startColumnNumber" : 40,
        "endLineNumber" : 33,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MapClientEntity mce=Dict.clientDelegate();\n  assertThat(mce.getClientId(),nullValue());\n  assertThat(mce.isEnabled(),nullValue());\n  assertThat(mce.getAttribute(\"logo\"),nullValue());\n  assertThat(mce.getAttributes().keySet(),is(empty()));\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_NAME,\"name\");\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_ENABLED,false);\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_LOGO,\"thisShouldBeBase64Logo\");\n  Dict.asDict(mce).put(\"nonexistent\",\"nonexistent\");\n  assertThat(mce.getId(),is(\"name\"));\n  assertThat(mce.getClientId(),is(\"name\"));\n  assertThat(mce.isEnabled(),is(false));\n  assertThat(mce.getAttribute(\"logo\"),hasItems(\"thisShouldBeBase64Logo\"));\n  assertThat(mce.getAttributes().keySet(),hasItems(\"logo\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 136,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 892,
        "startLineNumber" : 15,
        "startColumnNumber" : 4,
        "endLineNumber" : 33,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testDictClientFromMap(){\n  MapClientEntity mce=Dict.clientDelegate();\n  assertThat(mce.getClientId(),nullValue());\n  assertThat(mce.isEnabled(),nullValue());\n  assertThat(mce.getAttribute(\"logo\"),nullValue());\n  assertThat(mce.getAttributes().keySet(),is(empty()));\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_NAME,\"name\");\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_ENABLED,false);\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_LOGO,\"thisShouldBeBase64Logo\");\n  Dict.asDict(mce).put(\"nonexistent\",\"nonexistent\");\n  assertThat(mce.getId(),is(\"name\"));\n  assertThat(mce.getClientId(),is(\"name\"));\n  assertThat(mce.isEnabled(),is(false));\n  assertThat(mce.getAttribute(\"logo\"),hasItems(\"thisShouldBeBase64Logo\"));\n  assertThat(mce.getAttributes().keySet(),hasItems(\"logo\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 142,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 21,
        "startColumnNumber" : 8,
        "endLineNumber" : 21,
        "endColumnNumber" : 62
      },
      "nodeContext" : "assertThat(mce.getAttributes().keySet(),is(empty()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.keycloak.models.map.client.MapClientEntity"
  }, {
    "nodeContext" : "mce",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 23,
      "startColumnNumber" : 20,
      "endLineNumber" : 23,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 23,
        "startColumnNumber" : 8,
        "endLineNumber" : 23,
        "endColumnNumber" : 24
      },
      "nodeContext" : "Dict.asDict(mce)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 23,
        "startColumnNumber" : 8,
        "endLineNumber" : 23,
        "endColumnNumber" : 60
      },
      "nodeContext" : "Dict.asDict(mce).put(Dict.CLIENT_FIELD_NAME,\"name\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 23,
        "startColumnNumber" : 8,
        "endLineNumber" : 23,
        "endColumnNumber" : 61
      },
      "nodeContext" : "Dict.asDict(mce).put(Dict.CLIENT_FIELD_NAME,\"name\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 846,
        "startLineNumber" : 16,
        "startColumnNumber" : 40,
        "endLineNumber" : 33,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MapClientEntity mce=Dict.clientDelegate();\n  assertThat(mce.getClientId(),nullValue());\n  assertThat(mce.isEnabled(),nullValue());\n  assertThat(mce.getAttribute(\"logo\"),nullValue());\n  assertThat(mce.getAttributes().keySet(),is(empty()));\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_NAME,\"name\");\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_ENABLED,false);\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_LOGO,\"thisShouldBeBase64Logo\");\n  Dict.asDict(mce).put(\"nonexistent\",\"nonexistent\");\n  assertThat(mce.getId(),is(\"name\"));\n  assertThat(mce.getClientId(),is(\"name\"));\n  assertThat(mce.isEnabled(),is(false));\n  assertThat(mce.getAttribute(\"logo\"),hasItems(\"thisShouldBeBase64Logo\"));\n  assertThat(mce.getAttributes().keySet(),hasItems(\"logo\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 136,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 892,
        "startLineNumber" : 15,
        "startColumnNumber" : 4,
        "endLineNumber" : 33,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testDictClientFromMap(){\n  MapClientEntity mce=Dict.clientDelegate();\n  assertThat(mce.getClientId(),nullValue());\n  assertThat(mce.isEnabled(),nullValue());\n  assertThat(mce.getAttribute(\"logo\"),nullValue());\n  assertThat(mce.getAttributes().keySet(),is(empty()));\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_NAME,\"name\");\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_ENABLED,false);\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_LOGO,\"thisShouldBeBase64Logo\");\n  Dict.asDict(mce).put(\"nonexistent\",\"nonexistent\");\n  assertThat(mce.getId(),is(\"name\"));\n  assertThat(mce.getClientId(),is(\"name\"));\n  assertThat(mce.isEnabled(),is(false));\n  assertThat(mce.getAttribute(\"logo\"),hasItems(\"thisShouldBeBase64Logo\"));\n  assertThat(mce.getAttributes().keySet(),hasItems(\"logo\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 142,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 23,
        "startColumnNumber" : 8,
        "endLineNumber" : 23,
        "endColumnNumber" : 61
      },
      "nodeContext" : "Dict.asDict(mce).put(Dict.CLIENT_FIELD_NAME,\"name\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.keycloak.models.map.client.MapClientEntity"
  }, {
    "nodeContext" : "mce",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 24,
      "startColumnNumber" : 20,
      "endLineNumber" : 24,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 24,
        "startColumnNumber" : 8,
        "endLineNumber" : 24,
        "endColumnNumber" : 24
      },
      "nodeContext" : "Dict.asDict(mce)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 24,
        "startColumnNumber" : 8,
        "endLineNumber" : 24,
        "endColumnNumber" : 62
      },
      "nodeContext" : "Dict.asDict(mce).put(Dict.CLIENT_FIELD_ENABLED,false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 24,
        "startColumnNumber" : 8,
        "endLineNumber" : 24,
        "endColumnNumber" : 63
      },
      "nodeContext" : "Dict.asDict(mce).put(Dict.CLIENT_FIELD_ENABLED,false);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 846,
        "startLineNumber" : 16,
        "startColumnNumber" : 40,
        "endLineNumber" : 33,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MapClientEntity mce=Dict.clientDelegate();\n  assertThat(mce.getClientId(),nullValue());\n  assertThat(mce.isEnabled(),nullValue());\n  assertThat(mce.getAttribute(\"logo\"),nullValue());\n  assertThat(mce.getAttributes().keySet(),is(empty()));\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_NAME,\"name\");\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_ENABLED,false);\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_LOGO,\"thisShouldBeBase64Logo\");\n  Dict.asDict(mce).put(\"nonexistent\",\"nonexistent\");\n  assertThat(mce.getId(),is(\"name\"));\n  assertThat(mce.getClientId(),is(\"name\"));\n  assertThat(mce.isEnabled(),is(false));\n  assertThat(mce.getAttribute(\"logo\"),hasItems(\"thisShouldBeBase64Logo\"));\n  assertThat(mce.getAttributes().keySet(),hasItems(\"logo\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 136,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 892,
        "startLineNumber" : 15,
        "startColumnNumber" : 4,
        "endLineNumber" : 33,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testDictClientFromMap(){\n  MapClientEntity mce=Dict.clientDelegate();\n  assertThat(mce.getClientId(),nullValue());\n  assertThat(mce.isEnabled(),nullValue());\n  assertThat(mce.getAttribute(\"logo\"),nullValue());\n  assertThat(mce.getAttributes().keySet(),is(empty()));\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_NAME,\"name\");\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_ENABLED,false);\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_LOGO,\"thisShouldBeBase64Logo\");\n  Dict.asDict(mce).put(\"nonexistent\",\"nonexistent\");\n  assertThat(mce.getId(),is(\"name\"));\n  assertThat(mce.getClientId(),is(\"name\"));\n  assertThat(mce.isEnabled(),is(false));\n  assertThat(mce.getAttribute(\"logo\"),hasItems(\"thisShouldBeBase64Logo\"));\n  assertThat(mce.getAttributes().keySet(),hasItems(\"logo\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 142,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 24,
        "startColumnNumber" : 8,
        "endLineNumber" : 24,
        "endColumnNumber" : 63
      },
      "nodeContext" : "Dict.asDict(mce).put(Dict.CLIENT_FIELD_ENABLED,false);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.keycloak.models.map.client.MapClientEntity"
  }, {
    "nodeContext" : "mce",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 25,
      "startColumnNumber" : 20,
      "endLineNumber" : 25,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 25,
        "startColumnNumber" : 8,
        "endLineNumber" : 25,
        "endColumnNumber" : 24
      },
      "nodeContext" : "Dict.asDict(mce)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 25,
        "startColumnNumber" : 8,
        "endLineNumber" : 25,
        "endColumnNumber" : 78
      },
      "nodeContext" : "Dict.asDict(mce).put(Dict.CLIENT_FIELD_LOGO,\"thisShouldBeBase64Logo\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 25,
        "startColumnNumber" : 8,
        "endLineNumber" : 25,
        "endColumnNumber" : 79
      },
      "nodeContext" : "Dict.asDict(mce).put(Dict.CLIENT_FIELD_LOGO,\"thisShouldBeBase64Logo\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 846,
        "startLineNumber" : 16,
        "startColumnNumber" : 40,
        "endLineNumber" : 33,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MapClientEntity mce=Dict.clientDelegate();\n  assertThat(mce.getClientId(),nullValue());\n  assertThat(mce.isEnabled(),nullValue());\n  assertThat(mce.getAttribute(\"logo\"),nullValue());\n  assertThat(mce.getAttributes().keySet(),is(empty()));\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_NAME,\"name\");\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_ENABLED,false);\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_LOGO,\"thisShouldBeBase64Logo\");\n  Dict.asDict(mce).put(\"nonexistent\",\"nonexistent\");\n  assertThat(mce.getId(),is(\"name\"));\n  assertThat(mce.getClientId(),is(\"name\"));\n  assertThat(mce.isEnabled(),is(false));\n  assertThat(mce.getAttribute(\"logo\"),hasItems(\"thisShouldBeBase64Logo\"));\n  assertThat(mce.getAttributes().keySet(),hasItems(\"logo\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 136,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 892,
        "startLineNumber" : 15,
        "startColumnNumber" : 4,
        "endLineNumber" : 33,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testDictClientFromMap(){\n  MapClientEntity mce=Dict.clientDelegate();\n  assertThat(mce.getClientId(),nullValue());\n  assertThat(mce.isEnabled(),nullValue());\n  assertThat(mce.getAttribute(\"logo\"),nullValue());\n  assertThat(mce.getAttributes().keySet(),is(empty()));\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_NAME,\"name\");\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_ENABLED,false);\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_LOGO,\"thisShouldBeBase64Logo\");\n  Dict.asDict(mce).put(\"nonexistent\",\"nonexistent\");\n  assertThat(mce.getId(),is(\"name\"));\n  assertThat(mce.getClientId(),is(\"name\"));\n  assertThat(mce.isEnabled(),is(false));\n  assertThat(mce.getAttribute(\"logo\"),hasItems(\"thisShouldBeBase64Logo\"));\n  assertThat(mce.getAttributes().keySet(),hasItems(\"logo\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 142,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 25,
        "startColumnNumber" : 8,
        "endLineNumber" : 25,
        "endColumnNumber" : 79
      },
      "nodeContext" : "Dict.asDict(mce).put(Dict.CLIENT_FIELD_LOGO,\"thisShouldBeBase64Logo\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.keycloak.models.map.client.MapClientEntity"
  }, {
    "nodeContext" : "mce",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 26,
      "startColumnNumber" : 20,
      "endLineNumber" : 26,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 26,
        "startColumnNumber" : 8,
        "endLineNumber" : 26,
        "endColumnNumber" : 24
      },
      "nodeContext" : "Dict.asDict(mce)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 26,
        "startColumnNumber" : 8,
        "endLineNumber" : 26,
        "endColumnNumber" : 58
      },
      "nodeContext" : "Dict.asDict(mce).put(\"nonexistent\",\"nonexistent\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 26,
        "startColumnNumber" : 8,
        "endLineNumber" : 26,
        "endColumnNumber" : 59
      },
      "nodeContext" : "Dict.asDict(mce).put(\"nonexistent\",\"nonexistent\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 846,
        "startLineNumber" : 16,
        "startColumnNumber" : 40,
        "endLineNumber" : 33,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MapClientEntity mce=Dict.clientDelegate();\n  assertThat(mce.getClientId(),nullValue());\n  assertThat(mce.isEnabled(),nullValue());\n  assertThat(mce.getAttribute(\"logo\"),nullValue());\n  assertThat(mce.getAttributes().keySet(),is(empty()));\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_NAME,\"name\");\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_ENABLED,false);\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_LOGO,\"thisShouldBeBase64Logo\");\n  Dict.asDict(mce).put(\"nonexistent\",\"nonexistent\");\n  assertThat(mce.getId(),is(\"name\"));\n  assertThat(mce.getClientId(),is(\"name\"));\n  assertThat(mce.isEnabled(),is(false));\n  assertThat(mce.getAttribute(\"logo\"),hasItems(\"thisShouldBeBase64Logo\"));\n  assertThat(mce.getAttributes().keySet(),hasItems(\"logo\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 136,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 892,
        "startLineNumber" : 15,
        "startColumnNumber" : 4,
        "endLineNumber" : 33,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testDictClientFromMap(){\n  MapClientEntity mce=Dict.clientDelegate();\n  assertThat(mce.getClientId(),nullValue());\n  assertThat(mce.isEnabled(),nullValue());\n  assertThat(mce.getAttribute(\"logo\"),nullValue());\n  assertThat(mce.getAttributes().keySet(),is(empty()));\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_NAME,\"name\");\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_ENABLED,false);\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_LOGO,\"thisShouldBeBase64Logo\");\n  Dict.asDict(mce).put(\"nonexistent\",\"nonexistent\");\n  assertThat(mce.getId(),is(\"name\"));\n  assertThat(mce.getClientId(),is(\"name\"));\n  assertThat(mce.isEnabled(),is(false));\n  assertThat(mce.getAttribute(\"logo\"),hasItems(\"thisShouldBeBase64Logo\"));\n  assertThat(mce.getAttributes().keySet(),hasItems(\"logo\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 142,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 26,
        "startColumnNumber" : 8,
        "endLineNumber" : 26,
        "endColumnNumber" : 59
      },
      "nodeContext" : "Dict.asDict(mce).put(\"nonexistent\",\"nonexistent\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.keycloak.models.map.client.MapClientEntity"
  }, {
    "nodeContext" : "mce",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 28,
      "startColumnNumber" : 19,
      "endLineNumber" : 28,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 28,
        "startColumnNumber" : 19,
        "endLineNumber" : 28,
        "endColumnNumber" : 30
      },
      "nodeContext" : "mce.getId()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 28,
        "startColumnNumber" : 8,
        "endLineNumber" : 28,
        "endColumnNumber" : 43
      },
      "nodeContext" : "assertThat(mce.getId(),is(\"name\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 28,
        "startColumnNumber" : 8,
        "endLineNumber" : 28,
        "endColumnNumber" : 44
      },
      "nodeContext" : "assertThat(mce.getId(),is(\"name\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 846,
        "startLineNumber" : 16,
        "startColumnNumber" : 40,
        "endLineNumber" : 33,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MapClientEntity mce=Dict.clientDelegate();\n  assertThat(mce.getClientId(),nullValue());\n  assertThat(mce.isEnabled(),nullValue());\n  assertThat(mce.getAttribute(\"logo\"),nullValue());\n  assertThat(mce.getAttributes().keySet(),is(empty()));\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_NAME,\"name\");\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_ENABLED,false);\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_LOGO,\"thisShouldBeBase64Logo\");\n  Dict.asDict(mce).put(\"nonexistent\",\"nonexistent\");\n  assertThat(mce.getId(),is(\"name\"));\n  assertThat(mce.getClientId(),is(\"name\"));\n  assertThat(mce.isEnabled(),is(false));\n  assertThat(mce.getAttribute(\"logo\"),hasItems(\"thisShouldBeBase64Logo\"));\n  assertThat(mce.getAttributes().keySet(),hasItems(\"logo\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 136,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 892,
        "startLineNumber" : 15,
        "startColumnNumber" : 4,
        "endLineNumber" : 33,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testDictClientFromMap(){\n  MapClientEntity mce=Dict.clientDelegate();\n  assertThat(mce.getClientId(),nullValue());\n  assertThat(mce.isEnabled(),nullValue());\n  assertThat(mce.getAttribute(\"logo\"),nullValue());\n  assertThat(mce.getAttributes().keySet(),is(empty()));\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_NAME,\"name\");\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_ENABLED,false);\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_LOGO,\"thisShouldBeBase64Logo\");\n  Dict.asDict(mce).put(\"nonexistent\",\"nonexistent\");\n  assertThat(mce.getId(),is(\"name\"));\n  assertThat(mce.getClientId(),is(\"name\"));\n  assertThat(mce.isEnabled(),is(false));\n  assertThat(mce.getAttribute(\"logo\"),hasItems(\"thisShouldBeBase64Logo\"));\n  assertThat(mce.getAttributes().keySet(),hasItems(\"logo\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 142,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 28,
        "startColumnNumber" : 8,
        "endLineNumber" : 28,
        "endColumnNumber" : 44
      },
      "nodeContext" : "assertThat(mce.getId(),is(\"name\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.keycloak.models.map.client.MapClientEntity"
  }, {
    "nodeContext" : "mce",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 29,
      "startColumnNumber" : 19,
      "endLineNumber" : 29,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 29,
        "startColumnNumber" : 19,
        "endLineNumber" : 29,
        "endColumnNumber" : 36
      },
      "nodeContext" : "mce.getClientId()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 29,
        "startColumnNumber" : 8,
        "endLineNumber" : 29,
        "endColumnNumber" : 49
      },
      "nodeContext" : "assertThat(mce.getClientId(),is(\"name\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 29,
        "startColumnNumber" : 8,
        "endLineNumber" : 29,
        "endColumnNumber" : 50
      },
      "nodeContext" : "assertThat(mce.getClientId(),is(\"name\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 846,
        "startLineNumber" : 16,
        "startColumnNumber" : 40,
        "endLineNumber" : 33,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MapClientEntity mce=Dict.clientDelegate();\n  assertThat(mce.getClientId(),nullValue());\n  assertThat(mce.isEnabled(),nullValue());\n  assertThat(mce.getAttribute(\"logo\"),nullValue());\n  assertThat(mce.getAttributes().keySet(),is(empty()));\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_NAME,\"name\");\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_ENABLED,false);\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_LOGO,\"thisShouldBeBase64Logo\");\n  Dict.asDict(mce).put(\"nonexistent\",\"nonexistent\");\n  assertThat(mce.getId(),is(\"name\"));\n  assertThat(mce.getClientId(),is(\"name\"));\n  assertThat(mce.isEnabled(),is(false));\n  assertThat(mce.getAttribute(\"logo\"),hasItems(\"thisShouldBeBase64Logo\"));\n  assertThat(mce.getAttributes().keySet(),hasItems(\"logo\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 136,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 892,
        "startLineNumber" : 15,
        "startColumnNumber" : 4,
        "endLineNumber" : 33,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testDictClientFromMap(){\n  MapClientEntity mce=Dict.clientDelegate();\n  assertThat(mce.getClientId(),nullValue());\n  assertThat(mce.isEnabled(),nullValue());\n  assertThat(mce.getAttribute(\"logo\"),nullValue());\n  assertThat(mce.getAttributes().keySet(),is(empty()));\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_NAME,\"name\");\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_ENABLED,false);\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_LOGO,\"thisShouldBeBase64Logo\");\n  Dict.asDict(mce).put(\"nonexistent\",\"nonexistent\");\n  assertThat(mce.getId(),is(\"name\"));\n  assertThat(mce.getClientId(),is(\"name\"));\n  assertThat(mce.isEnabled(),is(false));\n  assertThat(mce.getAttribute(\"logo\"),hasItems(\"thisShouldBeBase64Logo\"));\n  assertThat(mce.getAttributes().keySet(),hasItems(\"logo\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 142,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 29,
        "startColumnNumber" : 8,
        "endLineNumber" : 29,
        "endColumnNumber" : 50
      },
      "nodeContext" : "assertThat(mce.getClientId(),is(\"name\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.keycloak.models.map.client.MapClientEntity"
  }, {
    "nodeContext" : "mce",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 30,
      "startColumnNumber" : 19,
      "endLineNumber" : 30,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 30,
        "startColumnNumber" : 19,
        "endLineNumber" : 30,
        "endColumnNumber" : 34
      },
      "nodeContext" : "mce.isEnabled()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 30,
        "startColumnNumber" : 8,
        "endLineNumber" : 30,
        "endColumnNumber" : 46
      },
      "nodeContext" : "assertThat(mce.isEnabled(),is(false))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 30,
        "startColumnNumber" : 8,
        "endLineNumber" : 30,
        "endColumnNumber" : 47
      },
      "nodeContext" : "assertThat(mce.isEnabled(),is(false));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 846,
        "startLineNumber" : 16,
        "startColumnNumber" : 40,
        "endLineNumber" : 33,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MapClientEntity mce=Dict.clientDelegate();\n  assertThat(mce.getClientId(),nullValue());\n  assertThat(mce.isEnabled(),nullValue());\n  assertThat(mce.getAttribute(\"logo\"),nullValue());\n  assertThat(mce.getAttributes().keySet(),is(empty()));\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_NAME,\"name\");\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_ENABLED,false);\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_LOGO,\"thisShouldBeBase64Logo\");\n  Dict.asDict(mce).put(\"nonexistent\",\"nonexistent\");\n  assertThat(mce.getId(),is(\"name\"));\n  assertThat(mce.getClientId(),is(\"name\"));\n  assertThat(mce.isEnabled(),is(false));\n  assertThat(mce.getAttribute(\"logo\"),hasItems(\"thisShouldBeBase64Logo\"));\n  assertThat(mce.getAttributes().keySet(),hasItems(\"logo\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 136,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 892,
        "startLineNumber" : 15,
        "startColumnNumber" : 4,
        "endLineNumber" : 33,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testDictClientFromMap(){\n  MapClientEntity mce=Dict.clientDelegate();\n  assertThat(mce.getClientId(),nullValue());\n  assertThat(mce.isEnabled(),nullValue());\n  assertThat(mce.getAttribute(\"logo\"),nullValue());\n  assertThat(mce.getAttributes().keySet(),is(empty()));\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_NAME,\"name\");\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_ENABLED,false);\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_LOGO,\"thisShouldBeBase64Logo\");\n  Dict.asDict(mce).put(\"nonexistent\",\"nonexistent\");\n  assertThat(mce.getId(),is(\"name\"));\n  assertThat(mce.getClientId(),is(\"name\"));\n  assertThat(mce.isEnabled(),is(false));\n  assertThat(mce.getAttribute(\"logo\"),hasItems(\"thisShouldBeBase64Logo\"));\n  assertThat(mce.getAttributes().keySet(),hasItems(\"logo\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 142,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 30,
        "startColumnNumber" : 8,
        "endLineNumber" : 30,
        "endColumnNumber" : 47
      },
      "nodeContext" : "assertThat(mce.isEnabled(),is(false));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.keycloak.models.map.client.MapClientEntity"
  }, {
    "nodeContext" : "mce",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 31,
      "startColumnNumber" : 19,
      "endLineNumber" : 31,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 31,
        "startColumnNumber" : 19,
        "endLineNumber" : 31,
        "endColumnNumber" : 43
      },
      "nodeContext" : "mce.getAttribute(\"logo\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 31,
        "startColumnNumber" : 8,
        "endLineNumber" : 31,
        "endColumnNumber" : 80
      },
      "nodeContext" : "assertThat(mce.getAttribute(\"logo\"),hasItems(\"thisShouldBeBase64Logo\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 31,
        "startColumnNumber" : 8,
        "endLineNumber" : 31,
        "endColumnNumber" : 81
      },
      "nodeContext" : "assertThat(mce.getAttribute(\"logo\"),hasItems(\"thisShouldBeBase64Logo\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 846,
        "startLineNumber" : 16,
        "startColumnNumber" : 40,
        "endLineNumber" : 33,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MapClientEntity mce=Dict.clientDelegate();\n  assertThat(mce.getClientId(),nullValue());\n  assertThat(mce.isEnabled(),nullValue());\n  assertThat(mce.getAttribute(\"logo\"),nullValue());\n  assertThat(mce.getAttributes().keySet(),is(empty()));\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_NAME,\"name\");\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_ENABLED,false);\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_LOGO,\"thisShouldBeBase64Logo\");\n  Dict.asDict(mce).put(\"nonexistent\",\"nonexistent\");\n  assertThat(mce.getId(),is(\"name\"));\n  assertThat(mce.getClientId(),is(\"name\"));\n  assertThat(mce.isEnabled(),is(false));\n  assertThat(mce.getAttribute(\"logo\"),hasItems(\"thisShouldBeBase64Logo\"));\n  assertThat(mce.getAttributes().keySet(),hasItems(\"logo\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 136,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 892,
        "startLineNumber" : 15,
        "startColumnNumber" : 4,
        "endLineNumber" : 33,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testDictClientFromMap(){\n  MapClientEntity mce=Dict.clientDelegate();\n  assertThat(mce.getClientId(),nullValue());\n  assertThat(mce.isEnabled(),nullValue());\n  assertThat(mce.getAttribute(\"logo\"),nullValue());\n  assertThat(mce.getAttributes().keySet(),is(empty()));\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_NAME,\"name\");\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_ENABLED,false);\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_LOGO,\"thisShouldBeBase64Logo\");\n  Dict.asDict(mce).put(\"nonexistent\",\"nonexistent\");\n  assertThat(mce.getId(),is(\"name\"));\n  assertThat(mce.getClientId(),is(\"name\"));\n  assertThat(mce.isEnabled(),is(false));\n  assertThat(mce.getAttribute(\"logo\"),hasItems(\"thisShouldBeBase64Logo\"));\n  assertThat(mce.getAttributes().keySet(),hasItems(\"logo\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 142,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 31,
        "startColumnNumber" : 8,
        "endLineNumber" : 31,
        "endColumnNumber" : 81
      },
      "nodeContext" : "assertThat(mce.getAttribute(\"logo\"),hasItems(\"thisShouldBeBase64Logo\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.keycloak.models.map.client.MapClientEntity"
  }, {
    "nodeContext" : "mce",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 32,
      "startColumnNumber" : 19,
      "endLineNumber" : 32,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 32,
        "startColumnNumber" : 19,
        "endLineNumber" : 32,
        "endColumnNumber" : 38
      },
      "nodeContext" : "mce.getAttributes()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 32,
        "startColumnNumber" : 19,
        "endLineNumber" : 32,
        "endColumnNumber" : 47
      },
      "nodeContext" : "mce.getAttributes().keySet()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 32,
        "startColumnNumber" : 8,
        "endLineNumber" : 32,
        "endColumnNumber" : 66
      },
      "nodeContext" : "assertThat(mce.getAttributes().keySet(),hasItems(\"logo\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 32,
        "startColumnNumber" : 8,
        "endLineNumber" : 32,
        "endColumnNumber" : 67
      },
      "nodeContext" : "assertThat(mce.getAttributes().keySet(),hasItems(\"logo\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 846,
        "startLineNumber" : 16,
        "startColumnNumber" : 40,
        "endLineNumber" : 33,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MapClientEntity mce=Dict.clientDelegate();\n  assertThat(mce.getClientId(),nullValue());\n  assertThat(mce.isEnabled(),nullValue());\n  assertThat(mce.getAttribute(\"logo\"),nullValue());\n  assertThat(mce.getAttributes().keySet(),is(empty()));\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_NAME,\"name\");\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_ENABLED,false);\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_LOGO,\"thisShouldBeBase64Logo\");\n  Dict.asDict(mce).put(\"nonexistent\",\"nonexistent\");\n  assertThat(mce.getId(),is(\"name\"));\n  assertThat(mce.getClientId(),is(\"name\"));\n  assertThat(mce.isEnabled(),is(false));\n  assertThat(mce.getAttribute(\"logo\"),hasItems(\"thisShouldBeBase64Logo\"));\n  assertThat(mce.getAttributes().keySet(),hasItems(\"logo\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 136,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 892,
        "startLineNumber" : 15,
        "startColumnNumber" : 4,
        "endLineNumber" : 33,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testDictClientFromMap(){\n  MapClientEntity mce=Dict.clientDelegate();\n  assertThat(mce.getClientId(),nullValue());\n  assertThat(mce.isEnabled(),nullValue());\n  assertThat(mce.getAttribute(\"logo\"),nullValue());\n  assertThat(mce.getAttributes().keySet(),is(empty()));\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_NAME,\"name\");\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_ENABLED,false);\n  Dict.asDict(mce).put(Dict.CLIENT_FIELD_LOGO,\"thisShouldBeBase64Logo\");\n  Dict.asDict(mce).put(\"nonexistent\",\"nonexistent\");\n  assertThat(mce.getId(),is(\"name\"));\n  assertThat(mce.getClientId(),is(\"name\"));\n  assertThat(mce.isEnabled(),is(false));\n  assertThat(mce.getAttribute(\"logo\"),hasItems(\"thisShouldBeBase64Logo\"));\n  assertThat(mce.getAttributes().keySet(),hasItems(\"logo\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 142,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 32,
        "startColumnNumber" : 8,
        "endLineNumber" : 32,
        "endColumnNumber" : 67
      },
      "nodeContext" : "assertThat(mce.getAttributes().keySet(),hasItems(\"logo\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.keycloak.models.map.client.MapClientEntity"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 18,
    "startColumnNumber" : 19,
    "endLineNumber" : 18,
    "endColumnNumber" : 22
  }, {
    "charLength" : 3,
    "startLineNumber" : 19,
    "startColumnNumber" : 19,
    "endLineNumber" : 19,
    "endColumnNumber" : 22
  }, {
    "charLength" : 3,
    "startLineNumber" : 20,
    "startColumnNumber" : 19,
    "endLineNumber" : 20,
    "endColumnNumber" : 22
  }, {
    "charLength" : 3,
    "startLineNumber" : 21,
    "startColumnNumber" : 19,
    "endLineNumber" : 21,
    "endColumnNumber" : 22
  }, {
    "charLength" : 3,
    "startLineNumber" : 23,
    "startColumnNumber" : 20,
    "endLineNumber" : 23,
    "endColumnNumber" : 23
  }, {
    "charLength" : 3,
    "startLineNumber" : 24,
    "startColumnNumber" : 20,
    "endLineNumber" : 24,
    "endColumnNumber" : 23
  }, {
    "charLength" : 3,
    "startLineNumber" : 25,
    "startColumnNumber" : 20,
    "endLineNumber" : 25,
    "endColumnNumber" : 23
  }, {
    "charLength" : 3,
    "startLineNumber" : 26,
    "startColumnNumber" : 20,
    "endLineNumber" : 26,
    "endColumnNumber" : 23
  }, {
    "charLength" : 3,
    "startLineNumber" : 28,
    "startColumnNumber" : 19,
    "endLineNumber" : 28,
    "endColumnNumber" : 22
  }, {
    "charLength" : 3,
    "startLineNumber" : 29,
    "startColumnNumber" : 19,
    "endLineNumber" : 29,
    "endColumnNumber" : 22
  }, {
    "charLength" : 3,
    "startLineNumber" : 30,
    "startColumnNumber" : 19,
    "endLineNumber" : 30,
    "endColumnNumber" : 22
  }, {
    "charLength" : 3,
    "startLineNumber" : 31,
    "startColumnNumber" : 19,
    "endLineNumber" : 31,
    "endColumnNumber" : 22
  }, {
    "charLength" : 3,
    "startLineNumber" : 32,
    "startColumnNumber" : 19,
    "endLineNumber" : 32,
    "endColumnNumber" : 22
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 4
  } ]
}