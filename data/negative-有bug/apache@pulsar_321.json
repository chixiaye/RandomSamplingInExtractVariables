{
  "id" : 321,
  "expression" : "RuntimeFactory.class",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-functions/worker/src/test/java/org/apache/pulsar/functions/worker/rest/api/v3/SourceApiV3ResourceTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "RuntimeFactory.class",
    "nodeType" : "TypeLiteral",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 158,
      "startColumnNumber" : 41,
      "endLineNumber" : 158,
      "endColumnNumber" : 61
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 158,
        "startColumnNumber" : 36,
        "endLineNumber" : 158,
        "endColumnNumber" : 62
      },
      "nodeContext" : "mock(RuntimeFactory.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 158,
        "endColumnNumber" : 62
      },
      "nodeContext" : "this.mockedRuntimeFactory=mock(RuntimeFactory.class)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 158,
        "endColumnNumber" : 63
      },
      "nodeContext" : "this.mockedRuntimeFactory=mock(RuntimeFactory.class);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3293,
        "startLineNumber" : 155,
        "startColumnNumber" : 41,
        "endLineNumber" : 208,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.mockedManager=mock(FunctionMetaDataManager.class);\n  this.mockedFunctionRunTimeManager=mock(FunctionRuntimeManager.class);\n  this.mockedRuntimeFactory=mock(RuntimeFactory.class);\n  this.mockedInputStream=mock(InputStream.class);\n  this.mockedNamespace=mock(Namespace.class);\n  this.mockedFormData=mock(FormDataContentDisposition.class);\n  when(mockedFormData.getFileName()).thenReturn(\"test\");\n  this.mockedTenantInfo=mock(TenantInfoImpl.class);\n  this.mockedPulsarAdmin=mock(PulsarAdmin.class);\n  this.mockedTenants=mock(Tenants.class);\n  this.mockedNamespaces=mock(Namespaces.class);\n  this.mockedFunctions=mock(Functions.class);\n  this.mockedLeaderService=mock(LeaderService.class);\n  this.mockedPackages=mock(Packages.class);\n  namespaceList.add(tenant + \"/\" + namespace);\n  this.mockedWorkerService=mock(PulsarWorkerService.class);\n  when(mockedWorkerService.getFunctionMetaDataManager()).thenReturn(mockedManager);\n  when(mockedWorkerService.getLeaderService()).thenReturn(mockedLeaderService);\n  when(mockedWorkerService.getFunctionRuntimeManager()).thenReturn(mockedFunctionRunTimeManager);\n  when(mockedFunctionRunTimeManager.getRuntimeFactory()).thenReturn(mockedRuntimeFactory);\n  when(mockedWorkerService.getDlogNamespace()).thenReturn(mockedNamespace);\n  when(mockedWorkerService.isInitialized()).thenReturn(true);\n  when(mockedWorkerService.getBrokerAdmin()).thenReturn(mockedPulsarAdmin);\n  when(mockedWorkerService.getFunctionAdmin()).thenReturn(mockedPulsarAdmin);\n  when(mockedPulsarAdmin.tenants()).thenReturn(mockedTenants);\n  when(mockedPulsarAdmin.namespaces()).thenReturn(mockedNamespaces);\n  when(mockedPulsarAdmin.functions()).thenReturn(mockedFunctions);\n  when(mockedPulsarAdmin.packages()).thenReturn(mockedPackages);\n  when(mockedTenants.getTenantInfo(any())).thenReturn(mockedTenantInfo);\n  when(mockedNamespaces.getNamespaces(any())).thenReturn(namespaceList);\n  when(mockedLeaderService.isLeader()).thenReturn(true);\n  doAnswer(invocationOnMock -> {\n    Files.copy(getPulsarIOTwitterNar().toPath(),Paths.get(invocationOnMock.getArgument(1,String.class)),StandardCopyOption.REPLACE_EXISTING);\n    return null;\n  }\n).when(mockedPackages).download(any(),any());\n  WorkerConfig workerConfig=new WorkerConfig().setWorkerId(\"test\").setWorkerPort(8080).setFunctionMetadataTopicName(\"pulsar/functions\").setNumFunctionPackageReplicas(3).setPulsarServiceUrl(\"pulsar://localhost:6650/\");\n  tempDirectory=PulsarFunctionTestTemporaryDirectory.create(getClass().getSimpleName());\n  tempDirectory.useTemporaryDirectoriesForWorkerConfig(workerConfig);\n  when(mockedWorkerService.getWorkerConfig()).thenReturn(workerConfig);\n  this.resource=spy(new SourcesImpl(() -> mockedWorkerService));\n  mockStatic(InstanceUtils.class);\n  PowerMockito.when(InstanceUtils.calculateSubjectType(any())).thenReturn(FunctionDetails.ComponentType.SOURCE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 417,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3348,
        "startLineNumber" : 154,
        "startColumnNumber" : 4,
        "endLineNumber" : 208,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@BeforeMethod public void setup() throws Exception {\n  this.mockedManager=mock(FunctionMetaDataManager.class);\n  this.mockedFunctionRunTimeManager=mock(FunctionRuntimeManager.class);\n  this.mockedRuntimeFactory=mock(RuntimeFactory.class);\n  this.mockedInputStream=mock(InputStream.class);\n  this.mockedNamespace=mock(Namespace.class);\n  this.mockedFormData=mock(FormDataContentDisposition.class);\n  when(mockedFormData.getFileName()).thenReturn(\"test\");\n  this.mockedTenantInfo=mock(TenantInfoImpl.class);\n  this.mockedPulsarAdmin=mock(PulsarAdmin.class);\n  this.mockedTenants=mock(Tenants.class);\n  this.mockedNamespaces=mock(Namespaces.class);\n  this.mockedFunctions=mock(Functions.class);\n  this.mockedLeaderService=mock(LeaderService.class);\n  this.mockedPackages=mock(Packages.class);\n  namespaceList.add(tenant + \"/\" + namespace);\n  this.mockedWorkerService=mock(PulsarWorkerService.class);\n  when(mockedWorkerService.getFunctionMetaDataManager()).thenReturn(mockedManager);\n  when(mockedWorkerService.getLeaderService()).thenReturn(mockedLeaderService);\n  when(mockedWorkerService.getFunctionRuntimeManager()).thenReturn(mockedFunctionRunTimeManager);\n  when(mockedFunctionRunTimeManager.getRuntimeFactory()).thenReturn(mockedRuntimeFactory);\n  when(mockedWorkerService.getDlogNamespace()).thenReturn(mockedNamespace);\n  when(mockedWorkerService.isInitialized()).thenReturn(true);\n  when(mockedWorkerService.getBrokerAdmin()).thenReturn(mockedPulsarAdmin);\n  when(mockedWorkerService.getFunctionAdmin()).thenReturn(mockedPulsarAdmin);\n  when(mockedPulsarAdmin.tenants()).thenReturn(mockedTenants);\n  when(mockedPulsarAdmin.namespaces()).thenReturn(mockedNamespaces);\n  when(mockedPulsarAdmin.functions()).thenReturn(mockedFunctions);\n  when(mockedPulsarAdmin.packages()).thenReturn(mockedPackages);\n  when(mockedTenants.getTenantInfo(any())).thenReturn(mockedTenantInfo);\n  when(mockedNamespaces.getNamespaces(any())).thenReturn(namespaceList);\n  when(mockedLeaderService.isLeader()).thenReturn(true);\n  doAnswer(invocationOnMock -> {\n    Files.copy(getPulsarIOTwitterNar().toPath(),Paths.get(invocationOnMock.getArgument(1,String.class)),StandardCopyOption.REPLACE_EXISTING);\n    return null;\n  }\n).when(mockedPackages).download(any(),any());\n  WorkerConfig workerConfig=new WorkerConfig().setWorkerId(\"test\").setWorkerPort(8080).setFunctionMetadataTopicName(\"pulsar/functions\").setNumFunctionPackageReplicas(3).setPulsarServiceUrl(\"pulsar://localhost:6650/\");\n  tempDirectory=PulsarFunctionTestTemporaryDirectory.create(getClass().getSimpleName());\n  tempDirectory.useTemporaryDirectoriesForWorkerConfig(workerConfig);\n  when(mockedWorkerService.getWorkerConfig()).thenReturn(workerConfig);\n  this.resource=spy(new SourcesImpl(() -> mockedWorkerService));\n  mockStatic(InstanceUtils.class);\n  PowerMockito.when(InstanceUtils.calculateSubjectType(any())).thenReturn(FunctionDetails.ComponentType.SOURCE);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 425,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 158,
        "endColumnNumber" : 63
      },
      "nodeContext" : "this.mockedRuntimeFactory=mock(RuntimeFactory.class);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<org.apache.pulsar.functions.runtime.RuntimeFactory>"
  } ],
  "positionList" : [ {
    "charLength" : 20,
    "startLineNumber" : 158,
    "startColumnNumber" : 41,
    "endLineNumber" : 158,
    "endColumnNumber" : 61
  } ],
  "layoutRelationDataList" : [ ]
}