{
  "id" : 208,
  "expression" : "ThreadLocalRandom.current()",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/common/src/test/java/io/netty/util/AbstractReferenceCountedTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ThreadLocalRandom.current()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 27,
      "startLineNumber" : 104,
      "startColumnNumber" : 42,
      "endLineNumber" : 104,
      "endColumnNumber" : 69
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 104,
        "startColumnNumber" : 42,
        "endLineNumber" : 104,
        "endColumnNumber" : 99
      },
      "nodeContext" : "ThreadLocalRandom.current().nextInt(1,Integer.MAX_VALUE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 104,
        "startColumnNumber" : 30,
        "endLineNumber" : 104,
        "endColumnNumber" : 99
      },
      "nodeContext" : "retainCnt=ThreadLocalRandom.current().nextInt(1,Integer.MAX_VALUE)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 104,
        "startColumnNumber" : 20,
        "endLineNumber" : 104,
        "endColumnNumber" : 100
      },
      "nodeContext" : "final int retainCnt=ThreadLocalRandom.current().nextInt(1,Integer.MAX_VALUE);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 717,
        "startLineNumber" : 103,
        "startColumnNumber" : 50,
        "endLineNumber" : 117,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  final int retainCnt=ThreadLocalRandom.current().nextInt(1,Integer.MAX_VALUE);\n  futures.add(service.submit(() -> {\n    try {\n      retainLatch.await();\n      try {\n        referenceCounted.retain(retainCnt);\n      }\n catch (      IllegalReferenceCountException e) {\n        refCountExceptions.incrementAndGet();\n      }\n    }\n catch (    InterruptedException e) {\n      Thread.currentThread().interrupt();\n    }\n  }\n));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 59,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 751,
        "startLineNumber" : 103,
        "startColumnNumber" : 16,
        "endLineNumber" : 117,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (int a=0; a < threads; a++) {\n  final int retainCnt=ThreadLocalRandom.current().nextInt(1,Integer.MAX_VALUE);\n  futures.add(service.submit(() -> {\n    try {\n      retainLatch.await();\n      try {\n        referenceCounted.retain(retainCnt);\n      }\n catch (      IllegalReferenceCountException e) {\n        refCountExceptions.incrementAndGet();\n      }\n    }\n catch (    InterruptedException e) {\n      Thread.currentThread().interrupt();\n    }\n  }\n));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 70,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1378,
        "startLineNumber" : 98,
        "startColumnNumber" : 44,
        "endLineNumber" : 129,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  final AbstractReferenceCounted referenceCounted=newReferenceCounted();\n  final CountDownLatch retainLatch=new CountDownLatch(1);\n  assertTrue(referenceCounted.release());\n  for (int a=0; a < threads; a++) {\n    final int retainCnt=ThreadLocalRandom.current().nextInt(1,Integer.MAX_VALUE);\n    futures.add(service.submit(() -> {\n      try {\n        retainLatch.await();\n        try {\n          referenceCounted.retain(retainCnt);\n        }\n catch (        IllegalReferenceCountException e) {\n          refCountExceptions.incrementAndGet();\n        }\n      }\n catch (      InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n));\n  }\n  retainLatch.countDown();\n  for (; ; ) {\n    Future<?> f=futures.poll();\n    if (f == null) {\n      break;\n    }\n    f.get();\n  }\n  assertEquals(4,refCountExceptions.get());\n  refCountExceptions.set(0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 133,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1410,
        "startLineNumber" : 98,
        "startColumnNumber" : 12,
        "endLineNumber" : 129,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < 10000; i++) {\n  final AbstractReferenceCounted referenceCounted=newReferenceCounted();\n  final CountDownLatch retainLatch=new CountDownLatch(1);\n  assertTrue(referenceCounted.release());\n  for (int a=0; a < threads; a++) {\n    final int retainCnt=ThreadLocalRandom.current().nextInt(1,Integer.MAX_VALUE);\n    futures.add(service.submit(() -> {\n      try {\n        retainLatch.await();\n        try {\n          referenceCounted.retain(retainCnt);\n        }\n catch (        IllegalReferenceCountException e) {\n          refCountExceptions.incrementAndGet();\n        }\n      }\n catch (      InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n));\n  }\n  retainLatch.countDown();\n  for (; ; ) {\n    Future<?> f=futures.poll();\n    if (f == null) {\n      break;\n    }\n    f.get();\n  }\n  assertEquals(4,refCountExceptions.get());\n  refCountExceptions.set(0);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 144,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1436,
        "startLineNumber" : 97,
        "startColumnNumber" : 12,
        "endLineNumber" : 130,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (int i=0; i < 10000; i++) {\n    final AbstractReferenceCounted referenceCounted=newReferenceCounted();\n    final CountDownLatch retainLatch=new CountDownLatch(1);\n    assertTrue(referenceCounted.release());\n    for (int a=0; a < threads; a++) {\n      final int retainCnt=ThreadLocalRandom.current().nextInt(1,Integer.MAX_VALUE);\n      futures.add(service.submit(() -> {\n        try {\n          retainLatch.await();\n          try {\n            referenceCounted.retain(retainCnt);\n          }\n catch (          IllegalReferenceCountException e) {\n            refCountExceptions.incrementAndGet();\n          }\n        }\n catch (        InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n));\n    }\n    retainLatch.countDown();\n    for (; ; ) {\n      Future<?> f=futures.poll();\n      if (f == null) {\n        break;\n      }\n      f.get();\n    }\n    assertEquals(4,refCountExceptions.get());\n    refCountExceptions.set(0);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 145,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1494,
        "startLineNumber" : 97,
        "startColumnNumber" : 8,
        "endLineNumber" : 132,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  for (int i=0; i < 10000; i++) {\n    final AbstractReferenceCounted referenceCounted=newReferenceCounted();\n    final CountDownLatch retainLatch=new CountDownLatch(1);\n    assertTrue(referenceCounted.release());\n    for (int a=0; a < threads; a++) {\n      final int retainCnt=ThreadLocalRandom.current().nextInt(1,Integer.MAX_VALUE);\n      futures.add(service.submit(() -> {\n        try {\n          retainLatch.await();\n          try {\n            referenceCounted.retain(retainCnt);\n          }\n catch (          IllegalReferenceCountException e) {\n            refCountExceptions.incrementAndGet();\n          }\n        }\n catch (        InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n));\n    }\n    retainLatch.countDown();\n    for (; ; ) {\n      Future<?> f=futures.poll();\n      if (f == null) {\n        break;\n      }\n      f.get();\n    }\n    assertEquals(4,refCountExceptions.get());\n    refCountExceptions.set(0);\n  }\n}\n  finally {\n  service.shutdown();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 151,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1748,
        "startLineNumber" : 91,
        "startColumnNumber" : 94,
        "endLineNumber" : 133,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int threads=4;\n  Queue<Future<?>> futures=new ArrayDeque<>(threads);\n  ExecutorService service=Executors.newFixedThreadPool(threads);\n  final AtomicInteger refCountExceptions=new AtomicInteger();\n  try {\n    for (int i=0; i < 10000; i++) {\n      final AbstractReferenceCounted referenceCounted=newReferenceCounted();\n      final CountDownLatch retainLatch=new CountDownLatch(1);\n      assertTrue(referenceCounted.release());\n      for (int a=0; a < threads; a++) {\n        final int retainCnt=ThreadLocalRandom.current().nextInt(1,Integer.MAX_VALUE);\n        futures.add(service.submit(() -> {\n          try {\n            retainLatch.await();\n            try {\n              referenceCounted.retain(retainCnt);\n            }\n catch (            IllegalReferenceCountException e) {\n              refCountExceptions.incrementAndGet();\n            }\n          }\n catch (          InterruptedException e) {\n            Thread.currentThread().interrupt();\n          }\n        }\n));\n      }\n      retainLatch.countDown();\n      for (; ; ) {\n        Future<?> f=futures.poll();\n        if (f == null) {\n          break;\n        }\n        f.get();\n      }\n      assertEquals(4,refCountExceptions.get());\n      refCountExceptions.set(0);\n    }\n  }\n  finally {\n    service.shutdown();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 190,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1908,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 133,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test @Timeout(value=30000,unit=TimeUnit.MILLISECONDS) public void testRetainFromMultipleThreadsThrowsReferenceCountException() throws Exception {\n  int threads=4;\n  Queue<Future<?>> futures=new ArrayDeque<>(threads);\n  ExecutorService service=Executors.newFixedThreadPool(threads);\n  final AtomicInteger refCountExceptions=new AtomicInteger();\n  try {\n    for (int i=0; i < 10000; i++) {\n      final AbstractReferenceCounted referenceCounted=newReferenceCounted();\n      final CountDownLatch retainLatch=new CountDownLatch(1);\n      assertTrue(referenceCounted.release());\n      for (int a=0; a < threads; a++) {\n        final int retainCnt=ThreadLocalRandom.current().nextInt(1,Integer.MAX_VALUE);\n        futures.add(service.submit(() -> {\n          try {\n            retainLatch.await();\n            try {\n              referenceCounted.retain(retainCnt);\n            }\n catch (            IllegalReferenceCountException e) {\n              refCountExceptions.incrementAndGet();\n            }\n          }\n catch (          InterruptedException e) {\n            Thread.currentThread().interrupt();\n          }\n        }\n));\n      }\n      retainLatch.countDown();\n      for (; ; ) {\n        Future<?> f=futures.poll();\n        if (f == null) {\n          break;\n        }\n        f.get();\n      }\n      assertEquals(4,refCountExceptions.get());\n      refCountExceptions.set(0);\n    }\n  }\n  finally {\n    service.shutdown();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 208,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 104,
        "startColumnNumber" : 20,
        "endLineNumber" : 104,
        "endColumnNumber" : 100
      },
      "nodeContext" : "final int retainCnt=ThreadLocalRandom.current().nextInt(1,Integer.MAX_VALUE);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.util.concurrent.ThreadLocalRandom"
  } ],
  "positionList" : [ {
    "charLength" : 27,
    "startLineNumber" : 104,
    "startColumnNumber" : 42,
    "endLineNumber" : 104,
    "endColumnNumber" : 69
  } ],
  "layoutRelationDataList" : [ ]
}