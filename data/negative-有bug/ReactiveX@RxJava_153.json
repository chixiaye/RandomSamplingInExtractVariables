{
  "id" : 153,
  "expression" : "new TestSubscriber<String>(){\n  @Override public void onComplete(){\n    System.out.println(\"onCompleted\");\n    latch.countDown();\n  }\n  @Override public void onError(  Throwable e){\n    e.printStackTrace();\n    latch.countDown();\n  }\n  @Override public void onNext(  String t){\n    System.out.println(\"Received: \" + t);\n    request(1);\n  }\n}\n",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/internal/operators/flowable/FlowableFilterTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new TestSubscriber<String>(){\n  @Override public void onComplete(){\n    System.out.println(\"onCompleted\");\n    latch.countDown();\n  }\n  @Override public void onError(  Throwable e){\n    e.printStackTrace();\n    latch.countDown();\n  }\n  @Override public void onNext(  String t){\n    System.out.println(\"Received: \" + t);\n    request(1);\n  }\n}\n",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 595,
      "startLineNumber" : 70,
      "startColumnNumber" : 36,
      "endLineNumber" : 91,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 68,
    "astHeight" : 8,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 600,
        "startLineNumber" : 70,
        "startColumnNumber" : 31,
        "endLineNumber" : 91,
        "endColumnNumber" : 9
      },
      "nodeContext" : "ts=new TestSubscriber<String>(){\n  @Override public void onComplete(){\n    System.out.println(\"onCompleted\");\n    latch.countDown();\n  }\n  @Override public void onError(  Throwable e){\n    e.printStackTrace();\n    latch.countDown();\n  }\n  @Override public void onNext(  String t){\n    System.out.println(\"Received: \" + t);\n    request(1);\n  }\n}\n",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 70,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 624,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 91,
        "endColumnNumber" : 10
      },
      "nodeContext" : "TestSubscriber<String> ts=new TestSubscriber<String>(){\n  @Override public void onComplete(){\n    System.out.println(\"onCompleted\");\n    latch.countDown();\n  }\n  @Override public void onError(  Throwable e){\n    e.printStackTrace();\n    latch.countDown();\n  }\n  @Override public void onNext(  String t){\n    System.out.println(\"Received: \" + t);\n    request(1);\n  }\n}\n;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 76,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1265,
        "startLineNumber" : 59,
        "startColumnNumber" : 67,
        "endLineNumber" : 99,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Flowable<String> w=Flowable.just(\"one\",\"two\",\"three\");\n  Flowable<String> o=w.filter(new Predicate<String>(){\n    @Override public boolean test(    String t1){\n      return t1.equals(\"three\");\n    }\n  }\n);\n  final CountDownLatch latch=new CountDownLatch(1);\n  TestSubscriber<String> ts=new TestSubscriber<String>(){\n    @Override public void onComplete(){\n      System.out.println(\"onCompleted\");\n      latch.countDown();\n    }\n    @Override public void onError(    Throwable e){\n      e.printStackTrace();\n      latch.countDown();\n    }\n    @Override public void onNext(    String t){\n      System.out.println(\"Received: \" + t);\n      request(1);\n    }\n  }\n;\n  ts.request(2);\n  o.subscribe(ts);\n  latch.await();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 149,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1575,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 99,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Make sure we are adjusting subscriber.request() for filtered items\n * @throws InterruptedException if the test is interrupted\n * @throws InterruptedException if the test is interrupted\n */\n@Test(timeout=500) public void testWithBackpressure() throws InterruptedException {\n  Flowable<String> w=Flowable.just(\"one\",\"two\",\"three\");\n  Flowable<String> o=w.filter(new Predicate<String>(){\n    @Override public boolean test(    String t1){\n      return t1.equals(\"three\");\n    }\n  }\n);\n  final CountDownLatch latch=new CountDownLatch(1);\n  TestSubscriber<String> ts=new TestSubscriber<String>(){\n    @Override public void onComplete(){\n      System.out.println(\"onCompleted\");\n      latch.countDown();\n    }\n    @Override public void onError(    Throwable e){\n      e.printStackTrace();\n      latch.countDown();\n    }\n    @Override public void onNext(    String t){\n      System.out.println(\"Received: \" + t);\n      request(1);\n    }\n  }\n;\n  ts.request(2);\n  o.subscribe(ts);\n  latch.await();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 161,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 624,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 91,
        "endColumnNumber" : 10
      },
      "nodeContext" : "TestSubscriber<String> ts=new TestSubscriber<String>(){\n  @Override public void onComplete(){\n    System.out.println(\"onCompleted\");\n    latch.countDown();\n  }\n  @Override public void onError(  Throwable e){\n    e.printStackTrace();\n    latch.countDown();\n  }\n  @Override public void onNext(  String t){\n    System.out.println(\"Received: \" + t);\n    request(1);\n  }\n}\n;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 76,
      "astHeight" : 10
    },
    "tokenLength" : 29,
    "type" : ""
  } ],
  "positionList" : [ {
    "charLength" : 595,
    "startLineNumber" : 70,
    "startColumnNumber" : 36,
    "endLineNumber" : 91,
    "endColumnNumber" : 9
  } ],
  "layoutRelationDataList" : [ ]
}