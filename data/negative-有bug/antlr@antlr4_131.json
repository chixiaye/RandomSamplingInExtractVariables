{
  "id" : 131,
  "expression" : "'\\n'",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/runtime-testsuite/test/org/antlr/v4/test/runtime/CustomDescriptors.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "'\\n'",
    "nodeType" : "CharacterLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 113,
      "startColumnNumber" : 17,
      "endLineNumber" : 113,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 113,
        "startColumnNumber" : 2,
        "endLineNumber" : 113,
        "endColumnNumber" : 22
      },
      "nodeContext" : "grammar.append('\\n')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 113,
        "startColumnNumber" : 2,
        "endLineNumber" : 113,
        "endColumnNumber" : 23
      },
      "nodeContext" : "grammar.append('\\n');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1867,
        "startLineNumber" : 104,
        "startColumnNumber" : 80,
        "endLineNumber" : 152,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  final int tokensCount=1024;\n  final String suffix=String.join(\"\",Collections.nCopies(70,\"_\"));\n  final String grammarName=\"L\";\n  StringBuilder grammar=new StringBuilder();\n  grammar.append(\"lexer grammar \").append(grammarName).append(\";\\n\");\n  grammar.append('\\n');\n  StringBuilder input=new StringBuilder();\n  StringBuilder output=new StringBuilder();\n  int startOffset;\n  int stopOffset=-2;\n  for (int i=0; i < tokensCount; i++) {\n    String ruleName=String.format(\"T_%06d\",i);\n    String value=ruleName + suffix;\n    grammar.append(ruleName).append(\": '\").append(value).append(\"';\\n\");\n    input.append(value).append('\\n');\n    startOffset=stopOffset + 2;\n    stopOffset+=value.length() + 1;\n    output.append(\"[@\").append(i).append(',').append(startOffset).append(':').append(stopOffset).append(\"='\").append(value).append(\"',<\").append(i + 1).append(\">,\").append(i + 1).append(\":0]\\n\");\n  }\n  grammar.append(\"\\n\");\n  grammar.append(\"WS: [ \\\\t\\\\r\\\\n]+ -> skip;\\n\");\n  startOffset=stopOffset + 2;\n  stopOffset=startOffset - 1;\n  output.append(\"[@\").append(tokensCount).append(',').append(startOffset).append(':').append(stopOffset).append(\"='<EOF>',<-1>,\").append(tokensCount + 1).append(\":0]\\n\");\n  return new RuntimeTestDescriptor(GrammarType.Lexer,\"AtnStatesSizeMoreThan65535\",\"Regression for https://github.com/antlr/antlr4/issues/1863\",input.toString(),output.toString(),\"\",\"\",grammarName,grammar.toString(),null,false,false,new String[]{\"CSharp\",\"Python2\",\"Python3\",\"Go\",\"PHP\",\"Swift\",\"JavaScript\",\"Dart\"},uri);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 282,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1946,
        "startLineNumber" : 104,
        "startColumnNumber" : 1,
        "endLineNumber" : 152,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private static RuntimeTestDescriptor getAtnStatesSizeMoreThan65535Descriptor(){\n  final int tokensCount=1024;\n  final String suffix=String.join(\"\",Collections.nCopies(70,\"_\"));\n  final String grammarName=\"L\";\n  StringBuilder grammar=new StringBuilder();\n  grammar.append(\"lexer grammar \").append(grammarName).append(\";\\n\");\n  grammar.append('\\n');\n  StringBuilder input=new StringBuilder();\n  StringBuilder output=new StringBuilder();\n  int startOffset;\n  int stopOffset=-2;\n  for (int i=0; i < tokensCount; i++) {\n    String ruleName=String.format(\"T_%06d\",i);\n    String value=ruleName + suffix;\n    grammar.append(ruleName).append(\": '\").append(value).append(\"';\\n\");\n    input.append(value).append('\\n');\n    startOffset=stopOffset + 2;\n    stopOffset+=value.length() + 1;\n    output.append(\"[@\").append(i).append(',').append(startOffset).append(':').append(stopOffset).append(\"='\").append(value).append(\"',<\").append(i + 1).append(\">,\").append(i + 1).append(\":0]\\n\");\n  }\n  grammar.append(\"\\n\");\n  grammar.append(\"WS: [ \\\\t\\\\r\\\\n]+ -> skip;\\n\");\n  startOffset=stopOffset + 2;\n  stopOffset=startOffset - 1;\n  output.append(\"[@\").append(tokensCount).append(',').append(startOffset).append(':').append(stopOffset).append(\"='<EOF>',<-1>,\").append(tokensCount + 1).append(\":0]\\n\");\n  return new RuntimeTestDescriptor(GrammarType.Lexer,\"AtnStatesSizeMoreThan65535\",\"Regression for https://github.com/antlr/antlr4/issues/1863\",input.toString(),output.toString(),\"\",\"\",grammarName,grammar.toString(),null,false,false,new String[]{\"CSharp\",\"Python2\",\"Python3\",\"Go\",\"PHP\",\"Swift\",\"JavaScript\",\"Dart\"},uri);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 288,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 113,
        "startColumnNumber" : 2,
        "endLineNumber" : 113,
        "endColumnNumber" : 23
      },
      "nodeContext" : "grammar.append('\\n');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "char"
  }, {
    "nodeContext" : "'\\n'",
    "nodeType" : "CharacterLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 122,
      "startColumnNumber" : 30,
      "endLineNumber" : 122,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 122,
        "startColumnNumber" : 3,
        "endLineNumber" : 122,
        "endColumnNumber" : 35
      },
      "nodeContext" : "input.append(value).append('\\n')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 122,
        "startColumnNumber" : 3,
        "endLineNumber" : 122,
        "endColumnNumber" : 36
      },
      "nodeContext" : "input.append(value).append('\\n');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 489,
        "startLineNumber" : 118,
        "startColumnNumber" : 40,
        "endLineNumber" : 130,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String ruleName=String.format(\"T_%06d\",i);\n  String value=ruleName + suffix;\n  grammar.append(ruleName).append(\": '\").append(value).append(\"';\\n\");\n  input.append(value).append('\\n');\n  startOffset=stopOffset + 2;\n  stopOffset+=value.length() + 1;\n  output.append(\"[@\").append(i).append(',').append(startOffset).append(':').append(stopOffset).append(\"='\").append(value).append(\"',<\").append(i + 1).append(\">,\").append(i + 1).append(\":0]\\n\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 100,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 527,
        "startLineNumber" : 118,
        "startColumnNumber" : 2,
        "endLineNumber" : 130,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < tokensCount; i++) {\n  String ruleName=String.format(\"T_%06d\",i);\n  String value=ruleName + suffix;\n  grammar.append(ruleName).append(\": '\").append(value).append(\"';\\n\");\n  input.append(value).append('\\n');\n  startOffset=stopOffset + 2;\n  stopOffset+=value.length() + 1;\n  output.append(\"[@\").append(i).append(',').append(startOffset).append(':').append(stopOffset).append(\"='\").append(value).append(\"',<\").append(i + 1).append(\">,\").append(i + 1).append(\":0]\\n\");\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 111,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1867,
        "startLineNumber" : 104,
        "startColumnNumber" : 80,
        "endLineNumber" : 152,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  final int tokensCount=1024;\n  final String suffix=String.join(\"\",Collections.nCopies(70,\"_\"));\n  final String grammarName=\"L\";\n  StringBuilder grammar=new StringBuilder();\n  grammar.append(\"lexer grammar \").append(grammarName).append(\";\\n\");\n  grammar.append('\\n');\n  StringBuilder input=new StringBuilder();\n  StringBuilder output=new StringBuilder();\n  int startOffset;\n  int stopOffset=-2;\n  for (int i=0; i < tokensCount; i++) {\n    String ruleName=String.format(\"T_%06d\",i);\n    String value=ruleName + suffix;\n    grammar.append(ruleName).append(\": '\").append(value).append(\"';\\n\");\n    input.append(value).append('\\n');\n    startOffset=stopOffset + 2;\n    stopOffset+=value.length() + 1;\n    output.append(\"[@\").append(i).append(',').append(startOffset).append(':').append(stopOffset).append(\"='\").append(value).append(\"',<\").append(i + 1).append(\">,\").append(i + 1).append(\":0]\\n\");\n  }\n  grammar.append(\"\\n\");\n  grammar.append(\"WS: [ \\\\t\\\\r\\\\n]+ -> skip;\\n\");\n  startOffset=stopOffset + 2;\n  stopOffset=startOffset - 1;\n  output.append(\"[@\").append(tokensCount).append(',').append(startOffset).append(':').append(stopOffset).append(\"='<EOF>',<-1>,\").append(tokensCount + 1).append(\":0]\\n\");\n  return new RuntimeTestDescriptor(GrammarType.Lexer,\"AtnStatesSizeMoreThan65535\",\"Regression for https://github.com/antlr/antlr4/issues/1863\",input.toString(),output.toString(),\"\",\"\",grammarName,grammar.toString(),null,false,false,new String[]{\"CSharp\",\"Python2\",\"Python3\",\"Go\",\"PHP\",\"Swift\",\"JavaScript\",\"Dart\"},uri);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 282,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1946,
        "startLineNumber" : 104,
        "startColumnNumber" : 1,
        "endLineNumber" : 152,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private static RuntimeTestDescriptor getAtnStatesSizeMoreThan65535Descriptor(){\n  final int tokensCount=1024;\n  final String suffix=String.join(\"\",Collections.nCopies(70,\"_\"));\n  final String grammarName=\"L\";\n  StringBuilder grammar=new StringBuilder();\n  grammar.append(\"lexer grammar \").append(grammarName).append(\";\\n\");\n  grammar.append('\\n');\n  StringBuilder input=new StringBuilder();\n  StringBuilder output=new StringBuilder();\n  int startOffset;\n  int stopOffset=-2;\n  for (int i=0; i < tokensCount; i++) {\n    String ruleName=String.format(\"T_%06d\",i);\n    String value=ruleName + suffix;\n    grammar.append(ruleName).append(\": '\").append(value).append(\"';\\n\");\n    input.append(value).append('\\n');\n    startOffset=stopOffset + 2;\n    stopOffset+=value.length() + 1;\n    output.append(\"[@\").append(i).append(',').append(startOffset).append(':').append(stopOffset).append(\"='\").append(value).append(\"',<\").append(i + 1).append(\">,\").append(i + 1).append(\":0]\\n\");\n  }\n  grammar.append(\"\\n\");\n  grammar.append(\"WS: [ \\\\t\\\\r\\\\n]+ -> skip;\\n\");\n  startOffset=stopOffset + 2;\n  stopOffset=startOffset - 1;\n  output.append(\"[@\").append(tokensCount).append(',').append(startOffset).append(':').append(stopOffset).append(\"='<EOF>',<-1>,\").append(tokensCount + 1).append(\":0]\\n\");\n  return new RuntimeTestDescriptor(GrammarType.Lexer,\"AtnStatesSizeMoreThan65535\",\"Regression for https://github.com/antlr/antlr4/issues/1863\",input.toString(),output.toString(),\"\",\"\",grammarName,grammar.toString(),null,false,false,new String[]{\"CSharp\",\"Python2\",\"Python3\",\"Go\",\"PHP\",\"Swift\",\"JavaScript\",\"Dart\"},uri);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 288,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 122,
        "startColumnNumber" : 3,
        "endLineNumber" : 122,
        "endColumnNumber" : 36
      },
      "nodeContext" : "input.append(value).append('\\n');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "char"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 113,
    "startColumnNumber" : 17,
    "endLineNumber" : 113,
    "endColumnNumber" : 21
  }, {
    "charLength" : 4,
    "startLineNumber" : 122,
    "startColumnNumber" : 30,
    "endLineNumber" : 122,
    "endColumnNumber" : 34
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}