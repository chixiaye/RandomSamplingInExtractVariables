{
  "id" : 437,
  "expression" : "new PortableExecutable(bp,SectionLayout.FILE,false,false)",
  "projectName" : "NationalSecurityAgency@ghidra",
  "commitID" : "a54d0e28d652c48502551a88278808549aed5f98",
  "filePath" : "/Ghidra/Features/PDB/ghidra_scripts/GetMSDownloadLinkScript.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new PortableExecutable(bp,SectionLayout.FILE,false,false)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 60,
      "startLineNumber" : 57,
      "startColumnNumber" : 27,
      "endLineNumber" : 57,
      "endColumnNumber" : 87
    },
    "astNodeNumber" : 9,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 57,
        "startColumnNumber" : 22,
        "endLineNumber" : 57,
        "endColumnNumber" : 87
      },
      "nodeContext" : "pe=new PortableExecutable(bp,SectionLayout.FILE,false,false)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 57,
        "startColumnNumber" : 3,
        "endLineNumber" : 57,
        "endColumnNumber" : 88
      },
      "nodeContext" : "PortableExecutable pe=new PortableExecutable(bp,SectionLayout.FILE,false,false);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1128,
        "startLineNumber" : 55,
        "startColumnNumber" : 77,
        "endLineNumber" : 79,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  monitor.setMessage(\"Parsing file \" + f.getName());\n  PortableExecutable pe=new PortableExecutable(bp,SectionLayout.FILE,false,false);\n  NTHeader ntHeader=pe.getNTHeader();\n  if (ntHeader != null && ntHeader.getOptionalHeader() != null) {\n    int timeDateStamp=ntHeader.getFileHeader().getTimeDateStamp();\n    int sizeOfImage=(int)ntHeader.getOptionalHeader().getSizeOfImage();\n    println(f + \", timeDateStamp: \" + Integer.toHexString(timeDateStamp)+ \", sizeOfImage: \"+ Integer.toHexString(sizeOfImage));\n    SymbolFileInfo symbolFileInfo=SymbolFileInfo.fromValues(f.getName().toLowerCase(),Integer.toHexString(timeDateStamp),sizeOfImage);\n    List<SymbolFileLocation> findResults=symbolService.find(symbolFileInfo,FindOption.of(FindOption.ALLOW_REMOTE),monitor);\n    if (findResults.isEmpty()) {\n      println(\"Not found on \" + MS_PUBLIC_SYMBOL_SERVER_URL);\n      return;\n    }\n    SymbolFileLocation symLoc=findResults.get(0);\n    println(\"Download link: \" + symLoc.getLocationStr());\n  }\n else {\n    printerr(\"Unrecognized format: \" + f);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 151,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1309,
        "startLineNumber" : 55,
        "startColumnNumber" : 2,
        "endLineNumber" : 83,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try (FileByteProvider bp=new FileByteProvider(f,null,AccessMode.READ)){\n  monitor.setMessage(\"Parsing file \" + f.getName());\n  PortableExecutable pe=new PortableExecutable(bp,SectionLayout.FILE,false,false);\n  NTHeader ntHeader=pe.getNTHeader();\n  if (ntHeader != null && ntHeader.getOptionalHeader() != null) {\n    int timeDateStamp=ntHeader.getFileHeader().getTimeDateStamp();\n    int sizeOfImage=(int)ntHeader.getOptionalHeader().getSizeOfImage();\n    println(f + \", timeDateStamp: \" + Integer.toHexString(timeDateStamp)+ \", sizeOfImage: \"+ Integer.toHexString(sizeOfImage));\n    SymbolFileInfo symbolFileInfo=SymbolFileInfo.fromValues(f.getName().toLowerCase(),Integer.toHexString(timeDateStamp),sizeOfImage);\n    List<SymbolFileLocation> findResults=symbolService.find(symbolFileInfo,FindOption.of(FindOption.ALLOW_REMOTE),monitor);\n    if (findResults.isEmpty()) {\n      println(\"Not found on \" + MS_PUBLIC_SYMBOL_SERVER_URL);\n      return;\n    }\n    SymbolFileLocation symLoc=findResults.get(0);\n    println(\"Download link: \" + symLoc.getLocationStr());\n  }\n else {\n    printerr(\"Unrecognized format: \" + f);\n  }\n}\n catch (IOException e) {\n  printerr(\"Failed to parse file: \" + f);\n  printerr(e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 183,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1582,
        "startLineNumber" : 45,
        "startColumnNumber" : 39,
        "endLineNumber" : 84,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  SymbolServerService symbolService=new SymbolServerService(new SameDirSymbolStore(null),List.of(new HttpSymbolServer(URI.create(MS_PUBLIC_SYMBOL_SERVER_URL))));\n  File f=askFile(\"File To Scan\",\"Select\");\n  if (f == null) {\n    return;\n  }\n  try (FileByteProvider bp=new FileByteProvider(f,null,AccessMode.READ)){\n    monitor.setMessage(\"Parsing file \" + f.getName());\n    PortableExecutable pe=new PortableExecutable(bp,SectionLayout.FILE,false,false);\n    NTHeader ntHeader=pe.getNTHeader();\n    if (ntHeader != null && ntHeader.getOptionalHeader() != null) {\n      int timeDateStamp=ntHeader.getFileHeader().getTimeDateStamp();\n      int sizeOfImage=(int)ntHeader.getOptionalHeader().getSizeOfImage();\n      println(f + \", timeDateStamp: \" + Integer.toHexString(timeDateStamp)+ \", sizeOfImage: \"+ Integer.toHexString(sizeOfImage));\n      SymbolFileInfo symbolFileInfo=SymbolFileInfo.fromValues(f.getName().toLowerCase(),Integer.toHexString(timeDateStamp),sizeOfImage);\n      List<SymbolFileLocation> findResults=symbolService.find(symbolFileInfo,FindOption.of(FindOption.ALLOW_REMOTE),monitor);\n      if (findResults.isEmpty()) {\n        println(\"Not found on \" + MS_PUBLIC_SYMBOL_SERVER_URL);\n        return;\n      }\n      SymbolFileLocation symLoc=findResults.get(0);\n      println(\"Download link: \" + symLoc.getLocationStr());\n    }\n else {\n      printerr(\"Unrecognized format: \" + f);\n    }\n  }\n catch (  IOException e) {\n    printerr(\"Failed to parse file: \" + f);\n    printerr(e.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 221,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1632,
        "startLineNumber" : 44,
        "startColumnNumber" : 1,
        "endLineNumber" : 84,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override protected void run() throws Exception {\n  SymbolServerService symbolService=new SymbolServerService(new SameDirSymbolStore(null),List.of(new HttpSymbolServer(URI.create(MS_PUBLIC_SYMBOL_SERVER_URL))));\n  File f=askFile(\"File To Scan\",\"Select\");\n  if (f == null) {\n    return;\n  }\n  try (FileByteProvider bp=new FileByteProvider(f,null,AccessMode.READ)){\n    monitor.setMessage(\"Parsing file \" + f.getName());\n    PortableExecutable pe=new PortableExecutable(bp,SectionLayout.FILE,false,false);\n    NTHeader ntHeader=pe.getNTHeader();\n    if (ntHeader != null && ntHeader.getOptionalHeader() != null) {\n      int timeDateStamp=ntHeader.getFileHeader().getTimeDateStamp();\n      int sizeOfImage=(int)ntHeader.getOptionalHeader().getSizeOfImage();\n      println(f + \", timeDateStamp: \" + Integer.toHexString(timeDateStamp)+ \", sizeOfImage: \"+ Integer.toHexString(sizeOfImage));\n      SymbolFileInfo symbolFileInfo=SymbolFileInfo.fromValues(f.getName().toLowerCase(),Integer.toHexString(timeDateStamp),sizeOfImage);\n      List<SymbolFileLocation> findResults=symbolService.find(symbolFileInfo,FindOption.of(FindOption.ALLOW_REMOTE),monitor);\n      if (findResults.isEmpty()) {\n        println(\"Not found on \" + MS_PUBLIC_SYMBOL_SERVER_URL);\n        return;\n      }\n      SymbolFileLocation symLoc=findResults.get(0);\n      println(\"Download link: \" + symLoc.getLocationStr());\n    }\n else {\n      printerr(\"Unrecognized format: \" + f);\n    }\n  }\n catch (  IOException e) {\n    printerr(\"Failed to parse file: \" + f);\n    printerr(e.getMessage());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 229,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 57,
        "startColumnNumber" : 3,
        "endLineNumber" : 57,
        "endColumnNumber" : 88
      },
      "nodeContext" : "PortableExecutable pe=new PortableExecutable(bp,SectionLayout.FILE,false,false);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 6,
    "type" : "ghidra.app.util.bin.format.pe.PortableExecutable"
  } ],
  "positionList" : [ {
    "charLength" : 60,
    "startLineNumber" : 57,
    "startColumnNumber" : 27,
    "endLineNumber" : 57,
    "endColumnNumber" : 87
  } ],
  "layoutRelationDataList" : [ ]
}