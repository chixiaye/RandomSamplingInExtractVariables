{
  "id" : 472,
  "expression" : "mainMaterialized",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/streams/src/test/java/org/apache/kafka/streams/integration/KTableKTableForeignKeyJoinIntegrationTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "mainMaterialized",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 673,
      "startColumnNumber" : 56,
      "endLineNumber" : 673,
      "endColumnNumber" : 72
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 673,
        "startColumnNumber" : 16,
        "endLineNumber" : 673,
        "endColumnNumber" : 73
      },
      "nodeContext" : "left.leftJoin(right,extractor,joiner,mainMaterialized)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 672,
        "startColumnNumber" : 41,
        "endLineNumber" : 673,
        "endColumnNumber" : 73
      },
      "nodeContext" : "fkJoin=left.leftJoin(right,extractor,joiner,mainMaterialized)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 112,
        "startLineNumber" : 672,
        "startColumnNumber" : 12,
        "endLineNumber" : 673,
        "endColumnNumber" : 74
      },
      "nodeContext" : "final KTable<String,String> fkJoin=left.leftJoin(right,extractor,joiner,mainMaterialized);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 496,
        "startLineNumber" : 671,
        "startColumnNumber" : 22,
        "endLineNumber" : 684,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final KTable<String,String> fkJoin=left.leftJoin(right,extractor,joiner,mainMaterialized);\n  fkJoin.toStream().to(OUTPUT);\n  if (rejoin) {\n    fkJoin.leftJoin(left,rejoiner,rejoinMaterialized).toStream().to(REJOIN_OUTPUT);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 41,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1003,
        "startLineNumber" : 671,
        "startColumnNumber" : 8,
        "endLineNumber" : 697,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (leftJoin) {\n  final KTable<String,String> fkJoin=left.leftJoin(right,extractor,joiner,mainMaterialized);\n  fkJoin.toStream().to(OUTPUT);\n  if (rejoin) {\n    fkJoin.leftJoin(left,rejoiner,rejoinMaterialized).toStream().to(REJOIN_OUTPUT);\n  }\n}\n else {\n  final KTable<String,String> fkJoin=left.join(right,extractor,joiner,mainMaterialized);\n  fkJoin.toStream().to(OUTPUT);\n  if (rejoin) {\n    fkJoin.join(left,rejoiner,rejoinMaterialized).toStream().to(REJOIN_OUTPUT);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 84,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3630,
        "startLineNumber" : 630,
        "startColumnNumber" : 62,
        "endLineNumber" : 701,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final UniqueTopicSerdeScope serdeScope=new UniqueTopicSerdeScope();\n  final StreamsBuilder builder=new StreamsBuilder();\n  final KTable<String,String> left=builder.table(LEFT_TABLE,Consumed.with(serdeScope.decorateSerde(Serdes.String(),streamsConfig,true),serdeScope.decorateSerde(Serdes.String(),streamsConfig,false)));\n  final KTable<String,String> right=builder.table(RIGHT_TABLE,Consumed.with(serdeScope.decorateSerde(Serdes.String(),streamsConfig,true),serdeScope.decorateSerde(Serdes.String(),streamsConfig,false)));\n  final Function<String,String> extractor=value -> value.split(\"\\\\|\")[1];\n  final ValueJoiner<String,String,String> joiner=(value1,value2) -> \"(\" + value1 + \",\"+ value2+ \")\";\n  final ValueJoiner<String,String,String> rejoiner=rejoin ? (value1,value2) -> \"rejoin(\" + value1 + \",\"+ value2+ \")\" : null;\n  final Materialized<String,String,KeyValueStore<Bytes,byte[]>> mainMaterialized=queryableStoreName == null ? Materialized.<String,String,KeyValueStore<Bytes,byte[]>>with(null,serdeScope.decorateSerde(Serdes.String(),streamsConfig,false)).withCachingDisabled() : Materialized.<String,String>as(Stores.inMemoryKeyValueStore(queryableStoreName)).withValueSerde(serdeScope.decorateSerde(Serdes.String(),streamsConfig,false)).withCachingDisabled();\n  final Materialized<String,String,KeyValueStore<Bytes,byte[]>> rejoinMaterialized=!rejoin ? null : queryableStoreName == null ? Materialized.with(null,serdeScope.decorateSerde(Serdes.String(),streamsConfig,false)) : Materialized.<String,String>as(Stores.inMemoryKeyValueStore(queryableStoreName + \"-rejoin\")).withValueSerde(serdeScope.decorateSerde(Serdes.String(),streamsConfig,false)).withCachingDisabled();\n  if (leftJoin) {\n    final KTable<String,String> fkJoin=left.leftJoin(right,extractor,joiner,mainMaterialized);\n    fkJoin.toStream().to(OUTPUT);\n    if (rejoin) {\n      fkJoin.leftJoin(left,rejoiner,rejoinMaterialized).toStream().to(REJOIN_OUTPUT);\n    }\n  }\n else {\n    final KTable<String,String> fkJoin=left.join(right,extractor,joiner,mainMaterialized);\n    fkJoin.toStream().to(OUTPUT);\n    if (rejoin) {\n      fkJoin.join(left,rejoiner,rejoinMaterialized).toStream().to(REJOIN_OUTPUT);\n    }\n  }\n  return builder.build(streamsConfig);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 383,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3897,
        "startLineNumber" : 627,
        "startColumnNumber" : 4,
        "endLineNumber" : 701,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static Topology getTopology(final Properties streamsConfig,final String queryableStoreName,final boolean leftJoin,final boolean rejoin){\n  final UniqueTopicSerdeScope serdeScope=new UniqueTopicSerdeScope();\n  final StreamsBuilder builder=new StreamsBuilder();\n  final KTable<String,String> left=builder.table(LEFT_TABLE,Consumed.with(serdeScope.decorateSerde(Serdes.String(),streamsConfig,true),serdeScope.decorateSerde(Serdes.String(),streamsConfig,false)));\n  final KTable<String,String> right=builder.table(RIGHT_TABLE,Consumed.with(serdeScope.decorateSerde(Serdes.String(),streamsConfig,true),serdeScope.decorateSerde(Serdes.String(),streamsConfig,false)));\n  final Function<String,String> extractor=value -> value.split(\"\\\\|\")[1];\n  final ValueJoiner<String,String,String> joiner=(value1,value2) -> \"(\" + value1 + \",\"+ value2+ \")\";\n  final ValueJoiner<String,String,String> rejoiner=rejoin ? (value1,value2) -> \"rejoin(\" + value1 + \",\"+ value2+ \")\" : null;\n  final Materialized<String,String,KeyValueStore<Bytes,byte[]>> mainMaterialized=queryableStoreName == null ? Materialized.<String,String,KeyValueStore<Bytes,byte[]>>with(null,serdeScope.decorateSerde(Serdes.String(),streamsConfig,false)).withCachingDisabled() : Materialized.<String,String>as(Stores.inMemoryKeyValueStore(queryableStoreName)).withValueSerde(serdeScope.decorateSerde(Serdes.String(),streamsConfig,false)).withCachingDisabled();\n  final Materialized<String,String,KeyValueStore<Bytes,byte[]>> rejoinMaterialized=!rejoin ? null : queryableStoreName == null ? Materialized.with(null,serdeScope.decorateSerde(Serdes.String(),streamsConfig,false)) : Materialized.<String,String>as(Stores.inMemoryKeyValueStore(queryableStoreName + \"-rejoin\")).withValueSerde(serdeScope.decorateSerde(Serdes.String(),streamsConfig,false)).withCachingDisabled();\n  if (leftJoin) {\n    final KTable<String,String> fkJoin=left.leftJoin(right,extractor,joiner,mainMaterialized);\n    fkJoin.toStream().to(OUTPUT);\n    if (rejoin) {\n      fkJoin.leftJoin(left,rejoiner,rejoinMaterialized).toStream().to(REJOIN_OUTPUT);\n    }\n  }\n else {\n    final KTable<String,String> fkJoin=left.join(right,extractor,joiner,mainMaterialized);\n    fkJoin.toStream().to(OUTPUT);\n    if (rejoin) {\n      fkJoin.join(left,rejoiner,rejoinMaterialized).toStream().to(REJOIN_OUTPUT);\n    }\n  }\n  return builder.build(streamsConfig);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 407,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 673,
        "startColumnNumber" : 16,
        "endLineNumber" : 673,
        "endColumnNumber" : 73
      },
      "nodeContext" : "left.leftJoin(right,extractor,joiner,mainMaterialized)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.kafka.streams.kstream.Materialized<java.lang.String,java.lang.String,org.apache.kafka.streams.state.KeyValueStore<org.apache.kafka.common.utils.Bytes,byte[]>>"
  }, {
    "nodeContext" : "mainMaterialized",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 685,
      "startColumnNumber" : 86,
      "endLineNumber" : 685,
      "endColumnNumber" : 102
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 685,
        "startColumnNumber" : 50,
        "endLineNumber" : 685,
        "endColumnNumber" : 103
      },
      "nodeContext" : "left.join(right,extractor,joiner,mainMaterialized)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 685,
        "startColumnNumber" : 41,
        "endLineNumber" : 685,
        "endColumnNumber" : 103
      },
      "nodeContext" : "fkJoin=left.join(right,extractor,joiner,mainMaterialized)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 685,
        "startColumnNumber" : 12,
        "endLineNumber" : 685,
        "endColumnNumber" : 104
      },
      "nodeContext" : "final KTable<String,String> fkJoin=left.join(right,extractor,joiner,mainMaterialized);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 487,
        "startLineNumber" : 684,
        "startColumnNumber" : 15,
        "endLineNumber" : 697,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final KTable<String,String> fkJoin=left.join(right,extractor,joiner,mainMaterialized);\n  fkJoin.toStream().to(OUTPUT);\n  if (rejoin) {\n    fkJoin.join(left,rejoiner,rejoinMaterialized).toStream().to(REJOIN_OUTPUT);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 41,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1003,
        "startLineNumber" : 671,
        "startColumnNumber" : 8,
        "endLineNumber" : 697,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (leftJoin) {\n  final KTable<String,String> fkJoin=left.leftJoin(right,extractor,joiner,mainMaterialized);\n  fkJoin.toStream().to(OUTPUT);\n  if (rejoin) {\n    fkJoin.leftJoin(left,rejoiner,rejoinMaterialized).toStream().to(REJOIN_OUTPUT);\n  }\n}\n else {\n  final KTable<String,String> fkJoin=left.join(right,extractor,joiner,mainMaterialized);\n  fkJoin.toStream().to(OUTPUT);\n  if (rejoin) {\n    fkJoin.join(left,rejoiner,rejoinMaterialized).toStream().to(REJOIN_OUTPUT);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 84,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3630,
        "startLineNumber" : 630,
        "startColumnNumber" : 62,
        "endLineNumber" : 701,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final UniqueTopicSerdeScope serdeScope=new UniqueTopicSerdeScope();\n  final StreamsBuilder builder=new StreamsBuilder();\n  final KTable<String,String> left=builder.table(LEFT_TABLE,Consumed.with(serdeScope.decorateSerde(Serdes.String(),streamsConfig,true),serdeScope.decorateSerde(Serdes.String(),streamsConfig,false)));\n  final KTable<String,String> right=builder.table(RIGHT_TABLE,Consumed.with(serdeScope.decorateSerde(Serdes.String(),streamsConfig,true),serdeScope.decorateSerde(Serdes.String(),streamsConfig,false)));\n  final Function<String,String> extractor=value -> value.split(\"\\\\|\")[1];\n  final ValueJoiner<String,String,String> joiner=(value1,value2) -> \"(\" + value1 + \",\"+ value2+ \")\";\n  final ValueJoiner<String,String,String> rejoiner=rejoin ? (value1,value2) -> \"rejoin(\" + value1 + \",\"+ value2+ \")\" : null;\n  final Materialized<String,String,KeyValueStore<Bytes,byte[]>> mainMaterialized=queryableStoreName == null ? Materialized.<String,String,KeyValueStore<Bytes,byte[]>>with(null,serdeScope.decorateSerde(Serdes.String(),streamsConfig,false)).withCachingDisabled() : Materialized.<String,String>as(Stores.inMemoryKeyValueStore(queryableStoreName)).withValueSerde(serdeScope.decorateSerde(Serdes.String(),streamsConfig,false)).withCachingDisabled();\n  final Materialized<String,String,KeyValueStore<Bytes,byte[]>> rejoinMaterialized=!rejoin ? null : queryableStoreName == null ? Materialized.with(null,serdeScope.decorateSerde(Serdes.String(),streamsConfig,false)) : Materialized.<String,String>as(Stores.inMemoryKeyValueStore(queryableStoreName + \"-rejoin\")).withValueSerde(serdeScope.decorateSerde(Serdes.String(),streamsConfig,false)).withCachingDisabled();\n  if (leftJoin) {\n    final KTable<String,String> fkJoin=left.leftJoin(right,extractor,joiner,mainMaterialized);\n    fkJoin.toStream().to(OUTPUT);\n    if (rejoin) {\n      fkJoin.leftJoin(left,rejoiner,rejoinMaterialized).toStream().to(REJOIN_OUTPUT);\n    }\n  }\n else {\n    final KTable<String,String> fkJoin=left.join(right,extractor,joiner,mainMaterialized);\n    fkJoin.toStream().to(OUTPUT);\n    if (rejoin) {\n      fkJoin.join(left,rejoiner,rejoinMaterialized).toStream().to(REJOIN_OUTPUT);\n    }\n  }\n  return builder.build(streamsConfig);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 383,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3897,
        "startLineNumber" : 627,
        "startColumnNumber" : 4,
        "endLineNumber" : 701,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static Topology getTopology(final Properties streamsConfig,final String queryableStoreName,final boolean leftJoin,final boolean rejoin){\n  final UniqueTopicSerdeScope serdeScope=new UniqueTopicSerdeScope();\n  final StreamsBuilder builder=new StreamsBuilder();\n  final KTable<String,String> left=builder.table(LEFT_TABLE,Consumed.with(serdeScope.decorateSerde(Serdes.String(),streamsConfig,true),serdeScope.decorateSerde(Serdes.String(),streamsConfig,false)));\n  final KTable<String,String> right=builder.table(RIGHT_TABLE,Consumed.with(serdeScope.decorateSerde(Serdes.String(),streamsConfig,true),serdeScope.decorateSerde(Serdes.String(),streamsConfig,false)));\n  final Function<String,String> extractor=value -> value.split(\"\\\\|\")[1];\n  final ValueJoiner<String,String,String> joiner=(value1,value2) -> \"(\" + value1 + \",\"+ value2+ \")\";\n  final ValueJoiner<String,String,String> rejoiner=rejoin ? (value1,value2) -> \"rejoin(\" + value1 + \",\"+ value2+ \")\" : null;\n  final Materialized<String,String,KeyValueStore<Bytes,byte[]>> mainMaterialized=queryableStoreName == null ? Materialized.<String,String,KeyValueStore<Bytes,byte[]>>with(null,serdeScope.decorateSerde(Serdes.String(),streamsConfig,false)).withCachingDisabled() : Materialized.<String,String>as(Stores.inMemoryKeyValueStore(queryableStoreName)).withValueSerde(serdeScope.decorateSerde(Serdes.String(),streamsConfig,false)).withCachingDisabled();\n  final Materialized<String,String,KeyValueStore<Bytes,byte[]>> rejoinMaterialized=!rejoin ? null : queryableStoreName == null ? Materialized.with(null,serdeScope.decorateSerde(Serdes.String(),streamsConfig,false)) : Materialized.<String,String>as(Stores.inMemoryKeyValueStore(queryableStoreName + \"-rejoin\")).withValueSerde(serdeScope.decorateSerde(Serdes.String(),streamsConfig,false)).withCachingDisabled();\n  if (leftJoin) {\n    final KTable<String,String> fkJoin=left.leftJoin(right,extractor,joiner,mainMaterialized);\n    fkJoin.toStream().to(OUTPUT);\n    if (rejoin) {\n      fkJoin.leftJoin(left,rejoiner,rejoinMaterialized).toStream().to(REJOIN_OUTPUT);\n    }\n  }\n else {\n    final KTable<String,String> fkJoin=left.join(right,extractor,joiner,mainMaterialized);\n    fkJoin.toStream().to(OUTPUT);\n    if (rejoin) {\n      fkJoin.join(left,rejoiner,rejoinMaterialized).toStream().to(REJOIN_OUTPUT);\n    }\n  }\n  return builder.build(streamsConfig);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 407,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 685,
        "startColumnNumber" : 12,
        "endLineNumber" : 685,
        "endColumnNumber" : 104
      },
      "nodeContext" : "final KTable<String,String> fkJoin=left.join(right,extractor,joiner,mainMaterialized);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.kafka.streams.kstream.Materialized<java.lang.String,java.lang.String,org.apache.kafka.streams.state.KeyValueStore<org.apache.kafka.common.utils.Bytes,byte[]>>"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 673,
    "startColumnNumber" : 56,
    "endLineNumber" : 673,
    "endColumnNumber" : 72
  }, {
    "charLength" : 16,
    "startLineNumber" : 685,
    "startColumnNumber" : 86,
    "endLineNumber" : 685,
    "endColumnNumber" : 102
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}