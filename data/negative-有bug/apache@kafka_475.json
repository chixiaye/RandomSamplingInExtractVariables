{
  "id" : 475,
  "expression" : "new StringBuilder(\"^\")",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/shell/src/main/java/org/apache/kafka/shell/GlobComponent.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new StringBuilder(\"^\")",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 76,
      "startColumnNumber" : 31,
      "endLineNumber" : 76,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 76,
        "startColumnNumber" : 22,
        "endLineNumber" : 76,
        "endColumnNumber" : 53
      },
      "nodeContext" : "output=new StringBuilder(\"^\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 76,
        "startColumnNumber" : 8,
        "endLineNumber" : 76,
        "endColumnNumber" : 54
      },
      "nodeContext" : "StringBuilder output=new StringBuilder(\"^\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2462,
        "startLineNumber" : 75,
        "startColumnNumber" : 51,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  StringBuilder output=new StringBuilder(\"^\");\n  boolean literal=true;\n  boolean processingGroup=false;\n  for (int i=0; i < glob.length(); ) {\n    char c=glob.charAt(i++);\nswitch (c) {\ncase '?':      literal=false;\n    output.append(\".\");\n  break;\ncase '*':literal=false;\noutput.append(\".*\");\nbreak;\ncase '\\\\':if (i == glob.length()) {\noutput.append(c);\n}\n else {\nchar next=glob.charAt(i);\ni++;\nif (isGlobSpecialCharacter(next) || isRegularExpressionSpecialCharacter(next)) {\noutput.append('\\\\');\n}\noutput.append(next);\n}\nbreak;\ncase '{':if (processingGroup) {\nthrow new RuntimeException(\"Can't nest glob groups.\");\n}\nliteral=false;\noutput.append(\"(?:(?:\");\nprocessingGroup=true;\nbreak;\ncase ',':if (processingGroup) {\nliteral=false;\noutput.append(\")|(?:\");\n}\n else {\noutput.append(c);\n}\nbreak;\ncase '}':if (processingGroup) {\nliteral=false;\noutput.append(\"))\");\nprocessingGroup=false;\n}\n else {\noutput.append(c);\n}\nbreak;\ndefault:if (isRegularExpressionSpecialCharacter(c)) {\noutput.append('\\\\');\n}\noutput.append(c);\n}\n}\nif (processingGroup) {\nthrow new RuntimeException(\"Unterminated glob group.\");\n}\nif (literal) {\nreturn null;\n}\noutput.append('$');\nreturn output.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 221,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2732,
        "startLineNumber" : 70,
        "startColumnNumber" : 4,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Converts a glob string to a regular expression string. Returns null if the glob should be handled as a literal (can only match one string). Throws an exception if the glob is malformed.\n */\nstatic String toRegularExpression(String glob){\n  StringBuilder output=new StringBuilder(\"^\");\n  boolean literal=true;\n  boolean processingGroup=false;\n  for (int i=0; i < glob.length(); ) {\n    char c=glob.charAt(i++);\nswitch (c) {\ncase '?':      literal=false;\n    output.append(\".\");\n  break;\ncase '*':literal=false;\noutput.append(\".*\");\nbreak;\ncase '\\\\':if (i == glob.length()) {\noutput.append(c);\n}\n else {\nchar next=glob.charAt(i);\ni++;\nif (isGlobSpecialCharacter(next) || isRegularExpressionSpecialCharacter(next)) {\noutput.append('\\\\');\n}\noutput.append(next);\n}\nbreak;\ncase '{':if (processingGroup) {\nthrow new RuntimeException(\"Can't nest glob groups.\");\n}\nliteral=false;\noutput.append(\"(?:(?:\");\nprocessingGroup=true;\nbreak;\ncase ',':if (processingGroup) {\nliteral=false;\noutput.append(\")|(?:\");\n}\n else {\noutput.append(c);\n}\nbreak;\ncase '}':if (processingGroup) {\nliteral=false;\noutput.append(\"))\");\nprocessingGroup=false;\n}\n else {\noutput.append(c);\n}\nbreak;\ndefault:if (isRegularExpressionSpecialCharacter(c)) {\noutput.append('\\\\');\n}\noutput.append(c);\n}\n}\nif (processingGroup) {\nthrow new RuntimeException(\"Unterminated glob group.\");\n}\nif (literal) {\nreturn null;\n}\noutput.append('$');\nreturn output.toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 231,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 76,
        "startColumnNumber" : 8,
        "endLineNumber" : 76,
        "endColumnNumber" : 54
      },
      "nodeContext" : "StringBuilder output=new StringBuilder(\"^\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.lang.StringBuilder"
  } ],
  "positionList" : [ {
    "charLength" : 22,
    "startLineNumber" : 76,
    "startColumnNumber" : 31,
    "endLineNumber" : 76,
    "endColumnNumber" : 53
  } ],
  "layoutRelationDataList" : [ ]
}