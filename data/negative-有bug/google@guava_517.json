{
  "id" : 517,
  "expression" : "new RegularImmutableMultiset<E>(entryArray,hashTable,Ints.saturatedCast(size),hashCode,null)",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/guava/src/com/google/common/collect/RegularImmutableMultiset.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new RegularImmutableMultiset<E>(entryArray,hashTable,Ints.saturatedCast(size),hashCode,null)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 110,
      "startLineNumber" : 84,
      "startColumnNumber" : 10,
      "endLineNumber" : 85,
      "endColumnNumber" : 76
    },
    "astNodeNumber" : 14,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 241,
        "startLineNumber" : 82,
        "startColumnNumber" : 11,
        "endLineNumber" : 85,
        "endColumnNumber" : 76
      },
      "nodeContext" : "hashFloodingDetected(hashTable) ? JdkBackedImmutableMultiset.create(ImmutableList.asImmutableList(entryArray)) : new RegularImmutableMultiset<E>(entryArray,hashTable,Ints.saturatedCast(size),hashCode,null)",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 25,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 249,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 85,
        "endColumnNumber" : 77
      },
      "nodeContext" : "return hashFloodingDetected(hashTable) ? JdkBackedImmutableMultiset.create(ImmutableList.asImmutableList(entryArray)) : new RegularImmutableMultiset<E>(entryArray,hashTable,Ints.saturatedCast(size),hashCode,null);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 26,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1819,
        "startLineNumber" : 43,
        "startColumnNumber" : 91,
        "endLineNumber" : 86,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int distinct=entries.size();\n  @SuppressWarnings({\"unchecked\",\"rawtypes\"}) ImmutableEntry<E>[] entryArray=new ImmutableEntry[distinct];\n  if (distinct == 0) {\n    return new RegularImmutableMultiset<>(entryArray,EMPTY_ARRAY,0,0,ImmutableSet.of());\n  }\n  int tableSize=Hashing.closedTableSize(distinct,MAX_LOAD_FACTOR);\n  int mask=tableSize - 1;\n  @SuppressWarnings({\"unchecked\",\"rawtypes\"}) @Nullable ImmutableEntry<E>[] hashTable=new @Nullable ImmutableEntry[tableSize];\n  int index=0;\n  int hashCode=0;\n  long size=0;\n  for (  Entry<? extends E> entryWithWildcard : entries) {\n    @SuppressWarnings(\"unchecked\") Entry<E> entry=(Entry<E>)entryWithWildcard;\n    E element=checkNotNull(entry.getElement());\n    int count=entry.getCount();\n    int hash=element.hashCode();\n    int bucket=Hashing.smear(hash) & mask;\n    ImmutableEntry<E> bucketHead=hashTable[bucket];\n    ImmutableEntry<E> newEntry;\n    if (bucketHead == null) {\n      boolean canReuseEntry=entry instanceof ImmutableEntry && !(entry instanceof NonTerminalEntry);\n      newEntry=canReuseEntry ? (ImmutableEntry<E>)entry : new ImmutableEntry<E>(element,count);\n    }\n else {\n      newEntry=new NonTerminalEntry<E>(element,count,bucketHead);\n    }\n    hashCode+=hash ^ count;\n    entryArray[index++]=newEntry;\n    hashTable[bucket]=newEntry;\n    size+=count;\n  }\n  return hashFloodingDetected(hashTable) ? JdkBackedImmutableMultiset.create(ImmutableList.asImmutableList(entryArray)) : new RegularImmutableMultiset<E>(entryArray,hashTable,Ints.saturatedCast(size),hashCode,null);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 286,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1908,
        "startLineNumber" : 43,
        "startColumnNumber" : 2,
        "endLineNumber" : 86,
        "endColumnNumber" : 3
      },
      "nodeContext" : "static <E>ImmutableMultiset<E> create(Collection<? extends Entry<? extends E>> entries){\n  int distinct=entries.size();\n  @SuppressWarnings({\"unchecked\",\"rawtypes\"}) ImmutableEntry<E>[] entryArray=new ImmutableEntry[distinct];\n  if (distinct == 0) {\n    return new RegularImmutableMultiset<>(entryArray,EMPTY_ARRAY,0,0,ImmutableSet.of());\n  }\n  int tableSize=Hashing.closedTableSize(distinct,MAX_LOAD_FACTOR);\n  int mask=tableSize - 1;\n  @SuppressWarnings({\"unchecked\",\"rawtypes\"}) @Nullable ImmutableEntry<E>[] hashTable=new @Nullable ImmutableEntry[tableSize];\n  int index=0;\n  int hashCode=0;\n  long size=0;\n  for (  Entry<? extends E> entryWithWildcard : entries) {\n    @SuppressWarnings(\"unchecked\") Entry<E> entry=(Entry<E>)entryWithWildcard;\n    E element=checkNotNull(entry.getElement());\n    int count=entry.getCount();\n    int hash=element.hashCode();\n    int bucket=Hashing.smear(hash) & mask;\n    ImmutableEntry<E> bucketHead=hashTable[bucket];\n    ImmutableEntry<E> newEntry;\n    if (bucketHead == null) {\n      boolean canReuseEntry=entry instanceof ImmutableEntry && !(entry instanceof NonTerminalEntry);\n      newEntry=canReuseEntry ? (ImmutableEntry<E>)entry : new ImmutableEntry<E>(element,count);\n    }\n else {\n      newEntry=new NonTerminalEntry<E>(element,count,bucketHead);\n    }\n    hashCode+=hash ^ count;\n    entryArray[index++]=newEntry;\n    hashTable[bucket]=newEntry;\n    size+=count;\n  }\n  return hashFloodingDetected(hashTable) ? JdkBackedImmutableMultiset.create(ImmutableList.asImmutableList(entryArray)) : new RegularImmutableMultiset<E>(entryArray,hashTable,Ints.saturatedCast(size),hashCode,null);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 308,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 241,
        "startLineNumber" : 82,
        "startColumnNumber" : 11,
        "endLineNumber" : 85,
        "endColumnNumber" : 76
      },
      "nodeContext" : "hashFloodingDetected(hashTable) ? JdkBackedImmutableMultiset.create(ImmutableList.asImmutableList(entryArray)) : new RegularImmutableMultiset<E>(entryArray,hashTable,Ints.saturatedCast(size),hashCode,null)",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 25,
      "astHeight" : 5
    },
    "tokenLength" : 8,
    "type" : "com.google.common.collect.RegularImmutableMultiset<E>"
  } ],
  "positionList" : [ {
    "charLength" : 110,
    "startLineNumber" : 84,
    "startColumnNumber" : 10,
    "endLineNumber" : 85,
    "endColumnNumber" : 76
  } ],
  "layoutRelationDataList" : [ ]
}