{
  "id" : 473,
  "expression" : "itemCount",
  "projectName" : "Tencent@tinker",
  "commitID" : "df9e1d29420d53a650ab73569d828a22e3cfe728",
  "filePath" : "/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/dexpatcher/algorithms/diff/DexSectionDiffAlgorithm.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "itemCount",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 220,
      "startColumnNumber" : 75,
      "endLineNumber" : 220,
      "endColumnNumber" : 84
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 220,
        "startColumnNumber" : 59,
        "endLineNumber" : 220,
        "endColumnNumber" : 85
      },
      "nodeContext" : "new ArrayList<>(itemCount)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 220,
        "startColumnNumber" : 50,
        "endLineNumber" : 220,
        "endColumnNumber" : 85
      },
      "nodeContext" : "result=new ArrayList<>(itemCount)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 220,
        "startColumnNumber" : 8,
        "endLineNumber" : 220,
        "endColumnNumber" : 86
      },
      "nodeContext" : "List<AbstractMap.SimpleEntry<Integer,T>> result=new ArrayList<>(itemCount);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2028,
        "startLineNumber" : 213,
        "startColumnNumber" : 97,
        "endLineNumber" : 255,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TableOfContents.Section tocSec=getTocSection(dex);\n  if (!tocSec.exists()) {\n    return EMPTY_ENTRY_ARRAY;\n  }\n  Dex.Section dexSec=dex.openSection(tocSec);\n  int itemCount=tocSec.size;\n  List<AbstractMap.SimpleEntry<Integer,T>> result=new ArrayList<>(itemCount);\n  if (isOldDex) {\n    for (int i=0; i < itemCount; ++i) {\n      T nextItem=nextItem(dexSec);\n      T adjustedItem=adjustItem(oldToPatchedIndexMap,nextItem);\n      result.add(new AbstractMap.SimpleEntry<>(i,adjustedItem));\n    }\n  }\n else {\n    int i=0;\n    while (i < itemCount) {\n      T nextItem=nextItem(dexSec);\n      int indexBeforeSkip=i;\n      int offsetBeforeSkip=getItemOffsetOrIndex(indexBeforeSkip,nextItem);\n      int indexAfterSkip=indexBeforeSkip;\n      while (indexAfterSkip < itemCount && shouldSkipInNewDex(nextItem)) {\n        if (indexAfterSkip + 1 >= itemCount) {\n          nextItem=null;\n        }\n else {\n          nextItem=nextItem(dexSec);\n        }\n        ++indexAfterSkip;\n      }\n      if (nextItem != null) {\n        int offsetAfterSkip=getItemOffsetOrIndex(indexAfterSkip,nextItem);\n        T adjustedItem=adjustItem(newToPatchedIndexMap,adjustItem(selfIndexMapForSkip,nextItem));\n        int currentOutIndex=result.size();\n        result.add(new AbstractMap.SimpleEntry<>(currentOutIndex,adjustedItem));\n        updateIndexOrOffset(selfIndexMapForSkip,indexBeforeSkip,offsetBeforeSkip,indexAfterSkip,offsetAfterSkip);\n      }\n      i=indexAfterSkip;\n      ++i;\n    }\n  }\n  return result.toArray(new AbstractMap.SimpleEntry[0]);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 239,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2163,
        "startLineNumber" : 212,
        "startColumnNumber" : 4,
        "endLineNumber" : 255,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked,NewApi\") private AbstractMap.SimpleEntry<Integer,T>[] collectSectionItems(Dex dex,boolean isOldDex){\n  TableOfContents.Section tocSec=getTocSection(dex);\n  if (!tocSec.exists()) {\n    return EMPTY_ENTRY_ARRAY;\n  }\n  Dex.Section dexSec=dex.openSection(tocSec);\n  int itemCount=tocSec.size;\n  List<AbstractMap.SimpleEntry<Integer,T>> result=new ArrayList<>(itemCount);\n  if (isOldDex) {\n    for (int i=0; i < itemCount; ++i) {\n      T nextItem=nextItem(dexSec);\n      T adjustedItem=adjustItem(oldToPatchedIndexMap,nextItem);\n      result.add(new AbstractMap.SimpleEntry<>(i,adjustedItem));\n    }\n  }\n else {\n    int i=0;\n    while (i < itemCount) {\n      T nextItem=nextItem(dexSec);\n      int indexBeforeSkip=i;\n      int offsetBeforeSkip=getItemOffsetOrIndex(indexBeforeSkip,nextItem);\n      int indexAfterSkip=indexBeforeSkip;\n      while (indexAfterSkip < itemCount && shouldSkipInNewDex(nextItem)) {\n        if (indexAfterSkip + 1 >= itemCount) {\n          nextItem=null;\n        }\n else {\n          nextItem=nextItem(dexSec);\n        }\n        ++indexAfterSkip;\n      }\n      if (nextItem != null) {\n        int offsetAfterSkip=getItemOffsetOrIndex(indexAfterSkip,nextItem);\n        T adjustedItem=adjustItem(newToPatchedIndexMap,adjustItem(selfIndexMapForSkip,nextItem));\n        int currentOutIndex=result.size();\n        result.add(new AbstractMap.SimpleEntry<>(currentOutIndex,adjustedItem));\n        updateIndexOrOffset(selfIndexMapForSkip,indexBeforeSkip,offsetBeforeSkip,indexAfterSkip,offsetAfterSkip);\n      }\n      i=indexAfterSkip;\n      ++i;\n    }\n  }\n  return result.toArray(new AbstractMap.SimpleEntry[0]);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 263,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 220,
        "startColumnNumber" : 8,
        "endLineNumber" : 220,
        "endColumnNumber" : 86
      },
      "nodeContext" : "List<AbstractMap.SimpleEntry<Integer,T>> result=new ArrayList<>(itemCount);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "itemCount",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 222,
      "startColumnNumber" : 32,
      "endLineNumber" : 222,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 222,
        "startColumnNumber" : 28,
        "endLineNumber" : 222,
        "endColumnNumber" : 41
      },
      "nodeContext" : "i < itemCount",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 251,
        "startLineNumber" : 222,
        "startColumnNumber" : 12,
        "endLineNumber" : 226,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < itemCount; ++i) {\n  T nextItem=nextItem(dexSec);\n  T adjustedItem=adjustItem(oldToPatchedIndexMap,nextItem);\n  result.add(new AbstractMap.SimpleEntry<>(i,adjustedItem));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 41,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 275,
        "startLineNumber" : 221,
        "startColumnNumber" : 22,
        "endLineNumber" : 227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (int i=0; i < itemCount; ++i) {\n    T nextItem=nextItem(dexSec);\n    T adjustedItem=adjustItem(oldToPatchedIndexMap,nextItem);\n    result.add(new AbstractMap.SimpleEntry<>(i,adjustedItem));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 42,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1630,
        "startLineNumber" : 221,
        "startColumnNumber" : 8,
        "endLineNumber" : 253,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isOldDex) {\n  for (int i=0; i < itemCount; ++i) {\n    T nextItem=nextItem(dexSec);\n    T adjustedItem=adjustItem(oldToPatchedIndexMap,nextItem);\n    result.add(new AbstractMap.SimpleEntry<>(i,adjustedItem));\n  }\n}\n else {\n  int i=0;\n  while (i < itemCount) {\n    T nextItem=nextItem(dexSec);\n    int indexBeforeSkip=i;\n    int offsetBeforeSkip=getItemOffsetOrIndex(indexBeforeSkip,nextItem);\n    int indexAfterSkip=indexBeforeSkip;\n    while (indexAfterSkip < itemCount && shouldSkipInNewDex(nextItem)) {\n      if (indexAfterSkip + 1 >= itemCount) {\n        nextItem=null;\n      }\n else {\n        nextItem=nextItem(dexSec);\n      }\n      ++indexAfterSkip;\n    }\n    if (nextItem != null) {\n      int offsetAfterSkip=getItemOffsetOrIndex(indexAfterSkip,nextItem);\n      T adjustedItem=adjustItem(newToPatchedIndexMap,adjustItem(selfIndexMapForSkip,nextItem));\n      int currentOutIndex=result.size();\n      result.add(new AbstractMap.SimpleEntry<>(currentOutIndex,adjustedItem));\n      updateIndexOrOffset(selfIndexMapForSkip,indexBeforeSkip,offsetBeforeSkip,indexAfterSkip,offsetAfterSkip);\n    }\n    i=indexAfterSkip;\n    ++i;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 170,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2028,
        "startLineNumber" : 213,
        "startColumnNumber" : 97,
        "endLineNumber" : 255,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TableOfContents.Section tocSec=getTocSection(dex);\n  if (!tocSec.exists()) {\n    return EMPTY_ENTRY_ARRAY;\n  }\n  Dex.Section dexSec=dex.openSection(tocSec);\n  int itemCount=tocSec.size;\n  List<AbstractMap.SimpleEntry<Integer,T>> result=new ArrayList<>(itemCount);\n  if (isOldDex) {\n    for (int i=0; i < itemCount; ++i) {\n      T nextItem=nextItem(dexSec);\n      T adjustedItem=adjustItem(oldToPatchedIndexMap,nextItem);\n      result.add(new AbstractMap.SimpleEntry<>(i,adjustedItem));\n    }\n  }\n else {\n    int i=0;\n    while (i < itemCount) {\n      T nextItem=nextItem(dexSec);\n      int indexBeforeSkip=i;\n      int offsetBeforeSkip=getItemOffsetOrIndex(indexBeforeSkip,nextItem);\n      int indexAfterSkip=indexBeforeSkip;\n      while (indexAfterSkip < itemCount && shouldSkipInNewDex(nextItem)) {\n        if (indexAfterSkip + 1 >= itemCount) {\n          nextItem=null;\n        }\n else {\n          nextItem=nextItem(dexSec);\n        }\n        ++indexAfterSkip;\n      }\n      if (nextItem != null) {\n        int offsetAfterSkip=getItemOffsetOrIndex(indexAfterSkip,nextItem);\n        T adjustedItem=adjustItem(newToPatchedIndexMap,adjustItem(selfIndexMapForSkip,nextItem));\n        int currentOutIndex=result.size();\n        result.add(new AbstractMap.SimpleEntry<>(currentOutIndex,adjustedItem));\n        updateIndexOrOffset(selfIndexMapForSkip,indexBeforeSkip,offsetBeforeSkip,indexAfterSkip,offsetAfterSkip);\n      }\n      i=indexAfterSkip;\n      ++i;\n    }\n  }\n  return result.toArray(new AbstractMap.SimpleEntry[0]);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 239,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2163,
        "startLineNumber" : 212,
        "startColumnNumber" : 4,
        "endLineNumber" : 255,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked,NewApi\") private AbstractMap.SimpleEntry<Integer,T>[] collectSectionItems(Dex dex,boolean isOldDex){\n  TableOfContents.Section tocSec=getTocSection(dex);\n  if (!tocSec.exists()) {\n    return EMPTY_ENTRY_ARRAY;\n  }\n  Dex.Section dexSec=dex.openSection(tocSec);\n  int itemCount=tocSec.size;\n  List<AbstractMap.SimpleEntry<Integer,T>> result=new ArrayList<>(itemCount);\n  if (isOldDex) {\n    for (int i=0; i < itemCount; ++i) {\n      T nextItem=nextItem(dexSec);\n      T adjustedItem=adjustItem(oldToPatchedIndexMap,nextItem);\n      result.add(new AbstractMap.SimpleEntry<>(i,adjustedItem));\n    }\n  }\n else {\n    int i=0;\n    while (i < itemCount) {\n      T nextItem=nextItem(dexSec);\n      int indexBeforeSkip=i;\n      int offsetBeforeSkip=getItemOffsetOrIndex(indexBeforeSkip,nextItem);\n      int indexAfterSkip=indexBeforeSkip;\n      while (indexAfterSkip < itemCount && shouldSkipInNewDex(nextItem)) {\n        if (indexAfterSkip + 1 >= itemCount) {\n          nextItem=null;\n        }\n else {\n          nextItem=nextItem(dexSec);\n        }\n        ++indexAfterSkip;\n      }\n      if (nextItem != null) {\n        int offsetAfterSkip=getItemOffsetOrIndex(indexAfterSkip,nextItem);\n        T adjustedItem=adjustItem(newToPatchedIndexMap,adjustItem(selfIndexMapForSkip,nextItem));\n        int currentOutIndex=result.size();\n        result.add(new AbstractMap.SimpleEntry<>(currentOutIndex,adjustedItem));\n        updateIndexOrOffset(selfIndexMapForSkip,indexBeforeSkip,offsetBeforeSkip,indexAfterSkip,offsetAfterSkip);\n      }\n      i=indexAfterSkip;\n      ++i;\n    }\n  }\n  return result.toArray(new AbstractMap.SimpleEntry[0]);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 263,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 222,
        "startColumnNumber" : 28,
        "endLineNumber" : 222,
        "endColumnNumber" : 41
      },
      "nodeContext" : "i < itemCount",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "itemCount",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 229,
      "startColumnNumber" : 23,
      "endLineNumber" : 229,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 229,
        "startColumnNumber" : 19,
        "endLineNumber" : 229,
        "endColumnNumber" : 32
      },
      "nodeContext" : "i < itemCount",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1288,
        "startLineNumber" : 229,
        "startColumnNumber" : 12,
        "endLineNumber" : 252,
        "endColumnNumber" : 13
      },
      "nodeContext" : "while (i < itemCount) {\n  T nextItem=nextItem(dexSec);\n  int indexBeforeSkip=i;\n  int offsetBeforeSkip=getItemOffsetOrIndex(indexBeforeSkip,nextItem);\n  int indexAfterSkip=indexBeforeSkip;\n  while (indexAfterSkip < itemCount && shouldSkipInNewDex(nextItem)) {\n    if (indexAfterSkip + 1 >= itemCount) {\n      nextItem=null;\n    }\n else {\n      nextItem=nextItem(dexSec);\n    }\n    ++indexAfterSkip;\n  }\n  if (nextItem != null) {\n    int offsetAfterSkip=getItemOffsetOrIndex(indexAfterSkip,nextItem);\n    T adjustedItem=adjustItem(newToPatchedIndexMap,adjustItem(selfIndexMapForSkip,nextItem));\n    int currentOutIndex=result.size();\n    result.add(new AbstractMap.SimpleEntry<>(currentOutIndex,adjustedItem));\n    updateIndexOrOffset(selfIndexMapForSkip,indexBeforeSkip,offsetBeforeSkip,indexAfterSkip,offsetAfterSkip);\n  }\n  i=indexAfterSkip;\n  ++i;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 120,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1335,
        "startLineNumber" : 227,
        "startColumnNumber" : 15,
        "endLineNumber" : 253,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int i=0;\n  while (i < itemCount) {\n    T nextItem=nextItem(dexSec);\n    int indexBeforeSkip=i;\n    int offsetBeforeSkip=getItemOffsetOrIndex(indexBeforeSkip,nextItem);\n    int indexAfterSkip=indexBeforeSkip;\n    while (indexAfterSkip < itemCount && shouldSkipInNewDex(nextItem)) {\n      if (indexAfterSkip + 1 >= itemCount) {\n        nextItem=null;\n      }\n else {\n        nextItem=nextItem(dexSec);\n      }\n      ++indexAfterSkip;\n    }\n    if (nextItem != null) {\n      int offsetAfterSkip=getItemOffsetOrIndex(indexAfterSkip,nextItem);\n      T adjustedItem=adjustItem(newToPatchedIndexMap,adjustItem(selfIndexMapForSkip,nextItem));\n      int currentOutIndex=result.size();\n      result.add(new AbstractMap.SimpleEntry<>(currentOutIndex,adjustedItem));\n      updateIndexOrOffset(selfIndexMapForSkip,indexBeforeSkip,offsetBeforeSkip,indexAfterSkip,offsetAfterSkip);\n    }\n    i=indexAfterSkip;\n    ++i;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 126,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1630,
        "startLineNumber" : 221,
        "startColumnNumber" : 8,
        "endLineNumber" : 253,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isOldDex) {\n  for (int i=0; i < itemCount; ++i) {\n    T nextItem=nextItem(dexSec);\n    T adjustedItem=adjustItem(oldToPatchedIndexMap,nextItem);\n    result.add(new AbstractMap.SimpleEntry<>(i,adjustedItem));\n  }\n}\n else {\n  int i=0;\n  while (i < itemCount) {\n    T nextItem=nextItem(dexSec);\n    int indexBeforeSkip=i;\n    int offsetBeforeSkip=getItemOffsetOrIndex(indexBeforeSkip,nextItem);\n    int indexAfterSkip=indexBeforeSkip;\n    while (indexAfterSkip < itemCount && shouldSkipInNewDex(nextItem)) {\n      if (indexAfterSkip + 1 >= itemCount) {\n        nextItem=null;\n      }\n else {\n        nextItem=nextItem(dexSec);\n      }\n      ++indexAfterSkip;\n    }\n    if (nextItem != null) {\n      int offsetAfterSkip=getItemOffsetOrIndex(indexAfterSkip,nextItem);\n      T adjustedItem=adjustItem(newToPatchedIndexMap,adjustItem(selfIndexMapForSkip,nextItem));\n      int currentOutIndex=result.size();\n      result.add(new AbstractMap.SimpleEntry<>(currentOutIndex,adjustedItem));\n      updateIndexOrOffset(selfIndexMapForSkip,indexBeforeSkip,offsetBeforeSkip,indexAfterSkip,offsetAfterSkip);\n    }\n    i=indexAfterSkip;\n    ++i;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 170,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2028,
        "startLineNumber" : 213,
        "startColumnNumber" : 97,
        "endLineNumber" : 255,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TableOfContents.Section tocSec=getTocSection(dex);\n  if (!tocSec.exists()) {\n    return EMPTY_ENTRY_ARRAY;\n  }\n  Dex.Section dexSec=dex.openSection(tocSec);\n  int itemCount=tocSec.size;\n  List<AbstractMap.SimpleEntry<Integer,T>> result=new ArrayList<>(itemCount);\n  if (isOldDex) {\n    for (int i=0; i < itemCount; ++i) {\n      T nextItem=nextItem(dexSec);\n      T adjustedItem=adjustItem(oldToPatchedIndexMap,nextItem);\n      result.add(new AbstractMap.SimpleEntry<>(i,adjustedItem));\n    }\n  }\n else {\n    int i=0;\n    while (i < itemCount) {\n      T nextItem=nextItem(dexSec);\n      int indexBeforeSkip=i;\n      int offsetBeforeSkip=getItemOffsetOrIndex(indexBeforeSkip,nextItem);\n      int indexAfterSkip=indexBeforeSkip;\n      while (indexAfterSkip < itemCount && shouldSkipInNewDex(nextItem)) {\n        if (indexAfterSkip + 1 >= itemCount) {\n          nextItem=null;\n        }\n else {\n          nextItem=nextItem(dexSec);\n        }\n        ++indexAfterSkip;\n      }\n      if (nextItem != null) {\n        int offsetAfterSkip=getItemOffsetOrIndex(indexAfterSkip,nextItem);\n        T adjustedItem=adjustItem(newToPatchedIndexMap,adjustItem(selfIndexMapForSkip,nextItem));\n        int currentOutIndex=result.size();\n        result.add(new AbstractMap.SimpleEntry<>(currentOutIndex,adjustedItem));\n        updateIndexOrOffset(selfIndexMapForSkip,indexBeforeSkip,offsetBeforeSkip,indexAfterSkip,offsetAfterSkip);\n      }\n      i=indexAfterSkip;\n      ++i;\n    }\n  }\n  return result.toArray(new AbstractMap.SimpleEntry[0]);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 239,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2163,
        "startLineNumber" : 212,
        "startColumnNumber" : 4,
        "endLineNumber" : 255,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked,NewApi\") private AbstractMap.SimpleEntry<Integer,T>[] collectSectionItems(Dex dex,boolean isOldDex){\n  TableOfContents.Section tocSec=getTocSection(dex);\n  if (!tocSec.exists()) {\n    return EMPTY_ENTRY_ARRAY;\n  }\n  Dex.Section dexSec=dex.openSection(tocSec);\n  int itemCount=tocSec.size;\n  List<AbstractMap.SimpleEntry<Integer,T>> result=new ArrayList<>(itemCount);\n  if (isOldDex) {\n    for (int i=0; i < itemCount; ++i) {\n      T nextItem=nextItem(dexSec);\n      T adjustedItem=adjustItem(oldToPatchedIndexMap,nextItem);\n      result.add(new AbstractMap.SimpleEntry<>(i,adjustedItem));\n    }\n  }\n else {\n    int i=0;\n    while (i < itemCount) {\n      T nextItem=nextItem(dexSec);\n      int indexBeforeSkip=i;\n      int offsetBeforeSkip=getItemOffsetOrIndex(indexBeforeSkip,nextItem);\n      int indexAfterSkip=indexBeforeSkip;\n      while (indexAfterSkip < itemCount && shouldSkipInNewDex(nextItem)) {\n        if (indexAfterSkip + 1 >= itemCount) {\n          nextItem=null;\n        }\n else {\n          nextItem=nextItem(dexSec);\n        }\n        ++indexAfterSkip;\n      }\n      if (nextItem != null) {\n        int offsetAfterSkip=getItemOffsetOrIndex(indexAfterSkip,nextItem);\n        T adjustedItem=adjustItem(newToPatchedIndexMap,adjustItem(selfIndexMapForSkip,nextItem));\n        int currentOutIndex=result.size();\n        result.add(new AbstractMap.SimpleEntry<>(currentOutIndex,adjustedItem));\n        updateIndexOrOffset(selfIndexMapForSkip,indexBeforeSkip,offsetBeforeSkip,indexAfterSkip,offsetAfterSkip);\n      }\n      i=indexAfterSkip;\n      ++i;\n    }\n  }\n  return result.toArray(new AbstractMap.SimpleEntry[0]);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 263,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 229,
        "startColumnNumber" : 19,
        "endLineNumber" : 229,
        "endColumnNumber" : 32
      },
      "nodeContext" : "i < itemCount",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "itemCount",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 234,
      "startColumnNumber" : 40,
      "endLineNumber" : 234,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 234,
        "startColumnNumber" : 23,
        "endLineNumber" : 234,
        "endColumnNumber" : 49
      },
      "nodeContext" : "indexAfterSkip < itemCount",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 234,
        "startColumnNumber" : 23,
        "endLineNumber" : 234,
        "endColumnNumber" : 81
      },
      "nodeContext" : "indexAfterSkip < itemCount && shouldSkipInNewDex(nextItem)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 404,
        "startLineNumber" : 234,
        "startColumnNumber" : 16,
        "endLineNumber" : 242,
        "endColumnNumber" : 17
      },
      "nodeContext" : "while (indexAfterSkip < itemCount && shouldSkipInNewDex(nextItem)) {\n  if (indexAfterSkip + 1 >= itemCount) {\n    nextItem=null;\n  }\n else {\n    nextItem=nextItem(dexSec);\n  }\n  ++indexAfterSkip;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 30,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1266,
        "startLineNumber" : 229,
        "startColumnNumber" : 34,
        "endLineNumber" : 252,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  T nextItem=nextItem(dexSec);\n  int indexBeforeSkip=i;\n  int offsetBeforeSkip=getItemOffsetOrIndex(indexBeforeSkip,nextItem);\n  int indexAfterSkip=indexBeforeSkip;\n  while (indexAfterSkip < itemCount && shouldSkipInNewDex(nextItem)) {\n    if (indexAfterSkip + 1 >= itemCount) {\n      nextItem=null;\n    }\n else {\n      nextItem=nextItem(dexSec);\n    }\n    ++indexAfterSkip;\n  }\n  if (nextItem != null) {\n    int offsetAfterSkip=getItemOffsetOrIndex(indexAfterSkip,nextItem);\n    T adjustedItem=adjustItem(newToPatchedIndexMap,adjustItem(selfIndexMapForSkip,nextItem));\n    int currentOutIndex=result.size();\n    result.add(new AbstractMap.SimpleEntry<>(currentOutIndex,adjustedItem));\n    updateIndexOrOffset(selfIndexMapForSkip,indexBeforeSkip,offsetBeforeSkip,indexAfterSkip,offsetAfterSkip);\n  }\n  i=indexAfterSkip;\n  ++i;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 116,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1288,
        "startLineNumber" : 229,
        "startColumnNumber" : 12,
        "endLineNumber" : 252,
        "endColumnNumber" : 13
      },
      "nodeContext" : "while (i < itemCount) {\n  T nextItem=nextItem(dexSec);\n  int indexBeforeSkip=i;\n  int offsetBeforeSkip=getItemOffsetOrIndex(indexBeforeSkip,nextItem);\n  int indexAfterSkip=indexBeforeSkip;\n  while (indexAfterSkip < itemCount && shouldSkipInNewDex(nextItem)) {\n    if (indexAfterSkip + 1 >= itemCount) {\n      nextItem=null;\n    }\n else {\n      nextItem=nextItem(dexSec);\n    }\n    ++indexAfterSkip;\n  }\n  if (nextItem != null) {\n    int offsetAfterSkip=getItemOffsetOrIndex(indexAfterSkip,nextItem);\n    T adjustedItem=adjustItem(newToPatchedIndexMap,adjustItem(selfIndexMapForSkip,nextItem));\n    int currentOutIndex=result.size();\n    result.add(new AbstractMap.SimpleEntry<>(currentOutIndex,adjustedItem));\n    updateIndexOrOffset(selfIndexMapForSkip,indexBeforeSkip,offsetBeforeSkip,indexAfterSkip,offsetAfterSkip);\n  }\n  i=indexAfterSkip;\n  ++i;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 120,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1335,
        "startLineNumber" : 227,
        "startColumnNumber" : 15,
        "endLineNumber" : 253,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int i=0;\n  while (i < itemCount) {\n    T nextItem=nextItem(dexSec);\n    int indexBeforeSkip=i;\n    int offsetBeforeSkip=getItemOffsetOrIndex(indexBeforeSkip,nextItem);\n    int indexAfterSkip=indexBeforeSkip;\n    while (indexAfterSkip < itemCount && shouldSkipInNewDex(nextItem)) {\n      if (indexAfterSkip + 1 >= itemCount) {\n        nextItem=null;\n      }\n else {\n        nextItem=nextItem(dexSec);\n      }\n      ++indexAfterSkip;\n    }\n    if (nextItem != null) {\n      int offsetAfterSkip=getItemOffsetOrIndex(indexAfterSkip,nextItem);\n      T adjustedItem=adjustItem(newToPatchedIndexMap,adjustItem(selfIndexMapForSkip,nextItem));\n      int currentOutIndex=result.size();\n      result.add(new AbstractMap.SimpleEntry<>(currentOutIndex,adjustedItem));\n      updateIndexOrOffset(selfIndexMapForSkip,indexBeforeSkip,offsetBeforeSkip,indexAfterSkip,offsetAfterSkip);\n    }\n    i=indexAfterSkip;\n    ++i;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 126,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1630,
        "startLineNumber" : 221,
        "startColumnNumber" : 8,
        "endLineNumber" : 253,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isOldDex) {\n  for (int i=0; i < itemCount; ++i) {\n    T nextItem=nextItem(dexSec);\n    T adjustedItem=adjustItem(oldToPatchedIndexMap,nextItem);\n    result.add(new AbstractMap.SimpleEntry<>(i,adjustedItem));\n  }\n}\n else {\n  int i=0;\n  while (i < itemCount) {\n    T nextItem=nextItem(dexSec);\n    int indexBeforeSkip=i;\n    int offsetBeforeSkip=getItemOffsetOrIndex(indexBeforeSkip,nextItem);\n    int indexAfterSkip=indexBeforeSkip;\n    while (indexAfterSkip < itemCount && shouldSkipInNewDex(nextItem)) {\n      if (indexAfterSkip + 1 >= itemCount) {\n        nextItem=null;\n      }\n else {\n        nextItem=nextItem(dexSec);\n      }\n      ++indexAfterSkip;\n    }\n    if (nextItem != null) {\n      int offsetAfterSkip=getItemOffsetOrIndex(indexAfterSkip,nextItem);\n      T adjustedItem=adjustItem(newToPatchedIndexMap,adjustItem(selfIndexMapForSkip,nextItem));\n      int currentOutIndex=result.size();\n      result.add(new AbstractMap.SimpleEntry<>(currentOutIndex,adjustedItem));\n      updateIndexOrOffset(selfIndexMapForSkip,indexBeforeSkip,offsetBeforeSkip,indexAfterSkip,offsetAfterSkip);\n    }\n    i=indexAfterSkip;\n    ++i;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 170,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2028,
        "startLineNumber" : 213,
        "startColumnNumber" : 97,
        "endLineNumber" : 255,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TableOfContents.Section tocSec=getTocSection(dex);\n  if (!tocSec.exists()) {\n    return EMPTY_ENTRY_ARRAY;\n  }\n  Dex.Section dexSec=dex.openSection(tocSec);\n  int itemCount=tocSec.size;\n  List<AbstractMap.SimpleEntry<Integer,T>> result=new ArrayList<>(itemCount);\n  if (isOldDex) {\n    for (int i=0; i < itemCount; ++i) {\n      T nextItem=nextItem(dexSec);\n      T adjustedItem=adjustItem(oldToPatchedIndexMap,nextItem);\n      result.add(new AbstractMap.SimpleEntry<>(i,adjustedItem));\n    }\n  }\n else {\n    int i=0;\n    while (i < itemCount) {\n      T nextItem=nextItem(dexSec);\n      int indexBeforeSkip=i;\n      int offsetBeforeSkip=getItemOffsetOrIndex(indexBeforeSkip,nextItem);\n      int indexAfterSkip=indexBeforeSkip;\n      while (indexAfterSkip < itemCount && shouldSkipInNewDex(nextItem)) {\n        if (indexAfterSkip + 1 >= itemCount) {\n          nextItem=null;\n        }\n else {\n          nextItem=nextItem(dexSec);\n        }\n        ++indexAfterSkip;\n      }\n      if (nextItem != null) {\n        int offsetAfterSkip=getItemOffsetOrIndex(indexAfterSkip,nextItem);\n        T adjustedItem=adjustItem(newToPatchedIndexMap,adjustItem(selfIndexMapForSkip,nextItem));\n        int currentOutIndex=result.size();\n        result.add(new AbstractMap.SimpleEntry<>(currentOutIndex,adjustedItem));\n        updateIndexOrOffset(selfIndexMapForSkip,indexBeforeSkip,offsetBeforeSkip,indexAfterSkip,offsetAfterSkip);\n      }\n      i=indexAfterSkip;\n      ++i;\n    }\n  }\n  return result.toArray(new AbstractMap.SimpleEntry[0]);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 239,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2163,
        "startLineNumber" : 212,
        "startColumnNumber" : 4,
        "endLineNumber" : 255,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked,NewApi\") private AbstractMap.SimpleEntry<Integer,T>[] collectSectionItems(Dex dex,boolean isOldDex){\n  TableOfContents.Section tocSec=getTocSection(dex);\n  if (!tocSec.exists()) {\n    return EMPTY_ENTRY_ARRAY;\n  }\n  Dex.Section dexSec=dex.openSection(tocSec);\n  int itemCount=tocSec.size;\n  List<AbstractMap.SimpleEntry<Integer,T>> result=new ArrayList<>(itemCount);\n  if (isOldDex) {\n    for (int i=0; i < itemCount; ++i) {\n      T nextItem=nextItem(dexSec);\n      T adjustedItem=adjustItem(oldToPatchedIndexMap,nextItem);\n      result.add(new AbstractMap.SimpleEntry<>(i,adjustedItem));\n    }\n  }\n else {\n    int i=0;\n    while (i < itemCount) {\n      T nextItem=nextItem(dexSec);\n      int indexBeforeSkip=i;\n      int offsetBeforeSkip=getItemOffsetOrIndex(indexBeforeSkip,nextItem);\n      int indexAfterSkip=indexBeforeSkip;\n      while (indexAfterSkip < itemCount && shouldSkipInNewDex(nextItem)) {\n        if (indexAfterSkip + 1 >= itemCount) {\n          nextItem=null;\n        }\n else {\n          nextItem=nextItem(dexSec);\n        }\n        ++indexAfterSkip;\n      }\n      if (nextItem != null) {\n        int offsetAfterSkip=getItemOffsetOrIndex(indexAfterSkip,nextItem);\n        T adjustedItem=adjustItem(newToPatchedIndexMap,adjustItem(selfIndexMapForSkip,nextItem));\n        int currentOutIndex=result.size();\n        result.add(new AbstractMap.SimpleEntry<>(currentOutIndex,adjustedItem));\n        updateIndexOrOffset(selfIndexMapForSkip,indexBeforeSkip,offsetBeforeSkip,indexAfterSkip,offsetAfterSkip);\n      }\n      i=indexAfterSkip;\n      ++i;\n    }\n  }\n  return result.toArray(new AbstractMap.SimpleEntry[0]);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 263,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 234,
        "startColumnNumber" : 23,
        "endLineNumber" : 234,
        "endColumnNumber" : 81
      },
      "nodeContext" : "indexAfterSkip < itemCount && shouldSkipInNewDex(nextItem)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "itemCount",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 235,
      "startColumnNumber" : 46,
      "endLineNumber" : 235,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 235,
        "startColumnNumber" : 24,
        "endLineNumber" : 235,
        "endColumnNumber" : 55
      },
      "nodeContext" : "indexAfterSkip + 1 >= itemCount",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 259,
        "startLineNumber" : 235,
        "startColumnNumber" : 20,
        "endLineNumber" : 240,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (indexAfterSkip + 1 >= itemCount) {\n  nextItem=null;\n}\n else {\n  nextItem=nextItem(dexSec);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 337,
        "startLineNumber" : 234,
        "startColumnNumber" : 83,
        "endLineNumber" : 242,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (indexAfterSkip + 1 >= itemCount) {\n    nextItem=null;\n  }\n else {\n    nextItem=nextItem(dexSec);\n  }\n  ++indexAfterSkip;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 404,
        "startLineNumber" : 234,
        "startColumnNumber" : 16,
        "endLineNumber" : 242,
        "endColumnNumber" : 17
      },
      "nodeContext" : "while (indexAfterSkip < itemCount && shouldSkipInNewDex(nextItem)) {\n  if (indexAfterSkip + 1 >= itemCount) {\n    nextItem=null;\n  }\n else {\n    nextItem=nextItem(dexSec);\n  }\n  ++indexAfterSkip;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 30,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1266,
        "startLineNumber" : 229,
        "startColumnNumber" : 34,
        "endLineNumber" : 252,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  T nextItem=nextItem(dexSec);\n  int indexBeforeSkip=i;\n  int offsetBeforeSkip=getItemOffsetOrIndex(indexBeforeSkip,nextItem);\n  int indexAfterSkip=indexBeforeSkip;\n  while (indexAfterSkip < itemCount && shouldSkipInNewDex(nextItem)) {\n    if (indexAfterSkip + 1 >= itemCount) {\n      nextItem=null;\n    }\n else {\n      nextItem=nextItem(dexSec);\n    }\n    ++indexAfterSkip;\n  }\n  if (nextItem != null) {\n    int offsetAfterSkip=getItemOffsetOrIndex(indexAfterSkip,nextItem);\n    T adjustedItem=adjustItem(newToPatchedIndexMap,adjustItem(selfIndexMapForSkip,nextItem));\n    int currentOutIndex=result.size();\n    result.add(new AbstractMap.SimpleEntry<>(currentOutIndex,adjustedItem));\n    updateIndexOrOffset(selfIndexMapForSkip,indexBeforeSkip,offsetBeforeSkip,indexAfterSkip,offsetAfterSkip);\n  }\n  i=indexAfterSkip;\n  ++i;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 116,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1288,
        "startLineNumber" : 229,
        "startColumnNumber" : 12,
        "endLineNumber" : 252,
        "endColumnNumber" : 13
      },
      "nodeContext" : "while (i < itemCount) {\n  T nextItem=nextItem(dexSec);\n  int indexBeforeSkip=i;\n  int offsetBeforeSkip=getItemOffsetOrIndex(indexBeforeSkip,nextItem);\n  int indexAfterSkip=indexBeforeSkip;\n  while (indexAfterSkip < itemCount && shouldSkipInNewDex(nextItem)) {\n    if (indexAfterSkip + 1 >= itemCount) {\n      nextItem=null;\n    }\n else {\n      nextItem=nextItem(dexSec);\n    }\n    ++indexAfterSkip;\n  }\n  if (nextItem != null) {\n    int offsetAfterSkip=getItemOffsetOrIndex(indexAfterSkip,nextItem);\n    T adjustedItem=adjustItem(newToPatchedIndexMap,adjustItem(selfIndexMapForSkip,nextItem));\n    int currentOutIndex=result.size();\n    result.add(new AbstractMap.SimpleEntry<>(currentOutIndex,adjustedItem));\n    updateIndexOrOffset(selfIndexMapForSkip,indexBeforeSkip,offsetBeforeSkip,indexAfterSkip,offsetAfterSkip);\n  }\n  i=indexAfterSkip;\n  ++i;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 120,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1335,
        "startLineNumber" : 227,
        "startColumnNumber" : 15,
        "endLineNumber" : 253,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int i=0;\n  while (i < itemCount) {\n    T nextItem=nextItem(dexSec);\n    int indexBeforeSkip=i;\n    int offsetBeforeSkip=getItemOffsetOrIndex(indexBeforeSkip,nextItem);\n    int indexAfterSkip=indexBeforeSkip;\n    while (indexAfterSkip < itemCount && shouldSkipInNewDex(nextItem)) {\n      if (indexAfterSkip + 1 >= itemCount) {\n        nextItem=null;\n      }\n else {\n        nextItem=nextItem(dexSec);\n      }\n      ++indexAfterSkip;\n    }\n    if (nextItem != null) {\n      int offsetAfterSkip=getItemOffsetOrIndex(indexAfterSkip,nextItem);\n      T adjustedItem=adjustItem(newToPatchedIndexMap,adjustItem(selfIndexMapForSkip,nextItem));\n      int currentOutIndex=result.size();\n      result.add(new AbstractMap.SimpleEntry<>(currentOutIndex,adjustedItem));\n      updateIndexOrOffset(selfIndexMapForSkip,indexBeforeSkip,offsetBeforeSkip,indexAfterSkip,offsetAfterSkip);\n    }\n    i=indexAfterSkip;\n    ++i;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 126,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1630,
        "startLineNumber" : 221,
        "startColumnNumber" : 8,
        "endLineNumber" : 253,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isOldDex) {\n  for (int i=0; i < itemCount; ++i) {\n    T nextItem=nextItem(dexSec);\n    T adjustedItem=adjustItem(oldToPatchedIndexMap,nextItem);\n    result.add(new AbstractMap.SimpleEntry<>(i,adjustedItem));\n  }\n}\n else {\n  int i=0;\n  while (i < itemCount) {\n    T nextItem=nextItem(dexSec);\n    int indexBeforeSkip=i;\n    int offsetBeforeSkip=getItemOffsetOrIndex(indexBeforeSkip,nextItem);\n    int indexAfterSkip=indexBeforeSkip;\n    while (indexAfterSkip < itemCount && shouldSkipInNewDex(nextItem)) {\n      if (indexAfterSkip + 1 >= itemCount) {\n        nextItem=null;\n      }\n else {\n        nextItem=nextItem(dexSec);\n      }\n      ++indexAfterSkip;\n    }\n    if (nextItem != null) {\n      int offsetAfterSkip=getItemOffsetOrIndex(indexAfterSkip,nextItem);\n      T adjustedItem=adjustItem(newToPatchedIndexMap,adjustItem(selfIndexMapForSkip,nextItem));\n      int currentOutIndex=result.size();\n      result.add(new AbstractMap.SimpleEntry<>(currentOutIndex,adjustedItem));\n      updateIndexOrOffset(selfIndexMapForSkip,indexBeforeSkip,offsetBeforeSkip,indexAfterSkip,offsetAfterSkip);\n    }\n    i=indexAfterSkip;\n    ++i;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 170,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2028,
        "startLineNumber" : 213,
        "startColumnNumber" : 97,
        "endLineNumber" : 255,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TableOfContents.Section tocSec=getTocSection(dex);\n  if (!tocSec.exists()) {\n    return EMPTY_ENTRY_ARRAY;\n  }\n  Dex.Section dexSec=dex.openSection(tocSec);\n  int itemCount=tocSec.size;\n  List<AbstractMap.SimpleEntry<Integer,T>> result=new ArrayList<>(itemCount);\n  if (isOldDex) {\n    for (int i=0; i < itemCount; ++i) {\n      T nextItem=nextItem(dexSec);\n      T adjustedItem=adjustItem(oldToPatchedIndexMap,nextItem);\n      result.add(new AbstractMap.SimpleEntry<>(i,adjustedItem));\n    }\n  }\n else {\n    int i=0;\n    while (i < itemCount) {\n      T nextItem=nextItem(dexSec);\n      int indexBeforeSkip=i;\n      int offsetBeforeSkip=getItemOffsetOrIndex(indexBeforeSkip,nextItem);\n      int indexAfterSkip=indexBeforeSkip;\n      while (indexAfterSkip < itemCount && shouldSkipInNewDex(nextItem)) {\n        if (indexAfterSkip + 1 >= itemCount) {\n          nextItem=null;\n        }\n else {\n          nextItem=nextItem(dexSec);\n        }\n        ++indexAfterSkip;\n      }\n      if (nextItem != null) {\n        int offsetAfterSkip=getItemOffsetOrIndex(indexAfterSkip,nextItem);\n        T adjustedItem=adjustItem(newToPatchedIndexMap,adjustItem(selfIndexMapForSkip,nextItem));\n        int currentOutIndex=result.size();\n        result.add(new AbstractMap.SimpleEntry<>(currentOutIndex,adjustedItem));\n        updateIndexOrOffset(selfIndexMapForSkip,indexBeforeSkip,offsetBeforeSkip,indexAfterSkip,offsetAfterSkip);\n      }\n      i=indexAfterSkip;\n      ++i;\n    }\n  }\n  return result.toArray(new AbstractMap.SimpleEntry[0]);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 239,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2163,
        "startLineNumber" : 212,
        "startColumnNumber" : 4,
        "endLineNumber" : 255,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked,NewApi\") private AbstractMap.SimpleEntry<Integer,T>[] collectSectionItems(Dex dex,boolean isOldDex){\n  TableOfContents.Section tocSec=getTocSection(dex);\n  if (!tocSec.exists()) {\n    return EMPTY_ENTRY_ARRAY;\n  }\n  Dex.Section dexSec=dex.openSection(tocSec);\n  int itemCount=tocSec.size;\n  List<AbstractMap.SimpleEntry<Integer,T>> result=new ArrayList<>(itemCount);\n  if (isOldDex) {\n    for (int i=0; i < itemCount; ++i) {\n      T nextItem=nextItem(dexSec);\n      T adjustedItem=adjustItem(oldToPatchedIndexMap,nextItem);\n      result.add(new AbstractMap.SimpleEntry<>(i,adjustedItem));\n    }\n  }\n else {\n    int i=0;\n    while (i < itemCount) {\n      T nextItem=nextItem(dexSec);\n      int indexBeforeSkip=i;\n      int offsetBeforeSkip=getItemOffsetOrIndex(indexBeforeSkip,nextItem);\n      int indexAfterSkip=indexBeforeSkip;\n      while (indexAfterSkip < itemCount && shouldSkipInNewDex(nextItem)) {\n        if (indexAfterSkip + 1 >= itemCount) {\n          nextItem=null;\n        }\n else {\n          nextItem=nextItem(dexSec);\n        }\n        ++indexAfterSkip;\n      }\n      if (nextItem != null) {\n        int offsetAfterSkip=getItemOffsetOrIndex(indexAfterSkip,nextItem);\n        T adjustedItem=adjustItem(newToPatchedIndexMap,adjustItem(selfIndexMapForSkip,nextItem));\n        int currentOutIndex=result.size();\n        result.add(new AbstractMap.SimpleEntry<>(currentOutIndex,adjustedItem));\n        updateIndexOrOffset(selfIndexMapForSkip,indexBeforeSkip,offsetBeforeSkip,indexAfterSkip,offsetAfterSkip);\n      }\n      i=indexAfterSkip;\n      ++i;\n    }\n  }\n  return result.toArray(new AbstractMap.SimpleEntry[0]);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 263,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 235,
        "startColumnNumber" : 24,
        "endLineNumber" : 235,
        "endColumnNumber" : 55
      },
      "nodeContext" : "indexAfterSkip + 1 >= itemCount",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 220,
    "startColumnNumber" : 75,
    "endLineNumber" : 220,
    "endColumnNumber" : 84
  }, {
    "charLength" : 9,
    "startLineNumber" : 222,
    "startColumnNumber" : 32,
    "endLineNumber" : 222,
    "endColumnNumber" : 41
  }, {
    "charLength" : 9,
    "startLineNumber" : 229,
    "startColumnNumber" : 23,
    "endLineNumber" : 229,
    "endColumnNumber" : 32
  }, {
    "charLength" : 9,
    "startLineNumber" : 234,
    "startColumnNumber" : 40,
    "endLineNumber" : 234,
    "endColumnNumber" : 49
  }, {
    "charLength" : 9,
    "startLineNumber" : 235,
    "startColumnNumber" : 46,
    "endLineNumber" : 235,
    "endColumnNumber" : 55
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  } ]
}