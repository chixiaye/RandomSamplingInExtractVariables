{
  "id" : 409,
  "expression" : "info.append(\"Synthetic=\").append(m.isSynthetic())",
  "projectName" : "Netflix@Hystrix",
  "commitID" : "45d7875c3e51f6d6152b667db31e4fe435711917",
  "filePath" : "/hystrix-contrib/hystrix-javanica/src/main/java/com/netflix/hystrix/contrib/javanica/utils/AopUtils.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "info.append(\"Synthetic=\").append(m.isSynthetic())",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 49,
      "startLineNumber" : 138,
      "startColumnNumber" : 8,
      "endLineNumber" : 138,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 9,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 138,
        "startColumnNumber" : 8,
        "endLineNumber" : 138,
        "endColumnNumber" : 70
      },
      "nodeContext" : "info.append(\"Synthetic=\").append(m.isSynthetic()).append(\"\\n\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 138,
        "startColumnNumber" : 8,
        "endLineNumber" : 138,
        "endColumnNumber" : 71
      },
      "nodeContext" : "info.append(\"Synthetic=\").append(m.isSynthetic()).append(\"\\n\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2628,
        "startLineNumber" : 128,
        "startColumnNumber" : 49,
        "endLineNumber" : 189,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  StringBuilder info=new StringBuilder();\n  info.append(\"Method signature:\").append(\"\\n\");\n  info.append(m.toGenericString()).append(\"\\n\");\n  info.append(\"Declaring class:\\n\");\n  info.append(m.getDeclaringClass().getCanonicalName()).append(\"\\n\");\n  info.append(\"\\nFlags:\").append(\"\\n\");\n  info.append(\"Bridge=\").append(m.isBridge()).append(\"\\n\");\n  info.append(\"Synthetic=\").append(m.isSynthetic()).append(\"\\n\");\n  info.append(\"Final=\").append(Modifier.isFinal(m.getModifiers())).append(\"\\n\");\n  info.append(\"Native=\").append(Modifier.isNative(m.getModifiers())).append(\"\\n\");\n  info.append(\"Synchronized=\").append(Modifier.isSynchronized(m.getModifiers())).append(\"\\n\");\n  info.append(\"Abstract=\").append(Modifier.isAbstract(m.getModifiers())).append(\"\\n\");\n  info.append(\"AccessLevel=\").append(getAccessLevel(m.getModifiers())).append(\"\\n\");\n  info.append(\"\\nReturn Type: \\n\");\n  info.append(\"ReturnType=\").append(m.getReturnType()).append(\"\\n\");\n  info.append(\"GenericReturnType=\").append(m.getGenericReturnType()).append(\"\\n\");\n  info.append(\"\\nParameters:\");\n  Class<?>[] pType=m.getParameterTypes();\n  Type[] gpType=m.getGenericParameterTypes();\n  if (pType.length != 0) {\n    info.append(\"\\n\");\n  }\n else {\n    info.append(\"empty\\n\");\n  }\n  for (int i=0; i < pType.length; i++) {\n    info.append(\"parameter [\").append(i).append(\"]:\\n\");\n    info.append(\"ParameterType=\").append(pType[i]).append(\"\\n\");\n    info.append(\"GenericParameterType=\").append(gpType[i]).append(\"\\n\");\n  }\n  info.append(\"\\nExceptions:\");\n  Class<?>[] xType=m.getExceptionTypes();\n  Type[] gxType=m.getGenericExceptionTypes();\n  if (xType.length != 0) {\n    info.append(\"\\n\");\n  }\n else {\n    info.append(\"empty\\n\");\n  }\n  for (int i=0; i < xType.length; i++) {\n    info.append(\"exception [\").append(i).append(\"]:\\n\");\n    info.append(\"ExceptionType=\").append(xType[i]).append(\"\\n\");\n    info.append(\"GenericExceptionType=\").append(gxType[i]).append(\"\\n\");\n  }\n  info.append(\"\\nAnnotations:\");\n  if (m.getAnnotations().length != 0) {\n    info.append(\"\\n\");\n  }\n else {\n    info.append(\"empty\\n\");\n  }\n  for (int i=0; i < m.getAnnotations().length; i++) {\n    info.append(\"annotation[\").append(i).append(\"]=\").append(m.getAnnotations()[i]).append(\"\\n\");\n  }\n  return info.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 446,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2673,
        "startLineNumber" : 128,
        "startColumnNumber" : 4,
        "endLineNumber" : 189,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static String getMethodInfo(Method m){\n  StringBuilder info=new StringBuilder();\n  info.append(\"Method signature:\").append(\"\\n\");\n  info.append(m.toGenericString()).append(\"\\n\");\n  info.append(\"Declaring class:\\n\");\n  info.append(m.getDeclaringClass().getCanonicalName()).append(\"\\n\");\n  info.append(\"\\nFlags:\").append(\"\\n\");\n  info.append(\"Bridge=\").append(m.isBridge()).append(\"\\n\");\n  info.append(\"Synthetic=\").append(m.isSynthetic()).append(\"\\n\");\n  info.append(\"Final=\").append(Modifier.isFinal(m.getModifiers())).append(\"\\n\");\n  info.append(\"Native=\").append(Modifier.isNative(m.getModifiers())).append(\"\\n\");\n  info.append(\"Synchronized=\").append(Modifier.isSynchronized(m.getModifiers())).append(\"\\n\");\n  info.append(\"Abstract=\").append(Modifier.isAbstract(m.getModifiers())).append(\"\\n\");\n  info.append(\"AccessLevel=\").append(getAccessLevel(m.getModifiers())).append(\"\\n\");\n  info.append(\"\\nReturn Type: \\n\");\n  info.append(\"ReturnType=\").append(m.getReturnType()).append(\"\\n\");\n  info.append(\"GenericReturnType=\").append(m.getGenericReturnType()).append(\"\\n\");\n  info.append(\"\\nParameters:\");\n  Class<?>[] pType=m.getParameterTypes();\n  Type[] gpType=m.getGenericParameterTypes();\n  if (pType.length != 0) {\n    info.append(\"\\n\");\n  }\n else {\n    info.append(\"empty\\n\");\n  }\n  for (int i=0; i < pType.length; i++) {\n    info.append(\"parameter [\").append(i).append(\"]:\\n\");\n    info.append(\"ParameterType=\").append(pType[i]).append(\"\\n\");\n    info.append(\"GenericParameterType=\").append(gpType[i]).append(\"\\n\");\n  }\n  info.append(\"\\nExceptions:\");\n  Class<?>[] xType=m.getExceptionTypes();\n  Type[] gxType=m.getGenericExceptionTypes();\n  if (xType.length != 0) {\n    info.append(\"\\n\");\n  }\n else {\n    info.append(\"empty\\n\");\n  }\n  for (int i=0; i < xType.length; i++) {\n    info.append(\"exception [\").append(i).append(\"]:\\n\");\n    info.append(\"ExceptionType=\").append(xType[i]).append(\"\\n\");\n    info.append(\"GenericExceptionType=\").append(gxType[i]).append(\"\\n\");\n  }\n  info.append(\"\\nAnnotations:\");\n  if (m.getAnnotations().length != 0) {\n    info.append(\"\\n\");\n  }\n else {\n    info.append(\"empty\\n\");\n  }\n  for (int i=0; i < m.getAnnotations().length; i++) {\n    info.append(\"annotation[\").append(i).append(\"]=\").append(m.getAnnotations()[i]).append(\"\\n\");\n  }\n  return info.toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 456,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 138,
        "startColumnNumber" : 8,
        "endLineNumber" : 138,
        "endColumnNumber" : 71
      },
      "nodeContext" : "info.append(\"Synthetic=\").append(m.isSynthetic()).append(\"\\n\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 6,
    "type" : "java.lang.StringBuilder"
  } ],
  "positionList" : [ {
    "charLength" : 49,
    "startLineNumber" : 138,
    "startColumnNumber" : 8,
    "endLineNumber" : 138,
    "endColumnNumber" : 57
  } ],
  "layoutRelationDataList" : [ ]
}