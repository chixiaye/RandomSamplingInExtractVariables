{
  "id" : 149,
  "expression" : "ELEMENT_STATE_READ_CONTENT",
  "projectName" : "DrKLO@Telegram",
  "commitID" : "11fbfb1329df700b203e1852a71c4c11b5ab12f4",
  "filePath" : "/TMessagesProj/src/main/java/com/google/android/exoplayer2/extractor/mkv/DefaultEbmlReader.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ELEMENT_STATE_READ_CONTENT",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 103,
      "startColumnNumber" : 23,
      "endLineNumber" : 103,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 103,
        "startColumnNumber" : 8,
        "endLineNumber" : 103,
        "endColumnNumber" : 49
      },
      "nodeContext" : "elementState=ELEMENT_STATE_READ_CONTENT",
      "nodeType" : "Assignment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 103,
        "startColumnNumber" : 8,
        "endLineNumber" : 103,
        "endColumnNumber" : 50
      },
      "nodeContext" : "elementState=ELEMENT_STATE_READ_CONTENT;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 160,
        "startLineNumber" : 101,
        "startColumnNumber" : 59,
        "endLineNumber" : 104,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  elementContentSize=varintReader.readUnsignedVarint(input,false,true,MAX_LENGTH_BYTES);\n  elementState=ELEMENT_STATE_READ_CONTENT;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 213,
        "startLineNumber" : 101,
        "startColumnNumber" : 6,
        "endLineNumber" : 104,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (elementState == ELEMENT_STATE_READ_CONTENT_SIZE) {\n  elementContentSize=varintReader.readUnsignedVarint(input,false,true,MAX_LENGTH_BYTES);\n  elementState=ELEMENT_STATE_READ_CONTENT;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 3170,
        "startLineNumber" : 81,
        "startColumnNumber" : 17,
        "endLineNumber" : 148,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!masterElementsStack.isEmpty() && input.getPosition() >= masterElementsStack.peek().elementEndPosition) {\n    processor.endMasterElement(masterElementsStack.pop().elementId);\n    return true;\n  }\n  if (elementState == ELEMENT_STATE_READ_ID) {\n    long result=varintReader.readUnsignedVarint(input,true,false,MAX_ID_BYTES);\n    if (result == C.RESULT_MAX_LENGTH_EXCEEDED) {\n      result=maybeResyncToNextLevel1Element(input);\n    }\n    if (result == C.RESULT_END_OF_INPUT) {\n      return false;\n    }\n    elementId=(int)result;\n    elementState=ELEMENT_STATE_READ_CONTENT_SIZE;\n  }\n  if (elementState == ELEMENT_STATE_READ_CONTENT_SIZE) {\n    elementContentSize=varintReader.readUnsignedVarint(input,false,true,MAX_LENGTH_BYTES);\n    elementState=ELEMENT_STATE_READ_CONTENT;\n  }\n  @EbmlProcessor.ElementType int type=processor.getElementType(elementId);\nswitch (type) {\ncase EbmlProcessor.ELEMENT_TYPE_MASTER:    long elementContentPosition=input.getPosition();\n  long elementEndPosition=elementContentPosition + elementContentSize;\nmasterElementsStack.push(new MasterElement(elementId,elementEndPosition));\nprocessor.startMasterElement(elementId,elementContentPosition,elementContentSize);\nelementState=ELEMENT_STATE_READ_ID;\nreturn true;\ncase EbmlProcessor.ELEMENT_TYPE_UNSIGNED_INT:if (elementContentSize > MAX_INTEGER_ELEMENT_SIZE_BYTES) {\nthrow new ParserException(\"Invalid integer size: \" + elementContentSize);\n}\nprocessor.integerElement(elementId,readInteger(input,(int)elementContentSize));\nelementState=ELEMENT_STATE_READ_ID;\nreturn true;\ncase EbmlProcessor.ELEMENT_TYPE_FLOAT:if (elementContentSize != VALID_FLOAT32_ELEMENT_SIZE_BYTES && elementContentSize != VALID_FLOAT64_ELEMENT_SIZE_BYTES) {\nthrow new ParserException(\"Invalid float size: \" + elementContentSize);\n}\nprocessor.floatElement(elementId,readFloat(input,(int)elementContentSize));\nelementState=ELEMENT_STATE_READ_ID;\nreturn true;\ncase EbmlProcessor.ELEMENT_TYPE_STRING:if (elementContentSize > Integer.MAX_VALUE) {\nthrow new ParserException(\"String element size: \" + elementContentSize);\n}\nprocessor.stringElement(elementId,readString(input,(int)elementContentSize));\nelementState=ELEMENT_STATE_READ_ID;\nreturn true;\ncase EbmlProcessor.ELEMENT_TYPE_BINARY:processor.binaryElement(elementId,(int)elementContentSize,input);\nelementState=ELEMENT_STATE_READ_ID;\nreturn true;\ncase EbmlProcessor.ELEMENT_TYPE_UNKNOWN:input.skipFully((int)elementContentSize);\nelementState=ELEMENT_STATE_READ_ID;\nbreak;\ndefault:throw new ParserException(\"Invalid element type \" + type);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 297,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3183,
        "startLineNumber" : 81,
        "startColumnNumber" : 4,
        "endLineNumber" : 148,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (true) {\n  if (!masterElementsStack.isEmpty() && input.getPosition() >= masterElementsStack.peek().elementEndPosition) {\n    processor.endMasterElement(masterElementsStack.pop().elementId);\n    return true;\n  }\n  if (elementState == ELEMENT_STATE_READ_ID) {\n    long result=varintReader.readUnsignedVarint(input,true,false,MAX_ID_BYTES);\n    if (result == C.RESULT_MAX_LENGTH_EXCEEDED) {\n      result=maybeResyncToNextLevel1Element(input);\n    }\n    if (result == C.RESULT_END_OF_INPUT) {\n      return false;\n    }\n    elementId=(int)result;\n    elementState=ELEMENT_STATE_READ_CONTENT_SIZE;\n  }\n  if (elementState == ELEMENT_STATE_READ_CONTENT_SIZE) {\n    elementContentSize=varintReader.readUnsignedVarint(input,false,true,MAX_LENGTH_BYTES);\n    elementState=ELEMENT_STATE_READ_CONTENT;\n  }\n  @EbmlProcessor.ElementType int type=processor.getElementType(elementId);\nswitch (type) {\ncase EbmlProcessor.ELEMENT_TYPE_MASTER:    long elementContentPosition=input.getPosition();\n  long elementEndPosition=elementContentPosition + elementContentSize;\nmasterElementsStack.push(new MasterElement(elementId,elementEndPosition));\nprocessor.startMasterElement(elementId,elementContentPosition,elementContentSize);\nelementState=ELEMENT_STATE_READ_ID;\nreturn true;\ncase EbmlProcessor.ELEMENT_TYPE_UNSIGNED_INT:if (elementContentSize > MAX_INTEGER_ELEMENT_SIZE_BYTES) {\nthrow new ParserException(\"Invalid integer size: \" + elementContentSize);\n}\nprocessor.integerElement(elementId,readInteger(input,(int)elementContentSize));\nelementState=ELEMENT_STATE_READ_ID;\nreturn true;\ncase EbmlProcessor.ELEMENT_TYPE_FLOAT:if (elementContentSize != VALID_FLOAT32_ELEMENT_SIZE_BYTES && elementContentSize != VALID_FLOAT64_ELEMENT_SIZE_BYTES) {\nthrow new ParserException(\"Invalid float size: \" + elementContentSize);\n}\nprocessor.floatElement(elementId,readFloat(input,(int)elementContentSize));\nelementState=ELEMENT_STATE_READ_ID;\nreturn true;\ncase EbmlProcessor.ELEMENT_TYPE_STRING:if (elementContentSize > Integer.MAX_VALUE) {\nthrow new ParserException(\"String element size: \" + elementContentSize);\n}\nprocessor.stringElement(elementId,readString(input,(int)elementContentSize));\nelementState=ELEMENT_STATE_READ_ID;\nreturn true;\ncase EbmlProcessor.ELEMENT_TYPE_BINARY:processor.binaryElement(elementId,(int)elementContentSize,input);\nelementState=ELEMENT_STATE_READ_ID;\nreturn true;\ncase EbmlProcessor.ELEMENT_TYPE_UNKNOWN:input.skipFully((int)elementContentSize);\nelementState=ELEMENT_STATE_READ_ID;\nbreak;\ndefault:throw new ParserException(\"Invalid element type \" + type);\n}\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 299,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3233,
        "startLineNumber" : 79,
        "startColumnNumber" : 85,
        "endLineNumber" : 149,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Assertions.checkNotNull(processor);\n  while (true) {\n    if (!masterElementsStack.isEmpty() && input.getPosition() >= masterElementsStack.peek().elementEndPosition) {\n      processor.endMasterElement(masterElementsStack.pop().elementId);\n      return true;\n    }\n    if (elementState == ELEMENT_STATE_READ_ID) {\n      long result=varintReader.readUnsignedVarint(input,true,false,MAX_ID_BYTES);\n      if (result == C.RESULT_MAX_LENGTH_EXCEEDED) {\n        result=maybeResyncToNextLevel1Element(input);\n      }\n      if (result == C.RESULT_END_OF_INPUT) {\n        return false;\n      }\n      elementId=(int)result;\n      elementState=ELEMENT_STATE_READ_CONTENT_SIZE;\n    }\n    if (elementState == ELEMENT_STATE_READ_CONTENT_SIZE) {\n      elementContentSize=varintReader.readUnsignedVarint(input,false,true,MAX_LENGTH_BYTES);\n      elementState=ELEMENT_STATE_READ_CONTENT;\n    }\n    @EbmlProcessor.ElementType int type=processor.getElementType(elementId);\nswitch (type) {\ncase EbmlProcessor.ELEMENT_TYPE_MASTER:      long elementContentPosition=input.getPosition();\n    long elementEndPosition=elementContentPosition + elementContentSize;\n  masterElementsStack.push(new MasterElement(elementId,elementEndPosition));\nprocessor.startMasterElement(elementId,elementContentPosition,elementContentSize);\nelementState=ELEMENT_STATE_READ_ID;\nreturn true;\ncase EbmlProcessor.ELEMENT_TYPE_UNSIGNED_INT:if (elementContentSize > MAX_INTEGER_ELEMENT_SIZE_BYTES) {\nthrow new ParserException(\"Invalid integer size: \" + elementContentSize);\n}\nprocessor.integerElement(elementId,readInteger(input,(int)elementContentSize));\nelementState=ELEMENT_STATE_READ_ID;\nreturn true;\ncase EbmlProcessor.ELEMENT_TYPE_FLOAT:if (elementContentSize != VALID_FLOAT32_ELEMENT_SIZE_BYTES && elementContentSize != VALID_FLOAT64_ELEMENT_SIZE_BYTES) {\nthrow new ParserException(\"Invalid float size: \" + elementContentSize);\n}\nprocessor.floatElement(elementId,readFloat(input,(int)elementContentSize));\nelementState=ELEMENT_STATE_READ_ID;\nreturn true;\ncase EbmlProcessor.ELEMENT_TYPE_STRING:if (elementContentSize > Integer.MAX_VALUE) {\nthrow new ParserException(\"String element size: \" + elementContentSize);\n}\nprocessor.stringElement(elementId,readString(input,(int)elementContentSize));\nelementState=ELEMENT_STATE_READ_ID;\nreturn true;\ncase EbmlProcessor.ELEMENT_TYPE_BINARY:processor.binaryElement(elementId,(int)elementContentSize,input);\nelementState=ELEMENT_STATE_READ_ID;\nreturn true;\ncase EbmlProcessor.ELEMENT_TYPE_UNKNOWN:input.skipFully((int)elementContentSize);\nelementState=ELEMENT_STATE_READ_ID;\nbreak;\ndefault:throw new ParserException(\"Invalid element type \" + type);\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 305,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3328,
        "startLineNumber" : 78,
        "startColumnNumber" : 2,
        "endLineNumber" : 149,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public boolean read(ExtractorInput input) throws IOException, InterruptedException {\n  Assertions.checkNotNull(processor);\n  while (true) {\n    if (!masterElementsStack.isEmpty() && input.getPosition() >= masterElementsStack.peek().elementEndPosition) {\n      processor.endMasterElement(masterElementsStack.pop().elementId);\n      return true;\n    }\n    if (elementState == ELEMENT_STATE_READ_ID) {\n      long result=varintReader.readUnsignedVarint(input,true,false,MAX_ID_BYTES);\n      if (result == C.RESULT_MAX_LENGTH_EXCEEDED) {\n        result=maybeResyncToNextLevel1Element(input);\n      }\n      if (result == C.RESULT_END_OF_INPUT) {\n        return false;\n      }\n      elementId=(int)result;\n      elementState=ELEMENT_STATE_READ_CONTENT_SIZE;\n    }\n    if (elementState == ELEMENT_STATE_READ_CONTENT_SIZE) {\n      elementContentSize=varintReader.readUnsignedVarint(input,false,true,MAX_LENGTH_BYTES);\n      elementState=ELEMENT_STATE_READ_CONTENT;\n    }\n    @EbmlProcessor.ElementType int type=processor.getElementType(elementId);\nswitch (type) {\ncase EbmlProcessor.ELEMENT_TYPE_MASTER:      long elementContentPosition=input.getPosition();\n    long elementEndPosition=elementContentPosition + elementContentSize;\n  masterElementsStack.push(new MasterElement(elementId,elementEndPosition));\nprocessor.startMasterElement(elementId,elementContentPosition,elementContentSize);\nelementState=ELEMENT_STATE_READ_ID;\nreturn true;\ncase EbmlProcessor.ELEMENT_TYPE_UNSIGNED_INT:if (elementContentSize > MAX_INTEGER_ELEMENT_SIZE_BYTES) {\nthrow new ParserException(\"Invalid integer size: \" + elementContentSize);\n}\nprocessor.integerElement(elementId,readInteger(input,(int)elementContentSize));\nelementState=ELEMENT_STATE_READ_ID;\nreturn true;\ncase EbmlProcessor.ELEMENT_TYPE_FLOAT:if (elementContentSize != VALID_FLOAT32_ELEMENT_SIZE_BYTES && elementContentSize != VALID_FLOAT64_ELEMENT_SIZE_BYTES) {\nthrow new ParserException(\"Invalid float size: \" + elementContentSize);\n}\nprocessor.floatElement(elementId,readFloat(input,(int)elementContentSize));\nelementState=ELEMENT_STATE_READ_ID;\nreturn true;\ncase EbmlProcessor.ELEMENT_TYPE_STRING:if (elementContentSize > Integer.MAX_VALUE) {\nthrow new ParserException(\"String element size: \" + elementContentSize);\n}\nprocessor.stringElement(elementId,readString(input,(int)elementContentSize));\nelementState=ELEMENT_STATE_READ_ID;\nreturn true;\ncase EbmlProcessor.ELEMENT_TYPE_BINARY:processor.binaryElement(elementId,(int)elementContentSize,input);\nelementState=ELEMENT_STATE_READ_ID;\nreturn true;\ncase EbmlProcessor.ELEMENT_TYPE_UNKNOWN:input.skipFully((int)elementContentSize);\nelementState=ELEMENT_STATE_READ_ID;\nbreak;\ndefault:throw new ParserException(\"Invalid element type \" + type);\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 319,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 103,
        "startColumnNumber" : 8,
        "endLineNumber" : 103,
        "endColumnNumber" : 50
      },
      "nodeContext" : "elementState=ELEMENT_STATE_READ_CONTENT;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 4,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 26,
    "startLineNumber" : 103,
    "startColumnNumber" : 23,
    "endLineNumber" : 103,
    "endColumnNumber" : 49
  } ],
  "layoutRelationDataList" : [ ]
}