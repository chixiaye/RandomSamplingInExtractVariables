{
  "id" : 448,
  "expression" : "i",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-main/src/main/java/com/facebook/presto/operator/scalar/MapConstructor.java",
  "occurrences" : 6,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 149,
      "startColumnNumber" : 24,
      "endLineNumber" : 149,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 149,
        "startColumnNumber" : 24,
        "endLineNumber" : 149,
        "endColumnNumber" : 55
      },
      "nodeContext" : "i < keyBlock.getPositionCount()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1001,
        "startLineNumber" : 149,
        "startColumnNumber" : 8,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < keyBlock.getPositionCount(); i++) {\n  if (keyBlock.isNull(i)) {\n    throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be null\");\n  }\n  if (keyType.getJavaType() == Block.class) {\n    Object keyObject=readNativeValue(mapType.getKeyType(),keyBlock,i);\n    try {\n      if ((boolean)keyIndeterminate.invoke(keyObject,false)) {\n        throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be indeterminate: \" + mapType.getKeyType().getObjectValue(properties,keyBlock,i));\n      }\n    }\n catch (    Throwable t) {\n      throw internalError(t);\n    }\n  }\n  keyType.appendTo(keyBlock,i,blockBuilder);\n  valueType.appendTo(valueBlock,i,blockBuilder);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 97,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1877,
        "startLineNumber" : 144,
        "startColumnNumber" : 4,
        "endLineNumber" : 181,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  checkCondition(keyBlock.getPositionCount() == valueBlock.getPositionCount(),INVALID_FUNCTION_ARGUMENT,\"Key and value arrays must be the same length\");\n  MapBlockBuilder mapBlockBuilder=(MapBlockBuilder)mapType.createBlockBuilder(null,keyBlock.getPositionCount() * 2);\n  BlockBuilder blockBuilder=mapBlockBuilder.beginBlockEntry();\n  for (int i=0; i < keyBlock.getPositionCount(); i++) {\n    if (keyBlock.isNull(i)) {\n      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be null\");\n    }\n    if (keyType.getJavaType() == Block.class) {\n      Object keyObject=readNativeValue(mapType.getKeyType(),keyBlock,i);\n      try {\n        if ((boolean)keyIndeterminate.invoke(keyObject,false)) {\n          throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be indeterminate: \" + mapType.getKeyType().getObjectValue(properties,keyBlock,i));\n        }\n      }\n catch (      Throwable t) {\n        throw internalError(t);\n      }\n    }\n    keyType.appendTo(keyBlock,i,blockBuilder);\n    valueType.appendTo(valueBlock,i,blockBuilder);\n  }\n  try {\n    mapBlockBuilder.closeEntryStrict(keyBlockEqual,keyBlockHashCode);\n  }\n catch (  DuplicateMapKeyException e) {\n    throw new PrestoException(INVALID_FUNCTION_ARGUMENT,e.getDetailedMessage(mapType.getKeyType(),properties),e);\n  }\ncatch (  NotSupportedException e) {\n    throw new PrestoException(NOT_SUPPORTED,e.getMessage(),e);\n  }\n  return mapType.getObject(mapBlockBuilder,mapBlockBuilder.getPositionCount() - 1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 187,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2250,
        "startLineNumber" : 133,
        "startColumnNumber" : 4,
        "endLineNumber" : 181,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@UsedByGeneratedCode public static Block createMap(MapType mapType,Type keyType,Type valueType,MethodHandle keyBlockEqual,MethodHandle keyBlockHashCode,MethodHandle keyIndeterminate,SqlFunctionProperties properties,Block keyBlock,Block valueBlock){\n  checkCondition(keyBlock.getPositionCount() == valueBlock.getPositionCount(),INVALID_FUNCTION_ARGUMENT,\"Key and value arrays must be the same length\");\n  MapBlockBuilder mapBlockBuilder=(MapBlockBuilder)mapType.createBlockBuilder(null,keyBlock.getPositionCount() * 2);\n  BlockBuilder blockBuilder=mapBlockBuilder.beginBlockEntry();\n  for (int i=0; i < keyBlock.getPositionCount(); i++) {\n    if (keyBlock.isNull(i)) {\n      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be null\");\n    }\n    if (keyType.getJavaType() == Block.class) {\n      Object keyObject=readNativeValue(mapType.getKeyType(),keyBlock,i);\n      try {\n        if ((boolean)keyIndeterminate.invoke(keyObject,false)) {\n          throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be indeterminate: \" + mapType.getKeyType().getObjectValue(properties,keyBlock,i));\n        }\n      }\n catch (      Throwable t) {\n        throw internalError(t);\n      }\n    }\n    keyType.appendTo(keyBlock,i,blockBuilder);\n    valueType.appendTo(valueBlock,i,blockBuilder);\n  }\n  try {\n    mapBlockBuilder.closeEntryStrict(keyBlockEqual,keyBlockHashCode);\n  }\n catch (  DuplicateMapKeyException e) {\n    throw new PrestoException(INVALID_FUNCTION_ARGUMENT,e.getDetailedMessage(mapType.getKeyType(),properties),e);\n  }\ncatch (  NotSupportedException e) {\n    throw new PrestoException(NOT_SUPPORTED,e.getMessage(),e);\n  }\n  return mapType.getObject(mapBlockBuilder,mapBlockBuilder.getPositionCount() - 1);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 231,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 149,
        "startColumnNumber" : 24,
        "endLineNumber" : 149,
        "endColumnNumber" : 55
      },
      "nodeContext" : "i < keyBlock.getPositionCount()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 150,
      "startColumnNumber" : 32,
      "endLineNumber" : 150,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 150,
        "startColumnNumber" : 16,
        "endLineNumber" : 150,
        "endColumnNumber" : 34
      },
      "nodeContext" : "keyBlock.isNull(i)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 135,
        "startLineNumber" : 150,
        "startColumnNumber" : 12,
        "endLineNumber" : 152,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (keyBlock.isNull(i)) {\n  throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be null\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 947,
        "startLineNumber" : 149,
        "startColumnNumber" : 62,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (keyBlock.isNull(i)) {\n    throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be null\");\n  }\n  if (keyType.getJavaType() == Block.class) {\n    Object keyObject=readNativeValue(mapType.getKeyType(),keyBlock,i);\n    try {\n      if ((boolean)keyIndeterminate.invoke(keyObject,false)) {\n        throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be indeterminate: \" + mapType.getKeyType().getObjectValue(properties,keyBlock,i));\n      }\n    }\n catch (    Throwable t) {\n      throw internalError(t);\n    }\n  }\n  keyType.appendTo(keyBlock,i,blockBuilder);\n  valueType.appendTo(valueBlock,i,blockBuilder);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 84,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1001,
        "startLineNumber" : 149,
        "startColumnNumber" : 8,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < keyBlock.getPositionCount(); i++) {\n  if (keyBlock.isNull(i)) {\n    throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be null\");\n  }\n  if (keyType.getJavaType() == Block.class) {\n    Object keyObject=readNativeValue(mapType.getKeyType(),keyBlock,i);\n    try {\n      if ((boolean)keyIndeterminate.invoke(keyObject,false)) {\n        throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be indeterminate: \" + mapType.getKeyType().getObjectValue(properties,keyBlock,i));\n      }\n    }\n catch (    Throwable t) {\n      throw internalError(t);\n    }\n  }\n  keyType.appendTo(keyBlock,i,blockBuilder);\n  valueType.appendTo(valueBlock,i,blockBuilder);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 97,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1877,
        "startLineNumber" : 144,
        "startColumnNumber" : 4,
        "endLineNumber" : 181,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  checkCondition(keyBlock.getPositionCount() == valueBlock.getPositionCount(),INVALID_FUNCTION_ARGUMENT,\"Key and value arrays must be the same length\");\n  MapBlockBuilder mapBlockBuilder=(MapBlockBuilder)mapType.createBlockBuilder(null,keyBlock.getPositionCount() * 2);\n  BlockBuilder blockBuilder=mapBlockBuilder.beginBlockEntry();\n  for (int i=0; i < keyBlock.getPositionCount(); i++) {\n    if (keyBlock.isNull(i)) {\n      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be null\");\n    }\n    if (keyType.getJavaType() == Block.class) {\n      Object keyObject=readNativeValue(mapType.getKeyType(),keyBlock,i);\n      try {\n        if ((boolean)keyIndeterminate.invoke(keyObject,false)) {\n          throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be indeterminate: \" + mapType.getKeyType().getObjectValue(properties,keyBlock,i));\n        }\n      }\n catch (      Throwable t) {\n        throw internalError(t);\n      }\n    }\n    keyType.appendTo(keyBlock,i,blockBuilder);\n    valueType.appendTo(valueBlock,i,blockBuilder);\n  }\n  try {\n    mapBlockBuilder.closeEntryStrict(keyBlockEqual,keyBlockHashCode);\n  }\n catch (  DuplicateMapKeyException e) {\n    throw new PrestoException(INVALID_FUNCTION_ARGUMENT,e.getDetailedMessage(mapType.getKeyType(),properties),e);\n  }\ncatch (  NotSupportedException e) {\n    throw new PrestoException(NOT_SUPPORTED,e.getMessage(),e);\n  }\n  return mapType.getObject(mapBlockBuilder,mapBlockBuilder.getPositionCount() - 1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 187,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2250,
        "startLineNumber" : 133,
        "startColumnNumber" : 4,
        "endLineNumber" : 181,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@UsedByGeneratedCode public static Block createMap(MapType mapType,Type keyType,Type valueType,MethodHandle keyBlockEqual,MethodHandle keyBlockHashCode,MethodHandle keyIndeterminate,SqlFunctionProperties properties,Block keyBlock,Block valueBlock){\n  checkCondition(keyBlock.getPositionCount() == valueBlock.getPositionCount(),INVALID_FUNCTION_ARGUMENT,\"Key and value arrays must be the same length\");\n  MapBlockBuilder mapBlockBuilder=(MapBlockBuilder)mapType.createBlockBuilder(null,keyBlock.getPositionCount() * 2);\n  BlockBuilder blockBuilder=mapBlockBuilder.beginBlockEntry();\n  for (int i=0; i < keyBlock.getPositionCount(); i++) {\n    if (keyBlock.isNull(i)) {\n      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be null\");\n    }\n    if (keyType.getJavaType() == Block.class) {\n      Object keyObject=readNativeValue(mapType.getKeyType(),keyBlock,i);\n      try {\n        if ((boolean)keyIndeterminate.invoke(keyObject,false)) {\n          throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be indeterminate: \" + mapType.getKeyType().getObjectValue(properties,keyBlock,i));\n        }\n      }\n catch (      Throwable t) {\n        throw internalError(t);\n      }\n    }\n    keyType.appendTo(keyBlock,i,blockBuilder);\n    valueType.appendTo(valueBlock,i,blockBuilder);\n  }\n  try {\n    mapBlockBuilder.closeEntryStrict(keyBlockEqual,keyBlockHashCode);\n  }\n catch (  DuplicateMapKeyException e) {\n    throw new PrestoException(INVALID_FUNCTION_ARGUMENT,e.getDetailedMessage(mapType.getKeyType(),properties),e);\n  }\ncatch (  NotSupportedException e) {\n    throw new PrestoException(NOT_SUPPORTED,e.getMessage(),e);\n  }\n  return mapType.getObject(mapBlockBuilder,mapBlockBuilder.getPositionCount() - 1);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 231,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 150,
        "startColumnNumber" : 16,
        "endLineNumber" : 150,
        "endColumnNumber" : 34
      },
      "nodeContext" : "keyBlock.isNull(i)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 156,
      "startColumnNumber" : 83,
      "endLineNumber" : 156,
      "endColumnNumber" : 84
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 156,
        "startColumnNumber" : 35,
        "endLineNumber" : 156,
        "endColumnNumber" : 85
      },
      "nodeContext" : "readNativeValue(mapType.getKeyType(),keyBlock,i)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 156,
        "startColumnNumber" : 23,
        "endLineNumber" : 156,
        "endColumnNumber" : 85
      },
      "nodeContext" : "keyObject=readNativeValue(mapType.getKeyType(),keyBlock,i)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 156,
        "startColumnNumber" : 16,
        "endLineNumber" : 156,
        "endColumnNumber" : 86
      },
      "nodeContext" : "Object keyObject=readNativeValue(mapType.getKeyType(),keyBlock,i);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 613,
        "startLineNumber" : 154,
        "startColumnNumber" : 54,
        "endLineNumber" : 165,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Object keyObject=readNativeValue(mapType.getKeyType(),keyBlock,i);\n  try {\n    if ((boolean)keyIndeterminate.invoke(keyObject,false)) {\n      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be indeterminate: \" + mapType.getKeyType().getObjectValue(properties,keyBlock,i));\n    }\n  }\n catch (  Throwable t) {\n    throw internalError(t);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 49,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 655,
        "startLineNumber" : 154,
        "startColumnNumber" : 12,
        "endLineNumber" : 165,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (keyType.getJavaType() == Block.class) {\n  Object keyObject=readNativeValue(mapType.getKeyType(),keyBlock,i);\n  try {\n    if ((boolean)keyIndeterminate.invoke(keyObject,false)) {\n      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be indeterminate: \" + mapType.getKeyType().getObjectValue(properties,keyBlock,i));\n    }\n  }\n catch (  Throwable t) {\n    throw internalError(t);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 57,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 947,
        "startLineNumber" : 149,
        "startColumnNumber" : 62,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (keyBlock.isNull(i)) {\n    throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be null\");\n  }\n  if (keyType.getJavaType() == Block.class) {\n    Object keyObject=readNativeValue(mapType.getKeyType(),keyBlock,i);\n    try {\n      if ((boolean)keyIndeterminate.invoke(keyObject,false)) {\n        throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be indeterminate: \" + mapType.getKeyType().getObjectValue(properties,keyBlock,i));\n      }\n    }\n catch (    Throwable t) {\n      throw internalError(t);\n    }\n  }\n  keyType.appendTo(keyBlock,i,blockBuilder);\n  valueType.appendTo(valueBlock,i,blockBuilder);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 84,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1001,
        "startLineNumber" : 149,
        "startColumnNumber" : 8,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < keyBlock.getPositionCount(); i++) {\n  if (keyBlock.isNull(i)) {\n    throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be null\");\n  }\n  if (keyType.getJavaType() == Block.class) {\n    Object keyObject=readNativeValue(mapType.getKeyType(),keyBlock,i);\n    try {\n      if ((boolean)keyIndeterminate.invoke(keyObject,false)) {\n        throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be indeterminate: \" + mapType.getKeyType().getObjectValue(properties,keyBlock,i));\n      }\n    }\n catch (    Throwable t) {\n      throw internalError(t);\n    }\n  }\n  keyType.appendTo(keyBlock,i,blockBuilder);\n  valueType.appendTo(valueBlock,i,blockBuilder);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 97,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1877,
        "startLineNumber" : 144,
        "startColumnNumber" : 4,
        "endLineNumber" : 181,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  checkCondition(keyBlock.getPositionCount() == valueBlock.getPositionCount(),INVALID_FUNCTION_ARGUMENT,\"Key and value arrays must be the same length\");\n  MapBlockBuilder mapBlockBuilder=(MapBlockBuilder)mapType.createBlockBuilder(null,keyBlock.getPositionCount() * 2);\n  BlockBuilder blockBuilder=mapBlockBuilder.beginBlockEntry();\n  for (int i=0; i < keyBlock.getPositionCount(); i++) {\n    if (keyBlock.isNull(i)) {\n      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be null\");\n    }\n    if (keyType.getJavaType() == Block.class) {\n      Object keyObject=readNativeValue(mapType.getKeyType(),keyBlock,i);\n      try {\n        if ((boolean)keyIndeterminate.invoke(keyObject,false)) {\n          throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be indeterminate: \" + mapType.getKeyType().getObjectValue(properties,keyBlock,i));\n        }\n      }\n catch (      Throwable t) {\n        throw internalError(t);\n      }\n    }\n    keyType.appendTo(keyBlock,i,blockBuilder);\n    valueType.appendTo(valueBlock,i,blockBuilder);\n  }\n  try {\n    mapBlockBuilder.closeEntryStrict(keyBlockEqual,keyBlockHashCode);\n  }\n catch (  DuplicateMapKeyException e) {\n    throw new PrestoException(INVALID_FUNCTION_ARGUMENT,e.getDetailedMessage(mapType.getKeyType(),properties),e);\n  }\ncatch (  NotSupportedException e) {\n    throw new PrestoException(NOT_SUPPORTED,e.getMessage(),e);\n  }\n  return mapType.getObject(mapBlockBuilder,mapBlockBuilder.getPositionCount() - 1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 187,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2250,
        "startLineNumber" : 133,
        "startColumnNumber" : 4,
        "endLineNumber" : 181,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@UsedByGeneratedCode public static Block createMap(MapType mapType,Type keyType,Type valueType,MethodHandle keyBlockEqual,MethodHandle keyBlockHashCode,MethodHandle keyIndeterminate,SqlFunctionProperties properties,Block keyBlock,Block valueBlock){\n  checkCondition(keyBlock.getPositionCount() == valueBlock.getPositionCount(),INVALID_FUNCTION_ARGUMENT,\"Key and value arrays must be the same length\");\n  MapBlockBuilder mapBlockBuilder=(MapBlockBuilder)mapType.createBlockBuilder(null,keyBlock.getPositionCount() * 2);\n  BlockBuilder blockBuilder=mapBlockBuilder.beginBlockEntry();\n  for (int i=0; i < keyBlock.getPositionCount(); i++) {\n    if (keyBlock.isNull(i)) {\n      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be null\");\n    }\n    if (keyType.getJavaType() == Block.class) {\n      Object keyObject=readNativeValue(mapType.getKeyType(),keyBlock,i);\n      try {\n        if ((boolean)keyIndeterminate.invoke(keyObject,false)) {\n          throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be indeterminate: \" + mapType.getKeyType().getObjectValue(properties,keyBlock,i));\n        }\n      }\n catch (      Throwable t) {\n        throw internalError(t);\n      }\n    }\n    keyType.appendTo(keyBlock,i,blockBuilder);\n    valueType.appendTo(valueBlock,i,blockBuilder);\n  }\n  try {\n    mapBlockBuilder.closeEntryStrict(keyBlockEqual,keyBlockHashCode);\n  }\n catch (  DuplicateMapKeyException e) {\n    throw new PrestoException(INVALID_FUNCTION_ARGUMENT,e.getDetailedMessage(mapType.getKeyType(),properties),e);\n  }\ncatch (  NotSupportedException e) {\n    throw new PrestoException(NOT_SUPPORTED,e.getMessage(),e);\n  }\n  return mapType.getObject(mapBlockBuilder,mapBlockBuilder.getPositionCount() - 1);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 231,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 156,
        "startColumnNumber" : 16,
        "endLineNumber" : 156,
        "endColumnNumber" : 86
      },
      "nodeContext" : "Object keyObject=readNativeValue(mapType.getKeyType(),keyBlock,i);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 159,
      "startColumnNumber" : 173,
      "endLineNumber" : 159,
      "endColumnNumber" : 174
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 159,
        "startColumnNumber" : 115,
        "endLineNumber" : 159,
        "endColumnNumber" : 175
      },
      "nodeContext" : "mapType.getKeyType().getObjectValue(properties,keyBlock,i)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 159,
        "startColumnNumber" : 77,
        "endLineNumber" : 159,
        "endColumnNumber" : 175
      },
      "nodeContext" : "\"map key cannot be indeterminate: \" + mapType.getKeyType().getObjectValue(properties,keyBlock,i)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 146,
        "startLineNumber" : 159,
        "startColumnNumber" : 30,
        "endLineNumber" : 159,
        "endColumnNumber" : 176
      },
      "nodeContext" : "new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be indeterminate: \" + mapType.getKeyType().getObjectValue(properties,keyBlock,i))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 153,
        "startLineNumber" : 159,
        "startColumnNumber" : 24,
        "endLineNumber" : 159,
        "endColumnNumber" : 177
      },
      "nodeContext" : "throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be indeterminate: \" + mapType.getKeyType().getObjectValue(properties,keyBlock,i));\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 201,
        "startLineNumber" : 158,
        "startColumnNumber" : 77,
        "endLineNumber" : 160,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be indeterminate: \" + mapType.getKeyType().getObjectValue(properties,keyBlock,i));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 258,
        "startLineNumber" : 158,
        "startColumnNumber" : 20,
        "endLineNumber" : 160,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if ((boolean)keyIndeterminate.invoke(keyObject,false)) {\n  throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be indeterminate: \" + mapType.getKeyType().getObjectValue(properties,keyBlock,i));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 24,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 298,
        "startLineNumber" : 157,
        "startColumnNumber" : 20,
        "endLineNumber" : 161,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if ((boolean)keyIndeterminate.invoke(keyObject,false)) {\n    throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be indeterminate: \" + mapType.getKeyType().getObjectValue(properties,keyBlock,i));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 25,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 402,
        "startLineNumber" : 157,
        "startColumnNumber" : 16,
        "endLineNumber" : 164,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\n  if ((boolean)keyIndeterminate.invoke(keyObject,false)) {\n    throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be indeterminate: \" + mapType.getKeyType().getObjectValue(properties,keyBlock,i));\n  }\n}\n catch (Throwable t) {\n  throw internalError(t);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 36,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 613,
        "startLineNumber" : 154,
        "startColumnNumber" : 54,
        "endLineNumber" : 165,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Object keyObject=readNativeValue(mapType.getKeyType(),keyBlock,i);\n  try {\n    if ((boolean)keyIndeterminate.invoke(keyObject,false)) {\n      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be indeterminate: \" + mapType.getKeyType().getObjectValue(properties,keyBlock,i));\n    }\n  }\n catch (  Throwable t) {\n    throw internalError(t);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 49,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 655,
        "startLineNumber" : 154,
        "startColumnNumber" : 12,
        "endLineNumber" : 165,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (keyType.getJavaType() == Block.class) {\n  Object keyObject=readNativeValue(mapType.getKeyType(),keyBlock,i);\n  try {\n    if ((boolean)keyIndeterminate.invoke(keyObject,false)) {\n      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be indeterminate: \" + mapType.getKeyType().getObjectValue(properties,keyBlock,i));\n    }\n  }\n catch (  Throwable t) {\n    throw internalError(t);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 57,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 947,
        "startLineNumber" : 149,
        "startColumnNumber" : 62,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (keyBlock.isNull(i)) {\n    throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be null\");\n  }\n  if (keyType.getJavaType() == Block.class) {\n    Object keyObject=readNativeValue(mapType.getKeyType(),keyBlock,i);\n    try {\n      if ((boolean)keyIndeterminate.invoke(keyObject,false)) {\n        throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be indeterminate: \" + mapType.getKeyType().getObjectValue(properties,keyBlock,i));\n      }\n    }\n catch (    Throwable t) {\n      throw internalError(t);\n    }\n  }\n  keyType.appendTo(keyBlock,i,blockBuilder);\n  valueType.appendTo(valueBlock,i,blockBuilder);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 84,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1001,
        "startLineNumber" : 149,
        "startColumnNumber" : 8,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < keyBlock.getPositionCount(); i++) {\n  if (keyBlock.isNull(i)) {\n    throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be null\");\n  }\n  if (keyType.getJavaType() == Block.class) {\n    Object keyObject=readNativeValue(mapType.getKeyType(),keyBlock,i);\n    try {\n      if ((boolean)keyIndeterminate.invoke(keyObject,false)) {\n        throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be indeterminate: \" + mapType.getKeyType().getObjectValue(properties,keyBlock,i));\n      }\n    }\n catch (    Throwable t) {\n      throw internalError(t);\n    }\n  }\n  keyType.appendTo(keyBlock,i,blockBuilder);\n  valueType.appendTo(valueBlock,i,blockBuilder);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 97,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1877,
        "startLineNumber" : 144,
        "startColumnNumber" : 4,
        "endLineNumber" : 181,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  checkCondition(keyBlock.getPositionCount() == valueBlock.getPositionCount(),INVALID_FUNCTION_ARGUMENT,\"Key and value arrays must be the same length\");\n  MapBlockBuilder mapBlockBuilder=(MapBlockBuilder)mapType.createBlockBuilder(null,keyBlock.getPositionCount() * 2);\n  BlockBuilder blockBuilder=mapBlockBuilder.beginBlockEntry();\n  for (int i=0; i < keyBlock.getPositionCount(); i++) {\n    if (keyBlock.isNull(i)) {\n      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be null\");\n    }\n    if (keyType.getJavaType() == Block.class) {\n      Object keyObject=readNativeValue(mapType.getKeyType(),keyBlock,i);\n      try {\n        if ((boolean)keyIndeterminate.invoke(keyObject,false)) {\n          throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be indeterminate: \" + mapType.getKeyType().getObjectValue(properties,keyBlock,i));\n        }\n      }\n catch (      Throwable t) {\n        throw internalError(t);\n      }\n    }\n    keyType.appendTo(keyBlock,i,blockBuilder);\n    valueType.appendTo(valueBlock,i,blockBuilder);\n  }\n  try {\n    mapBlockBuilder.closeEntryStrict(keyBlockEqual,keyBlockHashCode);\n  }\n catch (  DuplicateMapKeyException e) {\n    throw new PrestoException(INVALID_FUNCTION_ARGUMENT,e.getDetailedMessage(mapType.getKeyType(),properties),e);\n  }\ncatch (  NotSupportedException e) {\n    throw new PrestoException(NOT_SUPPORTED,e.getMessage(),e);\n  }\n  return mapType.getObject(mapBlockBuilder,mapBlockBuilder.getPositionCount() - 1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 187,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2250,
        "startLineNumber" : 133,
        "startColumnNumber" : 4,
        "endLineNumber" : 181,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@UsedByGeneratedCode public static Block createMap(MapType mapType,Type keyType,Type valueType,MethodHandle keyBlockEqual,MethodHandle keyBlockHashCode,MethodHandle keyIndeterminate,SqlFunctionProperties properties,Block keyBlock,Block valueBlock){\n  checkCondition(keyBlock.getPositionCount() == valueBlock.getPositionCount(),INVALID_FUNCTION_ARGUMENT,\"Key and value arrays must be the same length\");\n  MapBlockBuilder mapBlockBuilder=(MapBlockBuilder)mapType.createBlockBuilder(null,keyBlock.getPositionCount() * 2);\n  BlockBuilder blockBuilder=mapBlockBuilder.beginBlockEntry();\n  for (int i=0; i < keyBlock.getPositionCount(); i++) {\n    if (keyBlock.isNull(i)) {\n      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be null\");\n    }\n    if (keyType.getJavaType() == Block.class) {\n      Object keyObject=readNativeValue(mapType.getKeyType(),keyBlock,i);\n      try {\n        if ((boolean)keyIndeterminate.invoke(keyObject,false)) {\n          throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be indeterminate: \" + mapType.getKeyType().getObjectValue(properties,keyBlock,i));\n        }\n      }\n catch (      Throwable t) {\n        throw internalError(t);\n      }\n    }\n    keyType.appendTo(keyBlock,i,blockBuilder);\n    valueType.appendTo(valueBlock,i,blockBuilder);\n  }\n  try {\n    mapBlockBuilder.closeEntryStrict(keyBlockEqual,keyBlockHashCode);\n  }\n catch (  DuplicateMapKeyException e) {\n    throw new PrestoException(INVALID_FUNCTION_ARGUMENT,e.getDetailedMessage(mapType.getKeyType(),properties),e);\n  }\ncatch (  NotSupportedException e) {\n    throw new PrestoException(NOT_SUPPORTED,e.getMessage(),e);\n  }\n  return mapType.getObject(mapBlockBuilder,mapBlockBuilder.getPositionCount() - 1);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 231,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 153,
        "startLineNumber" : 159,
        "startColumnNumber" : 24,
        "endLineNumber" : 159,
        "endColumnNumber" : 177
      },
      "nodeContext" : "throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be indeterminate: \" + mapType.getKeyType().getObjectValue(properties,keyBlock,i));\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 167,
      "startColumnNumber" : 39,
      "endLineNumber" : 167,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 167,
        "startColumnNumber" : 12,
        "endLineNumber" : 167,
        "endColumnNumber" : 55
      },
      "nodeContext" : "keyType.appendTo(keyBlock,i,blockBuilder)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 167,
        "startColumnNumber" : 12,
        "endLineNumber" : 167,
        "endColumnNumber" : 56
      },
      "nodeContext" : "keyType.appendTo(keyBlock,i,blockBuilder);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 947,
        "startLineNumber" : 149,
        "startColumnNumber" : 62,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (keyBlock.isNull(i)) {\n    throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be null\");\n  }\n  if (keyType.getJavaType() == Block.class) {\n    Object keyObject=readNativeValue(mapType.getKeyType(),keyBlock,i);\n    try {\n      if ((boolean)keyIndeterminate.invoke(keyObject,false)) {\n        throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be indeterminate: \" + mapType.getKeyType().getObjectValue(properties,keyBlock,i));\n      }\n    }\n catch (    Throwable t) {\n      throw internalError(t);\n    }\n  }\n  keyType.appendTo(keyBlock,i,blockBuilder);\n  valueType.appendTo(valueBlock,i,blockBuilder);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 84,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1001,
        "startLineNumber" : 149,
        "startColumnNumber" : 8,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < keyBlock.getPositionCount(); i++) {\n  if (keyBlock.isNull(i)) {\n    throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be null\");\n  }\n  if (keyType.getJavaType() == Block.class) {\n    Object keyObject=readNativeValue(mapType.getKeyType(),keyBlock,i);\n    try {\n      if ((boolean)keyIndeterminate.invoke(keyObject,false)) {\n        throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be indeterminate: \" + mapType.getKeyType().getObjectValue(properties,keyBlock,i));\n      }\n    }\n catch (    Throwable t) {\n      throw internalError(t);\n    }\n  }\n  keyType.appendTo(keyBlock,i,blockBuilder);\n  valueType.appendTo(valueBlock,i,blockBuilder);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 97,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1877,
        "startLineNumber" : 144,
        "startColumnNumber" : 4,
        "endLineNumber" : 181,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  checkCondition(keyBlock.getPositionCount() == valueBlock.getPositionCount(),INVALID_FUNCTION_ARGUMENT,\"Key and value arrays must be the same length\");\n  MapBlockBuilder mapBlockBuilder=(MapBlockBuilder)mapType.createBlockBuilder(null,keyBlock.getPositionCount() * 2);\n  BlockBuilder blockBuilder=mapBlockBuilder.beginBlockEntry();\n  for (int i=0; i < keyBlock.getPositionCount(); i++) {\n    if (keyBlock.isNull(i)) {\n      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be null\");\n    }\n    if (keyType.getJavaType() == Block.class) {\n      Object keyObject=readNativeValue(mapType.getKeyType(),keyBlock,i);\n      try {\n        if ((boolean)keyIndeterminate.invoke(keyObject,false)) {\n          throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be indeterminate: \" + mapType.getKeyType().getObjectValue(properties,keyBlock,i));\n        }\n      }\n catch (      Throwable t) {\n        throw internalError(t);\n      }\n    }\n    keyType.appendTo(keyBlock,i,blockBuilder);\n    valueType.appendTo(valueBlock,i,blockBuilder);\n  }\n  try {\n    mapBlockBuilder.closeEntryStrict(keyBlockEqual,keyBlockHashCode);\n  }\n catch (  DuplicateMapKeyException e) {\n    throw new PrestoException(INVALID_FUNCTION_ARGUMENT,e.getDetailedMessage(mapType.getKeyType(),properties),e);\n  }\ncatch (  NotSupportedException e) {\n    throw new PrestoException(NOT_SUPPORTED,e.getMessage(),e);\n  }\n  return mapType.getObject(mapBlockBuilder,mapBlockBuilder.getPositionCount() - 1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 187,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2250,
        "startLineNumber" : 133,
        "startColumnNumber" : 4,
        "endLineNumber" : 181,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@UsedByGeneratedCode public static Block createMap(MapType mapType,Type keyType,Type valueType,MethodHandle keyBlockEqual,MethodHandle keyBlockHashCode,MethodHandle keyIndeterminate,SqlFunctionProperties properties,Block keyBlock,Block valueBlock){\n  checkCondition(keyBlock.getPositionCount() == valueBlock.getPositionCount(),INVALID_FUNCTION_ARGUMENT,\"Key and value arrays must be the same length\");\n  MapBlockBuilder mapBlockBuilder=(MapBlockBuilder)mapType.createBlockBuilder(null,keyBlock.getPositionCount() * 2);\n  BlockBuilder blockBuilder=mapBlockBuilder.beginBlockEntry();\n  for (int i=0; i < keyBlock.getPositionCount(); i++) {\n    if (keyBlock.isNull(i)) {\n      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be null\");\n    }\n    if (keyType.getJavaType() == Block.class) {\n      Object keyObject=readNativeValue(mapType.getKeyType(),keyBlock,i);\n      try {\n        if ((boolean)keyIndeterminate.invoke(keyObject,false)) {\n          throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be indeterminate: \" + mapType.getKeyType().getObjectValue(properties,keyBlock,i));\n        }\n      }\n catch (      Throwable t) {\n        throw internalError(t);\n      }\n    }\n    keyType.appendTo(keyBlock,i,blockBuilder);\n    valueType.appendTo(valueBlock,i,blockBuilder);\n  }\n  try {\n    mapBlockBuilder.closeEntryStrict(keyBlockEqual,keyBlockHashCode);\n  }\n catch (  DuplicateMapKeyException e) {\n    throw new PrestoException(INVALID_FUNCTION_ARGUMENT,e.getDetailedMessage(mapType.getKeyType(),properties),e);\n  }\ncatch (  NotSupportedException e) {\n    throw new PrestoException(NOT_SUPPORTED,e.getMessage(),e);\n  }\n  return mapType.getObject(mapBlockBuilder,mapBlockBuilder.getPositionCount() - 1);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 231,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 167,
        "startColumnNumber" : 12,
        "endLineNumber" : 167,
        "endColumnNumber" : 56
      },
      "nodeContext" : "keyType.appendTo(keyBlock,i,blockBuilder);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 168,
      "startColumnNumber" : 43,
      "endLineNumber" : 168,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 168,
        "startColumnNumber" : 12,
        "endLineNumber" : 168,
        "endColumnNumber" : 59
      },
      "nodeContext" : "valueType.appendTo(valueBlock,i,blockBuilder)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 168,
        "startColumnNumber" : 12,
        "endLineNumber" : 168,
        "endColumnNumber" : 60
      },
      "nodeContext" : "valueType.appendTo(valueBlock,i,blockBuilder);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 947,
        "startLineNumber" : 149,
        "startColumnNumber" : 62,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (keyBlock.isNull(i)) {\n    throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be null\");\n  }\n  if (keyType.getJavaType() == Block.class) {\n    Object keyObject=readNativeValue(mapType.getKeyType(),keyBlock,i);\n    try {\n      if ((boolean)keyIndeterminate.invoke(keyObject,false)) {\n        throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be indeterminate: \" + mapType.getKeyType().getObjectValue(properties,keyBlock,i));\n      }\n    }\n catch (    Throwable t) {\n      throw internalError(t);\n    }\n  }\n  keyType.appendTo(keyBlock,i,blockBuilder);\n  valueType.appendTo(valueBlock,i,blockBuilder);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 84,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1001,
        "startLineNumber" : 149,
        "startColumnNumber" : 8,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < keyBlock.getPositionCount(); i++) {\n  if (keyBlock.isNull(i)) {\n    throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be null\");\n  }\n  if (keyType.getJavaType() == Block.class) {\n    Object keyObject=readNativeValue(mapType.getKeyType(),keyBlock,i);\n    try {\n      if ((boolean)keyIndeterminate.invoke(keyObject,false)) {\n        throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be indeterminate: \" + mapType.getKeyType().getObjectValue(properties,keyBlock,i));\n      }\n    }\n catch (    Throwable t) {\n      throw internalError(t);\n    }\n  }\n  keyType.appendTo(keyBlock,i,blockBuilder);\n  valueType.appendTo(valueBlock,i,blockBuilder);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 97,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1877,
        "startLineNumber" : 144,
        "startColumnNumber" : 4,
        "endLineNumber" : 181,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  checkCondition(keyBlock.getPositionCount() == valueBlock.getPositionCount(),INVALID_FUNCTION_ARGUMENT,\"Key and value arrays must be the same length\");\n  MapBlockBuilder mapBlockBuilder=(MapBlockBuilder)mapType.createBlockBuilder(null,keyBlock.getPositionCount() * 2);\n  BlockBuilder blockBuilder=mapBlockBuilder.beginBlockEntry();\n  for (int i=0; i < keyBlock.getPositionCount(); i++) {\n    if (keyBlock.isNull(i)) {\n      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be null\");\n    }\n    if (keyType.getJavaType() == Block.class) {\n      Object keyObject=readNativeValue(mapType.getKeyType(),keyBlock,i);\n      try {\n        if ((boolean)keyIndeterminate.invoke(keyObject,false)) {\n          throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be indeterminate: \" + mapType.getKeyType().getObjectValue(properties,keyBlock,i));\n        }\n      }\n catch (      Throwable t) {\n        throw internalError(t);\n      }\n    }\n    keyType.appendTo(keyBlock,i,blockBuilder);\n    valueType.appendTo(valueBlock,i,blockBuilder);\n  }\n  try {\n    mapBlockBuilder.closeEntryStrict(keyBlockEqual,keyBlockHashCode);\n  }\n catch (  DuplicateMapKeyException e) {\n    throw new PrestoException(INVALID_FUNCTION_ARGUMENT,e.getDetailedMessage(mapType.getKeyType(),properties),e);\n  }\ncatch (  NotSupportedException e) {\n    throw new PrestoException(NOT_SUPPORTED,e.getMessage(),e);\n  }\n  return mapType.getObject(mapBlockBuilder,mapBlockBuilder.getPositionCount() - 1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 187,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2250,
        "startLineNumber" : 133,
        "startColumnNumber" : 4,
        "endLineNumber" : 181,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@UsedByGeneratedCode public static Block createMap(MapType mapType,Type keyType,Type valueType,MethodHandle keyBlockEqual,MethodHandle keyBlockHashCode,MethodHandle keyIndeterminate,SqlFunctionProperties properties,Block keyBlock,Block valueBlock){\n  checkCondition(keyBlock.getPositionCount() == valueBlock.getPositionCount(),INVALID_FUNCTION_ARGUMENT,\"Key and value arrays must be the same length\");\n  MapBlockBuilder mapBlockBuilder=(MapBlockBuilder)mapType.createBlockBuilder(null,keyBlock.getPositionCount() * 2);\n  BlockBuilder blockBuilder=mapBlockBuilder.beginBlockEntry();\n  for (int i=0; i < keyBlock.getPositionCount(); i++) {\n    if (keyBlock.isNull(i)) {\n      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be null\");\n    }\n    if (keyType.getJavaType() == Block.class) {\n      Object keyObject=readNativeValue(mapType.getKeyType(),keyBlock,i);\n      try {\n        if ((boolean)keyIndeterminate.invoke(keyObject,false)) {\n          throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"map key cannot be indeterminate: \" + mapType.getKeyType().getObjectValue(properties,keyBlock,i));\n        }\n      }\n catch (      Throwable t) {\n        throw internalError(t);\n      }\n    }\n    keyType.appendTo(keyBlock,i,blockBuilder);\n    valueType.appendTo(valueBlock,i,blockBuilder);\n  }\n  try {\n    mapBlockBuilder.closeEntryStrict(keyBlockEqual,keyBlockHashCode);\n  }\n catch (  DuplicateMapKeyException e) {\n    throw new PrestoException(INVALID_FUNCTION_ARGUMENT,e.getDetailedMessage(mapType.getKeyType(),properties),e);\n  }\ncatch (  NotSupportedException e) {\n    throw new PrestoException(NOT_SUPPORTED,e.getMessage(),e);\n  }\n  return mapType.getObject(mapBlockBuilder,mapBlockBuilder.getPositionCount() - 1);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 231,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 168,
        "startColumnNumber" : 12,
        "endLineNumber" : 168,
        "endColumnNumber" : 60
      },
      "nodeContext" : "valueType.appendTo(valueBlock,i,blockBuilder);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 149,
    "startColumnNumber" : 24,
    "endLineNumber" : 149,
    "endColumnNumber" : 25
  }, {
    "charLength" : 1,
    "startLineNumber" : 150,
    "startColumnNumber" : 32,
    "endLineNumber" : 150,
    "endColumnNumber" : 33
  }, {
    "charLength" : 1,
    "startLineNumber" : 156,
    "startColumnNumber" : 83,
    "endLineNumber" : 156,
    "endColumnNumber" : 84
  }, {
    "charLength" : 1,
    "startLineNumber" : 159,
    "startColumnNumber" : 173,
    "endLineNumber" : 159,
    "endColumnNumber" : 174
  }, {
    "charLength" : 1,
    "startLineNumber" : 167,
    "startColumnNumber" : 39,
    "endLineNumber" : 167,
    "endColumnNumber" : 40
  }, {
    "charLength" : 1,
    "startLineNumber" : 168,
    "startColumnNumber" : 43,
    "endLineNumber" : 168,
    "endColumnNumber" : 44
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 11
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 10
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 10
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 2
  } ]
}