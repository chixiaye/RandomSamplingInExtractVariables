{
  "id" : 396,
  "expression" : "calc2",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-table/flink-table-runtime/src/test/java/org/apache/flink/table/runtime/operators/multipleinput/TableOperatorWrapperGeneratorTest.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "calc2",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 354,
      "startColumnNumber" : 8,
      "endLineNumber" : 354,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 354,
        "startColumnNumber" : 8,
        "endLineNumber" : 354,
        "endColumnNumber" : 90
      },
      "nodeContext" : "calc2.declareManagedMemoryUseCaseAtOperatorScope(ManagedMemoryUseCase.OPERATOR,1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 354,
        "startColumnNumber" : 8,
        "endLineNumber" : 354,
        "endColumnNumber" : 91
      },
      "nodeContext" : "calc2.declareManagedMemoryUseCaseAtOperatorScope(ManagedMemoryUseCase.OPERATOR,1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3599,
        "startLineNumber" : 335,
        "startColumnNumber" : 44,
        "endLineNumber" : 401,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();\n  Transformation<RowData> source1=createSource(env,\"source1\");\n  Transformation<RowData> source2=createSource(env,\"source2\");\n  Transformation<RowData> source3=createSource(env,\"source3\");\n  OneInputTransformation<RowData,RowData> calc1=createOneInputTransform(source1,\"calc1\",InternalTypeInfo.of(RowType.of(DataTypes.STRING().getLogicalType())));\n  calc1.declareManagedMemoryUseCaseAtOperatorScope(ManagedMemoryUseCase.OPERATOR,1);\n  calc1.setParallelism(100);\n  OneInputTransformation<RowData,RowData> calc2=createOneInputTransform(source2,\"calc2\",InternalTypeInfo.of(RowType.of(DataTypes.STRING().getLogicalType())));\n  calc2.declareManagedMemoryUseCaseAtOperatorScope(ManagedMemoryUseCase.OPERATOR,1);\n  calc2.setParallelism(50);\n  UnionTransformation<RowData> union=createUnionInputTransform(\"union1\",calc1,calc2);\n  TwoInputTransformation<RowData,RowData,RowData> join=createTwoInputTransform(union,source3,\"join1\",InternalTypeInfo.of(RowType.of(DataTypes.STRING().getLogicalType())));\n  join.declareManagedMemoryUseCaseAtOperatorScope(ManagedMemoryUseCase.OPERATOR,1);\n  join.setParallelism(200);\n  TableOperatorWrapperGenerator generator=new TableOperatorWrapperGenerator(Arrays.asList(source1,source2,source3),join,new int[]{1,1,0});\n  generator.generate();\n  TableOperatorWrapper<?> calcWrapper1=createWrapper(calc1,2,1.0 / 3);\n  TableOperatorWrapper<?> calcWrapper2=createWrapper(calc2,3,1.0 / 3);\n  TableOperatorWrapper<?> unionWrapper=createWrapper(union,1);\n  unionWrapper.addInput(calcWrapper1,1);\n  unionWrapper.addInput(calcWrapper2,2);\n  TableOperatorWrapper<?> outputWrapper=createWrapper(join,0,1.0 / 3);\n  outputWrapper.addInput(unionWrapper,2);\n  assertThat(generator.getInputTransformAndInputSpecPairs()).isEqualTo(Arrays.asList(Pair.of(source1,new InputSpec(1,1,calcWrapper1,1)),Pair.of(source2,new InputSpec(2,1,calcWrapper2,1)),Pair.of(source3,new InputSpec(3,0,outputWrapper,2))));\n  assertThat(unionWrapper.getInputEdges()).isEqualTo(Arrays.asList(new TableOperatorWrapper.Edge(calcWrapper1,unionWrapper,1),new TableOperatorWrapper.Edge(calcWrapper2,unionWrapper,2)));\n  assertThat(outputWrapper.getInputEdges()).containsExactly(new TableOperatorWrapper.Edge(unionWrapper,outputWrapper,2));\n  assertThat(generator.getTailWrapper()).isEqualTo(outputWrapper);\n  assertThat(generator.getManagedMemoryWeight()).isEqualTo(3);\n  assertThat(generator.getParallelism()).isEqualTo(200);\n  assertThat(generator.getMaxParallelism()).isEqualTo(-1);\n  assertThat(generator.getMinResources()).isEqualTo(ResourceSpec.UNKNOWN);\n  assertThat(generator.getPreferredResources()).isEqualTo(ResourceSpec.UNKNOWN);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 420,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3960,
        "startLineNumber" : 319,
        "startColumnNumber" : 4,
        "endLineNumber" : 401,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Test for nodes with different parallelisms in a multiple input node. <pre> source1  source2 |        | calc1   calc2 \\    / source3   union \\      / join </pre>\n */\n@Test public void testDifferentParallelisms(){\n  final StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();\n  Transformation<RowData> source1=createSource(env,\"source1\");\n  Transformation<RowData> source2=createSource(env,\"source2\");\n  Transformation<RowData> source3=createSource(env,\"source3\");\n  OneInputTransformation<RowData,RowData> calc1=createOneInputTransform(source1,\"calc1\",InternalTypeInfo.of(RowType.of(DataTypes.STRING().getLogicalType())));\n  calc1.declareManagedMemoryUseCaseAtOperatorScope(ManagedMemoryUseCase.OPERATOR,1);\n  calc1.setParallelism(100);\n  OneInputTransformation<RowData,RowData> calc2=createOneInputTransform(source2,\"calc2\",InternalTypeInfo.of(RowType.of(DataTypes.STRING().getLogicalType())));\n  calc2.declareManagedMemoryUseCaseAtOperatorScope(ManagedMemoryUseCase.OPERATOR,1);\n  calc2.setParallelism(50);\n  UnionTransformation<RowData> union=createUnionInputTransform(\"union1\",calc1,calc2);\n  TwoInputTransformation<RowData,RowData,RowData> join=createTwoInputTransform(union,source3,\"join1\",InternalTypeInfo.of(RowType.of(DataTypes.STRING().getLogicalType())));\n  join.declareManagedMemoryUseCaseAtOperatorScope(ManagedMemoryUseCase.OPERATOR,1);\n  join.setParallelism(200);\n  TableOperatorWrapperGenerator generator=new TableOperatorWrapperGenerator(Arrays.asList(source1,source2,source3),join,new int[]{1,1,0});\n  generator.generate();\n  TableOperatorWrapper<?> calcWrapper1=createWrapper(calc1,2,1.0 / 3);\n  TableOperatorWrapper<?> calcWrapper2=createWrapper(calc2,3,1.0 / 3);\n  TableOperatorWrapper<?> unionWrapper=createWrapper(union,1);\n  unionWrapper.addInput(calcWrapper1,1);\n  unionWrapper.addInput(calcWrapper2,2);\n  TableOperatorWrapper<?> outputWrapper=createWrapper(join,0,1.0 / 3);\n  outputWrapper.addInput(unionWrapper,2);\n  assertThat(generator.getInputTransformAndInputSpecPairs()).isEqualTo(Arrays.asList(Pair.of(source1,new InputSpec(1,1,calcWrapper1,1)),Pair.of(source2,new InputSpec(2,1,calcWrapper2,1)),Pair.of(source3,new InputSpec(3,0,outputWrapper,2))));\n  assertThat(unionWrapper.getInputEdges()).isEqualTo(Arrays.asList(new TableOperatorWrapper.Edge(calcWrapper1,unionWrapper,1),new TableOperatorWrapper.Edge(calcWrapper2,unionWrapper,2)));\n  assertThat(outputWrapper.getInputEdges()).containsExactly(new TableOperatorWrapper.Edge(unionWrapper,outputWrapper,2));\n  assertThat(generator.getTailWrapper()).isEqualTo(outputWrapper);\n  assertThat(generator.getManagedMemoryWeight()).isEqualTo(3);\n  assertThat(generator.getParallelism()).isEqualTo(200);\n  assertThat(generator.getMaxParallelism()).isEqualTo(-1);\n  assertThat(generator.getMinResources()).isEqualTo(ResourceSpec.UNKNOWN);\n  assertThat(generator.getPreferredResources()).isEqualTo(ResourceSpec.UNKNOWN);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 427,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 354,
        "startColumnNumber" : 8,
        "endLineNumber" : 354,
        "endColumnNumber" : 91
      },
      "nodeContext" : "calc2.declareManagedMemoryUseCaseAtOperatorScope(ManagedMemoryUseCase.OPERATOR,1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.flink.streaming.api.transformations.OneInputTransformation<org.apache.flink.table.data.RowData,org.apache.flink.table.data.RowData>"
  }, {
    "nodeContext" : "calc2",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 355,
      "startColumnNumber" : 8,
      "endLineNumber" : 355,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 355,
        "startColumnNumber" : 8,
        "endLineNumber" : 355,
        "endColumnNumber" : 32
      },
      "nodeContext" : "calc2.setParallelism(50)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 355,
        "startColumnNumber" : 8,
        "endLineNumber" : 355,
        "endColumnNumber" : 33
      },
      "nodeContext" : "calc2.setParallelism(50);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3599,
        "startLineNumber" : 335,
        "startColumnNumber" : 44,
        "endLineNumber" : 401,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();\n  Transformation<RowData> source1=createSource(env,\"source1\");\n  Transformation<RowData> source2=createSource(env,\"source2\");\n  Transformation<RowData> source3=createSource(env,\"source3\");\n  OneInputTransformation<RowData,RowData> calc1=createOneInputTransform(source1,\"calc1\",InternalTypeInfo.of(RowType.of(DataTypes.STRING().getLogicalType())));\n  calc1.declareManagedMemoryUseCaseAtOperatorScope(ManagedMemoryUseCase.OPERATOR,1);\n  calc1.setParallelism(100);\n  OneInputTransformation<RowData,RowData> calc2=createOneInputTransform(source2,\"calc2\",InternalTypeInfo.of(RowType.of(DataTypes.STRING().getLogicalType())));\n  calc2.declareManagedMemoryUseCaseAtOperatorScope(ManagedMemoryUseCase.OPERATOR,1);\n  calc2.setParallelism(50);\n  UnionTransformation<RowData> union=createUnionInputTransform(\"union1\",calc1,calc2);\n  TwoInputTransformation<RowData,RowData,RowData> join=createTwoInputTransform(union,source3,\"join1\",InternalTypeInfo.of(RowType.of(DataTypes.STRING().getLogicalType())));\n  join.declareManagedMemoryUseCaseAtOperatorScope(ManagedMemoryUseCase.OPERATOR,1);\n  join.setParallelism(200);\n  TableOperatorWrapperGenerator generator=new TableOperatorWrapperGenerator(Arrays.asList(source1,source2,source3),join,new int[]{1,1,0});\n  generator.generate();\n  TableOperatorWrapper<?> calcWrapper1=createWrapper(calc1,2,1.0 / 3);\n  TableOperatorWrapper<?> calcWrapper2=createWrapper(calc2,3,1.0 / 3);\n  TableOperatorWrapper<?> unionWrapper=createWrapper(union,1);\n  unionWrapper.addInput(calcWrapper1,1);\n  unionWrapper.addInput(calcWrapper2,2);\n  TableOperatorWrapper<?> outputWrapper=createWrapper(join,0,1.0 / 3);\n  outputWrapper.addInput(unionWrapper,2);\n  assertThat(generator.getInputTransformAndInputSpecPairs()).isEqualTo(Arrays.asList(Pair.of(source1,new InputSpec(1,1,calcWrapper1,1)),Pair.of(source2,new InputSpec(2,1,calcWrapper2,1)),Pair.of(source3,new InputSpec(3,0,outputWrapper,2))));\n  assertThat(unionWrapper.getInputEdges()).isEqualTo(Arrays.asList(new TableOperatorWrapper.Edge(calcWrapper1,unionWrapper,1),new TableOperatorWrapper.Edge(calcWrapper2,unionWrapper,2)));\n  assertThat(outputWrapper.getInputEdges()).containsExactly(new TableOperatorWrapper.Edge(unionWrapper,outputWrapper,2));\n  assertThat(generator.getTailWrapper()).isEqualTo(outputWrapper);\n  assertThat(generator.getManagedMemoryWeight()).isEqualTo(3);\n  assertThat(generator.getParallelism()).isEqualTo(200);\n  assertThat(generator.getMaxParallelism()).isEqualTo(-1);\n  assertThat(generator.getMinResources()).isEqualTo(ResourceSpec.UNKNOWN);\n  assertThat(generator.getPreferredResources()).isEqualTo(ResourceSpec.UNKNOWN);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 420,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3960,
        "startLineNumber" : 319,
        "startColumnNumber" : 4,
        "endLineNumber" : 401,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Test for nodes with different parallelisms in a multiple input node. <pre> source1  source2 |        | calc1   calc2 \\    / source3   union \\      / join </pre>\n */\n@Test public void testDifferentParallelisms(){\n  final StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();\n  Transformation<RowData> source1=createSource(env,\"source1\");\n  Transformation<RowData> source2=createSource(env,\"source2\");\n  Transformation<RowData> source3=createSource(env,\"source3\");\n  OneInputTransformation<RowData,RowData> calc1=createOneInputTransform(source1,\"calc1\",InternalTypeInfo.of(RowType.of(DataTypes.STRING().getLogicalType())));\n  calc1.declareManagedMemoryUseCaseAtOperatorScope(ManagedMemoryUseCase.OPERATOR,1);\n  calc1.setParallelism(100);\n  OneInputTransformation<RowData,RowData> calc2=createOneInputTransform(source2,\"calc2\",InternalTypeInfo.of(RowType.of(DataTypes.STRING().getLogicalType())));\n  calc2.declareManagedMemoryUseCaseAtOperatorScope(ManagedMemoryUseCase.OPERATOR,1);\n  calc2.setParallelism(50);\n  UnionTransformation<RowData> union=createUnionInputTransform(\"union1\",calc1,calc2);\n  TwoInputTransformation<RowData,RowData,RowData> join=createTwoInputTransform(union,source3,\"join1\",InternalTypeInfo.of(RowType.of(DataTypes.STRING().getLogicalType())));\n  join.declareManagedMemoryUseCaseAtOperatorScope(ManagedMemoryUseCase.OPERATOR,1);\n  join.setParallelism(200);\n  TableOperatorWrapperGenerator generator=new TableOperatorWrapperGenerator(Arrays.asList(source1,source2,source3),join,new int[]{1,1,0});\n  generator.generate();\n  TableOperatorWrapper<?> calcWrapper1=createWrapper(calc1,2,1.0 / 3);\n  TableOperatorWrapper<?> calcWrapper2=createWrapper(calc2,3,1.0 / 3);\n  TableOperatorWrapper<?> unionWrapper=createWrapper(union,1);\n  unionWrapper.addInput(calcWrapper1,1);\n  unionWrapper.addInput(calcWrapper2,2);\n  TableOperatorWrapper<?> outputWrapper=createWrapper(join,0,1.0 / 3);\n  outputWrapper.addInput(unionWrapper,2);\n  assertThat(generator.getInputTransformAndInputSpecPairs()).isEqualTo(Arrays.asList(Pair.of(source1,new InputSpec(1,1,calcWrapper1,1)),Pair.of(source2,new InputSpec(2,1,calcWrapper2,1)),Pair.of(source3,new InputSpec(3,0,outputWrapper,2))));\n  assertThat(unionWrapper.getInputEdges()).isEqualTo(Arrays.asList(new TableOperatorWrapper.Edge(calcWrapper1,unionWrapper,1),new TableOperatorWrapper.Edge(calcWrapper2,unionWrapper,2)));\n  assertThat(outputWrapper.getInputEdges()).containsExactly(new TableOperatorWrapper.Edge(unionWrapper,outputWrapper,2));\n  assertThat(generator.getTailWrapper()).isEqualTo(outputWrapper);\n  assertThat(generator.getManagedMemoryWeight()).isEqualTo(3);\n  assertThat(generator.getParallelism()).isEqualTo(200);\n  assertThat(generator.getMaxParallelism()).isEqualTo(-1);\n  assertThat(generator.getMinResources()).isEqualTo(ResourceSpec.UNKNOWN);\n  assertThat(generator.getPreferredResources()).isEqualTo(ResourceSpec.UNKNOWN);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 427,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 355,
        "startColumnNumber" : 8,
        "endLineNumber" : 355,
        "endColumnNumber" : 33
      },
      "nodeContext" : "calc2.setParallelism(50);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.flink.streaming.api.transformations.OneInputTransformation<org.apache.flink.table.data.RowData,org.apache.flink.table.data.RowData>"
  }, {
    "nodeContext" : "calc2",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 357,
      "startColumnNumber" : 88,
      "endLineNumber" : 357,
      "endColumnNumber" : 93
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 357,
        "startColumnNumber" : 45,
        "endLineNumber" : 357,
        "endColumnNumber" : 94
      },
      "nodeContext" : "createUnionInputTransform(\"union1\",calc1,calc2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 357,
        "startColumnNumber" : 37,
        "endLineNumber" : 357,
        "endColumnNumber" : 94
      },
      "nodeContext" : "union=createUnionInputTransform(\"union1\",calc1,calc2)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 357,
        "startColumnNumber" : 8,
        "endLineNumber" : 357,
        "endColumnNumber" : 95
      },
      "nodeContext" : "UnionTransformation<RowData> union=createUnionInputTransform(\"union1\",calc1,calc2);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3599,
        "startLineNumber" : 335,
        "startColumnNumber" : 44,
        "endLineNumber" : 401,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();\n  Transformation<RowData> source1=createSource(env,\"source1\");\n  Transformation<RowData> source2=createSource(env,\"source2\");\n  Transformation<RowData> source3=createSource(env,\"source3\");\n  OneInputTransformation<RowData,RowData> calc1=createOneInputTransform(source1,\"calc1\",InternalTypeInfo.of(RowType.of(DataTypes.STRING().getLogicalType())));\n  calc1.declareManagedMemoryUseCaseAtOperatorScope(ManagedMemoryUseCase.OPERATOR,1);\n  calc1.setParallelism(100);\n  OneInputTransformation<RowData,RowData> calc2=createOneInputTransform(source2,\"calc2\",InternalTypeInfo.of(RowType.of(DataTypes.STRING().getLogicalType())));\n  calc2.declareManagedMemoryUseCaseAtOperatorScope(ManagedMemoryUseCase.OPERATOR,1);\n  calc2.setParallelism(50);\n  UnionTransformation<RowData> union=createUnionInputTransform(\"union1\",calc1,calc2);\n  TwoInputTransformation<RowData,RowData,RowData> join=createTwoInputTransform(union,source3,\"join1\",InternalTypeInfo.of(RowType.of(DataTypes.STRING().getLogicalType())));\n  join.declareManagedMemoryUseCaseAtOperatorScope(ManagedMemoryUseCase.OPERATOR,1);\n  join.setParallelism(200);\n  TableOperatorWrapperGenerator generator=new TableOperatorWrapperGenerator(Arrays.asList(source1,source2,source3),join,new int[]{1,1,0});\n  generator.generate();\n  TableOperatorWrapper<?> calcWrapper1=createWrapper(calc1,2,1.0 / 3);\n  TableOperatorWrapper<?> calcWrapper2=createWrapper(calc2,3,1.0 / 3);\n  TableOperatorWrapper<?> unionWrapper=createWrapper(union,1);\n  unionWrapper.addInput(calcWrapper1,1);\n  unionWrapper.addInput(calcWrapper2,2);\n  TableOperatorWrapper<?> outputWrapper=createWrapper(join,0,1.0 / 3);\n  outputWrapper.addInput(unionWrapper,2);\n  assertThat(generator.getInputTransformAndInputSpecPairs()).isEqualTo(Arrays.asList(Pair.of(source1,new InputSpec(1,1,calcWrapper1,1)),Pair.of(source2,new InputSpec(2,1,calcWrapper2,1)),Pair.of(source3,new InputSpec(3,0,outputWrapper,2))));\n  assertThat(unionWrapper.getInputEdges()).isEqualTo(Arrays.asList(new TableOperatorWrapper.Edge(calcWrapper1,unionWrapper,1),new TableOperatorWrapper.Edge(calcWrapper2,unionWrapper,2)));\n  assertThat(outputWrapper.getInputEdges()).containsExactly(new TableOperatorWrapper.Edge(unionWrapper,outputWrapper,2));\n  assertThat(generator.getTailWrapper()).isEqualTo(outputWrapper);\n  assertThat(generator.getManagedMemoryWeight()).isEqualTo(3);\n  assertThat(generator.getParallelism()).isEqualTo(200);\n  assertThat(generator.getMaxParallelism()).isEqualTo(-1);\n  assertThat(generator.getMinResources()).isEqualTo(ResourceSpec.UNKNOWN);\n  assertThat(generator.getPreferredResources()).isEqualTo(ResourceSpec.UNKNOWN);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 420,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3960,
        "startLineNumber" : 319,
        "startColumnNumber" : 4,
        "endLineNumber" : 401,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Test for nodes with different parallelisms in a multiple input node. <pre> source1  source2 |        | calc1   calc2 \\    / source3   union \\      / join </pre>\n */\n@Test public void testDifferentParallelisms(){\n  final StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();\n  Transformation<RowData> source1=createSource(env,\"source1\");\n  Transformation<RowData> source2=createSource(env,\"source2\");\n  Transformation<RowData> source3=createSource(env,\"source3\");\n  OneInputTransformation<RowData,RowData> calc1=createOneInputTransform(source1,\"calc1\",InternalTypeInfo.of(RowType.of(DataTypes.STRING().getLogicalType())));\n  calc1.declareManagedMemoryUseCaseAtOperatorScope(ManagedMemoryUseCase.OPERATOR,1);\n  calc1.setParallelism(100);\n  OneInputTransformation<RowData,RowData> calc2=createOneInputTransform(source2,\"calc2\",InternalTypeInfo.of(RowType.of(DataTypes.STRING().getLogicalType())));\n  calc2.declareManagedMemoryUseCaseAtOperatorScope(ManagedMemoryUseCase.OPERATOR,1);\n  calc2.setParallelism(50);\n  UnionTransformation<RowData> union=createUnionInputTransform(\"union1\",calc1,calc2);\n  TwoInputTransformation<RowData,RowData,RowData> join=createTwoInputTransform(union,source3,\"join1\",InternalTypeInfo.of(RowType.of(DataTypes.STRING().getLogicalType())));\n  join.declareManagedMemoryUseCaseAtOperatorScope(ManagedMemoryUseCase.OPERATOR,1);\n  join.setParallelism(200);\n  TableOperatorWrapperGenerator generator=new TableOperatorWrapperGenerator(Arrays.asList(source1,source2,source3),join,new int[]{1,1,0});\n  generator.generate();\n  TableOperatorWrapper<?> calcWrapper1=createWrapper(calc1,2,1.0 / 3);\n  TableOperatorWrapper<?> calcWrapper2=createWrapper(calc2,3,1.0 / 3);\n  TableOperatorWrapper<?> unionWrapper=createWrapper(union,1);\n  unionWrapper.addInput(calcWrapper1,1);\n  unionWrapper.addInput(calcWrapper2,2);\n  TableOperatorWrapper<?> outputWrapper=createWrapper(join,0,1.0 / 3);\n  outputWrapper.addInput(unionWrapper,2);\n  assertThat(generator.getInputTransformAndInputSpecPairs()).isEqualTo(Arrays.asList(Pair.of(source1,new InputSpec(1,1,calcWrapper1,1)),Pair.of(source2,new InputSpec(2,1,calcWrapper2,1)),Pair.of(source3,new InputSpec(3,0,outputWrapper,2))));\n  assertThat(unionWrapper.getInputEdges()).isEqualTo(Arrays.asList(new TableOperatorWrapper.Edge(calcWrapper1,unionWrapper,1),new TableOperatorWrapper.Edge(calcWrapper2,unionWrapper,2)));\n  assertThat(outputWrapper.getInputEdges()).containsExactly(new TableOperatorWrapper.Edge(unionWrapper,outputWrapper,2));\n  assertThat(generator.getTailWrapper()).isEqualTo(outputWrapper);\n  assertThat(generator.getManagedMemoryWeight()).isEqualTo(3);\n  assertThat(generator.getParallelism()).isEqualTo(200);\n  assertThat(generator.getMaxParallelism()).isEqualTo(-1);\n  assertThat(generator.getMinResources()).isEqualTo(ResourceSpec.UNKNOWN);\n  assertThat(generator.getPreferredResources()).isEqualTo(ResourceSpec.UNKNOWN);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 427,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 357,
        "startColumnNumber" : 8,
        "endLineNumber" : 357,
        "endColumnNumber" : 95
      },
      "nodeContext" : "UnionTransformation<RowData> union=createUnionInputTransform(\"union1\",calc1,calc2);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.flink.streaming.api.transformations.OneInputTransformation<org.apache.flink.table.data.RowData,org.apache.flink.table.data.RowData>"
  }, {
    "nodeContext" : "calc2",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 374,
      "startColumnNumber" : 61,
      "endLineNumber" : 374,
      "endColumnNumber" : 66
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 374,
        "startColumnNumber" : 47,
        "endLineNumber" : 374,
        "endColumnNumber" : 79
      },
      "nodeContext" : "createWrapper(calc2,3,1.0 / 3)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 374,
        "startColumnNumber" : 32,
        "endLineNumber" : 374,
        "endColumnNumber" : 79
      },
      "nodeContext" : "calcWrapper2=createWrapper(calc2,3,1.0 / 3)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 374,
        "startColumnNumber" : 8,
        "endLineNumber" : 374,
        "endColumnNumber" : 80
      },
      "nodeContext" : "TableOperatorWrapper<?> calcWrapper2=createWrapper(calc2,3,1.0 / 3);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3599,
        "startLineNumber" : 335,
        "startColumnNumber" : 44,
        "endLineNumber" : 401,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();\n  Transformation<RowData> source1=createSource(env,\"source1\");\n  Transformation<RowData> source2=createSource(env,\"source2\");\n  Transformation<RowData> source3=createSource(env,\"source3\");\n  OneInputTransformation<RowData,RowData> calc1=createOneInputTransform(source1,\"calc1\",InternalTypeInfo.of(RowType.of(DataTypes.STRING().getLogicalType())));\n  calc1.declareManagedMemoryUseCaseAtOperatorScope(ManagedMemoryUseCase.OPERATOR,1);\n  calc1.setParallelism(100);\n  OneInputTransformation<RowData,RowData> calc2=createOneInputTransform(source2,\"calc2\",InternalTypeInfo.of(RowType.of(DataTypes.STRING().getLogicalType())));\n  calc2.declareManagedMemoryUseCaseAtOperatorScope(ManagedMemoryUseCase.OPERATOR,1);\n  calc2.setParallelism(50);\n  UnionTransformation<RowData> union=createUnionInputTransform(\"union1\",calc1,calc2);\n  TwoInputTransformation<RowData,RowData,RowData> join=createTwoInputTransform(union,source3,\"join1\",InternalTypeInfo.of(RowType.of(DataTypes.STRING().getLogicalType())));\n  join.declareManagedMemoryUseCaseAtOperatorScope(ManagedMemoryUseCase.OPERATOR,1);\n  join.setParallelism(200);\n  TableOperatorWrapperGenerator generator=new TableOperatorWrapperGenerator(Arrays.asList(source1,source2,source3),join,new int[]{1,1,0});\n  generator.generate();\n  TableOperatorWrapper<?> calcWrapper1=createWrapper(calc1,2,1.0 / 3);\n  TableOperatorWrapper<?> calcWrapper2=createWrapper(calc2,3,1.0 / 3);\n  TableOperatorWrapper<?> unionWrapper=createWrapper(union,1);\n  unionWrapper.addInput(calcWrapper1,1);\n  unionWrapper.addInput(calcWrapper2,2);\n  TableOperatorWrapper<?> outputWrapper=createWrapper(join,0,1.0 / 3);\n  outputWrapper.addInput(unionWrapper,2);\n  assertThat(generator.getInputTransformAndInputSpecPairs()).isEqualTo(Arrays.asList(Pair.of(source1,new InputSpec(1,1,calcWrapper1,1)),Pair.of(source2,new InputSpec(2,1,calcWrapper2,1)),Pair.of(source3,new InputSpec(3,0,outputWrapper,2))));\n  assertThat(unionWrapper.getInputEdges()).isEqualTo(Arrays.asList(new TableOperatorWrapper.Edge(calcWrapper1,unionWrapper,1),new TableOperatorWrapper.Edge(calcWrapper2,unionWrapper,2)));\n  assertThat(outputWrapper.getInputEdges()).containsExactly(new TableOperatorWrapper.Edge(unionWrapper,outputWrapper,2));\n  assertThat(generator.getTailWrapper()).isEqualTo(outputWrapper);\n  assertThat(generator.getManagedMemoryWeight()).isEqualTo(3);\n  assertThat(generator.getParallelism()).isEqualTo(200);\n  assertThat(generator.getMaxParallelism()).isEqualTo(-1);\n  assertThat(generator.getMinResources()).isEqualTo(ResourceSpec.UNKNOWN);\n  assertThat(generator.getPreferredResources()).isEqualTo(ResourceSpec.UNKNOWN);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 420,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3960,
        "startLineNumber" : 319,
        "startColumnNumber" : 4,
        "endLineNumber" : 401,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Test for nodes with different parallelisms in a multiple input node. <pre> source1  source2 |        | calc1   calc2 \\    / source3   union \\      / join </pre>\n */\n@Test public void testDifferentParallelisms(){\n  final StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();\n  Transformation<RowData> source1=createSource(env,\"source1\");\n  Transformation<RowData> source2=createSource(env,\"source2\");\n  Transformation<RowData> source3=createSource(env,\"source3\");\n  OneInputTransformation<RowData,RowData> calc1=createOneInputTransform(source1,\"calc1\",InternalTypeInfo.of(RowType.of(DataTypes.STRING().getLogicalType())));\n  calc1.declareManagedMemoryUseCaseAtOperatorScope(ManagedMemoryUseCase.OPERATOR,1);\n  calc1.setParallelism(100);\n  OneInputTransformation<RowData,RowData> calc2=createOneInputTransform(source2,\"calc2\",InternalTypeInfo.of(RowType.of(DataTypes.STRING().getLogicalType())));\n  calc2.declareManagedMemoryUseCaseAtOperatorScope(ManagedMemoryUseCase.OPERATOR,1);\n  calc2.setParallelism(50);\n  UnionTransformation<RowData> union=createUnionInputTransform(\"union1\",calc1,calc2);\n  TwoInputTransformation<RowData,RowData,RowData> join=createTwoInputTransform(union,source3,\"join1\",InternalTypeInfo.of(RowType.of(DataTypes.STRING().getLogicalType())));\n  join.declareManagedMemoryUseCaseAtOperatorScope(ManagedMemoryUseCase.OPERATOR,1);\n  join.setParallelism(200);\n  TableOperatorWrapperGenerator generator=new TableOperatorWrapperGenerator(Arrays.asList(source1,source2,source3),join,new int[]{1,1,0});\n  generator.generate();\n  TableOperatorWrapper<?> calcWrapper1=createWrapper(calc1,2,1.0 / 3);\n  TableOperatorWrapper<?> calcWrapper2=createWrapper(calc2,3,1.0 / 3);\n  TableOperatorWrapper<?> unionWrapper=createWrapper(union,1);\n  unionWrapper.addInput(calcWrapper1,1);\n  unionWrapper.addInput(calcWrapper2,2);\n  TableOperatorWrapper<?> outputWrapper=createWrapper(join,0,1.0 / 3);\n  outputWrapper.addInput(unionWrapper,2);\n  assertThat(generator.getInputTransformAndInputSpecPairs()).isEqualTo(Arrays.asList(Pair.of(source1,new InputSpec(1,1,calcWrapper1,1)),Pair.of(source2,new InputSpec(2,1,calcWrapper2,1)),Pair.of(source3,new InputSpec(3,0,outputWrapper,2))));\n  assertThat(unionWrapper.getInputEdges()).isEqualTo(Arrays.asList(new TableOperatorWrapper.Edge(calcWrapper1,unionWrapper,1),new TableOperatorWrapper.Edge(calcWrapper2,unionWrapper,2)));\n  assertThat(outputWrapper.getInputEdges()).containsExactly(new TableOperatorWrapper.Edge(unionWrapper,outputWrapper,2));\n  assertThat(generator.getTailWrapper()).isEqualTo(outputWrapper);\n  assertThat(generator.getManagedMemoryWeight()).isEqualTo(3);\n  assertThat(generator.getParallelism()).isEqualTo(200);\n  assertThat(generator.getMaxParallelism()).isEqualTo(-1);\n  assertThat(generator.getMinResources()).isEqualTo(ResourceSpec.UNKNOWN);\n  assertThat(generator.getPreferredResources()).isEqualTo(ResourceSpec.UNKNOWN);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 427,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 374,
        "startColumnNumber" : 8,
        "endLineNumber" : 374,
        "endColumnNumber" : 80
      },
      "nodeContext" : "TableOperatorWrapper<?> calcWrapper2=createWrapper(calc2,3,1.0 / 3);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.flink.streaming.api.transformations.OneInputTransformation<org.apache.flink.table.data.RowData,org.apache.flink.table.data.RowData>"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 354,
    "startColumnNumber" : 8,
    "endLineNumber" : 354,
    "endColumnNumber" : 13
  }, {
    "charLength" : 5,
    "startLineNumber" : 355,
    "startColumnNumber" : 8,
    "endLineNumber" : 355,
    "endColumnNumber" : 13
  }, {
    "charLength" : 5,
    "startLineNumber" : 357,
    "startColumnNumber" : 88,
    "endLineNumber" : 357,
    "endColumnNumber" : 93
  }, {
    "charLength" : 5,
    "startLineNumber" : 374,
    "startColumnNumber" : 61,
    "endLineNumber" : 374,
    "endColumnNumber" : 66
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  } ]
}