{
  "id" : 228,
  "expression" : "fitModeResult.currentEndWidth",
  "projectName" : "material-components@material-components-android",
  "commitID" : "79bf9d0e8e62eea9c2f2620d4e1a0a2ca0e12017",
  "filePath" : "/lib/java/com/google/android/material/transition/platform/MaterialContainerTransform.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "fitModeResult.currentEndWidth",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 29,
      "startLineNumber" : 1411,
      "startColumnNumber" : 24,
      "endLineNumber" : 1411,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 1411,
        "startColumnNumber" : 24,
        "endLineNumber" : 1411,
        "endColumnNumber" : 57
      },
      "nodeContext" : "fitModeResult.currentEndWidth / 2",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 1411,
        "startColumnNumber" : 10,
        "endLineNumber" : 1411,
        "endColumnNumber" : 57
      },
      "nodeContext" : "motionPathX - fitModeResult.currentEndWidth / 2",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 222,
        "startLineNumber" : 1410,
        "startColumnNumber" : 6,
        "endLineNumber" : 1414,
        "endColumnNumber" : 55
      },
      "nodeContext" : "currentEndBounds.set(motionPathX - fitModeResult.currentEndWidth / 2,motionPathY,motionPathX + fitModeResult.currentEndWidth / 2,motionPathY + fitModeResult.currentEndHeight)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 23,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 223,
        "startLineNumber" : 1410,
        "startColumnNumber" : 6,
        "endLineNumber" : 1414,
        "endColumnNumber" : 56
      },
      "nodeContext" : "currentEndBounds.set(motionPathX - fitModeResult.currentEndWidth / 2,motionPathY,motionPathX + fitModeResult.currentEndWidth / 2,motionPathY + fitModeResult.currentEndHeight);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 24,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5287,
        "startLineNumber" : 1362,
        "startColumnNumber" : 48,
        "endLineNumber" : 1472,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.progress=progress;\n  scrimPaint.setAlpha((int)(entering ? lerp(0,255,progress) : lerp(255,0,progress)));\n  motionPathMeasure.getPosTan(motionPathLength * progress,motionPathPosition,null);\n  float motionPathX=motionPathPosition[0];\n  float motionPathY=motionPathPosition[1];\n  if (progress > 1 || progress < 0) {\n    float trajectoryProgress;\n    float trajectoryMultiplier;\n    if (progress > 1) {\n      trajectoryProgress=0.99f;\n      trajectoryMultiplier=(progress - 1f) / (1f - trajectoryProgress);\n    }\n else {\n      trajectoryProgress=0.01f;\n      trajectoryMultiplier=progress / trajectoryProgress * -1;\n    }\n    motionPathMeasure.getPosTan(motionPathLength * trajectoryProgress,motionPathPosition,null);\n    float trajectoryMotionPathX=motionPathPosition[0];\n    float trajectoryMotionPathY=motionPathPosition[1];\n    motionPathX+=(motionPathX - trajectoryMotionPathX) * trajectoryMultiplier;\n    motionPathY+=(motionPathY - trajectoryMotionPathY) * trajectoryMultiplier;\n  }\n  float scaleStartFraction=checkNotNull(progressThresholds.scale.start);\n  float scaleEndFraction=checkNotNull(progressThresholds.scale.end);\n  fitModeResult=fitModeEvaluator.evaluate(progress,scaleStartFraction,scaleEndFraction,startBounds.width(),startBounds.height(),endBounds.width(),endBounds.height());\n  currentStartBounds.set(motionPathX - fitModeResult.currentStartWidth / 2,motionPathY,motionPathX + fitModeResult.currentStartWidth / 2,motionPathY + fitModeResult.currentStartHeight);\n  currentEndBounds.set(motionPathX - fitModeResult.currentEndWidth / 2,motionPathY,motionPathX + fitModeResult.currentEndWidth / 2,motionPathY + fitModeResult.currentEndHeight);\n  currentStartBoundsMasked.set(currentStartBounds);\n  currentEndBoundsMasked.set(currentEndBounds);\n  float maskStartFraction=checkNotNull(progressThresholds.scaleMask.start);\n  float maskEndFraction=checkNotNull(progressThresholds.scaleMask.end);\n  boolean shouldMaskStartBounds=fitModeEvaluator.shouldMaskStartBounds(fitModeResult);\n  RectF maskBounds=shouldMaskStartBounds ? currentStartBoundsMasked : currentEndBoundsMasked;\n  float maskProgress=lerp(0f,1f,maskStartFraction,maskEndFraction,progress);\n  float maskMultiplier=shouldMaskStartBounds ? maskProgress : 1 - maskProgress;\n  fitModeEvaluator.applyMask(maskBounds,maskMultiplier,fitModeResult);\n  currentMaskBounds=new RectF(Math.min(currentStartBoundsMasked.left,currentEndBoundsMasked.left),Math.min(currentStartBoundsMasked.top,currentEndBoundsMasked.top),Math.max(currentStartBoundsMasked.right,currentEndBoundsMasked.right),Math.max(currentStartBoundsMasked.bottom,currentEndBoundsMasked.bottom));\n  maskEvaluator.evaluate(progress,startShapeAppearanceModel,endShapeAppearanceModel,currentStartBounds,currentStartBoundsMasked,currentEndBoundsMasked,progressThresholds.shapeMask);\n  currentElevation=lerp(startElevation,endElevation,progress);\n  float dxMultiplier=calculateElevationDxMultiplier(currentMaskBounds,displayWidth);\n  float dyMultiplier=calculateElevationDyMultiplier(currentMaskBounds,displayHeight);\n  float currentElevationDx=(int)(currentElevation * dxMultiplier);\n  currentElevationDy=(int)(currentElevation * dyMultiplier);\n  shadowPaint.setShadowLayer(currentElevation,currentElevationDx,currentElevationDy,SHADOW_COLOR);\n  float fadeStartFraction=checkNotNull(progressThresholds.fade.start);\n  float fadeEndFraction=checkNotNull(progressThresholds.fade.end);\n  fadeModeResult=fadeModeEvaluator.evaluate(progress,fadeStartFraction,fadeEndFraction,FadeThroughProvider.FADE_THROUGH_THRESHOLD);\n  if (startContainerPaint.getColor() != Color.TRANSPARENT) {\n    startContainerPaint.setAlpha(fadeModeResult.startAlpha);\n  }\n  if (endContainerPaint.getColor() != Color.TRANSPARENT) {\n    endContainerPaint.setAlpha(fadeModeResult.endAlpha);\n  }\n  invalidateSelf();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 485,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5331,
        "startLineNumber" : 1362,
        "startColumnNumber" : 4,
        "endLineNumber" : 1472,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void updateProgress(float progress){\n  this.progress=progress;\n  scrimPaint.setAlpha((int)(entering ? lerp(0,255,progress) : lerp(255,0,progress)));\n  motionPathMeasure.getPosTan(motionPathLength * progress,motionPathPosition,null);\n  float motionPathX=motionPathPosition[0];\n  float motionPathY=motionPathPosition[1];\n  if (progress > 1 || progress < 0) {\n    float trajectoryProgress;\n    float trajectoryMultiplier;\n    if (progress > 1) {\n      trajectoryProgress=0.99f;\n      trajectoryMultiplier=(progress - 1f) / (1f - trajectoryProgress);\n    }\n else {\n      trajectoryProgress=0.01f;\n      trajectoryMultiplier=progress / trajectoryProgress * -1;\n    }\n    motionPathMeasure.getPosTan(motionPathLength * trajectoryProgress,motionPathPosition,null);\n    float trajectoryMotionPathX=motionPathPosition[0];\n    float trajectoryMotionPathY=motionPathPosition[1];\n    motionPathX+=(motionPathX - trajectoryMotionPathX) * trajectoryMultiplier;\n    motionPathY+=(motionPathY - trajectoryMotionPathY) * trajectoryMultiplier;\n  }\n  float scaleStartFraction=checkNotNull(progressThresholds.scale.start);\n  float scaleEndFraction=checkNotNull(progressThresholds.scale.end);\n  fitModeResult=fitModeEvaluator.evaluate(progress,scaleStartFraction,scaleEndFraction,startBounds.width(),startBounds.height(),endBounds.width(),endBounds.height());\n  currentStartBounds.set(motionPathX - fitModeResult.currentStartWidth / 2,motionPathY,motionPathX + fitModeResult.currentStartWidth / 2,motionPathY + fitModeResult.currentStartHeight);\n  currentEndBounds.set(motionPathX - fitModeResult.currentEndWidth / 2,motionPathY,motionPathX + fitModeResult.currentEndWidth / 2,motionPathY + fitModeResult.currentEndHeight);\n  currentStartBoundsMasked.set(currentStartBounds);\n  currentEndBoundsMasked.set(currentEndBounds);\n  float maskStartFraction=checkNotNull(progressThresholds.scaleMask.start);\n  float maskEndFraction=checkNotNull(progressThresholds.scaleMask.end);\n  boolean shouldMaskStartBounds=fitModeEvaluator.shouldMaskStartBounds(fitModeResult);\n  RectF maskBounds=shouldMaskStartBounds ? currentStartBoundsMasked : currentEndBoundsMasked;\n  float maskProgress=lerp(0f,1f,maskStartFraction,maskEndFraction,progress);\n  float maskMultiplier=shouldMaskStartBounds ? maskProgress : 1 - maskProgress;\n  fitModeEvaluator.applyMask(maskBounds,maskMultiplier,fitModeResult);\n  currentMaskBounds=new RectF(Math.min(currentStartBoundsMasked.left,currentEndBoundsMasked.left),Math.min(currentStartBoundsMasked.top,currentEndBoundsMasked.top),Math.max(currentStartBoundsMasked.right,currentEndBoundsMasked.right),Math.max(currentStartBoundsMasked.bottom,currentEndBoundsMasked.bottom));\n  maskEvaluator.evaluate(progress,startShapeAppearanceModel,endShapeAppearanceModel,currentStartBounds,currentStartBoundsMasked,currentEndBoundsMasked,progressThresholds.shapeMask);\n  currentElevation=lerp(startElevation,endElevation,progress);\n  float dxMultiplier=calculateElevationDxMultiplier(currentMaskBounds,displayWidth);\n  float dyMultiplier=calculateElevationDyMultiplier(currentMaskBounds,displayHeight);\n  float currentElevationDx=(int)(currentElevation * dxMultiplier);\n  currentElevationDy=(int)(currentElevation * dyMultiplier);\n  shadowPaint.setShadowLayer(currentElevation,currentElevationDx,currentElevationDy,SHADOW_COLOR);\n  float fadeStartFraction=checkNotNull(progressThresholds.fade.start);\n  float fadeEndFraction=checkNotNull(progressThresholds.fade.end);\n  fadeModeResult=fadeModeEvaluator.evaluate(progress,fadeStartFraction,fadeEndFraction,FadeThroughProvider.FADE_THROUGH_THRESHOLD);\n  if (startContainerPaint.getColor() != Color.TRANSPARENT) {\n    startContainerPaint.setAlpha(fadeModeResult.startAlpha);\n  }\n  if (endContainerPaint.getColor() != Color.TRANSPARENT) {\n    endContainerPaint.setAlpha(fadeModeResult.endAlpha);\n  }\n  invalidateSelf();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 492,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 1411,
        "startColumnNumber" : 10,
        "endLineNumber" : 1411,
        "endColumnNumber" : 57
      },
      "nodeContext" : "motionPathX - fitModeResult.currentEndWidth / 2",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "float"
  }, {
    "nodeContext" : "fitModeResult.currentEndWidth",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 29,
      "startLineNumber" : 1413,
      "startColumnNumber" : 24,
      "endLineNumber" : 1413,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 1413,
        "startColumnNumber" : 24,
        "endLineNumber" : 1413,
        "endColumnNumber" : 57
      },
      "nodeContext" : "fitModeResult.currentEndWidth / 2",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 1413,
        "startColumnNumber" : 10,
        "endLineNumber" : 1413,
        "endColumnNumber" : 57
      },
      "nodeContext" : "motionPathX + fitModeResult.currentEndWidth / 2",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 222,
        "startLineNumber" : 1410,
        "startColumnNumber" : 6,
        "endLineNumber" : 1414,
        "endColumnNumber" : 55
      },
      "nodeContext" : "currentEndBounds.set(motionPathX - fitModeResult.currentEndWidth / 2,motionPathY,motionPathX + fitModeResult.currentEndWidth / 2,motionPathY + fitModeResult.currentEndHeight)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 23,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 223,
        "startLineNumber" : 1410,
        "startColumnNumber" : 6,
        "endLineNumber" : 1414,
        "endColumnNumber" : 56
      },
      "nodeContext" : "currentEndBounds.set(motionPathX - fitModeResult.currentEndWidth / 2,motionPathY,motionPathX + fitModeResult.currentEndWidth / 2,motionPathY + fitModeResult.currentEndHeight);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 24,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5287,
        "startLineNumber" : 1362,
        "startColumnNumber" : 48,
        "endLineNumber" : 1472,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.progress=progress;\n  scrimPaint.setAlpha((int)(entering ? lerp(0,255,progress) : lerp(255,0,progress)));\n  motionPathMeasure.getPosTan(motionPathLength * progress,motionPathPosition,null);\n  float motionPathX=motionPathPosition[0];\n  float motionPathY=motionPathPosition[1];\n  if (progress > 1 || progress < 0) {\n    float trajectoryProgress;\n    float trajectoryMultiplier;\n    if (progress > 1) {\n      trajectoryProgress=0.99f;\n      trajectoryMultiplier=(progress - 1f) / (1f - trajectoryProgress);\n    }\n else {\n      trajectoryProgress=0.01f;\n      trajectoryMultiplier=progress / trajectoryProgress * -1;\n    }\n    motionPathMeasure.getPosTan(motionPathLength * trajectoryProgress,motionPathPosition,null);\n    float trajectoryMotionPathX=motionPathPosition[0];\n    float trajectoryMotionPathY=motionPathPosition[1];\n    motionPathX+=(motionPathX - trajectoryMotionPathX) * trajectoryMultiplier;\n    motionPathY+=(motionPathY - trajectoryMotionPathY) * trajectoryMultiplier;\n  }\n  float scaleStartFraction=checkNotNull(progressThresholds.scale.start);\n  float scaleEndFraction=checkNotNull(progressThresholds.scale.end);\n  fitModeResult=fitModeEvaluator.evaluate(progress,scaleStartFraction,scaleEndFraction,startBounds.width(),startBounds.height(),endBounds.width(),endBounds.height());\n  currentStartBounds.set(motionPathX - fitModeResult.currentStartWidth / 2,motionPathY,motionPathX + fitModeResult.currentStartWidth / 2,motionPathY + fitModeResult.currentStartHeight);\n  currentEndBounds.set(motionPathX - fitModeResult.currentEndWidth / 2,motionPathY,motionPathX + fitModeResult.currentEndWidth / 2,motionPathY + fitModeResult.currentEndHeight);\n  currentStartBoundsMasked.set(currentStartBounds);\n  currentEndBoundsMasked.set(currentEndBounds);\n  float maskStartFraction=checkNotNull(progressThresholds.scaleMask.start);\n  float maskEndFraction=checkNotNull(progressThresholds.scaleMask.end);\n  boolean shouldMaskStartBounds=fitModeEvaluator.shouldMaskStartBounds(fitModeResult);\n  RectF maskBounds=shouldMaskStartBounds ? currentStartBoundsMasked : currentEndBoundsMasked;\n  float maskProgress=lerp(0f,1f,maskStartFraction,maskEndFraction,progress);\n  float maskMultiplier=shouldMaskStartBounds ? maskProgress : 1 - maskProgress;\n  fitModeEvaluator.applyMask(maskBounds,maskMultiplier,fitModeResult);\n  currentMaskBounds=new RectF(Math.min(currentStartBoundsMasked.left,currentEndBoundsMasked.left),Math.min(currentStartBoundsMasked.top,currentEndBoundsMasked.top),Math.max(currentStartBoundsMasked.right,currentEndBoundsMasked.right),Math.max(currentStartBoundsMasked.bottom,currentEndBoundsMasked.bottom));\n  maskEvaluator.evaluate(progress,startShapeAppearanceModel,endShapeAppearanceModel,currentStartBounds,currentStartBoundsMasked,currentEndBoundsMasked,progressThresholds.shapeMask);\n  currentElevation=lerp(startElevation,endElevation,progress);\n  float dxMultiplier=calculateElevationDxMultiplier(currentMaskBounds,displayWidth);\n  float dyMultiplier=calculateElevationDyMultiplier(currentMaskBounds,displayHeight);\n  float currentElevationDx=(int)(currentElevation * dxMultiplier);\n  currentElevationDy=(int)(currentElevation * dyMultiplier);\n  shadowPaint.setShadowLayer(currentElevation,currentElevationDx,currentElevationDy,SHADOW_COLOR);\n  float fadeStartFraction=checkNotNull(progressThresholds.fade.start);\n  float fadeEndFraction=checkNotNull(progressThresholds.fade.end);\n  fadeModeResult=fadeModeEvaluator.evaluate(progress,fadeStartFraction,fadeEndFraction,FadeThroughProvider.FADE_THROUGH_THRESHOLD);\n  if (startContainerPaint.getColor() != Color.TRANSPARENT) {\n    startContainerPaint.setAlpha(fadeModeResult.startAlpha);\n  }\n  if (endContainerPaint.getColor() != Color.TRANSPARENT) {\n    endContainerPaint.setAlpha(fadeModeResult.endAlpha);\n  }\n  invalidateSelf();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 485,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5331,
        "startLineNumber" : 1362,
        "startColumnNumber" : 4,
        "endLineNumber" : 1472,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void updateProgress(float progress){\n  this.progress=progress;\n  scrimPaint.setAlpha((int)(entering ? lerp(0,255,progress) : lerp(255,0,progress)));\n  motionPathMeasure.getPosTan(motionPathLength * progress,motionPathPosition,null);\n  float motionPathX=motionPathPosition[0];\n  float motionPathY=motionPathPosition[1];\n  if (progress > 1 || progress < 0) {\n    float trajectoryProgress;\n    float trajectoryMultiplier;\n    if (progress > 1) {\n      trajectoryProgress=0.99f;\n      trajectoryMultiplier=(progress - 1f) / (1f - trajectoryProgress);\n    }\n else {\n      trajectoryProgress=0.01f;\n      trajectoryMultiplier=progress / trajectoryProgress * -1;\n    }\n    motionPathMeasure.getPosTan(motionPathLength * trajectoryProgress,motionPathPosition,null);\n    float trajectoryMotionPathX=motionPathPosition[0];\n    float trajectoryMotionPathY=motionPathPosition[1];\n    motionPathX+=(motionPathX - trajectoryMotionPathX) * trajectoryMultiplier;\n    motionPathY+=(motionPathY - trajectoryMotionPathY) * trajectoryMultiplier;\n  }\n  float scaleStartFraction=checkNotNull(progressThresholds.scale.start);\n  float scaleEndFraction=checkNotNull(progressThresholds.scale.end);\n  fitModeResult=fitModeEvaluator.evaluate(progress,scaleStartFraction,scaleEndFraction,startBounds.width(),startBounds.height(),endBounds.width(),endBounds.height());\n  currentStartBounds.set(motionPathX - fitModeResult.currentStartWidth / 2,motionPathY,motionPathX + fitModeResult.currentStartWidth / 2,motionPathY + fitModeResult.currentStartHeight);\n  currentEndBounds.set(motionPathX - fitModeResult.currentEndWidth / 2,motionPathY,motionPathX + fitModeResult.currentEndWidth / 2,motionPathY + fitModeResult.currentEndHeight);\n  currentStartBoundsMasked.set(currentStartBounds);\n  currentEndBoundsMasked.set(currentEndBounds);\n  float maskStartFraction=checkNotNull(progressThresholds.scaleMask.start);\n  float maskEndFraction=checkNotNull(progressThresholds.scaleMask.end);\n  boolean shouldMaskStartBounds=fitModeEvaluator.shouldMaskStartBounds(fitModeResult);\n  RectF maskBounds=shouldMaskStartBounds ? currentStartBoundsMasked : currentEndBoundsMasked;\n  float maskProgress=lerp(0f,1f,maskStartFraction,maskEndFraction,progress);\n  float maskMultiplier=shouldMaskStartBounds ? maskProgress : 1 - maskProgress;\n  fitModeEvaluator.applyMask(maskBounds,maskMultiplier,fitModeResult);\n  currentMaskBounds=new RectF(Math.min(currentStartBoundsMasked.left,currentEndBoundsMasked.left),Math.min(currentStartBoundsMasked.top,currentEndBoundsMasked.top),Math.max(currentStartBoundsMasked.right,currentEndBoundsMasked.right),Math.max(currentStartBoundsMasked.bottom,currentEndBoundsMasked.bottom));\n  maskEvaluator.evaluate(progress,startShapeAppearanceModel,endShapeAppearanceModel,currentStartBounds,currentStartBoundsMasked,currentEndBoundsMasked,progressThresholds.shapeMask);\n  currentElevation=lerp(startElevation,endElevation,progress);\n  float dxMultiplier=calculateElevationDxMultiplier(currentMaskBounds,displayWidth);\n  float dyMultiplier=calculateElevationDyMultiplier(currentMaskBounds,displayHeight);\n  float currentElevationDx=(int)(currentElevation * dxMultiplier);\n  currentElevationDy=(int)(currentElevation * dyMultiplier);\n  shadowPaint.setShadowLayer(currentElevation,currentElevationDx,currentElevationDy,SHADOW_COLOR);\n  float fadeStartFraction=checkNotNull(progressThresholds.fade.start);\n  float fadeEndFraction=checkNotNull(progressThresholds.fade.end);\n  fadeModeResult=fadeModeEvaluator.evaluate(progress,fadeStartFraction,fadeEndFraction,FadeThroughProvider.FADE_THROUGH_THRESHOLD);\n  if (startContainerPaint.getColor() != Color.TRANSPARENT) {\n    startContainerPaint.setAlpha(fadeModeResult.startAlpha);\n  }\n  if (endContainerPaint.getColor() != Color.TRANSPARENT) {\n    endContainerPaint.setAlpha(fadeModeResult.endAlpha);\n  }\n  invalidateSelf();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 492,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 1413,
        "startColumnNumber" : 10,
        "endLineNumber" : 1413,
        "endColumnNumber" : 57
      },
      "nodeContext" : "motionPathX + fitModeResult.currentEndWidth / 2",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "float"
  } ],
  "positionList" : [ {
    "charLength" : 29,
    "startLineNumber" : 1411,
    "startColumnNumber" : 24,
    "endLineNumber" : 1411,
    "endColumnNumber" : 53
  }, {
    "charLength" : 29,
    "startLineNumber" : 1413,
    "startColumnNumber" : 24,
    "endLineNumber" : 1413,
    "endColumnNumber" : 53
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}