{
  "id" : 354,
  "expression" : "new IOException()",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/extensions-contrib/cloudfiles-extensions/src/test/java/org/apache/druid/storage/cloudfiles/CloudFilesByteSourceTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new IOException()",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 69,
      "startColumnNumber" : 51,
      "endLineNumber" : 69,
      "endColumnNumber" : 68
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 69,
        "endColumnNumber" : 69
      },
      "nodeContext" : "EasyMock.expect(payload.openStream()).andThrow(new IOException())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 69,
        "endColumnNumber" : 87
      },
      "nodeContext" : "EasyMock.expect(payload.openStream()).andThrow(new IOException()).andReturn(stream)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 69,
        "endColumnNumber" : 88
      },
      "nodeContext" : "EasyMock.expect(payload.openStream()).andThrow(new IOException()).andReturn(stream);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 913,
        "startLineNumber" : 59,
        "startColumnNumber" : 2,
        "endLineNumber" : 86,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final String path=\"path\";\n  CloudFilesObjectApiProxy objectApi=createMock(CloudFilesObjectApiProxy.class);\n  CloudFilesObject cloudFilesObject=createMock(CloudFilesObject.class);\n  Payload payload=createMock(Payload.class);\n  InputStream stream=createMock(InputStream.class);\n  EasyMock.expect(objectApi.get(path,0)).andReturn(cloudFilesObject);\n  EasyMock.expect(cloudFilesObject.getPayload()).andReturn(payload);\n  EasyMock.expect(payload.openStream()).andThrow(new IOException()).andReturn(stream);\n  payload.close();\n  replayAll();\n  CloudFilesByteSource byteSource=new CloudFilesByteSource(objectApi,path);\n  try {\n    byteSource.openStream();\n  }\n catch (  Exception e) {\n    Assert.assertEquals(\"Recoverable exception\",e.getMessage());\n  }\n  Assert.assertEquals(stream,byteSource.openStream());\n  byteSource.closeStream();\n  verifyAll();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 137,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 993,
        "startLineNumber" : 57,
        "startColumnNumber" : 2,
        "endLineNumber" : 86,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test() public void openStreamWithRecoverableErrorTest() throws IOException {\n  final String path=\"path\";\n  CloudFilesObjectApiProxy objectApi=createMock(CloudFilesObjectApiProxy.class);\n  CloudFilesObject cloudFilesObject=createMock(CloudFilesObject.class);\n  Payload payload=createMock(Payload.class);\n  InputStream stream=createMock(InputStream.class);\n  EasyMock.expect(objectApi.get(path,0)).andReturn(cloudFilesObject);\n  EasyMock.expect(cloudFilesObject.getPayload()).andReturn(payload);\n  EasyMock.expect(payload.openStream()).andThrow(new IOException()).andReturn(stream);\n  payload.close();\n  replayAll();\n  CloudFilesByteSource byteSource=new CloudFilesByteSource(objectApi,path);\n  try {\n    byteSource.openStream();\n  }\n catch (  Exception e) {\n    Assert.assertEquals(\"Recoverable exception\",e.getMessage());\n  }\n  Assert.assertEquals(stream,byteSource.openStream());\n  byteSource.closeStream();\n  verifyAll();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 145,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 69,
        "endColumnNumber" : 88
      },
      "nodeContext" : "EasyMock.expect(payload.openStream()).andThrow(new IOException()).andReturn(stream);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.io.IOException"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 69,
    "startColumnNumber" : 51,
    "endLineNumber" : 69,
    "endColumnNumber" : 68
  } ],
  "layoutRelationDataList" : [ ]
}