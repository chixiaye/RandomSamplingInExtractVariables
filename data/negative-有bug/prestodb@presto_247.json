{
  "id" : 247,
  "expression" : "ValueSet.ofRanges(Range.greaterThan(BIGINT,2L))",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-hive/src/test/java/com/facebook/presto/hive/TestDomainTranslator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ValueSet.ofRanges(Range.greaterThan(BIGINT,2L))",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 48,
      "startLineNumber" : 141,
      "startColumnNumber" : 106,
      "endLineNumber" : 141,
      "endColumnNumber" : 154
    },
    "astNodeNumber" : 8,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 141,
        "startColumnNumber" : 92,
        "endLineNumber" : 141,
        "endColumnNumber" : 162
      },
      "nodeContext" : "Domain.create(ValueSet.ofRanges(Range.greaterThan(BIGINT,2L)),false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 151,
        "startLineNumber" : 141,
        "startColumnNumber" : 12,
        "endLineNumber" : 141,
        "endColumnNumber" : 163
      },
      "nodeContext" : "assertPredicateTranslates(greaterThan(expression,bigintLiteral(2L)),subfield,Domain.create(ValueSet.ofRanges(Range.greaterThan(BIGINT,2L)),false))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 21,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 152,
        "startLineNumber" : 141,
        "startColumnNumber" : 12,
        "endLineNumber" : 141,
        "endColumnNumber" : 164
      },
      "nodeContext" : "assertPredicateTranslates(greaterThan(expression,bigintLiteral(2L)),subfield,Domain.create(ValueSet.ofRanges(Range.greaterThan(BIGINT,2L)),false));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 940,
        "startLineNumber" : 137,
        "startColumnNumber" : 78,
        "endLineNumber" : 150,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String subfield=entry.getKey();\n  RowExpression expression=entry.getValue();\n  assertPredicateTranslates(greaterThan(expression,bigintLiteral(2L)),subfield,Domain.create(ValueSet.ofRanges(Range.greaterThan(BIGINT,2L)),false));\n  assertPredicateTranslates(equal(expression,bigintLiteral(2L)),subfield,Domain.create(ValueSet.ofRanges(Range.equal(BIGINT,2L)),false));\n  assertPredicateTranslates(between(expression,bigintLiteral(1L),bigintLiteral(2L)),subfield,Domain.create(ValueSet.ofRanges(Range.range(BIGINT,1L,true,2L,true)),false));\n  assertPredicateTranslates(bigintIn(expression,ImmutableList.of(1L)),subfield,Domain.singleValue(BIGINT,1L));\n  assertPredicateTranslates(bigintIn(expression,ImmutableList.of(1L,2L)),subfield,Domain.create(ValueSet.ofRanges(Range.equal(BIGINT,1L),Range.equal(BIGINT,2L)),false));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 134,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1010,
        "startLineNumber" : 137,
        "startColumnNumber" : 8,
        "endLineNumber" : 150,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Map.Entry<String,RowExpression> entry : expressions.entrySet()) {\n  String subfield=entry.getKey();\n  RowExpression expression=entry.getValue();\n  assertPredicateTranslates(greaterThan(expression,bigintLiteral(2L)),subfield,Domain.create(ValueSet.ofRanges(Range.greaterThan(BIGINT,2L)),false));\n  assertPredicateTranslates(equal(expression,bigintLiteral(2L)),subfield,Domain.create(ValueSet.ofRanges(Range.equal(BIGINT,2L)),false));\n  assertPredicateTranslates(between(expression,bigintLiteral(1L),bigintLiteral(2L)),subfield,Domain.create(ValueSet.ofRanges(Range.range(BIGINT,1L,true,2L,true)),false));\n  assertPredicateTranslates(bigintIn(expression,ImmutableList.of(1L)),subfield,Domain.singleValue(BIGINT,1L));\n  assertPredicateTranslates(bigintIn(expression,ImmutableList.of(1L,2L)),subfield,Domain.create(ValueSet.ofRanges(Range.equal(BIGINT,1L),Range.equal(BIGINT,2L)),false));\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 149,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2988,
        "startLineNumber" : 124,
        "startColumnNumber" : 4,
        "endLineNumber" : 161,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,RowExpression> expressions=ImmutableMap.<String,RowExpression>builder().put(\"c_bigint\",C_BIGINT).put(\"c_bigint_array[5]\",arraySubscript(C_BIGINT_ARRAY,5)).put(\"c_bigint_to_bigint_map[5]\",mapSubscript(C_BIGINT_TO_BIGINT_MAP,constant(5L,BIGINT))).put(\"c_varchar_to_bigint_map[\\\"foo\\\"]\",mapSubscript(C_VARCHAR_TO_BIGINT_MAP,constant(Slices.utf8Slice(\"foo\"),VARCHAR))).put(\"c_struct.a\",dereference(C_STRUCT,0)).put(\"c_struct.b.x\",dereference(dereference(C_STRUCT,1),0)).put(\"c_struct.c[5]\",arraySubscript(dereference(C_STRUCT,2),5)).put(\"c_struct.d[5]\",mapSubscript(dereference(C_STRUCT,3),constant(5L,BIGINT))).put(\"c_struct.e[\\\"foo\\\"]\",mapSubscript(dereference(C_STRUCT,4),constant(Slices.utf8Slice(\"foo\"),VARCHAR))).build();\n  for (  Map.Entry<String,RowExpression> entry : expressions.entrySet()) {\n    String subfield=entry.getKey();\n    RowExpression expression=entry.getValue();\n    assertPredicateTranslates(greaterThan(expression,bigintLiteral(2L)),subfield,Domain.create(ValueSet.ofRanges(Range.greaterThan(BIGINT,2L)),false));\n    assertPredicateTranslates(equal(expression,bigintLiteral(2L)),subfield,Domain.create(ValueSet.ofRanges(Range.equal(BIGINT,2L)),false));\n    assertPredicateTranslates(between(expression,bigintLiteral(1L),bigintLiteral(2L)),subfield,Domain.create(ValueSet.ofRanges(Range.range(BIGINT,1L,true,2L,true)),false));\n    assertPredicateTranslates(bigintIn(expression,ImmutableList.of(1L)),subfield,Domain.singleValue(BIGINT,1L));\n    assertPredicateTranslates(bigintIn(expression,ImmutableList.of(1L,2L)),subfield,Domain.create(ValueSet.ofRanges(Range.equal(BIGINT,1L),Range.equal(BIGINT,2L)),false));\n  }\n  Type arrayType=C_BIGINT_ARRAY.getType();\n  assertPredicateTranslates(isNull(C_BIGINT_ARRAY),C_BIGINT_ARRAY.getName(),Domain.create(ValueSet.none(arrayType),true));\n  assertPredicateTranslates(not(isNull(C_BIGINT_ARRAY)),C_BIGINT_ARRAY.getName(),Domain.create(ValueSet.all(arrayType),false));\n  assertPredicateDoesNotTranslate(equal(C_BIGINT_ARRAY,createConstantExpression(createArrayBigintBlock(ImmutableList.of(ImmutableList.of(1L,2L,3L))),arrayType)));\n  MapType mapType=(MapType)C_BIGINT_TO_BIGINT_MAP.getType();\n  assertPredicateTranslates(isNull(C_BIGINT_TO_BIGINT_MAP),C_BIGINT_TO_BIGINT_MAP.getName(),Domain.create(ValueSet.none(mapType),true));\n  assertPredicateTranslates(not(isNull(C_BIGINT_TO_BIGINT_MAP)),C_BIGINT_TO_BIGINT_MAP.getName(),Domain.create(ValueSet.all(mapType),false));\n  assertPredicateDoesNotTranslate(equal(C_BIGINT_TO_BIGINT_MAP,createConstantExpression(createMapBlock(mapType,ImmutableMap.of(1,100)),mapType)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 387,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3030,
        "startLineNumber" : 122,
        "startColumnNumber" : 4,
        "endLineNumber" : 161,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSubfields(){\n  Map<String,RowExpression> expressions=ImmutableMap.<String,RowExpression>builder().put(\"c_bigint\",C_BIGINT).put(\"c_bigint_array[5]\",arraySubscript(C_BIGINT_ARRAY,5)).put(\"c_bigint_to_bigint_map[5]\",mapSubscript(C_BIGINT_TO_BIGINT_MAP,constant(5L,BIGINT))).put(\"c_varchar_to_bigint_map[\\\"foo\\\"]\",mapSubscript(C_VARCHAR_TO_BIGINT_MAP,constant(Slices.utf8Slice(\"foo\"),VARCHAR))).put(\"c_struct.a\",dereference(C_STRUCT,0)).put(\"c_struct.b.x\",dereference(dereference(C_STRUCT,1),0)).put(\"c_struct.c[5]\",arraySubscript(dereference(C_STRUCT,2),5)).put(\"c_struct.d[5]\",mapSubscript(dereference(C_STRUCT,3),constant(5L,BIGINT))).put(\"c_struct.e[\\\"foo\\\"]\",mapSubscript(dereference(C_STRUCT,4),constant(Slices.utf8Slice(\"foo\"),VARCHAR))).build();\n  for (  Map.Entry<String,RowExpression> entry : expressions.entrySet()) {\n    String subfield=entry.getKey();\n    RowExpression expression=entry.getValue();\n    assertPredicateTranslates(greaterThan(expression,bigintLiteral(2L)),subfield,Domain.create(ValueSet.ofRanges(Range.greaterThan(BIGINT,2L)),false));\n    assertPredicateTranslates(equal(expression,bigintLiteral(2L)),subfield,Domain.create(ValueSet.ofRanges(Range.equal(BIGINT,2L)),false));\n    assertPredicateTranslates(between(expression,bigintLiteral(1L),bigintLiteral(2L)),subfield,Domain.create(ValueSet.ofRanges(Range.range(BIGINT,1L,true,2L,true)),false));\n    assertPredicateTranslates(bigintIn(expression,ImmutableList.of(1L)),subfield,Domain.singleValue(BIGINT,1L));\n    assertPredicateTranslates(bigintIn(expression,ImmutableList.of(1L,2L)),subfield,Domain.create(ValueSet.ofRanges(Range.equal(BIGINT,1L),Range.equal(BIGINT,2L)),false));\n  }\n  Type arrayType=C_BIGINT_ARRAY.getType();\n  assertPredicateTranslates(isNull(C_BIGINT_ARRAY),C_BIGINT_ARRAY.getName(),Domain.create(ValueSet.none(arrayType),true));\n  assertPredicateTranslates(not(isNull(C_BIGINT_ARRAY)),C_BIGINT_ARRAY.getName(),Domain.create(ValueSet.all(arrayType),false));\n  assertPredicateDoesNotTranslate(equal(C_BIGINT_ARRAY,createConstantExpression(createArrayBigintBlock(ImmutableList.of(ImmutableList.of(1L,2L,3L))),arrayType)));\n  MapType mapType=(MapType)C_BIGINT_TO_BIGINT_MAP.getType();\n  assertPredicateTranslates(isNull(C_BIGINT_TO_BIGINT_MAP),C_BIGINT_TO_BIGINT_MAP.getName(),Domain.create(ValueSet.none(mapType),true));\n  assertPredicateTranslates(not(isNull(C_BIGINT_TO_BIGINT_MAP)),C_BIGINT_TO_BIGINT_MAP.getName(),Domain.create(ValueSet.all(mapType),false));\n  assertPredicateDoesNotTranslate(equal(C_BIGINT_TO_BIGINT_MAP,createConstantExpression(createMapBlock(mapType,ImmutableMap.of(1,100)),mapType)));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 393,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 152,
        "startLineNumber" : 141,
        "startColumnNumber" : 12,
        "endLineNumber" : 141,
        "endColumnNumber" : 164
      },
      "nodeContext" : "assertPredicateTranslates(greaterThan(expression,bigintLiteral(2L)),subfield,Domain.create(ValueSet.ofRanges(Range.greaterThan(BIGINT,2L)),false));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    },
    "tokenLength" : 6,
    "type" : "com.facebook.presto.common.predicate.ValueSet"
  } ],
  "positionList" : [ {
    "charLength" : 48,
    "startLineNumber" : 141,
    "startColumnNumber" : 106,
    "endLineNumber" : 141,
    "endColumnNumber" : 154
  } ],
  "layoutRelationDataList" : [ ]
}