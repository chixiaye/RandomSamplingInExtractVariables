{
  "id" : 278,
  "expression" : "tableInfoList",
  "projectName" : "baomidou@mybatis-plus",
  "commitID" : "7815611a659da4cc8d5443f5ef4c10ca0d937582",
  "filePath" : "/mybatis-plus-generate/src/main/java/com/baomidou/mybatisplus/generator/engine/AbstractTemplateEngine.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "tableInfoList",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 76,
      "startColumnNumber" : 39,
      "endLineNumber" : 76,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4240,
        "startLineNumber" : 76,
        "startColumnNumber" : 12,
        "endLineNumber" : 137,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (TableInfo tableInfo : tableInfoList) {\n  Map<String,Object> objectMap=this.getObjectMap(tableInfo);\n  Map<String,String> pathInfo=this.getConfigBuilder().getPathInfo();\n  TemplateConfig template=this.getConfigBuilder().getTemplate();\n  InjectionConfig injectionConfig=this.getConfigBuilder().getInjectionConfig();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    objectMap.put(\"cfg\",injectionConfig.getMap());\n    List<FileOutConfig> focList=injectionConfig.getFileOutConfigList();\n    if (CollectionUtils.isNotEmpty(focList)) {\n      for (      FileOutConfig foc : focList) {\n        if (this.isCreate(foc.outputFile(tableInfo))) {\n          this.writer(objectMap,foc.getTemplatePath(),foc.outputFile(tableInfo));\n        }\n      }\n    }\n  }\n  String entityName=tableInfo.getEntityName();\n  if (null != entityName && null != pathInfo.get(ConstVal.ENTITY_PATH)) {\n    String entityFile=String.format((pathInfo.get(ConstVal.ENTITY_PATH) + File.separator + \"%s\"+ this.suffixJavaOrKt()),entityName);\n    if (this.isCreate(entityFile)) {\n      this.writer(objectMap,this.templateFilePath(template.getEntity(this.getConfigBuilder().getGlobalConfig().isKotlin())),entityFile);\n    }\n  }\n  if (null != tableInfo.getMapperName() && null != pathInfo.get(ConstVal.MAPPER_PATH)) {\n    String mapperFile=String.format((pathInfo.get(ConstVal.MAPPER_PATH) + File.separator + tableInfo.getMapperName()+ this.suffixJavaOrKt()),entityName);\n    if (this.isCreate(mapperFile)) {\n      this.writer(objectMap,this.templateFilePath(template.getMapper()),mapperFile);\n    }\n  }\n  if (null != tableInfo.getXmlName() && null != pathInfo.get(ConstVal.XML_PATH)) {\n    String xmlFile=String.format((pathInfo.get(ConstVal.XML_PATH) + File.separator + tableInfo.getXmlName()+ ConstVal.XML_SUFFIX),entityName);\n    if (this.isCreate(xmlFile)) {\n      this.writer(objectMap,this.templateFilePath(template.getXml()),xmlFile);\n    }\n  }\n  if (null != tableInfo.getServiceName() && null != pathInfo.get(ConstVal.SERIVCE_PATH)) {\n    String serviceFile=String.format((pathInfo.get(ConstVal.SERIVCE_PATH) + File.separator + tableInfo.getServiceName()+ this.suffixJavaOrKt()),entityName);\n    if (this.isCreate(serviceFile)) {\n      this.writer(objectMap,this.templateFilePath(template.getService()),serviceFile);\n    }\n  }\n  if (null != tableInfo.getServiceImplName() && null != pathInfo.get(ConstVal.SERVICEIMPL_PATH)) {\n    String implFile=String.format((pathInfo.get(ConstVal.SERVICEIMPL_PATH) + File.separator + tableInfo.getServiceImplName()+ this.suffixJavaOrKt()),entityName);\n    if (this.isCreate(implFile)) {\n      this.writer(objectMap,this.templateFilePath(template.getServiceImpl()),implFile);\n    }\n  }\n  if (null != tableInfo.getControllerName() && null != pathInfo.get(ConstVal.CONTROLLER_PATH)) {\n    String controllerFile=String.format((pathInfo.get(ConstVal.CONTROLLER_PATH) + File.separator + tableInfo.getControllerName()+ this.suffixJavaOrKt()),entityName);\n    if (this.isCreate(controllerFile)) {\n      this.writer(objectMap,this.templateFilePath(template.getController()),controllerFile);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 489,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4352,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 138,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  List<TableInfo> tableInfoList=this.getConfigBuilder().getTableInfoList();\n  for (  TableInfo tableInfo : tableInfoList) {\n    Map<String,Object> objectMap=this.getObjectMap(tableInfo);\n    Map<String,String> pathInfo=this.getConfigBuilder().getPathInfo();\n    TemplateConfig template=this.getConfigBuilder().getTemplate();\n    InjectionConfig injectionConfig=this.getConfigBuilder().getInjectionConfig();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      objectMap.put(\"cfg\",injectionConfig.getMap());\n      List<FileOutConfig> focList=injectionConfig.getFileOutConfigList();\n      if (CollectionUtils.isNotEmpty(focList)) {\n        for (        FileOutConfig foc : focList) {\n          if (this.isCreate(foc.outputFile(tableInfo))) {\n            this.writer(objectMap,foc.getTemplatePath(),foc.outputFile(tableInfo));\n          }\n        }\n      }\n    }\n    String entityName=tableInfo.getEntityName();\n    if (null != entityName && null != pathInfo.get(ConstVal.ENTITY_PATH)) {\n      String entityFile=String.format((pathInfo.get(ConstVal.ENTITY_PATH) + File.separator + \"%s\"+ this.suffixJavaOrKt()),entityName);\n      if (this.isCreate(entityFile)) {\n        this.writer(objectMap,this.templateFilePath(template.getEntity(this.getConfigBuilder().getGlobalConfig().isKotlin())),entityFile);\n      }\n    }\n    if (null != tableInfo.getMapperName() && null != pathInfo.get(ConstVal.MAPPER_PATH)) {\n      String mapperFile=String.format((pathInfo.get(ConstVal.MAPPER_PATH) + File.separator + tableInfo.getMapperName()+ this.suffixJavaOrKt()),entityName);\n      if (this.isCreate(mapperFile)) {\n        this.writer(objectMap,this.templateFilePath(template.getMapper()),mapperFile);\n      }\n    }\n    if (null != tableInfo.getXmlName() && null != pathInfo.get(ConstVal.XML_PATH)) {\n      String xmlFile=String.format((pathInfo.get(ConstVal.XML_PATH) + File.separator + tableInfo.getXmlName()+ ConstVal.XML_SUFFIX),entityName);\n      if (this.isCreate(xmlFile)) {\n        this.writer(objectMap,this.templateFilePath(template.getXml()),xmlFile);\n      }\n    }\n    if (null != tableInfo.getServiceName() && null != pathInfo.get(ConstVal.SERIVCE_PATH)) {\n      String serviceFile=String.format((pathInfo.get(ConstVal.SERIVCE_PATH) + File.separator + tableInfo.getServiceName()+ this.suffixJavaOrKt()),entityName);\n      if (this.isCreate(serviceFile)) {\n        this.writer(objectMap,this.templateFilePath(template.getService()),serviceFile);\n      }\n    }\n    if (null != tableInfo.getServiceImplName() && null != pathInfo.get(ConstVal.SERVICEIMPL_PATH)) {\n      String implFile=String.format((pathInfo.get(ConstVal.SERVICEIMPL_PATH) + File.separator + tableInfo.getServiceImplName()+ this.suffixJavaOrKt()),entityName);\n      if (this.isCreate(implFile)) {\n        this.writer(objectMap,this.templateFilePath(template.getServiceImpl()),implFile);\n      }\n    }\n    if (null != tableInfo.getControllerName() && null != pathInfo.get(ConstVal.CONTROLLER_PATH)) {\n      String controllerFile=String.format((pathInfo.get(ConstVal.CONTROLLER_PATH) + File.separator + tableInfo.getControllerName()+ this.suffixJavaOrKt()),entityName);\n      if (this.isCreate(controllerFile)) {\n        this.writer(objectMap,this.templateFilePath(template.getController()),controllerFile);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 503,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4436,
        "startLineNumber" : 74,
        "startColumnNumber" : 8,
        "endLineNumber" : 140,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  List<TableInfo> tableInfoList=this.getConfigBuilder().getTableInfoList();\n  for (  TableInfo tableInfo : tableInfoList) {\n    Map<String,Object> objectMap=this.getObjectMap(tableInfo);\n    Map<String,String> pathInfo=this.getConfigBuilder().getPathInfo();\n    TemplateConfig template=this.getConfigBuilder().getTemplate();\n    InjectionConfig injectionConfig=this.getConfigBuilder().getInjectionConfig();\n    if (null != injectionConfig) {\n      injectionConfig.initMap();\n      objectMap.put(\"cfg\",injectionConfig.getMap());\n      List<FileOutConfig> focList=injectionConfig.getFileOutConfigList();\n      if (CollectionUtils.isNotEmpty(focList)) {\n        for (        FileOutConfig foc : focList) {\n          if (this.isCreate(foc.outputFile(tableInfo))) {\n            this.writer(objectMap,foc.getTemplatePath(),foc.outputFile(tableInfo));\n          }\n        }\n      }\n    }\n    String entityName=tableInfo.getEntityName();\n    if (null != entityName && null != pathInfo.get(ConstVal.ENTITY_PATH)) {\n      String entityFile=String.format((pathInfo.get(ConstVal.ENTITY_PATH) + File.separator + \"%s\"+ this.suffixJavaOrKt()),entityName);\n      if (this.isCreate(entityFile)) {\n        this.writer(objectMap,this.templateFilePath(template.getEntity(this.getConfigBuilder().getGlobalConfig().isKotlin())),entityFile);\n      }\n    }\n    if (null != tableInfo.getMapperName() && null != pathInfo.get(ConstVal.MAPPER_PATH)) {\n      String mapperFile=String.format((pathInfo.get(ConstVal.MAPPER_PATH) + File.separator + tableInfo.getMapperName()+ this.suffixJavaOrKt()),entityName);\n      if (this.isCreate(mapperFile)) {\n        this.writer(objectMap,this.templateFilePath(template.getMapper()),mapperFile);\n      }\n    }\n    if (null != tableInfo.getXmlName() && null != pathInfo.get(ConstVal.XML_PATH)) {\n      String xmlFile=String.format((pathInfo.get(ConstVal.XML_PATH) + File.separator + tableInfo.getXmlName()+ ConstVal.XML_SUFFIX),entityName);\n      if (this.isCreate(xmlFile)) {\n        this.writer(objectMap,this.templateFilePath(template.getXml()),xmlFile);\n      }\n    }\n    if (null != tableInfo.getServiceName() && null != pathInfo.get(ConstVal.SERIVCE_PATH)) {\n      String serviceFile=String.format((pathInfo.get(ConstVal.SERIVCE_PATH) + File.separator + tableInfo.getServiceName()+ this.suffixJavaOrKt()),entityName);\n      if (this.isCreate(serviceFile)) {\n        this.writer(objectMap,this.templateFilePath(template.getService()),serviceFile);\n      }\n    }\n    if (null != tableInfo.getServiceImplName() && null != pathInfo.get(ConstVal.SERVICEIMPL_PATH)) {\n      String implFile=String.format((pathInfo.get(ConstVal.SERVICEIMPL_PATH) + File.separator + tableInfo.getServiceImplName()+ this.suffixJavaOrKt()),entityName);\n      if (this.isCreate(implFile)) {\n        this.writer(objectMap,this.templateFilePath(template.getServiceImpl()),implFile);\n      }\n    }\n    if (null != tableInfo.getControllerName() && null != pathInfo.get(ConstVal.CONTROLLER_PATH)) {\n      String controllerFile=String.format((pathInfo.get(ConstVal.CONTROLLER_PATH) + File.separator + tableInfo.getControllerName()+ this.suffixJavaOrKt()),entityName);\n      if (this.isCreate(controllerFile)) {\n        this.writer(objectMap,this.templateFilePath(template.getController()),controllerFile);\n      }\n    }\n  }\n}\n catch (Exception e) {\n  logger.error(\"无法创建文件，请检查配置信息！\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 516,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4473,
        "startLineNumber" : 73,
        "startColumnNumber" : 48,
        "endLineNumber" : 142,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    List<TableInfo> tableInfoList=this.getConfigBuilder().getTableInfoList();\n    for (    TableInfo tableInfo : tableInfoList) {\n      Map<String,Object> objectMap=this.getObjectMap(tableInfo);\n      Map<String,String> pathInfo=this.getConfigBuilder().getPathInfo();\n      TemplateConfig template=this.getConfigBuilder().getTemplate();\n      InjectionConfig injectionConfig=this.getConfigBuilder().getInjectionConfig();\n      if (null != injectionConfig) {\n        injectionConfig.initMap();\n        objectMap.put(\"cfg\",injectionConfig.getMap());\n        List<FileOutConfig> focList=injectionConfig.getFileOutConfigList();\n        if (CollectionUtils.isNotEmpty(focList)) {\n          for (          FileOutConfig foc : focList) {\n            if (this.isCreate(foc.outputFile(tableInfo))) {\n              this.writer(objectMap,foc.getTemplatePath(),foc.outputFile(tableInfo));\n            }\n          }\n        }\n      }\n      String entityName=tableInfo.getEntityName();\n      if (null != entityName && null != pathInfo.get(ConstVal.ENTITY_PATH)) {\n        String entityFile=String.format((pathInfo.get(ConstVal.ENTITY_PATH) + File.separator + \"%s\"+ this.suffixJavaOrKt()),entityName);\n        if (this.isCreate(entityFile)) {\n          this.writer(objectMap,this.templateFilePath(template.getEntity(this.getConfigBuilder().getGlobalConfig().isKotlin())),entityFile);\n        }\n      }\n      if (null != tableInfo.getMapperName() && null != pathInfo.get(ConstVal.MAPPER_PATH)) {\n        String mapperFile=String.format((pathInfo.get(ConstVal.MAPPER_PATH) + File.separator + tableInfo.getMapperName()+ this.suffixJavaOrKt()),entityName);\n        if (this.isCreate(mapperFile)) {\n          this.writer(objectMap,this.templateFilePath(template.getMapper()),mapperFile);\n        }\n      }\n      if (null != tableInfo.getXmlName() && null != pathInfo.get(ConstVal.XML_PATH)) {\n        String xmlFile=String.format((pathInfo.get(ConstVal.XML_PATH) + File.separator + tableInfo.getXmlName()+ ConstVal.XML_SUFFIX),entityName);\n        if (this.isCreate(xmlFile)) {\n          this.writer(objectMap,this.templateFilePath(template.getXml()),xmlFile);\n        }\n      }\n      if (null != tableInfo.getServiceName() && null != pathInfo.get(ConstVal.SERIVCE_PATH)) {\n        String serviceFile=String.format((pathInfo.get(ConstVal.SERIVCE_PATH) + File.separator + tableInfo.getServiceName()+ this.suffixJavaOrKt()),entityName);\n        if (this.isCreate(serviceFile)) {\n          this.writer(objectMap,this.templateFilePath(template.getService()),serviceFile);\n        }\n      }\n      if (null != tableInfo.getServiceImplName() && null != pathInfo.get(ConstVal.SERVICEIMPL_PATH)) {\n        String implFile=String.format((pathInfo.get(ConstVal.SERVICEIMPL_PATH) + File.separator + tableInfo.getServiceImplName()+ this.suffixJavaOrKt()),entityName);\n        if (this.isCreate(implFile)) {\n          this.writer(objectMap,this.templateFilePath(template.getServiceImpl()),implFile);\n        }\n      }\n      if (null != tableInfo.getControllerName() && null != pathInfo.get(ConstVal.CONTROLLER_PATH)) {\n        String controllerFile=String.format((pathInfo.get(ConstVal.CONTROLLER_PATH) + File.separator + tableInfo.getControllerName()+ this.suffixJavaOrKt()),entityName);\n        if (this.isCreate(controllerFile)) {\n          this.writer(objectMap,this.templateFilePath(template.getController()),controllerFile);\n        }\n      }\n    }\n  }\n catch (  Exception e) {\n    logger.error(\"无法创建文件，请检查配置信息！\",e);\n  }\n  return this;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 519,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4578,
        "startLineNumber" : 68,
        "startColumnNumber" : 4,
        "endLineNumber" : 142,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 输出 java xml 文件 </p>\n */\npublic AbstractTemplateEngine batchOutput(){\n  try {\n    List<TableInfo> tableInfoList=this.getConfigBuilder().getTableInfoList();\n    for (    TableInfo tableInfo : tableInfoList) {\n      Map<String,Object> objectMap=this.getObjectMap(tableInfo);\n      Map<String,String> pathInfo=this.getConfigBuilder().getPathInfo();\n      TemplateConfig template=this.getConfigBuilder().getTemplate();\n      InjectionConfig injectionConfig=this.getConfigBuilder().getInjectionConfig();\n      if (null != injectionConfig) {\n        injectionConfig.initMap();\n        objectMap.put(\"cfg\",injectionConfig.getMap());\n        List<FileOutConfig> focList=injectionConfig.getFileOutConfigList();\n        if (CollectionUtils.isNotEmpty(focList)) {\n          for (          FileOutConfig foc : focList) {\n            if (this.isCreate(foc.outputFile(tableInfo))) {\n              this.writer(objectMap,foc.getTemplatePath(),foc.outputFile(tableInfo));\n            }\n          }\n        }\n      }\n      String entityName=tableInfo.getEntityName();\n      if (null != entityName && null != pathInfo.get(ConstVal.ENTITY_PATH)) {\n        String entityFile=String.format((pathInfo.get(ConstVal.ENTITY_PATH) + File.separator + \"%s\"+ this.suffixJavaOrKt()),entityName);\n        if (this.isCreate(entityFile)) {\n          this.writer(objectMap,this.templateFilePath(template.getEntity(this.getConfigBuilder().getGlobalConfig().isKotlin())),entityFile);\n        }\n      }\n      if (null != tableInfo.getMapperName() && null != pathInfo.get(ConstVal.MAPPER_PATH)) {\n        String mapperFile=String.format((pathInfo.get(ConstVal.MAPPER_PATH) + File.separator + tableInfo.getMapperName()+ this.suffixJavaOrKt()),entityName);\n        if (this.isCreate(mapperFile)) {\n          this.writer(objectMap,this.templateFilePath(template.getMapper()),mapperFile);\n        }\n      }\n      if (null != tableInfo.getXmlName() && null != pathInfo.get(ConstVal.XML_PATH)) {\n        String xmlFile=String.format((pathInfo.get(ConstVal.XML_PATH) + File.separator + tableInfo.getXmlName()+ ConstVal.XML_SUFFIX),entityName);\n        if (this.isCreate(xmlFile)) {\n          this.writer(objectMap,this.templateFilePath(template.getXml()),xmlFile);\n        }\n      }\n      if (null != tableInfo.getServiceName() && null != pathInfo.get(ConstVal.SERIVCE_PATH)) {\n        String serviceFile=String.format((pathInfo.get(ConstVal.SERIVCE_PATH) + File.separator + tableInfo.getServiceName()+ this.suffixJavaOrKt()),entityName);\n        if (this.isCreate(serviceFile)) {\n          this.writer(objectMap,this.templateFilePath(template.getService()),serviceFile);\n        }\n      }\n      if (null != tableInfo.getServiceImplName() && null != pathInfo.get(ConstVal.SERVICEIMPL_PATH)) {\n        String implFile=String.format((pathInfo.get(ConstVal.SERVICEIMPL_PATH) + File.separator + tableInfo.getServiceImplName()+ this.suffixJavaOrKt()),entityName);\n        if (this.isCreate(implFile)) {\n          this.writer(objectMap,this.templateFilePath(template.getServiceImpl()),implFile);\n        }\n      }\n      if (null != tableInfo.getControllerName() && null != pathInfo.get(ConstVal.CONTROLLER_PATH)) {\n        String controllerFile=String.format((pathInfo.get(ConstVal.CONTROLLER_PATH) + File.separator + tableInfo.getControllerName()+ this.suffixJavaOrKt()),entityName);\n        if (this.isCreate(controllerFile)) {\n          this.writer(objectMap,this.templateFilePath(template.getController()),controllerFile);\n        }\n      }\n    }\n  }\n catch (  Exception e) {\n    logger.error(\"无法创建文件，请检查配置信息！\",e);\n  }\n  return this;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 525,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4240,
        "startLineNumber" : 76,
        "startColumnNumber" : 12,
        "endLineNumber" : 137,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (TableInfo tableInfo : tableInfoList) {\n  Map<String,Object> objectMap=this.getObjectMap(tableInfo);\n  Map<String,String> pathInfo=this.getConfigBuilder().getPathInfo();\n  TemplateConfig template=this.getConfigBuilder().getTemplate();\n  InjectionConfig injectionConfig=this.getConfigBuilder().getInjectionConfig();\n  if (null != injectionConfig) {\n    injectionConfig.initMap();\n    objectMap.put(\"cfg\",injectionConfig.getMap());\n    List<FileOutConfig> focList=injectionConfig.getFileOutConfigList();\n    if (CollectionUtils.isNotEmpty(focList)) {\n      for (      FileOutConfig foc : focList) {\n        if (this.isCreate(foc.outputFile(tableInfo))) {\n          this.writer(objectMap,foc.getTemplatePath(),foc.outputFile(tableInfo));\n        }\n      }\n    }\n  }\n  String entityName=tableInfo.getEntityName();\n  if (null != entityName && null != pathInfo.get(ConstVal.ENTITY_PATH)) {\n    String entityFile=String.format((pathInfo.get(ConstVal.ENTITY_PATH) + File.separator + \"%s\"+ this.suffixJavaOrKt()),entityName);\n    if (this.isCreate(entityFile)) {\n      this.writer(objectMap,this.templateFilePath(template.getEntity(this.getConfigBuilder().getGlobalConfig().isKotlin())),entityFile);\n    }\n  }\n  if (null != tableInfo.getMapperName() && null != pathInfo.get(ConstVal.MAPPER_PATH)) {\n    String mapperFile=String.format((pathInfo.get(ConstVal.MAPPER_PATH) + File.separator + tableInfo.getMapperName()+ this.suffixJavaOrKt()),entityName);\n    if (this.isCreate(mapperFile)) {\n      this.writer(objectMap,this.templateFilePath(template.getMapper()),mapperFile);\n    }\n  }\n  if (null != tableInfo.getXmlName() && null != pathInfo.get(ConstVal.XML_PATH)) {\n    String xmlFile=String.format((pathInfo.get(ConstVal.XML_PATH) + File.separator + tableInfo.getXmlName()+ ConstVal.XML_SUFFIX),entityName);\n    if (this.isCreate(xmlFile)) {\n      this.writer(objectMap,this.templateFilePath(template.getXml()),xmlFile);\n    }\n  }\n  if (null != tableInfo.getServiceName() && null != pathInfo.get(ConstVal.SERIVCE_PATH)) {\n    String serviceFile=String.format((pathInfo.get(ConstVal.SERIVCE_PATH) + File.separator + tableInfo.getServiceName()+ this.suffixJavaOrKt()),entityName);\n    if (this.isCreate(serviceFile)) {\n      this.writer(objectMap,this.templateFilePath(template.getService()),serviceFile);\n    }\n  }\n  if (null != tableInfo.getServiceImplName() && null != pathInfo.get(ConstVal.SERVICEIMPL_PATH)) {\n    String implFile=String.format((pathInfo.get(ConstVal.SERVICEIMPL_PATH) + File.separator + tableInfo.getServiceImplName()+ this.suffixJavaOrKt()),entityName);\n    if (this.isCreate(implFile)) {\n      this.writer(objectMap,this.templateFilePath(template.getServiceImpl()),implFile);\n    }\n  }\n  if (null != tableInfo.getControllerName() && null != pathInfo.get(ConstVal.CONTROLLER_PATH)) {\n    String controllerFile=String.format((pathInfo.get(ConstVal.CONTROLLER_PATH) + File.separator + tableInfo.getControllerName()+ this.suffixJavaOrKt()),entityName);\n    if (this.isCreate(controllerFile)) {\n      this.writer(objectMap,this.templateFilePath(template.getController()),controllerFile);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 489,
      "astHeight" : 14
    },
    "tokenLength" : 1,
    "type" : "java.util.List<com.baomidou.mybatisplus.generator.config.po.TableInfo>"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 76,
    "startColumnNumber" : 39,
    "endLineNumber" : 76,
    "endColumnNumber" : 52
  } ],
  "layoutRelationDataList" : [ ]
}