{
  "id" : 195,
  "expression" : "RegistrationChannelMetrics.class",
  "projectName" : "Netflix@eureka",
  "commitID" : "2f6d04dae7f6fca2a17e85fc53020e13272a79b2",
  "filePath" : "/eureka-client/src/test/java/com/netflix/eureka2/client/channel/RegistrationChannelTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "RegistrationChannelMetrics.class",
    "nodeType" : "TypeLiteral",
    "nodePosition" : {
      "charLength" : 32,
      "startLineNumber" : 53,
      "startColumnNumber" : 68,
      "endLineNumber" : 53,
      "endColumnNumber" : 100
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 53,
        "startColumnNumber" : 63,
        "endLineNumber" : 53,
        "endColumnNumber" : 101
      },
      "nodeContext" : "mock(RegistrationChannelMetrics.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 53,
        "startColumnNumber" : 18,
        "endLineNumber" : 53,
        "endColumnNumber" : 102
      },
      "nodeContext" : "new RegistrationChannelImpl(transportClient,mock(RegistrationChannelMetrics.class))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 53,
        "startColumnNumber" : 8,
        "endLineNumber" : 53,
        "endColumnNumber" : 102
      },
      "nodeContext" : "channel=new RegistrationChannelImpl(transportClient,mock(RegistrationChannelMetrics.class))",
      "nodeType" : "Assignment",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 53,
        "startColumnNumber" : 8,
        "endLineNumber" : 53,
        "endColumnNumber" : 103
      },
      "nodeContext" : "channel=new RegistrationChannelImpl(transportClient,mock(RegistrationChannelMetrics.class));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 716,
        "startLineNumber" : 40,
        "startColumnNumber" : 24,
        "endLineNumber" : 54,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  InstanceInfo.Builder seed=new InstanceInfo.Builder().withId(\"id\").withApp(\"app\");\n  register=seed.withStatus(InstanceInfo.Status.STARTING).build();\n  update1=seed.withStatus(InstanceInfo.Status.UP).build();\n  update2=seed.withStatus(InstanceInfo.Status.DOWN).build();\n  messageConnection=mock(MessageConnection.class);\n  when(messageConnection.submitWithAck(anyObject())).thenReturn(Observable.<Void>empty());\n  transportClient=mock(TransportClient.class);\n  when(transportClient.connect()).thenReturn(Observable.just(messageConnection));\n  channel=new RegistrationChannelImpl(transportClient,mock(RegistrationChannelMetrics.class));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 113,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 748,
        "startLineNumber" : 39,
        "startColumnNumber" : 4,
        "endLineNumber" : 54,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Before public void setUp(){\n  InstanceInfo.Builder seed=new InstanceInfo.Builder().withId(\"id\").withApp(\"app\");\n  register=seed.withStatus(InstanceInfo.Status.STARTING).build();\n  update1=seed.withStatus(InstanceInfo.Status.UP).build();\n  update2=seed.withStatus(InstanceInfo.Status.DOWN).build();\n  messageConnection=mock(MessageConnection.class);\n  when(messageConnection.submitWithAck(anyObject())).thenReturn(Observable.<Void>empty());\n  transportClient=mock(TransportClient.class);\n  when(transportClient.connect()).thenReturn(Observable.just(messageConnection));\n  channel=new RegistrationChannelImpl(transportClient,mock(RegistrationChannelMetrics.class));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 119,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 53,
        "startColumnNumber" : 8,
        "endLineNumber" : 53,
        "endColumnNumber" : 103
      },
      "nodeContext" : "channel=new RegistrationChannelImpl(transportClient,mock(RegistrationChannelMetrics.class));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<com.netflix.eureka2.client.metric.RegistrationChannelMetrics>"
  } ],
  "positionList" : [ {
    "charLength" : 32,
    "startLineNumber" : 53,
    "startColumnNumber" : 68,
    "endLineNumber" : 53,
    "endColumnNumber" : 100
  } ],
  "layoutRelationDataList" : [ ]
}