{
  "id" : 281,
  "expression" : "received",
  "projectName" : "jenkinsci@jenkins",
  "commitID" : "c44fa7f4cf769257844d562353a579a198ea517a",
  "filePath" : "/test/src/test/java/jenkins/telemetry/MissingClassTelemetryTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "received",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 97,
      "startColumnNumber" : 17,
      "endLineNumber" : 97,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.DoStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 97,
        "startColumnNumber" : 17,
        "endLineNumber" : 97,
        "endColumnNumber" : 33
      },
      "nodeContext" : "received == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 97,
        "endColumnNumber" : 35
      },
      "nodeContext" : "do {\n  Thread.sleep(250);\n}\n while (received == null);\n",
      "nodeType" : "DoStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1380,
        "startLineNumber" : 81,
        "startColumnNumber" : 65,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Assume.assumeTrue(\"The telemetry should be enabled\",MissingClassTelemetry.enabled());\n  Assume.assumeTrue(\"The telemetry shouldn't be ended\",Telemetry.all().get(MissingClassTelemetry.class).getEnd().isAfter(LocalDate.now()));\n  for (int i=0; i < 5; i++) {\n    try {\n      cl.loadClass(\"sun.java.MyNonExistentClass\");\n    }\n catch (    ClassNotFoundException ignored) {\n    }\n  }\n  ExtensionList.lookupSingleton(Telemetry.TelemetryReporter.class).doRun();\n  do {\n    Thread.sleep(250);\n  }\n while (received == null);\n  assertEquals(MissingClassTelemetry.class.getName(),received.getString(\"type\"));\n  JSONArray events=received.getJSONObject(\"payload\").getJSONArray(\"classMissingEvents\");\n  assertEquals(1,events.size());\n  assertEquals(\"sun.java.MyNonExistentClass\",((JSONObject)events.get(0)).get(\"className\"));\n  assertEquals(5,Integer.parseInt((String)((JSONObject)events.get(0)).get(\"occurrences\")));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 142,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1699,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Test if the telemetry sent works and the received data is the expected for a specific case (5 occurrences of the same stack trace).\n * @throws InterruptedException if the thread is interrupted while sleeping\n */\n@Test public void telemetrySentWorks() throws InterruptedException {\n  Assume.assumeTrue(\"The telemetry should be enabled\",MissingClassTelemetry.enabled());\n  Assume.assumeTrue(\"The telemetry shouldn't be ended\",Telemetry.all().get(MissingClassTelemetry.class).getEnd().isAfter(LocalDate.now()));\n  for (int i=0; i < 5; i++) {\n    try {\n      cl.loadClass(\"sun.java.MyNonExistentClass\");\n    }\n catch (    ClassNotFoundException ignored) {\n    }\n  }\n  ExtensionList.lookupSingleton(Telemetry.TelemetryReporter.class).doRun();\n  do {\n    Thread.sleep(250);\n  }\n while (received == null);\n  assertEquals(MissingClassTelemetry.class.getName(),received.getString(\"type\"));\n  JSONArray events=received.getJSONObject(\"payload\").getJSONArray(\"classMissingEvents\");\n  assertEquals(1,events.size());\n  assertEquals(\"sun.java.MyNonExistentClass\",((JSONObject)events.get(0)).get(\"className\"));\n  assertEquals(5,Integer.parseInt((String)((JSONObject)events.get(0)).get(\"occurrences\")));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 151,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.DoStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 97,
        "startColumnNumber" : 17,
        "endLineNumber" : 97,
        "endColumnNumber" : 33
      },
      "nodeContext" : "received == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "jenkins.telemetry.JSONObject"
  }, {
    "nodeContext" : "received",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 102,
      "startColumnNumber" : 60,
      "endLineNumber" : 102,
      "endColumnNumber" : 68
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 102,
        "startColumnNumber" : 60,
        "endLineNumber" : 102,
        "endColumnNumber" : 86
      },
      "nodeContext" : "received.getString(\"type\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 102,
        "startColumnNumber" : 8,
        "endLineNumber" : 102,
        "endColumnNumber" : 87
      },
      "nodeContext" : "assertEquals(MissingClassTelemetry.class.getName(),received.getString(\"type\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 102,
        "startColumnNumber" : 8,
        "endLineNumber" : 102,
        "endColumnNumber" : 88
      },
      "nodeContext" : "assertEquals(MissingClassTelemetry.class.getName(),received.getString(\"type\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1380,
        "startLineNumber" : 81,
        "startColumnNumber" : 65,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Assume.assumeTrue(\"The telemetry should be enabled\",MissingClassTelemetry.enabled());\n  Assume.assumeTrue(\"The telemetry shouldn't be ended\",Telemetry.all().get(MissingClassTelemetry.class).getEnd().isAfter(LocalDate.now()));\n  for (int i=0; i < 5; i++) {\n    try {\n      cl.loadClass(\"sun.java.MyNonExistentClass\");\n    }\n catch (    ClassNotFoundException ignored) {\n    }\n  }\n  ExtensionList.lookupSingleton(Telemetry.TelemetryReporter.class).doRun();\n  do {\n    Thread.sleep(250);\n  }\n while (received == null);\n  assertEquals(MissingClassTelemetry.class.getName(),received.getString(\"type\"));\n  JSONArray events=received.getJSONObject(\"payload\").getJSONArray(\"classMissingEvents\");\n  assertEquals(1,events.size());\n  assertEquals(\"sun.java.MyNonExistentClass\",((JSONObject)events.get(0)).get(\"className\"));\n  assertEquals(5,Integer.parseInt((String)((JSONObject)events.get(0)).get(\"occurrences\")));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 142,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1699,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Test if the telemetry sent works and the received data is the expected for a specific case (5 occurrences of the same stack trace).\n * @throws InterruptedException if the thread is interrupted while sleeping\n */\n@Test public void telemetrySentWorks() throws InterruptedException {\n  Assume.assumeTrue(\"The telemetry should be enabled\",MissingClassTelemetry.enabled());\n  Assume.assumeTrue(\"The telemetry shouldn't be ended\",Telemetry.all().get(MissingClassTelemetry.class).getEnd().isAfter(LocalDate.now()));\n  for (int i=0; i < 5; i++) {\n    try {\n      cl.loadClass(\"sun.java.MyNonExistentClass\");\n    }\n catch (    ClassNotFoundException ignored) {\n    }\n  }\n  ExtensionList.lookupSingleton(Telemetry.TelemetryReporter.class).doRun();\n  do {\n    Thread.sleep(250);\n  }\n while (received == null);\n  assertEquals(MissingClassTelemetry.class.getName(),received.getString(\"type\"));\n  JSONArray events=received.getJSONObject(\"payload\").getJSONArray(\"classMissingEvents\");\n  assertEquals(1,events.size());\n  assertEquals(\"sun.java.MyNonExistentClass\",((JSONObject)events.get(0)).get(\"className\"));\n  assertEquals(5,Integer.parseInt((String)((JSONObject)events.get(0)).get(\"occurrences\")));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 151,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 102,
        "startColumnNumber" : 8,
        "endLineNumber" : 102,
        "endColumnNumber" : 88
      },
      "nodeContext" : "assertEquals(MissingClassTelemetry.class.getName(),received.getString(\"type\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "jenkins.telemetry.JSONObject"
  }, {
    "nodeContext" : "received",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 103,
      "startColumnNumber" : 27,
      "endLineNumber" : 103,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 103,
        "startColumnNumber" : 27,
        "endLineNumber" : 103,
        "endColumnNumber" : 60
      },
      "nodeContext" : "received.getJSONObject(\"payload\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 103,
        "startColumnNumber" : 27,
        "endLineNumber" : 103,
        "endColumnNumber" : 95
      },
      "nodeContext" : "received.getJSONObject(\"payload\").getJSONArray(\"classMissingEvents\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 103,
        "startColumnNumber" : 18,
        "endLineNumber" : 103,
        "endColumnNumber" : 95
      },
      "nodeContext" : "events=received.getJSONObject(\"payload\").getJSONArray(\"classMissingEvents\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 103,
        "startColumnNumber" : 8,
        "endLineNumber" : 103,
        "endColumnNumber" : 96
      },
      "nodeContext" : "JSONArray events=received.getJSONObject(\"payload\").getJSONArray(\"classMissingEvents\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1380,
        "startLineNumber" : 81,
        "startColumnNumber" : 65,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Assume.assumeTrue(\"The telemetry should be enabled\",MissingClassTelemetry.enabled());\n  Assume.assumeTrue(\"The telemetry shouldn't be ended\",Telemetry.all().get(MissingClassTelemetry.class).getEnd().isAfter(LocalDate.now()));\n  for (int i=0; i < 5; i++) {\n    try {\n      cl.loadClass(\"sun.java.MyNonExistentClass\");\n    }\n catch (    ClassNotFoundException ignored) {\n    }\n  }\n  ExtensionList.lookupSingleton(Telemetry.TelemetryReporter.class).doRun();\n  do {\n    Thread.sleep(250);\n  }\n while (received == null);\n  assertEquals(MissingClassTelemetry.class.getName(),received.getString(\"type\"));\n  JSONArray events=received.getJSONObject(\"payload\").getJSONArray(\"classMissingEvents\");\n  assertEquals(1,events.size());\n  assertEquals(\"sun.java.MyNonExistentClass\",((JSONObject)events.get(0)).get(\"className\"));\n  assertEquals(5,Integer.parseInt((String)((JSONObject)events.get(0)).get(\"occurrences\")));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 142,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1699,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Test if the telemetry sent works and the received data is the expected for a specific case (5 occurrences of the same stack trace).\n * @throws InterruptedException if the thread is interrupted while sleeping\n */\n@Test public void telemetrySentWorks() throws InterruptedException {\n  Assume.assumeTrue(\"The telemetry should be enabled\",MissingClassTelemetry.enabled());\n  Assume.assumeTrue(\"The telemetry shouldn't be ended\",Telemetry.all().get(MissingClassTelemetry.class).getEnd().isAfter(LocalDate.now()));\n  for (int i=0; i < 5; i++) {\n    try {\n      cl.loadClass(\"sun.java.MyNonExistentClass\");\n    }\n catch (    ClassNotFoundException ignored) {\n    }\n  }\n  ExtensionList.lookupSingleton(Telemetry.TelemetryReporter.class).doRun();\n  do {\n    Thread.sleep(250);\n  }\n while (received == null);\n  assertEquals(MissingClassTelemetry.class.getName(),received.getString(\"type\"));\n  JSONArray events=received.getJSONObject(\"payload\").getJSONArray(\"classMissingEvents\");\n  assertEquals(1,events.size());\n  assertEquals(\"sun.java.MyNonExistentClass\",((JSONObject)events.get(0)).get(\"className\"));\n  assertEquals(5,Integer.parseInt((String)((JSONObject)events.get(0)).get(\"occurrences\")));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 151,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 103,
        "startColumnNumber" : 8,
        "endLineNumber" : 103,
        "endColumnNumber" : 96
      },
      "nodeContext" : "JSONArray events=received.getJSONObject(\"payload\").getJSONArray(\"classMissingEvents\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "jenkins.telemetry.JSONObject"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 97,
    "startColumnNumber" : 17,
    "endLineNumber" : 97,
    "endColumnNumber" : 25
  }, {
    "charLength" : 8,
    "startLineNumber" : 102,
    "startColumnNumber" : 60,
    "endLineNumber" : 102,
    "endColumnNumber" : 68
  }, {
    "charLength" : 8,
    "startLineNumber" : 103,
    "startColumnNumber" : 27,
    "endLineNumber" : 103,
    "endColumnNumber" : 35
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  } ]
}