{
  "id" : 451,
  "expression" : "\"ws/**/*.key\"",
  "projectName" : "jenkinsci@jenkins",
  "commitID" : "c44fa7f4cf769257844d562353a579a198ea517a",
  "filePath" : "/test/src/test/java/hudson/model/DirectoryBrowserSupportTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"ws/**/*.key\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 512,
      "startColumnNumber" : 45,
      "endLineNumber" : 512,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 512,
        "startColumnNumber" : 32,
        "endLineNumber" : 512,
        "endColumnNumber" : 58
      },
      "nodeContext" : "p.getUrl() + \"ws/**/*.key\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 512,
        "startColumnNumber" : 24,
        "endLineNumber" : 512,
        "endColumnNumber" : 65
      },
      "nodeContext" : "wc.goTo(p.getUrl() + \"ws/**/*.key\",null)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 512,
        "startColumnNumber" : 17,
        "endLineNumber" : 512,
        "endColumnNumber" : 65
      },
      "nodeContext" : "page=wc.goTo(p.getUrl() + \"ws/**/*.key\",null)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 512,
        "startColumnNumber" : 12,
        "endLineNumber" : 512,
        "endColumnNumber" : 66
      },
      "nodeContext" : "Page page=wc.goTo(p.getUrl() + \"ws/**/*.key\",null);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 655,
        "startLineNumber" : 510,
        "startColumnNumber" : 8,
        "endLineNumber" : 520,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Page page=wc.goTo(p.getUrl() + \"ws/**/*.key\",null);\n  assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));\n  String workspaceContent=page.getWebResponse().getContentAsString();\n  assertThat(workspaceContent,allOf(not(containsString(\"master.key\")),containsString(\"public1.key\"),containsString(\"public2.key\")));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 55,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7099,
        "startLineNumber" : 426,
        "startColumnNumber" : 74,
        "endLineNumber" : 557,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  FreeStyleProject p=j.createFreeStyleProject();\n  File secretsFolder=new File(j.jenkins.getRootDir(),\"secrets\");\n  File secretTarget=new File(secretsFolder,\"goal.txt\");\n  String secretContent=\"secret\";\n  FileUtils.write(secretTarget,secretContent,StandardCharsets.UTF_8);\n  if (Functions.isWindows()) {\n    String script=loadContentFromResource(\"outsideWorkspaceStructure.bat\");\n    p.getBuildersList().add(new BatchFile(script));\n  }\n else {\n    String script=loadContentFromResource(\"outsideWorkspaceStructure.sh\");\n    p.getBuildersList().add(new Shell(script));\n  }\n  assertEquals(Result.SUCCESS,p.scheduleBuild2(0).get().getResult());\n  JenkinsRule.WebClient wc=j.createWebClient();\n  wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n{\n    Page page=wc.goTo(p.getUrl() + \"ws/\",null);\n    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));\n    String workspaceContent=page.getWebResponse().getContentAsString();\n    assertThat(workspaceContent,allOf(containsString(\"public1.key\"),containsString(\"intermediateFolder\"),not(containsString(\"to_secrets1\")),not(containsString(\"to_secrets_goal1\")),not(containsString(\"to_secrets2\")),not(containsString(\"to_secrets_goal2\"))));\n  }\n{\n    Page page=wc.goTo(p.getUrl() + \"ws/to_secrets1/\",null);\n    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n  }\n{\n    Page page=wc.goTo(p.getUrl() + \"ws/to_secrets_goal1/\",null);\n    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n  }\n{\n    Page page=wc.goTo(p.getUrl() + \"ws/intermediateFolder/\",null);\n    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));\n    String workspaceContent=page.getWebResponse().getContentAsString();\n    assertThat(workspaceContent,allOf(not(containsString(\"to_secrets1\")),not(containsString(\"to_secrets_goal1\")),not(containsString(\"to_secrets2\")),not(containsString(\"to_secrets_goal2\"))));\n  }\n{\n    Page page=wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2/\",null);\n    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n  }\n{\n    Page page=wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2/master.key\",null);\n    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n  }\n{\n    Page page=wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets_goal2/\",null);\n    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n  }\n{\n    Page page=wc.goTo(p.getUrl() + \"ws/**/*.key\",null);\n    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));\n    String workspaceContent=page.getWebResponse().getContentAsString();\n    assertThat(workspaceContent,allOf(not(containsString(\"master.key\")),containsString(\"public1.key\"),containsString(\"public2.key\")));\n  }\n{\n    Page zipPage=wc.goTo(p.getUrl() + \"ws/*zip*/ws.zip\",null);\n    assertThat(zipPage.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));\n    List<String> entryNames=getListOfEntriesInDownloadedZip((UnexpectedPage)zipPage);\n    assertThat(entryNames,containsInAnyOrder(p.getName() + \"/intermediateFolder/public2.key\",p.getName() + \"/public1.key\"));\n  }\n{\n    Page zipPage=wc.goTo(p.getUrl() + \"ws/**/*zip*/ws.zip\",null);\n    assertThat(zipPage.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));\n    List<String> entryNames=getListOfEntriesInDownloadedZip((UnexpectedPage)zipPage);\n    assertThat(entryNames,containsInAnyOrder(\"intermediateFolder/public2.key\",\"public1.key\"));\n  }\n{\n    Page zipPage=wc.goTo(p.getUrl() + \"ws/intermediateFolder/*zip*/intermediateFolder.zip\",null);\n    assertThat(zipPage.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));\n    List<String> entryNames=getListOfEntriesInDownloadedZip((UnexpectedPage)zipPage);\n    assertThat(entryNames,contains(\"intermediateFolder/public2.key\"));\n  }\n{\n    Page zipPage=wc.goTo(p.getUrl() + \"ws/intermediateFolder/**/*zip*/intermediateFolder.zip\",null);\n    assertThat(zipPage.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));\n    List<String> entryNames=getListOfEntriesInDownloadedZip((UnexpectedPage)zipPage);\n    assertThat(entryNames,contains(\"public2.key\"));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 656,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7208,
        "startLineNumber" : 424,
        "startColumnNumber" : 4,
        "endLineNumber" : 557,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test @Issue(\"SECURITY-904\") public void symlink_outsideWorkspace_areNotAllowed() throws Exception {\n  FreeStyleProject p=j.createFreeStyleProject();\n  File secretsFolder=new File(j.jenkins.getRootDir(),\"secrets\");\n  File secretTarget=new File(secretsFolder,\"goal.txt\");\n  String secretContent=\"secret\";\n  FileUtils.write(secretTarget,secretContent,StandardCharsets.UTF_8);\n  if (Functions.isWindows()) {\n    String script=loadContentFromResource(\"outsideWorkspaceStructure.bat\");\n    p.getBuildersList().add(new BatchFile(script));\n  }\n else {\n    String script=loadContentFromResource(\"outsideWorkspaceStructure.sh\");\n    p.getBuildersList().add(new Shell(script));\n  }\n  assertEquals(Result.SUCCESS,p.scheduleBuild2(0).get().getResult());\n  JenkinsRule.WebClient wc=j.createWebClient();\n  wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n{\n    Page page=wc.goTo(p.getUrl() + \"ws/\",null);\n    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));\n    String workspaceContent=page.getWebResponse().getContentAsString();\n    assertThat(workspaceContent,allOf(containsString(\"public1.key\"),containsString(\"intermediateFolder\"),not(containsString(\"to_secrets1\")),not(containsString(\"to_secrets_goal1\")),not(containsString(\"to_secrets2\")),not(containsString(\"to_secrets_goal2\"))));\n  }\n{\n    Page page=wc.goTo(p.getUrl() + \"ws/to_secrets1/\",null);\n    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n  }\n{\n    Page page=wc.goTo(p.getUrl() + \"ws/to_secrets_goal1/\",null);\n    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n  }\n{\n    Page page=wc.goTo(p.getUrl() + \"ws/intermediateFolder/\",null);\n    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));\n    String workspaceContent=page.getWebResponse().getContentAsString();\n    assertThat(workspaceContent,allOf(not(containsString(\"to_secrets1\")),not(containsString(\"to_secrets_goal1\")),not(containsString(\"to_secrets2\")),not(containsString(\"to_secrets_goal2\"))));\n  }\n{\n    Page page=wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2/\",null);\n    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n  }\n{\n    Page page=wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2/master.key\",null);\n    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n  }\n{\n    Page page=wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets_goal2/\",null);\n    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n  }\n{\n    Page page=wc.goTo(p.getUrl() + \"ws/**/*.key\",null);\n    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));\n    String workspaceContent=page.getWebResponse().getContentAsString();\n    assertThat(workspaceContent,allOf(not(containsString(\"master.key\")),containsString(\"public1.key\"),containsString(\"public2.key\")));\n  }\n{\n    Page zipPage=wc.goTo(p.getUrl() + \"ws/*zip*/ws.zip\",null);\n    assertThat(zipPage.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));\n    List<String> entryNames=getListOfEntriesInDownloadedZip((UnexpectedPage)zipPage);\n    assertThat(entryNames,containsInAnyOrder(p.getName() + \"/intermediateFolder/public2.key\",p.getName() + \"/public1.key\"));\n  }\n{\n    Page zipPage=wc.goTo(p.getUrl() + \"ws/**/*zip*/ws.zip\",null);\n    assertThat(zipPage.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));\n    List<String> entryNames=getListOfEntriesInDownloadedZip((UnexpectedPage)zipPage);\n    assertThat(entryNames,containsInAnyOrder(\"intermediateFolder/public2.key\",\"public1.key\"));\n  }\n{\n    Page zipPage=wc.goTo(p.getUrl() + \"ws/intermediateFolder/*zip*/intermediateFolder.zip\",null);\n    assertThat(zipPage.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));\n    List<String> entryNames=getListOfEntriesInDownloadedZip((UnexpectedPage)zipPage);\n    assertThat(entryNames,contains(\"intermediateFolder/public2.key\"));\n  }\n{\n    Page zipPage=wc.goTo(p.getUrl() + \"ws/intermediateFolder/**/*zip*/intermediateFolder.zip\",null);\n    assertThat(zipPage.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));\n    List<String> entryNames=getListOfEntriesInDownloadedZip((UnexpectedPage)zipPage);\n    assertThat(entryNames,contains(\"public2.key\"));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 667,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 512,
        "startColumnNumber" : 12,
        "endLineNumber" : 512,
        "endColumnNumber" : 66
      },
      "nodeContext" : "Page page=wc.goTo(p.getUrl() + \"ws/**/*.key\",null);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 512,
    "startColumnNumber" : 45,
    "endLineNumber" : 512,
    "endColumnNumber" : 58
  } ],
  "layoutRelationDataList" : [ ]
}