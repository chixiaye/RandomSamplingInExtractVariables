{
  "id" : 63,
  "expression" : "\"info1\"",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/common/src/test/java/io/netty/util/internal/logging/Slf4JLoggerFactoryTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"info1\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 79,
      "startColumnNumber" : 37,
      "endLineNumber" : 79,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 79,
        "endColumnNumber" : 54
      },
      "nodeContext" : "internalLogger.info(\"{} {}\",\"info1\",\"info2\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 79,
        "endColumnNumber" : 55
      },
      "nodeContext" : "internalLogger.info(\"{} {}\",\"info1\",\"info2\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3651,
        "startLineNumber" : 59,
        "startColumnNumber" : 36,
        "endLineNumber" : 123,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ArgumentCaptor<String> captor=ArgumentCaptor.forClass(String.class);\n  LocationAwareLogger logger=mock(LocationAwareLogger.class);\n  when(logger.isDebugEnabled()).thenReturn(true);\n  when(logger.isErrorEnabled()).thenReturn(true);\n  when(logger.isInfoEnabled()).thenReturn(true);\n  when(logger.isTraceEnabled()).thenReturn(true);\n  when(logger.isWarnEnabled()).thenReturn(true);\n  when(logger.getName()).thenReturn(\"testlogger\");\n  InternalLogger internalLogger=Slf4JLoggerFactory.wrapLogger(logger);\n  internalLogger.debug(\"{}\",\"debug\");\n  internalLogger.debug(\"{} {}\",\"debug1\",\"debug2\");\n  internalLogger.debug(\"{} {} {}\",\"debug1\",\"debug2\",\"debug3\");\n  internalLogger.error(\"{}\",\"error\");\n  internalLogger.error(\"{} {}\",\"error1\",\"error2\");\n  internalLogger.error(\"{} {} {}\",\"error1\",\"error2\",\"error3\");\n  internalLogger.info(\"{}\",\"info\");\n  internalLogger.info(\"{} {}\",\"info1\",\"info2\");\n  internalLogger.info(\"{} {} {}\",\"info1\",\"info2\",\"info3\");\n  internalLogger.trace(\"{}\",\"trace\");\n  internalLogger.trace(\"{} {}\",\"trace1\",\"trace2\");\n  internalLogger.trace(\"{} {} {}\",\"trace1\",\"trace2\",\"trace3\");\n  internalLogger.warn(\"{}\",\"warn\");\n  internalLogger.warn(\"{} {}\",\"warn1\",\"warn2\");\n  internalLogger.warn(\"{} {} {}\",\"warn1\",\"warn2\",\"warn3\");\n  verify(logger,times(3)).log(ArgumentMatchers.isNull(),eq(LocationAwareSlf4JLogger.FQCN),eq(LocationAwareLogger.DEBUG_INT),captor.capture(),any(Object[].class),ArgumentMatchers.isNull());\n  verify(logger,times(3)).log(ArgumentMatchers.isNull(),eq(LocationAwareSlf4JLogger.FQCN),eq(LocationAwareLogger.ERROR_INT),captor.capture(),any(Object[].class),ArgumentMatchers.isNull());\n  verify(logger,times(3)).log(ArgumentMatchers.isNull(),eq(LocationAwareSlf4JLogger.FQCN),eq(LocationAwareLogger.INFO_INT),captor.capture(),any(Object[].class),ArgumentMatchers.isNull());\n  verify(logger,times(3)).log(ArgumentMatchers.isNull(),eq(LocationAwareSlf4JLogger.FQCN),eq(LocationAwareLogger.TRACE_INT),captor.capture(),any(Object[].class),ArgumentMatchers.isNull());\n  verify(logger,times(3)).log(ArgumentMatchers.isNull(),eq(LocationAwareSlf4JLogger.FQCN),eq(LocationAwareLogger.WARN_INT),captor.capture(),any(Object[].class),ArgumentMatchers.isNull());\n  Iterator<String> logMessages=captor.getAllValues().iterator();\n  assertEquals(\"debug\",logMessages.next());\n  assertEquals(\"debug1 debug2\",logMessages.next());\n  assertEquals(\"debug1 debug2 debug3\",logMessages.next());\n  assertEquals(\"error\",logMessages.next());\n  assertEquals(\"error1 error2\",logMessages.next());\n  assertEquals(\"error1 error2 error3\",logMessages.next());\n  assertEquals(\"info\",logMessages.next());\n  assertEquals(\"info1 info2\",logMessages.next());\n  assertEquals(\"info1 info2 info3\",logMessages.next());\n  assertEquals(\"trace\",logMessages.next());\n  assertEquals(\"trace1 trace2\",logMessages.next());\n  assertEquals(\"trace1 trace2 trace3\",logMessages.next());\n  assertEquals(\"warn\",logMessages.next());\n  assertEquals(\"warn1 warn2\",logMessages.next());\n  assertEquals(\"warn1 warn2 warn3\",logMessages.next());\n  assertFalse(logMessages.hasNext());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 492,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3694,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 123,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testFormatMessage(){\n  ArgumentCaptor<String> captor=ArgumentCaptor.forClass(String.class);\n  LocationAwareLogger logger=mock(LocationAwareLogger.class);\n  when(logger.isDebugEnabled()).thenReturn(true);\n  when(logger.isErrorEnabled()).thenReturn(true);\n  when(logger.isInfoEnabled()).thenReturn(true);\n  when(logger.isTraceEnabled()).thenReturn(true);\n  when(logger.isWarnEnabled()).thenReturn(true);\n  when(logger.getName()).thenReturn(\"testlogger\");\n  InternalLogger internalLogger=Slf4JLoggerFactory.wrapLogger(logger);\n  internalLogger.debug(\"{}\",\"debug\");\n  internalLogger.debug(\"{} {}\",\"debug1\",\"debug2\");\n  internalLogger.debug(\"{} {} {}\",\"debug1\",\"debug2\",\"debug3\");\n  internalLogger.error(\"{}\",\"error\");\n  internalLogger.error(\"{} {}\",\"error1\",\"error2\");\n  internalLogger.error(\"{} {} {}\",\"error1\",\"error2\",\"error3\");\n  internalLogger.info(\"{}\",\"info\");\n  internalLogger.info(\"{} {}\",\"info1\",\"info2\");\n  internalLogger.info(\"{} {} {}\",\"info1\",\"info2\",\"info3\");\n  internalLogger.trace(\"{}\",\"trace\");\n  internalLogger.trace(\"{} {}\",\"trace1\",\"trace2\");\n  internalLogger.trace(\"{} {} {}\",\"trace1\",\"trace2\",\"trace3\");\n  internalLogger.warn(\"{}\",\"warn\");\n  internalLogger.warn(\"{} {}\",\"warn1\",\"warn2\");\n  internalLogger.warn(\"{} {} {}\",\"warn1\",\"warn2\",\"warn3\");\n  verify(logger,times(3)).log(ArgumentMatchers.isNull(),eq(LocationAwareSlf4JLogger.FQCN),eq(LocationAwareLogger.DEBUG_INT),captor.capture(),any(Object[].class),ArgumentMatchers.isNull());\n  verify(logger,times(3)).log(ArgumentMatchers.isNull(),eq(LocationAwareSlf4JLogger.FQCN),eq(LocationAwareLogger.ERROR_INT),captor.capture(),any(Object[].class),ArgumentMatchers.isNull());\n  verify(logger,times(3)).log(ArgumentMatchers.isNull(),eq(LocationAwareSlf4JLogger.FQCN),eq(LocationAwareLogger.INFO_INT),captor.capture(),any(Object[].class),ArgumentMatchers.isNull());\n  verify(logger,times(3)).log(ArgumentMatchers.isNull(),eq(LocationAwareSlf4JLogger.FQCN),eq(LocationAwareLogger.TRACE_INT),captor.capture(),any(Object[].class),ArgumentMatchers.isNull());\n  verify(logger,times(3)).log(ArgumentMatchers.isNull(),eq(LocationAwareSlf4JLogger.FQCN),eq(LocationAwareLogger.WARN_INT),captor.capture(),any(Object[].class),ArgumentMatchers.isNull());\n  Iterator<String> logMessages=captor.getAllValues().iterator();\n  assertEquals(\"debug\",logMessages.next());\n  assertEquals(\"debug1 debug2\",logMessages.next());\n  assertEquals(\"debug1 debug2 debug3\",logMessages.next());\n  assertEquals(\"error\",logMessages.next());\n  assertEquals(\"error1 error2\",logMessages.next());\n  assertEquals(\"error1 error2 error3\",logMessages.next());\n  assertEquals(\"info\",logMessages.next());\n  assertEquals(\"info1 info2\",logMessages.next());\n  assertEquals(\"info1 info2 info3\",logMessages.next());\n  assertEquals(\"trace\",logMessages.next());\n  assertEquals(\"trace1 trace2\",logMessages.next());\n  assertEquals(\"trace1 trace2 trace3\",logMessages.next());\n  assertEquals(\"warn\",logMessages.next());\n  assertEquals(\"warn1 warn2\",logMessages.next());\n  assertEquals(\"warn1 warn2 warn3\",logMessages.next());\n  assertFalse(logMessages.hasNext());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 498,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 79,
        "endColumnNumber" : 55
      },
      "nodeContext" : "internalLogger.info(\"{} {}\",\"info1\",\"info2\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"info1\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 80,
      "startColumnNumber" : 40,
      "endLineNumber" : 80,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 66
      },
      "nodeContext" : "internalLogger.info(\"{} {} {}\",\"info1\",\"info2\",\"info3\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 67
      },
      "nodeContext" : "internalLogger.info(\"{} {} {}\",\"info1\",\"info2\",\"info3\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3651,
        "startLineNumber" : 59,
        "startColumnNumber" : 36,
        "endLineNumber" : 123,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ArgumentCaptor<String> captor=ArgumentCaptor.forClass(String.class);\n  LocationAwareLogger logger=mock(LocationAwareLogger.class);\n  when(logger.isDebugEnabled()).thenReturn(true);\n  when(logger.isErrorEnabled()).thenReturn(true);\n  when(logger.isInfoEnabled()).thenReturn(true);\n  when(logger.isTraceEnabled()).thenReturn(true);\n  when(logger.isWarnEnabled()).thenReturn(true);\n  when(logger.getName()).thenReturn(\"testlogger\");\n  InternalLogger internalLogger=Slf4JLoggerFactory.wrapLogger(logger);\n  internalLogger.debug(\"{}\",\"debug\");\n  internalLogger.debug(\"{} {}\",\"debug1\",\"debug2\");\n  internalLogger.debug(\"{} {} {}\",\"debug1\",\"debug2\",\"debug3\");\n  internalLogger.error(\"{}\",\"error\");\n  internalLogger.error(\"{} {}\",\"error1\",\"error2\");\n  internalLogger.error(\"{} {} {}\",\"error1\",\"error2\",\"error3\");\n  internalLogger.info(\"{}\",\"info\");\n  internalLogger.info(\"{} {}\",\"info1\",\"info2\");\n  internalLogger.info(\"{} {} {}\",\"info1\",\"info2\",\"info3\");\n  internalLogger.trace(\"{}\",\"trace\");\n  internalLogger.trace(\"{} {}\",\"trace1\",\"trace2\");\n  internalLogger.trace(\"{} {} {}\",\"trace1\",\"trace2\",\"trace3\");\n  internalLogger.warn(\"{}\",\"warn\");\n  internalLogger.warn(\"{} {}\",\"warn1\",\"warn2\");\n  internalLogger.warn(\"{} {} {}\",\"warn1\",\"warn2\",\"warn3\");\n  verify(logger,times(3)).log(ArgumentMatchers.isNull(),eq(LocationAwareSlf4JLogger.FQCN),eq(LocationAwareLogger.DEBUG_INT),captor.capture(),any(Object[].class),ArgumentMatchers.isNull());\n  verify(logger,times(3)).log(ArgumentMatchers.isNull(),eq(LocationAwareSlf4JLogger.FQCN),eq(LocationAwareLogger.ERROR_INT),captor.capture(),any(Object[].class),ArgumentMatchers.isNull());\n  verify(logger,times(3)).log(ArgumentMatchers.isNull(),eq(LocationAwareSlf4JLogger.FQCN),eq(LocationAwareLogger.INFO_INT),captor.capture(),any(Object[].class),ArgumentMatchers.isNull());\n  verify(logger,times(3)).log(ArgumentMatchers.isNull(),eq(LocationAwareSlf4JLogger.FQCN),eq(LocationAwareLogger.TRACE_INT),captor.capture(),any(Object[].class),ArgumentMatchers.isNull());\n  verify(logger,times(3)).log(ArgumentMatchers.isNull(),eq(LocationAwareSlf4JLogger.FQCN),eq(LocationAwareLogger.WARN_INT),captor.capture(),any(Object[].class),ArgumentMatchers.isNull());\n  Iterator<String> logMessages=captor.getAllValues().iterator();\n  assertEquals(\"debug\",logMessages.next());\n  assertEquals(\"debug1 debug2\",logMessages.next());\n  assertEquals(\"debug1 debug2 debug3\",logMessages.next());\n  assertEquals(\"error\",logMessages.next());\n  assertEquals(\"error1 error2\",logMessages.next());\n  assertEquals(\"error1 error2 error3\",logMessages.next());\n  assertEquals(\"info\",logMessages.next());\n  assertEquals(\"info1 info2\",logMessages.next());\n  assertEquals(\"info1 info2 info3\",logMessages.next());\n  assertEquals(\"trace\",logMessages.next());\n  assertEquals(\"trace1 trace2\",logMessages.next());\n  assertEquals(\"trace1 trace2 trace3\",logMessages.next());\n  assertEquals(\"warn\",logMessages.next());\n  assertEquals(\"warn1 warn2\",logMessages.next());\n  assertEquals(\"warn1 warn2 warn3\",logMessages.next());\n  assertFalse(logMessages.hasNext());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 492,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3694,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 123,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testFormatMessage(){\n  ArgumentCaptor<String> captor=ArgumentCaptor.forClass(String.class);\n  LocationAwareLogger logger=mock(LocationAwareLogger.class);\n  when(logger.isDebugEnabled()).thenReturn(true);\n  when(logger.isErrorEnabled()).thenReturn(true);\n  when(logger.isInfoEnabled()).thenReturn(true);\n  when(logger.isTraceEnabled()).thenReturn(true);\n  when(logger.isWarnEnabled()).thenReturn(true);\n  when(logger.getName()).thenReturn(\"testlogger\");\n  InternalLogger internalLogger=Slf4JLoggerFactory.wrapLogger(logger);\n  internalLogger.debug(\"{}\",\"debug\");\n  internalLogger.debug(\"{} {}\",\"debug1\",\"debug2\");\n  internalLogger.debug(\"{} {} {}\",\"debug1\",\"debug2\",\"debug3\");\n  internalLogger.error(\"{}\",\"error\");\n  internalLogger.error(\"{} {}\",\"error1\",\"error2\");\n  internalLogger.error(\"{} {} {}\",\"error1\",\"error2\",\"error3\");\n  internalLogger.info(\"{}\",\"info\");\n  internalLogger.info(\"{} {}\",\"info1\",\"info2\");\n  internalLogger.info(\"{} {} {}\",\"info1\",\"info2\",\"info3\");\n  internalLogger.trace(\"{}\",\"trace\");\n  internalLogger.trace(\"{} {}\",\"trace1\",\"trace2\");\n  internalLogger.trace(\"{} {} {}\",\"trace1\",\"trace2\",\"trace3\");\n  internalLogger.warn(\"{}\",\"warn\");\n  internalLogger.warn(\"{} {}\",\"warn1\",\"warn2\");\n  internalLogger.warn(\"{} {} {}\",\"warn1\",\"warn2\",\"warn3\");\n  verify(logger,times(3)).log(ArgumentMatchers.isNull(),eq(LocationAwareSlf4JLogger.FQCN),eq(LocationAwareLogger.DEBUG_INT),captor.capture(),any(Object[].class),ArgumentMatchers.isNull());\n  verify(logger,times(3)).log(ArgumentMatchers.isNull(),eq(LocationAwareSlf4JLogger.FQCN),eq(LocationAwareLogger.ERROR_INT),captor.capture(),any(Object[].class),ArgumentMatchers.isNull());\n  verify(logger,times(3)).log(ArgumentMatchers.isNull(),eq(LocationAwareSlf4JLogger.FQCN),eq(LocationAwareLogger.INFO_INT),captor.capture(),any(Object[].class),ArgumentMatchers.isNull());\n  verify(logger,times(3)).log(ArgumentMatchers.isNull(),eq(LocationAwareSlf4JLogger.FQCN),eq(LocationAwareLogger.TRACE_INT),captor.capture(),any(Object[].class),ArgumentMatchers.isNull());\n  verify(logger,times(3)).log(ArgumentMatchers.isNull(),eq(LocationAwareSlf4JLogger.FQCN),eq(LocationAwareLogger.WARN_INT),captor.capture(),any(Object[].class),ArgumentMatchers.isNull());\n  Iterator<String> logMessages=captor.getAllValues().iterator();\n  assertEquals(\"debug\",logMessages.next());\n  assertEquals(\"debug1 debug2\",logMessages.next());\n  assertEquals(\"debug1 debug2 debug3\",logMessages.next());\n  assertEquals(\"error\",logMessages.next());\n  assertEquals(\"error1 error2\",logMessages.next());\n  assertEquals(\"error1 error2 error3\",logMessages.next());\n  assertEquals(\"info\",logMessages.next());\n  assertEquals(\"info1 info2\",logMessages.next());\n  assertEquals(\"info1 info2 info3\",logMessages.next());\n  assertEquals(\"trace\",logMessages.next());\n  assertEquals(\"trace1 trace2\",logMessages.next());\n  assertEquals(\"trace1 trace2 trace3\",logMessages.next());\n  assertEquals(\"warn\",logMessages.next());\n  assertEquals(\"warn1 warn2\",logMessages.next());\n  assertEquals(\"warn1 warn2 warn3\",logMessages.next());\n  assertFalse(logMessages.hasNext());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 498,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 67
      },
      "nodeContext" : "internalLogger.info(\"{} {} {}\",\"info1\",\"info2\",\"info3\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 79,
    "startColumnNumber" : 37,
    "endLineNumber" : 79,
    "endColumnNumber" : 44
  }, {
    "charLength" : 7,
    "startLineNumber" : 80,
    "startColumnNumber" : 40,
    "endLineNumber" : 80,
    "endColumnNumber" : 47
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}