{
  "id" : 91,
  "expression" : "target.isDamaged()",
  "projectName" : "iluwatar@java-design-patterns",
  "commitID" : "428efc7d53449a51d25dfda4141742629ecbb0b2",
  "filePath" : "/double-dispatch/src/test/java/com/iluwatar/doubledispatch/CollisionTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "target.isDamaged()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 108,
      "startColumnNumber" : 33,
      "endLineNumber" : 108,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 108,
        "startColumnNumber" : 4,
        "endLineNumber" : 108,
        "endColumnNumber" : 66
      },
      "nodeContext" : "assertEquals(expectedDamage,target.isDamaged(),errorMessage)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 108,
        "startColumnNumber" : 4,
        "endLineNumber" : 108,
        "endColumnNumber" : 67
      },
      "nodeContext" : "assertEquals(expectedDamage,target.isDamaged(),errorMessage);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 468,
        "startLineNumber" : 100,
        "startColumnNumber" : 106,
        "endLineNumber" : 109,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final var targetName=target.getClass().getSimpleName();\n  final var otherName=other.getClass().getSimpleName();\n  final var errorMessage=expectedDamage ? \"Expected [\" + targetName + \"] to be damaged after colliding with [\"+ otherName+ \"] but it was not!\" : \"Expected [\" + targetName + \"] not to be damaged after colliding with [\"+ otherName+ \"] but it was!\";\n  assertEquals(expectedDamage,target.isDamaged(),errorMessage);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 51,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 869,
        "startLineNumber" : 92,
        "startColumnNumber" : 2,
        "endLineNumber" : 109,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Test if the damage state of the target matches the expected state after colliding with the given object\n * @param target         The target object\n * @param other          The other object\n * @param expectedDamage The expected state of damage on the target object\n */\nprivate void testDamaged(final GameObject target,final GameObject other,final boolean expectedDamage){\n  final var targetName=target.getClass().getSimpleName();\n  final var otherName=other.getClass().getSimpleName();\n  final var errorMessage=expectedDamage ? \"Expected [\" + targetName + \"] to be damaged after colliding with [\"+ otherName+ \"] but it was not!\" : \"Expected [\" + targetName + \"] not to be damaged after colliding with [\"+ otherName+ \"] but it was!\";\n  assertEquals(expectedDamage,target.isDamaged(),errorMessage);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 70,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 108,
        "startColumnNumber" : 4,
        "endLineNumber" : 108,
        "endColumnNumber" : 67
      },
      "nodeContext" : "assertEquals(expectedDamage,target.isDamaged(),errorMessage);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 108,
    "startColumnNumber" : 33,
    "endLineNumber" : 108,
    "endColumnNumber" : 51
  } ],
  "layoutRelationDataList" : [ ]
}