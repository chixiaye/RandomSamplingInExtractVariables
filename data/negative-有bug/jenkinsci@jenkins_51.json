{
  "id" : 51,
  "expression" : "p[i].equals(\"\")",
  "projectName" : "jenkinsci@jenkins",
  "commitID" : "c44fa7f4cf769257844d562353a579a198ea517a",
  "filePath" : "/core/src/main/java/hudson/model/Items.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "p[i].equals(\"\")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 262,
      "startColumnNumber" : 24,
      "endLineNumber" : 262,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 262,
        "startColumnNumber" : 16,
        "endLineNumber" : 262,
        "endColumnNumber" : 39
      },
      "nodeContext" : "i == 0 && p[i].equals(\"\")",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 157,
        "startLineNumber" : 262,
        "startColumnNumber" : 12,
        "endLineNumber" : 266,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (i == 0 && p[i].equals(\"\")) {\n  name.clear();\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 664,
        "startLineNumber" : 261,
        "startColumnNumber" : 38,
        "endLineNumber" : 280,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (i == 0 && p[i].equals(\"\")) {\n    name.clear();\n    continue;\n  }\n  if (p[i].equals(\"..\")) {\n    if (name.size() == 0) {\n      throw new IllegalArgumentException(String.format(\"Illegal relative path '%s' within context '%s'\",path,context.getFullName()));\n    }\n    name.pop();\n    continue;\n  }\n  if (p[i].equals(\".\")) {\n    continue;\n  }\n  name.push(p[i]);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 66,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 694,
        "startLineNumber" : 261,
        "startColumnNumber" : 8,
        "endLineNumber" : 280,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < p.length; i++) {\n  if (i == 0 && p[i].equals(\"\")) {\n    name.clear();\n    continue;\n  }\n  if (p[i].equals(\"..\")) {\n    if (name.size() == 0) {\n      throw new IllegalArgumentException(String.format(\"Illegal relative path '%s' within context '%s'\",path,context.getFullName()));\n    }\n    name.pop();\n    continue;\n  }\n  if (p[i].equals(\".\")) {\n    continue;\n  }\n  name.push(p[i]);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 79,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1033,
        "startLineNumber" : 252,
        "startColumnNumber" : 74,
        "endLineNumber" : 282,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String[] c=context.getFullName().split(\"/\");\n  String[] p=path.split(\"/\");\n  Stack<String> name=new Stack<>();\n  for (int i=0; i < c.length; i++) {\n    if (i == 0 && c[i].equals(\"\"))     continue;\n    name.push(c[i]);\n  }\n  for (int i=0; i < p.length; i++) {\n    if (i == 0 && p[i].equals(\"\")) {\n      name.clear();\n      continue;\n    }\n    if (p[i].equals(\"..\")) {\n      if (name.size() == 0) {\n        throw new IllegalArgumentException(String.format(\"Illegal relative path '%s' within context '%s'\",path,context.getFullName()));\n      }\n      name.pop();\n      continue;\n    }\n    if (p[i].equals(\".\")) {\n      continue;\n    }\n    name.push(p[i]);\n  }\n  return StringUtils.join(name,'/');\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 155,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1366,
        "startLineNumber" : 247,
        "startColumnNumber" : 4,
        "endLineNumber" : 282,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Computes the canonical full name of a relative path in an  {@link ItemGroup} context, handling relativepositions \"..\" and \".\" as absolute path starting with \"/\". The resulting name is the item fullName from Jenkins root.\n */\npublic static String getCanonicalName(ItemGroup context,String path){\n  String[] c=context.getFullName().split(\"/\");\n  String[] p=path.split(\"/\");\n  Stack<String> name=new Stack<>();\n  for (int i=0; i < c.length; i++) {\n    if (i == 0 && c[i].equals(\"\"))     continue;\n    name.push(c[i]);\n  }\n  for (int i=0; i < p.length; i++) {\n    if (i == 0 && p[i].equals(\"\")) {\n      name.clear();\n      continue;\n    }\n    if (p[i].equals(\"..\")) {\n      if (name.size() == 0) {\n        throw new IllegalArgumentException(String.format(\"Illegal relative path '%s' within context '%s'\",path,context.getFullName()));\n      }\n      name.pop();\n      continue;\n    }\n    if (p[i].equals(\".\")) {\n      continue;\n    }\n    name.push(p[i]);\n  }\n  return StringUtils.join(name,'/');\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 170,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 262,
        "startColumnNumber" : 16,
        "endLineNumber" : 262,
        "endColumnNumber" : 39
      },
      "nodeContext" : "i == 0 && p[i].equals(\"\")",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 262,
    "startColumnNumber" : 24,
    "endLineNumber" : 262,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ ]
}