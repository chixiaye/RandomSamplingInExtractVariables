{
  "id" : 130,
  "expression" : "new Object[10]",
  "projectName" : "mockito@mockito",
  "commitID" : "7f036eb9ed79444adcec3a6c635870222b109e50",
  "filePath" : "/src/test/java/org/mockito/internal/matchers/EqualityTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new Object[10]",
    "nodeType" : "ArrayCreation",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 23,
      "startColumnNumber" : 28,
      "endLineNumber" : 23,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 6,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 23,
        "startColumnNumber" : 19,
        "endLineNumber" : 23,
        "endColumnNumber" : 59
      },
      "nodeContext" : "areEqual(new Object[10],new Object[10])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 23,
        "startColumnNumber" : 8,
        "endLineNumber" : 23,
        "endColumnNumber" : 60
      },
      "nodeContext" : "assertTrue(areEqual(new Object[10],new Object[10]))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 23,
        "startColumnNumber" : 8,
        "endLineNumber" : 23,
        "endColumnNumber" : 61
      },
      "nodeContext" : "assertTrue(areEqual(new Object[10],new Object[10]));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 781,
        "startLineNumber" : 17,
        "startColumnNumber" : 63,
        "endLineNumber" : 32,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int[] arr=new int[]{1,2};\n  assertTrue(areEqual(arr,arr));\n  assertTrue(areEqual(new int[]{1,2},new int[]{1,2}));\n  assertTrue(areEqual(new Double[]{1.0},new Double[]{1.0}));\n  assertTrue(areEqual(new String[0],new String[0]));\n  assertTrue(areEqual(new Object[10],new Object[10]));\n  assertTrue(areEqual(new int[]{1},new Integer[]{1}));\n  assertTrue(areEqual(new Object[]{\"1\"},new String[]{\"1\"}));\n  Object badequals=new BadEquals();\n  assertTrue(areEqual(badequals,badequals));\n  assertFalse(areEqual(new Object[9],new Object[10]));\n  assertFalse(areEqual(new int[]{1,2},new int[]{1}));\n  assertFalse(areEqual(new int[]{1},new double[]{1.0}));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 197,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 851,
        "startLineNumber" : 16,
        "startColumnNumber" : 4,
        "endLineNumber" : 32,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void shouldKnowIfObjectsAreEqual() throws Exception {\n  int[] arr=new int[]{1,2};\n  assertTrue(areEqual(arr,arr));\n  assertTrue(areEqual(new int[]{1,2},new int[]{1,2}));\n  assertTrue(areEqual(new Double[]{1.0},new Double[]{1.0}));\n  assertTrue(areEqual(new String[0],new String[0]));\n  assertTrue(areEqual(new Object[10],new Object[10]));\n  assertTrue(areEqual(new int[]{1},new Integer[]{1}));\n  assertTrue(areEqual(new Object[]{\"1\"},new String[]{\"1\"}));\n  Object badequals=new BadEquals();\n  assertTrue(areEqual(badequals,badequals));\n  assertFalse(areEqual(new Object[9],new Object[10]));\n  assertFalse(areEqual(new int[]{1,2},new int[]{1}));\n  assertFalse(areEqual(new int[]{1},new double[]{1.0}));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 205,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 23,
        "startColumnNumber" : 8,
        "endLineNumber" : 23,
        "endColumnNumber" : 61
      },
      "nodeContext" : "assertTrue(areEqual(new Object[10],new Object[10]));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    },
    "tokenLength" : 2,
    "type" : "java.lang.Object[]"
  }, {
    "nodeContext" : "new Object[10]",
    "nodeType" : "ArrayCreation",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 23,
      "startColumnNumber" : 44,
      "endLineNumber" : 23,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 6,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 23,
        "startColumnNumber" : 19,
        "endLineNumber" : 23,
        "endColumnNumber" : 59
      },
      "nodeContext" : "areEqual(new Object[10],new Object[10])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 23,
        "startColumnNumber" : 8,
        "endLineNumber" : 23,
        "endColumnNumber" : 60
      },
      "nodeContext" : "assertTrue(areEqual(new Object[10],new Object[10]))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 23,
        "startColumnNumber" : 8,
        "endLineNumber" : 23,
        "endColumnNumber" : 61
      },
      "nodeContext" : "assertTrue(areEqual(new Object[10],new Object[10]));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 781,
        "startLineNumber" : 17,
        "startColumnNumber" : 63,
        "endLineNumber" : 32,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int[] arr=new int[]{1,2};\n  assertTrue(areEqual(arr,arr));\n  assertTrue(areEqual(new int[]{1,2},new int[]{1,2}));\n  assertTrue(areEqual(new Double[]{1.0},new Double[]{1.0}));\n  assertTrue(areEqual(new String[0],new String[0]));\n  assertTrue(areEqual(new Object[10],new Object[10]));\n  assertTrue(areEqual(new int[]{1},new Integer[]{1}));\n  assertTrue(areEqual(new Object[]{\"1\"},new String[]{\"1\"}));\n  Object badequals=new BadEquals();\n  assertTrue(areEqual(badequals,badequals));\n  assertFalse(areEqual(new Object[9],new Object[10]));\n  assertFalse(areEqual(new int[]{1,2},new int[]{1}));\n  assertFalse(areEqual(new int[]{1},new double[]{1.0}));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 197,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 851,
        "startLineNumber" : 16,
        "startColumnNumber" : 4,
        "endLineNumber" : 32,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void shouldKnowIfObjectsAreEqual() throws Exception {\n  int[] arr=new int[]{1,2};\n  assertTrue(areEqual(arr,arr));\n  assertTrue(areEqual(new int[]{1,2},new int[]{1,2}));\n  assertTrue(areEqual(new Double[]{1.0},new Double[]{1.0}));\n  assertTrue(areEqual(new String[0],new String[0]));\n  assertTrue(areEqual(new Object[10],new Object[10]));\n  assertTrue(areEqual(new int[]{1},new Integer[]{1}));\n  assertTrue(areEqual(new Object[]{\"1\"},new String[]{\"1\"}));\n  Object badequals=new BadEquals();\n  assertTrue(areEqual(badequals,badequals));\n  assertFalse(areEqual(new Object[9],new Object[10]));\n  assertFalse(areEqual(new int[]{1,2},new int[]{1}));\n  assertFalse(areEqual(new int[]{1},new double[]{1.0}));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 205,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 23,
        "startColumnNumber" : 8,
        "endLineNumber" : 23,
        "endColumnNumber" : 61
      },
      "nodeContext" : "assertTrue(areEqual(new Object[10],new Object[10]));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    },
    "tokenLength" : 2,
    "type" : "java.lang.Object[]"
  }, {
    "nodeContext" : "new Object[10]",
    "nodeType" : "ArrayCreation",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 29,
      "startColumnNumber" : 44,
      "endLineNumber" : 29,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 6,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 29,
        "startColumnNumber" : 20,
        "endLineNumber" : 29,
        "endColumnNumber" : 59
      },
      "nodeContext" : "areEqual(new Object[9],new Object[10])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 29,
        "startColumnNumber" : 8,
        "endLineNumber" : 29,
        "endColumnNumber" : 60
      },
      "nodeContext" : "assertFalse(areEqual(new Object[9],new Object[10]))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 29,
        "startColumnNumber" : 8,
        "endLineNumber" : 29,
        "endColumnNumber" : 61
      },
      "nodeContext" : "assertFalse(areEqual(new Object[9],new Object[10]));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 781,
        "startLineNumber" : 17,
        "startColumnNumber" : 63,
        "endLineNumber" : 32,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int[] arr=new int[]{1,2};\n  assertTrue(areEqual(arr,arr));\n  assertTrue(areEqual(new int[]{1,2},new int[]{1,2}));\n  assertTrue(areEqual(new Double[]{1.0},new Double[]{1.0}));\n  assertTrue(areEqual(new String[0],new String[0]));\n  assertTrue(areEqual(new Object[10],new Object[10]));\n  assertTrue(areEqual(new int[]{1},new Integer[]{1}));\n  assertTrue(areEqual(new Object[]{\"1\"},new String[]{\"1\"}));\n  Object badequals=new BadEquals();\n  assertTrue(areEqual(badequals,badequals));\n  assertFalse(areEqual(new Object[9],new Object[10]));\n  assertFalse(areEqual(new int[]{1,2},new int[]{1}));\n  assertFalse(areEqual(new int[]{1},new double[]{1.0}));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 197,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 851,
        "startLineNumber" : 16,
        "startColumnNumber" : 4,
        "endLineNumber" : 32,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void shouldKnowIfObjectsAreEqual() throws Exception {\n  int[] arr=new int[]{1,2};\n  assertTrue(areEqual(arr,arr));\n  assertTrue(areEqual(new int[]{1,2},new int[]{1,2}));\n  assertTrue(areEqual(new Double[]{1.0},new Double[]{1.0}));\n  assertTrue(areEqual(new String[0],new String[0]));\n  assertTrue(areEqual(new Object[10],new Object[10]));\n  assertTrue(areEqual(new int[]{1},new Integer[]{1}));\n  assertTrue(areEqual(new Object[]{\"1\"},new String[]{\"1\"}));\n  Object badequals=new BadEquals();\n  assertTrue(areEqual(badequals,badequals));\n  assertFalse(areEqual(new Object[9],new Object[10]));\n  assertFalse(areEqual(new int[]{1,2},new int[]{1}));\n  assertFalse(areEqual(new int[]{1},new double[]{1.0}));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 205,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 29,
        "startColumnNumber" : 8,
        "endLineNumber" : 29,
        "endColumnNumber" : 61
      },
      "nodeContext" : "assertFalse(areEqual(new Object[9],new Object[10]));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    },
    "tokenLength" : 2,
    "type" : "java.lang.Object[]"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 23,
    "startColumnNumber" : 28,
    "endLineNumber" : 23,
    "endColumnNumber" : 42
  }, {
    "charLength" : 14,
    "startLineNumber" : 23,
    "startColumnNumber" : 44,
    "endLineNumber" : 23,
    "endColumnNumber" : 58
  }, {
    "charLength" : 14,
    "startLineNumber" : 29,
    "startColumnNumber" : 44,
    "endLineNumber" : 29,
    "endColumnNumber" : 58
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 0
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 0
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}