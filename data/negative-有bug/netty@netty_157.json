{
  "id" : 157,
  "expression" : "resolvers.get(executor)",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/resolver/src/main/java/io/netty/resolver/AddressResolverGroup.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "resolvers.get(executor)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 64,
      "startColumnNumber" : 16,
      "endLineNumber" : 64,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 64,
        "startColumnNumber" : 12,
        "endLineNumber" : 64,
        "endColumnNumber" : 39
      },
      "nodeContext" : "r=resolvers.get(executor)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 64,
        "startColumnNumber" : 12,
        "endLineNumber" : 64,
        "endColumnNumber" : 40
      },
      "nodeContext" : "r=resolvers.get(executor);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 974,
        "startLineNumber" : 63,
        "startColumnNumber" : 33,
        "endLineNumber" : 86,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  r=resolvers.get(executor);\n  if (r == null) {\n    final AddressResolver<T> newResolver;\n    try {\n      newResolver=newResolver(executor);\n    }\n catch (    Exception e) {\n      throw new IllegalStateException(\"failed to create a new resolver\",e);\n    }\n    resolvers.put(executor,newResolver);\n    FutureListener<Object> terminationListener=future -> {\nsynchronized (resolvers) {\n        resolvers.remove(executor);\n        executorTerminationListeners.remove(executor);\n      }\n      newResolver.close();\n    }\n;\n    executorTerminationListeners.put(executor,terminationListener);\n    executor.terminationFuture().addListener(terminationListener);\n    r=newResolver;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 94,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 999,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 86,
        "endColumnNumber" : 9
      },
      "nodeContext" : "synchronized (resolvers) {\n  r=resolvers.get(executor);\n  if (r == null) {\n    final AddressResolver<T> newResolver;\n    try {\n      newResolver=newResolver(executor);\n    }\n catch (    Exception e) {\n      throw new IllegalStateException(\"failed to create a new resolver\",e);\n    }\n    resolvers.put(executor,newResolver);\n    FutureListener<Object> terminationListener=future -> {\nsynchronized (resolvers) {\n        resolvers.remove(executor);\n        executorTerminationListeners.remove(executor);\n      }\n      newResolver.close();\n    }\n;\n    executorTerminationListeners.put(executor,terminationListener);\n    executor.terminationFuture().addListener(terminationListener);\n    r=newResolver;\n  }\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 96,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1252,
        "startLineNumber" : 55,
        "startColumnNumber" : 72,
        "endLineNumber" : 89,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  requireNonNull(executor,\"executor\");\n  if (executor.isShuttingDown()) {\n    throw new IllegalStateException(\"executor not accepting a task\");\n  }\n  AddressResolver<T> r;\nsynchronized (resolvers) {\n    r=resolvers.get(executor);\n    if (r == null) {\n      final AddressResolver<T> newResolver;\n      try {\n        newResolver=newResolver(executor);\n      }\n catch (      Exception e) {\n        throw new IllegalStateException(\"failed to create a new resolver\",e);\n      }\n      resolvers.put(executor,newResolver);\n      FutureListener<Object> terminationListener=future -> {\nsynchronized (resolvers) {\n          resolvers.remove(executor);\n          executorTerminationListeners.remove(executor);\n        }\n        newResolver.close();\n      }\n;\n      executorTerminationListeners.put(executor,terminationListener);\n      executor.terminationFuture().addListener(terminationListener);\n      r=newResolver;\n    }\n  }\n  return r;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 122,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1727,
        "startLineNumber" : 49,
        "startColumnNumber" : 4,
        "endLineNumber" : 89,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Returns the  {@link AddressResolver} associated with the specified {@link EventExecutor}. If there's no associated resolver found, this method creates and returns a new resolver instance created by {@link #newResolver(EventExecutor)} so that the new resolver is reused on another{@code #getResolver(EventExecutor)} call with the same {@link EventExecutor}.\n */\npublic AddressResolver<T> getResolver(final EventExecutor executor){\n  requireNonNull(executor,\"executor\");\n  if (executor.isShuttingDown()) {\n    throw new IllegalStateException(\"executor not accepting a task\");\n  }\n  AddressResolver<T> r;\nsynchronized (resolvers) {\n    r=resolvers.get(executor);\n    if (r == null) {\n      final AddressResolver<T> newResolver;\n      try {\n        newResolver=newResolver(executor);\n      }\n catch (      Exception e) {\n        throw new IllegalStateException(\"failed to create a new resolver\",e);\n      }\n      resolvers.put(executor,newResolver);\n      FutureListener<Object> terminationListener=future -> {\nsynchronized (resolvers) {\n          resolvers.remove(executor);\n          executorTerminationListeners.remove(executor);\n        }\n        newResolver.close();\n      }\n;\n      executorTerminationListeners.put(executor,terminationListener);\n      executor.terminationFuture().addListener(terminationListener);\n      r=newResolver;\n    }\n  }\n  return r;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 136,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 64,
        "startColumnNumber" : 12,
        "endLineNumber" : 64,
        "endColumnNumber" : 40
      },
      "nodeContext" : "r=resolvers.get(executor);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "io.netty.resolver.AddressResolver<T>"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 64,
    "startColumnNumber" : 16,
    "endLineNumber" : 64,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ ]
}