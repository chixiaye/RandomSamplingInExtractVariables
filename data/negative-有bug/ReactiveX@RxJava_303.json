{
  "id" : 303,
  "expression" : "g.doOnNext(new Consumer<Movie>(){\n  @Override public void accept(  Movie v){\n    System.out.println(v);\n  }\n}\n)",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/flowable/FlowableCovarianceTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "g.doOnNext(new Consumer<Movie>(){\n  @Override public void accept(  Movie v){\n    System.out.println(v);\n  }\n}\n)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 273,
      "startLineNumber" : 88,
      "startColumnNumber" : 23,
      "endLineNumber" : 94,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 28,
    "astHeight" : 9,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 653,
        "startLineNumber" : 88,
        "startColumnNumber" : 23,
        "endLineNumber" : 101,
        "endColumnNumber" : 33
      },
      "nodeContext" : "g.doOnNext(new Consumer<Movie>(){\n  @Override public void accept(  Movie v){\n    System.out.println(v);\n  }\n}\n).compose(new Transformer<Movie,Object>(){\n  @Override public Publisher<? extends Object> apply(  Flowable<Movie> m){\n    return m.concatWith(Flowable.just(new ActionMovie()));\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 68,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 929,
        "startLineNumber" : 88,
        "startColumnNumber" : 23,
        "endLineNumber" : 107,
        "endColumnNumber" : 26
      },
      "nodeContext" : "g.doOnNext(new Consumer<Movie>(){\n  @Override public void accept(  Movie v){\n    System.out.println(v);\n  }\n}\n).compose(new Transformer<Movie,Object>(){\n  @Override public Publisher<? extends Object> apply(  Flowable<Movie> m){\n    return m.concatWith(Flowable.just(new ActionMovie()));\n  }\n}\n).map(new Function<Object,String>(){\n  @Override public String apply(  Object v){\n    return v.toString();\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 95,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 937,
        "startLineNumber" : 88,
        "startColumnNumber" : 16,
        "endLineNumber" : 107,
        "endColumnNumber" : 27
      },
      "nodeContext" : "return g.doOnNext(new Consumer<Movie>(){\n  @Override public void accept(  Movie v){\n    System.out.println(v);\n  }\n}\n).compose(new Transformer<Movie,Object>(){\n  @Override public Publisher<? extends Object> apply(  Flowable<Movie> m){\n    return m.concatWith(Flowable.just(new ActionMovie()));\n  }\n}\n).map(new Function<Object,String>(){\n  @Override public String apply(  Object v){\n    return v.toString();\n  }\n}\n);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 96,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 971,
        "startLineNumber" : 87,
        "startColumnNumber" : 77,
        "endLineNumber" : 108,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  return g.doOnNext(new Consumer<Movie>(){\n    @Override public void accept(    Movie v){\n      System.out.println(v);\n    }\n  }\n).compose(new Transformer<Movie,Object>(){\n    @Override public Publisher<? extends Object> apply(    Flowable<Movie> m){\n      return m.concatWith(Flowable.just(new ActionMovie()));\n    }\n  }\n).map(new Function<Object,String>(){\n    @Override public String apply(    Object v){\n      return v.toString();\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 97,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.AnonymousClassDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1059,
        "startLineNumber" : 86,
        "startColumnNumber" : 12,
        "endLineNumber" : 108,
        "endColumnNumber" : 13
      },
      "nodeContext" : "@Override public Publisher<String> apply(GroupedFlowable<Object,Movie> g){\n  return g.doOnNext(new Consumer<Movie>(){\n    @Override public void accept(    Movie v){\n      System.out.println(v);\n    }\n  }\n).compose(new Transformer<Movie,Object>(){\n    @Override public Publisher<? extends Object> apply(    Flowable<Movie> m){\n      return m.concatWith(Flowable.just(new ActionMovie()));\n    }\n  }\n).map(new Function<Object,String>(){\n    @Override public String apply(    Object v){\n      return v.toString();\n    }\n  }\n);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 116,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 653,
        "startLineNumber" : 88,
        "startColumnNumber" : 23,
        "endLineNumber" : 101,
        "endColumnNumber" : 33
      },
      "nodeContext" : "g.doOnNext(new Consumer<Movie>(){\n  @Override public void accept(  Movie v){\n    System.out.println(v);\n  }\n}\n).compose(new Transformer<Movie,Object>(){\n  @Override public Publisher<? extends Object> apply(  Flowable<Movie> m){\n    return m.concatWith(Flowable.just(new ActionMovie()));\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 68,
      "astHeight" : 11
    },
    "tokenLength" : 11,
    "type" : "io.reactivex.Flowable<io.reactivex.flowable.FlowableCovarianceTest.Movie>"
  } ],
  "positionList" : [ {
    "charLength" : 273,
    "startLineNumber" : 88,
    "startColumnNumber" : 23,
    "endLineNumber" : 94,
    "endColumnNumber" : 26
  } ],
  "layoutRelationDataList" : [ ]
}