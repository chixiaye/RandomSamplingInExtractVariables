{
  "id" : 246,
  "expression" : "parts[0].charAt(0) == '#'",
  "projectName" : "apache@zookeeper",
  "commitID" : "c6639c9842973a7954c8baa412d6825cb833d51f",
  "filePath" : "/src/contrib/fatjar/src/java/org/apache/zookeeper/util/FatJarMain.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "parts[0].charAt(0) == '#'",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 75,
      "startColumnNumber" : 63,
      "endLineNumber" : 75,
      "endColumnNumber" : 88
    },
    "astNodeNumber" : 8,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 75,
        "startColumnNumber" : 38,
        "endLineNumber" : 75,
        "endColumnNumber" : 88
      },
      "nodeContext" : "parts[0].length() > 0 && parts[0].charAt(0) == '#'",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 75,
        "startColumnNumber" : 37,
        "endLineNumber" : 75,
        "endColumnNumber" : 89
      },
      "nodeContext" : "(parts[0].length() > 0 && parts[0].charAt(0) == '#')",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 75,
        "startColumnNumber" : 16,
        "endLineNumber" : 75,
        "endColumnNumber" : 89
      },
      "nodeContext" : "parts.length != 3 || (parts[0].length() > 0 && parts[0].charAt(0) == '#')",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 75,
        "startColumnNumber" : 12,
        "endLineNumber" : 77,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (parts.length != 3 || (parts[0].length() > 0 && parts[0].charAt(0) == '#')) {\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 26,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 634,
        "startLineNumber" : 73,
        "startColumnNumber" : 46,
        "endLineNumber" : 87,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String parts[]=line.split(\":\",3);\n  if (parts.length != 3 || (parts[0].length() > 0 && parts[0].charAt(0) == '#')) {\n    continue;\n  }\n  if (parts[0].length() > 0) {\n    cmds.put(parts[0],new Cmd(parts[0],parts[1],parts[2]));\n    order.add(parts[0]);\n  }\n else {\n    order.add(parts[2]);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 81,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 672,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while ((line=br.readLine()) != null) {\n  String parts[]=line.split(\":\",3);\n  if (parts.length != 3 || (parts[0].length() > 0 && parts[0].charAt(0) == '#')) {\n    continue;\n  }\n  if (parts[0].length() > 0) {\n    cmds.put(parts[0],new Cmd(parts[0],parts[1],parts[2]));\n    order.add(parts[0]);\n  }\n else {\n    order.add(parts[2]);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 90,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1713,
        "startLineNumber" : 65,
        "startColumnNumber" : 178,
        "endLineNumber" : 110,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  InputStream is=FatJarMain.class.getResourceAsStream(\"/mainClasses\");\n  if (is == null) {\n    System.err.println(\"Couldn't find /mainClasses in classpath.\");\n    System.exit(3);\n  }\n  BufferedReader br=new BufferedReader(new InputStreamReader(is));\n  String line;\n  while ((line=br.readLine()) != null) {\n    String parts[]=line.split(\":\",3);\n    if (parts.length != 3 || (parts[0].length() > 0 && parts[0].charAt(0) == '#')) {\n      continue;\n    }\n    if (parts[0].length() > 0) {\n      cmds.put(parts[0],new Cmd(parts[0],parts[1],parts[2]));\n      order.add(parts[0]);\n    }\n else {\n      order.add(parts[2]);\n    }\n  }\n  if (args.length == 0) {\n    doHelp();\n    return;\n  }\n  Cmd cmd=cmds.get(args[0]);\n  if (cmd == null) {\n    doHelp();\n    return;\n  }\n  Class<?> clazz=Class.forName(cmd.clazz);\n  Method main=clazz.getMethod(\"main\",String[].class);\n  String newArgs[]=new String[args.length - 1];\n  System.arraycopy(args,1,newArgs,0,newArgs.length);\n  try {\n    main.invoke(null,(Object)newArgs);\n  }\n catch (  InvocationTargetException e) {\n    if (e.getCause() != null) {\n      e.getCause().printStackTrace();\n    }\n else {\n      e.printStackTrace();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 256,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2289,
        "startLineNumber" : 54,
        "startColumnNumber" : 4,
        "endLineNumber" : 110,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * @param args the first parameter of args will be used as anindex into the /mainClasses resource. The rest will be passed to the mainClass to run.\n * @throws IOException \n * @throws ClassNotFoundException \n * @throws NoSuchMethodException \n * @throws SecurityException \n * @throws IllegalAccessException \n * @throws IllegalArgumentException \n */\npublic static void main(String[] args) throws IOException, ClassNotFoundException, SecurityException, NoSuchMethodException, IllegalArgumentException, IllegalAccessException {\n  InputStream is=FatJarMain.class.getResourceAsStream(\"/mainClasses\");\n  if (is == null) {\n    System.err.println(\"Couldn't find /mainClasses in classpath.\");\n    System.exit(3);\n  }\n  BufferedReader br=new BufferedReader(new InputStreamReader(is));\n  String line;\n  while ((line=br.readLine()) != null) {\n    String parts[]=line.split(\":\",3);\n    if (parts.length != 3 || (parts[0].length() > 0 && parts[0].charAt(0) == '#')) {\n      continue;\n    }\n    if (parts[0].length() > 0) {\n      cmds.put(parts[0],new Cmd(parts[0],parts[1],parts[2]));\n      order.add(parts[0]);\n    }\n else {\n      order.add(parts[2]);\n    }\n  }\n  if (args.length == 0) {\n    doHelp();\n    return;\n  }\n  Cmd cmd=cmds.get(args[0]);\n  if (cmd == null) {\n    doHelp();\n    return;\n  }\n  Class<?> clazz=Class.forName(cmd.clazz);\n  Method main=clazz.getMethod(\"main\",String[].class);\n  String newArgs[]=new String[args.length - 1];\n  System.arraycopy(args,1,newArgs,0,newArgs.length);\n  try {\n    main.invoke(null,(Object)newArgs);\n  }\n catch (  InvocationTargetException e) {\n    if (e.getCause() != null) {\n      e.getCause().printStackTrace();\n    }\n else {\n      e.printStackTrace();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 280,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 75,
        "startColumnNumber" : 16,
        "endLineNumber" : 75,
        "endColumnNumber" : 89
      },
      "nodeContext" : "parts.length != 3 || (parts[0].length() > 0 && parts[0].charAt(0) == '#')",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 23,
      "astHeight" : 7
    },
    "tokenLength" : 5,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 25,
    "startLineNumber" : 75,
    "startColumnNumber" : 63,
    "endLineNumber" : 75,
    "endColumnNumber" : 88
  } ],
  "layoutRelationDataList" : [ ]
}