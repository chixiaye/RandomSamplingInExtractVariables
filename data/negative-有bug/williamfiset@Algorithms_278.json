{
  "id" : 278,
  "expression" : "Math.random()",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/test/java/com/williamfiset/algorithms/datastructures/linkedlist/LinkedListTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Math.random()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 236,
      "startColumnNumber" : 47,
      "endLineNumber" : 236,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 236,
        "startColumnNumber" : 32,
        "endLineNumber" : 236,
        "endColumnNumber" : 60
      },
      "nodeContext" : "MAX_RAND_NUM * Math.random()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 236,
        "startColumnNumber" : 31,
        "endLineNumber" : 236,
        "endColumnNumber" : 61
      },
      "nodeContext" : "(MAX_RAND_NUM * Math.random())",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 236,
        "startColumnNumber" : 25,
        "endLineNumber" : 236,
        "endColumnNumber" : 61
      },
      "nodeContext" : "(int)(MAX_RAND_NUM * Math.random())",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 236,
        "startColumnNumber" : 16,
        "endLineNumber" : 236,
        "endColumnNumber" : 61
      },
      "nodeContext" : "rm_val=(int)(MAX_RAND_NUM * Math.random())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 236,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 62
      },
      "nodeContext" : "Integer rm_val=(int)(MAX_RAND_NUM * Math.random());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 412,
        "startLineNumber" : 234,
        "startColumnNumber" : 48,
        "endLineNumber" : 243,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Integer rm_val=(int)(MAX_RAND_NUM * Math.random());\n  assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n  assertEquals(javaLinkedList.size(),list.size());\n  java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n  java.util.Iterator<Integer> iter2=list.iterator();\n  while (iter1.hasNext())   assertEquals(iter1.next(),iter2.next());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 77,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 454,
        "startLineNumber" : 234,
        "startColumnNumber" : 6,
        "endLineNumber" : 243,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < randNums.size(); i++) {\n  Integer rm_val=(int)(MAX_RAND_NUM * Math.random());\n  assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n  assertEquals(javaLinkedList.size(),list.size());\n  java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n  java.util.Iterator<Integer> iter2=list.iterator();\n  while (iter1.hasNext())   assertEquals(iter1.next(),iter2.next());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 90,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1527,
        "startLineNumber" : 197,
        "startColumnNumber" : 48,
        "endLineNumber" : 244,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  list.clear();\n  javaLinkedList.clear();\n  List<Integer> randNums=genRandList(TEST_SZ);\n  for (  Integer value : randNums) {\n    javaLinkedList.add(value);\n    list.add(value);\n  }\n  Collections.shuffle(randNums);\n  for (int i=0; i < randNums.size(); i++) {\n    Integer rm_val=randNums.get(i);\n    assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n    assertEquals(javaLinkedList.size(),list.size());\n    java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n    java.util.Iterator<Integer> iter2=list.iterator();\n    while (iter1.hasNext())     assertEquals(iter1.next(),iter2.next());\n    iter1=javaLinkedList.iterator();\n    iter2=list.iterator();\n    while (iter1.hasNext())     assertEquals(iter1.next(),iter2.next());\n  }\n  list.clear();\n  javaLinkedList.clear();\n  for (  Integer value : randNums) {\n    javaLinkedList.add(value);\n    list.add(value);\n  }\n  for (int i=0; i < randNums.size(); i++) {\n    Integer rm_val=(int)(MAX_RAND_NUM * Math.random());\n    assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n    assertEquals(javaLinkedList.size(),list.size());\n    java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n    java.util.Iterator<Integer> iter2=list.iterator();\n    while (iter1.hasNext())     assertEquals(iter1.next(),iter2.next());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 268,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1571,
        "startLineNumber" : 197,
        "startColumnNumber" : 4,
        "endLineNumber" : 244,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int loops=0; loops < LOOPS; loops++) {\n  list.clear();\n  javaLinkedList.clear();\n  List<Integer> randNums=genRandList(TEST_SZ);\n  for (  Integer value : randNums) {\n    javaLinkedList.add(value);\n    list.add(value);\n  }\n  Collections.shuffle(randNums);\n  for (int i=0; i < randNums.size(); i++) {\n    Integer rm_val=randNums.get(i);\n    assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n    assertEquals(javaLinkedList.size(),list.size());\n    java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n    java.util.Iterator<Integer> iter2=list.iterator();\n    while (iter1.hasNext())     assertEquals(iter1.next(),iter2.next());\n    iter1=javaLinkedList.iterator();\n    iter2=list.iterator();\n    while (iter1.hasNext())     assertEquals(iter1.next(),iter2.next());\n  }\n  list.clear();\n  javaLinkedList.clear();\n  for (  Integer value : randNums) {\n    javaLinkedList.add(value);\n    list.add(value);\n  }\n  for (int i=0; i < randNums.size(); i++) {\n    Integer rm_val=(int)(MAX_RAND_NUM * Math.random());\n    assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n    assertEquals(javaLinkedList.size(),list.size());\n    java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n    java.util.Iterator<Integer> iter2=list.iterator();\n    while (iter1.hasNext())     assertEquals(iter1.next(),iter2.next());\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 279,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1662,
        "startLineNumber" : 195,
        "startColumnNumber" : 39,
        "endLineNumber" : 245,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  java.util.LinkedList<Integer> javaLinkedList=new java.util.LinkedList<>();\n  for (int loops=0; loops < LOOPS; loops++) {\n    list.clear();\n    javaLinkedList.clear();\n    List<Integer> randNums=genRandList(TEST_SZ);\n    for (    Integer value : randNums) {\n      javaLinkedList.add(value);\n      list.add(value);\n    }\n    Collections.shuffle(randNums);\n    for (int i=0; i < randNums.size(); i++) {\n      Integer rm_val=randNums.get(i);\n      assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n      assertEquals(javaLinkedList.size(),list.size());\n      java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n      java.util.Iterator<Integer> iter2=list.iterator();\n      while (iter1.hasNext())       assertEquals(iter1.next(),iter2.next());\n      iter1=javaLinkedList.iterator();\n      iter2=list.iterator();\n      while (iter1.hasNext())       assertEquals(iter1.next(),iter2.next());\n    }\n    list.clear();\n    javaLinkedList.clear();\n    for (    Integer value : randNums) {\n      javaLinkedList.add(value);\n      list.add(value);\n    }\n    for (int i=0; i < randNums.size(); i++) {\n      Integer rm_val=(int)(MAX_RAND_NUM * Math.random());\n      assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n      assertEquals(javaLinkedList.size(),list.size());\n      java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n      java.util.Iterator<Integer> iter2=list.iterator();\n      while (iter1.hasNext())       assertEquals(iter1.next(),iter2.next());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 300,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1707,
        "startLineNumber" : 194,
        "startColumnNumber" : 2,
        "endLineNumber" : 245,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testRandomizedRemoving(){\n  java.util.LinkedList<Integer> javaLinkedList=new java.util.LinkedList<>();\n  for (int loops=0; loops < LOOPS; loops++) {\n    list.clear();\n    javaLinkedList.clear();\n    List<Integer> randNums=genRandList(TEST_SZ);\n    for (    Integer value : randNums) {\n      javaLinkedList.add(value);\n      list.add(value);\n    }\n    Collections.shuffle(randNums);\n    for (int i=0; i < randNums.size(); i++) {\n      Integer rm_val=randNums.get(i);\n      assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n      assertEquals(javaLinkedList.size(),list.size());\n      java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n      java.util.Iterator<Integer> iter2=list.iterator();\n      while (iter1.hasNext())       assertEquals(iter1.next(),iter2.next());\n      iter1=javaLinkedList.iterator();\n      iter2=list.iterator();\n      while (iter1.hasNext())       assertEquals(iter1.next(),iter2.next());\n    }\n    list.clear();\n    javaLinkedList.clear();\n    for (    Integer value : randNums) {\n      javaLinkedList.add(value);\n      list.add(value);\n    }\n    for (int i=0; i < randNums.size(); i++) {\n      Integer rm_val=(int)(MAX_RAND_NUM * Math.random());\n      assertEquals(javaLinkedList.remove(rm_val),list.remove(rm_val));\n      assertEquals(javaLinkedList.size(),list.size());\n      java.util.Iterator<Integer> iter1=javaLinkedList.iterator();\n      java.util.Iterator<Integer> iter2=list.iterator();\n      while (iter1.hasNext())       assertEquals(iter1.next(),iter2.next());\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 306,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 236,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 62
      },
      "nodeContext" : "Integer rm_val=(int)(MAX_RAND_NUM * Math.random());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 7
    },
    "tokenLength" : 2,
    "type" : "double"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 236,
    "startColumnNumber" : 47,
    "endLineNumber" : 236,
    "endColumnNumber" : 60
  } ],
  "layoutRelationDataList" : [ ]
}