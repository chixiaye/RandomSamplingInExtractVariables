{
  "id" : 174,
  "expression" : "processor.getClass()",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/eclipseAgent/lombok/eclipse/agent/PatchFixes.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "processor.getClass()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 112,
      "startColumnNumber" : 15,
      "endLineNumber" : 112,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 112,
        "startColumnNumber" : 15,
        "endLineNumber" : 112,
        "endColumnNumber" : 63
      },
      "nodeContext" : "processor.getClass().getDeclaredField(\"fPublic\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 112,
        "startColumnNumber" : 15,
        "endLineNumber" : 112,
        "endColumnNumber" : 78
      },
      "nodeContext" : "processor.getClass().getDeclaredField(\"fPublic\").get(processor)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 112,
        "startColumnNumber" : 6,
        "endLineNumber" : 112,
        "endColumnNumber" : 78
      },
      "nodeContext" : "(Boolean)processor.getClass().getDeclaredField(\"fPublic\").get(processor)",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 112,
        "startColumnNumber" : 2,
        "endLineNumber" : 112,
        "endColumnNumber" : 108
      },
      "nodeContext" : "if ((Boolean)processor.getClass().getDeclaredField(\"fPublic\").get(processor)) signature.append(\"public \");\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1408,
        "startLineNumber" : 97,
        "startColumnNumber" : 181,
        "endLineNumber" : 130,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (!isGenerated(declaration))   return original;\n  List<org.eclipse.jdt.core.dom.Annotation> annotations=new ArrayList<org.eclipse.jdt.core.dom.Annotation>();\n  for (  Object modifier : declaration.modifiers()) {\n    if (modifier instanceof org.eclipse.jdt.core.dom.Annotation) {\n      org.eclipse.jdt.core.dom.Annotation annotation=(org.eclipse.jdt.core.dom.Annotation)modifier;\n      String qualifiedAnnotationName=annotation.resolveTypeBinding().getQualifiedName();\n      if (!\"java.lang.Override\".equals(qualifiedAnnotationName) && !\"java.lang.SuppressWarnings\".equals(qualifiedAnnotationName))       annotations.add(annotation);\n    }\n  }\n  StringBuilder signature=new StringBuilder();\n  addAnnotations(annotations,signature);\n  if ((Boolean)processor.getClass().getDeclaredField(\"fPublic\").get(processor))   signature.append(\"public \");\n  if ((Boolean)processor.getClass().getDeclaredField(\"fAbstract\").get(processor))   signature.append(\"abstract \");\n  signature.append(declaration.getReturnType2().toString()).append(\" \").append(declaration.getName().getFullyQualifiedName()).append(\"(\");\n  boolean first=true;\n  for (  Object parameter : declaration.parameters()) {\n    if (!first)     signature.append(\", \");\n    first=false;\n    signature.append(parameter);\n  }\n  signature.append(\");\");\n  return signature.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 234,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1588,
        "startLineNumber" : 97,
        "startColumnNumber" : 1,
        "endLineNumber" : 130,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public static java.lang.String getRealMethodDeclarationSource(java.lang.String original,Object processor,org.eclipse.jdt.core.dom.MethodDeclaration declaration) throws Exception {\n  if (!isGenerated(declaration))   return original;\n  List<org.eclipse.jdt.core.dom.Annotation> annotations=new ArrayList<org.eclipse.jdt.core.dom.Annotation>();\n  for (  Object modifier : declaration.modifiers()) {\n    if (modifier instanceof org.eclipse.jdt.core.dom.Annotation) {\n      org.eclipse.jdt.core.dom.Annotation annotation=(org.eclipse.jdt.core.dom.Annotation)modifier;\n      String qualifiedAnnotationName=annotation.resolveTypeBinding().getQualifiedName();\n      if (!\"java.lang.Override\".equals(qualifiedAnnotationName) && !\"java.lang.SuppressWarnings\".equals(qualifiedAnnotationName))       annotations.add(annotation);\n    }\n  }\n  StringBuilder signature=new StringBuilder();\n  addAnnotations(annotations,signature);\n  if ((Boolean)processor.getClass().getDeclaredField(\"fPublic\").get(processor))   signature.append(\"public \");\n  if ((Boolean)processor.getClass().getDeclaredField(\"fAbstract\").get(processor))   signature.append(\"abstract \");\n  signature.append(declaration.getReturnType2().toString()).append(\" \").append(declaration.getName().getFullyQualifiedName()).append(\"(\");\n  boolean first=true;\n  for (  Object parameter : declaration.parameters()) {\n    if (!first)     signature.append(\", \");\n    first=false;\n    signature.append(parameter);\n  }\n  signature.append(\");\");\n  return signature.toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 272,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 112,
        "startColumnNumber" : 2,
        "endLineNumber" : 112,
        "endColumnNumber" : 108
      },
      "nodeContext" : "if ((Boolean)processor.getClass().getDeclaredField(\"fPublic\").get(processor)) signature.append(\"public \");\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "java.lang.Class<>"
  }, {
    "nodeContext" : "processor.getClass()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 113,
      "startColumnNumber" : 15,
      "endLineNumber" : 113,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 113,
        "startColumnNumber" : 15,
        "endLineNumber" : 113,
        "endColumnNumber" : 65
      },
      "nodeContext" : "processor.getClass().getDeclaredField(\"fAbstract\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 113,
        "startColumnNumber" : 15,
        "endLineNumber" : 113,
        "endColumnNumber" : 80
      },
      "nodeContext" : "processor.getClass().getDeclaredField(\"fAbstract\").get(processor)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 113,
        "startColumnNumber" : 6,
        "endLineNumber" : 113,
        "endColumnNumber" : 80
      },
      "nodeContext" : "(Boolean)processor.getClass().getDeclaredField(\"fAbstract\").get(processor)",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 113,
        "startColumnNumber" : 2,
        "endLineNumber" : 113,
        "endColumnNumber" : 112
      },
      "nodeContext" : "if ((Boolean)processor.getClass().getDeclaredField(\"fAbstract\").get(processor)) signature.append(\"abstract \");\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1408,
        "startLineNumber" : 97,
        "startColumnNumber" : 181,
        "endLineNumber" : 130,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (!isGenerated(declaration))   return original;\n  List<org.eclipse.jdt.core.dom.Annotation> annotations=new ArrayList<org.eclipse.jdt.core.dom.Annotation>();\n  for (  Object modifier : declaration.modifiers()) {\n    if (modifier instanceof org.eclipse.jdt.core.dom.Annotation) {\n      org.eclipse.jdt.core.dom.Annotation annotation=(org.eclipse.jdt.core.dom.Annotation)modifier;\n      String qualifiedAnnotationName=annotation.resolveTypeBinding().getQualifiedName();\n      if (!\"java.lang.Override\".equals(qualifiedAnnotationName) && !\"java.lang.SuppressWarnings\".equals(qualifiedAnnotationName))       annotations.add(annotation);\n    }\n  }\n  StringBuilder signature=new StringBuilder();\n  addAnnotations(annotations,signature);\n  if ((Boolean)processor.getClass().getDeclaredField(\"fPublic\").get(processor))   signature.append(\"public \");\n  if ((Boolean)processor.getClass().getDeclaredField(\"fAbstract\").get(processor))   signature.append(\"abstract \");\n  signature.append(declaration.getReturnType2().toString()).append(\" \").append(declaration.getName().getFullyQualifiedName()).append(\"(\");\n  boolean first=true;\n  for (  Object parameter : declaration.parameters()) {\n    if (!first)     signature.append(\", \");\n    first=false;\n    signature.append(parameter);\n  }\n  signature.append(\");\");\n  return signature.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 234,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1588,
        "startLineNumber" : 97,
        "startColumnNumber" : 1,
        "endLineNumber" : 130,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public static java.lang.String getRealMethodDeclarationSource(java.lang.String original,Object processor,org.eclipse.jdt.core.dom.MethodDeclaration declaration) throws Exception {\n  if (!isGenerated(declaration))   return original;\n  List<org.eclipse.jdt.core.dom.Annotation> annotations=new ArrayList<org.eclipse.jdt.core.dom.Annotation>();\n  for (  Object modifier : declaration.modifiers()) {\n    if (modifier instanceof org.eclipse.jdt.core.dom.Annotation) {\n      org.eclipse.jdt.core.dom.Annotation annotation=(org.eclipse.jdt.core.dom.Annotation)modifier;\n      String qualifiedAnnotationName=annotation.resolveTypeBinding().getQualifiedName();\n      if (!\"java.lang.Override\".equals(qualifiedAnnotationName) && !\"java.lang.SuppressWarnings\".equals(qualifiedAnnotationName))       annotations.add(annotation);\n    }\n  }\n  StringBuilder signature=new StringBuilder();\n  addAnnotations(annotations,signature);\n  if ((Boolean)processor.getClass().getDeclaredField(\"fPublic\").get(processor))   signature.append(\"public \");\n  if ((Boolean)processor.getClass().getDeclaredField(\"fAbstract\").get(processor))   signature.append(\"abstract \");\n  signature.append(declaration.getReturnType2().toString()).append(\" \").append(declaration.getName().getFullyQualifiedName()).append(\"(\");\n  boolean first=true;\n  for (  Object parameter : declaration.parameters()) {\n    if (!first)     signature.append(\", \");\n    first=false;\n    signature.append(parameter);\n  }\n  signature.append(\");\");\n  return signature.toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 272,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 113,
        "startColumnNumber" : 2,
        "endLineNumber" : 113,
        "endColumnNumber" : 112
      },
      "nodeContext" : "if ((Boolean)processor.getClass().getDeclaredField(\"fAbstract\").get(processor)) signature.append(\"abstract \");\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "java.lang.Class<>"
  } ],
  "positionList" : [ {
    "charLength" : 20,
    "startLineNumber" : 112,
    "startColumnNumber" : 15,
    "endLineNumber" : 112,
    "endColumnNumber" : 35
  }, {
    "charLength" : 20,
    "startLineNumber" : 113,
    "startColumnNumber" : 15,
    "endLineNumber" : 113,
    "endColumnNumber" : 35
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}