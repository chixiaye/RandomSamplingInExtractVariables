{
  "id" : 96,
  "expression" : "AqueryOptions.class",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/main/java/com/google/devtools/build/lib/runtime/commands/AqueryCommand.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "AqueryOptions.class",
    "nodeType" : "TypeLiteral",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 73,
      "startColumnNumber" : 53,
      "endLineNumber" : 73,
      "endColumnNumber" : 72
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 73,
        "startColumnNumber" : 34,
        "endLineNumber" : 73,
        "endColumnNumber" : 73
      },
      "nodeContext" : "options.getOptions(AqueryOptions.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 73,
        "startColumnNumber" : 18,
        "endLineNumber" : 73,
        "endColumnNumber" : 73
      },
      "nodeContext" : "aqueryOptions=options.getOptions(AqueryOptions.class)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 73,
        "endColumnNumber" : 74
      },
      "nodeContext" : "AqueryOptions aqueryOptions=options.getOptions(AqueryOptions.class);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3058,
        "startLineNumber" : 71,
        "startColumnNumber" : 87,
        "endLineNumber" : 144,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  AqueryOptions aqueryOptions=options.getOptions(AqueryOptions.class);\n  boolean queryCurrentSkyframeState=aqueryOptions.queryCurrentSkyframeState;\n  if (options.getResidue().isEmpty() && !queryCurrentSkyframeState) {\n    String message=\"Missing query expression. Use the 'help aquery' command for syntax and help.\";\n    env.getReporter().handle(Event.error(message));\n    return createFailureResult(message,Code.COMMAND_LINE_EXPRESSION_MISSING);\n  }\n  String query=Joiner.on(' ').join(options.getResidue());\n  ImmutableMap<String,QueryFunction> functions=getFunctionsMap(env);\n  QueryExpression expr;\n  try {\n    expr=query.isEmpty() ? null : QueryParser.parse(query,functions);\n  }\n catch (  QuerySyntaxException e) {\n    String message=String.format(\"Error while parsing '%s': %s\",QueryExpression.truncate(query),e.getMessage());\n    env.getReporter().handle(Event.error(message));\n    return createFailureResult(message,Code.EXPRESSION_PARSE_FAILURE);\n  }\n  ImmutableList<String> topLevelTargets;\n  try {\n    topLevelTargets=AqueryCommandUtils.getTopLevelTargets(aqueryOptions.universeScope,expr,queryCurrentSkyframeState);\n  }\n catch (  QueryException e) {\n    env.getReporter().handle(Event.error(e.getMessage()));\n    return createFailureResult(Strings.nullToEmpty(e.getMessage()),Code.SKYFRAME_STATE_WITH_COMMAND_LINE_EXPRESSION);\n  }\n  BlazeRuntime runtime=env.getRuntime();\n  BuildRequest request=BuildRequest.builder().setCommandName(getClass().getAnnotation(Command.class).name()).setId(env.getCommandId()).setOptions(options).setStartupOptions(runtime.getStartupOptionsProvider()).setOutErr(env.getReporter().getOutErr()).setTargets(topLevelTargets).setStartTimeMillis(env.getCommandStartTime()).build();\n  AqueryProcessor aqueryBuildTool;\n  try {\n    aqueryBuildTool=new AqueryProcessor(expr);\n  }\n catch (  AqueryActionFilterException e) {\n    String message=e.getMessage() + \"\\n\" + expr;\n    env.getReporter().handle(Event.error(message));\n    return createFailureResult(message,Code.INVALID_AQUERY_EXPRESSION);\n  }\n  if (queryCurrentSkyframeState) {\n    return aqueryBuildTool.dumpActionGraphFromSkyframe(env,request);\n  }\n  try {\n    return BlazeCommandResult.detailedExitCode(new BuildTool(env,aqueryBuildTool).processRequest(request,null).getDetailedExitCode());\n  }\n catch (  StackOverflowError e) {\n    String message=\"Aquery output was too large to handle: \" + query;\n    env.getReporter().handle(Event.error(message));\n    return createFailureResult(message,Code.AQUERY_OUTPUT_TOO_BIG);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 351,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3155,
        "startLineNumber" : 70,
        "startColumnNumber" : 2,
        "endLineNumber" : 144,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public BlazeCommandResult exec(CommandEnvironment env,OptionsParsingResult options){\n  AqueryOptions aqueryOptions=options.getOptions(AqueryOptions.class);\n  boolean queryCurrentSkyframeState=aqueryOptions.queryCurrentSkyframeState;\n  if (options.getResidue().isEmpty() && !queryCurrentSkyframeState) {\n    String message=\"Missing query expression. Use the 'help aquery' command for syntax and help.\";\n    env.getReporter().handle(Event.error(message));\n    return createFailureResult(message,Code.COMMAND_LINE_EXPRESSION_MISSING);\n  }\n  String query=Joiner.on(' ').join(options.getResidue());\n  ImmutableMap<String,QueryFunction> functions=getFunctionsMap(env);\n  QueryExpression expr;\n  try {\n    expr=query.isEmpty() ? null : QueryParser.parse(query,functions);\n  }\n catch (  QuerySyntaxException e) {\n    String message=String.format(\"Error while parsing '%s': %s\",QueryExpression.truncate(query),e.getMessage());\n    env.getReporter().handle(Event.error(message));\n    return createFailureResult(message,Code.EXPRESSION_PARSE_FAILURE);\n  }\n  ImmutableList<String> topLevelTargets;\n  try {\n    topLevelTargets=AqueryCommandUtils.getTopLevelTargets(aqueryOptions.universeScope,expr,queryCurrentSkyframeState);\n  }\n catch (  QueryException e) {\n    env.getReporter().handle(Event.error(e.getMessage()));\n    return createFailureResult(Strings.nullToEmpty(e.getMessage()),Code.SKYFRAME_STATE_WITH_COMMAND_LINE_EXPRESSION);\n  }\n  BlazeRuntime runtime=env.getRuntime();\n  BuildRequest request=BuildRequest.builder().setCommandName(getClass().getAnnotation(Command.class).name()).setId(env.getCommandId()).setOptions(options).setStartupOptions(runtime.getStartupOptionsProvider()).setOutErr(env.getReporter().getOutErr()).setTargets(topLevelTargets).setStartTimeMillis(env.getCommandStartTime()).build();\n  AqueryProcessor aqueryBuildTool;\n  try {\n    aqueryBuildTool=new AqueryProcessor(expr);\n  }\n catch (  AqueryActionFilterException e) {\n    String message=e.getMessage() + \"\\n\" + expr;\n    env.getReporter().handle(Event.error(message));\n    return createFailureResult(message,Code.INVALID_AQUERY_EXPRESSION);\n  }\n  if (queryCurrentSkyframeState) {\n    return aqueryBuildTool.dumpActionGraphFromSkyframe(env,request);\n  }\n  try {\n    return BlazeCommandResult.detailedExitCode(new BuildTool(env,aqueryBuildTool).processRequest(request,null).getDetailedExitCode());\n  }\n catch (  StackOverflowError e) {\n    String message=\"Aquery output was too large to handle: \" + query;\n    env.getReporter().handle(Event.error(message));\n    return createFailureResult(message,Code.AQUERY_OUTPUT_TOO_BIG);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 366,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 73,
        "endColumnNumber" : 74
      },
      "nodeContext" : "AqueryOptions aqueryOptions=options.getOptions(AqueryOptions.class);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<com.google.devtools.build.lib.query2.aquery.AqueryOptions>"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 73,
    "startColumnNumber" : 53,
    "endLineNumber" : 73,
    "endColumnNumber" : 72
  } ],
  "layoutRelationDataList" : [ ]
}