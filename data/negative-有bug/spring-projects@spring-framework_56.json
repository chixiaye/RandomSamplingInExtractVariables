{
  "id" : 56,
  "expression" : "urlHandlerMapping",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-websocket/src/test/java/org/springframework/web/socket/config/HandlersBeanDefinitionParserTests.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "urlHandlerMapping",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 125,
      "startColumnNumber" : 18,
      "endLineNumber" : 125,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 125,
        "startColumnNumber" : 18,
        "endLineNumber" : 125,
        "endColumnNumber" : 46
      },
      "nodeContext" : "urlHandlerMapping.getOrder()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 125,
        "startColumnNumber" : 2,
        "endLineNumber" : 125,
        "endColumnNumber" : 47
      },
      "nodeContext" : "assertEquals(2,urlHandlerMapping.getOrder())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 125,
        "startColumnNumber" : 2,
        "endLineNumber" : 125,
        "endColumnNumber" : 48
      },
      "nodeContext" : "assertEquals(2,urlHandlerMapping.getOrder());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1615,
        "startLineNumber" : 117,
        "startColumnNumber" : 43,
        "endLineNumber" : 146,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  loadBeanDefinitions(\"websocket-config-handlers-attributes.xml\");\n  HandlerMapping handlerMapping=this.appContext.getBean(HandlerMapping.class);\n  assertNotNull(handlerMapping);\n  assertTrue(handlerMapping instanceof SimpleUrlHandlerMapping);\n  SimpleUrlHandlerMapping urlHandlerMapping=(SimpleUrlHandlerMapping)handlerMapping;\n  assertEquals(2,urlHandlerMapping.getOrder());\n  WebSocketHttpRequestHandler handler=(WebSocketHttpRequestHandler)urlHandlerMapping.getUrlMap().get(\"/foo\");\n  assertNotNull(handler);\n  unwrapAndCheckDecoratedHandlerType(handler.getWebSocketHandler(),FooWebSocketHandler.class);\n  HandshakeHandler handshakeHandler=handler.getHandshakeHandler();\n  assertNotNull(handshakeHandler);\n  assertTrue(handshakeHandler instanceof TestHandshakeHandler);\n  List<HandshakeInterceptor> interceptors=handler.getHandshakeInterceptors();\n  assertThat(interceptors,contains(instanceOf(FooTestInterceptor.class),instanceOf(BarTestInterceptor.class),instanceOf(OriginHandshakeInterceptor.class)));\n  handler=(WebSocketHttpRequestHandler)urlHandlerMapping.getUrlMap().get(\"/test\");\n  assertNotNull(handler);\n  unwrapAndCheckDecoratedHandlerType(handler.getWebSocketHandler(),TestWebSocketHandler.class);\n  handshakeHandler=handler.getHandshakeHandler();\n  assertNotNull(handshakeHandler);\n  assertTrue(handshakeHandler instanceof TestHandshakeHandler);\n  interceptors=handler.getHandshakeInterceptors();\n  assertThat(interceptors,contains(instanceOf(FooTestInterceptor.class),instanceOf(BarTestInterceptor.class),instanceOf(OriginHandshakeInterceptor.class)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 192,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1696,
        "startLineNumber" : 115,
        "startColumnNumber" : 1,
        "endLineNumber" : 146,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test @SuppressWarnings(\"unchecked\") public void webSocketHandlersAttributes(){\n  loadBeanDefinitions(\"websocket-config-handlers-attributes.xml\");\n  HandlerMapping handlerMapping=this.appContext.getBean(HandlerMapping.class);\n  assertNotNull(handlerMapping);\n  assertTrue(handlerMapping instanceof SimpleUrlHandlerMapping);\n  SimpleUrlHandlerMapping urlHandlerMapping=(SimpleUrlHandlerMapping)handlerMapping;\n  assertEquals(2,urlHandlerMapping.getOrder());\n  WebSocketHttpRequestHandler handler=(WebSocketHttpRequestHandler)urlHandlerMapping.getUrlMap().get(\"/foo\");\n  assertNotNull(handler);\n  unwrapAndCheckDecoratedHandlerType(handler.getWebSocketHandler(),FooWebSocketHandler.class);\n  HandshakeHandler handshakeHandler=handler.getHandshakeHandler();\n  assertNotNull(handshakeHandler);\n  assertTrue(handshakeHandler instanceof TestHandshakeHandler);\n  List<HandshakeInterceptor> interceptors=handler.getHandshakeInterceptors();\n  assertThat(interceptors,contains(instanceOf(FooTestInterceptor.class),instanceOf(BarTestInterceptor.class),instanceOf(OriginHandshakeInterceptor.class)));\n  handler=(WebSocketHttpRequestHandler)urlHandlerMapping.getUrlMap().get(\"/test\");\n  assertNotNull(handler);\n  unwrapAndCheckDecoratedHandlerType(handler.getWebSocketHandler(),TestWebSocketHandler.class);\n  handshakeHandler=handler.getHandshakeHandler();\n  assertNotNull(handshakeHandler);\n  assertTrue(handshakeHandler instanceof TestHandshakeHandler);\n  interceptors=handler.getHandshakeInterceptors();\n  assertThat(interceptors,contains(instanceOf(FooTestInterceptor.class),instanceOf(BarTestInterceptor.class),instanceOf(OriginHandshakeInterceptor.class)));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 201,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 125,
        "startColumnNumber" : 2,
        "endLineNumber" : 125,
        "endColumnNumber" : 48
      },
      "nodeContext" : "assertEquals(2,urlHandlerMapping.getOrder());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"
  }, {
    "nodeContext" : "urlHandlerMapping",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 127,
      "startColumnNumber" : 70,
      "endLineNumber" : 127,
      "endColumnNumber" : 87
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 127,
        "startColumnNumber" : 70,
        "endLineNumber" : 127,
        "endColumnNumber" : 99
      },
      "nodeContext" : "urlHandlerMapping.getUrlMap()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 127,
        "startColumnNumber" : 70,
        "endLineNumber" : 127,
        "endColumnNumber" : 111
      },
      "nodeContext" : "urlHandlerMapping.getUrlMap().get(\"/foo\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 127,
        "startColumnNumber" : 40,
        "endLineNumber" : 127,
        "endColumnNumber" : 111
      },
      "nodeContext" : "(WebSocketHttpRequestHandler)urlHandlerMapping.getUrlMap().get(\"/foo\")",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 127,
        "startColumnNumber" : 30,
        "endLineNumber" : 127,
        "endColumnNumber" : 111
      },
      "nodeContext" : "handler=(WebSocketHttpRequestHandler)urlHandlerMapping.getUrlMap().get(\"/foo\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 127,
        "startColumnNumber" : 2,
        "endLineNumber" : 127,
        "endColumnNumber" : 112
      },
      "nodeContext" : "WebSocketHttpRequestHandler handler=(WebSocketHttpRequestHandler)urlHandlerMapping.getUrlMap().get(\"/foo\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1615,
        "startLineNumber" : 117,
        "startColumnNumber" : 43,
        "endLineNumber" : 146,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  loadBeanDefinitions(\"websocket-config-handlers-attributes.xml\");\n  HandlerMapping handlerMapping=this.appContext.getBean(HandlerMapping.class);\n  assertNotNull(handlerMapping);\n  assertTrue(handlerMapping instanceof SimpleUrlHandlerMapping);\n  SimpleUrlHandlerMapping urlHandlerMapping=(SimpleUrlHandlerMapping)handlerMapping;\n  assertEquals(2,urlHandlerMapping.getOrder());\n  WebSocketHttpRequestHandler handler=(WebSocketHttpRequestHandler)urlHandlerMapping.getUrlMap().get(\"/foo\");\n  assertNotNull(handler);\n  unwrapAndCheckDecoratedHandlerType(handler.getWebSocketHandler(),FooWebSocketHandler.class);\n  HandshakeHandler handshakeHandler=handler.getHandshakeHandler();\n  assertNotNull(handshakeHandler);\n  assertTrue(handshakeHandler instanceof TestHandshakeHandler);\n  List<HandshakeInterceptor> interceptors=handler.getHandshakeInterceptors();\n  assertThat(interceptors,contains(instanceOf(FooTestInterceptor.class),instanceOf(BarTestInterceptor.class),instanceOf(OriginHandshakeInterceptor.class)));\n  handler=(WebSocketHttpRequestHandler)urlHandlerMapping.getUrlMap().get(\"/test\");\n  assertNotNull(handler);\n  unwrapAndCheckDecoratedHandlerType(handler.getWebSocketHandler(),TestWebSocketHandler.class);\n  handshakeHandler=handler.getHandshakeHandler();\n  assertNotNull(handshakeHandler);\n  assertTrue(handshakeHandler instanceof TestHandshakeHandler);\n  interceptors=handler.getHandshakeInterceptors();\n  assertThat(interceptors,contains(instanceOf(FooTestInterceptor.class),instanceOf(BarTestInterceptor.class),instanceOf(OriginHandshakeInterceptor.class)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 192,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1696,
        "startLineNumber" : 115,
        "startColumnNumber" : 1,
        "endLineNumber" : 146,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test @SuppressWarnings(\"unchecked\") public void webSocketHandlersAttributes(){\n  loadBeanDefinitions(\"websocket-config-handlers-attributes.xml\");\n  HandlerMapping handlerMapping=this.appContext.getBean(HandlerMapping.class);\n  assertNotNull(handlerMapping);\n  assertTrue(handlerMapping instanceof SimpleUrlHandlerMapping);\n  SimpleUrlHandlerMapping urlHandlerMapping=(SimpleUrlHandlerMapping)handlerMapping;\n  assertEquals(2,urlHandlerMapping.getOrder());\n  WebSocketHttpRequestHandler handler=(WebSocketHttpRequestHandler)urlHandlerMapping.getUrlMap().get(\"/foo\");\n  assertNotNull(handler);\n  unwrapAndCheckDecoratedHandlerType(handler.getWebSocketHandler(),FooWebSocketHandler.class);\n  HandshakeHandler handshakeHandler=handler.getHandshakeHandler();\n  assertNotNull(handshakeHandler);\n  assertTrue(handshakeHandler instanceof TestHandshakeHandler);\n  List<HandshakeInterceptor> interceptors=handler.getHandshakeInterceptors();\n  assertThat(interceptors,contains(instanceOf(FooTestInterceptor.class),instanceOf(BarTestInterceptor.class),instanceOf(OriginHandshakeInterceptor.class)));\n  handler=(WebSocketHttpRequestHandler)urlHandlerMapping.getUrlMap().get(\"/test\");\n  assertNotNull(handler);\n  unwrapAndCheckDecoratedHandlerType(handler.getWebSocketHandler(),TestWebSocketHandler.class);\n  handshakeHandler=handler.getHandshakeHandler();\n  assertNotNull(handshakeHandler);\n  assertTrue(handshakeHandler instanceof TestHandshakeHandler);\n  interceptors=handler.getHandshakeInterceptors();\n  assertThat(interceptors,contains(instanceOf(FooTestInterceptor.class),instanceOf(BarTestInterceptor.class),instanceOf(OriginHandshakeInterceptor.class)));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 201,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 127,
        "startColumnNumber" : 2,
        "endLineNumber" : 127,
        "endColumnNumber" : 112
      },
      "nodeContext" : "WebSocketHttpRequestHandler handler=(WebSocketHttpRequestHandler)urlHandlerMapping.getUrlMap().get(\"/foo\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"
  }, {
    "nodeContext" : "urlHandlerMapping",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 137,
      "startColumnNumber" : 42,
      "endLineNumber" : 137,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 137,
        "startColumnNumber" : 42,
        "endLineNumber" : 137,
        "endColumnNumber" : 71
      },
      "nodeContext" : "urlHandlerMapping.getUrlMap()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 137,
        "startColumnNumber" : 42,
        "endLineNumber" : 137,
        "endColumnNumber" : 84
      },
      "nodeContext" : "urlHandlerMapping.getUrlMap().get(\"/test\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 137,
        "startColumnNumber" : 12,
        "endLineNumber" : 137,
        "endColumnNumber" : 84
      },
      "nodeContext" : "(WebSocketHttpRequestHandler)urlHandlerMapping.getUrlMap().get(\"/test\")",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 137,
        "startColumnNumber" : 2,
        "endLineNumber" : 137,
        "endColumnNumber" : 84
      },
      "nodeContext" : "handler=(WebSocketHttpRequestHandler)urlHandlerMapping.getUrlMap().get(\"/test\")",
      "nodeType" : "Assignment",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 137,
        "startColumnNumber" : 2,
        "endLineNumber" : 137,
        "endColumnNumber" : 85
      },
      "nodeContext" : "handler=(WebSocketHttpRequestHandler)urlHandlerMapping.getUrlMap().get(\"/test\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1615,
        "startLineNumber" : 117,
        "startColumnNumber" : 43,
        "endLineNumber" : 146,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  loadBeanDefinitions(\"websocket-config-handlers-attributes.xml\");\n  HandlerMapping handlerMapping=this.appContext.getBean(HandlerMapping.class);\n  assertNotNull(handlerMapping);\n  assertTrue(handlerMapping instanceof SimpleUrlHandlerMapping);\n  SimpleUrlHandlerMapping urlHandlerMapping=(SimpleUrlHandlerMapping)handlerMapping;\n  assertEquals(2,urlHandlerMapping.getOrder());\n  WebSocketHttpRequestHandler handler=(WebSocketHttpRequestHandler)urlHandlerMapping.getUrlMap().get(\"/foo\");\n  assertNotNull(handler);\n  unwrapAndCheckDecoratedHandlerType(handler.getWebSocketHandler(),FooWebSocketHandler.class);\n  HandshakeHandler handshakeHandler=handler.getHandshakeHandler();\n  assertNotNull(handshakeHandler);\n  assertTrue(handshakeHandler instanceof TestHandshakeHandler);\n  List<HandshakeInterceptor> interceptors=handler.getHandshakeInterceptors();\n  assertThat(interceptors,contains(instanceOf(FooTestInterceptor.class),instanceOf(BarTestInterceptor.class),instanceOf(OriginHandshakeInterceptor.class)));\n  handler=(WebSocketHttpRequestHandler)urlHandlerMapping.getUrlMap().get(\"/test\");\n  assertNotNull(handler);\n  unwrapAndCheckDecoratedHandlerType(handler.getWebSocketHandler(),TestWebSocketHandler.class);\n  handshakeHandler=handler.getHandshakeHandler();\n  assertNotNull(handshakeHandler);\n  assertTrue(handshakeHandler instanceof TestHandshakeHandler);\n  interceptors=handler.getHandshakeInterceptors();\n  assertThat(interceptors,contains(instanceOf(FooTestInterceptor.class),instanceOf(BarTestInterceptor.class),instanceOf(OriginHandshakeInterceptor.class)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 192,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1696,
        "startLineNumber" : 115,
        "startColumnNumber" : 1,
        "endLineNumber" : 146,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test @SuppressWarnings(\"unchecked\") public void webSocketHandlersAttributes(){\n  loadBeanDefinitions(\"websocket-config-handlers-attributes.xml\");\n  HandlerMapping handlerMapping=this.appContext.getBean(HandlerMapping.class);\n  assertNotNull(handlerMapping);\n  assertTrue(handlerMapping instanceof SimpleUrlHandlerMapping);\n  SimpleUrlHandlerMapping urlHandlerMapping=(SimpleUrlHandlerMapping)handlerMapping;\n  assertEquals(2,urlHandlerMapping.getOrder());\n  WebSocketHttpRequestHandler handler=(WebSocketHttpRequestHandler)urlHandlerMapping.getUrlMap().get(\"/foo\");\n  assertNotNull(handler);\n  unwrapAndCheckDecoratedHandlerType(handler.getWebSocketHandler(),FooWebSocketHandler.class);\n  HandshakeHandler handshakeHandler=handler.getHandshakeHandler();\n  assertNotNull(handshakeHandler);\n  assertTrue(handshakeHandler instanceof TestHandshakeHandler);\n  List<HandshakeInterceptor> interceptors=handler.getHandshakeInterceptors();\n  assertThat(interceptors,contains(instanceOf(FooTestInterceptor.class),instanceOf(BarTestInterceptor.class),instanceOf(OriginHandshakeInterceptor.class)));\n  handler=(WebSocketHttpRequestHandler)urlHandlerMapping.getUrlMap().get(\"/test\");\n  assertNotNull(handler);\n  unwrapAndCheckDecoratedHandlerType(handler.getWebSocketHandler(),TestWebSocketHandler.class);\n  handshakeHandler=handler.getHandshakeHandler();\n  assertNotNull(handshakeHandler);\n  assertTrue(handshakeHandler instanceof TestHandshakeHandler);\n  interceptors=handler.getHandshakeInterceptors();\n  assertThat(interceptors,contains(instanceOf(FooTestInterceptor.class),instanceOf(BarTestInterceptor.class),instanceOf(OriginHandshakeInterceptor.class)));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 201,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 137,
        "startColumnNumber" : 2,
        "endLineNumber" : 137,
        "endColumnNumber" : 85
      },
      "nodeContext" : "handler=(WebSocketHttpRequestHandler)urlHandlerMapping.getUrlMap().get(\"/test\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 125,
    "startColumnNumber" : 18,
    "endLineNumber" : 125,
    "endColumnNumber" : 35
  }, {
    "charLength" : 17,
    "startLineNumber" : 127,
    "startColumnNumber" : 70,
    "endLineNumber" : 127,
    "endColumnNumber" : 87
  }, {
    "charLength" : 17,
    "startLineNumber" : 137,
    "startColumnNumber" : 42,
    "endLineNumber" : 137,
    "endColumnNumber" : 59
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  } ]
}