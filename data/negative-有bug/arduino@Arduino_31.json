{
  "id" : 31,
  "expression" : "!tokenMarker.supportsMultilineTokens()",
  "projectName" : "arduino@Arduino",
  "commitID" : "cf1879f948e0c1fa9ddd91f7348fbdd07fd870cb",
  "filePath" : "/app/src/processing/app/syntax/SyntaxDocument.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "!tokenMarker.supportsMultilineTokens()",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 38,
      "startLineNumber" : 69,
      "startColumnNumber" : 42,
      "endLineNumber" : 69,
      "endColumnNumber" : 80
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 69,
        "startColumnNumber" : 19,
        "endLineNumber" : 69,
        "endColumnNumber" : 80
      },
      "nodeContext" : "tokenMarker == null || !tokenMarker.supportsMultilineTokens()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 69,
        "startColumnNumber" : 16,
        "endLineNumber" : 70,
        "endColumnNumber" : 31
      },
      "nodeContext" : "if (tokenMarker == null || !tokenMarker.supportsMultilineTokens()) return;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 929,
        "startLineNumber" : 68,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (tokenMarker == null || !tokenMarker.supportsMultilineTokens())   return;\n  Segment lineSegment=new Segment();\n  Element map=getDefaultRootElement();\n  len+=start;\n  try {\n    for (int i=start; i < len; i++) {\n      Element lineElement=map.getElement(i);\n      int lineStart=lineElement.getStartOffset();\n      getText(lineStart,lineElement.getEndOffset() - lineStart - 1,lineSegment);\n      tokenMarker.markTokens(lineSegment,i);\n    }\n  }\n catch (  BadLocationException bl) {\n    bl.printStackTrace();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 87,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1307,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 9
      },
      "nodeContext" : "/** \n * Reparses the document, by passing the specified lines to the token marker. This should be called after a large quantity of text is first inserted.\n * @param start The first line to parse\n * @param len The number of lines, after the first one to parse\n */\npublic void tokenizeLines(int start,int len){\n  if (tokenMarker == null || !tokenMarker.supportsMultilineTokens())   return;\n  Segment lineSegment=new Segment();\n  Element map=getDefaultRootElement();\n  len+=start;\n  try {\n    for (int i=start; i < len; i++) {\n      Element lineElement=map.getElement(i);\n      int lineStart=lineElement.getStartOffset();\n      getText(lineStart,lineElement.getEndOffset() - lineStart - 1,lineSegment);\n      tokenMarker.markTokens(lineSegment,i);\n    }\n  }\n catch (  BadLocationException bl) {\n    bl.printStackTrace();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 98,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 69,
        "startColumnNumber" : 19,
        "endLineNumber" : 69,
        "endColumnNumber" : 80
      },
      "nodeContext" : "tokenMarker == null || !tokenMarker.supportsMultilineTokens()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 38,
    "startLineNumber" : 69,
    "startColumnNumber" : 42,
    "endLineNumber" : 69,
    "endColumnNumber" : 80
  } ],
  "layoutRelationDataList" : [ ]
}