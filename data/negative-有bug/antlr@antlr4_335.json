{
  "id" : 335,
  "expression" : "getMajorMinorVersion(generatingToolVersion)",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/runtime/Java/src/org/antlr/v4/runtime/RuntimeMetaData.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "getMajorMinorVersion(generatingToolVersion)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 43,
      "startLineNumber" : 152,
      "startColumnNumber" : 49,
      "endLineNumber" : 152,
      "endColumnNumber" : 92
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 152,
        "startColumnNumber" : 5,
        "endLineNumber" : 152,
        "endColumnNumber" : 93
      },
      "nodeContext" : "getMajorMinorVersion(runtimeVersion).equals(getMajorMinorVersion(generatingToolVersion))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 152,
        "startColumnNumber" : 4,
        "endLineNumber" : 152,
        "endColumnNumber" : 93
      },
      "nodeContext" : "!getMajorMinorVersion(runtimeVersion).equals(getMajorMinorVersion(generatingToolVersion))",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 143,
        "startLineNumber" : 151,
        "startColumnNumber" : 4,
        "endLineNumber" : 152,
        "endColumnNumber" : 93
      },
      "nodeContext" : "!runtimeVersion.equals(generatingToolVersion) && !getMajorMinorVersion(runtimeVersion).equals(getMajorMinorVersion(generatingToolVersion))",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 185,
        "startLineNumber" : 150,
        "startColumnNumber" : 3,
        "endLineNumber" : 152,
        "endColumnNumber" : 93
      },
      "nodeContext" : "runtimeConflictsWithGeneratingTool=!runtimeVersion.equals(generatingToolVersion) && !getMajorMinorVersion(runtimeVersion).equals(getMajorMinorVersion(generatingToolVersion))",
      "nodeType" : "Assignment",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 186,
        "startLineNumber" : 150,
        "startColumnNumber" : 3,
        "endLineNumber" : 152,
        "endColumnNumber" : 94
      },
      "nodeContext" : "runtimeConflictsWithGeneratingTool=!runtimeVersion.equals(generatingToolVersion) && !getMajorMinorVersion(runtimeVersion).equals(getMajorMinorVersion(generatingToolVersion));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 197,
        "startLineNumber" : 149,
        "startColumnNumber" : 37,
        "endLineNumber" : 153,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  runtimeConflictsWithGeneratingTool=!runtimeVersion.equals(generatingToolVersion) && !getMajorMinorVersion(runtimeVersion).equals(getMajorMinorVersion(generatingToolVersion));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 232,
        "startLineNumber" : 149,
        "startColumnNumber" : 2,
        "endLineNumber" : 153,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (generatingToolVersion != null) {\n  runtimeConflictsWithGeneratingTool=!runtimeVersion.equals(generatingToolVersion) && !getMajorMinorVersion(runtimeVersion).equals(getMajorMinorVersion(generatingToolVersion));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1025,
        "startLineNumber" : 144,
        "startColumnNumber" : 90,
        "endLineNumber" : 167,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String runtimeVersion=VERSION;\n  boolean runtimeConflictsWithGeneratingTool=false;\n  boolean runtimeConflictsWithCompileTimeTool=false;\n  if (generatingToolVersion != null) {\n    runtimeConflictsWithGeneratingTool=!runtimeVersion.equals(generatingToolVersion) && !getMajorMinorVersion(runtimeVersion).equals(getMajorMinorVersion(generatingToolVersion));\n  }\n  runtimeConflictsWithCompileTimeTool=!runtimeVersion.equals(compileTimeVersion) && !getMajorMinorVersion(runtimeVersion).equals(getMajorMinorVersion(compileTimeVersion));\n  if (runtimeConflictsWithGeneratingTool) {\n    System.err.printf(\"ANTLR Tool version %s used for code generation does not match the current runtime version %s%n\",generatingToolVersion,runtimeVersion);\n  }\n  if (runtimeConflictsWithCompileTimeTool) {\n    System.err.printf(\"ANTLR Runtime version %s used for parser compilation does not match the current runtime version %s%n\",compileTimeVersion,runtimeVersion);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 82,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4063,
        "startLineNumber" : 86,
        "startColumnNumber" : 1,
        "endLineNumber" : 167,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * This method provides the ability to detect mismatches between the version of ANTLR 4 used to generate a parser, the version of the ANTLR runtime a parser was compiled against, and the version of the ANTLR runtime which is currently executing. <p> The version check is designed to detect the following two specific scenarios.</p> <ul> <li>The ANTLR Tool version used for code generation does not match the currently executing runtime version.</li> <li>The ANTLR Runtime version referenced at the time a parser was compiled does not match the currently executing runtime version.</li> </ul> <p> Starting with ANTLR 4.3, the code generator emits a call to this method using two constants in each generated lexer and parser: a hard-coded constant indicating the version of the tool used to generate the parser and a reference to the compile-time constant  {@link #VERSION}. At runtime, this method is called during the initialization of the generated parser to detect mismatched versions, and notify the registered listeners prior to creating instances of the parser.</p> <p> This method does not perform any detection or filtering of semantic changes between tool and runtime versions. It simply checks for a version match and emits an error to stderr if a difference is detected.</p> <p> Note that some breaking changes between releases could result in other types of runtime exceptions, such as a  {@link LinkageError}, prior to calling this method. In these cases, the underlying version mismatch will not be reported here. This method is primarily intended to notify users of potential semantic changes between releases that do not result in binary compatibility problems which would be detected by the class loader. As with semantic changes, changes that break binary compatibility between releases are mentioned in the release notes accompanying the affected release.</p> <p> <strong>Additional note for target developers:</strong> The version check implemented by this class is designed to address specific compatibility concerns that may arise during the execution of Java applications. Other targets should consider the implementation of this method in the context of that target's known execution environment, which may or may not resemble the design provided for the Java target.</p>\n * @param generatingToolVersion The version of the tool used to generate a parser.This value may be null when called from user code that was not generated by, and does not reference, the ANTLR 4 Tool itself.\n * @param compileTimeVersion The version of the runtime the parser wascompiled against. This should always be passed using a direct reference to  {@link #VERSION}.\n */\npublic static void checkVersion(String generatingToolVersion,String compileTimeVersion){\n  String runtimeVersion=VERSION;\n  boolean runtimeConflictsWithGeneratingTool=false;\n  boolean runtimeConflictsWithCompileTimeTool=false;\n  if (generatingToolVersion != null) {\n    runtimeConflictsWithGeneratingTool=!runtimeVersion.equals(generatingToolVersion) && !getMajorMinorVersion(runtimeVersion).equals(getMajorMinorVersion(generatingToolVersion));\n  }\n  runtimeConflictsWithCompileTimeTool=!runtimeVersion.equals(compileTimeVersion) && !getMajorMinorVersion(runtimeVersion).equals(getMajorMinorVersion(compileTimeVersion));\n  if (runtimeConflictsWithGeneratingTool) {\n    System.err.printf(\"ANTLR Tool version %s used for code generation does not match the current runtime version %s%n\",generatingToolVersion,runtimeVersion);\n  }\n  if (runtimeConflictsWithCompileTimeTool) {\n    System.err.printf(\"ANTLR Runtime version %s used for parser compilation does not match the current runtime version %s%n\",compileTimeVersion,runtimeVersion);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 96,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 152,
        "startColumnNumber" : 4,
        "endLineNumber" : 152,
        "endColumnNumber" : 93
      },
      "nodeContext" : "!getMajorMinorVersion(runtimeVersion).equals(getMajorMinorVersion(generatingToolVersion))",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 43,
    "startLineNumber" : 152,
    "startColumnNumber" : 49,
    "endLineNumber" : 152,
    "endColumnNumber" : 92
  } ],
  "layoutRelationDataList" : [ ]
}