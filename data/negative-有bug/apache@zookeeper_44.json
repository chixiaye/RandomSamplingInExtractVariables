{
  "id" : 44,
  "expression" : "\"/hammers/\"",
  "projectName" : "apache@zookeeper",
  "commitID" : "c6639c9842973a7954c8baa412d6825cb833d51f",
  "filePath" : "/src/java/test/org/apache/zookeeper/test/SledgeHammer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"/hammers/\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 69,
      "startColumnNumber" : 32,
      "endLineNumber" : 69,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 69,
        "startColumnNumber" : 32,
        "endLineNumber" : 69,
        "endColumnNumber" : 47
      },
      "nodeContext" : "\"/hammers/\" + s",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 69,
        "startColumnNumber" : 28,
        "endLineNumber" : 69,
        "endColumnNumber" : 47
      },
      "nodeContext" : "s=\"/hammers/\" + s",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 69,
        "startColumnNumber" : 28,
        "endLineNumber" : 69,
        "endColumnNumber" : 48
      },
      "nodeContext" : "s=\"/hammers/\" + s;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 323,
        "startLineNumber" : 68,
        "startColumnNumber" : 53,
        "endLineNumber" : 75,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  s=\"/hammers/\" + s;\n  zk.setData(s,tag,-1);\n  for (int j=0; j < readsPerWrite; j++) {\n    zk.getData(s,false,stat);\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 35,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 352,
        "startLineNumber" : 68,
        "startColumnNumber" : 24,
        "endLineNumber" : 75,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (s.startsWith(\"hammer-\")) {\n  s=\"/hammers/\" + s;\n  zk.setData(s,tag,-1);\n  for (int j=0; j < readsPerWrite; j++) {\n    zk.getData(s,false,stat);\n  }\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 40,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 400,
        "startLineNumber" : 67,
        "startColumnNumber" : 44,
        "endLineNumber" : 76,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (s.startsWith(\"hammer-\")) {\n    s=\"/hammers/\" + s;\n    zk.setData(s,tag,-1);\n    for (int j=0; j < readsPerWrite; j++) {\n      zk.getData(s,false,stat);\n    }\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 41,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 424,
        "startLineNumber" : 67,
        "startColumnNumber" : 20,
        "endLineNumber" : 76,
        "endColumnNumber" : 21
      },
      "nodeContext" : "for (String s : childs) {\n  if (s.startsWith(\"hammer-\")) {\n    s=\"/hammers/\" + s;\n    zk.setData(s,tag,-1);\n    for (int j=0; j < readsPerWrite; j++) {\n      zk.getData(s,false,stat);\n    }\n    break;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 47,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 662,
        "startLineNumber" : 62,
        "startColumnNumber" : 20,
        "endLineNumber" : 77,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  System.out.print(i + \"\\r\");\n  List<String> childs=zk.getChildren(\"/hammers\",false);\n  Collections.shuffle(childs);\n  for (  String s : childs) {\n    if (s.startsWith(\"hammer-\")) {\n      s=\"/hammers/\" + s;\n      zk.setData(s,tag,-1);\n      for (int j=0; j < readsPerWrite; j++) {\n        zk.getData(s,false,stat);\n      }\n      break;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 75,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 869,
        "startLineNumber" : 62,
        "startColumnNumber" : 16,
        "endLineNumber" : 81,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\n  System.out.print(i + \"\\r\");\n  List<String> childs=zk.getChildren(\"/hammers\",false);\n  Collections.shuffle(childs);\n  for (  String s : childs) {\n    if (s.startsWith(\"hammer-\")) {\n      s=\"/hammers/\" + s;\n      zk.setData(s,tag,-1);\n      for (int j=0; j < readsPerWrite; j++) {\n        zk.getData(s,false,stat);\n      }\n      break;\n    }\n  }\n}\n catch (KeeperException.ConnectionLossException e) {\n}\ncatch (KeeperException e) {\n  e.printStackTrace();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 94,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 901,
        "startLineNumber" : 61,
        "startColumnNumber" : 44,
        "endLineNumber" : 82,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  try {\n    System.out.print(i + \"\\r\");\n    List<String> childs=zk.getChildren(\"/hammers\",false);\n    Collections.shuffle(childs);\n    for (    String s : childs) {\n      if (s.startsWith(\"hammer-\")) {\n        s=\"/hammers/\" + s;\n        zk.setData(s,tag,-1);\n        for (int j=0; j < readsPerWrite; j++) {\n          zk.getData(s,false,stat);\n        }\n        break;\n      }\n    }\n  }\n catch (  KeeperException.ConnectionLossException e) {\n  }\ncatch (  KeeperException e) {\n    e.printStackTrace();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 95,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 933,
        "startLineNumber" : 61,
        "startColumnNumber" : 12,
        "endLineNumber" : 82,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < count; i++) {\n  try {\n    System.out.print(i + \"\\r\");\n    List<String> childs=zk.getChildren(\"/hammers\",false);\n    Collections.shuffle(childs);\n    for (    String s : childs) {\n      if (s.startsWith(\"hammer-\")) {\n        s=\"/hammers/\" + s;\n        zk.setData(s,tag,-1);\n        for (int j=0; j < readsPerWrite; j++) {\n          zk.getData(s,false,stat);\n        }\n        break;\n      }\n    }\n  }\n catch (  KeeperException.ConnectionLossException e) {\n  }\ncatch (  KeeperException e) {\n    e.printStackTrace();\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 106,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1574,
        "startLineNumber" : 48,
        "startColumnNumber" : 12,
        "endLineNumber" : 85,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Stat stat=new Stat();\n  String path=zk.create(\"/hammers/hammer-\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL);\n  byte tag[]=(path + \" was here!\").getBytes();\nsynchronized (this) {\n    String startPath=\"/hammers/start\";\n    System.out.println(\"Waiting for \" + startPath);\n    while (zk.exists(startPath,true) == null) {\n      wait();\n    }\n    System.out.println(\"Running\");\n  }\n  for (int i=0; i < count; i++) {\n    try {\n      System.out.print(i + \"\\r\");\n      List<String> childs=zk.getChildren(\"/hammers\",false);\n      Collections.shuffle(childs);\n      for (      String s : childs) {\n        if (s.startsWith(\"hammer-\")) {\n          s=\"/hammers/\" + s;\n          zk.setData(s,tag,-1);\n          for (int j=0; j < readsPerWrite; j++) {\n            zk.getData(s,false,stat);\n          }\n          break;\n        }\n      }\n    }\n catch (    KeeperException.ConnectionLossException e) {\n    }\ncatch (    KeeperException e) {\n      e.printStackTrace();\n    }\n  }\n  System.out.println();\n  zk.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 193,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1643,
        "startLineNumber" : 48,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  Stat stat=new Stat();\n  String path=zk.create(\"/hammers/hammer-\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL);\n  byte tag[]=(path + \" was here!\").getBytes();\nsynchronized (this) {\n    String startPath=\"/hammers/start\";\n    System.out.println(\"Waiting for \" + startPath);\n    while (zk.exists(startPath,true) == null) {\n      wait();\n    }\n    System.out.println(\"Running\");\n  }\n  for (int i=0; i < count; i++) {\n    try {\n      System.out.print(i + \"\\r\");\n      List<String> childs=zk.getChildren(\"/hammers\",false);\n      Collections.shuffle(childs);\n      for (      String s : childs) {\n        if (s.startsWith(\"hammer-\")) {\n          s=\"/hammers/\" + s;\n          zk.setData(s,tag,-1);\n          for (int j=0; j < readsPerWrite; j++) {\n            zk.getData(s,false,stat);\n          }\n          break;\n        }\n      }\n    }\n catch (    KeeperException.ConnectionLossException e) {\n    }\ncatch (    KeeperException e) {\n      e.printStackTrace();\n    }\n  }\n  System.out.println();\n  zk.close();\n}\n catch (Exception e) {\n  e.printStackTrace();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 204,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1659,
        "startLineNumber" : 47,
        "startColumnNumber" : 22,
        "endLineNumber" : 88,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    Stat stat=new Stat();\n    String path=zk.create(\"/hammers/hammer-\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL);\n    byte tag[]=(path + \" was here!\").getBytes();\nsynchronized (this) {\n      String startPath=\"/hammers/start\";\n      System.out.println(\"Waiting for \" + startPath);\n      while (zk.exists(startPath,true) == null) {\n        wait();\n      }\n      System.out.println(\"Running\");\n    }\n    for (int i=0; i < count; i++) {\n      try {\n        System.out.print(i + \"\\r\");\n        List<String> childs=zk.getChildren(\"/hammers\",false);\n        Collections.shuffle(childs);\n        for (        String s : childs) {\n          if (s.startsWith(\"hammer-\")) {\n            s=\"/hammers/\" + s;\n            zk.setData(s,tag,-1);\n            for (int j=0; j < readsPerWrite; j++) {\n              zk.getData(s,false,stat);\n            }\n            break;\n          }\n        }\n      }\n catch (      KeeperException.ConnectionLossException e) {\n      }\ncatch (      KeeperException e) {\n        e.printStackTrace();\n      }\n    }\n    System.out.println();\n    zk.close();\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 205,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1677,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 88,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void run(){\n  try {\n    Stat stat=new Stat();\n    String path=zk.create(\"/hammers/hammer-\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL);\n    byte tag[]=(path + \" was here!\").getBytes();\nsynchronized (this) {\n      String startPath=\"/hammers/start\";\n      System.out.println(\"Waiting for \" + startPath);\n      while (zk.exists(startPath,true) == null) {\n        wait();\n      }\n      System.out.println(\"Running\");\n    }\n    for (int i=0; i < count; i++) {\n      try {\n        System.out.print(i + \"\\r\");\n        List<String> childs=zk.getChildren(\"/hammers\",false);\n        Collections.shuffle(childs);\n        for (        String s : childs) {\n          if (s.startsWith(\"hammer-\")) {\n            s=\"/hammers/\" + s;\n            zk.setData(s,tag,-1);\n            for (int j=0; j < readsPerWrite; j++) {\n              zk.getData(s,false,stat);\n            }\n            break;\n          }\n        }\n      }\n catch (      KeeperException.ConnectionLossException e) {\n      }\ncatch (      KeeperException e) {\n        e.printStackTrace();\n      }\n    }\n    System.out.println();\n    zk.close();\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 209,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 69,
        "startColumnNumber" : 28,
        "endLineNumber" : 69,
        "endColumnNumber" : 48
      },
      "nodeContext" : "s=\"/hammers/\" + s;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 69,
    "startColumnNumber" : 32,
    "endLineNumber" : 69,
    "endColumnNumber" : 43
  } ],
  "layoutRelationDataList" : [ ]
}