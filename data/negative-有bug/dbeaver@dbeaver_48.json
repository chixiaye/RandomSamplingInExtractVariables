{
  "id" : 48,
  "expression" : "\"Table name cannot be set for \" + tableClass.getName()",
  "projectName" : "dbeaver@dbeaver",
  "commitID" : "aecf0da5baef5ea4aa1675578670cf057248123d",
  "filePath" : "/plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/database/DatabaseTransferUtils.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Table name cannot be set for \" + tableClass.getName()",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 54,
      "startLineNumber" : 208,
      "startColumnNumber" : 42,
      "endLineNumber" : 208,
      "endColumnNumber" : 96
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 208,
        "startColumnNumber" : 26,
        "endLineNumber" : 208,
        "endColumnNumber" : 97
      },
      "nodeContext" : "new DBException(\"Table name cannot be set for \" + tableClass.getName())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 208,
        "startColumnNumber" : 20,
        "endLineNumber" : 208,
        "endColumnNumber" : 98
      },
      "nodeContext" : "throw new DBException(\"Table name cannot be set for \" + tableClass.getName());\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 207,
        "startColumnNumber" : 23,
        "endLineNumber" : 209,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  throw new DBException(\"Table name cannot be set for \" + tableClass.getName());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 252,
        "startLineNumber" : 205,
        "startColumnNumber" : 16,
        "endLineNumber" : 209,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (table instanceof DBPNamedObject2) {\n  ((DBPNamedObject2)table).setName(tableFinalName);\n}\n else {\n  throw new DBException(\"Table name cannot be set for \" + tableClass.getName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 25,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 600,
        "startLineNumber" : 202,
        "startColumnNumber" : 81,
        "endLineNumber" : 212,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  table=tableManager.createNewObject(monitor,commandContext,schema,null,options);\n  tableFinalName=DBObjectNameCaseTransformer.transformName(table.getDataSource(),containerMapping.getTargetName());\n  if (table instanceof DBPNamedObject2) {\n    ((DBPNamedObject2)table).setName(tableFinalName);\n  }\n else {\n    throw new DBException(\"Table name cannot be set for \" + tableClass.getName());\n  }\n  createCommand=tableManager.makeCreateCommand(table,options);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 57,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 945,
        "startLineNumber" : 202,
        "startColumnNumber" : 12,
        "endLineNumber" : 218,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (containerMapping.getMappingType() == DatabaseMappingType.create) {\n  table=tableManager.createNewObject(monitor,commandContext,schema,null,options);\n  tableFinalName=DBObjectNameCaseTransformer.transformName(table.getDataSource(),containerMapping.getTargetName());\n  if (table instanceof DBPNamedObject2) {\n    ((DBPNamedObject2)table).setName(tableFinalName);\n  }\n else {\n    throw new DBException(\"Table name cannot be set for \" + tableClass.getName());\n  }\n  createCommand=tableManager.makeCreateCommand(table,options);\n}\n else {\n  table=(DBSEntity)containerMapping.getTarget();\n  if (table == null) {\n    throw new DBException(\"Internal error - target table not set\");\n  }\n  tableFinalName=table.getName();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 91,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 6075,
        "startLineNumber" : 167,
        "startColumnNumber" : 12,
        "endLineNumber" : 275,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Class<? extends DBSObject> tableClass=schema.getPrimaryChildType(monitor);\n  if (!DBSEntity.class.isAssignableFrom(tableClass)) {\n    throw new DBException(\"Wrong table container child type: \" + tableClass.getName());\n  }\n  SQLObjectEditor<DBSEntity,?> tableManager=editorsRegistry.getObjectManager(tableClass,SQLObjectEditor.class);\n  if (tableManager == null) {\n    throw new DBException(\"Table manager not found for '\" + tableClass.getName() + \"'\");\n  }\n  Class<? extends DBSEntityAttribute> attrClass;\n  SQLObjectEditor<DBSEntityAttribute,?> attributeManager;\n  if (executionContext.getDataSource().getInfo().isDynamicMetadata()) {\n    attrClass=null;\n    attributeManager=null;\n  }\n else {\n    if (!(tableManager instanceof DBEStructEditor)) {\n      throw new DBException(\"Table create not supported by \" + executionContext.getDataSource().getContainer().getDriver().getName());\n    }\n    Class<?>[] childTypes=((DBEStructEditor<?>)tableManager).getChildTypes();\n    attrClass=getChildType(childTypes,DBSEntityAttribute.class);\n    if (attrClass == null) {\n      throw new DBException(\"Column manager not found for '\" + tableClass.getName() + \"'\");\n    }\n    attributeManager=editorsRegistry.getObjectManager(attrClass,SQLObjectEditor.class);\n  }\n  Map<String,Object> options=new HashMap<>();\n  options.put(SQLObjectEditor.OPTION_SKIP_CONFIGURATION,true);\n  DBECommandContext commandContext=new TargetCommandContext(executionContext);\n  String tableFinalName;\n  DBSEntity table;\n  DBECommand createCommand=null;\n  if (containerMapping.getMappingType() == DatabaseMappingType.create) {\n    table=tableManager.createNewObject(monitor,commandContext,schema,null,options);\n    tableFinalName=DBObjectNameCaseTransformer.transformName(table.getDataSource(),containerMapping.getTargetName());\n    if (table instanceof DBPNamedObject2) {\n      ((DBPNamedObject2)table).setName(tableFinalName);\n    }\n else {\n      throw new DBException(\"Table name cannot be set for \" + tableClass.getName());\n    }\n    createCommand=tableManager.makeCreateCommand(table,options);\n  }\n else {\n    table=(DBSEntity)containerMapping.getTarget();\n    if (table == null) {\n      throw new DBException(\"Internal error - target table not set\");\n    }\n    tableFinalName=table.getName();\n  }\n  if (attributeManager != null) {\n    for (    DatabaseMappingAttribute attributeMapping : containerMapping.getAttributeMappings(monitor)) {\n      if (attributeMapping.getMappingType() != DatabaseMappingType.create) {\n        continue;\n      }\n      DBSEntityAttribute newAttribute=attributeManager.createNewObject(monitor,commandContext,table,null,options);\n      if (!(newAttribute instanceof DBPNamedObject2)) {\n        throw new DBException(\"Table column name cannot be set for \" + attrClass.getName());\n      }\n      ((DBPNamedObject2)newAttribute).setName(DBObjectNameCaseTransformer.transformName(newAttribute.getDataSource(),attributeMapping.getTargetName()));\n      if (newAttribute instanceof DBSTypedObjectExt2) {\n        DBSTypedObjectExt2 typedAttr=(DBSTypedObjectExt2)newAttribute;\n        boolean typeModifiersSet=false;\n        if (typedAttr instanceof DBSTypedObjectExt3) {\n          String fullTargetTypeName=attributeMapping.getTargetType(executionContext.getDataSource(),true);\n          typeModifiersSet=fullTargetTypeName.contains(\"(\");\n          ((DBSTypedObjectExt3)typedAttr).setFullTypeName(fullTargetTypeName);\n        }\n else {\n          String targetAttrType=attributeMapping.getTargetType(executionContext.getDataSource(),false);\n          typedAttr.setTypeName(targetAttrType);\n        }\n        if (!typeModifiersSet) {\n          DBSAttributeBase sourceAttr=attributeMapping.getSource();\n          if (sourceAttr != null) {\n            typedAttr.setMaxLength(sourceAttr.getMaxLength());\n            typedAttr.setPrecision(sourceAttr.getPrecision());\n            typedAttr.setScale(sourceAttr.getScale());\n            typedAttr.setRequired(sourceAttr.isRequired());\n          }\n        }\n      }\n      SQLObjectEditor.ObjectCreateCommand attrCreateCommand=attributeManager.makeCreateCommand(newAttribute,options);\n      if (createCommand instanceof DBECommandAggregator) {\n        ((DBECommandAggregator)createCommand).aggregateCommand(attrCreateCommand);\n      }\n    }\n  }\n  containerMapping.setTargetName(tableFinalName);\n  List<DBEPersistAction> actions=new ArrayList<>();\n  for (  DBECommand cmd : commandContext.getFinalCommands()) {\n    DBEPersistAction[] persistActions=cmd.getPersistActions(monitor,executionContext,options);\n    if (persistActions != null) {\n      Collections.addAll(actions,persistActions);\n    }\n  }\n  return actions.toArray(new DBEPersistAction[0]);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 588,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6164,
        "startLineNumber" : 167,
        "startColumnNumber" : 8,
        "endLineNumber" : 278,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  Class<? extends DBSObject> tableClass=schema.getPrimaryChildType(monitor);\n  if (!DBSEntity.class.isAssignableFrom(tableClass)) {\n    throw new DBException(\"Wrong table container child type: \" + tableClass.getName());\n  }\n  SQLObjectEditor<DBSEntity,?> tableManager=editorsRegistry.getObjectManager(tableClass,SQLObjectEditor.class);\n  if (tableManager == null) {\n    throw new DBException(\"Table manager not found for '\" + tableClass.getName() + \"'\");\n  }\n  Class<? extends DBSEntityAttribute> attrClass;\n  SQLObjectEditor<DBSEntityAttribute,?> attributeManager;\n  if (executionContext.getDataSource().getInfo().isDynamicMetadata()) {\n    attrClass=null;\n    attributeManager=null;\n  }\n else {\n    if (!(tableManager instanceof DBEStructEditor)) {\n      throw new DBException(\"Table create not supported by \" + executionContext.getDataSource().getContainer().getDriver().getName());\n    }\n    Class<?>[] childTypes=((DBEStructEditor<?>)tableManager).getChildTypes();\n    attrClass=getChildType(childTypes,DBSEntityAttribute.class);\n    if (attrClass == null) {\n      throw new DBException(\"Column manager not found for '\" + tableClass.getName() + \"'\");\n    }\n    attributeManager=editorsRegistry.getObjectManager(attrClass,SQLObjectEditor.class);\n  }\n  Map<String,Object> options=new HashMap<>();\n  options.put(SQLObjectEditor.OPTION_SKIP_CONFIGURATION,true);\n  DBECommandContext commandContext=new TargetCommandContext(executionContext);\n  String tableFinalName;\n  DBSEntity table;\n  DBECommand createCommand=null;\n  if (containerMapping.getMappingType() == DatabaseMappingType.create) {\n    table=tableManager.createNewObject(monitor,commandContext,schema,null,options);\n    tableFinalName=DBObjectNameCaseTransformer.transformName(table.getDataSource(),containerMapping.getTargetName());\n    if (table instanceof DBPNamedObject2) {\n      ((DBPNamedObject2)table).setName(tableFinalName);\n    }\n else {\n      throw new DBException(\"Table name cannot be set for \" + tableClass.getName());\n    }\n    createCommand=tableManager.makeCreateCommand(table,options);\n  }\n else {\n    table=(DBSEntity)containerMapping.getTarget();\n    if (table == null) {\n      throw new DBException(\"Internal error - target table not set\");\n    }\n    tableFinalName=table.getName();\n  }\n  if (attributeManager != null) {\n    for (    DatabaseMappingAttribute attributeMapping : containerMapping.getAttributeMappings(monitor)) {\n      if (attributeMapping.getMappingType() != DatabaseMappingType.create) {\n        continue;\n      }\n      DBSEntityAttribute newAttribute=attributeManager.createNewObject(monitor,commandContext,table,null,options);\n      if (!(newAttribute instanceof DBPNamedObject2)) {\n        throw new DBException(\"Table column name cannot be set for \" + attrClass.getName());\n      }\n      ((DBPNamedObject2)newAttribute).setName(DBObjectNameCaseTransformer.transformName(newAttribute.getDataSource(),attributeMapping.getTargetName()));\n      if (newAttribute instanceof DBSTypedObjectExt2) {\n        DBSTypedObjectExt2 typedAttr=(DBSTypedObjectExt2)newAttribute;\n        boolean typeModifiersSet=false;\n        if (typedAttr instanceof DBSTypedObjectExt3) {\n          String fullTargetTypeName=attributeMapping.getTargetType(executionContext.getDataSource(),true);\n          typeModifiersSet=fullTargetTypeName.contains(\"(\");\n          ((DBSTypedObjectExt3)typedAttr).setFullTypeName(fullTargetTypeName);\n        }\n else {\n          String targetAttrType=attributeMapping.getTargetType(executionContext.getDataSource(),false);\n          typedAttr.setTypeName(targetAttrType);\n        }\n        if (!typeModifiersSet) {\n          DBSAttributeBase sourceAttr=attributeMapping.getSource();\n          if (sourceAttr != null) {\n            typedAttr.setMaxLength(sourceAttr.getMaxLength());\n            typedAttr.setPrecision(sourceAttr.getPrecision());\n            typedAttr.setScale(sourceAttr.getScale());\n            typedAttr.setRequired(sourceAttr.isRequired());\n          }\n        }\n      }\n      SQLObjectEditor.ObjectCreateCommand attrCreateCommand=attributeManager.makeCreateCommand(newAttribute,options);\n      if (createCommand instanceof DBECommandAggregator) {\n        ((DBECommandAggregator)createCommand).aggregateCommand(attrCreateCommand);\n      }\n    }\n  }\n  containerMapping.setTargetName(tableFinalName);\n  List<DBEPersistAction> actions=new ArrayList<>();\n  for (  DBECommand cmd : commandContext.getFinalCommands()) {\n    DBEPersistAction[] persistActions=cmd.getPersistActions(monitor,executionContext,options);\n    if (persistActions != null) {\n      Collections.addAll(actions,persistActions);\n    }\n  }\n  return actions.toArray(new DBEPersistAction[0]);\n}\n catch (DBException e) {\n  log.debug(e);\n  return null;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 602,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6309,
        "startLineNumber" : 164,
        "startColumnNumber" : 197,
        "endLineNumber" : 279,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final DBERegistry editorsRegistry=executionContext.getDataSource().getContainer().getPlatform().getEditorsRegistry();\n  try {\n    Class<? extends DBSObject> tableClass=schema.getPrimaryChildType(monitor);\n    if (!DBSEntity.class.isAssignableFrom(tableClass)) {\n      throw new DBException(\"Wrong table container child type: \" + tableClass.getName());\n    }\n    SQLObjectEditor<DBSEntity,?> tableManager=editorsRegistry.getObjectManager(tableClass,SQLObjectEditor.class);\n    if (tableManager == null) {\n      throw new DBException(\"Table manager not found for '\" + tableClass.getName() + \"'\");\n    }\n    Class<? extends DBSEntityAttribute> attrClass;\n    SQLObjectEditor<DBSEntityAttribute,?> attributeManager;\n    if (executionContext.getDataSource().getInfo().isDynamicMetadata()) {\n      attrClass=null;\n      attributeManager=null;\n    }\n else {\n      if (!(tableManager instanceof DBEStructEditor)) {\n        throw new DBException(\"Table create not supported by \" + executionContext.getDataSource().getContainer().getDriver().getName());\n      }\n      Class<?>[] childTypes=((DBEStructEditor<?>)tableManager).getChildTypes();\n      attrClass=getChildType(childTypes,DBSEntityAttribute.class);\n      if (attrClass == null) {\n        throw new DBException(\"Column manager not found for '\" + tableClass.getName() + \"'\");\n      }\n      attributeManager=editorsRegistry.getObjectManager(attrClass,SQLObjectEditor.class);\n    }\n    Map<String,Object> options=new HashMap<>();\n    options.put(SQLObjectEditor.OPTION_SKIP_CONFIGURATION,true);\n    DBECommandContext commandContext=new TargetCommandContext(executionContext);\n    String tableFinalName;\n    DBSEntity table;\n    DBECommand createCommand=null;\n    if (containerMapping.getMappingType() == DatabaseMappingType.create) {\n      table=tableManager.createNewObject(monitor,commandContext,schema,null,options);\n      tableFinalName=DBObjectNameCaseTransformer.transformName(table.getDataSource(),containerMapping.getTargetName());\n      if (table instanceof DBPNamedObject2) {\n        ((DBPNamedObject2)table).setName(tableFinalName);\n      }\n else {\n        throw new DBException(\"Table name cannot be set for \" + tableClass.getName());\n      }\n      createCommand=tableManager.makeCreateCommand(table,options);\n    }\n else {\n      table=(DBSEntity)containerMapping.getTarget();\n      if (table == null) {\n        throw new DBException(\"Internal error - target table not set\");\n      }\n      tableFinalName=table.getName();\n    }\n    if (attributeManager != null) {\n      for (      DatabaseMappingAttribute attributeMapping : containerMapping.getAttributeMappings(monitor)) {\n        if (attributeMapping.getMappingType() != DatabaseMappingType.create) {\n          continue;\n        }\n        DBSEntityAttribute newAttribute=attributeManager.createNewObject(monitor,commandContext,table,null,options);\n        if (!(newAttribute instanceof DBPNamedObject2)) {\n          throw new DBException(\"Table column name cannot be set for \" + attrClass.getName());\n        }\n        ((DBPNamedObject2)newAttribute).setName(DBObjectNameCaseTransformer.transformName(newAttribute.getDataSource(),attributeMapping.getTargetName()));\n        if (newAttribute instanceof DBSTypedObjectExt2) {\n          DBSTypedObjectExt2 typedAttr=(DBSTypedObjectExt2)newAttribute;\n          boolean typeModifiersSet=false;\n          if (typedAttr instanceof DBSTypedObjectExt3) {\n            String fullTargetTypeName=attributeMapping.getTargetType(executionContext.getDataSource(),true);\n            typeModifiersSet=fullTargetTypeName.contains(\"(\");\n            ((DBSTypedObjectExt3)typedAttr).setFullTypeName(fullTargetTypeName);\n          }\n else {\n            String targetAttrType=attributeMapping.getTargetType(executionContext.getDataSource(),false);\n            typedAttr.setTypeName(targetAttrType);\n          }\n          if (!typeModifiersSet) {\n            DBSAttributeBase sourceAttr=attributeMapping.getSource();\n            if (sourceAttr != null) {\n              typedAttr.setMaxLength(sourceAttr.getMaxLength());\n              typedAttr.setPrecision(sourceAttr.getPrecision());\n              typedAttr.setScale(sourceAttr.getScale());\n              typedAttr.setRequired(sourceAttr.isRequired());\n            }\n          }\n        }\n        SQLObjectEditor.ObjectCreateCommand attrCreateCommand=attributeManager.makeCreateCommand(newAttribute,options);\n        if (createCommand instanceof DBECommandAggregator) {\n          ((DBECommandAggregator)createCommand).aggregateCommand(attrCreateCommand);\n        }\n      }\n    }\n    containerMapping.setTargetName(tableFinalName);\n    List<DBEPersistAction> actions=new ArrayList<>();\n    for (    DBECommand cmd : commandContext.getFinalCommands()) {\n      DBEPersistAction[] persistActions=cmd.getPersistActions(monitor,executionContext,options);\n      if (persistActions != null) {\n        Collections.addAll(actions,persistActions);\n      }\n    }\n    return actions.toArray(new DBEPersistAction[0]);\n  }\n catch (  DBException e) {\n    log.debug(e);\n    return null;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 618,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6502,
        "startLineNumber" : 164,
        "startColumnNumber" : 4,
        "endLineNumber" : 279,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static DBEPersistAction[] generateStructTableDDL(DBRProgressMonitor monitor,DBCExecutionContext executionContext,DBSObjectContainer schema,DatabaseMappingContainer containerMapping){\n  final DBERegistry editorsRegistry=executionContext.getDataSource().getContainer().getPlatform().getEditorsRegistry();\n  try {\n    Class<? extends DBSObject> tableClass=schema.getPrimaryChildType(monitor);\n    if (!DBSEntity.class.isAssignableFrom(tableClass)) {\n      throw new DBException(\"Wrong table container child type: \" + tableClass.getName());\n    }\n    SQLObjectEditor<DBSEntity,?> tableManager=editorsRegistry.getObjectManager(tableClass,SQLObjectEditor.class);\n    if (tableManager == null) {\n      throw new DBException(\"Table manager not found for '\" + tableClass.getName() + \"'\");\n    }\n    Class<? extends DBSEntityAttribute> attrClass;\n    SQLObjectEditor<DBSEntityAttribute,?> attributeManager;\n    if (executionContext.getDataSource().getInfo().isDynamicMetadata()) {\n      attrClass=null;\n      attributeManager=null;\n    }\n else {\n      if (!(tableManager instanceof DBEStructEditor)) {\n        throw new DBException(\"Table create not supported by \" + executionContext.getDataSource().getContainer().getDriver().getName());\n      }\n      Class<?>[] childTypes=((DBEStructEditor<?>)tableManager).getChildTypes();\n      attrClass=getChildType(childTypes,DBSEntityAttribute.class);\n      if (attrClass == null) {\n        throw new DBException(\"Column manager not found for '\" + tableClass.getName() + \"'\");\n      }\n      attributeManager=editorsRegistry.getObjectManager(attrClass,SQLObjectEditor.class);\n    }\n    Map<String,Object> options=new HashMap<>();\n    options.put(SQLObjectEditor.OPTION_SKIP_CONFIGURATION,true);\n    DBECommandContext commandContext=new TargetCommandContext(executionContext);\n    String tableFinalName;\n    DBSEntity table;\n    DBECommand createCommand=null;\n    if (containerMapping.getMappingType() == DatabaseMappingType.create) {\n      table=tableManager.createNewObject(monitor,commandContext,schema,null,options);\n      tableFinalName=DBObjectNameCaseTransformer.transformName(table.getDataSource(),containerMapping.getTargetName());\n      if (table instanceof DBPNamedObject2) {\n        ((DBPNamedObject2)table).setName(tableFinalName);\n      }\n else {\n        throw new DBException(\"Table name cannot be set for \" + tableClass.getName());\n      }\n      createCommand=tableManager.makeCreateCommand(table,options);\n    }\n else {\n      table=(DBSEntity)containerMapping.getTarget();\n      if (table == null) {\n        throw new DBException(\"Internal error - target table not set\");\n      }\n      tableFinalName=table.getName();\n    }\n    if (attributeManager != null) {\n      for (      DatabaseMappingAttribute attributeMapping : containerMapping.getAttributeMappings(monitor)) {\n        if (attributeMapping.getMappingType() != DatabaseMappingType.create) {\n          continue;\n        }\n        DBSEntityAttribute newAttribute=attributeManager.createNewObject(monitor,commandContext,table,null,options);\n        if (!(newAttribute instanceof DBPNamedObject2)) {\n          throw new DBException(\"Table column name cannot be set for \" + attrClass.getName());\n        }\n        ((DBPNamedObject2)newAttribute).setName(DBObjectNameCaseTransformer.transformName(newAttribute.getDataSource(),attributeMapping.getTargetName()));\n        if (newAttribute instanceof DBSTypedObjectExt2) {\n          DBSTypedObjectExt2 typedAttr=(DBSTypedObjectExt2)newAttribute;\n          boolean typeModifiersSet=false;\n          if (typedAttr instanceof DBSTypedObjectExt3) {\n            String fullTargetTypeName=attributeMapping.getTargetType(executionContext.getDataSource(),true);\n            typeModifiersSet=fullTargetTypeName.contains(\"(\");\n            ((DBSTypedObjectExt3)typedAttr).setFullTypeName(fullTargetTypeName);\n          }\n else {\n            String targetAttrType=attributeMapping.getTargetType(executionContext.getDataSource(),false);\n            typedAttr.setTypeName(targetAttrType);\n          }\n          if (!typeModifiersSet) {\n            DBSAttributeBase sourceAttr=attributeMapping.getSource();\n            if (sourceAttr != null) {\n              typedAttr.setMaxLength(sourceAttr.getMaxLength());\n              typedAttr.setPrecision(sourceAttr.getPrecision());\n              typedAttr.setScale(sourceAttr.getScale());\n              typedAttr.setRequired(sourceAttr.isRequired());\n            }\n          }\n        }\n        SQLObjectEditor.ObjectCreateCommand attrCreateCommand=attributeManager.makeCreateCommand(newAttribute,options);\n        if (createCommand instanceof DBECommandAggregator) {\n          ((DBECommandAggregator)createCommand).aggregateCommand(attrCreateCommand);\n        }\n      }\n    }\n    containerMapping.setTargetName(tableFinalName);\n    List<DBEPersistAction> actions=new ArrayList<>();\n    for (    DBECommand cmd : commandContext.getFinalCommands()) {\n      DBEPersistAction[] persistActions=cmd.getPersistActions(monitor,executionContext,options);\n      if (persistActions != null) {\n        Collections.addAll(actions,persistActions);\n      }\n    }\n    return actions.toArray(new DBEPersistAction[0]);\n  }\n catch (  DBException e) {\n    log.debug(e);\n    return null;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 642,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 208,
        "startColumnNumber" : 20,
        "endLineNumber" : 208,
        "endColumnNumber" : 98
      },
      "nodeContext" : "throw new DBException(\"Table name cannot be set for \" + tableClass.getName());\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 8,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 54,
    "startLineNumber" : 208,
    "startColumnNumber" : 42,
    "endLineNumber" : 208,
    "endColumnNumber" : 96
  } ],
  "layoutRelationDataList" : [ ]
}