{
  "id" : 32,
  "expression" : "Math.random() * 10000",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/test/java/com/williamfiset/algorithms/datastructures/priorityqueue/BinaryHeapQuickRemovalsTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Math.random() * 10000",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 275,
      "startColumnNumber" : 31,
      "endLineNumber" : 275,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 275,
        "startColumnNumber" : 30,
        "endLineNumber" : 275,
        "endColumnNumber" : 53
      },
      "nodeContext" : "(Math.random() * 10000)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 275,
        "startColumnNumber" : 24,
        "endLineNumber" : 275,
        "endColumnNumber" : 53
      },
      "nodeContext" : "(int)(Math.random() * 10000)",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 275,
        "startColumnNumber" : 14,
        "endLineNumber" : 275,
        "endColumnNumber" : 53
      },
      "nodeContext" : "randNum=(int)(Math.random() * 10000)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 275,
        "startColumnNumber" : 10,
        "endLineNumber" : 275,
        "endColumnNumber" : 54
      },
      "nodeContext" : "int randNum=(int)(Math.random() * 10000);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 274,
        "startColumnNumber" : 34,
        "endLineNumber" : 278,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int randNum=(int)(Math.random() * 10000);\n  PQ.add(randNum);\n  pq.add(randNum);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 23,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 146,
        "startLineNumber" : 274,
        "startColumnNumber" : 8,
        "endLineNumber" : 278,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (0.25 < Math.random()) {\n  int randNum=(int)(Math.random() * 10000);\n  PQ.add(randNum);\n  pq.add(randNum);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 29,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 587,
        "startLineNumber" : 271,
        "startColumnNumber" : 39,
        "endLineNumber" : 292,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (0.25 < Math.random()) {\n    int randNum=(int)(Math.random() * 10000);\n    PQ.add(randNum);\n    pq.add(randNum);\n  }\n  int removeNum=nums.get(i);\n  assertTrue(pq.isMinHeap(0));\n  assertEquals(PQ.size(),pq.size());\n  assertEquals(PQ.peek(),pq.peek());\n  PQ.remove(removeNum);\n  pq.remove(removeNum);\n  assertEquals(PQ.peek(),pq.peek());\n  assertEquals(PQ.size(),pq.size());\n  assertTrue(pq.isMinHeap(0));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 98,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 620,
        "startLineNumber" : 271,
        "startColumnNumber" : 6,
        "endLineNumber" : 292,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < sz / 2; i++) {\n  if (0.25 < Math.random()) {\n    int randNum=(int)(Math.random() * 10000);\n    PQ.add(randNum);\n    pq.add(randNum);\n  }\n  int removeNum=nums.get(i);\n  assertTrue(pq.isMinHeap(0));\n  assertEquals(PQ.size(),pq.size());\n  assertEquals(PQ.peek(),pq.peek());\n  PQ.remove(removeNum);\n  pq.remove(removeNum);\n  assertEquals(PQ.peek(),pq.peek());\n  assertEquals(PQ.size(),pq.size());\n  assertTrue(pq.isMinHeap(0));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 111,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 824,
        "startLineNumber" : 258,
        "startColumnNumber" : 23,
        "endLineNumber" : 293,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  pq.clear();\n  PQ.clear();\n  List<Integer> nums=genRandList(sz);\n  for (  int n : nums) {\n    pq.add(n);\n    PQ.add(n);\n  }\n  Collections.shuffle(nums);\n  for (int i=0; i < sz / 2; i++) {\n    if (0.25 < Math.random()) {\n      int randNum=(int)(Math.random() * 10000);\n      PQ.add(randNum);\n      pq.add(randNum);\n    }\n    int removeNum=nums.get(i);\n    assertTrue(pq.isMinHeap(0));\n    assertEquals(PQ.size(),pq.size());\n    assertEquals(PQ.peek(),pq.peek());\n    PQ.remove(removeNum);\n    pq.remove(removeNum);\n    assertEquals(PQ.peek(),pq.peek());\n    assertEquals(PQ.size(),pq.size());\n    assertTrue(pq.isMinHeap(0));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 152,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 843,
        "startLineNumber" : 258,
        "startColumnNumber" : 4,
        "endLineNumber" : 293,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int sz : SZs) {\n  pq.clear();\n  PQ.clear();\n  List<Integer> nums=genRandList(sz);\n  for (  int n : nums) {\n    pq.add(n);\n    PQ.add(n);\n  }\n  Collections.shuffle(nums);\n  for (int i=0; i < sz / 2; i++) {\n    if (0.25 < Math.random()) {\n      int randNum=(int)(Math.random() * 10000);\n      PQ.add(randNum);\n      pq.add(randNum);\n    }\n    int removeNum=nums.get(i);\n    assertTrue(pq.isMinHeap(0));\n    assertEquals(PQ.size(),pq.size());\n    assertEquals(PQ.peek(),pq.peek());\n    PQ.remove(removeNum);\n    pq.remove(removeNum);\n    assertEquals(PQ.peek(),pq.peek());\n    assertEquals(PQ.size(),pq.size());\n    assertTrue(pq.isMinHeap(0));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 157,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1036,
        "startLineNumber" : 251,
        "startColumnNumber" : 34,
        "endLineNumber" : 294,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<Integer> SZs=genUniqueRandList(LOOPS);\n  PriorityQueue<Integer> PQ=new PriorityQueue<>();\n  BinaryHeapQuickRemovals<Integer> pq=new BinaryHeapQuickRemovals<>();\n  for (  int sz : SZs) {\n    pq.clear();\n    PQ.clear();\n    List<Integer> nums=genRandList(sz);\n    for (    int n : nums) {\n      pq.add(n);\n      PQ.add(n);\n    }\n    Collections.shuffle(nums);\n    for (int i=0; i < sz / 2; i++) {\n      if (0.25 < Math.random()) {\n        int randNum=(int)(Math.random() * 10000);\n        PQ.add(randNum);\n        pq.add(randNum);\n      }\n      int removeNum=nums.get(i);\n      assertTrue(pq.isMinHeap(0));\n      assertEquals(PQ.size(),pq.size());\n      assertEquals(PQ.peek(),pq.peek());\n      PQ.remove(removeNum);\n      pq.remove(removeNum);\n      assertEquals(PQ.peek(),pq.peek());\n      assertEquals(PQ.size(),pq.size());\n      assertTrue(pq.isMinHeap(0));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 193,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1076,
        "startLineNumber" : 250,
        "startColumnNumber" : 2,
        "endLineNumber" : 294,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testPQReusability(){\n  List<Integer> SZs=genUniqueRandList(LOOPS);\n  PriorityQueue<Integer> PQ=new PriorityQueue<>();\n  BinaryHeapQuickRemovals<Integer> pq=new BinaryHeapQuickRemovals<>();\n  for (  int sz : SZs) {\n    pq.clear();\n    PQ.clear();\n    List<Integer> nums=genRandList(sz);\n    for (    int n : nums) {\n      pq.add(n);\n      PQ.add(n);\n    }\n    Collections.shuffle(nums);\n    for (int i=0; i < sz / 2; i++) {\n      if (0.25 < Math.random()) {\n        int randNum=(int)(Math.random() * 10000);\n        PQ.add(randNum);\n        pq.add(randNum);\n      }\n      int removeNum=nums.get(i);\n      assertTrue(pq.isMinHeap(0));\n      assertEquals(PQ.size(),pq.size());\n      assertEquals(PQ.peek(),pq.peek());\n      PQ.remove(removeNum);\n      pq.remove(removeNum);\n      assertEquals(PQ.peek(),pq.peek());\n      assertEquals(PQ.size(),pq.size());\n      assertTrue(pq.isMinHeap(0));\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 199,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 275,
        "startColumnNumber" : 10,
        "endLineNumber" : 275,
        "endColumnNumber" : 54
      },
      "nodeContext" : "int randNum=(int)(Math.random() * 10000);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 7
    },
    "tokenLength" : 4,
    "type" : "double"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 275,
    "startColumnNumber" : 31,
    "endLineNumber" : 275,
    "endColumnNumber" : 52
  } ],
  "layoutRelationDataList" : [ ]
}