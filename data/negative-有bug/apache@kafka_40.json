{
  "id" : 40,
  "expression" : "\"6\"",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/streams/src/test/java/org/apache/kafka/streams/integration/SlidingWindowedKStreamIntegrationTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"6\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 173,
      "startColumnNumber" : 41,
      "endLineNumber" : 173,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 173,
        "startColumnNumber" : 12,
        "endLineNumber" : 173,
        "endColumnNumber" : 49
      },
      "nodeContext" : "new KeyValueTimestamp<>(\"B\",\"6\",11)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 808,
        "startLineNumber" : 166,
        "startColumnNumber" : 8,
        "endLineNumber" : 176,
        "endColumnNumber" : 9
      },
      "nodeContext" : "produceMessages(streamOneInput,new KeyValueTimestamp<>(\"A\",\"1\",0),new KeyValueTimestamp<>(\"A\",\"2\",5),new KeyValueTimestamp<>(\"A\",\"3\",10),new KeyValueTimestamp<>(\"A\",\"4\",17),new KeyValueTimestamp<>(\"B\",\"5\",6),new KeyValueTimestamp<>(\"B\",\"6\",11),new KeyValueTimestamp<>(\"B\",\"7\",18),new KeyValueTimestamp<>(\"C\",\"8\",25))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 59,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 809,
        "startLineNumber" : 166,
        "startColumnNumber" : 8,
        "endLineNumber" : 176,
        "endColumnNumber" : 10
      },
      "nodeContext" : "produceMessages(streamOneInput,new KeyValueTimestamp<>(\"A\",\"1\",0),new KeyValueTimestamp<>(\"A\",\"2\",5),new KeyValueTimestamp<>(\"A\",\"3\",10),new KeyValueTimestamp<>(\"A\",\"4\",17),new KeyValueTimestamp<>(\"B\",\"5\",6),new KeyValueTimestamp<>(\"B\",\"6\",11),new KeyValueTimestamp<>(\"B\",\"7\",18),new KeyValueTimestamp<>(\"C\",\"8\",25));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 60,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3692,
        "startLineNumber" : 165,
        "startColumnNumber" : 70,
        "endLineNumber" : 226,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  produceMessages(streamOneInput,new KeyValueTimestamp<>(\"A\",\"1\",0),new KeyValueTimestamp<>(\"A\",\"2\",5),new KeyValueTimestamp<>(\"A\",\"3\",10),new KeyValueTimestamp<>(\"A\",\"4\",17),new KeyValueTimestamp<>(\"B\",\"5\",6),new KeyValueTimestamp<>(\"B\",\"6\",11),new KeyValueTimestamp<>(\"B\",\"7\",18),new KeyValueTimestamp<>(\"C\",\"8\",25));\n  final Serde<Windowed<String>> windowedSerde=WindowedSerdes.timeWindowedSerdeFrom(String.class,10L);\n  builder.stream(streamOneInput,Consumed.with(Serdes.String(),Serdes.String())).groupByKey().windowedBy(SlidingWindows.ofTimeDifferenceWithNoGrace(ofMillis(10L))).emitStrategy(emitStrategy).aggregate(MockInitializer.STRING_INIT,MockAggregator.TOSTRING_ADDER,getMaterialized()).toStream().to(outputTopic,Produced.with(windowedSerde,new StringSerde()));\n  startStreams();\n  final List<KeyValueTimestamp<Windowed<String>,String>> windowedMessages=receiveMessagesWithTimestamp(new TimeWindowedDeserializer<>(new StringDeserializer(),10L),new StringDeserializer(),10L,String.class,emitFinal ? 5 : 10);\n  final List<KeyValueTimestamp<Windowed<String>,String>> expectResult;\n  if (emitFinal) {\n    expectResult=asList(new KeyValueTimestamp<>(new Windowed<>(\"A\",new TimeWindow(0L,10L)),\"0+1+2+3\",10),new KeyValueTimestamp<>(new Windowed<>(\"A\",new TimeWindow(1L,11L)),\"0+2+3\",10),new KeyValueTimestamp<>(new Windowed<>(\"A\",new TimeWindow(6L,16L)),\"0+3\",10),new KeyValueTimestamp<>(new Windowed<>(\"A\",new TimeWindow(7L,17L)),\"0+3+4\",17),new KeyValueTimestamp<>(new Windowed<>(\"B\",new TimeWindow(8L,18L)),\"0+7\",18),new KeyValueTimestamp<>(new Windowed<>(\"A\",new TimeWindow(11L,21L)),\"0+4\",17));\n  }\n else {\n    expectResult=asList(new KeyValueTimestamp<>(new Windowed<>(\"A\",new TimeWindow(0L,10L)),\"0+1\",0),new KeyValueTimestamp<>(new Windowed<>(\"A\",new TimeWindow(1L,11L)),\"0+2\",5),new KeyValueTimestamp<>(new Windowed<>(\"A\",new TimeWindow(0L,10L)),\"0+1+2\",5),new KeyValueTimestamp<>(new Windowed<>(\"A\",new TimeWindow(1L,11L)),\"0+2+3\",10),new KeyValueTimestamp<>(new Windowed<>(\"A\",new TimeWindow(0L,10L)),\"0+1+2+3\",10),new KeyValueTimestamp<>(new Windowed<>(\"A\",new TimeWindow(6L,16L)),\"0+3\",10),new KeyValueTimestamp<>(new Windowed<>(\"A\",new TimeWindow(11L,21L)),\"0+4\",17),new KeyValueTimestamp<>(new Windowed<>(\"A\",new TimeWindow(7L,17L)),\"0+3+4\",17),new KeyValueTimestamp<>(new Windowed<>(\"B\",new TimeWindow(8L,18L)),\"0+7\",18),new KeyValueTimestamp<>(new Windowed<>(\"C\",new TimeWindow(15L,25L)),\"0+8\",25));\n  }\n  assertThat(windowedMessages,is(expectResult));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 464,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3769,
        "startLineNumber" : 164,
        "startColumnNumber" : 4,
        "endLineNumber" : 226,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void shouldAggregateWindowedWithNoGrace() throws Exception {\n  produceMessages(streamOneInput,new KeyValueTimestamp<>(\"A\",\"1\",0),new KeyValueTimestamp<>(\"A\",\"2\",5),new KeyValueTimestamp<>(\"A\",\"3\",10),new KeyValueTimestamp<>(\"A\",\"4\",17),new KeyValueTimestamp<>(\"B\",\"5\",6),new KeyValueTimestamp<>(\"B\",\"6\",11),new KeyValueTimestamp<>(\"B\",\"7\",18),new KeyValueTimestamp<>(\"C\",\"8\",25));\n  final Serde<Windowed<String>> windowedSerde=WindowedSerdes.timeWindowedSerdeFrom(String.class,10L);\n  builder.stream(streamOneInput,Consumed.with(Serdes.String(),Serdes.String())).groupByKey().windowedBy(SlidingWindows.ofTimeDifferenceWithNoGrace(ofMillis(10L))).emitStrategy(emitStrategy).aggregate(MockInitializer.STRING_INIT,MockAggregator.TOSTRING_ADDER,getMaterialized()).toStream().to(outputTopic,Produced.with(windowedSerde,new StringSerde()));\n  startStreams();\n  final List<KeyValueTimestamp<Windowed<String>,String>> windowedMessages=receiveMessagesWithTimestamp(new TimeWindowedDeserializer<>(new StringDeserializer(),10L),new StringDeserializer(),10L,String.class,emitFinal ? 5 : 10);\n  final List<KeyValueTimestamp<Windowed<String>,String>> expectResult;\n  if (emitFinal) {\n    expectResult=asList(new KeyValueTimestamp<>(new Windowed<>(\"A\",new TimeWindow(0L,10L)),\"0+1+2+3\",10),new KeyValueTimestamp<>(new Windowed<>(\"A\",new TimeWindow(1L,11L)),\"0+2+3\",10),new KeyValueTimestamp<>(new Windowed<>(\"A\",new TimeWindow(6L,16L)),\"0+3\",10),new KeyValueTimestamp<>(new Windowed<>(\"A\",new TimeWindow(7L,17L)),\"0+3+4\",17),new KeyValueTimestamp<>(new Windowed<>(\"B\",new TimeWindow(8L,18L)),\"0+7\",18),new KeyValueTimestamp<>(new Windowed<>(\"A\",new TimeWindow(11L,21L)),\"0+4\",17));\n  }\n else {\n    expectResult=asList(new KeyValueTimestamp<>(new Windowed<>(\"A\",new TimeWindow(0L,10L)),\"0+1\",0),new KeyValueTimestamp<>(new Windowed<>(\"A\",new TimeWindow(1L,11L)),\"0+2\",5),new KeyValueTimestamp<>(new Windowed<>(\"A\",new TimeWindow(0L,10L)),\"0+1+2\",5),new KeyValueTimestamp<>(new Windowed<>(\"A\",new TimeWindow(1L,11L)),\"0+2+3\",10),new KeyValueTimestamp<>(new Windowed<>(\"A\",new TimeWindow(0L,10L)),\"0+1+2+3\",10),new KeyValueTimestamp<>(new Windowed<>(\"A\",new TimeWindow(6L,16L)),\"0+3\",10),new KeyValueTimestamp<>(new Windowed<>(\"A\",new TimeWindow(11L,21L)),\"0+4\",17),new KeyValueTimestamp<>(new Windowed<>(\"A\",new TimeWindow(7L,17L)),\"0+3+4\",17),new KeyValueTimestamp<>(new Windowed<>(\"B\",new TimeWindow(8L,18L)),\"0+7\",18),new KeyValueTimestamp<>(new Windowed<>(\"C\",new TimeWindow(15L,25L)),\"0+8\",25));\n  }\n  assertThat(windowedMessages,is(expectResult));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 472,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 173,
        "startColumnNumber" : 12,
        "endLineNumber" : 173,
        "endColumnNumber" : 49
      },
      "nodeContext" : "new KeyValueTimestamp<>(\"B\",\"6\",11)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 173,
    "startColumnNumber" : 41,
    "endLineNumber" : 173,
    "endColumnNumber" : 44
  } ],
  "layoutRelationDataList" : [ ]
}