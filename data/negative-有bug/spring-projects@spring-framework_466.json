{
  "id" : 466,
  "expression" : "ConverterNotFoundException.class",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-core/src/test/java/org/springframework/core/convert/support/ObjectToObjectConverterTests.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ConverterNotFoundException.class",
    "nodeType" : "TypeLiteral",
    "nodePosition" : {
      "charLength" : 32,
      "startLineNumber" : 61,
      "startColumnNumber" : 28,
      "endLineNumber" : 61,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 61,
        "startColumnNumber" : 2,
        "endLineNumber" : 61,
        "endColumnNumber" : 61
      },
      "nodeContext" : "assertThatExceptionOfType(ConverterNotFoundException.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 61,
        "startColumnNumber" : 2,
        "endLineNumber" : 62,
        "endColumnNumber" : 30
      },
      "nodeContext" : "assertThatExceptionOfType(ConverterNotFoundException.class).as(\"convert Text to Data\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 168,
        "startLineNumber" : 61,
        "startColumnNumber" : 2,
        "endLineNumber" : 63,
        "endColumnNumber" : 77
      },
      "nodeContext" : "assertThatExceptionOfType(ConverterNotFoundException.class).as(\"convert Text to Data\").isThrownBy(() -> conversionService.convert(new Text(\"test\"),Data.class))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 169,
        "startLineNumber" : 61,
        "startColumnNumber" : 2,
        "endLineNumber" : 63,
        "endColumnNumber" : 78
      },
      "nodeContext" : "assertThatExceptionOfType(ConverterNotFoundException.class).as(\"convert Text to Data\").isThrownBy(() -> conversionService.convert(new Text(\"test\"),Data.class));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 410,
        "startLineNumber" : 56,
        "startColumnNumber" : 69,
        "endLineNumber" : 64,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  assertThat(conversionService.canConvert(Text.class,Data.class)).as(\"can convert Text to Data\").isFalse();\n  assertThat(conversionService.canConvert(Text.class,Optional.class)).as(\"can convert Text to Optional\").isFalse();\n  assertThatExceptionOfType(ConverterNotFoundException.class).as(\"convert Text to Data\").isThrownBy(() -> conversionService.convert(new Text(\"test\"),Data.class));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 57,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 485,
        "startLineNumber" : 55,
        "startColumnNumber" : 1,
        "endLineNumber" : 64,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test void nonStaticToTargetTypeSimpleNameMethodWithDifferentReturnType(){\n  assertThat(conversionService.canConvert(Text.class,Data.class)).as(\"can convert Text to Data\").isFalse();\n  assertThat(conversionService.canConvert(Text.class,Optional.class)).as(\"can convert Text to Optional\").isFalse();\n  assertThatExceptionOfType(ConverterNotFoundException.class).as(\"convert Text to Data\").isThrownBy(() -> conversionService.convert(new Text(\"test\"),Data.class));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 62,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 61,
        "startColumnNumber" : 2,
        "endLineNumber" : 61,
        "endColumnNumber" : 61
      },
      "nodeContext" : "assertThatExceptionOfType(ConverterNotFoundException.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<org.springframework.core.convert.ConverterNotFoundException>"
  } ],
  "positionList" : [ {
    "charLength" : 32,
    "startLineNumber" : 61,
    "startColumnNumber" : 28,
    "endLineNumber" : 61,
    "endColumnNumber" : 60
  } ],
  "layoutRelationDataList" : [ ]
}