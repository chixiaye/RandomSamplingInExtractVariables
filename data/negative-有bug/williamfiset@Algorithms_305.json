{
  "id" : 305,
  "expression" : "1",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/dp/Knapsack_01.java",
  "occurrences" : 11,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 35,
      "startColumnNumber" : 29,
      "endLineNumber" : 35,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ArrayCreation,dimensions]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 35,
        "startColumnNumber" : 25,
        "endLineNumber" : 35,
        "endColumnNumber" : 30
      },
      "nodeContext" : "N + 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 35,
        "startColumnNumber" : 17,
        "endLineNumber" : 35,
        "endColumnNumber" : 45
      },
      "nodeContext" : "new int[N + 1][capacity + 1]",
      "nodeType" : "ArrayCreation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 35,
        "startColumnNumber" : 12,
        "endLineNumber" : 35,
        "endColumnNumber" : 45
      },
      "nodeContext" : "DP=new int[N + 1][capacity + 1]",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 35,
        "startColumnNumber" : 4,
        "endLineNumber" : 35,
        "endColumnNumber" : 46
      },
      "nodeContext" : "int[][] DP=new int[N + 1][capacity + 1];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1472,
        "startLineNumber" : 26,
        "startColumnNumber" : 61,
        "endLineNumber" : 73,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (W == null || V == null || W.length != V.length || capacity < 0)   throw new IllegalArgumentException(\"Invalid input\");\n  final int N=W.length;\n  int[][] DP=new int[N + 1][capacity + 1];\n  for (int i=1; i <= N; i++) {\n    int w=W[i - 1], v=V[i - 1];\n    for (int sz=1; sz <= capacity; sz++) {\n      DP[i][sz]=DP[i - 1][sz];\n      if (sz >= w && DP[i - 1][sz - w] + v > DP[i][sz])       DP[i][sz]=DP[i - 1][sz - w] + v;\n    }\n  }\n  int sz=capacity;\n  List<Integer> itemsSelected=new ArrayList<>();\n  for (int i=N; i > 0; i--) {\n    if (DP[i][sz] != DP[i - 1][sz]) {\n      int itemIndex=i - 1;\n      itemsSelected.add(itemIndex);\n      sz-=W[itemIndex];\n    }\n  }\n  return DP[N][capacity];\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 214,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1829,
        "startLineNumber" : 19,
        "startColumnNumber" : 2,
        "endLineNumber" : 73,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * @param capacity - The maximum capacity of the knapsack\n * @param W - The weights of the items\n * @param V - The values of the items\n * @return The maximum achievable profit of selecting a subset of the elements such that thecapacity of the knapsack is not exceeded\n */\npublic static int knapsack(int capacity,int[] W,int[] V){\n  if (W == null || V == null || W.length != V.length || capacity < 0)   throw new IllegalArgumentException(\"Invalid input\");\n  final int N=W.length;\n  int[][] DP=new int[N + 1][capacity + 1];\n  for (int i=1; i <= N; i++) {\n    int w=W[i - 1], v=V[i - 1];\n    for (int sz=1; sz <= capacity; sz++) {\n      DP[i][sz]=DP[i - 1][sz];\n      if (sz >= w && DP[i - 1][sz - w] + v > DP[i][sz])       DP[i][sz]=DP[i - 1][sz - w] + v;\n    }\n  }\n  int sz=capacity;\n  List<Integer> itemsSelected=new ArrayList<>();\n  for (int i=N; i > 0; i--) {\n    if (DP[i][sz] != DP[i - 1][sz]) {\n      int itemIndex=i - 1;\n      itemsSelected.add(itemIndex);\n      sz-=W[itemIndex];\n    }\n  }\n  return DP[N][capacity];\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 233,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 35,
        "startColumnNumber" : 4,
        "endLineNumber" : 35,
        "endColumnNumber" : 46
      },
      "nodeContext" : "int[][] DP=new int[N + 1][capacity + 1];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 35,
      "startColumnNumber" : 43,
      "endLineNumber" : 35,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ArrayCreation,dimensions]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 35,
        "startColumnNumber" : 32,
        "endLineNumber" : 35,
        "endColumnNumber" : 44
      },
      "nodeContext" : "capacity + 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 35,
        "startColumnNumber" : 17,
        "endLineNumber" : 35,
        "endColumnNumber" : 45
      },
      "nodeContext" : "new int[N + 1][capacity + 1]",
      "nodeType" : "ArrayCreation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 35,
        "startColumnNumber" : 12,
        "endLineNumber" : 35,
        "endColumnNumber" : 45
      },
      "nodeContext" : "DP=new int[N + 1][capacity + 1]",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 35,
        "startColumnNumber" : 4,
        "endLineNumber" : 35,
        "endColumnNumber" : 46
      },
      "nodeContext" : "int[][] DP=new int[N + 1][capacity + 1];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1472,
        "startLineNumber" : 26,
        "startColumnNumber" : 61,
        "endLineNumber" : 73,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (W == null || V == null || W.length != V.length || capacity < 0)   throw new IllegalArgumentException(\"Invalid input\");\n  final int N=W.length;\n  int[][] DP=new int[N + 1][capacity + 1];\n  for (int i=1; i <= N; i++) {\n    int w=W[i - 1], v=V[i - 1];\n    for (int sz=1; sz <= capacity; sz++) {\n      DP[i][sz]=DP[i - 1][sz];\n      if (sz >= w && DP[i - 1][sz - w] + v > DP[i][sz])       DP[i][sz]=DP[i - 1][sz - w] + v;\n    }\n  }\n  int sz=capacity;\n  List<Integer> itemsSelected=new ArrayList<>();\n  for (int i=N; i > 0; i--) {\n    if (DP[i][sz] != DP[i - 1][sz]) {\n      int itemIndex=i - 1;\n      itemsSelected.add(itemIndex);\n      sz-=W[itemIndex];\n    }\n  }\n  return DP[N][capacity];\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 214,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1829,
        "startLineNumber" : 19,
        "startColumnNumber" : 2,
        "endLineNumber" : 73,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * @param capacity - The maximum capacity of the knapsack\n * @param W - The weights of the items\n * @param V - The values of the items\n * @return The maximum achievable profit of selecting a subset of the elements such that thecapacity of the knapsack is not exceeded\n */\npublic static int knapsack(int capacity,int[] W,int[] V){\n  if (W == null || V == null || W.length != V.length || capacity < 0)   throw new IllegalArgumentException(\"Invalid input\");\n  final int N=W.length;\n  int[][] DP=new int[N + 1][capacity + 1];\n  for (int i=1; i <= N; i++) {\n    int w=W[i - 1], v=V[i - 1];\n    for (int sz=1; sz <= capacity; sz++) {\n      DP[i][sz]=DP[i - 1][sz];\n      if (sz >= w && DP[i - 1][sz - w] + v > DP[i][sz])       DP[i][sz]=DP[i - 1][sz - w] + v;\n    }\n  }\n  int sz=capacity;\n  List<Integer> itemsSelected=new ArrayList<>();\n  for (int i=N; i > 0; i--) {\n    if (DP[i][sz] != DP[i - 1][sz]) {\n      int itemIndex=i - 1;\n      itemsSelected.add(itemIndex);\n      sz-=W[itemIndex];\n    }\n  }\n  return DP[N][capacity];\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 233,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 35,
        "startColumnNumber" : 4,
        "endLineNumber" : 35,
        "endColumnNumber" : 46
      },
      "nodeContext" : "int[][] DP=new int[N + 1][capacity + 1];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 37,
      "startColumnNumber" : 17,
      "endLineNumber" : 37,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 37,
        "startColumnNumber" : 13,
        "endLineNumber" : 37,
        "endColumnNumber" : 18
      },
      "nodeContext" : "i=1",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 37,
        "startColumnNumber" : 9,
        "endLineNumber" : 37,
        "endColumnNumber" : 18
      },
      "nodeContext" : "int i=1",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 454,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=1; i <= N; i++) {\n  int w=W[i - 1], v=V[i - 1];\n  for (int sz=1; sz <= capacity; sz++) {\n    DP[i][sz]=DP[i - 1][sz];\n    if (sz >= w && DP[i - 1][sz - w] + v > DP[i][sz])     DP[i][sz]=DP[i - 1][sz - w] + v;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 94,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1472,
        "startLineNumber" : 26,
        "startColumnNumber" : 61,
        "endLineNumber" : 73,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (W == null || V == null || W.length != V.length || capacity < 0)   throw new IllegalArgumentException(\"Invalid input\");\n  final int N=W.length;\n  int[][] DP=new int[N + 1][capacity + 1];\n  for (int i=1; i <= N; i++) {\n    int w=W[i - 1], v=V[i - 1];\n    for (int sz=1; sz <= capacity; sz++) {\n      DP[i][sz]=DP[i - 1][sz];\n      if (sz >= w && DP[i - 1][sz - w] + v > DP[i][sz])       DP[i][sz]=DP[i - 1][sz - w] + v;\n    }\n  }\n  int sz=capacity;\n  List<Integer> itemsSelected=new ArrayList<>();\n  for (int i=N; i > 0; i--) {\n    if (DP[i][sz] != DP[i - 1][sz]) {\n      int itemIndex=i - 1;\n      itemsSelected.add(itemIndex);\n      sz-=W[itemIndex];\n    }\n  }\n  return DP[N][capacity];\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 214,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1829,
        "startLineNumber" : 19,
        "startColumnNumber" : 2,
        "endLineNumber" : 73,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * @param capacity - The maximum capacity of the knapsack\n * @param W - The weights of the items\n * @param V - The values of the items\n * @return The maximum achievable profit of selecting a subset of the elements such that thecapacity of the knapsack is not exceeded\n */\npublic static int knapsack(int capacity,int[] W,int[] V){\n  if (W == null || V == null || W.length != V.length || capacity < 0)   throw new IllegalArgumentException(\"Invalid input\");\n  final int N=W.length;\n  int[][] DP=new int[N + 1][capacity + 1];\n  for (int i=1; i <= N; i++) {\n    int w=W[i - 1], v=V[i - 1];\n    for (int sz=1; sz <= capacity; sz++) {\n      DP[i][sz]=DP[i - 1][sz];\n      if (sz >= w && DP[i - 1][sz - w] + v > DP[i][sz])       DP[i][sz]=DP[i - 1][sz - w] + v;\n    }\n  }\n  int sz=capacity;\n  List<Integer> itemsSelected=new ArrayList<>();\n  for (int i=N; i > 0; i--) {\n    if (DP[i][sz] != DP[i - 1][sz]) {\n      int itemIndex=i - 1;\n      itemsSelected.add(itemIndex);\n      sz-=W[itemIndex];\n    }\n  }\n  return DP[N][capacity];\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 233,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 37,
        "startColumnNumber" : 9,
        "endLineNumber" : 37,
        "endColumnNumber" : 18
      },
      "nodeContext" : "int i=1",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 40,
      "startColumnNumber" : 20,
      "endLineNumber" : 40,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,index]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 40,
        "startColumnNumber" : 16,
        "endLineNumber" : 40,
        "endColumnNumber" : 21
      },
      "nodeContext" : "i - 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 40,
        "startColumnNumber" : 14,
        "endLineNumber" : 40,
        "endColumnNumber" : 22
      },
      "nodeContext" : "W[i - 1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 40,
        "startColumnNumber" : 10,
        "endLineNumber" : 40,
        "endColumnNumber" : 22
      },
      "nodeContext" : "w=W[i - 1]",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 40,
        "startColumnNumber" : 6,
        "endLineNumber" : 40,
        "endColumnNumber" : 37
      },
      "nodeContext" : "int w=W[i - 1], v=V[i - 1];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 425,
        "startLineNumber" : 37,
        "startColumnNumber" : 33,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int w=W[i - 1], v=V[i - 1];\n  for (int sz=1; sz <= capacity; sz++) {\n    DP[i][sz]=DP[i - 1][sz];\n    if (sz >= w && DP[i - 1][sz - w] + v > DP[i][sz])     DP[i][sz]=DP[i - 1][sz - w] + v;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 83,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 454,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=1; i <= N; i++) {\n  int w=W[i - 1], v=V[i - 1];\n  for (int sz=1; sz <= capacity; sz++) {\n    DP[i][sz]=DP[i - 1][sz];\n    if (sz >= w && DP[i - 1][sz - w] + v > DP[i][sz])     DP[i][sz]=DP[i - 1][sz - w] + v;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 94,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1472,
        "startLineNumber" : 26,
        "startColumnNumber" : 61,
        "endLineNumber" : 73,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (W == null || V == null || W.length != V.length || capacity < 0)   throw new IllegalArgumentException(\"Invalid input\");\n  final int N=W.length;\n  int[][] DP=new int[N + 1][capacity + 1];\n  for (int i=1; i <= N; i++) {\n    int w=W[i - 1], v=V[i - 1];\n    for (int sz=1; sz <= capacity; sz++) {\n      DP[i][sz]=DP[i - 1][sz];\n      if (sz >= w && DP[i - 1][sz - w] + v > DP[i][sz])       DP[i][sz]=DP[i - 1][sz - w] + v;\n    }\n  }\n  int sz=capacity;\n  List<Integer> itemsSelected=new ArrayList<>();\n  for (int i=N; i > 0; i--) {\n    if (DP[i][sz] != DP[i - 1][sz]) {\n      int itemIndex=i - 1;\n      itemsSelected.add(itemIndex);\n      sz-=W[itemIndex];\n    }\n  }\n  return DP[N][capacity];\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 214,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1829,
        "startLineNumber" : 19,
        "startColumnNumber" : 2,
        "endLineNumber" : 73,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * @param capacity - The maximum capacity of the knapsack\n * @param W - The weights of the items\n * @param V - The values of the items\n * @return The maximum achievable profit of selecting a subset of the elements such that thecapacity of the knapsack is not exceeded\n */\npublic static int knapsack(int capacity,int[] W,int[] V){\n  if (W == null || V == null || W.length != V.length || capacity < 0)   throw new IllegalArgumentException(\"Invalid input\");\n  final int N=W.length;\n  int[][] DP=new int[N + 1][capacity + 1];\n  for (int i=1; i <= N; i++) {\n    int w=W[i - 1], v=V[i - 1];\n    for (int sz=1; sz <= capacity; sz++) {\n      DP[i][sz]=DP[i - 1][sz];\n      if (sz >= w && DP[i - 1][sz - w] + v > DP[i][sz])       DP[i][sz]=DP[i - 1][sz - w] + v;\n    }\n  }\n  int sz=capacity;\n  List<Integer> itemsSelected=new ArrayList<>();\n  for (int i=N; i > 0; i--) {\n    if (DP[i][sz] != DP[i - 1][sz]) {\n      int itemIndex=i - 1;\n      itemsSelected.add(itemIndex);\n      sz-=W[itemIndex];\n    }\n  }\n  return DP[N][capacity];\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 233,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 40,
        "startColumnNumber" : 6,
        "endLineNumber" : 40,
        "endColumnNumber" : 37
      },
      "nodeContext" : "int w=W[i - 1], v=V[i - 1];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 40,
      "startColumnNumber" : 34,
      "endLineNumber" : 40,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,index]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 40,
        "startColumnNumber" : 30,
        "endLineNumber" : 40,
        "endColumnNumber" : 35
      },
      "nodeContext" : "i - 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 40,
        "startColumnNumber" : 28,
        "endLineNumber" : 40,
        "endColumnNumber" : 36
      },
      "nodeContext" : "V[i - 1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 40,
        "startColumnNumber" : 24,
        "endLineNumber" : 40,
        "endColumnNumber" : 36
      },
      "nodeContext" : "v=V[i - 1]",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 40,
        "startColumnNumber" : 6,
        "endLineNumber" : 40,
        "endColumnNumber" : 37
      },
      "nodeContext" : "int w=W[i - 1], v=V[i - 1];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 425,
        "startLineNumber" : 37,
        "startColumnNumber" : 33,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int w=W[i - 1], v=V[i - 1];\n  for (int sz=1; sz <= capacity; sz++) {\n    DP[i][sz]=DP[i - 1][sz];\n    if (sz >= w && DP[i - 1][sz - w] + v > DP[i][sz])     DP[i][sz]=DP[i - 1][sz - w] + v;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 83,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 454,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=1; i <= N; i++) {\n  int w=W[i - 1], v=V[i - 1];\n  for (int sz=1; sz <= capacity; sz++) {\n    DP[i][sz]=DP[i - 1][sz];\n    if (sz >= w && DP[i - 1][sz - w] + v > DP[i][sz])     DP[i][sz]=DP[i - 1][sz - w] + v;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 94,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1472,
        "startLineNumber" : 26,
        "startColumnNumber" : 61,
        "endLineNumber" : 73,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (W == null || V == null || W.length != V.length || capacity < 0)   throw new IllegalArgumentException(\"Invalid input\");\n  final int N=W.length;\n  int[][] DP=new int[N + 1][capacity + 1];\n  for (int i=1; i <= N; i++) {\n    int w=W[i - 1], v=V[i - 1];\n    for (int sz=1; sz <= capacity; sz++) {\n      DP[i][sz]=DP[i - 1][sz];\n      if (sz >= w && DP[i - 1][sz - w] + v > DP[i][sz])       DP[i][sz]=DP[i - 1][sz - w] + v;\n    }\n  }\n  int sz=capacity;\n  List<Integer> itemsSelected=new ArrayList<>();\n  for (int i=N; i > 0; i--) {\n    if (DP[i][sz] != DP[i - 1][sz]) {\n      int itemIndex=i - 1;\n      itemsSelected.add(itemIndex);\n      sz-=W[itemIndex];\n    }\n  }\n  return DP[N][capacity];\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 214,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1829,
        "startLineNumber" : 19,
        "startColumnNumber" : 2,
        "endLineNumber" : 73,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * @param capacity - The maximum capacity of the knapsack\n * @param W - The weights of the items\n * @param V - The values of the items\n * @return The maximum achievable profit of selecting a subset of the elements such that thecapacity of the knapsack is not exceeded\n */\npublic static int knapsack(int capacity,int[] W,int[] V){\n  if (W == null || V == null || W.length != V.length || capacity < 0)   throw new IllegalArgumentException(\"Invalid input\");\n  final int N=W.length;\n  int[][] DP=new int[N + 1][capacity + 1];\n  for (int i=1; i <= N; i++) {\n    int w=W[i - 1], v=V[i - 1];\n    for (int sz=1; sz <= capacity; sz++) {\n      DP[i][sz]=DP[i - 1][sz];\n      if (sz >= w && DP[i - 1][sz - w] + v > DP[i][sz])       DP[i][sz]=DP[i - 1][sz - w] + v;\n    }\n  }\n  int sz=capacity;\n  List<Integer> itemsSelected=new ArrayList<>();\n  for (int i=N; i > 0; i--) {\n    if (DP[i][sz] != DP[i - 1][sz]) {\n      int itemIndex=i - 1;\n      itemsSelected.add(itemIndex);\n      sz-=W[itemIndex];\n    }\n  }\n  return DP[N][capacity];\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 233,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 40,
        "startColumnNumber" : 6,
        "endLineNumber" : 40,
        "endColumnNumber" : 37
      },
      "nodeContext" : "int w=W[i - 1], v=V[i - 1];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 42,
      "startColumnNumber" : 20,
      "endLineNumber" : 42,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
      "nodePosition" : {
        "charLength" : 6,
        "startLineNumber" : 42,
        "startColumnNumber" : 15,
        "endLineNumber" : 42,
        "endColumnNumber" : 21
      },
      "nodeContext" : "sz=1",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 42,
        "startColumnNumber" : 11,
        "endLineNumber" : 42,
        "endColumnNumber" : 21
      },
      "nodeContext" : "int sz=1",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 325,
        "startLineNumber" : 42,
        "startColumnNumber" : 6,
        "endLineNumber" : 50,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int sz=1; sz <= capacity; sz++) {\n  DP[i][sz]=DP[i - 1][sz];\n  if (sz >= w && DP[i - 1][sz - w] + v > DP[i][sz])   DP[i][sz]=DP[i - 1][sz - w] + v;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 66,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 425,
        "startLineNumber" : 37,
        "startColumnNumber" : 33,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int w=W[i - 1], v=V[i - 1];\n  for (int sz=1; sz <= capacity; sz++) {\n    DP[i][sz]=DP[i - 1][sz];\n    if (sz >= w && DP[i - 1][sz - w] + v > DP[i][sz])     DP[i][sz]=DP[i - 1][sz - w] + v;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 83,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 454,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=1; i <= N; i++) {\n  int w=W[i - 1], v=V[i - 1];\n  for (int sz=1; sz <= capacity; sz++) {\n    DP[i][sz]=DP[i - 1][sz];\n    if (sz >= w && DP[i - 1][sz - w] + v > DP[i][sz])     DP[i][sz]=DP[i - 1][sz - w] + v;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 94,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1472,
        "startLineNumber" : 26,
        "startColumnNumber" : 61,
        "endLineNumber" : 73,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (W == null || V == null || W.length != V.length || capacity < 0)   throw new IllegalArgumentException(\"Invalid input\");\n  final int N=W.length;\n  int[][] DP=new int[N + 1][capacity + 1];\n  for (int i=1; i <= N; i++) {\n    int w=W[i - 1], v=V[i - 1];\n    for (int sz=1; sz <= capacity; sz++) {\n      DP[i][sz]=DP[i - 1][sz];\n      if (sz >= w && DP[i - 1][sz - w] + v > DP[i][sz])       DP[i][sz]=DP[i - 1][sz - w] + v;\n    }\n  }\n  int sz=capacity;\n  List<Integer> itemsSelected=new ArrayList<>();\n  for (int i=N; i > 0; i--) {\n    if (DP[i][sz] != DP[i - 1][sz]) {\n      int itemIndex=i - 1;\n      itemsSelected.add(itemIndex);\n      sz-=W[itemIndex];\n    }\n  }\n  return DP[N][capacity];\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 214,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1829,
        "startLineNumber" : 19,
        "startColumnNumber" : 2,
        "endLineNumber" : 73,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * @param capacity - The maximum capacity of the knapsack\n * @param W - The weights of the items\n * @param V - The values of the items\n * @return The maximum achievable profit of selecting a subset of the elements such that thecapacity of the knapsack is not exceeded\n */\npublic static int knapsack(int capacity,int[] W,int[] V){\n  if (W == null || V == null || W.length != V.length || capacity < 0)   throw new IllegalArgumentException(\"Invalid input\");\n  final int N=W.length;\n  int[][] DP=new int[N + 1][capacity + 1];\n  for (int i=1; i <= N; i++) {\n    int w=W[i - 1], v=V[i - 1];\n    for (int sz=1; sz <= capacity; sz++) {\n      DP[i][sz]=DP[i - 1][sz];\n      if (sz >= w && DP[i - 1][sz - w] + v > DP[i][sz])       DP[i][sz]=DP[i - 1][sz - w] + v;\n    }\n  }\n  int sz=capacity;\n  List<Integer> itemsSelected=new ArrayList<>();\n  for (int i=N; i > 0; i--) {\n    if (DP[i][sz] != DP[i - 1][sz]) {\n      int itemIndex=i - 1;\n      itemsSelected.add(itemIndex);\n      sz-=W[itemIndex];\n    }\n  }\n  return DP[N][capacity];\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 233,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 42,
        "startColumnNumber" : 11,
        "endLineNumber" : 42,
        "endColumnNumber" : 21
      },
      "nodeContext" : "int sz=1",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 45,
      "startColumnNumber" : 27,
      "endLineNumber" : 45,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,index]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 45,
        "startColumnNumber" : 23,
        "endLineNumber" : 45,
        "endColumnNumber" : 28
      },
      "nodeContext" : "i - 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 45,
        "startColumnNumber" : 20,
        "endLineNumber" : 45,
        "endColumnNumber" : 29
      },
      "nodeContext" : "DP[i - 1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 45,
        "startColumnNumber" : 20,
        "endLineNumber" : 45,
        "endColumnNumber" : 33
      },
      "nodeContext" : "DP[i - 1][sz]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 45,
        "startColumnNumber" : 8,
        "endLineNumber" : 45,
        "endColumnNumber" : 33
      },
      "nodeContext" : "DP[i][sz]=DP[i - 1][sz]",
      "nodeType" : "Assignment",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 45,
        "startColumnNumber" : 8,
        "endLineNumber" : 45,
        "endColumnNumber" : 34
      },
      "nodeContext" : "DP[i][sz]=DP[i - 1][sz];\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 286,
        "startLineNumber" : 42,
        "startColumnNumber" : 45,
        "endLineNumber" : 50,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  DP[i][sz]=DP[i - 1][sz];\n  if (sz >= w && DP[i - 1][sz - w] + v > DP[i][sz])   DP[i][sz]=DP[i - 1][sz - w] + v;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 55,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 325,
        "startLineNumber" : 42,
        "startColumnNumber" : 6,
        "endLineNumber" : 50,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int sz=1; sz <= capacity; sz++) {\n  DP[i][sz]=DP[i - 1][sz];\n  if (sz >= w && DP[i - 1][sz - w] + v > DP[i][sz])   DP[i][sz]=DP[i - 1][sz - w] + v;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 66,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 425,
        "startLineNumber" : 37,
        "startColumnNumber" : 33,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int w=W[i - 1], v=V[i - 1];\n  for (int sz=1; sz <= capacity; sz++) {\n    DP[i][sz]=DP[i - 1][sz];\n    if (sz >= w && DP[i - 1][sz - w] + v > DP[i][sz])     DP[i][sz]=DP[i - 1][sz - w] + v;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 83,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 454,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=1; i <= N; i++) {\n  int w=W[i - 1], v=V[i - 1];\n  for (int sz=1; sz <= capacity; sz++) {\n    DP[i][sz]=DP[i - 1][sz];\n    if (sz >= w && DP[i - 1][sz - w] + v > DP[i][sz])     DP[i][sz]=DP[i - 1][sz - w] + v;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 94,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1472,
        "startLineNumber" : 26,
        "startColumnNumber" : 61,
        "endLineNumber" : 73,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (W == null || V == null || W.length != V.length || capacity < 0)   throw new IllegalArgumentException(\"Invalid input\");\n  final int N=W.length;\n  int[][] DP=new int[N + 1][capacity + 1];\n  for (int i=1; i <= N; i++) {\n    int w=W[i - 1], v=V[i - 1];\n    for (int sz=1; sz <= capacity; sz++) {\n      DP[i][sz]=DP[i - 1][sz];\n      if (sz >= w && DP[i - 1][sz - w] + v > DP[i][sz])       DP[i][sz]=DP[i - 1][sz - w] + v;\n    }\n  }\n  int sz=capacity;\n  List<Integer> itemsSelected=new ArrayList<>();\n  for (int i=N; i > 0; i--) {\n    if (DP[i][sz] != DP[i - 1][sz]) {\n      int itemIndex=i - 1;\n      itemsSelected.add(itemIndex);\n      sz-=W[itemIndex];\n    }\n  }\n  return DP[N][capacity];\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 214,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1829,
        "startLineNumber" : 19,
        "startColumnNumber" : 2,
        "endLineNumber" : 73,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * @param capacity - The maximum capacity of the knapsack\n * @param W - The weights of the items\n * @param V - The values of the items\n * @return The maximum achievable profit of selecting a subset of the elements such that thecapacity of the knapsack is not exceeded\n */\npublic static int knapsack(int capacity,int[] W,int[] V){\n  if (W == null || V == null || W.length != V.length || capacity < 0)   throw new IllegalArgumentException(\"Invalid input\");\n  final int N=W.length;\n  int[][] DP=new int[N + 1][capacity + 1];\n  for (int i=1; i <= N; i++) {\n    int w=W[i - 1], v=V[i - 1];\n    for (int sz=1; sz <= capacity; sz++) {\n      DP[i][sz]=DP[i - 1][sz];\n      if (sz >= w && DP[i - 1][sz - w] + v > DP[i][sz])       DP[i][sz]=DP[i - 1][sz - w] + v;\n    }\n  }\n  int sz=capacity;\n  List<Integer> itemsSelected=new ArrayList<>();\n  for (int i=N; i > 0; i--) {\n    if (DP[i][sz] != DP[i - 1][sz]) {\n      int itemIndex=i - 1;\n      itemsSelected.add(itemIndex);\n      sz-=W[itemIndex];\n    }\n  }\n  return DP[N][capacity];\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 233,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 45,
        "startColumnNumber" : 8,
        "endLineNumber" : 45,
        "endColumnNumber" : 34
      },
      "nodeContext" : "DP[i][sz]=DP[i - 1][sz];\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 49,
      "startColumnNumber" : 30,
      "endLineNumber" : 49,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,index]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 49,
        "startColumnNumber" : 26,
        "endLineNumber" : 49,
        "endColumnNumber" : 31
      },
      "nodeContext" : "i - 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 49,
        "startColumnNumber" : 23,
        "endLineNumber" : 49,
        "endColumnNumber" : 32
      },
      "nodeContext" : "DP[i - 1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 49,
        "startColumnNumber" : 23,
        "endLineNumber" : 49,
        "endColumnNumber" : 40
      },
      "nodeContext" : "DP[i - 1][sz - w]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 49,
        "startColumnNumber" : 23,
        "endLineNumber" : 49,
        "endColumnNumber" : 44
      },
      "nodeContext" : "DP[i - 1][sz - w] + v",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 49,
        "startColumnNumber" : 23,
        "endLineNumber" : 49,
        "endColumnNumber" : 56
      },
      "nodeContext" : "DP[i - 1][sz - w] + v > DP[i][sz]",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 49,
        "startColumnNumber" : 12,
        "endLineNumber" : 49,
        "endColumnNumber" : 56
      },
      "nodeContext" : "sz >= w && DP[i - 1][sz - w] + v > DP[i][sz]",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 49,
        "endColumnNumber" : 92
      },
      "nodeContext" : "if (sz >= w && DP[i - 1][sz - w] + v > DP[i][sz]) DP[i][sz]=DP[i - 1][sz - w] + v;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 40,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 286,
        "startLineNumber" : 42,
        "startColumnNumber" : 45,
        "endLineNumber" : 50,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  DP[i][sz]=DP[i - 1][sz];\n  if (sz >= w && DP[i - 1][sz - w] + v > DP[i][sz])   DP[i][sz]=DP[i - 1][sz - w] + v;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 55,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 325,
        "startLineNumber" : 42,
        "startColumnNumber" : 6,
        "endLineNumber" : 50,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int sz=1; sz <= capacity; sz++) {\n  DP[i][sz]=DP[i - 1][sz];\n  if (sz >= w && DP[i - 1][sz - w] + v > DP[i][sz])   DP[i][sz]=DP[i - 1][sz - w] + v;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 66,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 425,
        "startLineNumber" : 37,
        "startColumnNumber" : 33,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int w=W[i - 1], v=V[i - 1];\n  for (int sz=1; sz <= capacity; sz++) {\n    DP[i][sz]=DP[i - 1][sz];\n    if (sz >= w && DP[i - 1][sz - w] + v > DP[i][sz])     DP[i][sz]=DP[i - 1][sz - w] + v;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 83,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 454,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=1; i <= N; i++) {\n  int w=W[i - 1], v=V[i - 1];\n  for (int sz=1; sz <= capacity; sz++) {\n    DP[i][sz]=DP[i - 1][sz];\n    if (sz >= w && DP[i - 1][sz - w] + v > DP[i][sz])     DP[i][sz]=DP[i - 1][sz - w] + v;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 94,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1472,
        "startLineNumber" : 26,
        "startColumnNumber" : 61,
        "endLineNumber" : 73,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (W == null || V == null || W.length != V.length || capacity < 0)   throw new IllegalArgumentException(\"Invalid input\");\n  final int N=W.length;\n  int[][] DP=new int[N + 1][capacity + 1];\n  for (int i=1; i <= N; i++) {\n    int w=W[i - 1], v=V[i - 1];\n    for (int sz=1; sz <= capacity; sz++) {\n      DP[i][sz]=DP[i - 1][sz];\n      if (sz >= w && DP[i - 1][sz - w] + v > DP[i][sz])       DP[i][sz]=DP[i - 1][sz - w] + v;\n    }\n  }\n  int sz=capacity;\n  List<Integer> itemsSelected=new ArrayList<>();\n  for (int i=N; i > 0; i--) {\n    if (DP[i][sz] != DP[i - 1][sz]) {\n      int itemIndex=i - 1;\n      itemsSelected.add(itemIndex);\n      sz-=W[itemIndex];\n    }\n  }\n  return DP[N][capacity];\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 214,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1829,
        "startLineNumber" : 19,
        "startColumnNumber" : 2,
        "endLineNumber" : 73,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * @param capacity - The maximum capacity of the knapsack\n * @param W - The weights of the items\n * @param V - The values of the items\n * @return The maximum achievable profit of selecting a subset of the elements such that thecapacity of the knapsack is not exceeded\n */\npublic static int knapsack(int capacity,int[] W,int[] V){\n  if (W == null || V == null || W.length != V.length || capacity < 0)   throw new IllegalArgumentException(\"Invalid input\");\n  final int N=W.length;\n  int[][] DP=new int[N + 1][capacity + 1];\n  for (int i=1; i <= N; i++) {\n    int w=W[i - 1], v=V[i - 1];\n    for (int sz=1; sz <= capacity; sz++) {\n      DP[i][sz]=DP[i - 1][sz];\n      if (sz >= w && DP[i - 1][sz - w] + v > DP[i][sz])       DP[i][sz]=DP[i - 1][sz - w] + v;\n    }\n  }\n  int sz=capacity;\n  List<Integer> itemsSelected=new ArrayList<>();\n  for (int i=N; i > 0; i--) {\n    if (DP[i][sz] != DP[i - 1][sz]) {\n      int itemIndex=i - 1;\n      itemsSelected.add(itemIndex);\n      sz-=W[itemIndex];\n    }\n  }\n  return DP[N][capacity];\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 233,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 49,
        "endColumnNumber" : 92
      },
      "nodeContext" : "if (sz >= w && DP[i - 1][sz - w] + v > DP[i][sz]) DP[i][sz]=DP[i - 1][sz - w] + v;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 40,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 49,
      "startColumnNumber" : 77,
      "endLineNumber" : 49,
      "endColumnNumber" : 78
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,index]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 49,
        "startColumnNumber" : 73,
        "endLineNumber" : 49,
        "endColumnNumber" : 78
      },
      "nodeContext" : "i - 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 49,
        "startColumnNumber" : 70,
        "endLineNumber" : 49,
        "endColumnNumber" : 79
      },
      "nodeContext" : "DP[i - 1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 49,
        "startColumnNumber" : 70,
        "endLineNumber" : 49,
        "endColumnNumber" : 87
      },
      "nodeContext" : "DP[i - 1][sz - w]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 49,
        "startColumnNumber" : 70,
        "endLineNumber" : 49,
        "endColumnNumber" : 91
      },
      "nodeContext" : "DP[i - 1][sz - w] + v",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 49,
        "startColumnNumber" : 58,
        "endLineNumber" : 49,
        "endColumnNumber" : 91
      },
      "nodeContext" : "DP[i][sz]=DP[i - 1][sz - w] + v",
      "nodeType" : "Assignment",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 49,
        "startColumnNumber" : 58,
        "endLineNumber" : 49,
        "endColumnNumber" : 92
      },
      "nodeContext" : "DP[i][sz]=DP[i - 1][sz - w] + v;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 49,
        "endColumnNumber" : 92
      },
      "nodeContext" : "if (sz >= w && DP[i - 1][sz - w] + v > DP[i][sz]) DP[i][sz]=DP[i - 1][sz - w] + v;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 40,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 286,
        "startLineNumber" : 42,
        "startColumnNumber" : 45,
        "endLineNumber" : 50,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  DP[i][sz]=DP[i - 1][sz];\n  if (sz >= w && DP[i - 1][sz - w] + v > DP[i][sz])   DP[i][sz]=DP[i - 1][sz - w] + v;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 55,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 325,
        "startLineNumber" : 42,
        "startColumnNumber" : 6,
        "endLineNumber" : 50,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int sz=1; sz <= capacity; sz++) {\n  DP[i][sz]=DP[i - 1][sz];\n  if (sz >= w && DP[i - 1][sz - w] + v > DP[i][sz])   DP[i][sz]=DP[i - 1][sz - w] + v;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 66,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 425,
        "startLineNumber" : 37,
        "startColumnNumber" : 33,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int w=W[i - 1], v=V[i - 1];\n  for (int sz=1; sz <= capacity; sz++) {\n    DP[i][sz]=DP[i - 1][sz];\n    if (sz >= w && DP[i - 1][sz - w] + v > DP[i][sz])     DP[i][sz]=DP[i - 1][sz - w] + v;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 83,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 454,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 51,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=1; i <= N; i++) {\n  int w=W[i - 1], v=V[i - 1];\n  for (int sz=1; sz <= capacity; sz++) {\n    DP[i][sz]=DP[i - 1][sz];\n    if (sz >= w && DP[i - 1][sz - w] + v > DP[i][sz])     DP[i][sz]=DP[i - 1][sz - w] + v;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 94,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1472,
        "startLineNumber" : 26,
        "startColumnNumber" : 61,
        "endLineNumber" : 73,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (W == null || V == null || W.length != V.length || capacity < 0)   throw new IllegalArgumentException(\"Invalid input\");\n  final int N=W.length;\n  int[][] DP=new int[N + 1][capacity + 1];\n  for (int i=1; i <= N; i++) {\n    int w=W[i - 1], v=V[i - 1];\n    for (int sz=1; sz <= capacity; sz++) {\n      DP[i][sz]=DP[i - 1][sz];\n      if (sz >= w && DP[i - 1][sz - w] + v > DP[i][sz])       DP[i][sz]=DP[i - 1][sz - w] + v;\n    }\n  }\n  int sz=capacity;\n  List<Integer> itemsSelected=new ArrayList<>();\n  for (int i=N; i > 0; i--) {\n    if (DP[i][sz] != DP[i - 1][sz]) {\n      int itemIndex=i - 1;\n      itemsSelected.add(itemIndex);\n      sz-=W[itemIndex];\n    }\n  }\n  return DP[N][capacity];\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 214,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1829,
        "startLineNumber" : 19,
        "startColumnNumber" : 2,
        "endLineNumber" : 73,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * @param capacity - The maximum capacity of the knapsack\n * @param W - The weights of the items\n * @param V - The values of the items\n * @return The maximum achievable profit of selecting a subset of the elements such that thecapacity of the knapsack is not exceeded\n */\npublic static int knapsack(int capacity,int[] W,int[] V){\n  if (W == null || V == null || W.length != V.length || capacity < 0)   throw new IllegalArgumentException(\"Invalid input\");\n  final int N=W.length;\n  int[][] DP=new int[N + 1][capacity + 1];\n  for (int i=1; i <= N; i++) {\n    int w=W[i - 1], v=V[i - 1];\n    for (int sz=1; sz <= capacity; sz++) {\n      DP[i][sz]=DP[i - 1][sz];\n      if (sz >= w && DP[i - 1][sz - w] + v > DP[i][sz])       DP[i][sz]=DP[i - 1][sz - w] + v;\n    }\n  }\n  int sz=capacity;\n  List<Integer> itemsSelected=new ArrayList<>();\n  for (int i=N; i > 0; i--) {\n    if (DP[i][sz] != DP[i - 1][sz]) {\n      int itemIndex=i - 1;\n      itemsSelected.add(itemIndex);\n      sz-=W[itemIndex];\n    }\n  }\n  return DP[N][capacity];\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 233,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 49,
        "endColumnNumber" : 92
      },
      "nodeContext" : "if (sz >= w && DP[i - 1][sz - w] + v > DP[i][sz]) DP[i][sz]=DP[i - 1][sz - w] + v;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 40,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 60,
      "startColumnNumber" : 30,
      "endLineNumber" : 60,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,index]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 60,
        "startColumnNumber" : 26,
        "endLineNumber" : 60,
        "endColumnNumber" : 31
      },
      "nodeContext" : "i - 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 60,
        "startColumnNumber" : 23,
        "endLineNumber" : 60,
        "endColumnNumber" : 32
      },
      "nodeContext" : "DP[i - 1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 60,
        "startColumnNumber" : 23,
        "endLineNumber" : 60,
        "endColumnNumber" : 36
      },
      "nodeContext" : "DP[i - 1][sz]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 60,
        "startColumnNumber" : 10,
        "endLineNumber" : 60,
        "endColumnNumber" : 36
      },
      "nodeContext" : "DP[i][sz] != DP[i - 1][sz]",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 138,
        "startLineNumber" : 60,
        "startColumnNumber" : 6,
        "endLineNumber" : 64,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (DP[i][sz] != DP[i - 1][sz]) {\n  int itemIndex=i - 1;\n  itemsSelected.add(itemIndex);\n  sz-=W[itemIndex];\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 33,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 152,
        "startLineNumber" : 59,
        "startColumnNumber" : 32,
        "endLineNumber" : 65,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (DP[i][sz] != DP[i - 1][sz]) {\n    int itemIndex=i - 1;\n    itemsSelected.add(itemIndex);\n    sz-=W[itemIndex];\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 34,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 180,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 65,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=N; i > 0; i--) {\n  if (DP[i][sz] != DP[i - 1][sz]) {\n    int itemIndex=i - 1;\n    itemsSelected.add(itemIndex);\n    sz-=W[itemIndex];\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 45,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1472,
        "startLineNumber" : 26,
        "startColumnNumber" : 61,
        "endLineNumber" : 73,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (W == null || V == null || W.length != V.length || capacity < 0)   throw new IllegalArgumentException(\"Invalid input\");\n  final int N=W.length;\n  int[][] DP=new int[N + 1][capacity + 1];\n  for (int i=1; i <= N; i++) {\n    int w=W[i - 1], v=V[i - 1];\n    for (int sz=1; sz <= capacity; sz++) {\n      DP[i][sz]=DP[i - 1][sz];\n      if (sz >= w && DP[i - 1][sz - w] + v > DP[i][sz])       DP[i][sz]=DP[i - 1][sz - w] + v;\n    }\n  }\n  int sz=capacity;\n  List<Integer> itemsSelected=new ArrayList<>();\n  for (int i=N; i > 0; i--) {\n    if (DP[i][sz] != DP[i - 1][sz]) {\n      int itemIndex=i - 1;\n      itemsSelected.add(itemIndex);\n      sz-=W[itemIndex];\n    }\n  }\n  return DP[N][capacity];\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 214,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1829,
        "startLineNumber" : 19,
        "startColumnNumber" : 2,
        "endLineNumber" : 73,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * @param capacity - The maximum capacity of the knapsack\n * @param W - The weights of the items\n * @param V - The values of the items\n * @return The maximum achievable profit of selecting a subset of the elements such that thecapacity of the knapsack is not exceeded\n */\npublic static int knapsack(int capacity,int[] W,int[] V){\n  if (W == null || V == null || W.length != V.length || capacity < 0)   throw new IllegalArgumentException(\"Invalid input\");\n  final int N=W.length;\n  int[][] DP=new int[N + 1][capacity + 1];\n  for (int i=1; i <= N; i++) {\n    int w=W[i - 1], v=V[i - 1];\n    for (int sz=1; sz <= capacity; sz++) {\n      DP[i][sz]=DP[i - 1][sz];\n      if (sz >= w && DP[i - 1][sz - w] + v > DP[i][sz])       DP[i][sz]=DP[i - 1][sz - w] + v;\n    }\n  }\n  int sz=capacity;\n  List<Integer> itemsSelected=new ArrayList<>();\n  for (int i=N; i > 0; i--) {\n    if (DP[i][sz] != DP[i - 1][sz]) {\n      int itemIndex=i - 1;\n      itemsSelected.add(itemIndex);\n      sz-=W[itemIndex];\n    }\n  }\n  return DP[N][capacity];\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 233,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 60,
        "startColumnNumber" : 10,
        "endLineNumber" : 60,
        "endColumnNumber" : 36
      },
      "nodeContext" : "DP[i][sz] != DP[i - 1][sz]",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 61,
      "startColumnNumber" : 28,
      "endLineNumber" : 61,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 61,
        "startColumnNumber" : 24,
        "endLineNumber" : 61,
        "endColumnNumber" : 29
      },
      "nodeContext" : "i - 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 61,
        "startColumnNumber" : 12,
        "endLineNumber" : 61,
        "endColumnNumber" : 29
      },
      "nodeContext" : "itemIndex=i - 1",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 61,
        "startColumnNumber" : 8,
        "endLineNumber" : 61,
        "endColumnNumber" : 30
      },
      "nodeContext" : "int itemIndex=i - 1;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 60,
        "startColumnNumber" : 38,
        "endLineNumber" : 64,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  int itemIndex=i - 1;\n  itemsSelected.add(itemIndex);\n  sz-=W[itemIndex];\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 138,
        "startLineNumber" : 60,
        "startColumnNumber" : 6,
        "endLineNumber" : 64,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (DP[i][sz] != DP[i - 1][sz]) {\n  int itemIndex=i - 1;\n  itemsSelected.add(itemIndex);\n  sz-=W[itemIndex];\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 33,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 152,
        "startLineNumber" : 59,
        "startColumnNumber" : 32,
        "endLineNumber" : 65,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (DP[i][sz] != DP[i - 1][sz]) {\n    int itemIndex=i - 1;\n    itemsSelected.add(itemIndex);\n    sz-=W[itemIndex];\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 34,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 180,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 65,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=N; i > 0; i--) {\n  if (DP[i][sz] != DP[i - 1][sz]) {\n    int itemIndex=i - 1;\n    itemsSelected.add(itemIndex);\n    sz-=W[itemIndex];\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 45,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1472,
        "startLineNumber" : 26,
        "startColumnNumber" : 61,
        "endLineNumber" : 73,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (W == null || V == null || W.length != V.length || capacity < 0)   throw new IllegalArgumentException(\"Invalid input\");\n  final int N=W.length;\n  int[][] DP=new int[N + 1][capacity + 1];\n  for (int i=1; i <= N; i++) {\n    int w=W[i - 1], v=V[i - 1];\n    for (int sz=1; sz <= capacity; sz++) {\n      DP[i][sz]=DP[i - 1][sz];\n      if (sz >= w && DP[i - 1][sz - w] + v > DP[i][sz])       DP[i][sz]=DP[i - 1][sz - w] + v;\n    }\n  }\n  int sz=capacity;\n  List<Integer> itemsSelected=new ArrayList<>();\n  for (int i=N; i > 0; i--) {\n    if (DP[i][sz] != DP[i - 1][sz]) {\n      int itemIndex=i - 1;\n      itemsSelected.add(itemIndex);\n      sz-=W[itemIndex];\n    }\n  }\n  return DP[N][capacity];\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 214,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1829,
        "startLineNumber" : 19,
        "startColumnNumber" : 2,
        "endLineNumber" : 73,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * @param capacity - The maximum capacity of the knapsack\n * @param W - The weights of the items\n * @param V - The values of the items\n * @return The maximum achievable profit of selecting a subset of the elements such that thecapacity of the knapsack is not exceeded\n */\npublic static int knapsack(int capacity,int[] W,int[] V){\n  if (W == null || V == null || W.length != V.length || capacity < 0)   throw new IllegalArgumentException(\"Invalid input\");\n  final int N=W.length;\n  int[][] DP=new int[N + 1][capacity + 1];\n  for (int i=1; i <= N; i++) {\n    int w=W[i - 1], v=V[i - 1];\n    for (int sz=1; sz <= capacity; sz++) {\n      DP[i][sz]=DP[i - 1][sz];\n      if (sz >= w && DP[i - 1][sz - w] + v > DP[i][sz])       DP[i][sz]=DP[i - 1][sz - w] + v;\n    }\n  }\n  int sz=capacity;\n  List<Integer> itemsSelected=new ArrayList<>();\n  for (int i=N; i > 0; i--) {\n    if (DP[i][sz] != DP[i - 1][sz]) {\n      int itemIndex=i - 1;\n      itemsSelected.add(itemIndex);\n      sz-=W[itemIndex];\n    }\n  }\n  return DP[N][capacity];\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 233,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 61,
        "startColumnNumber" : 8,
        "endLineNumber" : 61,
        "endColumnNumber" : 30
      },
      "nodeContext" : "int itemIndex=i - 1;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 35,
    "startColumnNumber" : 29,
    "endLineNumber" : 35,
    "endColumnNumber" : 30
  }, {
    "charLength" : 1,
    "startLineNumber" : 35,
    "startColumnNumber" : 43,
    "endLineNumber" : 35,
    "endColumnNumber" : 44
  }, {
    "charLength" : 1,
    "startLineNumber" : 37,
    "startColumnNumber" : 17,
    "endLineNumber" : 37,
    "endColumnNumber" : 18
  }, {
    "charLength" : 1,
    "startLineNumber" : 40,
    "startColumnNumber" : 20,
    "endLineNumber" : 40,
    "endColumnNumber" : 21
  }, {
    "charLength" : 1,
    "startLineNumber" : 40,
    "startColumnNumber" : 34,
    "endLineNumber" : 40,
    "endColumnNumber" : 35
  }, {
    "charLength" : 1,
    "startLineNumber" : 42,
    "startColumnNumber" : 20,
    "endLineNumber" : 42,
    "endColumnNumber" : 21
  }, {
    "charLength" : 1,
    "startLineNumber" : 45,
    "startColumnNumber" : 27,
    "endLineNumber" : 45,
    "endColumnNumber" : 28
  }, {
    "charLength" : 1,
    "startLineNumber" : 49,
    "startColumnNumber" : 30,
    "endLineNumber" : 49,
    "endColumnNumber" : 31
  }, {
    "charLength" : 1,
    "startLineNumber" : 49,
    "startColumnNumber" : 77,
    "endLineNumber" : 49,
    "endColumnNumber" : 78
  }, {
    "charLength" : 1,
    "startLineNumber" : 60,
    "startColumnNumber" : 30,
    "endLineNumber" : 60,
    "endColumnNumber" : 31
  }, {
    "charLength" : 1,
    "startLineNumber" : 61,
    "startColumnNumber" : 28,
    "endLineNumber" : 61,
    "endColumnNumber" : 29
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 9
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 11
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 11
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 11
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 11
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 11
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 11
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 11
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 11
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 4
  } ]
}