{
  "id" : 341,
  "expression" : "context.legacyBehaviour()",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-table/flink-table-planner/src/main/java/org/apache/flink/table/planner/functions/casting/MapAndMultisetToStringCastRule.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "context.legacyBehaviour()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 206,
      "startColumnNumber" : 41,
      "endLineNumber" : 206,
      "endColumnNumber" : 66
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 206,
        "startColumnNumber" : 40,
        "endLineNumber" : 206,
        "endColumnNumber" : 66
      },
      "nodeContext" : "!context.legacyBehaviour()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 206,
        "startColumnNumber" : 40,
        "endLineNumber" : 206,
        "endColumnNumber" : 87
      },
      "nodeContext" : "!context.legacyBehaviour() && couldTrim(length)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 529,
        "startLineNumber" : 206,
        "startColumnNumber" : 36,
        "endLineNumber" : 213,
        "endColumnNumber" : 37
      },
      "nodeContext" : "if (!context.legacyBehaviour() && couldTrim(length)) {\n  loopBodyWriter.ifStmt(stringExceedsLength(builderTerm,length),CastRuleUtils.CodeWriter::breakStmt);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 8770,
        "startLineNumber" : 172,
        "startColumnNumber" : 63,
        "endLineNumber" : 285,
        "endColumnNumber" : 33
      },
      "nodeContext" : "{\n  String keyTerm=newName(\"key\");\n  String keyIsNullTerm=newName(\"keyIsNull\");\n  String valueTerm=newName(\"value\");\n  String valueIsNullTerm=newName(\"valueIsNull\");\n  CastCodeBlock keyCast=CastRuleProvider.generateAlwaysNonNullCodeBlock(context,keyTerm,keyType,STRING_TYPE);\n  CastCodeBlock valueCast=CastRuleProvider.generateAlwaysNonNullCodeBlock(context,valueTerm,valueType,STRING_TYPE);\n  Consumer<CastRuleUtils.CodeWriter> appendNonNullValue=bodyWriter -> bodyWriter.assignStmt(valueTerm,rowFieldReadAccess(indexTerm,valueArrayTerm,valueType)).append(valueCast).stmt(methodCall(builderTerm,\"append\",valueCast.getReturnTerm()));\n  if (!context.legacyBehaviour() && couldTrim(length)) {\n    loopBodyWriter.ifStmt(stringExceedsLength(builderTerm,length),CastRuleUtils.CodeWriter::breakStmt);\n  }\n  loopBodyWriter.ifStmt(indexTerm + \" != 0\",thenBodyWriter -> thenBodyWriter.stmt(methodCall(builderTerm,\"append\",strLiteral(\", \")))).declPrimitiveStmt(keyType,keyTerm).declStmt(boolean.class,keyIsNullTerm,methodCall(keyArrayTerm,\"isNullAt\",indexTerm)).declPrimitiveStmt(valueType,valueTerm).declStmt(boolean.class,valueIsNullTerm,methodCall(valueArrayTerm,\"isNullAt\",indexTerm)).ifStmt(\"!\" + keyIsNullTerm,thenBodyWriter -> thenBodyWriter.assignStmt(keyTerm,rowFieldReadAccess(indexTerm,keyArrayTerm,keyType)).append(keyCast).stmt(methodCall(builderTerm,\"append\",keyCast.getReturnTerm())),elseBodyWriter -> elseBodyWriter.stmt(methodCall(builderTerm,\"append\",nullLiteral(context.legacyBehaviour())))).stmt(methodCall(builderTerm,\"append\",strLiteral(\"=\")));\n  if (inputLogicalType.is(LogicalTypeRoot.MULTISET)) {\n    appendNonNullValue.accept(loopBodyWriter);\n  }\n else {\n    loopBodyWriter.ifStmt(\"!\" + valueIsNullTerm,appendNonNullValue,elseBodyWriter -> elseBodyWriter.stmt(methodCall(builderTerm,\"append\",nullLiteral(context.legacyBehaviour()))));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 252,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 8801,
        "startLineNumber" : 172,
        "startColumnNumber" : 32,
        "endLineNumber" : 285,
        "endColumnNumber" : 33
      },
      "nodeContext" : "(indexTerm,loopBodyWriter) -> {\n  String keyTerm=newName(\"key\");\n  String keyIsNullTerm=newName(\"keyIsNull\");\n  String valueTerm=newName(\"value\");\n  String valueIsNullTerm=newName(\"valueIsNull\");\n  CastCodeBlock keyCast=CastRuleProvider.generateAlwaysNonNullCodeBlock(context,keyTerm,keyType,STRING_TYPE);\n  CastCodeBlock valueCast=CastRuleProvider.generateAlwaysNonNullCodeBlock(context,valueTerm,valueType,STRING_TYPE);\n  Consumer<CastRuleUtils.CodeWriter> appendNonNullValue=bodyWriter -> bodyWriter.assignStmt(valueTerm,rowFieldReadAccess(indexTerm,valueArrayTerm,valueType)).append(valueCast).stmt(methodCall(builderTerm,\"append\",valueCast.getReturnTerm()));\n  if (!context.legacyBehaviour() && couldTrim(length)) {\n    loopBodyWriter.ifStmt(stringExceedsLength(builderTerm,length),CastRuleUtils.CodeWriter::breakStmt);\n  }\n  loopBodyWriter.ifStmt(indexTerm + \" != 0\",thenBodyWriter -> thenBodyWriter.stmt(methodCall(builderTerm,\"append\",strLiteral(\", \")))).declPrimitiveStmt(keyType,keyTerm).declStmt(boolean.class,keyIsNullTerm,methodCall(keyArrayTerm,\"isNullAt\",indexTerm)).declPrimitiveStmt(valueType,valueTerm).declStmt(boolean.class,valueIsNullTerm,methodCall(valueArrayTerm,\"isNullAt\",indexTerm)).ifStmt(\"!\" + keyIsNullTerm,thenBodyWriter -> thenBodyWriter.assignStmt(keyTerm,rowFieldReadAccess(indexTerm,keyArrayTerm,keyType)).append(keyCast).stmt(methodCall(builderTerm,\"append\",keyCast.getReturnTerm())),elseBodyWriter -> elseBodyWriter.stmt(methodCall(builderTerm,\"append\",nullLiteral(context.legacyBehaviour())))).stmt(methodCall(builderTerm,\"append\",strLiteral(\"=\")));\n  if (inputLogicalType.is(LogicalTypeRoot.MULTISET)) {\n    appendNonNullValue.accept(loopBodyWriter);\n  }\n else {\n    loopBodyWriter.ifStmt(\"!\" + valueIsNullTerm,appendNonNullValue,elseBodyWriter -> elseBodyWriter.stmt(methodCall(builderTerm,\"append\",nullLiteral(context.legacyBehaviour()))));\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 257,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 206,
        "startColumnNumber" : 40,
        "endLineNumber" : 206,
        "endColumnNumber" : 87
      },
      "nodeContext" : "!context.legacyBehaviour() && couldTrim(length)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 25,
    "startLineNumber" : 206,
    "startColumnNumber" : 41,
    "endLineNumber" : 206,
    "endColumnNumber" : 66
  } ],
  "layoutRelationDataList" : [ ]
}