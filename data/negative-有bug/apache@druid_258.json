{
  "id" : 258,
  "expression" : "mayBeFinalResult",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/processing/src/main/java/org/apache/druid/segment/join/MapJoinableFactory.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "mayBeFinalResult",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 91,
      "startColumnNumber" : 35,
      "endLineNumber" : 91,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 91,
        "startColumnNumber" : 35,
        "endLineNumber" : 91,
        "endColumnNumber" : 63
      },
      "nodeContext" : "mayBeFinalResult.isPresent()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 91,
        "startColumnNumber" : 10,
        "endLineNumber" : 91,
        "endColumnNumber" : 63
      },
      "nodeContext" : "candidate.isPresent() && mayBeFinalResult.isPresent()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 158,
        "startLineNumber" : 91,
        "startColumnNumber" : 6,
        "endLineNumber" : 93,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (candidate.isPresent() && mayBeFinalResult.isPresent()) {\n  throw new ISE(\"Multiple joinable factories are valid for table[%s]\",dataSource);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 316,
        "startLineNumber" : 89,
        "startColumnNumber" : 54,
        "endLineNumber" : 97,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Optional<T> candidate=function.apply(joinableFactory);\n  if (candidate.isPresent() && mayBeFinalResult.isPresent()) {\n    throw new ISE(\"Multiple joinable factories are valid for table[%s]\",dataSource);\n  }\n  if (candidate.isPresent()) {\n    mayBeFinalResult=candidate;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 37,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 366,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 97,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (JoinableFactory joinableFactory : factories) {\n  Optional<T> candidate=function.apply(joinableFactory);\n  if (candidate.isPresent() && mayBeFinalResult.isPresent()) {\n    throw new ISE(\"Multiple joinable factories are valid for table[%s]\",dataSource);\n  }\n  if (candidate.isPresent()) {\n    mayBeFinalResult=candidate;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 43,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 541,
        "startLineNumber" : 86,
        "startColumnNumber" : 2,
        "endLineNumber" : 99,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Set<JoinableFactory> factories=joinableFactories.get(dataSource.getClass());\n  Optional<T> mayBeFinalResult=Optional.empty();\n  for (  JoinableFactory joinableFactory : factories) {\n    Optional<T> candidate=function.apply(joinableFactory);\n    if (candidate.isPresent() && mayBeFinalResult.isPresent()) {\n      throw new ISE(\"Multiple joinable factories are valid for table[%s]\",dataSource);\n    }\n    if (candidate.isPresent()) {\n      mayBeFinalResult=candidate;\n    }\n  }\n  return mayBeFinalResult;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 71,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 859,
        "startLineNumber" : 80,
        "startColumnNumber" : 2,
        "endLineNumber" : 99,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Computes the given function assuming that only one joinable factory will return a non-empty result. If we get results from two  {@link JoinableFactory}, then throw an exception.\n */\nprivate <T>Optional<T> getSingleResult(DataSource dataSource,Function<JoinableFactory,Optional<T>> function){\n  Set<JoinableFactory> factories=joinableFactories.get(dataSource.getClass());\n  Optional<T> mayBeFinalResult=Optional.empty();\n  for (  JoinableFactory joinableFactory : factories) {\n    Optional<T> candidate=function.apply(joinableFactory);\n    if (candidate.isPresent() && mayBeFinalResult.isPresent()) {\n      throw new ISE(\"Multiple joinable factories are valid for table[%s]\",dataSource);\n    }\n    if (candidate.isPresent()) {\n      mayBeFinalResult=candidate;\n    }\n  }\n  return mayBeFinalResult;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 98,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 91,
        "startColumnNumber" : 10,
        "endLineNumber" : 91,
        "endColumnNumber" : 63
      },
      "nodeContext" : "candidate.isPresent() && mayBeFinalResult.isPresent()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.Optional<T>"
  }, {
    "nodeContext" : "mayBeFinalResult",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 98,
      "startColumnNumber" : 11,
      "endLineNumber" : 98,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 98,
        "startColumnNumber" : 4,
        "endLineNumber" : 98,
        "endColumnNumber" : 28
      },
      "nodeContext" : "return mayBeFinalResult;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 541,
        "startLineNumber" : 86,
        "startColumnNumber" : 2,
        "endLineNumber" : 99,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Set<JoinableFactory> factories=joinableFactories.get(dataSource.getClass());\n  Optional<T> mayBeFinalResult=Optional.empty();\n  for (  JoinableFactory joinableFactory : factories) {\n    Optional<T> candidate=function.apply(joinableFactory);\n    if (candidate.isPresent() && mayBeFinalResult.isPresent()) {\n      throw new ISE(\"Multiple joinable factories are valid for table[%s]\",dataSource);\n    }\n    if (candidate.isPresent()) {\n      mayBeFinalResult=candidate;\n    }\n  }\n  return mayBeFinalResult;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 71,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 859,
        "startLineNumber" : 80,
        "startColumnNumber" : 2,
        "endLineNumber" : 99,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Computes the given function assuming that only one joinable factory will return a non-empty result. If we get results from two  {@link JoinableFactory}, then throw an exception.\n */\nprivate <T>Optional<T> getSingleResult(DataSource dataSource,Function<JoinableFactory,Optional<T>> function){\n  Set<JoinableFactory> factories=joinableFactories.get(dataSource.getClass());\n  Optional<T> mayBeFinalResult=Optional.empty();\n  for (  JoinableFactory joinableFactory : factories) {\n    Optional<T> candidate=function.apply(joinableFactory);\n    if (candidate.isPresent() && mayBeFinalResult.isPresent()) {\n      throw new ISE(\"Multiple joinable factories are valid for table[%s]\",dataSource);\n    }\n    if (candidate.isPresent()) {\n      mayBeFinalResult=candidate;\n    }\n  }\n  return mayBeFinalResult;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 98,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 98,
        "startColumnNumber" : 4,
        "endLineNumber" : 98,
        "endColumnNumber" : 28
      },
      "nodeContext" : "return mayBeFinalResult;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.util.Optional<T>"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 91,
    "startColumnNumber" : 35,
    "endLineNumber" : 91,
    "endColumnNumber" : 51
  }, {
    "charLength" : 16,
    "startLineNumber" : 98,
    "startColumnNumber" : 11,
    "endLineNumber" : 98,
    "endColumnNumber" : 27
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  } ]
}