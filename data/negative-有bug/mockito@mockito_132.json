{
  "id" : 132,
  "expression" : "\"Passed collection should notify() be null\"",
  "projectName" : "mockito@mockito",
  "commitID" : "7f036eb9ed79444adcec3a6c635870222b109e50",
  "filePath" : "/src/main/java/org/mockito/internal/util/collections/HashCodeAndEqualsSafeSet.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Passed collection should notify() be null\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 43,
      "startLineNumber" : 140,
      "startColumnNumber" : 35,
      "endLineNumber" : 140,
      "endColumnNumber" : 78
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 140,
        "startColumnNumber" : 8,
        "endLineNumber" : 140,
        "endColumnNumber" : 79
      },
      "nodeContext" : "Checks.checkNotNull(mocks,\"Passed collection should notify() be null\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 140,
        "startColumnNumber" : 8,
        "endLineNumber" : 140,
        "endColumnNumber" : 80
      },
      "nodeContext" : "Checks.checkNotNull(mocks,\"Passed collection should notify() be null\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 409,
        "startLineNumber" : 139,
        "startColumnNumber" : 86,
        "endLineNumber" : 147,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Checks.checkNotNull(mocks,\"Passed collection should notify() be null\");\n  HashSet<HashCodeAndEqualsMockWrapper> hashSet=new HashSet<HashCodeAndEqualsMockWrapper>();\n  for (  Object mock : mocks) {\n    assert !(mock instanceof HashCodeAndEqualsMockWrapper) : \"WRONG\";\n    hashSet.add(HashCodeAndEqualsMockWrapper.of(mock));\n  }\n  return hashSet;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 46,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 491,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 147,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private HashSet<HashCodeAndEqualsMockWrapper> asWrappedMocks(Collection<?> mocks){\n  Checks.checkNotNull(mocks,\"Passed collection should notify() be null\");\n  HashSet<HashCodeAndEqualsMockWrapper> hashSet=new HashSet<HashCodeAndEqualsMockWrapper>();\n  for (  Object mock : mocks) {\n    assert !(mock instanceof HashCodeAndEqualsMockWrapper) : \"WRONG\";\n    hashSet.add(HashCodeAndEqualsMockWrapper.of(mock));\n  }\n  return hashSet;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 60,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 140,
        "startColumnNumber" : 8,
        "endLineNumber" : 140,
        "endColumnNumber" : 80
      },
      "nodeContext" : "Checks.checkNotNull(mocks,\"Passed collection should notify() be null\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 6,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 43,
    "startLineNumber" : 140,
    "startColumnNumber" : 35,
    "endLineNumber" : 140,
    "endColumnNumber" : 78
  } ],
  "layoutRelationDataList" : [ ]
}