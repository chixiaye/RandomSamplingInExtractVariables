{
  "id" : 269,
  "expression" : "\"AUTHORS\"",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/core/lombok/core/runtimeDependencies/CreateLombokRuntimeApp.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"AUTHORS\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 164,
      "startColumnNumber" : 12,
      "endLineNumber" : 164,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 164,
        "startColumnNumber" : 3,
        "endLineNumber" : 164,
        "endColumnNumber" : 52
      },
      "nodeContext" : "deps.put(\"AUTHORS\",CreateLombokRuntimeApp.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 164,
        "startColumnNumber" : 3,
        "endLineNumber" : 164,
        "endColumnNumber" : 53
      },
      "nodeContext" : "deps.put(\"AUTHORS\",CreateLombokRuntimeApp.class);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 681,
        "startLineNumber" : 161,
        "startColumnNumber" : 6,
        "endLineNumber" : 182,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  JarOutputStream jar=new JarOutputStream(out);\n  deps.put(\"LICENSE\",CreateLombokRuntimeApp.class);\n  deps.put(\"AUTHORS\",CreateLombokRuntimeApp.class);\n  for (  Entry<String,Class<?>> dep : deps.entrySet()) {\n    InputStream in=dep.getValue().getResourceAsStream(\"/\" + dep.getKey());\n    try {\n      if (in == null) {\n        throw new Fail(String.format(\"Dependency %s contributed by %s cannot be found\",dep.getKey(),dep.getValue()));\n      }\n      writeIntoJar(jar,dep.getKey(),in);\n    }\n  finally {\n      if (in != null)       in.close();\n    }\n  }\n  jar.close();\n  out.close();\n  System.out.println(\"Successfully created: \" + canonical(outFile));\n  return 0;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 116,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1044,
        "startLineNumber" : 161,
        "startColumnNumber" : 2,
        "endLineNumber" : 195,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try {\n  JarOutputStream jar=new JarOutputStream(out);\n  deps.put(\"LICENSE\",CreateLombokRuntimeApp.class);\n  deps.put(\"AUTHORS\",CreateLombokRuntimeApp.class);\n  for (  Entry<String,Class<?>> dep : deps.entrySet()) {\n    InputStream in=dep.getValue().getResourceAsStream(\"/\" + dep.getKey());\n    try {\n      if (in == null) {\n        throw new Fail(String.format(\"Dependency %s contributed by %s cannot be found\",dep.getKey(),dep.getValue()));\n      }\n      writeIntoJar(jar,dep.getKey(),in);\n    }\n  finally {\n      if (in != null)       in.close();\n    }\n  }\n  jar.close();\n  out.close();\n  System.out.println(\"Successfully created: \" + canonical(outFile));\n  return 0;\n}\n catch (Throwable t) {\n  try {\n    out.close();\n  }\n catch (  Throwable ignore) {\n  }\n  if (!success)   outFile.delete();\n  if (t instanceof Fail) {\n    System.err.println(t.getMessage());\n    return 1;\n  }\n else   if (t instanceof Exception) {\n    throw (Exception)t;\n  }\n else   if (t instanceof Error) {\n    throw (Error)t;\n  }\n else {\n    throw new Exception(t);\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 187,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1624,
        "startLineNumber" : 145,
        "startColumnNumber" : 60,
        "endLineNumber" : 196,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Map<String,Class<?>> deps=new LinkedHashMap<String,Class<?>>();\n  for (  RuntimeDependencyInfo info : infoObjects) {\n    List<String> depNames=info.getRuntimeDependencies();\n    if (depNames != null)     for (    String depName : depNames) {\n      if (!deps.containsKey(depName))       deps.put(depName,info.getClass());\n    }\n  }\n  if (deps.isEmpty()) {\n    System.out.println(\"Not generating lombok-runtime.jar: No lombok transformations currently have any runtime dependencies!\");\n    return 1;\n  }\n  OutputStream out=new FileOutputStream(outFile);\n  boolean success=false;\n  try {\n    JarOutputStream jar=new JarOutputStream(out);\n    deps.put(\"LICENSE\",CreateLombokRuntimeApp.class);\n    deps.put(\"AUTHORS\",CreateLombokRuntimeApp.class);\n    for (    Entry<String,Class<?>> dep : deps.entrySet()) {\n      InputStream in=dep.getValue().getResourceAsStream(\"/\" + dep.getKey());\n      try {\n        if (in == null) {\n          throw new Fail(String.format(\"Dependency %s contributed by %s cannot be found\",dep.getKey(),dep.getValue()));\n        }\n        writeIntoJar(jar,dep.getKey(),in);\n      }\n  finally {\n        if (in != null)         in.close();\n      }\n    }\n    jar.close();\n    out.close();\n    System.out.println(\"Successfully created: \" + canonical(outFile));\n    return 0;\n  }\n catch (  Throwable t) {\n    try {\n      out.close();\n    }\n catch (    Throwable ignore) {\n    }\n    if (!success)     outFile.delete();\n    if (t instanceof Fail) {\n      System.err.println(t.getMessage());\n      return 1;\n    }\n else     if (t instanceof Exception) {\n      throw (Exception)t;\n    }\n else     if (t instanceof Error) {\n      throw (Error)t;\n    }\n else {\n      throw new Exception(t);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 281,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1683,
        "startLineNumber" : 145,
        "startColumnNumber" : 1,
        "endLineNumber" : 196,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private int writeRuntimeJar(File outFile) throws Exception {\n  Map<String,Class<?>> deps=new LinkedHashMap<String,Class<?>>();\n  for (  RuntimeDependencyInfo info : infoObjects) {\n    List<String> depNames=info.getRuntimeDependencies();\n    if (depNames != null)     for (    String depName : depNames) {\n      if (!deps.containsKey(depName))       deps.put(depName,info.getClass());\n    }\n  }\n  if (deps.isEmpty()) {\n    System.out.println(\"Not generating lombok-runtime.jar: No lombok transformations currently have any runtime dependencies!\");\n    return 1;\n  }\n  OutputStream out=new FileOutputStream(outFile);\n  boolean success=false;\n  try {\n    JarOutputStream jar=new JarOutputStream(out);\n    deps.put(\"LICENSE\",CreateLombokRuntimeApp.class);\n    deps.put(\"AUTHORS\",CreateLombokRuntimeApp.class);\n    for (    Entry<String,Class<?>> dep : deps.entrySet()) {\n      InputStream in=dep.getValue().getResourceAsStream(\"/\" + dep.getKey());\n      try {\n        if (in == null) {\n          throw new Fail(String.format(\"Dependency %s contributed by %s cannot be found\",dep.getKey(),dep.getValue()));\n        }\n        writeIntoJar(jar,dep.getKey(),in);\n      }\n  finally {\n        if (in != null)         in.close();\n      }\n    }\n    jar.close();\n    out.close();\n    System.out.println(\"Successfully created: \" + canonical(outFile));\n    return 0;\n  }\n catch (  Throwable t) {\n    try {\n      out.close();\n    }\n catch (    Throwable ignore) {\n    }\n    if (!success)     outFile.delete();\n    if (t instanceof Fail) {\n      System.err.println(t.getMessage());\n      return 1;\n    }\n else     if (t instanceof Exception) {\n      throw (Exception)t;\n    }\n else     if (t instanceof Error) {\n      throw (Error)t;\n    }\n else {\n      throw new Exception(t);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 291,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 164,
        "startColumnNumber" : 3,
        "endLineNumber" : 164,
        "endColumnNumber" : 53
      },
      "nodeContext" : "deps.put(\"AUTHORS\",CreateLombokRuntimeApp.class);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 164,
    "startColumnNumber" : 12,
    "endLineNumber" : 164,
    "endColumnNumber" : 21
  } ],
  "layoutRelationDataList" : [ ]
}