{
  "id" : 353,
  "expression" : "\"Editor font size: \"",
  "projectName" : "arduino@Arduino",
  "commitID" : "cf1879f948e0c1fa9ddd91f7348fbdd07fd870cb",
  "filePath" : "/app/src/processing/app/Preferences.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Editor font size: \"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 347,
      "startColumnNumber" : 25,
      "endLineNumber" : 347,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 347,
        "startColumnNumber" : 23,
        "endLineNumber" : 347,
        "endColumnNumber" : 46
      },
      "nodeContext" : "_(\"Editor font size: \")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 347,
        "startColumnNumber" : 12,
        "endLineNumber" : 347,
        "endColumnNumber" : 47
      },
      "nodeContext" : "new JLabel(_(\"Editor font size: \"))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 347,
        "startColumnNumber" : 4,
        "endLineNumber" : 347,
        "endColumnNumber" : 47
      },
      "nodeContext" : "label=new JLabel(_(\"Editor font size: \"))",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 347,
        "startColumnNumber" : 4,
        "endLineNumber" : 347,
        "endColumnNumber" : 48
      },
      "nodeContext" : "label=new JLabel(_(\"Editor font size: \"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11376,
        "startLineNumber" : 256,
        "startColumnNumber" : 23,
        "endLineNumber" : 588,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  dialog=new JFrame(_(\"Preferences\"));\n  dialog.setResizable(false);\n  Container pane=dialog.getContentPane();\n  pane.setLayout(null);\n  int top=GUI_BIG;\n  int left=GUI_BIG;\n  int right=0;\n  JLabel label;\n  JButton button;\n  Dimension d, d2;\n  int h, vmax;\n  label=new JLabel(_(\"Sketchbook location:\"));\n  pane.add(label);\n  d=label.getPreferredSize();\n  label.setBounds(left,top,d.width,d.height);\n  top+=d.height;\n  sketchbookLocationField=new JTextField(40);\n  pane.add(sketchbookLocationField);\n  d=sketchbookLocationField.getPreferredSize();\n  button=new JButton(I18n.PROMPT_BROWSE);\n  button.addActionListener(new ActionListener(){\n    public void actionPerformed(    ActionEvent e){\n      File dflt=new File(sketchbookLocationField.getText());\n      File file=Base.selectFolder(_(\"Select new sketchbook location\"),dflt,dialog);\n      if (file != null) {\n        String path=file.getAbsolutePath();\n        if (Base.getPortableFolder() != null) {\n          path=FileUtils.relativePath(Base.getPortableFolder().toString(),path);\n          if (path == null) {\n            path=Base.getPortableSketchbookFolder();\n          }\n        }\n        sketchbookLocationField.setText(path);\n      }\n    }\n  }\n);\n  pane.add(button);\n  d2=button.getPreferredSize();\n  vmax=Math.max(d.height,d2.height);\n  sketchbookLocationField.setBounds(left,top + (vmax - d.height) / 2,d.width,d.height);\n  h=left + d.width + GUI_SMALL;\n  button.setBounds(h,top + (vmax - d2.height) / 2,d2.width,d2.height);\n  right=Math.max(right,h + d2.width + GUI_BIG);\n  top+=vmax + GUI_BETWEEN;\n  Container box=Box.createHorizontalBox();\n  label=new JLabel(_(\"Editor language: \"));\n  box.add(label);\n  comboLanguage=new JComboBox(languages);\n  String currentLanguage=PreferencesData.get(\"editor.languages.current\");\n  for (  Language language : languages) {\n    if (language.isoCode.equals(currentLanguage))     comboLanguage.setSelectedItem(language);\n  }\n  box.add(comboLanguage);\n  label=new JLabel(_(\"  (requires restart of Arduino)\"));\n  box.add(label);\n  pane.add(box);\n  d=box.getPreferredSize();\n  box.setForeground(Color.gray);\n  box.setBounds(left,top,d.width,d.height);\n  right=Math.max(right,left + d.width);\n  top+=d.height + GUI_BETWEEN;\n  box=Box.createHorizontalBox();\n  label=new JLabel(_(\"Editor font size: \"));\n  box.add(label);\n  fontSizeField=new JTextField(4);\n  box.add(fontSizeField);\n  label=new JLabel(_(\"  (requires restart of Arduino)\"));\n  box.add(label);\n  pane.add(box);\n  d=box.getPreferredSize();\n  box.setBounds(left,top,d.width,d.height);\n  Font editorFont=Preferences.getFont(\"editor.font\");\n  fontSizeField.setText(String.valueOf(editorFont.getSize()));\n  top+=d.height + GUI_BETWEEN;\n  box=Box.createHorizontalBox();\n  label=new JLabel(_(\"Show verbose output during: \"));\n  box.add(label);\n  verboseCompilationBox=new JCheckBox(_(\"compilation \"));\n  box.add(verboseCompilationBox);\n  verboseUploadBox=new JCheckBox(_(\"upload\"));\n  box.add(verboseUploadBox);\n  pane.add(box);\n  d=box.getPreferredSize();\n  box.setBounds(left,top,d.width,d.height);\n  top+=d.height + GUI_BETWEEN;\n  box=Box.createHorizontalBox();\n  label=new JLabel(_(\"Compiler warnings: \"));\n  box.add(label);\n  WarningItem[] warningItems=new WarningItem[]{new WarningItem(\"none\",_(\"None\")),new WarningItem(\"default\",_(\"Default\")),new WarningItem(\"more\",_(\"More\")),new WarningItem(\"all\",_(\"All\"))};\n  comboWarnings=new JComboBox(warningItems);\n  String currentWarningLevel=PreferencesData.get(\"compiler.warning_level\",\"none\");\n  for (  WarningItem item : warningItems) {\n    if (currentWarningLevel.equals(item.getValue())) {\n      comboWarnings.setSelectedItem(item);\n    }\n  }\n  box.add(comboWarnings);\n  pane.add(box);\n  d=box.getPreferredSize();\n  box.setForeground(Color.gray);\n  box.setBounds(left,top,d.width,d.height);\n  right=Math.max(right,left + d.width);\n  top+=d.height + GUI_BETWEEN;\n  displayLineNumbersBox=new JCheckBox(_(\"Display line numbers\"));\n  pane.add(displayLineNumbersBox);\n  d=displayLineNumbersBox.getPreferredSize();\n  displayLineNumbersBox.setBounds(left,top,d.width + 10,d.height);\n  right=Math.max(right,left + d.width);\n  top+=d.height + GUI_BETWEEN;\n  verifyUploadBox=new JCheckBox(_(\"Verify code after upload\"));\n  pane.add(verifyUploadBox);\n  d=verifyUploadBox.getPreferredSize();\n  verifyUploadBox.setBounds(left,top,d.width + 10,d.height);\n  right=Math.max(right,left + d.width);\n  top+=d.height + GUI_BETWEEN;\n  externalEditorBox=new JCheckBox(_(\"Use external editor\"));\n  pane.add(externalEditorBox);\n  d=externalEditorBox.getPreferredSize();\n  externalEditorBox.setBounds(left,top,d.width + 10,d.height);\n  right=Math.max(right,left + d.width);\n  top+=d.height + GUI_BETWEEN;\n  checkUpdatesBox=new JCheckBox(_(\"Check for updates on startup\"));\n  pane.add(checkUpdatesBox);\n  d=checkUpdatesBox.getPreferredSize();\n  checkUpdatesBox.setBounds(left,top,d.width + 10,d.height);\n  right=Math.max(right,left + d.width);\n  top+=d.height + GUI_BETWEEN;\n  updateExtensionBox=new JCheckBox(_(\"Update sketch files to new extension on save (.pde -> .ino)\"));\n  pane.add(updateExtensionBox);\n  d=updateExtensionBox.getPreferredSize();\n  updateExtensionBox.setBounds(left,top,d.width + 10,d.height);\n  right=Math.max(right,left + d.width);\n  top+=d.height + GUI_BETWEEN;\n  if (OSUtils.isWindows()) {\n    autoAssociateBox=new JCheckBox(_(\"Automatically associate .ino files with Arduino\"));\n    pane.add(autoAssociateBox);\n    d=autoAssociateBox.getPreferredSize();\n    autoAssociateBox.setBounds(left,top,d.width + 10,d.height);\n    right=Math.max(right,left + d.width);\n    top+=d.height + GUI_BETWEEN;\n    if (Base.getPortableFolder() != null)     autoAssociateBox.setEnabled(false);\n  }\n  saveVerifyUploadBox=new JCheckBox(_(\"Save when verifying or uploading\"));\n  pane.add(saveVerifyUploadBox);\n  d=saveVerifyUploadBox.getPreferredSize();\n  saveVerifyUploadBox.setBounds(left,top,d.width + 10,d.height);\n  right=Math.max(right,left + d.width);\n  top+=d.height + GUI_BETWEEN;\n  JPanel proxySettingsContainer=new JPanel();\n  pane.add(proxySettingsContainer);\n  setupProxySettingsFieldSet(proxySettingsContainer);\n  d=proxySettingsContainer.getMinimumSize();\n  proxySettingsContainer.setBounds(left,top,d.width + 10,d.height);\n  right=Math.max(right,left + d.width);\n  top+=d.height + GUI_BETWEEN;\n  label=new JLabel(_(\"More preferences can be edited directly in the file\"));\n  pane.add(label);\n  d=label.getPreferredSize();\n  label.setForeground(Color.gray);\n  label.setBounds(left,top,d.width,d.height);\n  right=Math.max(right,left + d.width);\n  top+=d.height;\n  label=new JLabel(PreferencesData.preferencesFile.getAbsolutePath());\n  final JLabel clickable=label;\n  label.addMouseListener(new MouseAdapter(){\n    public void mousePressed(    MouseEvent e){\n      Base.openFolder(PreferencesData.preferencesFile.getParentFile());\n    }\n    public void mouseEntered(    MouseEvent e){\n      clickable.setForeground(new Color(0,0,140));\n    }\n    public void mouseExited(    MouseEvent e){\n      clickable.setForeground(Color.BLACK);\n    }\n  }\n);\n  pane.add(label);\n  d=label.getPreferredSize();\n  label.setBounds(left,top,d.width,d.height);\n  right=Math.max(right,left + d.width);\n  top+=d.height;\n  label=new JLabel(_(\"(edit only when Arduino is not running)\"));\n  pane.add(label);\n  d=label.getPreferredSize();\n  label.setForeground(Color.gray);\n  label.setBounds(left,top,d.width,d.height);\n  right=Math.max(right,left + d.width);\n  top+=d.height;\n  button=new JButton(I18n.PROMPT_OK);\n  button.addActionListener(new ActionListener(){\n    public void actionPerformed(    ActionEvent e){\n      applyFrame();\n      disposeFrame();\n    }\n  }\n);\n  pane.add(button);\n  d2=button.getPreferredSize();\n  BUTTON_HEIGHT=d2.height;\n  h=right - (BUTTON_WIDTH + GUI_SMALL + BUTTON_WIDTH);\n  button.setBounds(h,top,BUTTON_WIDTH,BUTTON_HEIGHT);\n  h+=BUTTON_WIDTH + GUI_SMALL;\n  button=new JButton(I18n.PROMPT_CANCEL);\n  button.addActionListener(new ActionListener(){\n    public void actionPerformed(    ActionEvent e){\n      disposeFrame();\n    }\n  }\n);\n  pane.add(button);\n  button.setBounds(h,top,BUTTON_WIDTH,BUTTON_HEIGHT);\n  top+=BUTTON_HEIGHT + GUI_BETWEEN;\n  wide=right + GUI_BIG;\n  high=top + GUI_SMALL;\n  dialog.addWindowListener(new WindowAdapter(){\n    public void windowClosing(    WindowEvent e){\n      disposeFrame();\n    }\n  }\n);\n  ActionListener disposer=new ActionListener(){\n    public void actionPerformed(    ActionEvent actionEvent){\n      disposeFrame();\n    }\n  }\n;\n  Base.registerWindowCloseKeys(dialog.getRootPane(),disposer);\n  Base.setIcon(dialog);\n  Dimension screen=Toolkit.getDefaultToolkit().getScreenSize();\n  dialog.setLocation((screen.width - wide) / 2,(screen.height - high) / 2);\n  dialog.pack();\n  Insets insets=dialog.getInsets();\n  dialog.setSize(wide + insets.left + insets.right,high + insets.top + insets.bottom);\n  pane.addKeyListener(new KeyAdapter(){\n    public void keyPressed(    KeyEvent e){\n      KeyStroke wc=Editor.WINDOW_CLOSE_KEYSTROKE;\n      if ((e.getKeyCode() == KeyEvent.VK_ESCAPE) || (KeyStroke.getKeyStrokeForEvent(e).equals(wc))) {\n        disposeFrame();\n      }\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1748,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11397,
        "startLineNumber" : 256,
        "startColumnNumber" : 2,
        "endLineNumber" : 588,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public Preferences(){\n  dialog=new JFrame(_(\"Preferences\"));\n  dialog.setResizable(false);\n  Container pane=dialog.getContentPane();\n  pane.setLayout(null);\n  int top=GUI_BIG;\n  int left=GUI_BIG;\n  int right=0;\n  JLabel label;\n  JButton button;\n  Dimension d, d2;\n  int h, vmax;\n  label=new JLabel(_(\"Sketchbook location:\"));\n  pane.add(label);\n  d=label.getPreferredSize();\n  label.setBounds(left,top,d.width,d.height);\n  top+=d.height;\n  sketchbookLocationField=new JTextField(40);\n  pane.add(sketchbookLocationField);\n  d=sketchbookLocationField.getPreferredSize();\n  button=new JButton(I18n.PROMPT_BROWSE);\n  button.addActionListener(new ActionListener(){\n    public void actionPerformed(    ActionEvent e){\n      File dflt=new File(sketchbookLocationField.getText());\n      File file=Base.selectFolder(_(\"Select new sketchbook location\"),dflt,dialog);\n      if (file != null) {\n        String path=file.getAbsolutePath();\n        if (Base.getPortableFolder() != null) {\n          path=FileUtils.relativePath(Base.getPortableFolder().toString(),path);\n          if (path == null) {\n            path=Base.getPortableSketchbookFolder();\n          }\n        }\n        sketchbookLocationField.setText(path);\n      }\n    }\n  }\n);\n  pane.add(button);\n  d2=button.getPreferredSize();\n  vmax=Math.max(d.height,d2.height);\n  sketchbookLocationField.setBounds(left,top + (vmax - d.height) / 2,d.width,d.height);\n  h=left + d.width + GUI_SMALL;\n  button.setBounds(h,top + (vmax - d2.height) / 2,d2.width,d2.height);\n  right=Math.max(right,h + d2.width + GUI_BIG);\n  top+=vmax + GUI_BETWEEN;\n  Container box=Box.createHorizontalBox();\n  label=new JLabel(_(\"Editor language: \"));\n  box.add(label);\n  comboLanguage=new JComboBox(languages);\n  String currentLanguage=PreferencesData.get(\"editor.languages.current\");\n  for (  Language language : languages) {\n    if (language.isoCode.equals(currentLanguage))     comboLanguage.setSelectedItem(language);\n  }\n  box.add(comboLanguage);\n  label=new JLabel(_(\"  (requires restart of Arduino)\"));\n  box.add(label);\n  pane.add(box);\n  d=box.getPreferredSize();\n  box.setForeground(Color.gray);\n  box.setBounds(left,top,d.width,d.height);\n  right=Math.max(right,left + d.width);\n  top+=d.height + GUI_BETWEEN;\n  box=Box.createHorizontalBox();\n  label=new JLabel(_(\"Editor font size: \"));\n  box.add(label);\n  fontSizeField=new JTextField(4);\n  box.add(fontSizeField);\n  label=new JLabel(_(\"  (requires restart of Arduino)\"));\n  box.add(label);\n  pane.add(box);\n  d=box.getPreferredSize();\n  box.setBounds(left,top,d.width,d.height);\n  Font editorFont=Preferences.getFont(\"editor.font\");\n  fontSizeField.setText(String.valueOf(editorFont.getSize()));\n  top+=d.height + GUI_BETWEEN;\n  box=Box.createHorizontalBox();\n  label=new JLabel(_(\"Show verbose output during: \"));\n  box.add(label);\n  verboseCompilationBox=new JCheckBox(_(\"compilation \"));\n  box.add(verboseCompilationBox);\n  verboseUploadBox=new JCheckBox(_(\"upload\"));\n  box.add(verboseUploadBox);\n  pane.add(box);\n  d=box.getPreferredSize();\n  box.setBounds(left,top,d.width,d.height);\n  top+=d.height + GUI_BETWEEN;\n  box=Box.createHorizontalBox();\n  label=new JLabel(_(\"Compiler warnings: \"));\n  box.add(label);\n  WarningItem[] warningItems=new WarningItem[]{new WarningItem(\"none\",_(\"None\")),new WarningItem(\"default\",_(\"Default\")),new WarningItem(\"more\",_(\"More\")),new WarningItem(\"all\",_(\"All\"))};\n  comboWarnings=new JComboBox(warningItems);\n  String currentWarningLevel=PreferencesData.get(\"compiler.warning_level\",\"none\");\n  for (  WarningItem item : warningItems) {\n    if (currentWarningLevel.equals(item.getValue())) {\n      comboWarnings.setSelectedItem(item);\n    }\n  }\n  box.add(comboWarnings);\n  pane.add(box);\n  d=box.getPreferredSize();\n  box.setForeground(Color.gray);\n  box.setBounds(left,top,d.width,d.height);\n  right=Math.max(right,left + d.width);\n  top+=d.height + GUI_BETWEEN;\n  displayLineNumbersBox=new JCheckBox(_(\"Display line numbers\"));\n  pane.add(displayLineNumbersBox);\n  d=displayLineNumbersBox.getPreferredSize();\n  displayLineNumbersBox.setBounds(left,top,d.width + 10,d.height);\n  right=Math.max(right,left + d.width);\n  top+=d.height + GUI_BETWEEN;\n  verifyUploadBox=new JCheckBox(_(\"Verify code after upload\"));\n  pane.add(verifyUploadBox);\n  d=verifyUploadBox.getPreferredSize();\n  verifyUploadBox.setBounds(left,top,d.width + 10,d.height);\n  right=Math.max(right,left + d.width);\n  top+=d.height + GUI_BETWEEN;\n  externalEditorBox=new JCheckBox(_(\"Use external editor\"));\n  pane.add(externalEditorBox);\n  d=externalEditorBox.getPreferredSize();\n  externalEditorBox.setBounds(left,top,d.width + 10,d.height);\n  right=Math.max(right,left + d.width);\n  top+=d.height + GUI_BETWEEN;\n  checkUpdatesBox=new JCheckBox(_(\"Check for updates on startup\"));\n  pane.add(checkUpdatesBox);\n  d=checkUpdatesBox.getPreferredSize();\n  checkUpdatesBox.setBounds(left,top,d.width + 10,d.height);\n  right=Math.max(right,left + d.width);\n  top+=d.height + GUI_BETWEEN;\n  updateExtensionBox=new JCheckBox(_(\"Update sketch files to new extension on save (.pde -> .ino)\"));\n  pane.add(updateExtensionBox);\n  d=updateExtensionBox.getPreferredSize();\n  updateExtensionBox.setBounds(left,top,d.width + 10,d.height);\n  right=Math.max(right,left + d.width);\n  top+=d.height + GUI_BETWEEN;\n  if (OSUtils.isWindows()) {\n    autoAssociateBox=new JCheckBox(_(\"Automatically associate .ino files with Arduino\"));\n    pane.add(autoAssociateBox);\n    d=autoAssociateBox.getPreferredSize();\n    autoAssociateBox.setBounds(left,top,d.width + 10,d.height);\n    right=Math.max(right,left + d.width);\n    top+=d.height + GUI_BETWEEN;\n    if (Base.getPortableFolder() != null)     autoAssociateBox.setEnabled(false);\n  }\n  saveVerifyUploadBox=new JCheckBox(_(\"Save when verifying or uploading\"));\n  pane.add(saveVerifyUploadBox);\n  d=saveVerifyUploadBox.getPreferredSize();\n  saveVerifyUploadBox.setBounds(left,top,d.width + 10,d.height);\n  right=Math.max(right,left + d.width);\n  top+=d.height + GUI_BETWEEN;\n  JPanel proxySettingsContainer=new JPanel();\n  pane.add(proxySettingsContainer);\n  setupProxySettingsFieldSet(proxySettingsContainer);\n  d=proxySettingsContainer.getMinimumSize();\n  proxySettingsContainer.setBounds(left,top,d.width + 10,d.height);\n  right=Math.max(right,left + d.width);\n  top+=d.height + GUI_BETWEEN;\n  label=new JLabel(_(\"More preferences can be edited directly in the file\"));\n  pane.add(label);\n  d=label.getPreferredSize();\n  label.setForeground(Color.gray);\n  label.setBounds(left,top,d.width,d.height);\n  right=Math.max(right,left + d.width);\n  top+=d.height;\n  label=new JLabel(PreferencesData.preferencesFile.getAbsolutePath());\n  final JLabel clickable=label;\n  label.addMouseListener(new MouseAdapter(){\n    public void mousePressed(    MouseEvent e){\n      Base.openFolder(PreferencesData.preferencesFile.getParentFile());\n    }\n    public void mouseEntered(    MouseEvent e){\n      clickable.setForeground(new Color(0,0,140));\n    }\n    public void mouseExited(    MouseEvent e){\n      clickable.setForeground(Color.BLACK);\n    }\n  }\n);\n  pane.add(label);\n  d=label.getPreferredSize();\n  label.setBounds(left,top,d.width,d.height);\n  right=Math.max(right,left + d.width);\n  top+=d.height;\n  label=new JLabel(_(\"(edit only when Arduino is not running)\"));\n  pane.add(label);\n  d=label.getPreferredSize();\n  label.setForeground(Color.gray);\n  label.setBounds(left,top,d.width,d.height);\n  right=Math.max(right,left + d.width);\n  top+=d.height;\n  button=new JButton(I18n.PROMPT_OK);\n  button.addActionListener(new ActionListener(){\n    public void actionPerformed(    ActionEvent e){\n      applyFrame();\n      disposeFrame();\n    }\n  }\n);\n  pane.add(button);\n  d2=button.getPreferredSize();\n  BUTTON_HEIGHT=d2.height;\n  h=right - (BUTTON_WIDTH + GUI_SMALL + BUTTON_WIDTH);\n  button.setBounds(h,top,BUTTON_WIDTH,BUTTON_HEIGHT);\n  h+=BUTTON_WIDTH + GUI_SMALL;\n  button=new JButton(I18n.PROMPT_CANCEL);\n  button.addActionListener(new ActionListener(){\n    public void actionPerformed(    ActionEvent e){\n      disposeFrame();\n    }\n  }\n);\n  pane.add(button);\n  button.setBounds(h,top,BUTTON_WIDTH,BUTTON_HEIGHT);\n  top+=BUTTON_HEIGHT + GUI_BETWEEN;\n  wide=right + GUI_BIG;\n  high=top + GUI_SMALL;\n  dialog.addWindowListener(new WindowAdapter(){\n    public void windowClosing(    WindowEvent e){\n      disposeFrame();\n    }\n  }\n);\n  ActionListener disposer=new ActionListener(){\n    public void actionPerformed(    ActionEvent actionEvent){\n      disposeFrame();\n    }\n  }\n;\n  Base.registerWindowCloseKeys(dialog.getRootPane(),disposer);\n  Base.setIcon(dialog);\n  Dimension screen=Toolkit.getDefaultToolkit().getScreenSize();\n  dialog.setLocation((screen.width - wide) / 2,(screen.height - high) / 2);\n  dialog.pack();\n  Insets insets=dialog.getInsets();\n  dialog.setSize(wide + insets.left + insets.right,high + insets.top + insets.bottom);\n  pane.addKeyListener(new KeyAdapter(){\n    public void keyPressed(    KeyEvent e){\n      KeyStroke wc=Editor.WINDOW_CLOSE_KEYSTROKE;\n      if ((e.getKeyCode() == KeyEvent.VK_ESCAPE) || (KeyStroke.getKeyStrokeForEvent(e).equals(wc))) {\n        disposeFrame();\n      }\n    }\n  }\n);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1751,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 347,
        "startColumnNumber" : 4,
        "endLineNumber" : 347,
        "endColumnNumber" : 48
      },
      "nodeContext" : "label=new JLabel(_(\"Editor font size: \"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 20,
    "startLineNumber" : 347,
    "startColumnNumber" : 25,
    "endLineNumber" : 347,
    "endColumnNumber" : 45
  } ],
  "layoutRelationDataList" : [ ]
}