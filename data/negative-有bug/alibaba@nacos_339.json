{
  "id" : 339,
  "expression" : "null",
  "projectName" : "alibaba@nacos",
  "commitID" : "4e7346db1d6657ffe07c96bebd2d348229c2812f",
  "filePath" : "/naming/src/main/java/com/alibaba/nacos/naming/web/DistroFilter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 91,
      "startColumnNumber" : 26,
      "endLineNumber" : 91,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 91,
        "startColumnNumber" : 16,
        "endLineNumber" : 91,
        "endColumnNumber" : 30
      },
      "nodeContext" : "method == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 91,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (method == null) {\n  throw new NoSuchMethodException(req.getMethod() + \" \" + path);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2692,
        "startLineNumber" : 87,
        "startColumnNumber" : 12,
        "endLineNumber" : 136,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Method method=controllerMethodsCache.getMethod(req);\n  String path=new URI(req.getRequestURI()).getPath();\n  if (method == null) {\n    throw new NoSuchMethodException(req.getMethod() + \" \" + path);\n  }\n  String distroTag=distroTagGenerator.getResponsibleTag(req);\n  if (method.isAnnotationPresent(CanDistro.class) && !distroMapper.responsible(distroTag)) {\n    String userAgent=req.getHeader(HttpHeaderConsts.USER_AGENT_HEADER);\n    if (StringUtils.isNotBlank(userAgent) && userAgent.contains(UtilsAndCommons.NACOS_SERVER_HEADER)) {\n      Loggers.SRV_LOG.error(\"receive invalid redirect request from peer {}\",req.getRemoteAddr());\n      resp.sendError(HttpServletResponse.SC_BAD_REQUEST,\"receive invalid redirect request from peer \" + req.getRemoteAddr());\n      return;\n    }\n    final String targetServer=distroMapper.mapSrv(distroTag);\n    List<String> headerList=new ArrayList<>(16);\n    Enumeration<String> headers=req.getHeaderNames();\n    while (headers.hasMoreElements()) {\n      String headerName=headers.nextElement();\n      headerList.add(headerName);\n      headerList.add(req.getHeader(headerName));\n    }\n    final String body=IoUtils.toString(req.getInputStream(),Charsets.UTF_8.name());\n    final Map<String,String> paramsValue=HttpClient.translateParameterMap(req.getParameterMap());\n    RestResult<String> result=HttpClient.request(\"http://\" + targetServer + req.getRequestURI(),headerList,paramsValue,body,PROXY_CONNECT_TIMEOUT,PROXY_READ_TIMEOUT,Charsets.UTF_8.name(),req.getMethod());\n    String data=result.ok() ? result.getData() : result.getMessage();\n    try {\n      WebUtils.response(resp,data,result.getCode());\n    }\n catch (    Exception ignore) {\n      Loggers.SRV_LOG.warn(\"[DISTRO-FILTER] request failed: \" + distroMapper.mapSrv(distroTag) + urlString);\n    }\n  }\n else {\n    filterChain.doFilter(req,resp);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 284,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3236,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 144,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  Method method=controllerMethodsCache.getMethod(req);\n  String path=new URI(req.getRequestURI()).getPath();\n  if (method == null) {\n    throw new NoSuchMethodException(req.getMethod() + \" \" + path);\n  }\n  String distroTag=distroTagGenerator.getResponsibleTag(req);\n  if (method.isAnnotationPresent(CanDistro.class) && !distroMapper.responsible(distroTag)) {\n    String userAgent=req.getHeader(HttpHeaderConsts.USER_AGENT_HEADER);\n    if (StringUtils.isNotBlank(userAgent) && userAgent.contains(UtilsAndCommons.NACOS_SERVER_HEADER)) {\n      Loggers.SRV_LOG.error(\"receive invalid redirect request from peer {}\",req.getRemoteAddr());\n      resp.sendError(HttpServletResponse.SC_BAD_REQUEST,\"receive invalid redirect request from peer \" + req.getRemoteAddr());\n      return;\n    }\n    final String targetServer=distroMapper.mapSrv(distroTag);\n    List<String> headerList=new ArrayList<>(16);\n    Enumeration<String> headers=req.getHeaderNames();\n    while (headers.hasMoreElements()) {\n      String headerName=headers.nextElement();\n      headerList.add(headerName);\n      headerList.add(req.getHeader(headerName));\n    }\n    final String body=IoUtils.toString(req.getInputStream(),Charsets.UTF_8.name());\n    final Map<String,String> paramsValue=HttpClient.translateParameterMap(req.getParameterMap());\n    RestResult<String> result=HttpClient.request(\"http://\" + targetServer + req.getRequestURI(),headerList,paramsValue,body,PROXY_CONNECT_TIMEOUT,PROXY_READ_TIMEOUT,Charsets.UTF_8.name(),req.getMethod());\n    String data=result.ok() ? result.getData() : result.getMessage();\n    try {\n      WebUtils.response(resp,data,result.getCode());\n    }\n catch (    Exception ignore) {\n      Loggers.SRV_LOG.warn(\"[DISTRO-FILTER] request failed: \" + distroMapper.mapSrv(distroTag) + urlString);\n    }\n  }\n else {\n    filterChain.doFilter(req,resp);\n  }\n}\n catch (AccessControlException e) {\n  resp.sendError(HttpServletResponse.SC_FORBIDDEN,\"access denied: \" + ExceptionUtil.getAllExceptionMsg(e));\n}\ncatch (NoSuchMethodException e) {\n  resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED,\"no such api:\" + req.getMethod() + \":\"+ req.getRequestURI());\n}\ncatch (Exception e) {\n  resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,\"Server failed,\" + ExceptionUtil.getAllExceptionMsg(e));\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 345,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3637,
        "startLineNumber" : 77,
        "startColumnNumber" : 49,
        "endLineNumber" : 146,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ReuseHttpServletRequest req=new ReuseHttpServletRequest((HttpServletRequest)servletRequest);\n  HttpServletResponse resp=(HttpServletResponse)servletResponse;\n  String urlString=req.getRequestURI();\n  if (StringUtils.isNotBlank(req.getQueryString())) {\n    urlString+=\"?\" + req.getQueryString();\n  }\n  try {\n    Method method=controllerMethodsCache.getMethod(req);\n    String path=new URI(req.getRequestURI()).getPath();\n    if (method == null) {\n      throw new NoSuchMethodException(req.getMethod() + \" \" + path);\n    }\n    String distroTag=distroTagGenerator.getResponsibleTag(req);\n    if (method.isAnnotationPresent(CanDistro.class) && !distroMapper.responsible(distroTag)) {\n      String userAgent=req.getHeader(HttpHeaderConsts.USER_AGENT_HEADER);\n      if (StringUtils.isNotBlank(userAgent) && userAgent.contains(UtilsAndCommons.NACOS_SERVER_HEADER)) {\n        Loggers.SRV_LOG.error(\"receive invalid redirect request from peer {}\",req.getRemoteAddr());\n        resp.sendError(HttpServletResponse.SC_BAD_REQUEST,\"receive invalid redirect request from peer \" + req.getRemoteAddr());\n        return;\n      }\n      final String targetServer=distroMapper.mapSrv(distroTag);\n      List<String> headerList=new ArrayList<>(16);\n      Enumeration<String> headers=req.getHeaderNames();\n      while (headers.hasMoreElements()) {\n        String headerName=headers.nextElement();\n        headerList.add(headerName);\n        headerList.add(req.getHeader(headerName));\n      }\n      final String body=IoUtils.toString(req.getInputStream(),Charsets.UTF_8.name());\n      final Map<String,String> paramsValue=HttpClient.translateParameterMap(req.getParameterMap());\n      RestResult<String> result=HttpClient.request(\"http://\" + targetServer + req.getRequestURI(),headerList,paramsValue,body,PROXY_CONNECT_TIMEOUT,PROXY_READ_TIMEOUT,Charsets.UTF_8.name(),req.getMethod());\n      String data=result.ok() ? result.getData() : result.getMessage();\n      try {\n        WebUtils.response(resp,data,result.getCode());\n      }\n catch (      Exception ignore) {\n        Loggers.SRV_LOG.warn(\"[DISTRO-FILTER] request failed: \" + distroMapper.mapSrv(distroTag) + urlString);\n      }\n    }\n else {\n      filterChain.doFilter(req,resp);\n    }\n  }\n catch (  AccessControlException e) {\n    resp.sendError(HttpServletResponse.SC_FORBIDDEN,\"access denied: \" + ExceptionUtil.getAllExceptionMsg(e));\n  }\ncatch (  NoSuchMethodException e) {\n    resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED,\"no such api:\" + req.getMethod() + \":\"+ req.getRequestURI());\n  }\ncatch (  Exception e) {\n    resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,\"Server failed,\" + ExceptionUtil.getAllExceptionMsg(e));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 391,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3810,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 146,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void doFilter(ServletRequest servletRequest,ServletResponse servletResponse,FilterChain filterChain) throws IOException, ServletException {\n  ReuseHttpServletRequest req=new ReuseHttpServletRequest((HttpServletRequest)servletRequest);\n  HttpServletResponse resp=(HttpServletResponse)servletResponse;\n  String urlString=req.getRequestURI();\n  if (StringUtils.isNotBlank(req.getQueryString())) {\n    urlString+=\"?\" + req.getQueryString();\n  }\n  try {\n    Method method=controllerMethodsCache.getMethod(req);\n    String path=new URI(req.getRequestURI()).getPath();\n    if (method == null) {\n      throw new NoSuchMethodException(req.getMethod() + \" \" + path);\n    }\n    String distroTag=distroTagGenerator.getResponsibleTag(req);\n    if (method.isAnnotationPresent(CanDistro.class) && !distroMapper.responsible(distroTag)) {\n      String userAgent=req.getHeader(HttpHeaderConsts.USER_AGENT_HEADER);\n      if (StringUtils.isNotBlank(userAgent) && userAgent.contains(UtilsAndCommons.NACOS_SERVER_HEADER)) {\n        Loggers.SRV_LOG.error(\"receive invalid redirect request from peer {}\",req.getRemoteAddr());\n        resp.sendError(HttpServletResponse.SC_BAD_REQUEST,\"receive invalid redirect request from peer \" + req.getRemoteAddr());\n        return;\n      }\n      final String targetServer=distroMapper.mapSrv(distroTag);\n      List<String> headerList=new ArrayList<>(16);\n      Enumeration<String> headers=req.getHeaderNames();\n      while (headers.hasMoreElements()) {\n        String headerName=headers.nextElement();\n        headerList.add(headerName);\n        headerList.add(req.getHeader(headerName));\n      }\n      final String body=IoUtils.toString(req.getInputStream(),Charsets.UTF_8.name());\n      final Map<String,String> paramsValue=HttpClient.translateParameterMap(req.getParameterMap());\n      RestResult<String> result=HttpClient.request(\"http://\" + targetServer + req.getRequestURI(),headerList,paramsValue,body,PROXY_CONNECT_TIMEOUT,PROXY_READ_TIMEOUT,Charsets.UTF_8.name(),req.getMethod());\n      String data=result.ok() ? result.getData() : result.getMessage();\n      try {\n        WebUtils.response(resp,data,result.getCode());\n      }\n catch (      Exception ignore) {\n        Loggers.SRV_LOG.warn(\"[DISTRO-FILTER] request failed: \" + distroMapper.mapSrv(distroTag) + urlString);\n      }\n    }\n else {\n      filterChain.doFilter(req,resp);\n    }\n  }\n catch (  AccessControlException e) {\n    resp.sendError(HttpServletResponse.SC_FORBIDDEN,\"access denied: \" + ExceptionUtil.getAllExceptionMsg(e));\n  }\ncatch (  NoSuchMethodException e) {\n    resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED,\"no such api:\" + req.getMethod() + \":\"+ req.getRequestURI());\n  }\ncatch (  Exception e) {\n    resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,\"Server failed,\" + ExceptionUtil.getAllExceptionMsg(e));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 413,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 91,
        "startColumnNumber" : 16,
        "endLineNumber" : 91,
        "endColumnNumber" : 30
      },
      "nodeContext" : "method == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 91,
    "startColumnNumber" : 26,
    "endLineNumber" : 91,
    "endColumnNumber" : 30
  } ],
  "layoutRelationDataList" : [ ]
}