{
  "id" : 56,
  "expression" : "3",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/testsuite/src/main/java/io/netty/testsuite/transport/socket/SocketShutdownOutputBySelfTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "3",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 159,
      "startColumnNumber" : 43,
      "endLineNumber" : 159,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 159,
        "startColumnNumber" : 35,
        "endLineNumber" : 159,
        "endColumnNumber" : 55
      },
      "nodeContext" : "{1,2,3,4,5,6}",
      "nodeType" : "ArrayInitializer",
      "astNodeNumber" : 7,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 159,
        "startColumnNumber" : 19,
        "endLineNumber" : 159,
        "endColumnNumber" : 55
      },
      "nodeContext" : "expectedBytes={1,2,3,4,5,6}",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 159,
        "startColumnNumber" : 12,
        "endLineNumber" : 159,
        "endColumnNumber" : 56
      },
      "nodeContext" : "byte[] expectedBytes={1,2,3,4,5,6};\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1709,
        "startLineNumber" : 150,
        "startColumnNumber" : 12,
        "endLineNumber" : 191,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ss.bind(newSocketAddress());\n  cb.option(ChannelOption.WRITE_BUFFER_WATER_MARK,new WriteBufferWaterMark(2,4));\n  ch=(SocketChannel)cb.handler(h).connect(ss.getLocalSocketAddress()).get();\n  assertTrue(ch.isActive());\n  assertFalse(ch.isOutputShutdown());\n  s=ss.accept();\n  byte[] expectedBytes={1,2,3,4,5,6};\n  Future<Void> writeFuture=ch.write(Unpooled.wrappedBuffer(expectedBytes));\n  h.assertWritability(false);\n  ch.flush();\n  writeFuture.sync();\n  h.assertWritability(true);\n  for (  byte expectedByte : expectedBytes) {\n    assertEquals(expectedByte,s.getInputStream().read());\n  }\n  assertTrue(h.ch.isOpen());\n  assertTrue(h.ch.isActive());\n  assertFalse(h.ch.isInputShutdown());\n  assertFalse(h.ch.isOutputShutdown());\n  ch.shutdownOutput().sync();\n  assertEquals(-1,s.getInputStream().read());\n  assertTrue(h.ch.isOpen());\n  assertTrue(h.ch.isActive());\n  assertFalse(h.ch.isInputShutdown());\n  assertTrue(h.ch.isOutputShutdown());\n  try {\n    ch.writeAndFlush(Unpooled.wrappedBuffer(new byte[]{2})).sync();\n    fail();\n  }\n catch (  Throwable cause) {\n    checkThrowable(cause.getCause());\n  }\n  assertNull(h.writabilityQueue.poll());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 235,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1907,
        "startLineNumber" : 150,
        "startColumnNumber" : 8,
        "endLineNumber" : 199,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  ss.bind(newSocketAddress());\n  cb.option(ChannelOption.WRITE_BUFFER_WATER_MARK,new WriteBufferWaterMark(2,4));\n  ch=(SocketChannel)cb.handler(h).connect(ss.getLocalSocketAddress()).get();\n  assertTrue(ch.isActive());\n  assertFalse(ch.isOutputShutdown());\n  s=ss.accept();\n  byte[] expectedBytes={1,2,3,4,5,6};\n  Future<Void> writeFuture=ch.write(Unpooled.wrappedBuffer(expectedBytes));\n  h.assertWritability(false);\n  ch.flush();\n  writeFuture.sync();\n  h.assertWritability(true);\n  for (  byte expectedByte : expectedBytes) {\n    assertEquals(expectedByte,s.getInputStream().read());\n  }\n  assertTrue(h.ch.isOpen());\n  assertTrue(h.ch.isActive());\n  assertFalse(h.ch.isInputShutdown());\n  assertFalse(h.ch.isOutputShutdown());\n  ch.shutdownOutput().sync();\n  assertEquals(-1,s.getInputStream().read());\n  assertTrue(h.ch.isOpen());\n  assertTrue(h.ch.isActive());\n  assertFalse(h.ch.isInputShutdown());\n  assertTrue(h.ch.isOutputShutdown());\n  try {\n    ch.writeAndFlush(Unpooled.wrappedBuffer(new byte[]{2})).sync();\n    fail();\n  }\n catch (  Throwable cause) {\n    checkThrowable(cause.getCause());\n  }\n  assertNull(h.writabilityQueue.poll());\n}\n  finally {\n  if (s != null) {\n    s.close();\n  }\n  if (ch != null) {\n    ch.close();\n  }\n  ss.close();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 259,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2082,
        "startLineNumber" : 145,
        "startColumnNumber" : 95,
        "endLineNumber" : 200,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final TestHandler h=new TestHandler();\n  ServerSocket ss=new ServerSocket();\n  Socket s=null;\n  SocketChannel ch=null;\n  try {\n    ss.bind(newSocketAddress());\n    cb.option(ChannelOption.WRITE_BUFFER_WATER_MARK,new WriteBufferWaterMark(2,4));\n    ch=(SocketChannel)cb.handler(h).connect(ss.getLocalSocketAddress()).get();\n    assertTrue(ch.isActive());\n    assertFalse(ch.isOutputShutdown());\n    s=ss.accept();\n    byte[] expectedBytes={1,2,3,4,5,6};\n    Future<Void> writeFuture=ch.write(Unpooled.wrappedBuffer(expectedBytes));\n    h.assertWritability(false);\n    ch.flush();\n    writeFuture.sync();\n    h.assertWritability(true);\n    for (    byte expectedByte : expectedBytes) {\n      assertEquals(expectedByte,s.getInputStream().read());\n    }\n    assertTrue(h.ch.isOpen());\n    assertTrue(h.ch.isActive());\n    assertFalse(h.ch.isInputShutdown());\n    assertFalse(h.ch.isOutputShutdown());\n    ch.shutdownOutput().sync();\n    assertEquals(-1,s.getInputStream().read());\n    assertTrue(h.ch.isOpen());\n    assertTrue(h.ch.isActive());\n    assertFalse(h.ch.isInputShutdown());\n    assertTrue(h.ch.isOutputShutdown());\n    try {\n      ch.writeAndFlush(Unpooled.wrappedBuffer(new byte[]{2})).sync();\n      fail();\n    }\n catch (    Throwable cause) {\n      checkThrowable(cause.getCause());\n    }\n    assertNull(h.writabilityQueue.poll());\n  }\n  finally {\n    if (s != null) {\n      s.close();\n    }\n    if (ch != null) {\n      ch.close();\n    }\n    ss.close();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 289,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2173,
        "startLineNumber" : 145,
        "startColumnNumber" : 4,
        "endLineNumber" : 200,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void testWriteAfterShutdownOutputNoWritabilityChange(Bootstrap cb) throws Throwable {\n  final TestHandler h=new TestHandler();\n  ServerSocket ss=new ServerSocket();\n  Socket s=null;\n  SocketChannel ch=null;\n  try {\n    ss.bind(newSocketAddress());\n    cb.option(ChannelOption.WRITE_BUFFER_WATER_MARK,new WriteBufferWaterMark(2,4));\n    ch=(SocketChannel)cb.handler(h).connect(ss.getLocalSocketAddress()).get();\n    assertTrue(ch.isActive());\n    assertFalse(ch.isOutputShutdown());\n    s=ss.accept();\n    byte[] expectedBytes={1,2,3,4,5,6};\n    Future<Void> writeFuture=ch.write(Unpooled.wrappedBuffer(expectedBytes));\n    h.assertWritability(false);\n    ch.flush();\n    writeFuture.sync();\n    h.assertWritability(true);\n    for (    byte expectedByte : expectedBytes) {\n      assertEquals(expectedByte,s.getInputStream().read());\n    }\n    assertTrue(h.ch.isOpen());\n    assertTrue(h.ch.isActive());\n    assertFalse(h.ch.isInputShutdown());\n    assertFalse(h.ch.isOutputShutdown());\n    ch.shutdownOutput().sync();\n    assertEquals(-1,s.getInputStream().read());\n    assertTrue(h.ch.isOpen());\n    assertTrue(h.ch.isActive());\n    assertFalse(h.ch.isInputShutdown());\n    assertTrue(h.ch.isOutputShutdown());\n    try {\n      ch.writeAndFlush(Unpooled.wrappedBuffer(new byte[]{2})).sync();\n      fail();\n    }\n catch (    Throwable cause) {\n      checkThrowable(cause.getCause());\n    }\n    assertNull(h.writabilityQueue.poll());\n  }\n  finally {\n    if (s != null) {\n      s.close();\n    }\n    if (ch != null) {\n      ch.close();\n    }\n    ss.close();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 299,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 159,
        "startColumnNumber" : 12,
        "endLineNumber" : 159,
        "endColumnNumber" : 56
      },
      "nodeContext" : "byte[] expectedBytes={1,2,3,4,5,6};\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 159,
    "startColumnNumber" : 43,
    "endLineNumber" : 159,
    "endColumnNumber" : 44
  } ],
  "layoutRelationDataList" : [ ]
}