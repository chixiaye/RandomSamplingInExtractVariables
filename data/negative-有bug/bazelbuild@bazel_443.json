{
  "id" : 443,
  "expression" : "scanLabel(expression,offset)",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/main/java/com/google/devtools/build/lib/analysis/LabelExpander.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "scanLabel(expression,offset)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 29,
      "startLineNumber" : 99,
      "startColumnNumber" : 25,
      "endLineNumber" : 99,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 99,
        "startColumnNumber" : 13,
        "endLineNumber" : 99,
        "endColumnNumber" : 54
      },
      "nodeContext" : "labelText=scanLabel(expression,offset)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 99,
        "startColumnNumber" : 6,
        "endLineNumber" : 99,
        "endColumnNumber" : 55
      },
      "nodeContext" : "String labelText=scanLabel(expression,offset);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 319,
        "startLineNumber" : 98,
        "startColumnNumber" : 41,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String labelText=scanLabel(expression,offset);\n  if (labelText != null) {\n    offset+=labelText.length();\n    result.append(tryResolvingLabelTextToArtifactPath(labelText,labelMap,labelResolver));\n  }\n else {\n    result.append(expression.charAt(offset));\n    offset++;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 42,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 356,
        "startLineNumber" : 98,
        "startColumnNumber" : 4,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (offset < expression.length()) {\n  String labelText=scanLabel(expression,offset);\n  if (labelText != null) {\n    offset+=labelText.length();\n    result.append(tryResolvingLabelTextToArtifactPath(labelText,labelMap,labelResolver));\n  }\n else {\n    result.append(expression.charAt(offset));\n    offset++;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 48,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 622,
        "startLineNumber" : 89,
        "startColumnNumber" : 86,
        "endLineNumber" : 109,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (Strings.isNullOrEmpty(expression)) {\n    return \"\";\n  }\n  Preconditions.checkNotNull(labelMap);\n  Preconditions.checkNotNull(labelResolver);\n  int offset=0;\n  StringBuilder result=new StringBuilder();\n  while (offset < expression.length()) {\n    String labelText=scanLabel(expression,offset);\n    if (labelText != null) {\n      offset+=labelText.length();\n      result.append(tryResolvingLabelTextToArtifactPath(labelText,labelMap,labelResolver));\n    }\n else {\n      result.append(expression.charAt(offset));\n      offset++;\n    }\n  }\n  return result.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 84,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1840,
        "startLineNumber" : 68,
        "startColumnNumber" : 2,
        "endLineNumber" : 109,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Expands all references to labels embedded within a string using the provided expansion mapping from labels to artifacts. <p>Since this pass is heuristic, references to non-existent labels (such as arbitrary words) or invalid labels are simply ignored and are unchanged in the output. However, if the heuristic discovers a label, which identifies an existing target producing zero or multiple files, an error is reported.\n * @param expression the expression to expand.\n * @param labelMap the mapping from labels to artifacts, whose relative pathis to be used as the expansion.\n * @param labelResolver the {@code Label} that can resolve label stringsto  {@code Label} objects. The resolved label is either relative to{@code labelResolver} or is a global label (i.e. starts with \"//\").\n * @return the expansion of the string.\n * @throws NotUniqueExpansionException if a label that is present in themapping expands to zero or multiple files.\n */\npublic static <T extends Iterable<Artifact>>String expand(@Nullable String expression,Map<Label,T> labelMap,Label labelResolver) throws NotUniqueExpansionException {\n  if (Strings.isNullOrEmpty(expression)) {\n    return \"\";\n  }\n  Preconditions.checkNotNull(labelMap);\n  Preconditions.checkNotNull(labelResolver);\n  int offset=0;\n  StringBuilder result=new StringBuilder();\n  while (offset < expression.length()) {\n    String labelText=scanLabel(expression,offset);\n    if (labelText != null) {\n      offset+=labelText.length();\n      result.append(tryResolvingLabelTextToArtifactPath(labelText,labelMap,labelResolver));\n    }\n else {\n      result.append(expression.charAt(offset));\n      offset++;\n    }\n  }\n  return result.toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 119,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 99,
        "startColumnNumber" : 6,
        "endLineNumber" : 99,
        "endColumnNumber" : 55
      },
      "nodeContext" : "String labelText=scanLabel(expression,offset);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 29,
    "startLineNumber" : 99,
    "startColumnNumber" : 25,
    "endLineNumber" : 99,
    "endColumnNumber" : 54
  } ],
  "layoutRelationDataList" : [ ]
}