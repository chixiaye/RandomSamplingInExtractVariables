{
  "id" : 284,
  "expression" : "acl",
  "projectName" : "apache@zookeeper",
  "commitID" : "c6639c9842973a7954c8baa412d6825cb833d51f",
  "filePath" : "/src/java/test/org/apache/zookeeper/test/ACLTest.java",
  "occurrences" : 6,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "acl",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 86,
      "startColumnNumber" : 12,
      "endLineNumber" : 86,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 86,
        "startColumnNumber" : 12,
        "endLineNumber" : 86,
        "endColumnNumber" : 27
      },
      "nodeContext" : "acl.setPerms(0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 86,
        "startColumnNumber" : 12,
        "endLineNumber" : 86,
        "endColumnNumber" : 28
      },
      "nodeContext" : "acl.setPerms(0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 380,
        "startLineNumber" : 83,
        "startColumnNumber" : 39,
        "endLineNumber" : 94,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  path=\"/\" + j;\n  ACL acl=new ACL();\n  acl.setPerms(0);\n  Id id=new Id();\n  id.setId(j + \"\");\n  id.setScheme(\"host\");\n  acl.setId(id);\n  ArrayList<ACL> list=new ArrayList<ACL>();\n  list.add(acl);\n  zk.create(path,path.getBytes(),list,CreateMode.PERSISTENT);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 76,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 411,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int j=100; j < 200; j++) {\n  path=\"/\" + j;\n  ACL acl=new ACL();\n  acl.setPerms(0);\n  Id id=new Id();\n  id.setId(j + \"\");\n  id.setScheme(\"host\");\n  acl.setId(id);\n  ArrayList<ACL> list=new ArrayList<ACL>();\n  list.add(acl);\n  zk.create(path,path.getBytes(),list,CreateMode.PERSISTENT);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 87,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2937,
        "startLineNumber" : 63,
        "startColumnNumber" : 44,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  File tmpDir=ClientBase.createTmpDir();\n  ClientBase.setupTestEnv();\n  zks=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  SyncRequestProcessor.snapCount=1000;\n  final int PORT=Integer.parseInt(HOSTPORT.split(\":\")[1]);\n  NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zks);\n  LOG.info(\"starting up the zookeeper server .. waiting\");\n  assertTrue(\"waiting for server being up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  ZooKeeper zk=new ZooKeeper(HOSTPORT,20000,this);\n  String path;\n  LOG.info(\"starting creating acls\");\n  for (int i=0; i < 100; i++) {\n    path=\"/\" + i;\n    zk.create(path,path.getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  }\n  assertTrue(\"size of the acl map \",(1 == zks.dataTree.longKeyMap.size()));\n  for (int j=100; j < 200; j++) {\n    path=\"/\" + j;\n    ACL acl=new ACL();\n    acl.setPerms(0);\n    Id id=new Id();\n    id.setId(j + \"\");\n    id.setScheme(\"host\");\n    acl.setId(id);\n    ArrayList<ACL> list=new ArrayList<ACL>();\n    list.add(acl);\n    zk.create(path,path.getBytes(),list,CreateMode.PERSISTENT);\n  }\n  assertTrue(\"size of the acl map \",(101 == zks.dataTree.longKeyMap.size()));\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal=new CountDownLatch(1);\n  zks=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zks);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n  assertTrue(\"count == 0\",startSignal.getCount() == 0);\n  assertTrue(\"acl map \",(101 == zks.dataTree.longKeyMap.size()));\n  for (int j=200; j < 205; j++) {\n    path=\"/\" + j;\n    ACL acl=new ACL();\n    acl.setPerms(0);\n    Id id=new Id();\n    id.setId(j + \"\");\n    id.setScheme(\"host\");\n    acl.setId(id);\n    ArrayList<ACL> list=new ArrayList<ACL>();\n    list.add(acl);\n    zk.create(path,path.getBytes(),list,CreateMode.PERSISTENT);\n  }\n  assertTrue(\"acl map \",(106 == zks.dataTree.longKeyMap.size()));\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 441,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3131,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Verify that acl optimization of storing just  a few acls and there references in the data  node is actually working.\n */\npublic void testAcls() throws Exception {\n  File tmpDir=ClientBase.createTmpDir();\n  ClientBase.setupTestEnv();\n  zks=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  SyncRequestProcessor.snapCount=1000;\n  final int PORT=Integer.parseInt(HOSTPORT.split(\":\")[1]);\n  NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zks);\n  LOG.info(\"starting up the zookeeper server .. waiting\");\n  assertTrue(\"waiting for server being up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  ZooKeeper zk=new ZooKeeper(HOSTPORT,20000,this);\n  String path;\n  LOG.info(\"starting creating acls\");\n  for (int i=0; i < 100; i++) {\n    path=\"/\" + i;\n    zk.create(path,path.getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  }\n  assertTrue(\"size of the acl map \",(1 == zks.dataTree.longKeyMap.size()));\n  for (int j=100; j < 200; j++) {\n    path=\"/\" + j;\n    ACL acl=new ACL();\n    acl.setPerms(0);\n    Id id=new Id();\n    id.setId(j + \"\");\n    id.setScheme(\"host\");\n    acl.setId(id);\n    ArrayList<ACL> list=new ArrayList<ACL>();\n    list.add(acl);\n    zk.create(path,path.getBytes(),list,CreateMode.PERSISTENT);\n  }\n  assertTrue(\"size of the acl map \",(101 == zks.dataTree.longKeyMap.size()));\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal=new CountDownLatch(1);\n  zks=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zks);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n  assertTrue(\"count == 0\",startSignal.getCount() == 0);\n  assertTrue(\"acl map \",(101 == zks.dataTree.longKeyMap.size()));\n  for (int j=200; j < 205; j++) {\n    path=\"/\" + j;\n    ACL acl=new ACL();\n    acl.setPerms(0);\n    Id id=new Id();\n    id.setId(j + \"\");\n    id.setScheme(\"host\");\n    acl.setId(id);\n    ArrayList<ACL> list=new ArrayList<ACL>();\n    list.add(acl);\n    zk.create(path,path.getBytes(),list,CreateMode.PERSISTENT);\n  }\n  assertTrue(\"acl map \",(106 == zks.dataTree.longKeyMap.size()));\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 448,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 86,
        "startColumnNumber" : 12,
        "endLineNumber" : 86,
        "endColumnNumber" : 28
      },
      "nodeContext" : "acl.setPerms(0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.zookeeper.test.ACL"
  }, {
    "nodeContext" : "acl",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 90,
      "startColumnNumber" : 12,
      "endLineNumber" : 90,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 90,
        "startColumnNumber" : 12,
        "endLineNumber" : 90,
        "endColumnNumber" : 25
      },
      "nodeContext" : "acl.setId(id)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 90,
        "startColumnNumber" : 12,
        "endLineNumber" : 90,
        "endColumnNumber" : 26
      },
      "nodeContext" : "acl.setId(id);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 380,
        "startLineNumber" : 83,
        "startColumnNumber" : 39,
        "endLineNumber" : 94,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  path=\"/\" + j;\n  ACL acl=new ACL();\n  acl.setPerms(0);\n  Id id=new Id();\n  id.setId(j + \"\");\n  id.setScheme(\"host\");\n  acl.setId(id);\n  ArrayList<ACL> list=new ArrayList<ACL>();\n  list.add(acl);\n  zk.create(path,path.getBytes(),list,CreateMode.PERSISTENT);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 76,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 411,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int j=100; j < 200; j++) {\n  path=\"/\" + j;\n  ACL acl=new ACL();\n  acl.setPerms(0);\n  Id id=new Id();\n  id.setId(j + \"\");\n  id.setScheme(\"host\");\n  acl.setId(id);\n  ArrayList<ACL> list=new ArrayList<ACL>();\n  list.add(acl);\n  zk.create(path,path.getBytes(),list,CreateMode.PERSISTENT);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 87,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2937,
        "startLineNumber" : 63,
        "startColumnNumber" : 44,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  File tmpDir=ClientBase.createTmpDir();\n  ClientBase.setupTestEnv();\n  zks=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  SyncRequestProcessor.snapCount=1000;\n  final int PORT=Integer.parseInt(HOSTPORT.split(\":\")[1]);\n  NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zks);\n  LOG.info(\"starting up the zookeeper server .. waiting\");\n  assertTrue(\"waiting for server being up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  ZooKeeper zk=new ZooKeeper(HOSTPORT,20000,this);\n  String path;\n  LOG.info(\"starting creating acls\");\n  for (int i=0; i < 100; i++) {\n    path=\"/\" + i;\n    zk.create(path,path.getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  }\n  assertTrue(\"size of the acl map \",(1 == zks.dataTree.longKeyMap.size()));\n  for (int j=100; j < 200; j++) {\n    path=\"/\" + j;\n    ACL acl=new ACL();\n    acl.setPerms(0);\n    Id id=new Id();\n    id.setId(j + \"\");\n    id.setScheme(\"host\");\n    acl.setId(id);\n    ArrayList<ACL> list=new ArrayList<ACL>();\n    list.add(acl);\n    zk.create(path,path.getBytes(),list,CreateMode.PERSISTENT);\n  }\n  assertTrue(\"size of the acl map \",(101 == zks.dataTree.longKeyMap.size()));\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal=new CountDownLatch(1);\n  zks=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zks);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n  assertTrue(\"count == 0\",startSignal.getCount() == 0);\n  assertTrue(\"acl map \",(101 == zks.dataTree.longKeyMap.size()));\n  for (int j=200; j < 205; j++) {\n    path=\"/\" + j;\n    ACL acl=new ACL();\n    acl.setPerms(0);\n    Id id=new Id();\n    id.setId(j + \"\");\n    id.setScheme(\"host\");\n    acl.setId(id);\n    ArrayList<ACL> list=new ArrayList<ACL>();\n    list.add(acl);\n    zk.create(path,path.getBytes(),list,CreateMode.PERSISTENT);\n  }\n  assertTrue(\"acl map \",(106 == zks.dataTree.longKeyMap.size()));\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 441,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3131,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Verify that acl optimization of storing just  a few acls and there references in the data  node is actually working.\n */\npublic void testAcls() throws Exception {\n  File tmpDir=ClientBase.createTmpDir();\n  ClientBase.setupTestEnv();\n  zks=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  SyncRequestProcessor.snapCount=1000;\n  final int PORT=Integer.parseInt(HOSTPORT.split(\":\")[1]);\n  NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zks);\n  LOG.info(\"starting up the zookeeper server .. waiting\");\n  assertTrue(\"waiting for server being up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  ZooKeeper zk=new ZooKeeper(HOSTPORT,20000,this);\n  String path;\n  LOG.info(\"starting creating acls\");\n  for (int i=0; i < 100; i++) {\n    path=\"/\" + i;\n    zk.create(path,path.getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  }\n  assertTrue(\"size of the acl map \",(1 == zks.dataTree.longKeyMap.size()));\n  for (int j=100; j < 200; j++) {\n    path=\"/\" + j;\n    ACL acl=new ACL();\n    acl.setPerms(0);\n    Id id=new Id();\n    id.setId(j + \"\");\n    id.setScheme(\"host\");\n    acl.setId(id);\n    ArrayList<ACL> list=new ArrayList<ACL>();\n    list.add(acl);\n    zk.create(path,path.getBytes(),list,CreateMode.PERSISTENT);\n  }\n  assertTrue(\"size of the acl map \",(101 == zks.dataTree.longKeyMap.size()));\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal=new CountDownLatch(1);\n  zks=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zks);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n  assertTrue(\"count == 0\",startSignal.getCount() == 0);\n  assertTrue(\"acl map \",(101 == zks.dataTree.longKeyMap.size()));\n  for (int j=200; j < 205; j++) {\n    path=\"/\" + j;\n    ACL acl=new ACL();\n    acl.setPerms(0);\n    Id id=new Id();\n    id.setId(j + \"\");\n    id.setScheme(\"host\");\n    acl.setId(id);\n    ArrayList<ACL> list=new ArrayList<ACL>();\n    list.add(acl);\n    zk.create(path,path.getBytes(),list,CreateMode.PERSISTENT);\n  }\n  assertTrue(\"acl map \",(106 == zks.dataTree.longKeyMap.size()));\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 448,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 90,
        "startColumnNumber" : 12,
        "endLineNumber" : 90,
        "endColumnNumber" : 26
      },
      "nodeContext" : "acl.setId(id);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.zookeeper.test.ACL"
  }, {
    "nodeContext" : "acl",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 92,
      "startColumnNumber" : 21,
      "endLineNumber" : 92,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 92,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 25
      },
      "nodeContext" : "list.add(acl)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 92,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 26
      },
      "nodeContext" : "list.add(acl);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 380,
        "startLineNumber" : 83,
        "startColumnNumber" : 39,
        "endLineNumber" : 94,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  path=\"/\" + j;\n  ACL acl=new ACL();\n  acl.setPerms(0);\n  Id id=new Id();\n  id.setId(j + \"\");\n  id.setScheme(\"host\");\n  acl.setId(id);\n  ArrayList<ACL> list=new ArrayList<ACL>();\n  list.add(acl);\n  zk.create(path,path.getBytes(),list,CreateMode.PERSISTENT);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 76,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 411,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int j=100; j < 200; j++) {\n  path=\"/\" + j;\n  ACL acl=new ACL();\n  acl.setPerms(0);\n  Id id=new Id();\n  id.setId(j + \"\");\n  id.setScheme(\"host\");\n  acl.setId(id);\n  ArrayList<ACL> list=new ArrayList<ACL>();\n  list.add(acl);\n  zk.create(path,path.getBytes(),list,CreateMode.PERSISTENT);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 87,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2937,
        "startLineNumber" : 63,
        "startColumnNumber" : 44,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  File tmpDir=ClientBase.createTmpDir();\n  ClientBase.setupTestEnv();\n  zks=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  SyncRequestProcessor.snapCount=1000;\n  final int PORT=Integer.parseInt(HOSTPORT.split(\":\")[1]);\n  NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zks);\n  LOG.info(\"starting up the zookeeper server .. waiting\");\n  assertTrue(\"waiting for server being up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  ZooKeeper zk=new ZooKeeper(HOSTPORT,20000,this);\n  String path;\n  LOG.info(\"starting creating acls\");\n  for (int i=0; i < 100; i++) {\n    path=\"/\" + i;\n    zk.create(path,path.getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  }\n  assertTrue(\"size of the acl map \",(1 == zks.dataTree.longKeyMap.size()));\n  for (int j=100; j < 200; j++) {\n    path=\"/\" + j;\n    ACL acl=new ACL();\n    acl.setPerms(0);\n    Id id=new Id();\n    id.setId(j + \"\");\n    id.setScheme(\"host\");\n    acl.setId(id);\n    ArrayList<ACL> list=new ArrayList<ACL>();\n    list.add(acl);\n    zk.create(path,path.getBytes(),list,CreateMode.PERSISTENT);\n  }\n  assertTrue(\"size of the acl map \",(101 == zks.dataTree.longKeyMap.size()));\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal=new CountDownLatch(1);\n  zks=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zks);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n  assertTrue(\"count == 0\",startSignal.getCount() == 0);\n  assertTrue(\"acl map \",(101 == zks.dataTree.longKeyMap.size()));\n  for (int j=200; j < 205; j++) {\n    path=\"/\" + j;\n    ACL acl=new ACL();\n    acl.setPerms(0);\n    Id id=new Id();\n    id.setId(j + \"\");\n    id.setScheme(\"host\");\n    acl.setId(id);\n    ArrayList<ACL> list=new ArrayList<ACL>();\n    list.add(acl);\n    zk.create(path,path.getBytes(),list,CreateMode.PERSISTENT);\n  }\n  assertTrue(\"acl map \",(106 == zks.dataTree.longKeyMap.size()));\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 441,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3131,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Verify that acl optimization of storing just  a few acls and there references in the data  node is actually working.\n */\npublic void testAcls() throws Exception {\n  File tmpDir=ClientBase.createTmpDir();\n  ClientBase.setupTestEnv();\n  zks=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  SyncRequestProcessor.snapCount=1000;\n  final int PORT=Integer.parseInt(HOSTPORT.split(\":\")[1]);\n  NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zks);\n  LOG.info(\"starting up the zookeeper server .. waiting\");\n  assertTrue(\"waiting for server being up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  ZooKeeper zk=new ZooKeeper(HOSTPORT,20000,this);\n  String path;\n  LOG.info(\"starting creating acls\");\n  for (int i=0; i < 100; i++) {\n    path=\"/\" + i;\n    zk.create(path,path.getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  }\n  assertTrue(\"size of the acl map \",(1 == zks.dataTree.longKeyMap.size()));\n  for (int j=100; j < 200; j++) {\n    path=\"/\" + j;\n    ACL acl=new ACL();\n    acl.setPerms(0);\n    Id id=new Id();\n    id.setId(j + \"\");\n    id.setScheme(\"host\");\n    acl.setId(id);\n    ArrayList<ACL> list=new ArrayList<ACL>();\n    list.add(acl);\n    zk.create(path,path.getBytes(),list,CreateMode.PERSISTENT);\n  }\n  assertTrue(\"size of the acl map \",(101 == zks.dataTree.longKeyMap.size()));\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal=new CountDownLatch(1);\n  zks=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zks);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n  assertTrue(\"count == 0\",startSignal.getCount() == 0);\n  assertTrue(\"acl map \",(101 == zks.dataTree.longKeyMap.size()));\n  for (int j=200; j < 205; j++) {\n    path=\"/\" + j;\n    ACL acl=new ACL();\n    acl.setPerms(0);\n    Id id=new Id();\n    id.setId(j + \"\");\n    id.setScheme(\"host\");\n    acl.setId(id);\n    ArrayList<ACL> list=new ArrayList<ACL>();\n    list.add(acl);\n    zk.create(path,path.getBytes(),list,CreateMode.PERSISTENT);\n  }\n  assertTrue(\"acl map \",(106 == zks.dataTree.longKeyMap.size()));\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 448,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 92,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 26
      },
      "nodeContext" : "list.add(acl);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.zookeeper.test.ACL"
  }, {
    "nodeContext" : "acl",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 120,
      "startColumnNumber" : 12,
      "endLineNumber" : 120,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 120,
        "endColumnNumber" : 27
      },
      "nodeContext" : "acl.setPerms(0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 120,
        "endColumnNumber" : 28
      },
      "nodeContext" : "acl.setPerms(0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 380,
        "startLineNumber" : 117,
        "startColumnNumber" : 39,
        "endLineNumber" : 128,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  path=\"/\" + j;\n  ACL acl=new ACL();\n  acl.setPerms(0);\n  Id id=new Id();\n  id.setId(j + \"\");\n  id.setScheme(\"host\");\n  acl.setId(id);\n  ArrayList<ACL> list=new ArrayList<ACL>();\n  list.add(acl);\n  zk.create(path,path.getBytes(),list,CreateMode.PERSISTENT);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 76,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 411,
        "startLineNumber" : 117,
        "startColumnNumber" : 8,
        "endLineNumber" : 128,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int j=200; j < 205; j++) {\n  path=\"/\" + j;\n  ACL acl=new ACL();\n  acl.setPerms(0);\n  Id id=new Id();\n  id.setId(j + \"\");\n  id.setScheme(\"host\");\n  acl.setId(id);\n  ArrayList<ACL> list=new ArrayList<ACL>();\n  list.add(acl);\n  zk.create(path,path.getBytes(),list,CreateMode.PERSISTENT);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 87,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2937,
        "startLineNumber" : 63,
        "startColumnNumber" : 44,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  File tmpDir=ClientBase.createTmpDir();\n  ClientBase.setupTestEnv();\n  zks=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  SyncRequestProcessor.snapCount=1000;\n  final int PORT=Integer.parseInt(HOSTPORT.split(\":\")[1]);\n  NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zks);\n  LOG.info(\"starting up the zookeeper server .. waiting\");\n  assertTrue(\"waiting for server being up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  ZooKeeper zk=new ZooKeeper(HOSTPORT,20000,this);\n  String path;\n  LOG.info(\"starting creating acls\");\n  for (int i=0; i < 100; i++) {\n    path=\"/\" + i;\n    zk.create(path,path.getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  }\n  assertTrue(\"size of the acl map \",(1 == zks.dataTree.longKeyMap.size()));\n  for (int j=100; j < 200; j++) {\n    path=\"/\" + j;\n    ACL acl=new ACL();\n    acl.setPerms(0);\n    Id id=new Id();\n    id.setId(j + \"\");\n    id.setScheme(\"host\");\n    acl.setId(id);\n    ArrayList<ACL> list=new ArrayList<ACL>();\n    list.add(acl);\n    zk.create(path,path.getBytes(),list,CreateMode.PERSISTENT);\n  }\n  assertTrue(\"size of the acl map \",(101 == zks.dataTree.longKeyMap.size()));\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal=new CountDownLatch(1);\n  zks=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zks);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n  assertTrue(\"count == 0\",startSignal.getCount() == 0);\n  assertTrue(\"acl map \",(101 == zks.dataTree.longKeyMap.size()));\n  for (int j=200; j < 205; j++) {\n    path=\"/\" + j;\n    ACL acl=new ACL();\n    acl.setPerms(0);\n    Id id=new Id();\n    id.setId(j + \"\");\n    id.setScheme(\"host\");\n    acl.setId(id);\n    ArrayList<ACL> list=new ArrayList<ACL>();\n    list.add(acl);\n    zk.create(path,path.getBytes(),list,CreateMode.PERSISTENT);\n  }\n  assertTrue(\"acl map \",(106 == zks.dataTree.longKeyMap.size()));\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 441,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3131,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Verify that acl optimization of storing just  a few acls and there references in the data  node is actually working.\n */\npublic void testAcls() throws Exception {\n  File tmpDir=ClientBase.createTmpDir();\n  ClientBase.setupTestEnv();\n  zks=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  SyncRequestProcessor.snapCount=1000;\n  final int PORT=Integer.parseInt(HOSTPORT.split(\":\")[1]);\n  NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zks);\n  LOG.info(\"starting up the zookeeper server .. waiting\");\n  assertTrue(\"waiting for server being up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  ZooKeeper zk=new ZooKeeper(HOSTPORT,20000,this);\n  String path;\n  LOG.info(\"starting creating acls\");\n  for (int i=0; i < 100; i++) {\n    path=\"/\" + i;\n    zk.create(path,path.getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  }\n  assertTrue(\"size of the acl map \",(1 == zks.dataTree.longKeyMap.size()));\n  for (int j=100; j < 200; j++) {\n    path=\"/\" + j;\n    ACL acl=new ACL();\n    acl.setPerms(0);\n    Id id=new Id();\n    id.setId(j + \"\");\n    id.setScheme(\"host\");\n    acl.setId(id);\n    ArrayList<ACL> list=new ArrayList<ACL>();\n    list.add(acl);\n    zk.create(path,path.getBytes(),list,CreateMode.PERSISTENT);\n  }\n  assertTrue(\"size of the acl map \",(101 == zks.dataTree.longKeyMap.size()));\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal=new CountDownLatch(1);\n  zks=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zks);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n  assertTrue(\"count == 0\",startSignal.getCount() == 0);\n  assertTrue(\"acl map \",(101 == zks.dataTree.longKeyMap.size()));\n  for (int j=200; j < 205; j++) {\n    path=\"/\" + j;\n    ACL acl=new ACL();\n    acl.setPerms(0);\n    Id id=new Id();\n    id.setId(j + \"\");\n    id.setScheme(\"host\");\n    acl.setId(id);\n    ArrayList<ACL> list=new ArrayList<ACL>();\n    list.add(acl);\n    zk.create(path,path.getBytes(),list,CreateMode.PERSISTENT);\n  }\n  assertTrue(\"acl map \",(106 == zks.dataTree.longKeyMap.size()));\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 448,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 120,
        "endColumnNumber" : 28
      },
      "nodeContext" : "acl.setPerms(0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.zookeeper.test.ACL"
  }, {
    "nodeContext" : "acl",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 124,
      "startColumnNumber" : 12,
      "endLineNumber" : 124,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 124,
        "startColumnNumber" : 12,
        "endLineNumber" : 124,
        "endColumnNumber" : 25
      },
      "nodeContext" : "acl.setId(id)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 124,
        "startColumnNumber" : 12,
        "endLineNumber" : 124,
        "endColumnNumber" : 26
      },
      "nodeContext" : "acl.setId(id);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 380,
        "startLineNumber" : 117,
        "startColumnNumber" : 39,
        "endLineNumber" : 128,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  path=\"/\" + j;\n  ACL acl=new ACL();\n  acl.setPerms(0);\n  Id id=new Id();\n  id.setId(j + \"\");\n  id.setScheme(\"host\");\n  acl.setId(id);\n  ArrayList<ACL> list=new ArrayList<ACL>();\n  list.add(acl);\n  zk.create(path,path.getBytes(),list,CreateMode.PERSISTENT);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 76,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 411,
        "startLineNumber" : 117,
        "startColumnNumber" : 8,
        "endLineNumber" : 128,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int j=200; j < 205; j++) {\n  path=\"/\" + j;\n  ACL acl=new ACL();\n  acl.setPerms(0);\n  Id id=new Id();\n  id.setId(j + \"\");\n  id.setScheme(\"host\");\n  acl.setId(id);\n  ArrayList<ACL> list=new ArrayList<ACL>();\n  list.add(acl);\n  zk.create(path,path.getBytes(),list,CreateMode.PERSISTENT);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 87,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2937,
        "startLineNumber" : 63,
        "startColumnNumber" : 44,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  File tmpDir=ClientBase.createTmpDir();\n  ClientBase.setupTestEnv();\n  zks=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  SyncRequestProcessor.snapCount=1000;\n  final int PORT=Integer.parseInt(HOSTPORT.split(\":\")[1]);\n  NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zks);\n  LOG.info(\"starting up the zookeeper server .. waiting\");\n  assertTrue(\"waiting for server being up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  ZooKeeper zk=new ZooKeeper(HOSTPORT,20000,this);\n  String path;\n  LOG.info(\"starting creating acls\");\n  for (int i=0; i < 100; i++) {\n    path=\"/\" + i;\n    zk.create(path,path.getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  }\n  assertTrue(\"size of the acl map \",(1 == zks.dataTree.longKeyMap.size()));\n  for (int j=100; j < 200; j++) {\n    path=\"/\" + j;\n    ACL acl=new ACL();\n    acl.setPerms(0);\n    Id id=new Id();\n    id.setId(j + \"\");\n    id.setScheme(\"host\");\n    acl.setId(id);\n    ArrayList<ACL> list=new ArrayList<ACL>();\n    list.add(acl);\n    zk.create(path,path.getBytes(),list,CreateMode.PERSISTENT);\n  }\n  assertTrue(\"size of the acl map \",(101 == zks.dataTree.longKeyMap.size()));\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal=new CountDownLatch(1);\n  zks=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zks);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n  assertTrue(\"count == 0\",startSignal.getCount() == 0);\n  assertTrue(\"acl map \",(101 == zks.dataTree.longKeyMap.size()));\n  for (int j=200; j < 205; j++) {\n    path=\"/\" + j;\n    ACL acl=new ACL();\n    acl.setPerms(0);\n    Id id=new Id();\n    id.setId(j + \"\");\n    id.setScheme(\"host\");\n    acl.setId(id);\n    ArrayList<ACL> list=new ArrayList<ACL>();\n    list.add(acl);\n    zk.create(path,path.getBytes(),list,CreateMode.PERSISTENT);\n  }\n  assertTrue(\"acl map \",(106 == zks.dataTree.longKeyMap.size()));\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 441,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3131,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Verify that acl optimization of storing just  a few acls and there references in the data  node is actually working.\n */\npublic void testAcls() throws Exception {\n  File tmpDir=ClientBase.createTmpDir();\n  ClientBase.setupTestEnv();\n  zks=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  SyncRequestProcessor.snapCount=1000;\n  final int PORT=Integer.parseInt(HOSTPORT.split(\":\")[1]);\n  NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zks);\n  LOG.info(\"starting up the zookeeper server .. waiting\");\n  assertTrue(\"waiting for server being up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  ZooKeeper zk=new ZooKeeper(HOSTPORT,20000,this);\n  String path;\n  LOG.info(\"starting creating acls\");\n  for (int i=0; i < 100; i++) {\n    path=\"/\" + i;\n    zk.create(path,path.getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  }\n  assertTrue(\"size of the acl map \",(1 == zks.dataTree.longKeyMap.size()));\n  for (int j=100; j < 200; j++) {\n    path=\"/\" + j;\n    ACL acl=new ACL();\n    acl.setPerms(0);\n    Id id=new Id();\n    id.setId(j + \"\");\n    id.setScheme(\"host\");\n    acl.setId(id);\n    ArrayList<ACL> list=new ArrayList<ACL>();\n    list.add(acl);\n    zk.create(path,path.getBytes(),list,CreateMode.PERSISTENT);\n  }\n  assertTrue(\"size of the acl map \",(101 == zks.dataTree.longKeyMap.size()));\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal=new CountDownLatch(1);\n  zks=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zks);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n  assertTrue(\"count == 0\",startSignal.getCount() == 0);\n  assertTrue(\"acl map \",(101 == zks.dataTree.longKeyMap.size()));\n  for (int j=200; j < 205; j++) {\n    path=\"/\" + j;\n    ACL acl=new ACL();\n    acl.setPerms(0);\n    Id id=new Id();\n    id.setId(j + \"\");\n    id.setScheme(\"host\");\n    acl.setId(id);\n    ArrayList<ACL> list=new ArrayList<ACL>();\n    list.add(acl);\n    zk.create(path,path.getBytes(),list,CreateMode.PERSISTENT);\n  }\n  assertTrue(\"acl map \",(106 == zks.dataTree.longKeyMap.size()));\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 448,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 124,
        "startColumnNumber" : 12,
        "endLineNumber" : 124,
        "endColumnNumber" : 26
      },
      "nodeContext" : "acl.setId(id);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.zookeeper.test.ACL"
  }, {
    "nodeContext" : "acl",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 126,
      "startColumnNumber" : 21,
      "endLineNumber" : 126,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 126,
        "startColumnNumber" : 12,
        "endLineNumber" : 126,
        "endColumnNumber" : 25
      },
      "nodeContext" : "list.add(acl)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 126,
        "startColumnNumber" : 12,
        "endLineNumber" : 126,
        "endColumnNumber" : 26
      },
      "nodeContext" : "list.add(acl);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 380,
        "startLineNumber" : 117,
        "startColumnNumber" : 39,
        "endLineNumber" : 128,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  path=\"/\" + j;\n  ACL acl=new ACL();\n  acl.setPerms(0);\n  Id id=new Id();\n  id.setId(j + \"\");\n  id.setScheme(\"host\");\n  acl.setId(id);\n  ArrayList<ACL> list=new ArrayList<ACL>();\n  list.add(acl);\n  zk.create(path,path.getBytes(),list,CreateMode.PERSISTENT);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 76,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 411,
        "startLineNumber" : 117,
        "startColumnNumber" : 8,
        "endLineNumber" : 128,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int j=200; j < 205; j++) {\n  path=\"/\" + j;\n  ACL acl=new ACL();\n  acl.setPerms(0);\n  Id id=new Id();\n  id.setId(j + \"\");\n  id.setScheme(\"host\");\n  acl.setId(id);\n  ArrayList<ACL> list=new ArrayList<ACL>();\n  list.add(acl);\n  zk.create(path,path.getBytes(),list,CreateMode.PERSISTENT);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 87,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2937,
        "startLineNumber" : 63,
        "startColumnNumber" : 44,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  File tmpDir=ClientBase.createTmpDir();\n  ClientBase.setupTestEnv();\n  zks=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  SyncRequestProcessor.snapCount=1000;\n  final int PORT=Integer.parseInt(HOSTPORT.split(\":\")[1]);\n  NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zks);\n  LOG.info(\"starting up the zookeeper server .. waiting\");\n  assertTrue(\"waiting for server being up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  ZooKeeper zk=new ZooKeeper(HOSTPORT,20000,this);\n  String path;\n  LOG.info(\"starting creating acls\");\n  for (int i=0; i < 100; i++) {\n    path=\"/\" + i;\n    zk.create(path,path.getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  }\n  assertTrue(\"size of the acl map \",(1 == zks.dataTree.longKeyMap.size()));\n  for (int j=100; j < 200; j++) {\n    path=\"/\" + j;\n    ACL acl=new ACL();\n    acl.setPerms(0);\n    Id id=new Id();\n    id.setId(j + \"\");\n    id.setScheme(\"host\");\n    acl.setId(id);\n    ArrayList<ACL> list=new ArrayList<ACL>();\n    list.add(acl);\n    zk.create(path,path.getBytes(),list,CreateMode.PERSISTENT);\n  }\n  assertTrue(\"size of the acl map \",(101 == zks.dataTree.longKeyMap.size()));\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal=new CountDownLatch(1);\n  zks=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zks);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n  assertTrue(\"count == 0\",startSignal.getCount() == 0);\n  assertTrue(\"acl map \",(101 == zks.dataTree.longKeyMap.size()));\n  for (int j=200; j < 205; j++) {\n    path=\"/\" + j;\n    ACL acl=new ACL();\n    acl.setPerms(0);\n    Id id=new Id();\n    id.setId(j + \"\");\n    id.setScheme(\"host\");\n    acl.setId(id);\n    ArrayList<ACL> list=new ArrayList<ACL>();\n    list.add(acl);\n    zk.create(path,path.getBytes(),list,CreateMode.PERSISTENT);\n  }\n  assertTrue(\"acl map \",(106 == zks.dataTree.longKeyMap.size()));\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 441,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3131,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Verify that acl optimization of storing just  a few acls and there references in the data  node is actually working.\n */\npublic void testAcls() throws Exception {\n  File tmpDir=ClientBase.createTmpDir();\n  ClientBase.setupTestEnv();\n  zks=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  SyncRequestProcessor.snapCount=1000;\n  final int PORT=Integer.parseInt(HOSTPORT.split(\":\")[1]);\n  NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zks);\n  LOG.info(\"starting up the zookeeper server .. waiting\");\n  assertTrue(\"waiting for server being up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  ZooKeeper zk=new ZooKeeper(HOSTPORT,20000,this);\n  String path;\n  LOG.info(\"starting creating acls\");\n  for (int i=0; i < 100; i++) {\n    path=\"/\" + i;\n    zk.create(path,path.getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  }\n  assertTrue(\"size of the acl map \",(1 == zks.dataTree.longKeyMap.size()));\n  for (int j=100; j < 200; j++) {\n    path=\"/\" + j;\n    ACL acl=new ACL();\n    acl.setPerms(0);\n    Id id=new Id();\n    id.setId(j + \"\");\n    id.setScheme(\"host\");\n    acl.setId(id);\n    ArrayList<ACL> list=new ArrayList<ACL>();\n    list.add(acl);\n    zk.create(path,path.getBytes(),list,CreateMode.PERSISTENT);\n  }\n  assertTrue(\"size of the acl map \",(101 == zks.dataTree.longKeyMap.size()));\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal=new CountDownLatch(1);\n  zks=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zks);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(HOSTPORT,CONNECTION_TIMEOUT));\n  startSignal.await(CONNECTION_TIMEOUT,TimeUnit.MILLISECONDS);\n  assertTrue(\"count == 0\",startSignal.getCount() == 0);\n  assertTrue(\"acl map \",(101 == zks.dataTree.longKeyMap.size()));\n  for (int j=200; j < 205; j++) {\n    path=\"/\" + j;\n    ACL acl=new ACL();\n    acl.setPerms(0);\n    Id id=new Id();\n    id.setId(j + \"\");\n    id.setScheme(\"host\");\n    acl.setId(id);\n    ArrayList<ACL> list=new ArrayList<ACL>();\n    list.add(acl);\n    zk.create(path,path.getBytes(),list,CreateMode.PERSISTENT);\n  }\n  assertTrue(\"acl map \",(106 == zks.dataTree.longKeyMap.size()));\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(HOSTPORT,ClientBase.CONNECTION_TIMEOUT));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 448,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 126,
        "startColumnNumber" : 12,
        "endLineNumber" : 126,
        "endColumnNumber" : 26
      },
      "nodeContext" : "list.add(acl);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.zookeeper.test.ACL"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 86,
    "startColumnNumber" : 12,
    "endLineNumber" : 86,
    "endColumnNumber" : 15
  }, {
    "charLength" : 3,
    "startLineNumber" : 90,
    "startColumnNumber" : 12,
    "endLineNumber" : 90,
    "endColumnNumber" : 15
  }, {
    "charLength" : 3,
    "startLineNumber" : 92,
    "startColumnNumber" : 21,
    "endLineNumber" : 92,
    "endColumnNumber" : 24
  }, {
    "charLength" : 3,
    "startLineNumber" : 120,
    "startColumnNumber" : 12,
    "endLineNumber" : 120,
    "endColumnNumber" : 15
  }, {
    "charLength" : 3,
    "startLineNumber" : 124,
    "startColumnNumber" : 12,
    "endLineNumber" : 124,
    "endColumnNumber" : 15
  }, {
    "charLength" : 3,
    "startLineNumber" : 126,
    "startColumnNumber" : 21,
    "endLineNumber" : 126,
    "endColumnNumber" : 24
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 2
  } ]
}