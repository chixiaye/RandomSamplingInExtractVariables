{
  "id" : 395,
  "expression" : "Opcodes.MOVE_FROM16",
  "projectName" : "Tencent@tinker",
  "commitID" : "df9e1d29420d53a650ab73569d828a22e3cfe728",
  "filePath" : "/third-party/aosp-dexutils/src/main/java/com/tencent/tinker/android/dx/instruction/InstructionWriter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Opcodes.MOVE_FROM16",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 367,
      "startColumnNumber" : 17,
      "endLineNumber" : 367,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 367,
        "startColumnNumber" : 12,
        "endLineNumber" : 367,
        "endColumnNumber" : 37
      },
      "nodeContext" : "case Opcodes.MOVE_FROM16:",
      "nodeType" : "SwitchCase",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6906,
        "startLineNumber" : 300,
        "startColumnNumber" : 8,
        "endLineNumber" : 479,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (opcode) {\ncase Opcodes.MOVE:case Opcodes.MOVE_WIDE:case Opcodes.MOVE_OBJECT:case Opcodes.ARRAY_LENGTH:case Opcodes.NEG_INT:case Opcodes.NOT_INT:case Opcodes.NEG_LONG:case Opcodes.NOT_LONG:case Opcodes.NEG_FLOAT:case Opcodes.NEG_DOUBLE:case Opcodes.INT_TO_LONG:case Opcodes.INT_TO_FLOAT:case Opcodes.INT_TO_DOUBLE:case Opcodes.LONG_TO_INT:case Opcodes.LONG_TO_FLOAT:case Opcodes.LONG_TO_DOUBLE:case Opcodes.FLOAT_TO_INT:case Opcodes.FLOAT_TO_LONG:case Opcodes.FLOAT_TO_DOUBLE:case Opcodes.DOUBLE_TO_INT:case Opcodes.DOUBLE_TO_LONG:case Opcodes.DOUBLE_TO_FLOAT:case Opcodes.INT_TO_BYTE:case Opcodes.INT_TO_CHAR:case Opcodes.INT_TO_SHORT:case Opcodes.ADD_INT_2ADDR:case Opcodes.SUB_INT_2ADDR:case Opcodes.MUL_INT_2ADDR:case Opcodes.DIV_INT_2ADDR:case Opcodes.REM_INT_2ADDR:case Opcodes.AND_INT_2ADDR:case Opcodes.OR_INT_2ADDR:case Opcodes.XOR_INT_2ADDR:case Opcodes.SHL_INT_2ADDR:case Opcodes.SHR_INT_2ADDR:case Opcodes.USHR_INT_2ADDR:case Opcodes.ADD_LONG_2ADDR:case Opcodes.SUB_LONG_2ADDR:case Opcodes.MUL_LONG_2ADDR:case Opcodes.DIV_LONG_2ADDR:case Opcodes.REM_LONG_2ADDR:case Opcodes.AND_LONG_2ADDR:case Opcodes.OR_LONG_2ADDR:case Opcodes.XOR_LONG_2ADDR:case Opcodes.SHL_LONG_2ADDR:case Opcodes.SHR_LONG_2ADDR:case Opcodes.USHR_LONG_2ADDR:case Opcodes.ADD_FLOAT_2ADDR:case Opcodes.SUB_FLOAT_2ADDR:case Opcodes.MUL_FLOAT_2ADDR:case Opcodes.DIV_FLOAT_2ADDR:case Opcodes.REM_FLOAT_2ADDR:case Opcodes.ADD_DOUBLE_2ADDR:case Opcodes.SUB_DOUBLE_2ADDR:case Opcodes.MUL_DOUBLE_2ADDR:case Opcodes.DIV_DOUBLE_2ADDR:case Opcodes.REM_DOUBLE_2ADDR:{\n    short opcodeUnit=(short)opcode;\n    codeOut.write(InstructionCodec.codeUnit(opcodeUnit,InstructionCodec.makeByte(a,b)));\n    break;\n  }\ncase Opcodes.MOVE_FROM16:case Opcodes.MOVE_WIDE_FROM16:case Opcodes.MOVE_OBJECT_FROM16:{\n  codeOut.write(InstructionCodec.codeUnit(opcode,a),InstructionCodec.getBUnit(b));\n  break;\n}\ncase Opcodes.ADD_INT_LIT8:case Opcodes.RSUB_INT_LIT8:case Opcodes.MUL_INT_LIT8:case Opcodes.DIV_INT_LIT8:case Opcodes.REM_INT_LIT8:case Opcodes.AND_INT_LIT8:case Opcodes.OR_INT_LIT8:case Opcodes.XOR_INT_LIT8:case Opcodes.SHL_INT_LIT8:case Opcodes.SHR_INT_LIT8:case Opcodes.USHR_INT_LIT8:{\ncodeOut.write(InstructionCodec.codeUnit(opcode,a),InstructionCodec.codeUnit(b,InstructionCodec.getLiteralByte(literal)));\nbreak;\n}\ncase Opcodes.IF_EQ:case Opcodes.IF_NE:case Opcodes.IF_LT:case Opcodes.IF_GE:case Opcodes.IF_GT:case Opcodes.IF_LE:{\nshort relativeTarget=InstructionCodec.getTargetUnit(target,codeOut.cursor());\ncodeOut.write(InstructionCodec.codeUnit(opcode,InstructionCodec.makeByte(a,b)),relativeTarget);\nbreak;\n}\ncase Opcodes.ADD_INT_LIT16:case Opcodes.RSUB_INT:case Opcodes.MUL_INT_LIT16:case Opcodes.DIV_INT_LIT16:case Opcodes.REM_INT_LIT16:case Opcodes.AND_INT_LIT16:case Opcodes.OR_INT_LIT16:case Opcodes.XOR_INT_LIT16:{\ncodeOut.write(InstructionCodec.codeUnit(opcode,InstructionCodec.makeByte(a,b)),InstructionCodec.getLiteralUnit(literal));\nbreak;\n}\ncase Opcodes.INSTANCE_OF:case Opcodes.NEW_ARRAY:case Opcodes.IGET:case Opcodes.IGET_WIDE:case Opcodes.IGET_OBJECT:case Opcodes.IGET_BOOLEAN:case Opcodes.IGET_BYTE:case Opcodes.IGET_CHAR:case Opcodes.IGET_SHORT:case Opcodes.IPUT:case Opcodes.IPUT_WIDE:case Opcodes.IPUT_OBJECT:case Opcodes.IPUT_BOOLEAN:case Opcodes.IPUT_BYTE:case Opcodes.IPUT_CHAR:case Opcodes.IPUT_SHORT:{\nshort indexUnit=(short)index;\ncodeOut.write(InstructionCodec.codeUnit(opcode,InstructionCodec.makeByte(a,b)),indexUnit);\nbreak;\n}\ncase Opcodes.MOVE_16:case Opcodes.MOVE_WIDE_16:case Opcodes.MOVE_OBJECT_16:{\nshort opcodeUnit=(short)opcode;\ncodeOut.write(opcodeUnit,InstructionCodec.getAUnit(a),InstructionCodec.getBUnit(b));\nbreak;\n}\ncase Opcodes.FILLED_NEW_ARRAY:case Opcodes.INVOKE_VIRTUAL:case Opcodes.INVOKE_SUPER:case Opcodes.INVOKE_DIRECT:case Opcodes.INVOKE_STATIC:case Opcodes.INVOKE_INTERFACE:{\nshort indexUnit=(short)index;\ncodeOut.write(InstructionCodec.codeUnit(opcode,InstructionCodec.makeByte(0,2)),indexUnit,InstructionCodec.codeUnit(a,b,0,0));\nbreak;\n}\ndefault:{\nthrow new IllegalStateException(\"unexpected opcode: \" + Hex.u2or4(opcode));\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 631,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7032,
        "startLineNumber" : 295,
        "startColumnNumber" : 135,
        "endLineNumber" : 480,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (this.hasPromoter) {\n    target=this.insnPromoter.getPromotedAddress(target);\n  }\nswitch (opcode) {\ncase Opcodes.MOVE:case Opcodes.MOVE_WIDE:case Opcodes.MOVE_OBJECT:case Opcodes.ARRAY_LENGTH:case Opcodes.NEG_INT:case Opcodes.NOT_INT:case Opcodes.NEG_LONG:case Opcodes.NOT_LONG:case Opcodes.NEG_FLOAT:case Opcodes.NEG_DOUBLE:case Opcodes.INT_TO_LONG:case Opcodes.INT_TO_FLOAT:case Opcodes.INT_TO_DOUBLE:case Opcodes.LONG_TO_INT:case Opcodes.LONG_TO_FLOAT:case Opcodes.LONG_TO_DOUBLE:case Opcodes.FLOAT_TO_INT:case Opcodes.FLOAT_TO_LONG:case Opcodes.FLOAT_TO_DOUBLE:case Opcodes.DOUBLE_TO_INT:case Opcodes.DOUBLE_TO_LONG:case Opcodes.DOUBLE_TO_FLOAT:case Opcodes.INT_TO_BYTE:case Opcodes.INT_TO_CHAR:case Opcodes.INT_TO_SHORT:case Opcodes.ADD_INT_2ADDR:case Opcodes.SUB_INT_2ADDR:case Opcodes.MUL_INT_2ADDR:case Opcodes.DIV_INT_2ADDR:case Opcodes.REM_INT_2ADDR:case Opcodes.AND_INT_2ADDR:case Opcodes.OR_INT_2ADDR:case Opcodes.XOR_INT_2ADDR:case Opcodes.SHL_INT_2ADDR:case Opcodes.SHR_INT_2ADDR:case Opcodes.USHR_INT_2ADDR:case Opcodes.ADD_LONG_2ADDR:case Opcodes.SUB_LONG_2ADDR:case Opcodes.MUL_LONG_2ADDR:case Opcodes.DIV_LONG_2ADDR:case Opcodes.REM_LONG_2ADDR:case Opcodes.AND_LONG_2ADDR:case Opcodes.OR_LONG_2ADDR:case Opcodes.XOR_LONG_2ADDR:case Opcodes.SHL_LONG_2ADDR:case Opcodes.SHR_LONG_2ADDR:case Opcodes.USHR_LONG_2ADDR:case Opcodes.ADD_FLOAT_2ADDR:case Opcodes.SUB_FLOAT_2ADDR:case Opcodes.MUL_FLOAT_2ADDR:case Opcodes.DIV_FLOAT_2ADDR:case Opcodes.REM_FLOAT_2ADDR:case Opcodes.ADD_DOUBLE_2ADDR:case Opcodes.SUB_DOUBLE_2ADDR:case Opcodes.MUL_DOUBLE_2ADDR:case Opcodes.DIV_DOUBLE_2ADDR:case Opcodes.REM_DOUBLE_2ADDR:{\n      short opcodeUnit=(short)opcode;\n      codeOut.write(InstructionCodec.codeUnit(opcodeUnit,InstructionCodec.makeByte(a,b)));\n      break;\n    }\ncase Opcodes.MOVE_FROM16:case Opcodes.MOVE_WIDE_FROM16:case Opcodes.MOVE_OBJECT_FROM16:{\n    codeOut.write(InstructionCodec.codeUnit(opcode,a),InstructionCodec.getBUnit(b));\n    break;\n  }\ncase Opcodes.ADD_INT_LIT8:case Opcodes.RSUB_INT_LIT8:case Opcodes.MUL_INT_LIT8:case Opcodes.DIV_INT_LIT8:case Opcodes.REM_INT_LIT8:case Opcodes.AND_INT_LIT8:case Opcodes.OR_INT_LIT8:case Opcodes.XOR_INT_LIT8:case Opcodes.SHL_INT_LIT8:case Opcodes.SHR_INT_LIT8:case Opcodes.USHR_INT_LIT8:{\n  codeOut.write(InstructionCodec.codeUnit(opcode,a),InstructionCodec.codeUnit(b,InstructionCodec.getLiteralByte(literal)));\n  break;\n}\ncase Opcodes.IF_EQ:case Opcodes.IF_NE:case Opcodes.IF_LT:case Opcodes.IF_GE:case Opcodes.IF_GT:case Opcodes.IF_LE:{\nshort relativeTarget=InstructionCodec.getTargetUnit(target,codeOut.cursor());\ncodeOut.write(InstructionCodec.codeUnit(opcode,InstructionCodec.makeByte(a,b)),relativeTarget);\nbreak;\n}\ncase Opcodes.ADD_INT_LIT16:case Opcodes.RSUB_INT:case Opcodes.MUL_INT_LIT16:case Opcodes.DIV_INT_LIT16:case Opcodes.REM_INT_LIT16:case Opcodes.AND_INT_LIT16:case Opcodes.OR_INT_LIT16:case Opcodes.XOR_INT_LIT16:{\ncodeOut.write(InstructionCodec.codeUnit(opcode,InstructionCodec.makeByte(a,b)),InstructionCodec.getLiteralUnit(literal));\nbreak;\n}\ncase Opcodes.INSTANCE_OF:case Opcodes.NEW_ARRAY:case Opcodes.IGET:case Opcodes.IGET_WIDE:case Opcodes.IGET_OBJECT:case Opcodes.IGET_BOOLEAN:case Opcodes.IGET_BYTE:case Opcodes.IGET_CHAR:case Opcodes.IGET_SHORT:case Opcodes.IPUT:case Opcodes.IPUT_WIDE:case Opcodes.IPUT_OBJECT:case Opcodes.IPUT_BOOLEAN:case Opcodes.IPUT_BYTE:case Opcodes.IPUT_CHAR:case Opcodes.IPUT_SHORT:{\nshort indexUnit=(short)index;\ncodeOut.write(InstructionCodec.codeUnit(opcode,InstructionCodec.makeByte(a,b)),indexUnit);\nbreak;\n}\ncase Opcodes.MOVE_16:case Opcodes.MOVE_WIDE_16:case Opcodes.MOVE_OBJECT_16:{\nshort opcodeUnit=(short)opcode;\ncodeOut.write(opcodeUnit,InstructionCodec.getAUnit(a),InstructionCodec.getBUnit(b));\nbreak;\n}\ncase Opcodes.FILLED_NEW_ARRAY:case Opcodes.INVOKE_VIRTUAL:case Opcodes.INVOKE_SUPER:case Opcodes.INVOKE_DIRECT:case Opcodes.INVOKE_STATIC:case Opcodes.INVOKE_INTERFACE:{\nshort indexUnit=(short)index;\ncodeOut.write(InstructionCodec.codeUnit(opcode,InstructionCodec.makeByte(0,2)),indexUnit,InstructionCodec.codeUnit(a,b,0,0));\nbreak;\n}\ndefault:{\nthrow new IllegalStateException(\"unexpected opcode: \" + Hex.u2or4(opcode));\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 646,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7163,
        "startLineNumber" : 295,
        "startColumnNumber" : 4,
        "endLineNumber" : 480,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void visitTwoRegisterInsn(int currentAddress,int opcode,int index,int indexType,int target,long literal,int a,int b){\n  if (this.hasPromoter) {\n    target=this.insnPromoter.getPromotedAddress(target);\n  }\nswitch (opcode) {\ncase Opcodes.MOVE:case Opcodes.MOVE_WIDE:case Opcodes.MOVE_OBJECT:case Opcodes.ARRAY_LENGTH:case Opcodes.NEG_INT:case Opcodes.NOT_INT:case Opcodes.NEG_LONG:case Opcodes.NOT_LONG:case Opcodes.NEG_FLOAT:case Opcodes.NEG_DOUBLE:case Opcodes.INT_TO_LONG:case Opcodes.INT_TO_FLOAT:case Opcodes.INT_TO_DOUBLE:case Opcodes.LONG_TO_INT:case Opcodes.LONG_TO_FLOAT:case Opcodes.LONG_TO_DOUBLE:case Opcodes.FLOAT_TO_INT:case Opcodes.FLOAT_TO_LONG:case Opcodes.FLOAT_TO_DOUBLE:case Opcodes.DOUBLE_TO_INT:case Opcodes.DOUBLE_TO_LONG:case Opcodes.DOUBLE_TO_FLOAT:case Opcodes.INT_TO_BYTE:case Opcodes.INT_TO_CHAR:case Opcodes.INT_TO_SHORT:case Opcodes.ADD_INT_2ADDR:case Opcodes.SUB_INT_2ADDR:case Opcodes.MUL_INT_2ADDR:case Opcodes.DIV_INT_2ADDR:case Opcodes.REM_INT_2ADDR:case Opcodes.AND_INT_2ADDR:case Opcodes.OR_INT_2ADDR:case Opcodes.XOR_INT_2ADDR:case Opcodes.SHL_INT_2ADDR:case Opcodes.SHR_INT_2ADDR:case Opcodes.USHR_INT_2ADDR:case Opcodes.ADD_LONG_2ADDR:case Opcodes.SUB_LONG_2ADDR:case Opcodes.MUL_LONG_2ADDR:case Opcodes.DIV_LONG_2ADDR:case Opcodes.REM_LONG_2ADDR:case Opcodes.AND_LONG_2ADDR:case Opcodes.OR_LONG_2ADDR:case Opcodes.XOR_LONG_2ADDR:case Opcodes.SHL_LONG_2ADDR:case Opcodes.SHR_LONG_2ADDR:case Opcodes.USHR_LONG_2ADDR:case Opcodes.ADD_FLOAT_2ADDR:case Opcodes.SUB_FLOAT_2ADDR:case Opcodes.MUL_FLOAT_2ADDR:case Opcodes.DIV_FLOAT_2ADDR:case Opcodes.REM_FLOAT_2ADDR:case Opcodes.ADD_DOUBLE_2ADDR:case Opcodes.SUB_DOUBLE_2ADDR:case Opcodes.MUL_DOUBLE_2ADDR:case Opcodes.DIV_DOUBLE_2ADDR:case Opcodes.REM_DOUBLE_2ADDR:{\n      short opcodeUnit=(short)opcode;\n      codeOut.write(InstructionCodec.codeUnit(opcodeUnit,InstructionCodec.makeByte(a,b)));\n      break;\n    }\ncase Opcodes.MOVE_FROM16:case Opcodes.MOVE_WIDE_FROM16:case Opcodes.MOVE_OBJECT_FROM16:{\n    codeOut.write(InstructionCodec.codeUnit(opcode,a),InstructionCodec.getBUnit(b));\n    break;\n  }\ncase Opcodes.ADD_INT_LIT8:case Opcodes.RSUB_INT_LIT8:case Opcodes.MUL_INT_LIT8:case Opcodes.DIV_INT_LIT8:case Opcodes.REM_INT_LIT8:case Opcodes.AND_INT_LIT8:case Opcodes.OR_INT_LIT8:case Opcodes.XOR_INT_LIT8:case Opcodes.SHL_INT_LIT8:case Opcodes.SHR_INT_LIT8:case Opcodes.USHR_INT_LIT8:{\n  codeOut.write(InstructionCodec.codeUnit(opcode,a),InstructionCodec.codeUnit(b,InstructionCodec.getLiteralByte(literal)));\n  break;\n}\ncase Opcodes.IF_EQ:case Opcodes.IF_NE:case Opcodes.IF_LT:case Opcodes.IF_GE:case Opcodes.IF_GT:case Opcodes.IF_LE:{\nshort relativeTarget=InstructionCodec.getTargetUnit(target,codeOut.cursor());\ncodeOut.write(InstructionCodec.codeUnit(opcode,InstructionCodec.makeByte(a,b)),relativeTarget);\nbreak;\n}\ncase Opcodes.ADD_INT_LIT16:case Opcodes.RSUB_INT:case Opcodes.MUL_INT_LIT16:case Opcodes.DIV_INT_LIT16:case Opcodes.REM_INT_LIT16:case Opcodes.AND_INT_LIT16:case Opcodes.OR_INT_LIT16:case Opcodes.XOR_INT_LIT16:{\ncodeOut.write(InstructionCodec.codeUnit(opcode,InstructionCodec.makeByte(a,b)),InstructionCodec.getLiteralUnit(literal));\nbreak;\n}\ncase Opcodes.INSTANCE_OF:case Opcodes.NEW_ARRAY:case Opcodes.IGET:case Opcodes.IGET_WIDE:case Opcodes.IGET_OBJECT:case Opcodes.IGET_BOOLEAN:case Opcodes.IGET_BYTE:case Opcodes.IGET_CHAR:case Opcodes.IGET_SHORT:case Opcodes.IPUT:case Opcodes.IPUT_WIDE:case Opcodes.IPUT_OBJECT:case Opcodes.IPUT_BOOLEAN:case Opcodes.IPUT_BYTE:case Opcodes.IPUT_CHAR:case Opcodes.IPUT_SHORT:{\nshort indexUnit=(short)index;\ncodeOut.write(InstructionCodec.codeUnit(opcode,InstructionCodec.makeByte(a,b)),indexUnit);\nbreak;\n}\ncase Opcodes.MOVE_16:case Opcodes.MOVE_WIDE_16:case Opcodes.MOVE_OBJECT_16:{\nshort opcodeUnit=(short)opcode;\ncodeOut.write(opcodeUnit,InstructionCodec.getAUnit(a),InstructionCodec.getBUnit(b));\nbreak;\n}\ncase Opcodes.FILLED_NEW_ARRAY:case Opcodes.INVOKE_VIRTUAL:case Opcodes.INVOKE_SUPER:case Opcodes.INVOKE_DIRECT:case Opcodes.INVOKE_STATIC:case Opcodes.INVOKE_INTERFACE:{\nshort indexUnit=(short)index;\ncodeOut.write(InstructionCodec.codeUnit(opcode,InstructionCodec.makeByte(0,2)),indexUnit,InstructionCodec.codeUnit(a,b,0,0));\nbreak;\n}\ndefault:{\nthrow new IllegalStateException(\"unexpected opcode: \" + Hex.u2or4(opcode));\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 674,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 367,
        "startColumnNumber" : 12,
        "endLineNumber" : 367,
        "endColumnNumber" : 37
      },
      "nodeContext" : "case Opcodes.MOVE_FROM16:",
      "nodeType" : "SwitchCase",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 3,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 367,
    "startColumnNumber" : 17,
    "endLineNumber" : 367,
    "endColumnNumber" : 36
  } ],
  "layoutRelationDataList" : [ ]
}