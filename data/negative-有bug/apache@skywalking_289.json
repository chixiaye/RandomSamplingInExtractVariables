{
  "id" : 289,
  "expression" : "SpanAssert",
  "projectName" : "apache@skywalking",
  "commitID" : "16b51d55baec4f779f312e07081d1397addbcfe9",
  "filePath" : "/apm-sniffer/apm-sdk-plugin/avro-plugin/src/test/java/org/apache/skywalking/apm/plugin/avro/SpecificRequestorInterceptorTest.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "SpanAssert",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 87,
      "startColumnNumber" : 8,
      "endLineNumber" : 87,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 70
      },
      "nodeContext" : "SpanAssert.assertComponent(span,ComponentsDefine.AVRO_CLIENT)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 71
      },
      "nodeContext" : "SpanAssert.assertComponent(span,ComponentsDefine.AVRO_CLIENT);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 309,
        "startLineNumber" : 86,
        "startColumnNumber" : 75,
        "endLineNumber" : 93,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SpanAssert.assertComponent(span,ComponentsDefine.AVRO_CLIENT);\n  SpanAssert.assertOccurException(span,false);\n  SpanAssert.assertLogSize(span,0);\n  SpanAssert.assertLayer(span,SpanLayer.RPC_FRAMEWORK);\n  Assert.assertEquals(span.getOperationName(),operationName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 37,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 380,
        "startLineNumber" : 86,
        "startColumnNumber" : 4,
        "endLineNumber" : 93,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void spanCommonAssert(AbstractSpan span,String operationName){\n  SpanAssert.assertComponent(span,ComponentsDefine.AVRO_CLIENT);\n  SpanAssert.assertOccurException(span,false);\n  SpanAssert.assertLogSize(span,0);\n  SpanAssert.assertLayer(span,SpanLayer.RPC_FRAMEWORK);\n  Assert.assertEquals(span.getOperationName(),operationName);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 49,
      "astHeight" : 6
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 71
      },
      "nodeContext" : "SpanAssert.assertComponent(span,ComponentsDefine.AVRO_CLIENT);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.skywalking.apm.agent.test.tools.SpanAssert"
  }, {
    "nodeContext" : "SpanAssert",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 88,
      "startColumnNumber" : 8,
      "endLineNumber" : 88,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 88,
        "endColumnNumber" : 52
      },
      "nodeContext" : "SpanAssert.assertOccurException(span,false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 88,
        "endColumnNumber" : 53
      },
      "nodeContext" : "SpanAssert.assertOccurException(span,false);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 309,
        "startLineNumber" : 86,
        "startColumnNumber" : 75,
        "endLineNumber" : 93,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SpanAssert.assertComponent(span,ComponentsDefine.AVRO_CLIENT);\n  SpanAssert.assertOccurException(span,false);\n  SpanAssert.assertLogSize(span,0);\n  SpanAssert.assertLayer(span,SpanLayer.RPC_FRAMEWORK);\n  Assert.assertEquals(span.getOperationName(),operationName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 37,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 380,
        "startLineNumber" : 86,
        "startColumnNumber" : 4,
        "endLineNumber" : 93,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void spanCommonAssert(AbstractSpan span,String operationName){\n  SpanAssert.assertComponent(span,ComponentsDefine.AVRO_CLIENT);\n  SpanAssert.assertOccurException(span,false);\n  SpanAssert.assertLogSize(span,0);\n  SpanAssert.assertLayer(span,SpanLayer.RPC_FRAMEWORK);\n  Assert.assertEquals(span.getOperationName(),operationName);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 49,
      "astHeight" : 6
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 88,
        "endColumnNumber" : 53
      },
      "nodeContext" : "SpanAssert.assertOccurException(span,false);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.skywalking.apm.agent.test.tools.SpanAssert"
  }, {
    "nodeContext" : "SpanAssert",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 89,
      "startColumnNumber" : 8,
      "endLineNumber" : 89,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 89,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 41
      },
      "nodeContext" : "SpanAssert.assertLogSize(span,0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 89,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 42
      },
      "nodeContext" : "SpanAssert.assertLogSize(span,0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 309,
        "startLineNumber" : 86,
        "startColumnNumber" : 75,
        "endLineNumber" : 93,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SpanAssert.assertComponent(span,ComponentsDefine.AVRO_CLIENT);\n  SpanAssert.assertOccurException(span,false);\n  SpanAssert.assertLogSize(span,0);\n  SpanAssert.assertLayer(span,SpanLayer.RPC_FRAMEWORK);\n  Assert.assertEquals(span.getOperationName(),operationName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 37,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 380,
        "startLineNumber" : 86,
        "startColumnNumber" : 4,
        "endLineNumber" : 93,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void spanCommonAssert(AbstractSpan span,String operationName){\n  SpanAssert.assertComponent(span,ComponentsDefine.AVRO_CLIENT);\n  SpanAssert.assertOccurException(span,false);\n  SpanAssert.assertLogSize(span,0);\n  SpanAssert.assertLayer(span,SpanLayer.RPC_FRAMEWORK);\n  Assert.assertEquals(span.getOperationName(),operationName);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 49,
      "astHeight" : 6
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 89,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 42
      },
      "nodeContext" : "SpanAssert.assertLogSize(span,0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.skywalking.apm.agent.test.tools.SpanAssert"
  }, {
    "nodeContext" : "SpanAssert",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 90,
      "startColumnNumber" : 8,
      "endLineNumber" : 90,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 90,
        "endColumnNumber" : 61
      },
      "nodeContext" : "SpanAssert.assertLayer(span,SpanLayer.RPC_FRAMEWORK)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 90,
        "endColumnNumber" : 62
      },
      "nodeContext" : "SpanAssert.assertLayer(span,SpanLayer.RPC_FRAMEWORK);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 309,
        "startLineNumber" : 86,
        "startColumnNumber" : 75,
        "endLineNumber" : 93,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SpanAssert.assertComponent(span,ComponentsDefine.AVRO_CLIENT);\n  SpanAssert.assertOccurException(span,false);\n  SpanAssert.assertLogSize(span,0);\n  SpanAssert.assertLayer(span,SpanLayer.RPC_FRAMEWORK);\n  Assert.assertEquals(span.getOperationName(),operationName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 37,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 380,
        "startLineNumber" : 86,
        "startColumnNumber" : 4,
        "endLineNumber" : 93,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void spanCommonAssert(AbstractSpan span,String operationName){\n  SpanAssert.assertComponent(span,ComponentsDefine.AVRO_CLIENT);\n  SpanAssert.assertOccurException(span,false);\n  SpanAssert.assertLogSize(span,0);\n  SpanAssert.assertLayer(span,SpanLayer.RPC_FRAMEWORK);\n  Assert.assertEquals(span.getOperationName(),operationName);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 49,
      "astHeight" : 6
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 90,
        "endColumnNumber" : 62
      },
      "nodeContext" : "SpanAssert.assertLayer(span,SpanLayer.RPC_FRAMEWORK);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.skywalking.apm.agent.test.tools.SpanAssert"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 87,
    "startColumnNumber" : 8,
    "endLineNumber" : 87,
    "endColumnNumber" : 18
  }, {
    "charLength" : 10,
    "startLineNumber" : 88,
    "startColumnNumber" : 8,
    "endLineNumber" : 88,
    "endColumnNumber" : 18
  }, {
    "charLength" : 10,
    "startLineNumber" : 89,
    "startColumnNumber" : 8,
    "endLineNumber" : 89,
    "endColumnNumber" : 18
  }, {
    "charLength" : 10,
    "startLineNumber" : 90,
    "startColumnNumber" : 8,
    "endLineNumber" : 90,
    "endColumnNumber" : 18
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  } ]
}