{
  "id" : 423,
  "expression" : "start",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/graphtheory/DijkstrasShortestPathAdjacencyListWithDHeap.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "start",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 87,
      "startColumnNumber" : 15,
      "endLineNumber" : 87,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 87,
        "startColumnNumber" : 4,
        "endLineNumber" : 87,
        "endColumnNumber" : 26
      },
      "nodeContext" : "ipq.insert(start,0.0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 87,
        "startColumnNumber" : 4,
        "endLineNumber" : 87,
        "endColumnNumber" : 27
      },
      "nodeContext" : "ipq.insert(start,0.0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1856,
        "startLineNumber" : 81,
        "startColumnNumber" : 45,
        "endLineNumber" : 132,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int degree=edgeCount / n;\n  MinIndexedDHeap<Double> ipq=new MinIndexedDHeap<>(degree,n);\n  ipq.insert(start,0.0);\n  dist=new double[n];\n  Arrays.fill(dist,Double.POSITIVE_INFINITY);\n  dist[start]=0.0;\n  boolean[] visited=new boolean[n];\n  prev=new Integer[n];\n  while (!ipq.isEmpty()) {\n    int nodeId=ipq.peekMinKeyIndex();\n    visited[nodeId]=true;\n    double minValue=ipq.pollMinValue();\n    if (minValue > dist[nodeId])     continue;\n    for (    Edge edge : graph.get(nodeId)) {\n      if (visited[edge.to])       continue;\n      double newDist=dist[nodeId] + edge.cost;\n      if (newDist < dist[edge.to]) {\n        prev[edge.to]=nodeId;\n        dist[edge.to]=newDist;\n        if (!ipq.contains(edge.to))         ipq.insert(edge.to,newDist);\n else         ipq.decrease(edge.to,newDist);\n      }\n    }\n    if (nodeId == end)     return dist[end];\n  }\n  return Double.POSITIVE_INFINITY;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 192,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1899,
        "startLineNumber" : 81,
        "startColumnNumber" : 2,
        "endLineNumber" : 132,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public double dijkstra(int start,int end){\n  int degree=edgeCount / n;\n  MinIndexedDHeap<Double> ipq=new MinIndexedDHeap<>(degree,n);\n  ipq.insert(start,0.0);\n  dist=new double[n];\n  Arrays.fill(dist,Double.POSITIVE_INFINITY);\n  dist[start]=0.0;\n  boolean[] visited=new boolean[n];\n  prev=new Integer[n];\n  while (!ipq.isEmpty()) {\n    int nodeId=ipq.peekMinKeyIndex();\n    visited[nodeId]=true;\n    double minValue=ipq.pollMinValue();\n    if (minValue > dist[nodeId])     continue;\n    for (    Edge edge : graph.get(nodeId)) {\n      if (visited[edge.to])       continue;\n      double newDist=dist[nodeId] + edge.cost;\n      if (newDist < dist[edge.to]) {\n        prev[edge.to]=nodeId;\n        dist[edge.to]=newDist;\n        if (!ipq.contains(edge.to))         ipq.insert(edge.to,newDist);\n else         ipq.decrease(edge.to,newDist);\n      }\n    }\n    if (nodeId == end)     return dist[end];\n  }\n  return Double.POSITIVE_INFINITY;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 202,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 87,
        "startColumnNumber" : 4,
        "endLineNumber" : 87,
        "endColumnNumber" : 27
      },
      "nodeContext" : "ipq.insert(start,0.0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "start",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 92,
      "startColumnNumber" : 9,
      "endLineNumber" : 92,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 92,
        "startColumnNumber" : 4,
        "endLineNumber" : 92,
        "endColumnNumber" : 15
      },
      "nodeContext" : "dist[start]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 92,
        "startColumnNumber" : 4,
        "endLineNumber" : 92,
        "endColumnNumber" : 21
      },
      "nodeContext" : "dist[start]=0.0",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 92,
        "startColumnNumber" : 4,
        "endLineNumber" : 92,
        "endColumnNumber" : 22
      },
      "nodeContext" : "dist[start]=0.0;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1856,
        "startLineNumber" : 81,
        "startColumnNumber" : 45,
        "endLineNumber" : 132,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int degree=edgeCount / n;\n  MinIndexedDHeap<Double> ipq=new MinIndexedDHeap<>(degree,n);\n  ipq.insert(start,0.0);\n  dist=new double[n];\n  Arrays.fill(dist,Double.POSITIVE_INFINITY);\n  dist[start]=0.0;\n  boolean[] visited=new boolean[n];\n  prev=new Integer[n];\n  while (!ipq.isEmpty()) {\n    int nodeId=ipq.peekMinKeyIndex();\n    visited[nodeId]=true;\n    double minValue=ipq.pollMinValue();\n    if (minValue > dist[nodeId])     continue;\n    for (    Edge edge : graph.get(nodeId)) {\n      if (visited[edge.to])       continue;\n      double newDist=dist[nodeId] + edge.cost;\n      if (newDist < dist[edge.to]) {\n        prev[edge.to]=nodeId;\n        dist[edge.to]=newDist;\n        if (!ipq.contains(edge.to))         ipq.insert(edge.to,newDist);\n else         ipq.decrease(edge.to,newDist);\n      }\n    }\n    if (nodeId == end)     return dist[end];\n  }\n  return Double.POSITIVE_INFINITY;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 192,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1899,
        "startLineNumber" : 81,
        "startColumnNumber" : 2,
        "endLineNumber" : 132,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public double dijkstra(int start,int end){\n  int degree=edgeCount / n;\n  MinIndexedDHeap<Double> ipq=new MinIndexedDHeap<>(degree,n);\n  ipq.insert(start,0.0);\n  dist=new double[n];\n  Arrays.fill(dist,Double.POSITIVE_INFINITY);\n  dist[start]=0.0;\n  boolean[] visited=new boolean[n];\n  prev=new Integer[n];\n  while (!ipq.isEmpty()) {\n    int nodeId=ipq.peekMinKeyIndex();\n    visited[nodeId]=true;\n    double minValue=ipq.pollMinValue();\n    if (minValue > dist[nodeId])     continue;\n    for (    Edge edge : graph.get(nodeId)) {\n      if (visited[edge.to])       continue;\n      double newDist=dist[nodeId] + edge.cost;\n      if (newDist < dist[edge.to]) {\n        prev[edge.to]=nodeId;\n        dist[edge.to]=newDist;\n        if (!ipq.contains(edge.to))         ipq.insert(edge.to,newDist);\n else         ipq.decrease(edge.to,newDist);\n      }\n    }\n    if (nodeId == end)     return dist[end];\n  }\n  return Double.POSITIVE_INFINITY;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 202,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 92,
        "startColumnNumber" : 4,
        "endLineNumber" : 92,
        "endColumnNumber" : 22
      },
      "nodeContext" : "dist[start]=0.0;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 87,
    "startColumnNumber" : 15,
    "endLineNumber" : 87,
    "endColumnNumber" : 20
  }, {
    "charLength" : 5,
    "startLineNumber" : 92,
    "startColumnNumber" : 9,
    "endLineNumber" : 92,
    "endColumnNumber" : 14
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}