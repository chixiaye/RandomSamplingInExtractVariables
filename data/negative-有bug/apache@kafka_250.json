{
  "id" : 250,
  "expression" : "calledUncaughtExceptionHandler2.get()",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/streams/src/test/java/org/apache/kafka/streams/processor/internals/HandlingSourceTopicDeletionIntegrationTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "calledUncaughtExceptionHandler2.get()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 37,
      "startLineNumber" : 130,
      "startColumnNumber" : 19,
      "endLineNumber" : 130,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 130,
        "startColumnNumber" : 8,
        "endLineNumber" : 130,
        "endColumnNumber" : 67
      },
      "nodeContext" : "assertThat(calledUncaughtExceptionHandler2.get(),is(true))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 130,
        "startColumnNumber" : 8,
        "endLineNumber" : 130,
        "endColumnNumber" : 68
      },
      "nodeContext" : "assertThat(calledUncaughtExceptionHandler2.get(),is(true));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2596,
        "startLineNumber" : 83,
        "startColumnNumber" : 86,
        "endLineNumber" : 131,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final StreamsBuilder builder=new StreamsBuilder();\n  builder.stream(INPUT_TOPIC,Consumed.with(Serdes.Integer(),Serdes.String())).to(OUTPUT_TOPIC,Produced.with(Serdes.Integer(),Serdes.String()));\n  final String safeTestName=safeUniqueTestName(getClass(),testName);\n  final String appId=\"app-\" + safeTestName;\n  final Properties streamsConfiguration=new Properties();\n  streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG,appId);\n  streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG,CLUSTER.bootstrapServers());\n  streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG,Serdes.Integer().getClass());\n  streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG,Serdes.String().getClass());\n  streamsConfiguration.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG,NUM_THREADS);\n  streamsConfiguration.put(StreamsConfig.METADATA_MAX_AGE_CONFIG,2000);\n  final Topology topology=builder.build();\n  final KafkaStreams kafkaStreams1=new KafkaStreams(topology,streamsConfiguration);\n  final AtomicBoolean calledUncaughtExceptionHandler1=new AtomicBoolean(false);\n  kafkaStreams1.setUncaughtExceptionHandler(exception -> {\n    calledUncaughtExceptionHandler1.set(true);\n    return StreamsUncaughtExceptionHandler.StreamThreadExceptionResponse.SHUTDOWN_CLIENT;\n  }\n);\n  kafkaStreams1.start();\n  final KafkaStreams kafkaStreams2=new KafkaStreams(topology,streamsConfiguration);\n  final AtomicBoolean calledUncaughtExceptionHandler2=new AtomicBoolean(false);\n  kafkaStreams2.setUncaughtExceptionHandler(exception -> {\n    calledUncaughtExceptionHandler2.set(true);\n    return StreamsUncaughtExceptionHandler.StreamThreadExceptionResponse.SHUTDOWN_CLIENT;\n  }\n);\n  kafkaStreams2.start();\n  TestUtils.waitForCondition(() -> kafkaStreams1.state() == State.RUNNING && kafkaStreams2.state() == State.RUNNING,TIMEOUT,() -> \"Kafka Streams clients did not reach state RUNNING\");\n  CLUSTER.deleteTopicAndWait(INPUT_TOPIC);\n  TestUtils.waitForCondition(() -> kafkaStreams1.state() == State.ERROR && kafkaStreams2.state() == State.ERROR,TIMEOUT,() -> \"Kafka Streams clients did not reach state ERROR\");\n  assertThat(calledUncaughtExceptionHandler1.get(),is(true));\n  assertThat(calledUncaughtExceptionHandler2.get(),is(true));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 289,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2688,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 131,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void shouldThrowErrorAfterSourceTopicDeleted() throws InterruptedException {\n  final StreamsBuilder builder=new StreamsBuilder();\n  builder.stream(INPUT_TOPIC,Consumed.with(Serdes.Integer(),Serdes.String())).to(OUTPUT_TOPIC,Produced.with(Serdes.Integer(),Serdes.String()));\n  final String safeTestName=safeUniqueTestName(getClass(),testName);\n  final String appId=\"app-\" + safeTestName;\n  final Properties streamsConfiguration=new Properties();\n  streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG,appId);\n  streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG,CLUSTER.bootstrapServers());\n  streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG,Serdes.Integer().getClass());\n  streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG,Serdes.String().getClass());\n  streamsConfiguration.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG,NUM_THREADS);\n  streamsConfiguration.put(StreamsConfig.METADATA_MAX_AGE_CONFIG,2000);\n  final Topology topology=builder.build();\n  final KafkaStreams kafkaStreams1=new KafkaStreams(topology,streamsConfiguration);\n  final AtomicBoolean calledUncaughtExceptionHandler1=new AtomicBoolean(false);\n  kafkaStreams1.setUncaughtExceptionHandler(exception -> {\n    calledUncaughtExceptionHandler1.set(true);\n    return StreamsUncaughtExceptionHandler.StreamThreadExceptionResponse.SHUTDOWN_CLIENT;\n  }\n);\n  kafkaStreams1.start();\n  final KafkaStreams kafkaStreams2=new KafkaStreams(topology,streamsConfiguration);\n  final AtomicBoolean calledUncaughtExceptionHandler2=new AtomicBoolean(false);\n  kafkaStreams2.setUncaughtExceptionHandler(exception -> {\n    calledUncaughtExceptionHandler2.set(true);\n    return StreamsUncaughtExceptionHandler.StreamThreadExceptionResponse.SHUTDOWN_CLIENT;\n  }\n);\n  kafkaStreams2.start();\n  TestUtils.waitForCondition(() -> kafkaStreams1.state() == State.RUNNING && kafkaStreams2.state() == State.RUNNING,TIMEOUT,() -> \"Kafka Streams clients did not reach state RUNNING\");\n  CLUSTER.deleteTopicAndWait(INPUT_TOPIC);\n  TestUtils.waitForCondition(() -> kafkaStreams1.state() == State.ERROR && kafkaStreams2.state() == State.ERROR,TIMEOUT,() -> \"Kafka Streams clients did not reach state ERROR\");\n  assertThat(calledUncaughtExceptionHandler1.get(),is(true));\n  assertThat(calledUncaughtExceptionHandler2.get(),is(true));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 297,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 130,
        "startColumnNumber" : 8,
        "endLineNumber" : 130,
        "endColumnNumber" : 68
      },
      "nodeContext" : "assertThat(calledUncaughtExceptionHandler2.get(),is(true));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 37,
    "startLineNumber" : 130,
    "startColumnNumber" : 19,
    "endLineNumber" : 130,
    "endColumnNumber" : 56
  } ],
  "layoutRelationDataList" : [ ]
}