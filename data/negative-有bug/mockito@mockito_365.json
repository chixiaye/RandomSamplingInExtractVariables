{
  "id" : 365,
  "expression" : "fieldOwnedBy",
  "projectName" : "mockito@mockito",
  "commitID" : "7f036eb9ed79444adcec3a6c635870222b109e50",
  "filePath" : "/src/main/java/org/mockito/internal/configuration/injection/MockInjectionStrategy.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "fieldOwnedBy",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 67,
      "startColumnNumber" : 38,
      "endLineNumber" : 67,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 67,
        "startColumnNumber" : 12,
        "endLineNumber" : 67,
        "endColumnNumber" : 67
      },
      "nodeContext" : "processInjection(onField,fieldOwnedBy,mockCandidates)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 67,
        "startColumnNumber" : 8,
        "endLineNumber" : 69,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (processInjection(onField,fieldOwnedBy,mockCandidates)) {\n  return true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 200,
        "startLineNumber" : 66,
        "startColumnNumber" : 91,
        "endLineNumber" : 71,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (processInjection(onField,fieldOwnedBy,mockCandidates)) {\n    return true;\n  }\n  return relayProcessToNextStrategy(onField,fieldOwnedBy,mockCandidates);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1043,
        "startLineNumber" : 48,
        "startColumnNumber" : 4,
        "endLineNumber" : 71,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Actually inject mockCandidates on field. <p> Actual algorithm is defined in the implementations of  {@link #processInjection(Field,Object,Set)}. However if injection occurred successfully, the process should return <code>true</code>, and <code>false</code> otherwise. </p> <p> The code takes care of calling the next strategy if available and if of course if required </p>\n * @param onField Field needing injection.\n * @param fieldOwnedBy The owning instance of the field.\n * @param mockCandidates A set of mock candidate, that might be injected.\n * @return <code>true</code> if successful, <code>false</code> otherwise.\n */\npublic boolean process(Field onField,Object fieldOwnedBy,Set<Object> mockCandidates){\n  if (processInjection(onField,fieldOwnedBy,mockCandidates)) {\n    return true;\n  }\n  return relayProcessToNextStrategy(onField,fieldOwnedBy,mockCandidates);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 36,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 67,
        "startColumnNumber" : 12,
        "endLineNumber" : 67,
        "endColumnNumber" : 67
      },
      "nodeContext" : "processInjection(onField,fieldOwnedBy,mockCandidates)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "fieldOwnedBy",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 70,
      "startColumnNumber" : 51,
      "endLineNumber" : 70,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 70,
        "startColumnNumber" : 15,
        "endLineNumber" : 70,
        "endColumnNumber" : 80
      },
      "nodeContext" : "relayProcessToNextStrategy(onField,fieldOwnedBy,mockCandidates)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 70,
        "endColumnNumber" : 81
      },
      "nodeContext" : "return relayProcessToNextStrategy(onField,fieldOwnedBy,mockCandidates);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 200,
        "startLineNumber" : 66,
        "startColumnNumber" : 91,
        "endLineNumber" : 71,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (processInjection(onField,fieldOwnedBy,mockCandidates)) {\n    return true;\n  }\n  return relayProcessToNextStrategy(onField,fieldOwnedBy,mockCandidates);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1043,
        "startLineNumber" : 48,
        "startColumnNumber" : 4,
        "endLineNumber" : 71,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Actually inject mockCandidates on field. <p> Actual algorithm is defined in the implementations of  {@link #processInjection(Field,Object,Set)}. However if injection occurred successfully, the process should return <code>true</code>, and <code>false</code> otherwise. </p> <p> The code takes care of calling the next strategy if available and if of course if required </p>\n * @param onField Field needing injection.\n * @param fieldOwnedBy The owning instance of the field.\n * @param mockCandidates A set of mock candidate, that might be injected.\n * @return <code>true</code> if successful, <code>false</code> otherwise.\n */\npublic boolean process(Field onField,Object fieldOwnedBy,Set<Object> mockCandidates){\n  if (processInjection(onField,fieldOwnedBy,mockCandidates)) {\n    return true;\n  }\n  return relayProcessToNextStrategy(onField,fieldOwnedBy,mockCandidates);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 36,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 70,
        "endColumnNumber" : 81
      },
      "nodeContext" : "return relayProcessToNextStrategy(onField,fieldOwnedBy,mockCandidates);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 67,
    "startColumnNumber" : 38,
    "endLineNumber" : 67,
    "endColumnNumber" : 50
  }, {
    "charLength" : 12,
    "startLineNumber" : 70,
    "startColumnNumber" : 51,
    "endLineNumber" : 70,
    "endColumnNumber" : 63
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}