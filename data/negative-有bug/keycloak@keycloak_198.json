{
  "id" : 198,
  "expression" : "new SAML11SubjectTypeChoice(nameID)",
  "projectName" : "keycloak@keycloak",
  "commitID" : "aacae9b9acb0fbedc49d4f88c9fbd7aa11922dce",
  "filePath" : "/saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/SAML11SubjectParser.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new SAML11SubjectTypeChoice(nameID)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 35,
      "startLineNumber" : 91,
      "startColumnNumber" : 52,
      "endLineNumber" : 91,
      "endColumnNumber" : 87
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 91,
        "startColumnNumber" : 40,
        "endLineNumber" : 91,
        "endColumnNumber" : 87
      },
      "nodeContext" : "subChoice=new SAML11SubjectTypeChoice(nameID)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 91,
        "startColumnNumber" : 16,
        "endLineNumber" : 91,
        "endColumnNumber" : 88
      },
      "nodeContext" : "SAML11SubjectTypeChoice subChoice=new SAML11SubjectTypeChoice(nameID);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 919,
        "startLineNumber" : 77,
        "startColumnNumber" : 71,
        "endLineNumber" : 93,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  peekedElement=StaxParserUtil.getNextStartElement(xmlEventReader);\n  String val=StaxParserUtil.getElementText(xmlEventReader);\n  SAML11NameIdentifierType nameID=new SAML11NameIdentifierType(val);\n  Attribute formatAtt=peekedElement.getAttributeByName(new QName(SAML11Constants.FORMAT));\n  if (formatAtt != null) {\n    nameID.setFormat(URI.create(StaxParserUtil.getAttributeValue(formatAtt)));\n  }\n  Attribute nameQAtt=peekedElement.getAttributeByName(new QName(SAML11Constants.NAME_QUALIFIER));\n  if (nameQAtt != null) {\n    nameID.setNameQualifier(StaxParserUtil.getAttributeValue(nameQAtt));\n  }\n  SAML11SubjectTypeChoice subChoice=new SAML11SubjectTypeChoice(nameID);\n  subject.setChoice(subChoice);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 97,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1393,
        "startLineNumber" : 77,
        "startColumnNumber" : 12,
        "endLineNumber" : 98,
        "endColumnNumber" : 80
      },
      "nodeContext" : "if (SAML11Constants.NAME_IDENTIFIER.equalsIgnoreCase(tag)) {\n  peekedElement=StaxParserUtil.getNextStartElement(xmlEventReader);\n  String val=StaxParserUtil.getElementText(xmlEventReader);\n  SAML11NameIdentifierType nameID=new SAML11NameIdentifierType(val);\n  Attribute formatAtt=peekedElement.getAttributeByName(new QName(SAML11Constants.FORMAT));\n  if (formatAtt != null) {\n    nameID.setFormat(URI.create(StaxParserUtil.getAttributeValue(formatAtt)));\n  }\n  Attribute nameQAtt=peekedElement.getAttributeByName(new QName(SAML11Constants.NAME_QUALIFIER));\n  if (nameQAtt != null) {\n    nameID.setNameQualifier(StaxParserUtil.getAttributeValue(nameQAtt));\n  }\n  SAML11SubjectTypeChoice subChoice=new SAML11SubjectTypeChoice(nameID);\n  subject.setChoice(subChoice);\n}\n else if (JBossSAMLConstants.SUBJECT_CONFIRMATION.get().equalsIgnoreCase(tag)) {\n  SAML11SubjectConfirmationType subjectConfirmationType=SAML11ParserUtil.parseSAML11SubjectConfirmation(xmlEventReader);\n  subject.setSubjectConfirmation(subjectConfirmationType);\n}\n else throw logger.parserUnknownTag(tag,peekedElement.getLocation());\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 136,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 2193,
        "startLineNumber" : 60,
        "startColumnNumber" : 41,
        "endLineNumber" : 99,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  XMLEvent xmlEvent=StaxParserUtil.peek(xmlEventReader);\n  if (xmlEvent instanceof EndElement) {\n    EndElement endElement=(EndElement)xmlEvent;\n    if (StaxParserUtil.matches(endElement,JBossSAMLConstants.SUBJECT.get())) {\n      endElement=StaxParserUtil.getNextEndElement(xmlEventReader);\n      break;\n    }\n else     throw logger.parserUnknownEndElement(StaxParserUtil.getElementName(endElement),xmlEvent.getLocation());\n  }\n  StartElement peekedElement=StaxParserUtil.peekNextStartElement(xmlEventReader);\n  if (peekedElement == null)   break;\n  String tag=StaxParserUtil.getElementName(peekedElement);\n  if (SAML11Constants.NAME_IDENTIFIER.equalsIgnoreCase(tag)) {\n    peekedElement=StaxParserUtil.getNextStartElement(xmlEventReader);\n    String val=StaxParserUtil.getElementText(xmlEventReader);\n    SAML11NameIdentifierType nameID=new SAML11NameIdentifierType(val);\n    Attribute formatAtt=peekedElement.getAttributeByName(new QName(SAML11Constants.FORMAT));\n    if (formatAtt != null) {\n      nameID.setFormat(URI.create(StaxParserUtil.getAttributeValue(formatAtt)));\n    }\n    Attribute nameQAtt=peekedElement.getAttributeByName(new QName(SAML11Constants.NAME_QUALIFIER));\n    if (nameQAtt != null) {\n      nameID.setNameQualifier(StaxParserUtil.getAttributeValue(nameQAtt));\n    }\n    SAML11SubjectTypeChoice subChoice=new SAML11SubjectTypeChoice(nameID);\n    subject.setChoice(subChoice);\n  }\n else   if (JBossSAMLConstants.SUBJECT_CONFIRMATION.get().equalsIgnoreCase(tag)) {\n    SAML11SubjectConfirmationType subjectConfirmationType=SAML11ParserUtil.parseSAML11SubjectConfirmation(xmlEventReader);\n    subject.setSubjectConfirmation(subjectConfirmationType);\n  }\n else   throw logger.parserUnknownTag(tag,peekedElement.getLocation());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 214,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2226,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 99,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (xmlEventReader.hasNext()) {\n  XMLEvent xmlEvent=StaxParserUtil.peek(xmlEventReader);\n  if (xmlEvent instanceof EndElement) {\n    EndElement endElement=(EndElement)xmlEvent;\n    if (StaxParserUtil.matches(endElement,JBossSAMLConstants.SUBJECT.get())) {\n      endElement=StaxParserUtil.getNextEndElement(xmlEventReader);\n      break;\n    }\n else     throw logger.parserUnknownEndElement(StaxParserUtil.getElementName(endElement),xmlEvent.getLocation());\n  }\n  StartElement peekedElement=StaxParserUtil.peekNextStartElement(xmlEventReader);\n  if (peekedElement == null)   break;\n  String tag=StaxParserUtil.getElementName(peekedElement);\n  if (SAML11Constants.NAME_IDENTIFIER.equalsIgnoreCase(tag)) {\n    peekedElement=StaxParserUtil.getNextStartElement(xmlEventReader);\n    String val=StaxParserUtil.getElementText(xmlEventReader);\n    SAML11NameIdentifierType nameID=new SAML11NameIdentifierType(val);\n    Attribute formatAtt=peekedElement.getAttributeByName(new QName(SAML11Constants.FORMAT));\n    if (formatAtt != null) {\n      nameID.setFormat(URI.create(StaxParserUtil.getAttributeValue(formatAtt)));\n    }\n    Attribute nameQAtt=peekedElement.getAttributeByName(new QName(SAML11Constants.NAME_QUALIFIER));\n    if (nameQAtt != null) {\n      nameID.setNameQualifier(StaxParserUtil.getAttributeValue(nameQAtt));\n    }\n    SAML11SubjectTypeChoice subChoice=new SAML11SubjectTypeChoice(nameID);\n    subject.setChoice(subChoice);\n  }\n else   if (JBossSAMLConstants.SUBJECT_CONFIRMATION.get().equalsIgnoreCase(tag)) {\n    SAML11SubjectConfirmationType subjectConfirmationType=SAML11ParserUtil.parseSAML11SubjectConfirmation(xmlEventReader);\n    subject.setSubjectConfirmation(subjectConfirmationType);\n  }\n else   throw logger.parserUnknownTag(tag,peekedElement.getLocation());\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 218,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2416,
        "startLineNumber" : 54,
        "startColumnNumber" : 79,
        "endLineNumber" : 101,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  StaxParserUtil.getNextEvent(xmlEventReader);\n  SAML11SubjectType subject=new SAML11SubjectType();\n  while (xmlEventReader.hasNext()) {\n    XMLEvent xmlEvent=StaxParserUtil.peek(xmlEventReader);\n    if (xmlEvent instanceof EndElement) {\n      EndElement endElement=(EndElement)xmlEvent;\n      if (StaxParserUtil.matches(endElement,JBossSAMLConstants.SUBJECT.get())) {\n        endElement=StaxParserUtil.getNextEndElement(xmlEventReader);\n        break;\n      }\n else       throw logger.parserUnknownEndElement(StaxParserUtil.getElementName(endElement),xmlEvent.getLocation());\n    }\n    StartElement peekedElement=StaxParserUtil.peekNextStartElement(xmlEventReader);\n    if (peekedElement == null)     break;\n    String tag=StaxParserUtil.getElementName(peekedElement);\n    if (SAML11Constants.NAME_IDENTIFIER.equalsIgnoreCase(tag)) {\n      peekedElement=StaxParserUtil.getNextStartElement(xmlEventReader);\n      String val=StaxParserUtil.getElementText(xmlEventReader);\n      SAML11NameIdentifierType nameID=new SAML11NameIdentifierType(val);\n      Attribute formatAtt=peekedElement.getAttributeByName(new QName(SAML11Constants.FORMAT));\n      if (formatAtt != null) {\n        nameID.setFormat(URI.create(StaxParserUtil.getAttributeValue(formatAtt)));\n      }\n      Attribute nameQAtt=peekedElement.getAttributeByName(new QName(SAML11Constants.NAME_QUALIFIER));\n      if (nameQAtt != null) {\n        nameID.setNameQualifier(StaxParserUtil.getAttributeValue(nameQAtt));\n      }\n      SAML11SubjectTypeChoice subChoice=new SAML11SubjectTypeChoice(nameID);\n      subject.setChoice(subChoice);\n    }\n else     if (JBossSAMLConstants.SUBJECT_CONFIRMATION.get().equalsIgnoreCase(tag)) {\n      SAML11SubjectConfirmationType subjectConfirmationType=SAML11ParserUtil.parseSAML11SubjectConfirmation(xmlEventReader);\n      subject.setSubjectConfirmation(subjectConfirmationType);\n    }\n else     throw logger.parserUnknownTag(tag,peekedElement.getLocation());\n  }\n  return subject;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 234,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2572,
        "startLineNumber" : 51,
        "startColumnNumber" : 4,
        "endLineNumber" : 101,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * @see {@link ParserNamespaceSupport#parse(XMLEventReader)}\n */\npublic Object parse(XMLEventReader xmlEventReader) throws ParsingException {\n  StaxParserUtil.getNextEvent(xmlEventReader);\n  SAML11SubjectType subject=new SAML11SubjectType();\n  while (xmlEventReader.hasNext()) {\n    XMLEvent xmlEvent=StaxParserUtil.peek(xmlEventReader);\n    if (xmlEvent instanceof EndElement) {\n      EndElement endElement=(EndElement)xmlEvent;\n      if (StaxParserUtil.matches(endElement,JBossSAMLConstants.SUBJECT.get())) {\n        endElement=StaxParserUtil.getNextEndElement(xmlEventReader);\n        break;\n      }\n else       throw logger.parserUnknownEndElement(StaxParserUtil.getElementName(endElement),xmlEvent.getLocation());\n    }\n    StartElement peekedElement=StaxParserUtil.peekNextStartElement(xmlEventReader);\n    if (peekedElement == null)     break;\n    String tag=StaxParserUtil.getElementName(peekedElement);\n    if (SAML11Constants.NAME_IDENTIFIER.equalsIgnoreCase(tag)) {\n      peekedElement=StaxParserUtil.getNextStartElement(xmlEventReader);\n      String val=StaxParserUtil.getElementText(xmlEventReader);\n      SAML11NameIdentifierType nameID=new SAML11NameIdentifierType(val);\n      Attribute formatAtt=peekedElement.getAttributeByName(new QName(SAML11Constants.FORMAT));\n      if (formatAtt != null) {\n        nameID.setFormat(URI.create(StaxParserUtil.getAttributeValue(formatAtt)));\n      }\n      Attribute nameQAtt=peekedElement.getAttributeByName(new QName(SAML11Constants.NAME_QUALIFIER));\n      if (nameQAtt != null) {\n        nameID.setNameQualifier(StaxParserUtil.getAttributeValue(nameQAtt));\n      }\n      SAML11SubjectTypeChoice subChoice=new SAML11SubjectTypeChoice(nameID);\n      subject.setChoice(subChoice);\n    }\n else     if (JBossSAMLConstants.SUBJECT_CONFIRMATION.get().equalsIgnoreCase(tag)) {\n      SAML11SubjectConfirmationType subjectConfirmationType=SAML11ParserUtil.parseSAML11SubjectConfirmation(xmlEventReader);\n      subject.setSubjectConfirmation(subjectConfirmationType);\n    }\n else     throw logger.parserUnknownTag(tag,peekedElement.getLocation());\n  }\n  return subject;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 246,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 91,
        "startColumnNumber" : 16,
        "endLineNumber" : 91,
        "endColumnNumber" : 88
      },
      "nodeContext" : "SAML11SubjectTypeChoice subChoice=new SAML11SubjectTypeChoice(nameID);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "org.keycloak.dom.saml.v1.assertion.SAML11SubjectType.SAML11SubjectTypeChoice"
  } ],
  "positionList" : [ {
    "charLength" : 35,
    "startLineNumber" : 91,
    "startColumnNumber" : 52,
    "endLineNumber" : 91,
    "endColumnNumber" : 87
  } ],
  "layoutRelationDataList" : [ ]
}