{
  "id" : 5,
  "expression" : "bytes[1] & 0xff",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-core/src/main/java/org/apache/flink/core/io/SimpleVersionedSerialization.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "bytes[1] & 0xff",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 216,
      "startColumnNumber" : 28,
      "endLineNumber" : 216,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 216,
        "startColumnNumber" : 27,
        "endLineNumber" : 216,
        "endColumnNumber" : 44
      },
      "nodeContext" : "(bytes[1] & 0xff)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 216,
        "startColumnNumber" : 27,
        "endLineNumber" : 216,
        "endColumnNumber" : 50
      },
      "nodeContext" : "(bytes[1] & 0xff) << 16",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 216,
        "startColumnNumber" : 26,
        "endLineNumber" : 216,
        "endColumnNumber" : 51
      },
      "nodeContext" : "((bytes[1] & 0xff) << 16)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 172,
        "startLineNumber" : 215,
        "startColumnNumber" : 16,
        "endLineNumber" : 218,
        "endColumnNumber" : 43
      },
      "nodeContext" : "((bytes[0] & 0xff) << 24) | ((bytes[1] & 0xff) << 16) | ((bytes[2] & 0xff) << 8)| (bytes[3] & 0xff)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 34,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 198,
        "startLineNumber" : 214,
        "startColumnNumber" : 18,
        "endLineNumber" : 218,
        "endColumnNumber" : 43
      },
      "nodeContext" : "version=((bytes[0] & 0xff) << 24) | ((bytes[1] & 0xff) << 16) | ((bytes[2] & 0xff) << 8)| (bytes[3] & 0xff)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 36,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 209,
        "startLineNumber" : 214,
        "startColumnNumber" : 8,
        "endLineNumber" : 218,
        "endColumnNumber" : 44
      },
      "nodeContext" : "final int version=((bytes[0] & 0xff) << 24) | ((bytes[1] & 0xff) << 16) | ((bytes[2] & 0xff) << 8)| (bytes[3] & 0xff);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 39,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1058,
        "startLineNumber" : 208,
        "startColumnNumber" : 86,
        "endLineNumber" : 235,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  checkNotNull(serializer,\"serializer\");\n  checkNotNull(bytes,\"bytes\");\n  checkArgument(bytes.length >= 8,\"byte array below minimum length (8 bytes)\");\n  final byte[] dataOnly=Arrays.copyOfRange(bytes,8,bytes.length);\n  final int version=((bytes[0] & 0xff) << 24) | ((bytes[1] & 0xff) << 16) | ((bytes[2] & 0xff) << 8)| (bytes[3] & 0xff);\n  final int length=((bytes[4] & 0xff) << 24) | ((bytes[5] & 0xff) << 16) | ((bytes[6] & 0xff) << 8)| (bytes[7] & 0xff);\n  if (length == dataOnly.length) {\n    return serializer.deserialize(version,dataOnly);\n  }\n else {\n    throw new IOException(\"Corrupt data, conflicting lengths. Length fields: \" + length + \", data: \"+ dataOnly.length);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 138,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1815,
        "startLineNumber" : 195,
        "startColumnNumber" : 4,
        "endLineNumber" : 235,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Deserializes the version and datum from a byte array. The first four bytes will be read as the version, in <i>big-endian</i> encoding. The remaining bytes will be passed to the serializer for deserialization, via  {@link SimpleVersionedSerializer#deserialize(int,byte[])}.\n * @param serializer The serializer to deserialize the datum with.\n * @param bytes The bytes to deserialize from.\n * @return The deserialized datum.\n * @throws IOException Exceptions from the {@link SimpleVersionedSerializer#deserialize(int,byte[])} method are forwarded.\n */\npublic static <T>T readVersionAndDeSerialize(SimpleVersionedSerializer<T> serializer,byte[] bytes) throws IOException {\n  checkNotNull(serializer,\"serializer\");\n  checkNotNull(bytes,\"bytes\");\n  checkArgument(bytes.length >= 8,\"byte array below minimum length (8 bytes)\");\n  final byte[] dataOnly=Arrays.copyOfRange(bytes,8,bytes.length);\n  final int version=((bytes[0] & 0xff) << 24) | ((bytes[1] & 0xff) << 16) | ((bytes[2] & 0xff) << 8)| (bytes[3] & 0xff);\n  final int length=((bytes[4] & 0xff) << 24) | ((bytes[5] & 0xff) << 16) | ((bytes[6] & 0xff) << 8)| (bytes[7] & 0xff);\n  if (length == dataOnly.length) {\n    return serializer.deserialize(version,dataOnly);\n  }\n else {\n    throw new IOException(\"Corrupt data, conflicting lengths. Length fields: \" + length + \", data: \"+ dataOnly.length);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 161,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 216,
        "startColumnNumber" : 26,
        "endLineNumber" : 216,
        "endColumnNumber" : 51
      },
      "nodeContext" : "((bytes[1] & 0xff) << 16)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 9,
      "astHeight" : 6
    },
    "tokenLength" : 4,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 216,
    "startColumnNumber" : 28,
    "endLineNumber" : 216,
    "endColumnNumber" : 43
  } ],
  "layoutRelationDataList" : [ ]
}