{
  "id" : 100,
  "expression" : "TimeConversions",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-io/kinesis/src/main/java/org/apache/pulsar/io/kinesis/json/JsonConverter.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "TimeConversions",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 152,
      "startColumnNumber" : 20,
      "endLineNumber" : 152,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 152,
        "startColumnNumber" : 20,
        "endLineNumber" : 152,
        "endColumnNumber" : 50
      },
      "nodeContext" : "TimeConversions.DateConversion",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,type]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 152,
        "startColumnNumber" : 20,
        "endLineNumber" : 152,
        "endColumnNumber" : 50
      },
      "nodeContext" : "TimeConversions.DateConversion",
      "nodeType" : "SimpleType",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 152,
        "startColumnNumber" : 16,
        "endLineNumber" : 152,
        "endColumnNumber" : 52
      },
      "nodeContext" : "new TimeConversions.DateConversion()",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 555,
        "startLineNumber" : 151,
        "startColumnNumber" : 42,
        "endLineNumber" : 162,
        "endColumnNumber" : 9
      },
      "nodeContext" : "new LogicalTypeConverter<LocalDate>(new TimeConversions.DateConversion()){\n  @Override JsonNode toJson(  Schema schema,  Object value){\n    if (!(value instanceof Integer)) {\n      throw new IllegalArgumentException(\"Invalid type for date, expected Integer but was \" + value.getClass());\n    }\n    Integer daysFromEpoch=(Integer)value;\n    return jsonNodeFactory.numberNode(daysFromEpoch);\n  }\n}\n",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 58,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 590,
        "startLineNumber" : 151,
        "startColumnNumber" : 8,
        "endLineNumber" : 162,
        "endColumnNumber" : 10
      },
      "nodeContext" : "logicalTypeConverters.put(\"date\",new LogicalTypeConverter<LocalDate>(new TimeConversions.DateConversion()){\n  @Override JsonNode toJson(  Schema schema,  Object value){\n    if (!(value instanceof Integer)) {\n      throw new IllegalArgumentException(\"Invalid type for date, expected Integer but was \" + value.getClass());\n    }\n    Integer daysFromEpoch=(Integer)value;\n    return jsonNodeFactory.numberNode(daysFromEpoch);\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 62,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 591,
        "startLineNumber" : 151,
        "startColumnNumber" : 8,
        "endLineNumber" : 162,
        "endColumnNumber" : 11
      },
      "nodeContext" : "logicalTypeConverters.put(\"date\",new LogicalTypeConverter<LocalDate>(new TimeConversions.DateConversion()){\n  @Override JsonNode toJson(  Schema schema,  Object value){\n    if (!(value instanceof Integer)) {\n      throw new IllegalArgumentException(\"Invalid type for date, expected Integer but was \" + value.getClass());\n    }\n    Integer daysFromEpoch=(Integer)value;\n    return jsonNodeFactory.numberNode(daysFromEpoch);\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 63,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Initializer,body]",
      "nodePosition" : {
        "charLength" : 3998,
        "startLineNumber" : 138,
        "startColumnNumber" : 11,
        "endLineNumber" : 218,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  logicalTypeConverters.put(\"decimal\",new LogicalTypeConverter<BigDecimal>(new Conversions.DecimalConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof BigDecimal)) {\n        throw new IllegalArgumentException(\"Invalid type for Decimal, expected BigDecimal but was \" + value.getClass());\n      }\n      BigDecimal decimal=(BigDecimal)value;\n      return jsonNodeFactory.numberNode(decimal);\n    }\n  }\n);\n  logicalTypeConverters.put(\"date\",new LogicalTypeConverter<LocalDate>(new TimeConversions.DateConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Integer)) {\n        throw new IllegalArgumentException(\"Invalid type for date, expected Integer but was \" + value.getClass());\n      }\n      Integer daysFromEpoch=(Integer)value;\n      return jsonNodeFactory.numberNode(daysFromEpoch);\n    }\n  }\n);\n  logicalTypeConverters.put(\"time-millis\",new LogicalTypeConverter<LocalTime>(new TimeConversions.TimeMillisConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Integer)) {\n        throw new IllegalArgumentException(\"Invalid type for time-millis, expected Integer but was \" + value.getClass());\n      }\n      Integer timeMillis=(Integer)value;\n      return jsonNodeFactory.numberNode(timeMillis);\n    }\n  }\n);\n  logicalTypeConverters.put(\"time-micros\",new LogicalTypeConverter<LocalTime>(new TimeConversions.TimeMicrosConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Long)) {\n        throw new IllegalArgumentException(\"Invalid type for time-micros, expected Long but was \" + value.getClass());\n      }\n      Long timeMicro=(Long)value;\n      return jsonNodeFactory.numberNode(timeMicro);\n    }\n  }\n);\n  logicalTypeConverters.put(\"timestamp-millis\",new LogicalTypeConverter<Instant>(new TimeConversions.TimestampMillisConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Long)) {\n        throw new IllegalArgumentException(\"Invalid type for timestamp-millis, expected Long but was \" + value.getClass());\n      }\n      Long epochMillis=(Long)value;\n      return jsonNodeFactory.numberNode(epochMillis);\n    }\n  }\n);\n  logicalTypeConverters.put(\"timestamp-micros\",new LogicalTypeConverter<Instant>(new TimeConversions.TimestampMicrosConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Long)) {\n        throw new IllegalArgumentException(\"Invalid type for timestamp-micros, expected Long but was \" + value.getClass());\n      }\n      Long epochMillis=(Long)value;\n      return jsonNodeFactory.numberNode(epochMillis);\n    }\n  }\n);\n  logicalTypeConverters.put(\"uuid\",new LogicalTypeConverter<UUID>(new Conversions.UUIDConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      return jsonNodeFactory.textNode(value == null ? null : value.toString());\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 423,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4005,
        "startLineNumber" : 138,
        "startColumnNumber" : 4,
        "endLineNumber" : 218,
        "endColumnNumber" : 5
      },
      "nodeContext" : "static {\n  logicalTypeConverters.put(\"decimal\",new LogicalTypeConverter<BigDecimal>(new Conversions.DecimalConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof BigDecimal)) {\n        throw new IllegalArgumentException(\"Invalid type for Decimal, expected BigDecimal but was \" + value.getClass());\n      }\n      BigDecimal decimal=(BigDecimal)value;\n      return jsonNodeFactory.numberNode(decimal);\n    }\n  }\n);\n  logicalTypeConverters.put(\"date\",new LogicalTypeConverter<LocalDate>(new TimeConversions.DateConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Integer)) {\n        throw new IllegalArgumentException(\"Invalid type for date, expected Integer but was \" + value.getClass());\n      }\n      Integer daysFromEpoch=(Integer)value;\n      return jsonNodeFactory.numberNode(daysFromEpoch);\n    }\n  }\n);\n  logicalTypeConverters.put(\"time-millis\",new LogicalTypeConverter<LocalTime>(new TimeConversions.TimeMillisConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Integer)) {\n        throw new IllegalArgumentException(\"Invalid type for time-millis, expected Integer but was \" + value.getClass());\n      }\n      Integer timeMillis=(Integer)value;\n      return jsonNodeFactory.numberNode(timeMillis);\n    }\n  }\n);\n  logicalTypeConverters.put(\"time-micros\",new LogicalTypeConverter<LocalTime>(new TimeConversions.TimeMicrosConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Long)) {\n        throw new IllegalArgumentException(\"Invalid type for time-micros, expected Long but was \" + value.getClass());\n      }\n      Long timeMicro=(Long)value;\n      return jsonNodeFactory.numberNode(timeMicro);\n    }\n  }\n);\n  logicalTypeConverters.put(\"timestamp-millis\",new LogicalTypeConverter<Instant>(new TimeConversions.TimestampMillisConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Long)) {\n        throw new IllegalArgumentException(\"Invalid type for timestamp-millis, expected Long but was \" + value.getClass());\n      }\n      Long epochMillis=(Long)value;\n      return jsonNodeFactory.numberNode(epochMillis);\n    }\n  }\n);\n  logicalTypeConverters.put(\"timestamp-micros\",new LogicalTypeConverter<Instant>(new TimeConversions.TimestampMicrosConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Long)) {\n        throw new IllegalArgumentException(\"Invalid type for timestamp-micros, expected Long but was \" + value.getClass());\n      }\n      Long epochMillis=(Long)value;\n      return jsonNodeFactory.numberNode(epochMillis);\n    }\n  }\n);\n  logicalTypeConverters.put(\"uuid\",new LogicalTypeConverter<UUID>(new Conversions.UUIDConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      return jsonNodeFactory.textNode(value == null ? null : value.toString());\n    }\n  }\n);\n}\n",
      "nodeType" : "Initializer",
      "astNodeNumber" : 425,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 152,
        "startColumnNumber" : 16,
        "endLineNumber" : 152,
        "endColumnNumber" : 52
      },
      "nodeContext" : "new TimeConversions.DateConversion()",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 5,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "TimeConversions"
  }, {
    "nodeContext" : "TimeConversions",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 164,
      "startColumnNumber" : 20,
      "endLineNumber" : 164,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 164,
        "startColumnNumber" : 20,
        "endLineNumber" : 164,
        "endColumnNumber" : 56
      },
      "nodeContext" : "TimeConversions.TimeMillisConversion",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,type]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 164,
        "startColumnNumber" : 20,
        "endLineNumber" : 164,
        "endColumnNumber" : 56
      },
      "nodeContext" : "TimeConversions.TimeMillisConversion",
      "nodeType" : "SimpleType",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 164,
        "startColumnNumber" : 16,
        "endLineNumber" : 164,
        "endColumnNumber" : 58
      },
      "nodeContext" : "new TimeConversions.TimeMillisConversion()",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 562,
        "startLineNumber" : 163,
        "startColumnNumber" : 49,
        "endLineNumber" : 174,
        "endColumnNumber" : 9
      },
      "nodeContext" : "new LogicalTypeConverter<LocalTime>(new TimeConversions.TimeMillisConversion()){\n  @Override JsonNode toJson(  Schema schema,  Object value){\n    if (!(value instanceof Integer)) {\n      throw new IllegalArgumentException(\"Invalid type for time-millis, expected Integer but was \" + value.getClass());\n    }\n    Integer timeMillis=(Integer)value;\n    return jsonNodeFactory.numberNode(timeMillis);\n  }\n}\n",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 58,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 604,
        "startLineNumber" : 163,
        "startColumnNumber" : 8,
        "endLineNumber" : 174,
        "endColumnNumber" : 10
      },
      "nodeContext" : "logicalTypeConverters.put(\"time-millis\",new LogicalTypeConverter<LocalTime>(new TimeConversions.TimeMillisConversion()){\n  @Override JsonNode toJson(  Schema schema,  Object value){\n    if (!(value instanceof Integer)) {\n      throw new IllegalArgumentException(\"Invalid type for time-millis, expected Integer but was \" + value.getClass());\n    }\n    Integer timeMillis=(Integer)value;\n    return jsonNodeFactory.numberNode(timeMillis);\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 62,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 605,
        "startLineNumber" : 163,
        "startColumnNumber" : 8,
        "endLineNumber" : 174,
        "endColumnNumber" : 11
      },
      "nodeContext" : "logicalTypeConverters.put(\"time-millis\",new LogicalTypeConverter<LocalTime>(new TimeConversions.TimeMillisConversion()){\n  @Override JsonNode toJson(  Schema schema,  Object value){\n    if (!(value instanceof Integer)) {\n      throw new IllegalArgumentException(\"Invalid type for time-millis, expected Integer but was \" + value.getClass());\n    }\n    Integer timeMillis=(Integer)value;\n    return jsonNodeFactory.numberNode(timeMillis);\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 63,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Initializer,body]",
      "nodePosition" : {
        "charLength" : 3998,
        "startLineNumber" : 138,
        "startColumnNumber" : 11,
        "endLineNumber" : 218,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  logicalTypeConverters.put(\"decimal\",new LogicalTypeConverter<BigDecimal>(new Conversions.DecimalConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof BigDecimal)) {\n        throw new IllegalArgumentException(\"Invalid type for Decimal, expected BigDecimal but was \" + value.getClass());\n      }\n      BigDecimal decimal=(BigDecimal)value;\n      return jsonNodeFactory.numberNode(decimal);\n    }\n  }\n);\n  logicalTypeConverters.put(\"date\",new LogicalTypeConverter<LocalDate>(new TimeConversions.DateConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Integer)) {\n        throw new IllegalArgumentException(\"Invalid type for date, expected Integer but was \" + value.getClass());\n      }\n      Integer daysFromEpoch=(Integer)value;\n      return jsonNodeFactory.numberNode(daysFromEpoch);\n    }\n  }\n);\n  logicalTypeConverters.put(\"time-millis\",new LogicalTypeConverter<LocalTime>(new TimeConversions.TimeMillisConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Integer)) {\n        throw new IllegalArgumentException(\"Invalid type for time-millis, expected Integer but was \" + value.getClass());\n      }\n      Integer timeMillis=(Integer)value;\n      return jsonNodeFactory.numberNode(timeMillis);\n    }\n  }\n);\n  logicalTypeConverters.put(\"time-micros\",new LogicalTypeConverter<LocalTime>(new TimeConversions.TimeMicrosConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Long)) {\n        throw new IllegalArgumentException(\"Invalid type for time-micros, expected Long but was \" + value.getClass());\n      }\n      Long timeMicro=(Long)value;\n      return jsonNodeFactory.numberNode(timeMicro);\n    }\n  }\n);\n  logicalTypeConverters.put(\"timestamp-millis\",new LogicalTypeConverter<Instant>(new TimeConversions.TimestampMillisConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Long)) {\n        throw new IllegalArgumentException(\"Invalid type for timestamp-millis, expected Long but was \" + value.getClass());\n      }\n      Long epochMillis=(Long)value;\n      return jsonNodeFactory.numberNode(epochMillis);\n    }\n  }\n);\n  logicalTypeConverters.put(\"timestamp-micros\",new LogicalTypeConverter<Instant>(new TimeConversions.TimestampMicrosConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Long)) {\n        throw new IllegalArgumentException(\"Invalid type for timestamp-micros, expected Long but was \" + value.getClass());\n      }\n      Long epochMillis=(Long)value;\n      return jsonNodeFactory.numberNode(epochMillis);\n    }\n  }\n);\n  logicalTypeConverters.put(\"uuid\",new LogicalTypeConverter<UUID>(new Conversions.UUIDConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      return jsonNodeFactory.textNode(value == null ? null : value.toString());\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 423,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4005,
        "startLineNumber" : 138,
        "startColumnNumber" : 4,
        "endLineNumber" : 218,
        "endColumnNumber" : 5
      },
      "nodeContext" : "static {\n  logicalTypeConverters.put(\"decimal\",new LogicalTypeConverter<BigDecimal>(new Conversions.DecimalConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof BigDecimal)) {\n        throw new IllegalArgumentException(\"Invalid type for Decimal, expected BigDecimal but was \" + value.getClass());\n      }\n      BigDecimal decimal=(BigDecimal)value;\n      return jsonNodeFactory.numberNode(decimal);\n    }\n  }\n);\n  logicalTypeConverters.put(\"date\",new LogicalTypeConverter<LocalDate>(new TimeConversions.DateConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Integer)) {\n        throw new IllegalArgumentException(\"Invalid type for date, expected Integer but was \" + value.getClass());\n      }\n      Integer daysFromEpoch=(Integer)value;\n      return jsonNodeFactory.numberNode(daysFromEpoch);\n    }\n  }\n);\n  logicalTypeConverters.put(\"time-millis\",new LogicalTypeConverter<LocalTime>(new TimeConversions.TimeMillisConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Integer)) {\n        throw new IllegalArgumentException(\"Invalid type for time-millis, expected Integer but was \" + value.getClass());\n      }\n      Integer timeMillis=(Integer)value;\n      return jsonNodeFactory.numberNode(timeMillis);\n    }\n  }\n);\n  logicalTypeConverters.put(\"time-micros\",new LogicalTypeConverter<LocalTime>(new TimeConversions.TimeMicrosConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Long)) {\n        throw new IllegalArgumentException(\"Invalid type for time-micros, expected Long but was \" + value.getClass());\n      }\n      Long timeMicro=(Long)value;\n      return jsonNodeFactory.numberNode(timeMicro);\n    }\n  }\n);\n  logicalTypeConverters.put(\"timestamp-millis\",new LogicalTypeConverter<Instant>(new TimeConversions.TimestampMillisConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Long)) {\n        throw new IllegalArgumentException(\"Invalid type for timestamp-millis, expected Long but was \" + value.getClass());\n      }\n      Long epochMillis=(Long)value;\n      return jsonNodeFactory.numberNode(epochMillis);\n    }\n  }\n);\n  logicalTypeConverters.put(\"timestamp-micros\",new LogicalTypeConverter<Instant>(new TimeConversions.TimestampMicrosConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Long)) {\n        throw new IllegalArgumentException(\"Invalid type for timestamp-micros, expected Long but was \" + value.getClass());\n      }\n      Long epochMillis=(Long)value;\n      return jsonNodeFactory.numberNode(epochMillis);\n    }\n  }\n);\n  logicalTypeConverters.put(\"uuid\",new LogicalTypeConverter<UUID>(new Conversions.UUIDConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      return jsonNodeFactory.textNode(value == null ? null : value.toString());\n    }\n  }\n);\n}\n",
      "nodeType" : "Initializer",
      "astNodeNumber" : 425,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 164,
        "startColumnNumber" : 16,
        "endLineNumber" : 164,
        "endColumnNumber" : 58
      },
      "nodeContext" : "new TimeConversions.TimeMillisConversion()",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 5,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "TimeConversions"
  }, {
    "nodeContext" : "TimeConversions",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 176,
      "startColumnNumber" : 20,
      "endLineNumber" : 176,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 176,
        "startColumnNumber" : 20,
        "endLineNumber" : 176,
        "endColumnNumber" : 56
      },
      "nodeContext" : "TimeConversions.TimeMicrosConversion",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,type]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 176,
        "startColumnNumber" : 20,
        "endLineNumber" : 176,
        "endColumnNumber" : 56
      },
      "nodeContext" : "TimeConversions.TimeMicrosConversion",
      "nodeType" : "SimpleType",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 176,
        "startColumnNumber" : 16,
        "endLineNumber" : 176,
        "endColumnNumber" : 58
      },
      "nodeContext" : "new TimeConversions.TimeMicrosConversion()",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 548,
        "startLineNumber" : 175,
        "startColumnNumber" : 49,
        "endLineNumber" : 186,
        "endColumnNumber" : 9
      },
      "nodeContext" : "new LogicalTypeConverter<LocalTime>(new TimeConversions.TimeMicrosConversion()){\n  @Override JsonNode toJson(  Schema schema,  Object value){\n    if (!(value instanceof Long)) {\n      throw new IllegalArgumentException(\"Invalid type for time-micros, expected Long but was \" + value.getClass());\n    }\n    Long timeMicro=(Long)value;\n    return jsonNodeFactory.numberNode(timeMicro);\n  }\n}\n",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 58,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 590,
        "startLineNumber" : 175,
        "startColumnNumber" : 8,
        "endLineNumber" : 186,
        "endColumnNumber" : 10
      },
      "nodeContext" : "logicalTypeConverters.put(\"time-micros\",new LogicalTypeConverter<LocalTime>(new TimeConversions.TimeMicrosConversion()){\n  @Override JsonNode toJson(  Schema schema,  Object value){\n    if (!(value instanceof Long)) {\n      throw new IllegalArgumentException(\"Invalid type for time-micros, expected Long but was \" + value.getClass());\n    }\n    Long timeMicro=(Long)value;\n    return jsonNodeFactory.numberNode(timeMicro);\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 62,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 591,
        "startLineNumber" : 175,
        "startColumnNumber" : 8,
        "endLineNumber" : 186,
        "endColumnNumber" : 11
      },
      "nodeContext" : "logicalTypeConverters.put(\"time-micros\",new LogicalTypeConverter<LocalTime>(new TimeConversions.TimeMicrosConversion()){\n  @Override JsonNode toJson(  Schema schema,  Object value){\n    if (!(value instanceof Long)) {\n      throw new IllegalArgumentException(\"Invalid type for time-micros, expected Long but was \" + value.getClass());\n    }\n    Long timeMicro=(Long)value;\n    return jsonNodeFactory.numberNode(timeMicro);\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 63,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Initializer,body]",
      "nodePosition" : {
        "charLength" : 3998,
        "startLineNumber" : 138,
        "startColumnNumber" : 11,
        "endLineNumber" : 218,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  logicalTypeConverters.put(\"decimal\",new LogicalTypeConverter<BigDecimal>(new Conversions.DecimalConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof BigDecimal)) {\n        throw new IllegalArgumentException(\"Invalid type for Decimal, expected BigDecimal but was \" + value.getClass());\n      }\n      BigDecimal decimal=(BigDecimal)value;\n      return jsonNodeFactory.numberNode(decimal);\n    }\n  }\n);\n  logicalTypeConverters.put(\"date\",new LogicalTypeConverter<LocalDate>(new TimeConversions.DateConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Integer)) {\n        throw new IllegalArgumentException(\"Invalid type for date, expected Integer but was \" + value.getClass());\n      }\n      Integer daysFromEpoch=(Integer)value;\n      return jsonNodeFactory.numberNode(daysFromEpoch);\n    }\n  }\n);\n  logicalTypeConverters.put(\"time-millis\",new LogicalTypeConverter<LocalTime>(new TimeConversions.TimeMillisConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Integer)) {\n        throw new IllegalArgumentException(\"Invalid type for time-millis, expected Integer but was \" + value.getClass());\n      }\n      Integer timeMillis=(Integer)value;\n      return jsonNodeFactory.numberNode(timeMillis);\n    }\n  }\n);\n  logicalTypeConverters.put(\"time-micros\",new LogicalTypeConverter<LocalTime>(new TimeConversions.TimeMicrosConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Long)) {\n        throw new IllegalArgumentException(\"Invalid type for time-micros, expected Long but was \" + value.getClass());\n      }\n      Long timeMicro=(Long)value;\n      return jsonNodeFactory.numberNode(timeMicro);\n    }\n  }\n);\n  logicalTypeConverters.put(\"timestamp-millis\",new LogicalTypeConverter<Instant>(new TimeConversions.TimestampMillisConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Long)) {\n        throw new IllegalArgumentException(\"Invalid type for timestamp-millis, expected Long but was \" + value.getClass());\n      }\n      Long epochMillis=(Long)value;\n      return jsonNodeFactory.numberNode(epochMillis);\n    }\n  }\n);\n  logicalTypeConverters.put(\"timestamp-micros\",new LogicalTypeConverter<Instant>(new TimeConversions.TimestampMicrosConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Long)) {\n        throw new IllegalArgumentException(\"Invalid type for timestamp-micros, expected Long but was \" + value.getClass());\n      }\n      Long epochMillis=(Long)value;\n      return jsonNodeFactory.numberNode(epochMillis);\n    }\n  }\n);\n  logicalTypeConverters.put(\"uuid\",new LogicalTypeConverter<UUID>(new Conversions.UUIDConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      return jsonNodeFactory.textNode(value == null ? null : value.toString());\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 423,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4005,
        "startLineNumber" : 138,
        "startColumnNumber" : 4,
        "endLineNumber" : 218,
        "endColumnNumber" : 5
      },
      "nodeContext" : "static {\n  logicalTypeConverters.put(\"decimal\",new LogicalTypeConverter<BigDecimal>(new Conversions.DecimalConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof BigDecimal)) {\n        throw new IllegalArgumentException(\"Invalid type for Decimal, expected BigDecimal but was \" + value.getClass());\n      }\n      BigDecimal decimal=(BigDecimal)value;\n      return jsonNodeFactory.numberNode(decimal);\n    }\n  }\n);\n  logicalTypeConverters.put(\"date\",new LogicalTypeConverter<LocalDate>(new TimeConversions.DateConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Integer)) {\n        throw new IllegalArgumentException(\"Invalid type for date, expected Integer but was \" + value.getClass());\n      }\n      Integer daysFromEpoch=(Integer)value;\n      return jsonNodeFactory.numberNode(daysFromEpoch);\n    }\n  }\n);\n  logicalTypeConverters.put(\"time-millis\",new LogicalTypeConverter<LocalTime>(new TimeConversions.TimeMillisConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Integer)) {\n        throw new IllegalArgumentException(\"Invalid type for time-millis, expected Integer but was \" + value.getClass());\n      }\n      Integer timeMillis=(Integer)value;\n      return jsonNodeFactory.numberNode(timeMillis);\n    }\n  }\n);\n  logicalTypeConverters.put(\"time-micros\",new LogicalTypeConverter<LocalTime>(new TimeConversions.TimeMicrosConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Long)) {\n        throw new IllegalArgumentException(\"Invalid type for time-micros, expected Long but was \" + value.getClass());\n      }\n      Long timeMicro=(Long)value;\n      return jsonNodeFactory.numberNode(timeMicro);\n    }\n  }\n);\n  logicalTypeConverters.put(\"timestamp-millis\",new LogicalTypeConverter<Instant>(new TimeConversions.TimestampMillisConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Long)) {\n        throw new IllegalArgumentException(\"Invalid type for timestamp-millis, expected Long but was \" + value.getClass());\n      }\n      Long epochMillis=(Long)value;\n      return jsonNodeFactory.numberNode(epochMillis);\n    }\n  }\n);\n  logicalTypeConverters.put(\"timestamp-micros\",new LogicalTypeConverter<Instant>(new TimeConversions.TimestampMicrosConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Long)) {\n        throw new IllegalArgumentException(\"Invalid type for timestamp-micros, expected Long but was \" + value.getClass());\n      }\n      Long epochMillis=(Long)value;\n      return jsonNodeFactory.numberNode(epochMillis);\n    }\n  }\n);\n  logicalTypeConverters.put(\"uuid\",new LogicalTypeConverter<UUID>(new Conversions.UUIDConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      return jsonNodeFactory.textNode(value == null ? null : value.toString());\n    }\n  }\n);\n}\n",
      "nodeType" : "Initializer",
      "astNodeNumber" : 425,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 176,
        "startColumnNumber" : 16,
        "endLineNumber" : 176,
        "endColumnNumber" : 58
      },
      "nodeContext" : "new TimeConversions.TimeMicrosConversion()",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 5,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "TimeConversions"
  }, {
    "nodeContext" : "TimeConversions",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 188,
      "startColumnNumber" : 20,
      "endLineNumber" : 188,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 188,
        "startColumnNumber" : 20,
        "endLineNumber" : 188,
        "endColumnNumber" : 61
      },
      "nodeContext" : "TimeConversions.TimestampMillisConversion",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,type]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 188,
        "startColumnNumber" : 20,
        "endLineNumber" : 188,
        "endColumnNumber" : 61
      },
      "nodeContext" : "TimeConversions.TimestampMillisConversion",
      "nodeType" : "SimpleType",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 188,
        "startColumnNumber" : 16,
        "endLineNumber" : 188,
        "endColumnNumber" : 63
      },
      "nodeContext" : "new TimeConversions.TimestampMillisConversion()",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 560,
        "startLineNumber" : 187,
        "startColumnNumber" : 54,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "new LogicalTypeConverter<Instant>(new TimeConversions.TimestampMillisConversion()){\n  @Override JsonNode toJson(  Schema schema,  Object value){\n    if (!(value instanceof Long)) {\n      throw new IllegalArgumentException(\"Invalid type for timestamp-millis, expected Long but was \" + value.getClass());\n    }\n    Long epochMillis=(Long)value;\n    return jsonNodeFactory.numberNode(epochMillis);\n  }\n}\n",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 58,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 607,
        "startLineNumber" : 187,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 10
      },
      "nodeContext" : "logicalTypeConverters.put(\"timestamp-millis\",new LogicalTypeConverter<Instant>(new TimeConversions.TimestampMillisConversion()){\n  @Override JsonNode toJson(  Schema schema,  Object value){\n    if (!(value instanceof Long)) {\n      throw new IllegalArgumentException(\"Invalid type for timestamp-millis, expected Long but was \" + value.getClass());\n    }\n    Long epochMillis=(Long)value;\n    return jsonNodeFactory.numberNode(epochMillis);\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 62,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 608,
        "startLineNumber" : 187,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 11
      },
      "nodeContext" : "logicalTypeConverters.put(\"timestamp-millis\",new LogicalTypeConverter<Instant>(new TimeConversions.TimestampMillisConversion()){\n  @Override JsonNode toJson(  Schema schema,  Object value){\n    if (!(value instanceof Long)) {\n      throw new IllegalArgumentException(\"Invalid type for timestamp-millis, expected Long but was \" + value.getClass());\n    }\n    Long epochMillis=(Long)value;\n    return jsonNodeFactory.numberNode(epochMillis);\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 63,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Initializer,body]",
      "nodePosition" : {
        "charLength" : 3998,
        "startLineNumber" : 138,
        "startColumnNumber" : 11,
        "endLineNumber" : 218,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  logicalTypeConverters.put(\"decimal\",new LogicalTypeConverter<BigDecimal>(new Conversions.DecimalConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof BigDecimal)) {\n        throw new IllegalArgumentException(\"Invalid type for Decimal, expected BigDecimal but was \" + value.getClass());\n      }\n      BigDecimal decimal=(BigDecimal)value;\n      return jsonNodeFactory.numberNode(decimal);\n    }\n  }\n);\n  logicalTypeConverters.put(\"date\",new LogicalTypeConverter<LocalDate>(new TimeConversions.DateConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Integer)) {\n        throw new IllegalArgumentException(\"Invalid type for date, expected Integer but was \" + value.getClass());\n      }\n      Integer daysFromEpoch=(Integer)value;\n      return jsonNodeFactory.numberNode(daysFromEpoch);\n    }\n  }\n);\n  logicalTypeConverters.put(\"time-millis\",new LogicalTypeConverter<LocalTime>(new TimeConversions.TimeMillisConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Integer)) {\n        throw new IllegalArgumentException(\"Invalid type for time-millis, expected Integer but was \" + value.getClass());\n      }\n      Integer timeMillis=(Integer)value;\n      return jsonNodeFactory.numberNode(timeMillis);\n    }\n  }\n);\n  logicalTypeConverters.put(\"time-micros\",new LogicalTypeConverter<LocalTime>(new TimeConversions.TimeMicrosConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Long)) {\n        throw new IllegalArgumentException(\"Invalid type for time-micros, expected Long but was \" + value.getClass());\n      }\n      Long timeMicro=(Long)value;\n      return jsonNodeFactory.numberNode(timeMicro);\n    }\n  }\n);\n  logicalTypeConverters.put(\"timestamp-millis\",new LogicalTypeConverter<Instant>(new TimeConversions.TimestampMillisConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Long)) {\n        throw new IllegalArgumentException(\"Invalid type for timestamp-millis, expected Long but was \" + value.getClass());\n      }\n      Long epochMillis=(Long)value;\n      return jsonNodeFactory.numberNode(epochMillis);\n    }\n  }\n);\n  logicalTypeConverters.put(\"timestamp-micros\",new LogicalTypeConverter<Instant>(new TimeConversions.TimestampMicrosConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Long)) {\n        throw new IllegalArgumentException(\"Invalid type for timestamp-micros, expected Long but was \" + value.getClass());\n      }\n      Long epochMillis=(Long)value;\n      return jsonNodeFactory.numberNode(epochMillis);\n    }\n  }\n);\n  logicalTypeConverters.put(\"uuid\",new LogicalTypeConverter<UUID>(new Conversions.UUIDConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      return jsonNodeFactory.textNode(value == null ? null : value.toString());\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 423,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4005,
        "startLineNumber" : 138,
        "startColumnNumber" : 4,
        "endLineNumber" : 218,
        "endColumnNumber" : 5
      },
      "nodeContext" : "static {\n  logicalTypeConverters.put(\"decimal\",new LogicalTypeConverter<BigDecimal>(new Conversions.DecimalConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof BigDecimal)) {\n        throw new IllegalArgumentException(\"Invalid type for Decimal, expected BigDecimal but was \" + value.getClass());\n      }\n      BigDecimal decimal=(BigDecimal)value;\n      return jsonNodeFactory.numberNode(decimal);\n    }\n  }\n);\n  logicalTypeConverters.put(\"date\",new LogicalTypeConverter<LocalDate>(new TimeConversions.DateConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Integer)) {\n        throw new IllegalArgumentException(\"Invalid type for date, expected Integer but was \" + value.getClass());\n      }\n      Integer daysFromEpoch=(Integer)value;\n      return jsonNodeFactory.numberNode(daysFromEpoch);\n    }\n  }\n);\n  logicalTypeConverters.put(\"time-millis\",new LogicalTypeConverter<LocalTime>(new TimeConversions.TimeMillisConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Integer)) {\n        throw new IllegalArgumentException(\"Invalid type for time-millis, expected Integer but was \" + value.getClass());\n      }\n      Integer timeMillis=(Integer)value;\n      return jsonNodeFactory.numberNode(timeMillis);\n    }\n  }\n);\n  logicalTypeConverters.put(\"time-micros\",new LogicalTypeConverter<LocalTime>(new TimeConversions.TimeMicrosConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Long)) {\n        throw new IllegalArgumentException(\"Invalid type for time-micros, expected Long but was \" + value.getClass());\n      }\n      Long timeMicro=(Long)value;\n      return jsonNodeFactory.numberNode(timeMicro);\n    }\n  }\n);\n  logicalTypeConverters.put(\"timestamp-millis\",new LogicalTypeConverter<Instant>(new TimeConversions.TimestampMillisConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Long)) {\n        throw new IllegalArgumentException(\"Invalid type for timestamp-millis, expected Long but was \" + value.getClass());\n      }\n      Long epochMillis=(Long)value;\n      return jsonNodeFactory.numberNode(epochMillis);\n    }\n  }\n);\n  logicalTypeConverters.put(\"timestamp-micros\",new LogicalTypeConverter<Instant>(new TimeConversions.TimestampMicrosConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Long)) {\n        throw new IllegalArgumentException(\"Invalid type for timestamp-micros, expected Long but was \" + value.getClass());\n      }\n      Long epochMillis=(Long)value;\n      return jsonNodeFactory.numberNode(epochMillis);\n    }\n  }\n);\n  logicalTypeConverters.put(\"uuid\",new LogicalTypeConverter<UUID>(new Conversions.UUIDConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      return jsonNodeFactory.textNode(value == null ? null : value.toString());\n    }\n  }\n);\n}\n",
      "nodeType" : "Initializer",
      "astNodeNumber" : 425,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 188,
        "startColumnNumber" : 16,
        "endLineNumber" : 188,
        "endColumnNumber" : 63
      },
      "nodeContext" : "new TimeConversions.TimestampMillisConversion()",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 5,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "TimeConversions"
  }, {
    "nodeContext" : "TimeConversions",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 200,
      "startColumnNumber" : 20,
      "endLineNumber" : 200,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 200,
        "startColumnNumber" : 20,
        "endLineNumber" : 200,
        "endColumnNumber" : 61
      },
      "nodeContext" : "TimeConversions.TimestampMicrosConversion",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,type]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 200,
        "startColumnNumber" : 20,
        "endLineNumber" : 200,
        "endColumnNumber" : 61
      },
      "nodeContext" : "TimeConversions.TimestampMicrosConversion",
      "nodeType" : "SimpleType",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 200,
        "startColumnNumber" : 16,
        "endLineNumber" : 200,
        "endColumnNumber" : 63
      },
      "nodeContext" : "new TimeConversions.TimestampMicrosConversion()",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 560,
        "startLineNumber" : 199,
        "startColumnNumber" : 54,
        "endLineNumber" : 210,
        "endColumnNumber" : 9
      },
      "nodeContext" : "new LogicalTypeConverter<Instant>(new TimeConversions.TimestampMicrosConversion()){\n  @Override JsonNode toJson(  Schema schema,  Object value){\n    if (!(value instanceof Long)) {\n      throw new IllegalArgumentException(\"Invalid type for timestamp-micros, expected Long but was \" + value.getClass());\n    }\n    Long epochMillis=(Long)value;\n    return jsonNodeFactory.numberNode(epochMillis);\n  }\n}\n",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 58,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 607,
        "startLineNumber" : 199,
        "startColumnNumber" : 8,
        "endLineNumber" : 210,
        "endColumnNumber" : 10
      },
      "nodeContext" : "logicalTypeConverters.put(\"timestamp-micros\",new LogicalTypeConverter<Instant>(new TimeConversions.TimestampMicrosConversion()){\n  @Override JsonNode toJson(  Schema schema,  Object value){\n    if (!(value instanceof Long)) {\n      throw new IllegalArgumentException(\"Invalid type for timestamp-micros, expected Long but was \" + value.getClass());\n    }\n    Long epochMillis=(Long)value;\n    return jsonNodeFactory.numberNode(epochMillis);\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 62,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 608,
        "startLineNumber" : 199,
        "startColumnNumber" : 8,
        "endLineNumber" : 210,
        "endColumnNumber" : 11
      },
      "nodeContext" : "logicalTypeConverters.put(\"timestamp-micros\",new LogicalTypeConverter<Instant>(new TimeConversions.TimestampMicrosConversion()){\n  @Override JsonNode toJson(  Schema schema,  Object value){\n    if (!(value instanceof Long)) {\n      throw new IllegalArgumentException(\"Invalid type for timestamp-micros, expected Long but was \" + value.getClass());\n    }\n    Long epochMillis=(Long)value;\n    return jsonNodeFactory.numberNode(epochMillis);\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 63,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Initializer,body]",
      "nodePosition" : {
        "charLength" : 3998,
        "startLineNumber" : 138,
        "startColumnNumber" : 11,
        "endLineNumber" : 218,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  logicalTypeConverters.put(\"decimal\",new LogicalTypeConverter<BigDecimal>(new Conversions.DecimalConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof BigDecimal)) {\n        throw new IllegalArgumentException(\"Invalid type for Decimal, expected BigDecimal but was \" + value.getClass());\n      }\n      BigDecimal decimal=(BigDecimal)value;\n      return jsonNodeFactory.numberNode(decimal);\n    }\n  }\n);\n  logicalTypeConverters.put(\"date\",new LogicalTypeConverter<LocalDate>(new TimeConversions.DateConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Integer)) {\n        throw new IllegalArgumentException(\"Invalid type for date, expected Integer but was \" + value.getClass());\n      }\n      Integer daysFromEpoch=(Integer)value;\n      return jsonNodeFactory.numberNode(daysFromEpoch);\n    }\n  }\n);\n  logicalTypeConverters.put(\"time-millis\",new LogicalTypeConverter<LocalTime>(new TimeConversions.TimeMillisConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Integer)) {\n        throw new IllegalArgumentException(\"Invalid type for time-millis, expected Integer but was \" + value.getClass());\n      }\n      Integer timeMillis=(Integer)value;\n      return jsonNodeFactory.numberNode(timeMillis);\n    }\n  }\n);\n  logicalTypeConverters.put(\"time-micros\",new LogicalTypeConverter<LocalTime>(new TimeConversions.TimeMicrosConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Long)) {\n        throw new IllegalArgumentException(\"Invalid type for time-micros, expected Long but was \" + value.getClass());\n      }\n      Long timeMicro=(Long)value;\n      return jsonNodeFactory.numberNode(timeMicro);\n    }\n  }\n);\n  logicalTypeConverters.put(\"timestamp-millis\",new LogicalTypeConverter<Instant>(new TimeConversions.TimestampMillisConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Long)) {\n        throw new IllegalArgumentException(\"Invalid type for timestamp-millis, expected Long but was \" + value.getClass());\n      }\n      Long epochMillis=(Long)value;\n      return jsonNodeFactory.numberNode(epochMillis);\n    }\n  }\n);\n  logicalTypeConverters.put(\"timestamp-micros\",new LogicalTypeConverter<Instant>(new TimeConversions.TimestampMicrosConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Long)) {\n        throw new IllegalArgumentException(\"Invalid type for timestamp-micros, expected Long but was \" + value.getClass());\n      }\n      Long epochMillis=(Long)value;\n      return jsonNodeFactory.numberNode(epochMillis);\n    }\n  }\n);\n  logicalTypeConverters.put(\"uuid\",new LogicalTypeConverter<UUID>(new Conversions.UUIDConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      return jsonNodeFactory.textNode(value == null ? null : value.toString());\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 423,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4005,
        "startLineNumber" : 138,
        "startColumnNumber" : 4,
        "endLineNumber" : 218,
        "endColumnNumber" : 5
      },
      "nodeContext" : "static {\n  logicalTypeConverters.put(\"decimal\",new LogicalTypeConverter<BigDecimal>(new Conversions.DecimalConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof BigDecimal)) {\n        throw new IllegalArgumentException(\"Invalid type for Decimal, expected BigDecimal but was \" + value.getClass());\n      }\n      BigDecimal decimal=(BigDecimal)value;\n      return jsonNodeFactory.numberNode(decimal);\n    }\n  }\n);\n  logicalTypeConverters.put(\"date\",new LogicalTypeConverter<LocalDate>(new TimeConversions.DateConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Integer)) {\n        throw new IllegalArgumentException(\"Invalid type for date, expected Integer but was \" + value.getClass());\n      }\n      Integer daysFromEpoch=(Integer)value;\n      return jsonNodeFactory.numberNode(daysFromEpoch);\n    }\n  }\n);\n  logicalTypeConverters.put(\"time-millis\",new LogicalTypeConverter<LocalTime>(new TimeConversions.TimeMillisConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Integer)) {\n        throw new IllegalArgumentException(\"Invalid type for time-millis, expected Integer but was \" + value.getClass());\n      }\n      Integer timeMillis=(Integer)value;\n      return jsonNodeFactory.numberNode(timeMillis);\n    }\n  }\n);\n  logicalTypeConverters.put(\"time-micros\",new LogicalTypeConverter<LocalTime>(new TimeConversions.TimeMicrosConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Long)) {\n        throw new IllegalArgumentException(\"Invalid type for time-micros, expected Long but was \" + value.getClass());\n      }\n      Long timeMicro=(Long)value;\n      return jsonNodeFactory.numberNode(timeMicro);\n    }\n  }\n);\n  logicalTypeConverters.put(\"timestamp-millis\",new LogicalTypeConverter<Instant>(new TimeConversions.TimestampMillisConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Long)) {\n        throw new IllegalArgumentException(\"Invalid type for timestamp-millis, expected Long but was \" + value.getClass());\n      }\n      Long epochMillis=(Long)value;\n      return jsonNodeFactory.numberNode(epochMillis);\n    }\n  }\n);\n  logicalTypeConverters.put(\"timestamp-micros\",new LogicalTypeConverter<Instant>(new TimeConversions.TimestampMicrosConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      if (!(value instanceof Long)) {\n        throw new IllegalArgumentException(\"Invalid type for timestamp-micros, expected Long but was \" + value.getClass());\n      }\n      Long epochMillis=(Long)value;\n      return jsonNodeFactory.numberNode(epochMillis);\n    }\n  }\n);\n  logicalTypeConverters.put(\"uuid\",new LogicalTypeConverter<UUID>(new Conversions.UUIDConversion()){\n    @Override JsonNode toJson(    Schema schema,    Object value){\n      return jsonNodeFactory.textNode(value == null ? null : value.toString());\n    }\n  }\n);\n}\n",
      "nodeType" : "Initializer",
      "astNodeNumber" : 425,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 200,
        "startColumnNumber" : 16,
        "endLineNumber" : 200,
        "endColumnNumber" : 63
      },
      "nodeContext" : "new TimeConversions.TimestampMicrosConversion()",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 5,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "TimeConversions"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 152,
    "startColumnNumber" : 20,
    "endLineNumber" : 152,
    "endColumnNumber" : 35
  }, {
    "charLength" : 15,
    "startLineNumber" : 164,
    "startColumnNumber" : 20,
    "endLineNumber" : 164,
    "endColumnNumber" : 35
  }, {
    "charLength" : 15,
    "startLineNumber" : 176,
    "startColumnNumber" : 20,
    "endLineNumber" : 176,
    "endColumnNumber" : 35
  }, {
    "charLength" : 15,
    "startLineNumber" : 188,
    "startColumnNumber" : 20,
    "endLineNumber" : 188,
    "endColumnNumber" : 35
  }, {
    "charLength" : 15,
    "startLineNumber" : 200,
    "startColumnNumber" : 20,
    "endLineNumber" : 200,
    "endColumnNumber" : 35
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 6
  } ]
}