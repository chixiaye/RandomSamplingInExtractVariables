{
  "id" : 289,
  "expression" : "exceptions",
  "projectName" : "jenkinsci@jenkins",
  "commitID" : "c44fa7f4cf769257844d562353a579a198ea517a",
  "filePath" : "/core/src/main/java/hudson/util/SubClassGenerator.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "exceptions",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 55,
      "startColumnNumber" : 16,
      "endLineNumber" : 55,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 55,
        "startColumnNumber" : 16,
        "endLineNumber" : 55,
        "endColumnNumber" : 29
      },
      "nodeContext" : "exceptions[i]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 55,
        "startColumnNumber" : 16,
        "endLineNumber" : 55,
        "endColumnNumber" : 59
      },
      "nodeContext" : "exceptions[i]=Type.getInternalName(et[i])",
      "nodeType" : "Assignment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 55,
        "startColumnNumber" : 16,
        "endLineNumber" : 55,
        "endColumnNumber" : 60
      },
      "nodeContext" : "exceptions[i]=Type.getInternalName(et[i]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 54,
        "startColumnNumber" : 12,
        "endLineNumber" : 55,
        "endColumnNumber" : 60
      },
      "nodeContext" : "for (int i=0; i < et.length; i++) exceptions[i]=Type.getInternalName(et[i]);\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 24,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 921,
        "startLineNumber" : 51,
        "startColumnNumber" : 61,
        "endLineNumber" : 72,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Class[] et=c.getExceptionTypes();\n  String[] exceptions=new String[et.length];\n  for (int i=0; i < et.length; i++)   exceptions[i]=Type.getInternalName(et[i]);\n  String methodDescriptor=getMethodDescriptor(c);\n  MethodVisitor m=cw.visitMethod(c.getModifiers(),\"<init>\",methodDescriptor,null,exceptions);\n  m.visitCode();\n  int index=1;\n  m.visitVarInsn(ALOAD,0);\n  for (  Class param : c.getParameterTypes()) {\n    Type t=Type.getType(param);\n    m.visitVarInsn(t.getOpcode(ILOAD),index);\n    index+=t.getSize();\n  }\n  m.visitMethodInsn(INVOKESPECIAL,Type.getInternalName(base),\"<init>\",methodDescriptor);\n  m.visitInsn(RETURN);\n  m.visitMaxs(index,index);\n  m.visitEnd();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 147,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 974,
        "startLineNumber" : 51,
        "startColumnNumber" : 8,
        "endLineNumber" : 72,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Constructor c : base.getDeclaredConstructors()) {\n  Class[] et=c.getExceptionTypes();\n  String[] exceptions=new String[et.length];\n  for (int i=0; i < et.length; i++)   exceptions[i]=Type.getInternalName(et[i]);\n  String methodDescriptor=getMethodDescriptor(c);\n  MethodVisitor m=cw.visitMethod(c.getModifiers(),\"<init>\",methodDescriptor,null,exceptions);\n  m.visitCode();\n  int index=1;\n  m.visitVarInsn(ALOAD,0);\n  for (  Class param : c.getParameterTypes()) {\n    Type t=Type.getType(param);\n    m.visitVarInsn(t.getOpcode(ILOAD),index);\n    index+=t.getSize();\n  }\n  m.visitMethodInsn(INVOKESPECIAL,Type.getInternalName(base),\"<init>\",methodDescriptor);\n  m.visitInsn(RETURN);\n  m.visitMaxs(index,index);\n  m.visitEnd();\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 155,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1605,
        "startLineNumber" : 46,
        "startColumnNumber" : 71,
        "endLineNumber" : 84,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ClassWriter cw=new ClassWriter(0);\n  cw.visit(49,ACC_PUBLIC,name.replace('.','/'),null,Type.getInternalName(base),null);\n  for (  Constructor c : base.getDeclaredConstructors()) {\n    Class[] et=c.getExceptionTypes();\n    String[] exceptions=new String[et.length];\n    for (int i=0; i < et.length; i++)     exceptions[i]=Type.getInternalName(et[i]);\n    String methodDescriptor=getMethodDescriptor(c);\n    MethodVisitor m=cw.visitMethod(c.getModifiers(),\"<init>\",methodDescriptor,null,exceptions);\n    m.visitCode();\n    int index=1;\n    m.visitVarInsn(ALOAD,0);\n    for (    Class param : c.getParameterTypes()) {\n      Type t=Type.getType(param);\n      m.visitVarInsn(t.getOpcode(ILOAD),index);\n      index+=t.getSize();\n    }\n    m.visitMethodInsn(INVOKESPECIAL,Type.getInternalName(base),\"<init>\",methodDescriptor);\n    m.visitInsn(RETURN);\n    m.visitMaxs(index,index);\n    m.visitEnd();\n  }\n  cw.visitEnd();\n  byte[] image=cw.toByteArray();\n  Class<? extends T> c=defineClass(name,image,0,image.length).asSubclass(base);\n  Jenkins h=Jenkins.getInstanceOrNull();\n  if (h != null)   ((UberClassLoader)h.pluginManager.uberClassLoader).addNamedClass(name,c);\n  return c;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 243,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1672,
        "startLineNumber" : 46,
        "startColumnNumber" : 4,
        "endLineNumber" : 84,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public <T>Class<? extends T> generate(Class<T> base,String name){\n  ClassWriter cw=new ClassWriter(0);\n  cw.visit(49,ACC_PUBLIC,name.replace('.','/'),null,Type.getInternalName(base),null);\n  for (  Constructor c : base.getDeclaredConstructors()) {\n    Class[] et=c.getExceptionTypes();\n    String[] exceptions=new String[et.length];\n    for (int i=0; i < et.length; i++)     exceptions[i]=Type.getInternalName(et[i]);\n    String methodDescriptor=getMethodDescriptor(c);\n    MethodVisitor m=cw.visitMethod(c.getModifiers(),\"<init>\",methodDescriptor,null,exceptions);\n    m.visitCode();\n    int index=1;\n    m.visitVarInsn(ALOAD,0);\n    for (    Class param : c.getParameterTypes()) {\n      Type t=Type.getType(param);\n      m.visitVarInsn(t.getOpcode(ILOAD),index);\n      index+=t.getSize();\n    }\n    m.visitMethodInsn(INVOKESPECIAL,Type.getInternalName(base),\"<init>\",methodDescriptor);\n    m.visitInsn(RETURN);\n    m.visitMaxs(index,index);\n    m.visitEnd();\n  }\n  cw.visitEnd();\n  byte[] image=cw.toByteArray();\n  Class<? extends T> c=defineClass(name,image,0,image.length).asSubclass(base);\n  Jenkins h=Jenkins.getInstanceOrNull();\n  if (h != null)   ((UberClassLoader)h.pluginManager.uberClassLoader).addNamedClass(name,c);\n  return c;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 265,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 55,
        "startColumnNumber" : 16,
        "endLineNumber" : 55,
        "endColumnNumber" : 60
      },
      "nodeContext" : "exceptions[i]=Type.getInternalName(et[i]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String[]"
  }, {
    "nodeContext" : "exceptions",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 58,
      "startColumnNumber" : 97,
      "endLineNumber" : 58,
      "endColumnNumber" : 107
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 58,
        "startColumnNumber" : 30,
        "endLineNumber" : 58,
        "endColumnNumber" : 108
      },
      "nodeContext" : "cw.visitMethod(c.getModifiers(),\"<init>\",methodDescriptor,null,exceptions)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 58,
        "startColumnNumber" : 26,
        "endLineNumber" : 58,
        "endColumnNumber" : 108
      },
      "nodeContext" : "m=cw.visitMethod(c.getModifiers(),\"<init>\",methodDescriptor,null,exceptions)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 58,
        "startColumnNumber" : 12,
        "endLineNumber" : 58,
        "endColumnNumber" : 109
      },
      "nodeContext" : "MethodVisitor m=cw.visitMethod(c.getModifiers(),\"<init>\",methodDescriptor,null,exceptions);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 921,
        "startLineNumber" : 51,
        "startColumnNumber" : 61,
        "endLineNumber" : 72,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Class[] et=c.getExceptionTypes();\n  String[] exceptions=new String[et.length];\n  for (int i=0; i < et.length; i++)   exceptions[i]=Type.getInternalName(et[i]);\n  String methodDescriptor=getMethodDescriptor(c);\n  MethodVisitor m=cw.visitMethod(c.getModifiers(),\"<init>\",methodDescriptor,null,exceptions);\n  m.visitCode();\n  int index=1;\n  m.visitVarInsn(ALOAD,0);\n  for (  Class param : c.getParameterTypes()) {\n    Type t=Type.getType(param);\n    m.visitVarInsn(t.getOpcode(ILOAD),index);\n    index+=t.getSize();\n  }\n  m.visitMethodInsn(INVOKESPECIAL,Type.getInternalName(base),\"<init>\",methodDescriptor);\n  m.visitInsn(RETURN);\n  m.visitMaxs(index,index);\n  m.visitEnd();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 147,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 974,
        "startLineNumber" : 51,
        "startColumnNumber" : 8,
        "endLineNumber" : 72,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Constructor c : base.getDeclaredConstructors()) {\n  Class[] et=c.getExceptionTypes();\n  String[] exceptions=new String[et.length];\n  for (int i=0; i < et.length; i++)   exceptions[i]=Type.getInternalName(et[i]);\n  String methodDescriptor=getMethodDescriptor(c);\n  MethodVisitor m=cw.visitMethod(c.getModifiers(),\"<init>\",methodDescriptor,null,exceptions);\n  m.visitCode();\n  int index=1;\n  m.visitVarInsn(ALOAD,0);\n  for (  Class param : c.getParameterTypes()) {\n    Type t=Type.getType(param);\n    m.visitVarInsn(t.getOpcode(ILOAD),index);\n    index+=t.getSize();\n  }\n  m.visitMethodInsn(INVOKESPECIAL,Type.getInternalName(base),\"<init>\",methodDescriptor);\n  m.visitInsn(RETURN);\n  m.visitMaxs(index,index);\n  m.visitEnd();\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 155,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1605,
        "startLineNumber" : 46,
        "startColumnNumber" : 71,
        "endLineNumber" : 84,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ClassWriter cw=new ClassWriter(0);\n  cw.visit(49,ACC_PUBLIC,name.replace('.','/'),null,Type.getInternalName(base),null);\n  for (  Constructor c : base.getDeclaredConstructors()) {\n    Class[] et=c.getExceptionTypes();\n    String[] exceptions=new String[et.length];\n    for (int i=0; i < et.length; i++)     exceptions[i]=Type.getInternalName(et[i]);\n    String methodDescriptor=getMethodDescriptor(c);\n    MethodVisitor m=cw.visitMethod(c.getModifiers(),\"<init>\",methodDescriptor,null,exceptions);\n    m.visitCode();\n    int index=1;\n    m.visitVarInsn(ALOAD,0);\n    for (    Class param : c.getParameterTypes()) {\n      Type t=Type.getType(param);\n      m.visitVarInsn(t.getOpcode(ILOAD),index);\n      index+=t.getSize();\n    }\n    m.visitMethodInsn(INVOKESPECIAL,Type.getInternalName(base),\"<init>\",methodDescriptor);\n    m.visitInsn(RETURN);\n    m.visitMaxs(index,index);\n    m.visitEnd();\n  }\n  cw.visitEnd();\n  byte[] image=cw.toByteArray();\n  Class<? extends T> c=defineClass(name,image,0,image.length).asSubclass(base);\n  Jenkins h=Jenkins.getInstanceOrNull();\n  if (h != null)   ((UberClassLoader)h.pluginManager.uberClassLoader).addNamedClass(name,c);\n  return c;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 243,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1672,
        "startLineNumber" : 46,
        "startColumnNumber" : 4,
        "endLineNumber" : 84,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public <T>Class<? extends T> generate(Class<T> base,String name){\n  ClassWriter cw=new ClassWriter(0);\n  cw.visit(49,ACC_PUBLIC,name.replace('.','/'),null,Type.getInternalName(base),null);\n  for (  Constructor c : base.getDeclaredConstructors()) {\n    Class[] et=c.getExceptionTypes();\n    String[] exceptions=new String[et.length];\n    for (int i=0; i < et.length; i++)     exceptions[i]=Type.getInternalName(et[i]);\n    String methodDescriptor=getMethodDescriptor(c);\n    MethodVisitor m=cw.visitMethod(c.getModifiers(),\"<init>\",methodDescriptor,null,exceptions);\n    m.visitCode();\n    int index=1;\n    m.visitVarInsn(ALOAD,0);\n    for (    Class param : c.getParameterTypes()) {\n      Type t=Type.getType(param);\n      m.visitVarInsn(t.getOpcode(ILOAD),index);\n      index+=t.getSize();\n    }\n    m.visitMethodInsn(INVOKESPECIAL,Type.getInternalName(base),\"<init>\",methodDescriptor);\n    m.visitInsn(RETURN);\n    m.visitMaxs(index,index);\n    m.visitEnd();\n  }\n  cw.visitEnd();\n  byte[] image=cw.toByteArray();\n  Class<? extends T> c=defineClass(name,image,0,image.length).asSubclass(base);\n  Jenkins h=Jenkins.getInstanceOrNull();\n  if (h != null)   ((UberClassLoader)h.pluginManager.uberClassLoader).addNamedClass(name,c);\n  return c;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 265,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 58,
        "startColumnNumber" : 12,
        "endLineNumber" : 58,
        "endColumnNumber" : 109
      },
      "nodeContext" : "MethodVisitor m=cw.visitMethod(c.getModifiers(),\"<init>\",methodDescriptor,null,exceptions);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String[]"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 55,
    "startColumnNumber" : 16,
    "endLineNumber" : 55,
    "endColumnNumber" : 26
  }, {
    "charLength" : 10,
    "startLineNumber" : 58,
    "startColumnNumber" : 97,
    "endLineNumber" : 58,
    "endColumnNumber" : 107
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}