{
  "id" : 27,
  "expression" : "attributes.vertexSize / 4",
  "projectName" : "libgdx@libgdx",
  "commitID" : "3485b16e8979c0141421bc80cb8831b7a0403f67",
  "filePath" : "/gdx/src/com/badlogic/gdx/graphics/g3d/particles/values/WeightMeshSpawnShapeValue.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "attributes.vertexSize / 4",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 54,
      "startColumnNumber" : 27,
      "endLineNumber" : 54,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 54,
        "startColumnNumber" : 26,
        "endLineNumber" : 54,
        "endColumnNumber" : 53
      },
      "nodeContext" : "(attributes.vertexSize / 4)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 54,
        "startColumnNumber" : 19,
        "endLineNumber" : 54,
        "endColumnNumber" : 53
      },
      "nodeContext" : "(short)(attributes.vertexSize / 4)",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 54,
        "startColumnNumber" : 6,
        "endLineNumber" : 54,
        "endColumnNumber" : 53
      },
      "nodeContext" : "vertexSize=(short)(attributes.vertexSize / 4)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 129,
        "startLineNumber" : 54,
        "startColumnNumber" : 2,
        "endLineNumber" : 54,
        "endColumnNumber" : 131
      },
      "nodeContext" : "int vertexSize=(short)(attributes.vertexSize / 4), positionOffset=(short)(attributes.findByUsage(Usage.Position).offset / 4);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 27,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1878,
        "startLineNumber" : 49,
        "startColumnNumber" : 33,
        "endLineNumber" : 81,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  distribution.clear();\n  VertexAttributes attributes=mesh.getVertexAttributes();\n  int indicesCount=mesh.getNumIndices();\n  int vertexCount=mesh.getNumVertices();\n  int vertexSize=(short)(attributes.vertexSize / 4), positionOffset=(short)(attributes.findByUsage(Usage.Position).offset / 4);\n  float[] vertices=new float[vertexCount * vertexSize];\n  mesh.getVertices(vertices);\n  if (indicesCount > 0) {\n    short[] indices=new short[indicesCount];\n    mesh.getIndices(indices);\n    for (int i=0; i < indicesCount; i+=3) {\n      int p1Offset=indices[i] * vertexSize + positionOffset, p2Offset=indices[i + 1] * vertexSize + positionOffset, p3Offset=indices[i + 2] * vertexSize + positionOffset;\n      float x1=vertices[p1Offset], y1=vertices[p1Offset + 1], z1=vertices[p1Offset + 2], x2=vertices[p2Offset], y2=vertices[p2Offset + 1], z2=vertices[p2Offset + 2], x3=vertices[p3Offset], y3=vertices[p3Offset + 1], z3=vertices[p3Offset + 2];\n      float area=Math.abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2f);\n      distribution.add(new Triangle(x1,y1,z1,x2,y2,z2,x3,y3,z3),area);\n    }\n  }\n else {\n    for (int i=0; i < vertexCount; i+=vertexSize) {\n      int p1Offset=i + positionOffset, p2Offset=p1Offset + vertexSize, p3Offset=p2Offset + vertexSize;\n      float x1=vertices[p1Offset], y1=vertices[p1Offset + 1], z1=vertices[p1Offset + 2], x2=vertices[p2Offset], y2=vertices[p2Offset + 1], z2=vertices[p2Offset + 2], x3=vertices[p3Offset], y3=vertices[p3Offset + 1], z3=vertices[p3Offset + 2];\n      float area=Math.abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2f);\n      distribution.add(new Triangle(x1,y1,z1,x2,y2,z2,x3,y3,z3),area);\n    }\n  }\n  distribution.generateNormalized();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 386,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2156,
        "startLineNumber" : 47,
        "startColumnNumber" : 1,
        "endLineNumber" : 81,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Calculate the weights of each triangle of the wrapped mesh. If the mesh has indices: the function will calculate the weight of those triangles. If the mesh has not indices: the function will consider the vertices as a triangle strip. \n */\npublic void calculateWeights(){\n  distribution.clear();\n  VertexAttributes attributes=mesh.getVertexAttributes();\n  int indicesCount=mesh.getNumIndices();\n  int vertexCount=mesh.getNumVertices();\n  int vertexSize=(short)(attributes.vertexSize / 4), positionOffset=(short)(attributes.findByUsage(Usage.Position).offset / 4);\n  float[] vertices=new float[vertexCount * vertexSize];\n  mesh.getVertices(vertices);\n  if (indicesCount > 0) {\n    short[] indices=new short[indicesCount];\n    mesh.getIndices(indices);\n    for (int i=0; i < indicesCount; i+=3) {\n      int p1Offset=indices[i] * vertexSize + positionOffset, p2Offset=indices[i + 1] * vertexSize + positionOffset, p3Offset=indices[i + 2] * vertexSize + positionOffset;\n      float x1=vertices[p1Offset], y1=vertices[p1Offset + 1], z1=vertices[p1Offset + 2], x2=vertices[p2Offset], y2=vertices[p2Offset + 1], z2=vertices[p2Offset + 2], x3=vertices[p3Offset], y3=vertices[p3Offset + 1], z3=vertices[p3Offset + 2];\n      float area=Math.abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2f);\n      distribution.add(new Triangle(x1,y1,z1,x2,y2,z2,x3,y3,z3),area);\n    }\n  }\n else {\n    for (int i=0; i < vertexCount; i+=vertexSize) {\n      int p1Offset=i + positionOffset, p2Offset=p1Offset + vertexSize, p3Offset=p2Offset + vertexSize;\n      float x1=vertices[p1Offset], y1=vertices[p1Offset + 1], z1=vertices[p1Offset + 2], x2=vertices[p2Offset], y2=vertices[p2Offset + 1], z2=vertices[p2Offset + 2], x3=vertices[p3Offset], y3=vertices[p3Offset + 1], z3=vertices[p3Offset + 2];\n      float area=Math.abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2f);\n      distribution.add(new Triangle(x1,y1,z1,x2,y2,z2,x3,y3,z3),area);\n    }\n  }\n  distribution.generateNormalized();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 391,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 129,
        "startLineNumber" : 54,
        "startColumnNumber" : 2,
        "endLineNumber" : 54,
        "endColumnNumber" : 131
      },
      "nodeContext" : "int vertexSize=(short)(attributes.vertexSize / 4), positionOffset=(short)(attributes.findByUsage(Usage.Position).offset / 4);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 27,
      "astHeight" : 9
    },
    "tokenLength" : 4,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 25,
    "startLineNumber" : 54,
    "startColumnNumber" : 27,
    "endLineNumber" : 54,
    "endColumnNumber" : 52
  } ],
  "layoutRelationDataList" : [ ]
}