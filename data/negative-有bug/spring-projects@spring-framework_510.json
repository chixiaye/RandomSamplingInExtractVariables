{
  "id" : 510,
  "expression" : "leftNumber instanceof Long",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-expression/src/main/java/org/springframework/expression/spel/support/StandardTypeComparator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "leftNumber instanceof Long",
    "nodeType" : "InstanceofExpression",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 85,
      "startColumnNumber" : 12,
      "endLineNumber" : 85,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 85,
        "startColumnNumber" : 12,
        "endLineNumber" : 85,
        "endColumnNumber" : 69
      },
      "nodeContext" : "leftNumber instanceof Long || rightNumber instanceof Long",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1017,
        "startLineNumber" : 85,
        "startColumnNumber" : 8,
        "endLineNumber" : 104,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (leftNumber instanceof Long || rightNumber instanceof Long) {\n  return compare(leftNumber.longValue(),rightNumber.longValue());\n}\n else if (leftNumber instanceof Integer || rightNumber instanceof Integer) {\n  return compare(leftNumber.intValue(),rightNumber.intValue());\n}\n else if (leftNumber instanceof Short || rightNumber instanceof Short) {\n  return compare(leftNumber.shortValue(),rightNumber.shortValue());\n}\n else if (leftNumber instanceof Byte || rightNumber instanceof Byte) {\n  return compare(leftNumber.byteValue(),rightNumber.byteValue());\n}\n else {\n  return Double.compare(leftNumber.doubleValue(),rightNumber.doubleValue());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 91,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1367,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 104,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (leftNumber instanceof BigInteger || rightNumber instanceof BigInteger) {\n  BigInteger leftBigInteger=NumberUtils.convertNumberToTargetClass(leftNumber,BigInteger.class);\n  BigInteger rightBigInteger=NumberUtils.convertNumberToTargetClass(rightNumber,BigInteger.class);\n  return leftBigInteger.compareTo(rightBigInteger);\n}\n else if (leftNumber instanceof Long || rightNumber instanceof Long) {\n  return compare(leftNumber.longValue(),rightNumber.longValue());\n}\n else if (leftNumber instanceof Integer || rightNumber instanceof Integer) {\n  return compare(leftNumber.intValue(),rightNumber.intValue());\n}\n else if (leftNumber instanceof Short || rightNumber instanceof Short) {\n  return compare(leftNumber.shortValue(),rightNumber.shortValue());\n}\n else if (leftNumber instanceof Byte || rightNumber instanceof Byte) {\n  return compare(leftNumber.byteValue(),rightNumber.byteValue());\n}\n else {\n  return Double.compare(leftNumber.doubleValue(),rightNumber.doubleValue());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 131,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1524,
        "startLineNumber" : 77,
        "startColumnNumber" : 8,
        "endLineNumber" : 104,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (leftNumber instanceof Float || rightNumber instanceof Float) {\n  return Float.compare(leftNumber.floatValue(),rightNumber.floatValue());\n}\n else if (leftNumber instanceof BigInteger || rightNumber instanceof BigInteger) {\n  BigInteger leftBigInteger=NumberUtils.convertNumberToTargetClass(leftNumber,BigInteger.class);\n  BigInteger rightBigInteger=NumberUtils.convertNumberToTargetClass(rightNumber,BigInteger.class);\n  return leftBigInteger.compareTo(rightBigInteger);\n}\n else if (leftNumber instanceof Long || rightNumber instanceof Long) {\n  return compare(leftNumber.longValue(),rightNumber.longValue());\n}\n else if (leftNumber instanceof Integer || rightNumber instanceof Integer) {\n  return compare(leftNumber.intValue(),rightNumber.intValue());\n}\n else if (leftNumber instanceof Short || rightNumber instanceof Short) {\n  return compare(leftNumber.shortValue(),rightNumber.shortValue());\n}\n else if (leftNumber instanceof Byte || rightNumber instanceof Byte) {\n  return compare(leftNumber.byteValue(),rightNumber.byteValue());\n}\n else {\n  return Double.compare(leftNumber.doubleValue(),rightNumber.doubleValue());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 152,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1686,
        "startLineNumber" : 74,
        "startColumnNumber" : 8,
        "endLineNumber" : 104,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (leftNumber instanceof Double || rightNumber instanceof Double) {\n  return Double.compare(leftNumber.doubleValue(),rightNumber.doubleValue());\n}\n else if (leftNumber instanceof Float || rightNumber instanceof Float) {\n  return Float.compare(leftNumber.floatValue(),rightNumber.floatValue());\n}\n else if (leftNumber instanceof BigInteger || rightNumber instanceof BigInteger) {\n  BigInteger leftBigInteger=NumberUtils.convertNumberToTargetClass(leftNumber,BigInteger.class);\n  BigInteger rightBigInteger=NumberUtils.convertNumberToTargetClass(rightNumber,BigInteger.class);\n  return leftBigInteger.compareTo(rightBigInteger);\n}\n else if (leftNumber instanceof Long || rightNumber instanceof Long) {\n  return compare(leftNumber.longValue(),rightNumber.longValue());\n}\n else if (leftNumber instanceof Integer || rightNumber instanceof Integer) {\n  return compare(leftNumber.intValue(),rightNumber.intValue());\n}\n else if (leftNumber instanceof Short || rightNumber instanceof Short) {\n  return compare(leftNumber.shortValue(),rightNumber.shortValue());\n}\n else if (leftNumber instanceof Byte || rightNumber instanceof Byte) {\n  return compare(leftNumber.byteValue(),rightNumber.byteValue());\n}\n else {\n  return Double.compare(leftNumber.doubleValue(),rightNumber.doubleValue());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 173,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2036,
        "startLineNumber" : 69,
        "startColumnNumber" : 3,
        "endLineNumber" : 104,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) {\n  BigDecimal leftBigDecimal=NumberUtils.convertNumberToTargetClass(leftNumber,BigDecimal.class);\n  BigDecimal rightBigDecimal=NumberUtils.convertNumberToTargetClass(rightNumber,BigDecimal.class);\n  return leftBigDecimal.compareTo(rightBigDecimal);\n}\n else if (leftNumber instanceof Double || rightNumber instanceof Double) {\n  return Double.compare(leftNumber.doubleValue(),rightNumber.doubleValue());\n}\n else if (leftNumber instanceof Float || rightNumber instanceof Float) {\n  return Float.compare(leftNumber.floatValue(),rightNumber.floatValue());\n}\n else if (leftNumber instanceof BigInteger || rightNumber instanceof BigInteger) {\n  BigInteger leftBigInteger=NumberUtils.convertNumberToTargetClass(leftNumber,BigInteger.class);\n  BigInteger rightBigInteger=NumberUtils.convertNumberToTargetClass(rightNumber,BigInteger.class);\n  return leftBigInteger.compareTo(rightBigInteger);\n}\n else if (leftNumber instanceof Long || rightNumber instanceof Long) {\n  return compare(leftNumber.longValue(),rightNumber.longValue());\n}\n else if (leftNumber instanceof Integer || rightNumber instanceof Integer) {\n  return compare(leftNumber.intValue(),rightNumber.intValue());\n}\n else if (leftNumber instanceof Short || rightNumber instanceof Short) {\n  return compare(leftNumber.shortValue(),rightNumber.shortValue());\n}\n else if (leftNumber instanceof Byte || rightNumber instanceof Byte) {\n  return compare(leftNumber.byteValue(),rightNumber.byteValue());\n}\n else {\n  return Double.compare(leftNumber.doubleValue(),rightNumber.doubleValue());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 213,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2124,
        "startLineNumber" : 65,
        "startColumnNumber" : 57,
        "endLineNumber" : 105,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Number leftNumber=(Number)left;\n  Number rightNumber=(Number)right;\n  if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) {\n    BigDecimal leftBigDecimal=NumberUtils.convertNumberToTargetClass(leftNumber,BigDecimal.class);\n    BigDecimal rightBigDecimal=NumberUtils.convertNumberToTargetClass(rightNumber,BigDecimal.class);\n    return leftBigDecimal.compareTo(rightBigDecimal);\n  }\n else   if (leftNumber instanceof Double || rightNumber instanceof Double) {\n    return Double.compare(leftNumber.doubleValue(),rightNumber.doubleValue());\n  }\n else   if (leftNumber instanceof Float || rightNumber instanceof Float) {\n    return Float.compare(leftNumber.floatValue(),rightNumber.floatValue());\n  }\n else   if (leftNumber instanceof BigInteger || rightNumber instanceof BigInteger) {\n    BigInteger leftBigInteger=NumberUtils.convertNumberToTargetClass(leftNumber,BigInteger.class);\n    BigInteger rightBigInteger=NumberUtils.convertNumberToTargetClass(rightNumber,BigInteger.class);\n    return leftBigInteger.compareTo(rightBigInteger);\n  }\n else   if (leftNumber instanceof Long || rightNumber instanceof Long) {\n    return compare(leftNumber.longValue(),rightNumber.longValue());\n  }\n else   if (leftNumber instanceof Integer || rightNumber instanceof Integer) {\n    return compare(leftNumber.intValue(),rightNumber.intValue());\n  }\n else   if (leftNumber instanceof Short || rightNumber instanceof Short) {\n    return compare(leftNumber.shortValue(),rightNumber.shortValue());\n  }\n else   if (leftNumber instanceof Byte || rightNumber instanceof Byte) {\n    return compare(leftNumber.byteValue(),rightNumber.byteValue());\n  }\n else {\n    return Double.compare(leftNumber.doubleValue(),rightNumber.doubleValue());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 232,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2179,
        "startLineNumber" : 65,
        "startColumnNumber" : 2,
        "endLineNumber" : 105,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (left instanceof Number && right instanceof Number) {\n  Number leftNumber=(Number)left;\n  Number rightNumber=(Number)right;\n  if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) {\n    BigDecimal leftBigDecimal=NumberUtils.convertNumberToTargetClass(leftNumber,BigDecimal.class);\n    BigDecimal rightBigDecimal=NumberUtils.convertNumberToTargetClass(rightNumber,BigDecimal.class);\n    return leftBigDecimal.compareTo(rightBigDecimal);\n  }\n else   if (leftNumber instanceof Double || rightNumber instanceof Double) {\n    return Double.compare(leftNumber.doubleValue(),rightNumber.doubleValue());\n  }\n else   if (leftNumber instanceof Float || rightNumber instanceof Float) {\n    return Float.compare(leftNumber.floatValue(),rightNumber.floatValue());\n  }\n else   if (leftNumber instanceof BigInteger || rightNumber instanceof BigInteger) {\n    BigInteger leftBigInteger=NumberUtils.convertNumberToTargetClass(leftNumber,BigInteger.class);\n    BigInteger rightBigInteger=NumberUtils.convertNumberToTargetClass(rightNumber,BigInteger.class);\n    return leftBigInteger.compareTo(rightBigInteger);\n  }\n else   if (leftNumber instanceof Long || rightNumber instanceof Long) {\n    return compare(leftNumber.longValue(),rightNumber.longValue());\n  }\n else   if (leftNumber instanceof Integer || rightNumber instanceof Integer) {\n    return compare(leftNumber.intValue(),rightNumber.intValue());\n  }\n else   if (leftNumber instanceof Short || rightNumber instanceof Short) {\n    return compare(leftNumber.shortValue(),rightNumber.shortValue());\n  }\n else   if (leftNumber instanceof Byte || rightNumber instanceof Byte) {\n    return compare(leftNumber.byteValue(),rightNumber.byteValue());\n  }\n else {\n    return Double.compare(leftNumber.doubleValue(),rightNumber.doubleValue());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 242,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2761,
        "startLineNumber" : 55,
        "startColumnNumber" : 98,
        "endLineNumber" : 117,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (left == null) {\n    return (right == null ? 0 : -1);\n  }\n else   if (right == null) {\n    return 1;\n  }\n  if (left instanceof Number && right instanceof Number) {\n    Number leftNumber=(Number)left;\n    Number rightNumber=(Number)right;\n    if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) {\n      BigDecimal leftBigDecimal=NumberUtils.convertNumberToTargetClass(leftNumber,BigDecimal.class);\n      BigDecimal rightBigDecimal=NumberUtils.convertNumberToTargetClass(rightNumber,BigDecimal.class);\n      return leftBigDecimal.compareTo(rightBigDecimal);\n    }\n else     if (leftNumber instanceof Double || rightNumber instanceof Double) {\n      return Double.compare(leftNumber.doubleValue(),rightNumber.doubleValue());\n    }\n else     if (leftNumber instanceof Float || rightNumber instanceof Float) {\n      return Float.compare(leftNumber.floatValue(),rightNumber.floatValue());\n    }\n else     if (leftNumber instanceof BigInteger || rightNumber instanceof BigInteger) {\n      BigInteger leftBigInteger=NumberUtils.convertNumberToTargetClass(leftNumber,BigInteger.class);\n      BigInteger rightBigInteger=NumberUtils.convertNumberToTargetClass(rightNumber,BigInteger.class);\n      return leftBigInteger.compareTo(rightBigInteger);\n    }\n else     if (leftNumber instanceof Long || rightNumber instanceof Long) {\n      return compare(leftNumber.longValue(),rightNumber.longValue());\n    }\n else     if (leftNumber instanceof Integer || rightNumber instanceof Integer) {\n      return compare(leftNumber.intValue(),rightNumber.intValue());\n    }\n else     if (leftNumber instanceof Short || rightNumber instanceof Short) {\n      return compare(leftNumber.shortValue(),rightNumber.shortValue());\n    }\n else     if (leftNumber instanceof Byte || rightNumber instanceof Byte) {\n      return compare(leftNumber.byteValue(),rightNumber.byteValue());\n    }\n else {\n      return Double.compare(leftNumber.doubleValue(),rightNumber.doubleValue());\n    }\n  }\n  try {\n    if (left instanceof Comparable) {\n      return ((Comparable<Object>)left).compareTo(right);\n    }\n  }\n catch (  ClassCastException ex) {\n    throw new SpelEvaluationException(ex,SpelMessage.NOT_COMPARABLE,left.getClass(),right.getClass());\n  }\n  throw new SpelEvaluationException(SpelMessage.NOT_COMPARABLE,left.getClass(),right.getClass());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 317,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2901,
        "startLineNumber" : 53,
        "startColumnNumber" : 1,
        "endLineNumber" : 117,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override @SuppressWarnings(\"unchecked\") public int compare(@Nullable Object left,@Nullable Object right) throws SpelEvaluationException {\n  if (left == null) {\n    return (right == null ? 0 : -1);\n  }\n else   if (right == null) {\n    return 1;\n  }\n  if (left instanceof Number && right instanceof Number) {\n    Number leftNumber=(Number)left;\n    Number rightNumber=(Number)right;\n    if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) {\n      BigDecimal leftBigDecimal=NumberUtils.convertNumberToTargetClass(leftNumber,BigDecimal.class);\n      BigDecimal rightBigDecimal=NumberUtils.convertNumberToTargetClass(rightNumber,BigDecimal.class);\n      return leftBigDecimal.compareTo(rightBigDecimal);\n    }\n else     if (leftNumber instanceof Double || rightNumber instanceof Double) {\n      return Double.compare(leftNumber.doubleValue(),rightNumber.doubleValue());\n    }\n else     if (leftNumber instanceof Float || rightNumber instanceof Float) {\n      return Float.compare(leftNumber.floatValue(),rightNumber.floatValue());\n    }\n else     if (leftNumber instanceof BigInteger || rightNumber instanceof BigInteger) {\n      BigInteger leftBigInteger=NumberUtils.convertNumberToTargetClass(leftNumber,BigInteger.class);\n      BigInteger rightBigInteger=NumberUtils.convertNumberToTargetClass(rightNumber,BigInteger.class);\n      return leftBigInteger.compareTo(rightBigInteger);\n    }\n else     if (leftNumber instanceof Long || rightNumber instanceof Long) {\n      return compare(leftNumber.longValue(),rightNumber.longValue());\n    }\n else     if (leftNumber instanceof Integer || rightNumber instanceof Integer) {\n      return compare(leftNumber.intValue(),rightNumber.intValue());\n    }\n else     if (leftNumber instanceof Short || rightNumber instanceof Short) {\n      return compare(leftNumber.shortValue(),rightNumber.shortValue());\n    }\n else     if (leftNumber instanceof Byte || rightNumber instanceof Byte) {\n      return compare(leftNumber.byteValue(),rightNumber.byteValue());\n    }\n else {\n      return Double.compare(leftNumber.doubleValue(),rightNumber.doubleValue());\n    }\n  }\n  try {\n    if (left instanceof Comparable) {\n      return ((Comparable<Object>)left).compareTo(right);\n    }\n  }\n catch (  ClassCastException ex) {\n    throw new SpelEvaluationException(ex,SpelMessage.NOT_COMPARABLE,left.getClass(),right.getClass());\n  }\n  throw new SpelEvaluationException(SpelMessage.NOT_COMPARABLE,left.getClass(),right.getClass());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 340,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 85,
        "startColumnNumber" : 12,
        "endLineNumber" : 85,
        "endColumnNumber" : 69
      },
      "nodeContext" : "leftNumber instanceof Long || rightNumber instanceof Long",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 26,
    "startLineNumber" : 85,
    "startColumnNumber" : 12,
    "endLineNumber" : 85,
    "endColumnNumber" : 38
  } ],
  "layoutRelationDataList" : [ ]
}