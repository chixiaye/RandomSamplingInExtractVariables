{
  "id" : 393,
  "expression" : "h1.getBucketSize()",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/extensions-core/histogram/src/test/java/org/apache/druid/query/aggregation/histogram/FixedBucketsHistogramVectorAggregatorTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "h1.getBucketSize()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 147,
      "startColumnNumber" : 30,
      "endLineNumber" : 147,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 147,
        "startColumnNumber" : 4,
        "endLineNumber" : 147,
        "endColumnNumber" : 55
      },
      "nodeContext" : "Assert.assertEquals(10.0,h1.getBucketSize(),0.01)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 147,
        "startColumnNumber" : 4,
        "endLineNumber" : 147,
        "endColumnNumber" : 56
      },
      "nodeContext" : "Assert.assertEquals(10.0,h1.getBucketSize(),0.01);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4005,
        "startLineNumber" : 119,
        "startColumnNumber" : 2,
        "endLineNumber" : 195,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int size=FixedBucketsHistogram.getFullStorageSize(2);\n  ByteBuffer byteBuffer=ByteBuffer.allocate(size * 2);\n  FixedBucketsHistogramAggregatorFactory factory=buildHistogramAggFactory(\"field_2\");\n  VectorAggregator vectorAggregator=factory.factorizeVector(vectorColumnSelectorFactory);\n  int[] positions=new int[]{0,size};\n  vectorAggregator.init(byteBuffer,positions[0]);\n  vectorAggregator.init(byteBuffer,positions[1]);\n  vectorAggregator.aggregate(byteBuffer,2,positions,null,0);\n  FixedBucketsHistogram h0=(FixedBucketsHistogram)vectorAggregator.get(byteBuffer,0);\n  Assert.assertEquals(2,h0.getNumBuckets());\n  Assert.assertEquals(10.0,h0.getBucketSize(),0.01);\n  Assert.assertEquals(1,h0.getLowerLimit(),0.01);\n  Assert.assertEquals(21,h0.getUpperLimit(),0.01);\n  Assert.assertEquals(FixedBucketsHistogram.OutlierHandlingMode.OVERFLOW,h0.getOutlierHandlingMode());\n  Assert.assertArrayEquals(new long[]{1,0},h0.getHistogram());\n  Assert.assertEquals(1,h0.getCount());\n  Assert.assertEquals(1.0,h0.getMin(),0.01);\n  Assert.assertEquals(1.0,h0.getMax(),0.01);\n  Assert.assertEquals(0,h0.getMissingValueCount());\n  Assert.assertEquals(0,h0.getLowerOutlierCount());\n  Assert.assertEquals(0,h0.getUpperOutlierCount());\n  FixedBucketsHistogram h1=(FixedBucketsHistogram)vectorAggregator.get(byteBuffer,positions[1]);\n  Assert.assertEquals(2,h1.getNumBuckets());\n  Assert.assertEquals(10.0,h1.getBucketSize(),0.01);\n  Assert.assertEquals(1,h1.getLowerLimit(),0.01);\n  Assert.assertEquals(21,h1.getUpperLimit(),0.01);\n  Assert.assertEquals(FixedBucketsHistogram.OutlierHandlingMode.OVERFLOW,h1.getOutlierHandlingMode());\n  Assert.assertArrayEquals(new long[]{0,1},h1.getHistogram());\n  Assert.assertEquals(1,h1.getCount());\n  Assert.assertEquals(12.0,h1.getMin(),0.01);\n  Assert.assertEquals(12.0,h1.getMax(),0.01);\n  Assert.assertEquals(0,h1.getMissingValueCount());\n  Assert.assertEquals(0,h1.getLowerOutlierCount());\n  Assert.assertEquals(0,h1.getUpperOutlierCount());\n  byteBuffer=ByteBuffer.allocate(size * 2);\n  vectorAggregator.init(byteBuffer,positions[0]);\n  vectorAggregator.init(byteBuffer,positions[1]);\n  vectorAggregator.aggregate(byteBuffer,2,positions,new int[]{2,3},0);\n  FixedBucketsHistogram h2=(FixedBucketsHistogram)vectorAggregator.get(byteBuffer,0);\n  Assert.assertEquals(2,h2.getNumBuckets());\n  Assert.assertEquals(10.0,h2.getBucketSize(),0.01);\n  Assert.assertEquals(1,h2.getLowerLimit(),0.01);\n  Assert.assertEquals(21,h2.getUpperLimit(),0.01);\n  Assert.assertEquals(FixedBucketsHistogram.OutlierHandlingMode.OVERFLOW,h2.getOutlierHandlingMode());\n  Assert.assertArrayEquals(new long[]{1,0},h2.getHistogram());\n  Assert.assertEquals(1,h2.getCount());\n  Assert.assertEquals(3.0,h2.getMin(),0.01);\n  Assert.assertEquals(3.0,h2.getMax(),0.01);\n  Assert.assertEquals(0,h2.getMissingValueCount());\n  Assert.assertEquals(0,h2.getLowerOutlierCount());\n  Assert.assertEquals(0,h2.getUpperOutlierCount());\n  FixedBucketsHistogram h3=(FixedBucketsHistogram)vectorAggregator.get(byteBuffer,positions[1]);\n  Assert.assertEquals(2,h3.getNumBuckets());\n  Assert.assertEquals(10.0,h3.getBucketSize(),0.01);\n  Assert.assertEquals(1,h3.getLowerLimit(),0.01);\n  Assert.assertEquals(21,h3.getUpperLimit(),0.01);\n  Assert.assertEquals(FixedBucketsHistogram.OutlierHandlingMode.OVERFLOW,h3.getOutlierHandlingMode());\n  Assert.assertArrayEquals(new long[]{0,1},h3.getHistogram());\n  Assert.assertEquals(1,h3.getCount());\n  Assert.assertEquals(14.0,h3.getMin(),0.01);\n  Assert.assertEquals(14.0,h3.getMax(),0.01);\n  Assert.assertEquals(0,h3.getMissingValueCount());\n  Assert.assertEquals(0,h3.getLowerOutlierCount());\n  Assert.assertEquals(0,h3.getUpperOutlierCount());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 615,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4057,
        "startLineNumber" : 117,
        "startColumnNumber" : 2,
        "endLineNumber" : 195,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testAggregateMultiPositions(){\n  int size=FixedBucketsHistogram.getFullStorageSize(2);\n  ByteBuffer byteBuffer=ByteBuffer.allocate(size * 2);\n  FixedBucketsHistogramAggregatorFactory factory=buildHistogramAggFactory(\"field_2\");\n  VectorAggregator vectorAggregator=factory.factorizeVector(vectorColumnSelectorFactory);\n  int[] positions=new int[]{0,size};\n  vectorAggregator.init(byteBuffer,positions[0]);\n  vectorAggregator.init(byteBuffer,positions[1]);\n  vectorAggregator.aggregate(byteBuffer,2,positions,null,0);\n  FixedBucketsHistogram h0=(FixedBucketsHistogram)vectorAggregator.get(byteBuffer,0);\n  Assert.assertEquals(2,h0.getNumBuckets());\n  Assert.assertEquals(10.0,h0.getBucketSize(),0.01);\n  Assert.assertEquals(1,h0.getLowerLimit(),0.01);\n  Assert.assertEquals(21,h0.getUpperLimit(),0.01);\n  Assert.assertEquals(FixedBucketsHistogram.OutlierHandlingMode.OVERFLOW,h0.getOutlierHandlingMode());\n  Assert.assertArrayEquals(new long[]{1,0},h0.getHistogram());\n  Assert.assertEquals(1,h0.getCount());\n  Assert.assertEquals(1.0,h0.getMin(),0.01);\n  Assert.assertEquals(1.0,h0.getMax(),0.01);\n  Assert.assertEquals(0,h0.getMissingValueCount());\n  Assert.assertEquals(0,h0.getLowerOutlierCount());\n  Assert.assertEquals(0,h0.getUpperOutlierCount());\n  FixedBucketsHistogram h1=(FixedBucketsHistogram)vectorAggregator.get(byteBuffer,positions[1]);\n  Assert.assertEquals(2,h1.getNumBuckets());\n  Assert.assertEquals(10.0,h1.getBucketSize(),0.01);\n  Assert.assertEquals(1,h1.getLowerLimit(),0.01);\n  Assert.assertEquals(21,h1.getUpperLimit(),0.01);\n  Assert.assertEquals(FixedBucketsHistogram.OutlierHandlingMode.OVERFLOW,h1.getOutlierHandlingMode());\n  Assert.assertArrayEquals(new long[]{0,1},h1.getHistogram());\n  Assert.assertEquals(1,h1.getCount());\n  Assert.assertEquals(12.0,h1.getMin(),0.01);\n  Assert.assertEquals(12.0,h1.getMax(),0.01);\n  Assert.assertEquals(0,h1.getMissingValueCount());\n  Assert.assertEquals(0,h1.getLowerOutlierCount());\n  Assert.assertEquals(0,h1.getUpperOutlierCount());\n  byteBuffer=ByteBuffer.allocate(size * 2);\n  vectorAggregator.init(byteBuffer,positions[0]);\n  vectorAggregator.init(byteBuffer,positions[1]);\n  vectorAggregator.aggregate(byteBuffer,2,positions,new int[]{2,3},0);\n  FixedBucketsHistogram h2=(FixedBucketsHistogram)vectorAggregator.get(byteBuffer,0);\n  Assert.assertEquals(2,h2.getNumBuckets());\n  Assert.assertEquals(10.0,h2.getBucketSize(),0.01);\n  Assert.assertEquals(1,h2.getLowerLimit(),0.01);\n  Assert.assertEquals(21,h2.getUpperLimit(),0.01);\n  Assert.assertEquals(FixedBucketsHistogram.OutlierHandlingMode.OVERFLOW,h2.getOutlierHandlingMode());\n  Assert.assertArrayEquals(new long[]{1,0},h2.getHistogram());\n  Assert.assertEquals(1,h2.getCount());\n  Assert.assertEquals(3.0,h2.getMin(),0.01);\n  Assert.assertEquals(3.0,h2.getMax(),0.01);\n  Assert.assertEquals(0,h2.getMissingValueCount());\n  Assert.assertEquals(0,h2.getLowerOutlierCount());\n  Assert.assertEquals(0,h2.getUpperOutlierCount());\n  FixedBucketsHistogram h3=(FixedBucketsHistogram)vectorAggregator.get(byteBuffer,positions[1]);\n  Assert.assertEquals(2,h3.getNumBuckets());\n  Assert.assertEquals(10.0,h3.getBucketSize(),0.01);\n  Assert.assertEquals(1,h3.getLowerLimit(),0.01);\n  Assert.assertEquals(21,h3.getUpperLimit(),0.01);\n  Assert.assertEquals(FixedBucketsHistogram.OutlierHandlingMode.OVERFLOW,h3.getOutlierHandlingMode());\n  Assert.assertArrayEquals(new long[]{0,1},h3.getHistogram());\n  Assert.assertEquals(1,h3.getCount());\n  Assert.assertEquals(14.0,h3.getMin(),0.01);\n  Assert.assertEquals(14.0,h3.getMax(),0.01);\n  Assert.assertEquals(0,h3.getMissingValueCount());\n  Assert.assertEquals(0,h3.getLowerOutlierCount());\n  Assert.assertEquals(0,h3.getUpperOutlierCount());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 621,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 147,
        "startColumnNumber" : 4,
        "endLineNumber" : 147,
        "endColumnNumber" : 56
      },
      "nodeContext" : "Assert.assertEquals(10.0,h1.getBucketSize(),0.01);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "double"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 147,
    "startColumnNumber" : 30,
    "endLineNumber" : 147,
    "endColumnNumber" : 48
  } ],
  "layoutRelationDataList" : [ ]
}