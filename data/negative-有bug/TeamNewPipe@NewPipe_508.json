{
  "id" : 508,
  "expression" : "DownloadMission.ERROR_PERMISSION_DENIED",
  "projectName" : "TeamNewPipe@NewPipe",
  "commitID" : "d7574973e97fa7a3a21aa59967311f6091941830",
  "filePath" : "/app/src/main/java/us/shandian/giga/get/DownloadInitializer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "DownloadMission.ERROR_PERMISSION_DENIED",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 39,
      "startLineNumber" : 186,
      "startColumnNumber" : 41,
      "endLineNumber" : 186,
      "endColumnNumber" : 80
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 186,
        "startColumnNumber" : 20,
        "endLineNumber" : 186,
        "endColumnNumber" : 84
      },
      "nodeContext" : "mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 186,
        "startColumnNumber" : 20,
        "endLineNumber" : 186,
        "endColumnNumber" : 85
      },
      "nodeContext" : "mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 185,
        "startColumnNumber" : 94,
        "endLineNumber" : 188,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 211,
        "startLineNumber" : 185,
        "startColumnNumber" : 16,
        "endLineNumber" : 188,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n  mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 923,
        "startLineNumber" : 175,
        "startColumnNumber" : 34,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 89,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 943,
        "startLineNumber" : 175,
        "startColumnNumber" : 14,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "catch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 94,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 186,
        "startColumnNumber" : 20,
        "endLineNumber" : 186,
        "endColumnNumber" : 85
      },
      "nodeContext" : "mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 39,
    "startLineNumber" : 186,
    "startColumnNumber" : 41,
    "endLineNumber" : 186,
    "endColumnNumber" : 80
  } ],
  "layoutRelationDataList" : [ ]
}