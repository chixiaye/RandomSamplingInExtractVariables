{
  "id" : 475,
  "expression" : "typeID == Types.OTHER",
  "projectName" : "dbeaver@dbeaver",
  "commitID" : "aecf0da5baef5ea4aa1675578670cf057248123d",
  "filePath" : "/plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/data/PostgreValueHandlerProvider.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "typeID == Types.OTHER",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 87,
      "startColumnNumber" : 28,
      "endLineNumber" : 87,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 87,
        "startColumnNumber" : 28,
        "endLineNumber" : 87,
        "endColumnNumber" : 100
      },
      "nodeContext" : "typeID == Types.OTHER || typedObject.getDataKind() == DBPDataKind.STRING",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 176,
        "startLineNumber" : 87,
        "startColumnNumber" : 24,
        "endLineNumber" : 89,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (typeID == Types.OTHER || typedObject.getDataKind() == DBPDataKind.STRING) {\n  return PostgreStringValueHandler.INSTANCE;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1686,
        "startLineNumber" : 63,
        "startColumnNumber" : 16,
        "endLineNumber" : 90,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (typedObject.getTypeName()) {\ncase PostgreConstants.TYPE_JSONB:case PostgreConstants.TYPE_JSON:  return PostgreJSONValueHandler.INSTANCE;\ncase PostgreConstants.TYPE_HSTORE:return PostgreHStoreValueHandler.INSTANCE;\ncase PostgreConstants.TYPE_BIT:return PostgreBitStringValueHandler.INSTANCE;\ncase PostgreConstants.TYPE_REFCURSOR:return PostgreRefCursorValueHandler.INSTANCE;\ncase PostgreConstants.TYPE_MONEY:return PostgreMoneyValueHandler.INSTANCE;\ncase PostgreConstants.TYPE_GEOMETRY:case PostgreConstants.TYPE_GEOGRAPHY:if (((PostgreDataSource)dataSource).getServerType() instanceof PostgreServerRedshift) {\nreturn RedshiftGeometryValueHandler.INSTANCE;\n}\nreturn PostgreGeometryValueHandler.INSTANCE;\ncase PostgreConstants.TYPE_INTERVAL:return PostgreIntervalValueHandler.INSTANCE;\ndefault:if (PostgreConstants.SERIAL_TYPES.containsKey(typedObject.getTypeName())) {\nreturn new JDBCNumberValueHandler(typedObject,preferences);\n}\nif (typeID == Types.OTHER || typedObject.getDataKind() == DBPDataKind.STRING) {\nreturn PostgreStringValueHandler.INSTANCE;\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 120,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2408,
        "startLineNumber" : 47,
        "startColumnNumber" : 8,
        "endLineNumber" : 91,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (typeID) {\ncase Types.ARRAY:  return PostgreArrayValueHandler.INSTANCE;\ncase Types.STRUCT:return PostgreStructValueHandler.INSTANCE;\ncase Types.DATE:case Types.TIME:case Types.TIME_WITH_TIMEZONE:case Types.TIMESTAMP:case Types.TIMESTAMP_WITH_TIMEZONE:if (((PostgreDataSource)dataSource).getServerType().supportsTemporalAccessor()) {\nreturn new PostgreTemporalAccessorValueHandler(preferences);\n}\n else {\nreturn new PostgreDateTimeValueHandler(preferences);\n}\ndefault:switch (typedObject.getTypeName()) {\ncase PostgreConstants.TYPE_JSONB:case PostgreConstants.TYPE_JSON:return PostgreJSONValueHandler.INSTANCE;\ncase PostgreConstants.TYPE_HSTORE:return PostgreHStoreValueHandler.INSTANCE;\ncase PostgreConstants.TYPE_BIT:return PostgreBitStringValueHandler.INSTANCE;\ncase PostgreConstants.TYPE_REFCURSOR:return PostgreRefCursorValueHandler.INSTANCE;\ncase PostgreConstants.TYPE_MONEY:return PostgreMoneyValueHandler.INSTANCE;\ncase PostgreConstants.TYPE_GEOMETRY:case PostgreConstants.TYPE_GEOGRAPHY:if (((PostgreDataSource)dataSource).getServerType() instanceof PostgreServerRedshift) {\nreturn RedshiftGeometryValueHandler.INSTANCE;\n}\nreturn PostgreGeometryValueHandler.INSTANCE;\ncase PostgreConstants.TYPE_INTERVAL:return PostgreIntervalValueHandler.INSTANCE;\ndefault:if (PostgreConstants.SERIAL_TYPES.containsKey(typedObject.getTypeName())) {\nreturn new JDBCNumberValueHandler(typedObject,preferences);\n}\nif (typeID == Types.OTHER || typedObject.getDataKind() == DBPDataKind.STRING) {\nreturn PostgreStringValueHandler.INSTANCE;\n}\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 181,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2915,
        "startLineNumber" : 40,
        "startColumnNumber" : 128,
        "endLineNumber" : 93,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int typeID=typedObject.getTypeID();\nswitch (typeID) {\ncase Types.ARRAY:    return PostgreArrayValueHandler.INSTANCE;\ncase Types.STRUCT:  return PostgreStructValueHandler.INSTANCE;\ncase Types.DATE:case Types.TIME:case Types.TIME_WITH_TIMEZONE:case Types.TIMESTAMP:case Types.TIMESTAMP_WITH_TIMEZONE:if (((PostgreDataSource)dataSource).getServerType().supportsTemporalAccessor()) {\n  return new PostgreTemporalAccessorValueHandler(preferences);\n}\n else {\n  return new PostgreDateTimeValueHandler(preferences);\n}\ndefault:switch (typedObject.getTypeName()) {\ncase PostgreConstants.TYPE_JSONB:case PostgreConstants.TYPE_JSON:return PostgreJSONValueHandler.INSTANCE;\ncase PostgreConstants.TYPE_HSTORE:return PostgreHStoreValueHandler.INSTANCE;\ncase PostgreConstants.TYPE_BIT:return PostgreBitStringValueHandler.INSTANCE;\ncase PostgreConstants.TYPE_REFCURSOR:return PostgreRefCursorValueHandler.INSTANCE;\ncase PostgreConstants.TYPE_MONEY:return PostgreMoneyValueHandler.INSTANCE;\ncase PostgreConstants.TYPE_GEOMETRY:case PostgreConstants.TYPE_GEOGRAPHY:if (((PostgreDataSource)dataSource).getServerType() instanceof PostgreServerRedshift) {\nreturn RedshiftGeometryValueHandler.INSTANCE;\n}\nreturn PostgreGeometryValueHandler.INSTANCE;\ncase PostgreConstants.TYPE_INTERVAL:return PostgreIntervalValueHandler.INSTANCE;\ndefault:if (PostgreConstants.SERIAL_TYPES.containsKey(typedObject.getTypeName())) {\nreturn new JDBCNumberValueHandler(typedObject,preferences);\n}\nif (typeID == Types.OTHER || typedObject.getDataKind() == DBPDataKind.STRING) {\nreturn PostgreStringValueHandler.INSTANCE;\n}\n}\n}\nreturn super.getValueHandler(dataSource,preferences,typedObject);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 195,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3067,
        "startLineNumber" : 38,
        "startColumnNumber" : 4,
        "endLineNumber" : 93,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Nullable @Override public DBDValueHandler getValueHandler(DBPDataSource dataSource,DBDFormatSettings preferences,DBSTypedObject typedObject){\n  int typeID=typedObject.getTypeID();\nswitch (typeID) {\ncase Types.ARRAY:    return PostgreArrayValueHandler.INSTANCE;\ncase Types.STRUCT:  return PostgreStructValueHandler.INSTANCE;\ncase Types.DATE:case Types.TIME:case Types.TIME_WITH_TIMEZONE:case Types.TIMESTAMP:case Types.TIMESTAMP_WITH_TIMEZONE:if (((PostgreDataSource)dataSource).getServerType().supportsTemporalAccessor()) {\n  return new PostgreTemporalAccessorValueHandler(preferences);\n}\n else {\n  return new PostgreDateTimeValueHandler(preferences);\n}\ndefault:switch (typedObject.getTypeName()) {\ncase PostgreConstants.TYPE_JSONB:case PostgreConstants.TYPE_JSON:return PostgreJSONValueHandler.INSTANCE;\ncase PostgreConstants.TYPE_HSTORE:return PostgreHStoreValueHandler.INSTANCE;\ncase PostgreConstants.TYPE_BIT:return PostgreBitStringValueHandler.INSTANCE;\ncase PostgreConstants.TYPE_REFCURSOR:return PostgreRefCursorValueHandler.INSTANCE;\ncase PostgreConstants.TYPE_MONEY:return PostgreMoneyValueHandler.INSTANCE;\ncase PostgreConstants.TYPE_GEOMETRY:case PostgreConstants.TYPE_GEOGRAPHY:if (((PostgreDataSource)dataSource).getServerType() instanceof PostgreServerRedshift) {\nreturn RedshiftGeometryValueHandler.INSTANCE;\n}\nreturn PostgreGeometryValueHandler.INSTANCE;\ncase PostgreConstants.TYPE_INTERVAL:return PostgreIntervalValueHandler.INSTANCE;\ndefault:if (PostgreConstants.SERIAL_TYPES.containsKey(typedObject.getTypeName())) {\nreturn new JDBCNumberValueHandler(typedObject,preferences);\n}\nif (typeID == Types.OTHER || typedObject.getDataKind() == DBPDataKind.STRING) {\nreturn PostgreStringValueHandler.INSTANCE;\n}\n}\n}\nreturn super.getValueHandler(dataSource,preferences,typedObject);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 216,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 87,
        "startColumnNumber" : 28,
        "endLineNumber" : 87,
        "endColumnNumber" : 100
      },
      "nodeContext" : "typeID == Types.OTHER || typedObject.getDataKind() == DBPDataKind.STRING",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 87,
    "startColumnNumber" : 28,
    "endLineNumber" : 87,
    "endColumnNumber" : 49
  } ],
  "layoutRelationDataList" : [ ]
}