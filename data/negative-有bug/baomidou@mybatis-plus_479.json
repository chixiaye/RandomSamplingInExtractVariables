{
  "id" : 479,
  "expression" : "results.getObject(fc)",
  "projectName" : "baomidou@mybatis-plus",
  "commitID" : "7815611a659da4cc8d5443f5ef4c10ca0d937582",
  "filePath" : "/mybatis-plus-generate/src/main/java/com/baomidou/mybatisplus/generator/config/builder/ConfigBuilder.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "results.getObject(fc)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 591,
      "startColumnNumber" : 42,
      "endLineNumber" : 591,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 591,
        "startColumnNumber" : 24,
        "endLineNumber" : 591,
        "endColumnNumber" : 64
      },
      "nodeContext" : "customMap.put(fc,results.getObject(fc))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 591,
        "startColumnNumber" : 24,
        "endLineNumber" : 591,
        "endColumnNumber" : 65
      },
      "nodeContext" : "customMap.put(fc,results.getObject(fc));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 590,
        "startColumnNumber" : 42,
        "endLineNumber" : 592,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  customMap.put(fc,results.getObject(fc));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 590,
        "startColumnNumber" : 20,
        "endLineNumber" : 592,
        "endColumnNumber" : 21
      },
      "nodeContext" : "for (String fc : fcs) {\n  customMap.put(fc,results.getObject(fc));\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 271,
        "startLineNumber" : 588,
        "startColumnNumber" : 33,
        "endLineNumber" : 594,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  Map<String,Object> customMap=new HashMap<>();\n  for (  String fc : fcs) {\n    customMap.put(fc,results.getObject(fc));\n  }\n  field.setCustomMap(customMap);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 36,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 288,
        "startLineNumber" : 588,
        "startColumnNumber" : 16,
        "endLineNumber" : 594,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (null != fcs) {\n  Map<String,Object> customMap=new HashMap<>();\n  for (  String fc : fcs) {\n    customMap.put(fc,results.getObject(fc));\n  }\n  field.setCustomMap(customMap);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 40,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 2218,
        "startLineNumber" : 571,
        "startColumnNumber" : 35,
        "endLineNumber" : 617,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  TableField field=new TableField();\n  String key=results.getString(dbQuery.fieldKey());\n  boolean isId=StringUtils.isNotEmpty(key) && key.toUpperCase().equals(\"PRI\");\n  if (isId && !haveId) {\n    field.setKeyFlag(true);\n    if (dbQuery.isKeyIdentity(results)) {\n      field.setKeyIdentityFlag(true);\n    }\n    haveId=true;\n  }\n else {\n    field.setKeyFlag(false);\n  }\n  String[] fcs=dbQuery.fieldCustom();\n  if (null != fcs) {\n    Map<String,Object> customMap=new HashMap<>();\n    for (    String fc : fcs) {\n      customMap.put(fc,results.getObject(fc));\n    }\n    field.setCustomMap(customMap);\n  }\n  field.setName(results.getString(dbQuery.fieldName()));\n  field.setType(results.getString(dbQuery.fieldType()));\n  field.setPropertyName(strategyConfig,processName(field.getName(),strategy));\n  field.setColumnType(dataSourceConfig.getTypeConvert().processTypeConvert(field.getType()));\n  field.setComment(results.getString(dbQuery.fieldComment()));\n  if (strategyConfig.includeSuperEntityColumns(field.getName())) {\n    commonFieldList.add(field);\n    continue;\n  }\n  List<TableFill> tableFillList=this.getStrategyConfig().getTableFillList();\n  if (null != tableFillList) {\n    for (    TableFill tableFill : tableFillList) {\n      if (tableFill.getFieldName().equals(field.getName())) {\n        field.setFill(tableFill.getFieldFill().name());\n        break;\n      }\n    }\n  }\n  fieldList.add(field);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 234,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2241,
        "startLineNumber" : 571,
        "startColumnNumber" : 12,
        "endLineNumber" : 617,
        "endColumnNumber" : 13
      },
      "nodeContext" : "while (results.next()) {\n  TableField field=new TableField();\n  String key=results.getString(dbQuery.fieldKey());\n  boolean isId=StringUtils.isNotEmpty(key) && key.toUpperCase().equals(\"PRI\");\n  if (isId && !haveId) {\n    field.setKeyFlag(true);\n    if (dbQuery.isKeyIdentity(results)) {\n      field.setKeyIdentityFlag(true);\n    }\n    haveId=true;\n  }\n else {\n    field.setKeyFlag(false);\n  }\n  String[] fcs=dbQuery.fieldCustom();\n  if (null != fcs) {\n    Map<String,Object> customMap=new HashMap<>();\n    for (    String fc : fcs) {\n      customMap.put(fc,results.getObject(fc));\n    }\n    field.setCustomMap(customMap);\n  }\n  field.setName(results.getString(dbQuery.fieldName()));\n  field.setType(results.getString(dbQuery.fieldType()));\n  field.setPropertyName(strategyConfig,processName(field.getName(),strategy));\n  field.setColumnType(dataSourceConfig.getTypeConvert().processTypeConvert(field.getType()));\n  field.setComment(results.getString(dbQuery.fieldComment()));\n  if (strategyConfig.includeSuperEntityColumns(field.getName())) {\n    commonFieldList.add(field);\n    continue;\n  }\n  List<TableFill> tableFillList=this.getStrategyConfig().getTableFillList();\n  if (null != tableFillList) {\n    for (    TableFill tableFill : tableFillList) {\n      if (tableFill.getFieldName().equals(field.getName())) {\n        field.setFill(tableFill.getFieldFill().name());\n        break;\n      }\n    }\n  }\n  fieldList.add(field);\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 238,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2785,
        "startLineNumber" : 562,
        "startColumnNumber" : 12,
        "endLineNumber" : 618,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String tableFieldsSql=dbQuery.tableFieldsSql();\n  if (DbType.POSTGRE_SQL == dbQuery.dbType()) {\n    tableFieldsSql=String.format(tableFieldsSql,dataSourceConfig.getSchemaname(),tableInfo.getName());\n  }\n else {\n    tableFieldsSql=String.format(tableFieldsSql,tableInfo.getName());\n  }\n  PreparedStatement preparedStatement=connection.prepareStatement(tableFieldsSql);\n  ResultSet results=preparedStatement.executeQuery();\n  while (results.next()) {\n    TableField field=new TableField();\n    String key=results.getString(dbQuery.fieldKey());\n    boolean isId=StringUtils.isNotEmpty(key) && key.toUpperCase().equals(\"PRI\");\n    if (isId && !haveId) {\n      field.setKeyFlag(true);\n      if (dbQuery.isKeyIdentity(results)) {\n        field.setKeyIdentityFlag(true);\n      }\n      haveId=true;\n    }\n else {\n      field.setKeyFlag(false);\n    }\n    String[] fcs=dbQuery.fieldCustom();\n    if (null != fcs) {\n      Map<String,Object> customMap=new HashMap<>();\n      for (      String fc : fcs) {\n        customMap.put(fc,results.getObject(fc));\n      }\n      field.setCustomMap(customMap);\n    }\n    field.setName(results.getString(dbQuery.fieldName()));\n    field.setType(results.getString(dbQuery.fieldType()));\n    field.setPropertyName(strategyConfig,processName(field.getName(),strategy));\n    field.setColumnType(dataSourceConfig.getTypeConvert().processTypeConvert(field.getType()));\n    field.setComment(results.getString(dbQuery.fieldComment()));\n    if (strategyConfig.includeSuperEntityColumns(field.getName())) {\n      commonFieldList.add(field);\n      continue;\n    }\n    List<TableFill> tableFillList=this.getStrategyConfig().getTableFillList();\n    if (null != tableFillList) {\n      for (      TableFill tableFill : tableFillList) {\n        if (tableFill.getFieldName().equals(field.getName())) {\n          field.setFill(tableFill.getFieldFill().name());\n          break;\n        }\n      }\n    }\n    fieldList.add(field);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 297,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2891,
        "startLineNumber" : 562,
        "startColumnNumber" : 8,
        "endLineNumber" : 620,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  String tableFieldsSql=dbQuery.tableFieldsSql();\n  if (DbType.POSTGRE_SQL == dbQuery.dbType()) {\n    tableFieldsSql=String.format(tableFieldsSql,dataSourceConfig.getSchemaname(),tableInfo.getName());\n  }\n else {\n    tableFieldsSql=String.format(tableFieldsSql,tableInfo.getName());\n  }\n  PreparedStatement preparedStatement=connection.prepareStatement(tableFieldsSql);\n  ResultSet results=preparedStatement.executeQuery();\n  while (results.next()) {\n    TableField field=new TableField();\n    String key=results.getString(dbQuery.fieldKey());\n    boolean isId=StringUtils.isNotEmpty(key) && key.toUpperCase().equals(\"PRI\");\n    if (isId && !haveId) {\n      field.setKeyFlag(true);\n      if (dbQuery.isKeyIdentity(results)) {\n        field.setKeyIdentityFlag(true);\n      }\n      haveId=true;\n    }\n else {\n      field.setKeyFlag(false);\n    }\n    String[] fcs=dbQuery.fieldCustom();\n    if (null != fcs) {\n      Map<String,Object> customMap=new HashMap<>();\n      for (      String fc : fcs) {\n        customMap.put(fc,results.getObject(fc));\n      }\n      field.setCustomMap(customMap);\n    }\n    field.setName(results.getString(dbQuery.fieldName()));\n    field.setType(results.getString(dbQuery.fieldType()));\n    field.setPropertyName(strategyConfig,processName(field.getName(),strategy));\n    field.setColumnType(dataSourceConfig.getTypeConvert().processTypeConvert(field.getType()));\n    field.setComment(results.getString(dbQuery.fieldComment()));\n    if (strategyConfig.includeSuperEntityColumns(field.getName())) {\n      commonFieldList.add(field);\n      continue;\n    }\n    List<TableFill> tableFillList=this.getStrategyConfig().getTableFillList();\n    if (null != tableFillList) {\n      for (      TableFill tableFill : tableFillList) {\n        if (tableFill.getFieldName().equals(field.getName())) {\n          field.setFill(tableFill.getFieldFill().name());\n          break;\n        }\n      }\n    }\n    fieldList.add(field);\n  }\n}\n catch (SQLException e) {\n  System.err.println(\"SQL Exception：\" + e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 315,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3175,
        "startLineNumber" : 558,
        "startColumnNumber" : 87,
        "endLineNumber" : 624,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean haveId=false;\n  List<TableField> fieldList=new ArrayList<>();\n  List<TableField> commonFieldList=new ArrayList<>();\n  try {\n    String tableFieldsSql=dbQuery.tableFieldsSql();\n    if (DbType.POSTGRE_SQL == dbQuery.dbType()) {\n      tableFieldsSql=String.format(tableFieldsSql,dataSourceConfig.getSchemaname(),tableInfo.getName());\n    }\n else {\n      tableFieldsSql=String.format(tableFieldsSql,tableInfo.getName());\n    }\n    PreparedStatement preparedStatement=connection.prepareStatement(tableFieldsSql);\n    ResultSet results=preparedStatement.executeQuery();\n    while (results.next()) {\n      TableField field=new TableField();\n      String key=results.getString(dbQuery.fieldKey());\n      boolean isId=StringUtils.isNotEmpty(key) && key.toUpperCase().equals(\"PRI\");\n      if (isId && !haveId) {\n        field.setKeyFlag(true);\n        if (dbQuery.isKeyIdentity(results)) {\n          field.setKeyIdentityFlag(true);\n        }\n        haveId=true;\n      }\n else {\n        field.setKeyFlag(false);\n      }\n      String[] fcs=dbQuery.fieldCustom();\n      if (null != fcs) {\n        Map<String,Object> customMap=new HashMap<>();\n        for (        String fc : fcs) {\n          customMap.put(fc,results.getObject(fc));\n        }\n        field.setCustomMap(customMap);\n      }\n      field.setName(results.getString(dbQuery.fieldName()));\n      field.setType(results.getString(dbQuery.fieldType()));\n      field.setPropertyName(strategyConfig,processName(field.getName(),strategy));\n      field.setColumnType(dataSourceConfig.getTypeConvert().processTypeConvert(field.getType()));\n      field.setComment(results.getString(dbQuery.fieldComment()));\n      if (strategyConfig.includeSuperEntityColumns(field.getName())) {\n        commonFieldList.add(field);\n        continue;\n      }\n      List<TableFill> tableFillList=this.getStrategyConfig().getTableFillList();\n      if (null != tableFillList) {\n        for (        TableFill tableFill : tableFillList) {\n          if (tableFill.getFieldName().equals(field.getName())) {\n            field.setFill(tableFill.getFieldFill().name());\n            break;\n          }\n        }\n      }\n      fieldList.add(field);\n    }\n  }\n catch (  SQLException e) {\n    System.err.println(\"SQL Exception：\" + e.getMessage());\n  }\n  tableInfo.setFields(fieldList);\n  tableInfo.setCommonFields(commonFieldList);\n  return tableInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 357,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3395,
        "startLineNumber" : 549,
        "startColumnNumber" : 4,
        "endLineNumber" : 624,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 将字段信息与表信息关联 </p>\n * @param tableInfo 表信息\n * @param strategy  命名策略\n * @return\n */\nprivate TableInfo convertTableFields(TableInfo tableInfo,NamingStrategy strategy){\n  boolean haveId=false;\n  List<TableField> fieldList=new ArrayList<>();\n  List<TableField> commonFieldList=new ArrayList<>();\n  try {\n    String tableFieldsSql=dbQuery.tableFieldsSql();\n    if (DbType.POSTGRE_SQL == dbQuery.dbType()) {\n      tableFieldsSql=String.format(tableFieldsSql,dataSourceConfig.getSchemaname(),tableInfo.getName());\n    }\n else {\n      tableFieldsSql=String.format(tableFieldsSql,tableInfo.getName());\n    }\n    PreparedStatement preparedStatement=connection.prepareStatement(tableFieldsSql);\n    ResultSet results=preparedStatement.executeQuery();\n    while (results.next()) {\n      TableField field=new TableField();\n      String key=results.getString(dbQuery.fieldKey());\n      boolean isId=StringUtils.isNotEmpty(key) && key.toUpperCase().equals(\"PRI\");\n      if (isId && !haveId) {\n        field.setKeyFlag(true);\n        if (dbQuery.isKeyIdentity(results)) {\n          field.setKeyIdentityFlag(true);\n        }\n        haveId=true;\n      }\n else {\n        field.setKeyFlag(false);\n      }\n      String[] fcs=dbQuery.fieldCustom();\n      if (null != fcs) {\n        Map<String,Object> customMap=new HashMap<>();\n        for (        String fc : fcs) {\n          customMap.put(fc,results.getObject(fc));\n        }\n        field.setCustomMap(customMap);\n      }\n      field.setName(results.getString(dbQuery.fieldName()));\n      field.setType(results.getString(dbQuery.fieldType()));\n      field.setPropertyName(strategyConfig,processName(field.getName(),strategy));\n      field.setColumnType(dataSourceConfig.getTypeConvert().processTypeConvert(field.getType()));\n      field.setComment(results.getString(dbQuery.fieldComment()));\n      if (strategyConfig.includeSuperEntityColumns(field.getName())) {\n        commonFieldList.add(field);\n        continue;\n      }\n      List<TableFill> tableFillList=this.getStrategyConfig().getTableFillList();\n      if (null != tableFillList) {\n        for (        TableFill tableFill : tableFillList) {\n          if (tableFill.getFieldName().equals(field.getName())) {\n            field.setFill(tableFill.getFieldFill().name());\n            break;\n          }\n        }\n      }\n      fieldList.add(field);\n    }\n  }\n catch (  SQLException e) {\n    System.err.println(\"SQL Exception：\" + e.getMessage());\n  }\n  tableInfo.setFields(fieldList);\n  tableInfo.setCommonFields(commonFieldList);\n  return tableInfo;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 371,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 591,
        "startColumnNumber" : 24,
        "endLineNumber" : 591,
        "endColumnNumber" : 65
      },
      "nodeContext" : "customMap.put(fc,results.getObject(fc));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "java.lang.Object"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 591,
    "startColumnNumber" : 42,
    "endLineNumber" : 591,
    "endColumnNumber" : 63
  } ],
  "layoutRelationDataList" : [ ]
}