{
  "id" : 281,
  "expression" : "localWatcher",
  "projectName" : "apache@zookeeper",
  "commitID" : "c6639c9842973a7954c8baa412d6825cb833d51f",
  "filePath" : "/src/java/test/org/apache/zookeeper/test/WatcherTest.java",
  "occurrences" : 23,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "localWatcher",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 213,
      "startColumnNumber" : 28,
      "endLineNumber" : 213,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 213,
        "startColumnNumber" : 28,
        "endLineNumber" : 213,
        "endColumnNumber" : 57
      },
      "nodeContext" : "localWatcher == globalWatcher",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 213,
        "startColumnNumber" : 27,
        "endLineNumber" : 213,
        "endColumnNumber" : 58
      },
      "nodeContext" : "(localWatcher == globalWatcher)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 213,
        "startColumnNumber" : 16,
        "endLineNumber" : 213,
        "endColumnNumber" : 58
      },
      "nodeContext" : "isGlobal=(localWatcher == globalWatcher)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 213,
        "startColumnNumber" : 8,
        "endLineNumber" : 213,
        "endColumnNumber" : 59
      },
      "nodeContext" : "boolean isGlobal=(localWatcher == globalWatcher);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4980,
        "startLineNumber" : 212,
        "startColumnNumber" : 53,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 593,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5106,
        "startLineNumber" : 211,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testWatcherAutoReset(ZooKeeper zk,MyWatcher globalWatcher,MyWatcher localWatcher) throws Exception {\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 611,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 213,
        "startColumnNumber" : 8,
        "endLineNumber" : 213,
        "endColumnNumber" : 59
      },
      "nodeContext" : "boolean isGlobal=(localWatcher == globalWatcher);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.zookeeper.test.WatcherTest.MyWatcher"
  }, {
    "nodeContext" : "localWatcher",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 222,
      "startColumnNumber" : 41,
      "endLineNumber" : 222,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 222,
        "startColumnNumber" : 12,
        "endLineNumber" : 222,
        "endColumnNumber" : 54
      },
      "nodeContext" : "zk.getChildren(\"/watchtest\",localWatcher)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 222,
        "startColumnNumber" : 12,
        "endLineNumber" : 222,
        "endColumnNumber" : 55
      },
      "nodeContext" : "zk.getChildren(\"/watchtest\",localWatcher);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 195,
        "startLineNumber" : 221,
        "startColumnNumber" : 15,
        "endLineNumber" : 225,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  zk.getChildren(\"/watchtest\",localWatcher);\n  zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n  zk.exists(\"/watchtest/child2\",localWatcher);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 386,
        "startLineNumber" : 217,
        "startColumnNumber" : 8,
        "endLineNumber" : 225,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isGlobal) {\n  zk.getChildren(\"/watchtest\",true);\n  zk.getData(\"/watchtest/child\",true,new Stat());\n  zk.exists(\"/watchtest/child2\",true);\n}\n else {\n  zk.getChildren(\"/watchtest\",localWatcher);\n  zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n  zk.exists(\"/watchtest/child2\",localWatcher);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 46,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4980,
        "startLineNumber" : 212,
        "startColumnNumber" : 53,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 593,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5106,
        "startLineNumber" : 211,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testWatcherAutoReset(ZooKeeper zk,MyWatcher globalWatcher,MyWatcher localWatcher) throws Exception {\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 611,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 222,
        "startColumnNumber" : 12,
        "endLineNumber" : 222,
        "endColumnNumber" : 55
      },
      "nodeContext" : "zk.getChildren(\"/watchtest\",localWatcher);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.zookeeper.test.WatcherTest.MyWatcher"
  }, {
    "nodeContext" : "localWatcher",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 223,
      "startColumnNumber" : 43,
      "endLineNumber" : 223,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 223,
        "startColumnNumber" : 12,
        "endLineNumber" : 223,
        "endColumnNumber" : 68
      },
      "nodeContext" : "zk.getData(\"/watchtest/child\",localWatcher,new Stat())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 223,
        "startColumnNumber" : 12,
        "endLineNumber" : 223,
        "endColumnNumber" : 69
      },
      "nodeContext" : "zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 195,
        "startLineNumber" : 221,
        "startColumnNumber" : 15,
        "endLineNumber" : 225,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  zk.getChildren(\"/watchtest\",localWatcher);\n  zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n  zk.exists(\"/watchtest/child2\",localWatcher);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 386,
        "startLineNumber" : 217,
        "startColumnNumber" : 8,
        "endLineNumber" : 225,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isGlobal) {\n  zk.getChildren(\"/watchtest\",true);\n  zk.getData(\"/watchtest/child\",true,new Stat());\n  zk.exists(\"/watchtest/child2\",true);\n}\n else {\n  zk.getChildren(\"/watchtest\",localWatcher);\n  zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n  zk.exists(\"/watchtest/child2\",localWatcher);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 46,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4980,
        "startLineNumber" : 212,
        "startColumnNumber" : 53,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 593,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5106,
        "startLineNumber" : 211,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testWatcherAutoReset(ZooKeeper zk,MyWatcher globalWatcher,MyWatcher localWatcher) throws Exception {\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 611,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 223,
        "startColumnNumber" : 12,
        "endLineNumber" : 223,
        "endColumnNumber" : 69
      },
      "nodeContext" : "zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.zookeeper.test.WatcherTest.MyWatcher"
  }, {
    "nodeContext" : "localWatcher",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 224,
      "startColumnNumber" : 43,
      "endLineNumber" : 224,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 224,
        "startColumnNumber" : 12,
        "endLineNumber" : 224,
        "endColumnNumber" : 56
      },
      "nodeContext" : "zk.exists(\"/watchtest/child2\",localWatcher)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 224,
        "startColumnNumber" : 12,
        "endLineNumber" : 224,
        "endColumnNumber" : 57
      },
      "nodeContext" : "zk.exists(\"/watchtest/child2\",localWatcher);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 195,
        "startLineNumber" : 221,
        "startColumnNumber" : 15,
        "endLineNumber" : 225,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  zk.getChildren(\"/watchtest\",localWatcher);\n  zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n  zk.exists(\"/watchtest/child2\",localWatcher);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 386,
        "startLineNumber" : 217,
        "startColumnNumber" : 8,
        "endLineNumber" : 225,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isGlobal) {\n  zk.getChildren(\"/watchtest\",true);\n  zk.getData(\"/watchtest/child\",true,new Stat());\n  zk.exists(\"/watchtest/child2\",true);\n}\n else {\n  zk.getChildren(\"/watchtest\",localWatcher);\n  zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n  zk.exists(\"/watchtest/child2\",localWatcher);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 46,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4980,
        "startLineNumber" : 212,
        "startColumnNumber" : 53,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 593,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5106,
        "startLineNumber" : 211,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testWatcherAutoReset(ZooKeeper zk,MyWatcher globalWatcher,MyWatcher localWatcher) throws Exception {\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 611,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 224,
        "startColumnNumber" : 12,
        "endLineNumber" : 224,
        "endColumnNumber" : 57
      },
      "nodeContext" : "zk.exists(\"/watchtest/child2\",localWatcher);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.zookeeper.test.WatcherTest.MyWatcher"
  }, {
    "nodeContext" : "localWatcher",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 227,
      "startColumnNumber" : 19,
      "endLineNumber" : 227,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 227,
        "startColumnNumber" : 19,
        "endLineNumber" : 227,
        "endColumnNumber" : 38
      },
      "nodeContext" : "localWatcher.events",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 227,
        "startColumnNumber" : 19,
        "endLineNumber" : 227,
        "endColumnNumber" : 48
      },
      "nodeContext" : "localWatcher.events.isEmpty()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 227,
        "startColumnNumber" : 8,
        "endLineNumber" : 227,
        "endColumnNumber" : 49
      },
      "nodeContext" : "assertTrue(localWatcher.events.isEmpty())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 227,
        "startColumnNumber" : 8,
        "endLineNumber" : 227,
        "endColumnNumber" : 50
      },
      "nodeContext" : "assertTrue(localWatcher.events.isEmpty());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4980,
        "startLineNumber" : 212,
        "startColumnNumber" : 53,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 593,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5106,
        "startLineNumber" : 211,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testWatcherAutoReset(ZooKeeper zk,MyWatcher globalWatcher,MyWatcher localWatcher) throws Exception {\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 611,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 227,
        "startColumnNumber" : 8,
        "endLineNumber" : 227,
        "endColumnNumber" : 50
      },
      "nodeContext" : "assertTrue(localWatcher.events.isEmpty());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.zookeeper.test.WatcherTest.MyWatcher"
  }, {
    "nodeContext" : "localWatcher",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 231,
      "startColumnNumber" : 8,
      "endLineNumber" : 231,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 231,
        "startColumnNumber" : 8,
        "endLineNumber" : 231,
        "endColumnNumber" : 45
      },
      "nodeContext" : "localWatcher.waitForDisconnected(500)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 231,
        "startColumnNumber" : 8,
        "endLineNumber" : 231,
        "endColumnNumber" : 46
      },
      "nodeContext" : "localWatcher.waitForDisconnected(500);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4980,
        "startLineNumber" : 212,
        "startColumnNumber" : 53,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 593,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5106,
        "startLineNumber" : 211,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testWatcherAutoReset(ZooKeeper zk,MyWatcher globalWatcher,MyWatcher localWatcher) throws Exception {\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 611,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 231,
        "startColumnNumber" : 8,
        "endLineNumber" : 231,
        "endColumnNumber" : 46
      },
      "nodeContext" : "localWatcher.waitForDisconnected(500);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.zookeeper.test.WatcherTest.MyWatcher"
  }, {
    "nodeContext" : "localWatcher",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 235,
      "startColumnNumber" : 12,
      "endLineNumber" : 235,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 235,
        "startColumnNumber" : 12,
        "endLineNumber" : 235,
        "endColumnNumber" : 46
      },
      "nodeContext" : "localWatcher.waitForConnected(500)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 235,
        "startColumnNumber" : 12,
        "endLineNumber" : 235,
        "endColumnNumber" : 47
      },
      "nodeContext" : "localWatcher.waitForConnected(500);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 234,
        "startColumnNumber" : 60,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  localWatcher.waitForConnected(500);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 234,
        "startColumnNumber" : 8,
        "endLineNumber" : 236,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n  localWatcher.waitForConnected(500);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4980,
        "startLineNumber" : 212,
        "startColumnNumber" : 53,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 593,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5106,
        "startLineNumber" : 211,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testWatcherAutoReset(ZooKeeper zk,MyWatcher globalWatcher,MyWatcher localWatcher) throws Exception {\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 611,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 235,
        "startColumnNumber" : 12,
        "endLineNumber" : 235,
        "endColumnNumber" : 47
      },
      "nodeContext" : "localWatcher.waitForConnected(500);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.zookeeper.test.WatcherTest.MyWatcher"
  }, {
    "nodeContext" : "localWatcher",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 238,
      "startColumnNumber" : 19,
      "endLineNumber" : 238,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 238,
        "startColumnNumber" : 19,
        "endLineNumber" : 238,
        "endColumnNumber" : 38
      },
      "nodeContext" : "localWatcher.events",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 238,
        "startColumnNumber" : 19,
        "endLineNumber" : 238,
        "endColumnNumber" : 48
      },
      "nodeContext" : "localWatcher.events.isEmpty()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 238,
        "startColumnNumber" : 8,
        "endLineNumber" : 238,
        "endColumnNumber" : 49
      },
      "nodeContext" : "assertTrue(localWatcher.events.isEmpty())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 238,
        "startColumnNumber" : 8,
        "endLineNumber" : 238,
        "endColumnNumber" : 50
      },
      "nodeContext" : "assertTrue(localWatcher.events.isEmpty());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4980,
        "startLineNumber" : 212,
        "startColumnNumber" : 53,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 593,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5106,
        "startLineNumber" : 211,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testWatcherAutoReset(ZooKeeper zk,MyWatcher globalWatcher,MyWatcher localWatcher) throws Exception {\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 611,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 238,
        "startColumnNumber" : 8,
        "endLineNumber" : 238,
        "endColumnNumber" : 50
      },
      "nodeContext" : "assertTrue(localWatcher.events.isEmpty());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.zookeeper.test.WatcherTest.MyWatcher"
  }, {
    "nodeContext" : "localWatcher",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 243,
      "startColumnNumber" : 25,
      "endLineNumber" : 243,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 243,
        "startColumnNumber" : 25,
        "endLineNumber" : 243,
        "endColumnNumber" : 44
      },
      "nodeContext" : "localWatcher.events",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 243,
        "startColumnNumber" : 25,
        "endLineNumber" : 243,
        "endColumnNumber" : 71
      },
      "nodeContext" : "localWatcher.events.poll(10,TimeUnit.SECONDS)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 243,
        "startColumnNumber" : 21,
        "endLineNumber" : 243,
        "endColumnNumber" : 71
      },
      "nodeContext" : "e=localWatcher.events.poll(10,TimeUnit.SECONDS)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 243,
        "startColumnNumber" : 8,
        "endLineNumber" : 243,
        "endColumnNumber" : 72
      },
      "nodeContext" : "WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4980,
        "startLineNumber" : 212,
        "startColumnNumber" : 53,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 593,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5106,
        "startLineNumber" : 211,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testWatcherAutoReset(ZooKeeper zk,MyWatcher globalWatcher,MyWatcher localWatcher) throws Exception {\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 611,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 243,
        "startColumnNumber" : 8,
        "endLineNumber" : 243,
        "endColumnNumber" : 72
      },
      "nodeContext" : "WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.zookeeper.test.WatcherTest.MyWatcher"
  }, {
    "nodeContext" : "localWatcher",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 251,
      "startColumnNumber" : 12,
      "endLineNumber" : 251,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 251,
        "startColumnNumber" : 12,
        "endLineNumber" : 251,
        "endColumnNumber" : 31
      },
      "nodeContext" : "localWatcher.events",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 251,
        "startColumnNumber" : 12,
        "endLineNumber" : 251,
        "endColumnNumber" : 58
      },
      "nodeContext" : "localWatcher.events.poll(10,TimeUnit.SECONDS)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 251,
        "startColumnNumber" : 8,
        "endLineNumber" : 251,
        "endColumnNumber" : 58
      },
      "nodeContext" : "e=localWatcher.events.poll(10,TimeUnit.SECONDS)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 251,
        "startColumnNumber" : 8,
        "endLineNumber" : 251,
        "endColumnNumber" : 59
      },
      "nodeContext" : "e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4980,
        "startLineNumber" : 212,
        "startColumnNumber" : 53,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 593,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5106,
        "startLineNumber" : 211,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testWatcherAutoReset(ZooKeeper zk,MyWatcher globalWatcher,MyWatcher localWatcher) throws Exception {\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 611,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 251,
        "startColumnNumber" : 8,
        "endLineNumber" : 251,
        "endColumnNumber" : 59
      },
      "nodeContext" : "e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.zookeeper.test.WatcherTest.MyWatcher"
  }, {
    "nodeContext" : "localWatcher",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 261,
      "startColumnNumber" : 12,
      "endLineNumber" : 261,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 261,
        "startColumnNumber" : 12,
        "endLineNumber" : 261,
        "endColumnNumber" : 31
      },
      "nodeContext" : "localWatcher.events",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 261,
        "startColumnNumber" : 12,
        "endLineNumber" : 261,
        "endColumnNumber" : 58
      },
      "nodeContext" : "localWatcher.events.poll(10,TimeUnit.SECONDS)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 261,
        "startColumnNumber" : 8,
        "endLineNumber" : 261,
        "endColumnNumber" : 58
      },
      "nodeContext" : "e=localWatcher.events.poll(10,TimeUnit.SECONDS)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 261,
        "startColumnNumber" : 8,
        "endLineNumber" : 261,
        "endColumnNumber" : 59
      },
      "nodeContext" : "e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4980,
        "startLineNumber" : 212,
        "startColumnNumber" : 53,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 593,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5106,
        "startLineNumber" : 211,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testWatcherAutoReset(ZooKeeper zk,MyWatcher globalWatcher,MyWatcher localWatcher) throws Exception {\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 611,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 261,
        "startColumnNumber" : 8,
        "endLineNumber" : 261,
        "endColumnNumber" : 59
      },
      "nodeContext" : "e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.zookeeper.test.WatcherTest.MyWatcher"
  }, {
    "nodeContext" : "localWatcher",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 272,
      "startColumnNumber" : 19,
      "endLineNumber" : 272,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 272,
        "startColumnNumber" : 19,
        "endLineNumber" : 272,
        "endColumnNumber" : 38
      },
      "nodeContext" : "localWatcher.events",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 272,
        "startColumnNumber" : 19,
        "endLineNumber" : 272,
        "endColumnNumber" : 48
      },
      "nodeContext" : "localWatcher.events.isEmpty()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 272,
        "startColumnNumber" : 8,
        "endLineNumber" : 272,
        "endColumnNumber" : 49
      },
      "nodeContext" : "assertTrue(localWatcher.events.isEmpty())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 272,
        "startColumnNumber" : 8,
        "endLineNumber" : 272,
        "endColumnNumber" : 50
      },
      "nodeContext" : "assertTrue(localWatcher.events.isEmpty());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4980,
        "startLineNumber" : 212,
        "startColumnNumber" : 53,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 593,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5106,
        "startLineNumber" : 211,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testWatcherAutoReset(ZooKeeper zk,MyWatcher globalWatcher,MyWatcher localWatcher) throws Exception {\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 611,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 272,
        "startColumnNumber" : 8,
        "endLineNumber" : 272,
        "endColumnNumber" : 50
      },
      "nodeContext" : "assertTrue(localWatcher.events.isEmpty());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.zookeeper.test.WatcherTest.MyWatcher"
  }, {
    "nodeContext" : "localWatcher",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 277,
      "startColumnNumber" : 12,
      "endLineNumber" : 277,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 277,
        "startColumnNumber" : 12,
        "endLineNumber" : 277,
        "endColumnNumber" : 49
      },
      "nodeContext" : "localWatcher.waitForDisconnected(500)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 277,
        "startColumnNumber" : 12,
        "endLineNumber" : 277,
        "endColumnNumber" : 50
      },
      "nodeContext" : "localWatcher.waitForDisconnected(500);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 202,
        "startLineNumber" : 276,
        "startColumnNumber" : 12,
        "endLineNumber" : 281,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  localWatcher.waitForDisconnected(500);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    fail(\"Got an event when I shouldn't have\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 457,
        "startLineNumber" : 276,
        "startColumnNumber" : 8,
        "endLineNumber" : 286,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  localWatcher.waitForDisconnected(500);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    fail(\"Got an event when I shouldn't have\");\n  }\n}\n catch (TimeoutException toe) {\n  if (ClientCnxn.disableAutoWatchReset) {\n    fail(\"Didn't get an event when I should have\");\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 35,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 477,
        "startLineNumber" : 275,
        "startColumnNumber" : 12,
        "endLineNumber" : 287,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    localWatcher.waitForDisconnected(500);\n    if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n      fail(\"Got an event when I shouldn't have\");\n    }\n  }\n catch (  TimeoutException toe) {\n    if (ClientCnxn.disableAutoWatchReset) {\n      fail(\"Didn't get an event when I should have\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 36,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 592,
        "startLineNumber" : 275,
        "startColumnNumber" : 8,
        "endLineNumber" : 290,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  try {\n    localWatcher.waitForDisconnected(500);\n    if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n      fail(\"Got an event when I shouldn't have\");\n    }\n  }\n catch (  TimeoutException toe) {\n    if (ClientCnxn.disableAutoWatchReset) {\n      fail(\"Didn't get an event when I should have\");\n    }\n  }\n}\n catch (Exception e1) {\n  LOG.error(\"bad\",e1);\n  throw new RuntimeException(e1);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 54,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4980,
        "startLineNumber" : 212,
        "startColumnNumber" : 53,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 593,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5106,
        "startLineNumber" : 211,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testWatcherAutoReset(ZooKeeper zk,MyWatcher globalWatcher,MyWatcher localWatcher) throws Exception {\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 611,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 277,
        "startColumnNumber" : 12,
        "endLineNumber" : 277,
        "endColumnNumber" : 50
      },
      "nodeContext" : "localWatcher.waitForDisconnected(500);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.zookeeper.test.WatcherTest.MyWatcher"
  }, {
    "nodeContext" : "localWatcher",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 299,
      "startColumnNumber" : 41,
      "endLineNumber" : 299,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 299,
        "startColumnNumber" : 12,
        "endLineNumber" : 299,
        "endColumnNumber" : 54
      },
      "nodeContext" : "zk.getChildren(\"/watchtest\",localWatcher)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 299,
        "startColumnNumber" : 12,
        "endLineNumber" : 299,
        "endColumnNumber" : 55
      },
      "nodeContext" : "zk.getChildren(\"/watchtest\",localWatcher);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 195,
        "startLineNumber" : 298,
        "startColumnNumber" : 15,
        "endLineNumber" : 302,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  zk.getChildren(\"/watchtest\",localWatcher);\n  zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n  zk.exists(\"/watchtest/child2\",localWatcher);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 386,
        "startLineNumber" : 294,
        "startColumnNumber" : 8,
        "endLineNumber" : 302,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isGlobal) {\n  zk.getChildren(\"/watchtest\",true);\n  zk.getData(\"/watchtest/child\",true,new Stat());\n  zk.exists(\"/watchtest/child2\",true);\n}\n else {\n  zk.getChildren(\"/watchtest\",localWatcher);\n  zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n  zk.exists(\"/watchtest/child2\",localWatcher);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 46,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4980,
        "startLineNumber" : 212,
        "startColumnNumber" : 53,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 593,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5106,
        "startLineNumber" : 211,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testWatcherAutoReset(ZooKeeper zk,MyWatcher globalWatcher,MyWatcher localWatcher) throws Exception {\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 611,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 299,
        "startColumnNumber" : 12,
        "endLineNumber" : 299,
        "endColumnNumber" : 55
      },
      "nodeContext" : "zk.getChildren(\"/watchtest\",localWatcher);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.zookeeper.test.WatcherTest.MyWatcher"
  }, {
    "nodeContext" : "localWatcher",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 300,
      "startColumnNumber" : 43,
      "endLineNumber" : 300,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 300,
        "startColumnNumber" : 12,
        "endLineNumber" : 300,
        "endColumnNumber" : 68
      },
      "nodeContext" : "zk.getData(\"/watchtest/child\",localWatcher,new Stat())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 300,
        "startColumnNumber" : 12,
        "endLineNumber" : 300,
        "endColumnNumber" : 69
      },
      "nodeContext" : "zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 195,
        "startLineNumber" : 298,
        "startColumnNumber" : 15,
        "endLineNumber" : 302,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  zk.getChildren(\"/watchtest\",localWatcher);\n  zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n  zk.exists(\"/watchtest/child2\",localWatcher);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 386,
        "startLineNumber" : 294,
        "startColumnNumber" : 8,
        "endLineNumber" : 302,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isGlobal) {\n  zk.getChildren(\"/watchtest\",true);\n  zk.getData(\"/watchtest/child\",true,new Stat());\n  zk.exists(\"/watchtest/child2\",true);\n}\n else {\n  zk.getChildren(\"/watchtest\",localWatcher);\n  zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n  zk.exists(\"/watchtest/child2\",localWatcher);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 46,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4980,
        "startLineNumber" : 212,
        "startColumnNumber" : 53,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 593,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5106,
        "startLineNumber" : 211,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testWatcherAutoReset(ZooKeeper zk,MyWatcher globalWatcher,MyWatcher localWatcher) throws Exception {\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 611,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 300,
        "startColumnNumber" : 12,
        "endLineNumber" : 300,
        "endColumnNumber" : 69
      },
      "nodeContext" : "zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.zookeeper.test.WatcherTest.MyWatcher"
  }, {
    "nodeContext" : "localWatcher",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 301,
      "startColumnNumber" : 43,
      "endLineNumber" : 301,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 301,
        "startColumnNumber" : 12,
        "endLineNumber" : 301,
        "endColumnNumber" : 56
      },
      "nodeContext" : "zk.exists(\"/watchtest/child2\",localWatcher)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 301,
        "startColumnNumber" : 12,
        "endLineNumber" : 301,
        "endColumnNumber" : 57
      },
      "nodeContext" : "zk.exists(\"/watchtest/child2\",localWatcher);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 195,
        "startLineNumber" : 298,
        "startColumnNumber" : 15,
        "endLineNumber" : 302,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  zk.getChildren(\"/watchtest\",localWatcher);\n  zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n  zk.exists(\"/watchtest/child2\",localWatcher);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 386,
        "startLineNumber" : 294,
        "startColumnNumber" : 8,
        "endLineNumber" : 302,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isGlobal) {\n  zk.getChildren(\"/watchtest\",true);\n  zk.getData(\"/watchtest/child\",true,new Stat());\n  zk.exists(\"/watchtest/child2\",true);\n}\n else {\n  zk.getChildren(\"/watchtest\",localWatcher);\n  zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n  zk.exists(\"/watchtest/child2\",localWatcher);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 46,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4980,
        "startLineNumber" : 212,
        "startColumnNumber" : 53,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 593,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5106,
        "startLineNumber" : 211,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testWatcherAutoReset(ZooKeeper zk,MyWatcher globalWatcher,MyWatcher localWatcher) throws Exception {\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 611,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 301,
        "startColumnNumber" : 12,
        "endLineNumber" : 301,
        "endColumnNumber" : 57
      },
      "nodeContext" : "zk.exists(\"/watchtest/child2\",localWatcher);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.zookeeper.test.WatcherTest.MyWatcher"
  }, {
    "nodeContext" : "localWatcher",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 308,
      "startColumnNumber" : 12,
      "endLineNumber" : 308,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 308,
        "startColumnNumber" : 12,
        "endLineNumber" : 308,
        "endColumnNumber" : 31
      },
      "nodeContext" : "localWatcher.events",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 308,
        "startColumnNumber" : 12,
        "endLineNumber" : 308,
        "endColumnNumber" : 58
      },
      "nodeContext" : "localWatcher.events.poll(10,TimeUnit.SECONDS)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 308,
        "startColumnNumber" : 8,
        "endLineNumber" : 308,
        "endColumnNumber" : 58
      },
      "nodeContext" : "e=localWatcher.events.poll(10,TimeUnit.SECONDS)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 308,
        "startColumnNumber" : 8,
        "endLineNumber" : 308,
        "endColumnNumber" : 59
      },
      "nodeContext" : "e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4980,
        "startLineNumber" : 212,
        "startColumnNumber" : 53,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 593,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5106,
        "startLineNumber" : 211,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testWatcherAutoReset(ZooKeeper zk,MyWatcher globalWatcher,MyWatcher localWatcher) throws Exception {\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 611,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 308,
        "startColumnNumber" : 8,
        "endLineNumber" : 308,
        "endColumnNumber" : 59
      },
      "nodeContext" : "e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.zookeeper.test.WatcherTest.MyWatcher"
  }, {
    "nodeContext" : "localWatcher",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 312,
      "startColumnNumber" : 12,
      "endLineNumber" : 312,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 312,
        "startColumnNumber" : 12,
        "endLineNumber" : 312,
        "endColumnNumber" : 31
      },
      "nodeContext" : "localWatcher.events",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 312,
        "startColumnNumber" : 12,
        "endLineNumber" : 312,
        "endColumnNumber" : 58
      },
      "nodeContext" : "localWatcher.events.poll(10,TimeUnit.SECONDS)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 312,
        "startColumnNumber" : 8,
        "endLineNumber" : 312,
        "endColumnNumber" : 58
      },
      "nodeContext" : "e=localWatcher.events.poll(10,TimeUnit.SECONDS)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 312,
        "startColumnNumber" : 8,
        "endLineNumber" : 312,
        "endColumnNumber" : 59
      },
      "nodeContext" : "e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4980,
        "startLineNumber" : 212,
        "startColumnNumber" : 53,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 593,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5106,
        "startLineNumber" : 211,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testWatcherAutoReset(ZooKeeper zk,MyWatcher globalWatcher,MyWatcher localWatcher) throws Exception {\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 611,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 312,
        "startColumnNumber" : 8,
        "endLineNumber" : 312,
        "endColumnNumber" : 59
      },
      "nodeContext" : "e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.zookeeper.test.WatcherTest.MyWatcher"
  }, {
    "nodeContext" : "localWatcher",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 316,
      "startColumnNumber" : 19,
      "endLineNumber" : 316,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 316,
        "startColumnNumber" : 19,
        "endLineNumber" : 316,
        "endColumnNumber" : 38
      },
      "nodeContext" : "localWatcher.events",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 316,
        "startColumnNumber" : 19,
        "endLineNumber" : 316,
        "endColumnNumber" : 48
      },
      "nodeContext" : "localWatcher.events.isEmpty()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 316,
        "startColumnNumber" : 8,
        "endLineNumber" : 316,
        "endColumnNumber" : 49
      },
      "nodeContext" : "assertTrue(localWatcher.events.isEmpty())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 316,
        "startColumnNumber" : 8,
        "endLineNumber" : 316,
        "endColumnNumber" : 50
      },
      "nodeContext" : "assertTrue(localWatcher.events.isEmpty());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4980,
        "startLineNumber" : 212,
        "startColumnNumber" : 53,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 593,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5106,
        "startLineNumber" : 211,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testWatcherAutoReset(ZooKeeper zk,MyWatcher globalWatcher,MyWatcher localWatcher) throws Exception {\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 611,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 316,
        "startColumnNumber" : 8,
        "endLineNumber" : 316,
        "endColumnNumber" : 50
      },
      "nodeContext" : "assertTrue(localWatcher.events.isEmpty());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.zookeeper.test.WatcherTest.MyWatcher"
  }, {
    "nodeContext" : "localWatcher",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 320,
      "startColumnNumber" : 8,
      "endLineNumber" : 320,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 320,
        "startColumnNumber" : 8,
        "endLineNumber" : 320,
        "endColumnNumber" : 45
      },
      "nodeContext" : "localWatcher.waitForDisconnected(500)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 320,
        "startColumnNumber" : 8,
        "endLineNumber" : 320,
        "endColumnNumber" : 46
      },
      "nodeContext" : "localWatcher.waitForDisconnected(500);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4980,
        "startLineNumber" : 212,
        "startColumnNumber" : 53,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 593,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5106,
        "startLineNumber" : 211,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testWatcherAutoReset(ZooKeeper zk,MyWatcher globalWatcher,MyWatcher localWatcher) throws Exception {\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 611,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 320,
        "startColumnNumber" : 8,
        "endLineNumber" : 320,
        "endColumnNumber" : 46
      },
      "nodeContext" : "localWatcher.waitForDisconnected(500);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.zookeeper.test.WatcherTest.MyWatcher"
  }, {
    "nodeContext" : "localWatcher",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 324,
      "startColumnNumber" : 12,
      "endLineNumber" : 324,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 324,
        "startColumnNumber" : 12,
        "endLineNumber" : 324,
        "endColumnNumber" : 46
      },
      "nodeContext" : "localWatcher.waitForConnected(500)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 324,
        "startColumnNumber" : 12,
        "endLineNumber" : 324,
        "endColumnNumber" : 47
      },
      "nodeContext" : "localWatcher.waitForConnected(500);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 323,
        "startColumnNumber" : 60,
        "endLineNumber" : 325,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  localWatcher.waitForConnected(500);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 323,
        "startColumnNumber" : 8,
        "endLineNumber" : 325,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n  localWatcher.waitForConnected(500);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4980,
        "startLineNumber" : 212,
        "startColumnNumber" : 53,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 593,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5106,
        "startLineNumber" : 211,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testWatcherAutoReset(ZooKeeper zk,MyWatcher globalWatcher,MyWatcher localWatcher) throws Exception {\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 611,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 324,
        "startColumnNumber" : 12,
        "endLineNumber" : 324,
        "endColumnNumber" : 47
      },
      "nodeContext" : "localWatcher.waitForConnected(500);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.zookeeper.test.WatcherTest.MyWatcher"
  }, {
    "nodeContext" : "localWatcher",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 330,
      "startColumnNumber" : 12,
      "endLineNumber" : 330,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 330,
        "startColumnNumber" : 12,
        "endLineNumber" : 330,
        "endColumnNumber" : 31
      },
      "nodeContext" : "localWatcher.events",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 330,
        "startColumnNumber" : 12,
        "endLineNumber" : 330,
        "endColumnNumber" : 58
      },
      "nodeContext" : "localWatcher.events.poll(10,TimeUnit.SECONDS)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 330,
        "startColumnNumber" : 8,
        "endLineNumber" : 330,
        "endColumnNumber" : 58
      },
      "nodeContext" : "e=localWatcher.events.poll(10,TimeUnit.SECONDS)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 330,
        "startColumnNumber" : 8,
        "endLineNumber" : 330,
        "endColumnNumber" : 59
      },
      "nodeContext" : "e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4980,
        "startLineNumber" : 212,
        "startColumnNumber" : 53,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 593,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5106,
        "startLineNumber" : 211,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testWatcherAutoReset(ZooKeeper zk,MyWatcher globalWatcher,MyWatcher localWatcher) throws Exception {\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 611,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 330,
        "startColumnNumber" : 8,
        "endLineNumber" : 330,
        "endColumnNumber" : 59
      },
      "nodeContext" : "e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.zookeeper.test.WatcherTest.MyWatcher"
  }, {
    "nodeContext" : "localWatcher",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 340,
      "startColumnNumber" : 19,
      "endLineNumber" : 340,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 340,
        "startColumnNumber" : 19,
        "endLineNumber" : 340,
        "endColumnNumber" : 38
      },
      "nodeContext" : "localWatcher.events",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 340,
        "startColumnNumber" : 19,
        "endLineNumber" : 340,
        "endColumnNumber" : 48
      },
      "nodeContext" : "localWatcher.events.isEmpty()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 340,
        "startColumnNumber" : 8,
        "endLineNumber" : 340,
        "endColumnNumber" : 49
      },
      "nodeContext" : "assertTrue(localWatcher.events.isEmpty())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 340,
        "startColumnNumber" : 8,
        "endLineNumber" : 340,
        "endColumnNumber" : 50
      },
      "nodeContext" : "assertTrue(localWatcher.events.isEmpty());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4980,
        "startLineNumber" : 212,
        "startColumnNumber" : 53,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 593,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5106,
        "startLineNumber" : 211,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testWatcherAutoReset(ZooKeeper zk,MyWatcher globalWatcher,MyWatcher localWatcher) throws Exception {\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 611,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 340,
        "startColumnNumber" : 8,
        "endLineNumber" : 340,
        "endColumnNumber" : 50
      },
      "nodeContext" : "assertTrue(localWatcher.events.isEmpty());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.zookeeper.test.WatcherTest.MyWatcher"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 213,
    "startColumnNumber" : 28,
    "endLineNumber" : 213,
    "endColumnNumber" : 40
  }, {
    "charLength" : 12,
    "startLineNumber" : 222,
    "startColumnNumber" : 41,
    "endLineNumber" : 222,
    "endColumnNumber" : 53
  }, {
    "charLength" : 12,
    "startLineNumber" : 223,
    "startColumnNumber" : 43,
    "endLineNumber" : 223,
    "endColumnNumber" : 55
  }, {
    "charLength" : 12,
    "startLineNumber" : 224,
    "startColumnNumber" : 43,
    "endLineNumber" : 224,
    "endColumnNumber" : 55
  }, {
    "charLength" : 12,
    "startLineNumber" : 227,
    "startColumnNumber" : 19,
    "endLineNumber" : 227,
    "endColumnNumber" : 31
  }, {
    "charLength" : 12,
    "startLineNumber" : 231,
    "startColumnNumber" : 8,
    "endLineNumber" : 231,
    "endColumnNumber" : 20
  }, {
    "charLength" : 12,
    "startLineNumber" : 235,
    "startColumnNumber" : 12,
    "endLineNumber" : 235,
    "endColumnNumber" : 24
  }, {
    "charLength" : 12,
    "startLineNumber" : 238,
    "startColumnNumber" : 19,
    "endLineNumber" : 238,
    "endColumnNumber" : 31
  }, {
    "charLength" : 12,
    "startLineNumber" : 243,
    "startColumnNumber" : 25,
    "endLineNumber" : 243,
    "endColumnNumber" : 37
  }, {
    "charLength" : 12,
    "startLineNumber" : 251,
    "startColumnNumber" : 12,
    "endLineNumber" : 251,
    "endColumnNumber" : 24
  }, {
    "charLength" : 12,
    "startLineNumber" : 261,
    "startColumnNumber" : 12,
    "endLineNumber" : 261,
    "endColumnNumber" : 24
  }, {
    "charLength" : 12,
    "startLineNumber" : 272,
    "startColumnNumber" : 19,
    "endLineNumber" : 272,
    "endColumnNumber" : 31
  }, {
    "charLength" : 12,
    "startLineNumber" : 277,
    "startColumnNumber" : 12,
    "endLineNumber" : 277,
    "endColumnNumber" : 24
  }, {
    "charLength" : 12,
    "startLineNumber" : 299,
    "startColumnNumber" : 41,
    "endLineNumber" : 299,
    "endColumnNumber" : 53
  }, {
    "charLength" : 12,
    "startLineNumber" : 300,
    "startColumnNumber" : 43,
    "endLineNumber" : 300,
    "endColumnNumber" : 55
  }, {
    "charLength" : 12,
    "startLineNumber" : 301,
    "startColumnNumber" : 43,
    "endLineNumber" : 301,
    "endColumnNumber" : 55
  }, {
    "charLength" : 12,
    "startLineNumber" : 308,
    "startColumnNumber" : 12,
    "endLineNumber" : 308,
    "endColumnNumber" : 24
  }, {
    "charLength" : 12,
    "startLineNumber" : 312,
    "startColumnNumber" : 12,
    "endLineNumber" : 312,
    "endColumnNumber" : 24
  }, {
    "charLength" : 12,
    "startLineNumber" : 316,
    "startColumnNumber" : 19,
    "endLineNumber" : 316,
    "endColumnNumber" : 31
  }, {
    "charLength" : 12,
    "startLineNumber" : 320,
    "startColumnNumber" : 8,
    "endLineNumber" : 320,
    "endColumnNumber" : 20
  }, {
    "charLength" : 12,
    "startLineNumber" : 324,
    "startColumnNumber" : 12,
    "endLineNumber" : 324,
    "endColumnNumber" : 24
  }, {
    "charLength" : 12,
    "startLineNumber" : 330,
    "startColumnNumber" : 12,
    "endLineNumber" : 330,
    "endColumnNumber" : 24
  }, {
    "charLength" : 12,
    "startLineNumber" : 340,
    "startColumnNumber" : 19,
    "endLineNumber" : 340,
    "endColumnNumber" : 31
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 21,
    "layout" : 4
  } ]
}