{
  "id" : 47,
  "expression" : "Integer.parseInt(value)",
  "projectName" : "apache@rocketmq",
  "commitID" : "7692d466e1fda6c29d52a61617cab1d82de8b884",
  "filePath" : "/remoting/src/main/java/org/apache/rocketmq/remoting/netty/CodecHelper.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Integer.parseInt(value)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 132,
      "startColumnNumber" : 46,
      "endLineNumber" : 132,
      "endColumnNumber" : 69
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 132,
        "startColumnNumber" : 32,
        "endLineNumber" : 132,
        "endColumnNumber" : 69
      },
      "nodeContext" : "valueParsed=Integer.parseInt(value)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 132,
        "startColumnNumber" : 32,
        "endLineNumber" : 132,
        "endColumnNumber" : 70
      },
      "nodeContext" : "valueParsed=Integer.parseInt(value);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 131,
        "startColumnNumber" : 119,
        "endLineNumber" : 133,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  valueParsed=Integer.parseInt(value);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 925,
        "startLineNumber" : 131,
        "startColumnNumber" : 35,
        "endLineNumber" : 141,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (type.equals(INTEGER_CANONICAL_NAME_1) || type.equals(INTEGER_CANONICAL_NAME_2)) {\n  valueParsed=Integer.parseInt(value);\n}\n else if (type.equals(LONG_CANONICAL_NAME_1) || type.equals(LONG_CANONICAL_NAME_2)) {\n  valueParsed=Long.parseLong(value);\n}\n else if (type.equals(BOOLEAN_CANONICAL_NAME_1) || type.equals(BOOLEAN_CANONICAL_NAME_2)) {\n  valueParsed=Boolean.parseBoolean(value);\n}\n else if (type.equals(DOUBLE_CANONICAL_NAME_1) || type.equals(DOUBLE_CANONICAL_NAME_2)) {\n  valueParsed=Double.parseDouble(value);\n}\n else {\n  throw new RemotingCommandException(\"the custom field <\" + fieldName + \"> type is not supported\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 81,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1055,
        "startLineNumber" : 129,
        "startColumnNumber" : 28,
        "endLineNumber" : 141,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (type.equals(STRING_CANONICAL_NAME)) {\n  valueParsed=value;\n}\n else if (type.equals(INTEGER_CANONICAL_NAME_1) || type.equals(INTEGER_CANONICAL_NAME_2)) {\n  valueParsed=Integer.parseInt(value);\n}\n else if (type.equals(LONG_CANONICAL_NAME_1) || type.equals(LONG_CANONICAL_NAME_2)) {\n  valueParsed=Long.parseLong(value);\n}\n else if (type.equals(BOOLEAN_CANONICAL_NAME_1) || type.equals(BOOLEAN_CANONICAL_NAME_2)) {\n  valueParsed=Boolean.parseBoolean(value);\n}\n else if (type.equals(DOUBLE_CANONICAL_NAME_1) || type.equals(DOUBLE_CANONICAL_NAME_2)) {\n  valueParsed=Double.parseDouble(value);\n}\n else {\n  throw new RemotingCommandException(\"the custom field <\" + fieldName + \"> type is not supported\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 91,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1789,
        "startLineNumber" : 116,
        "startColumnNumber" : 28,
        "endLineNumber" : 145,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  String value=remotingCommand.getExtFields().get(fieldName);\n  if (null == value) {\n    if (!isFieldNullable(field)) {\n      throw new RemotingCommandException(\"the custom field <\" + fieldName + \"> is null\");\n    }\n    continue;\n  }\n  field.setAccessible(true);\n  String type=getCanonicalName(field.getType());\n  Object valueParsed;\n  if (type.equals(STRING_CANONICAL_NAME)) {\n    valueParsed=value;\n  }\n else   if (type.equals(INTEGER_CANONICAL_NAME_1) || type.equals(INTEGER_CANONICAL_NAME_2)) {\n    valueParsed=Integer.parseInt(value);\n  }\n else   if (type.equals(LONG_CANONICAL_NAME_1) || type.equals(LONG_CANONICAL_NAME_2)) {\n    valueParsed=Long.parseLong(value);\n  }\n else   if (type.equals(BOOLEAN_CANONICAL_NAME_1) || type.equals(BOOLEAN_CANONICAL_NAME_2)) {\n    valueParsed=Boolean.parseBoolean(value);\n  }\n else   if (type.equals(DOUBLE_CANONICAL_NAME_1) || type.equals(DOUBLE_CANONICAL_NAME_2)) {\n    valueParsed=Double.parseDouble(value);\n  }\n else {\n    throw new RemotingCommandException(\"the custom field <\" + fieldName + \"> type is not supported\");\n  }\n  field.set(objectHeader,valueParsed);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 149,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1841,
        "startLineNumber" : 116,
        "startColumnNumber" : 24,
        "endLineNumber" : 146,
        "endColumnNumber" : 25
      },
      "nodeContext" : "try {\n  String value=remotingCommand.getExtFields().get(fieldName);\n  if (null == value) {\n    if (!isFieldNullable(field)) {\n      throw new RemotingCommandException(\"the custom field <\" + fieldName + \"> is null\");\n    }\n    continue;\n  }\n  field.setAccessible(true);\n  String type=getCanonicalName(field.getType());\n  Object valueParsed;\n  if (type.equals(STRING_CANONICAL_NAME)) {\n    valueParsed=value;\n  }\n else   if (type.equals(INTEGER_CANONICAL_NAME_1) || type.equals(INTEGER_CANONICAL_NAME_2)) {\n    valueParsed=Integer.parseInt(value);\n  }\n else   if (type.equals(LONG_CANONICAL_NAME_1) || type.equals(LONG_CANONICAL_NAME_2)) {\n    valueParsed=Long.parseLong(value);\n  }\n else   if (type.equals(BOOLEAN_CANONICAL_NAME_1) || type.equals(BOOLEAN_CANONICAL_NAME_2)) {\n    valueParsed=Boolean.parseBoolean(value);\n  }\n else   if (type.equals(DOUBLE_CANONICAL_NAME_1) || type.equals(DOUBLE_CANONICAL_NAME_2)) {\n    valueParsed=Double.parseDouble(value);\n  }\n else {\n    throw new RemotingCommandException(\"the custom field <\" + fieldName + \"> type is not supported\");\n  }\n  field.set(objectHeader,valueParsed);\n}\n catch (Throwable e) {\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 156,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1889,
        "startLineNumber" : 115,
        "startColumnNumber" : 55,
        "endLineNumber" : 147,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  try {\n    String value=remotingCommand.getExtFields().get(fieldName);\n    if (null == value) {\n      if (!isFieldNullable(field)) {\n        throw new RemotingCommandException(\"the custom field <\" + fieldName + \"> is null\");\n      }\n      continue;\n    }\n    field.setAccessible(true);\n    String type=getCanonicalName(field.getType());\n    Object valueParsed;\n    if (type.equals(STRING_CANONICAL_NAME)) {\n      valueParsed=value;\n    }\n else     if (type.equals(INTEGER_CANONICAL_NAME_1) || type.equals(INTEGER_CANONICAL_NAME_2)) {\n      valueParsed=Integer.parseInt(value);\n    }\n else     if (type.equals(LONG_CANONICAL_NAME_1) || type.equals(LONG_CANONICAL_NAME_2)) {\n      valueParsed=Long.parseLong(value);\n    }\n else     if (type.equals(BOOLEAN_CANONICAL_NAME_1) || type.equals(BOOLEAN_CANONICAL_NAME_2)) {\n      valueParsed=Boolean.parseBoolean(value);\n    }\n else     if (type.equals(DOUBLE_CANONICAL_NAME_1) || type.equals(DOUBLE_CANONICAL_NAME_2)) {\n      valueParsed=Double.parseDouble(value);\n    }\n else {\n      throw new RemotingCommandException(\"the custom field <\" + fieldName + \"> type is not supported\");\n    }\n    field.set(objectHeader,valueParsed);\n  }\n catch (  Throwable e) {\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 157,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1924,
        "startLineNumber" : 115,
        "startColumnNumber" : 20,
        "endLineNumber" : 147,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (!fieldName.startsWith(\"this\")) {\n  try {\n    String value=remotingCommand.getExtFields().get(fieldName);\n    if (null == value) {\n      if (!isFieldNullable(field)) {\n        throw new RemotingCommandException(\"the custom field <\" + fieldName + \"> is null\");\n      }\n      continue;\n    }\n    field.setAccessible(true);\n    String type=getCanonicalName(field.getType());\n    Object valueParsed;\n    if (type.equals(STRING_CANONICAL_NAME)) {\n      valueParsed=value;\n    }\n else     if (type.equals(INTEGER_CANONICAL_NAME_1) || type.equals(INTEGER_CANONICAL_NAME_2)) {\n      valueParsed=Integer.parseInt(value);\n    }\n else     if (type.equals(LONG_CANONICAL_NAME_1) || type.equals(LONG_CANONICAL_NAME_2)) {\n      valueParsed=Long.parseLong(value);\n    }\n else     if (type.equals(BOOLEAN_CANONICAL_NAME_1) || type.equals(BOOLEAN_CANONICAL_NAME_2)) {\n      valueParsed=Boolean.parseBoolean(value);\n    }\n else     if (type.equals(DOUBLE_CANONICAL_NAME_1) || type.equals(DOUBLE_CANONICAL_NAME_2)) {\n      valueParsed=Double.parseDouble(value);\n    }\n else {\n      throw new RemotingCommandException(\"the custom field <\" + fieldName + \"> type is not supported\");\n    }\n    field.set(objectHeader,valueParsed);\n  }\n catch (  Throwable e) {\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 163,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2020,
        "startLineNumber" : 113,
        "startColumnNumber" : 62,
        "endLineNumber" : 148,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  String fieldName=field.getName();\n  if (!fieldName.startsWith(\"this\")) {\n    try {\n      String value=remotingCommand.getExtFields().get(fieldName);\n      if (null == value) {\n        if (!isFieldNullable(field)) {\n          throw new RemotingCommandException(\"the custom field <\" + fieldName + \"> is null\");\n        }\n        continue;\n      }\n      field.setAccessible(true);\n      String type=getCanonicalName(field.getType());\n      Object valueParsed;\n      if (type.equals(STRING_CANONICAL_NAME)) {\n        valueParsed=value;\n      }\n else       if (type.equals(INTEGER_CANONICAL_NAME_1) || type.equals(INTEGER_CANONICAL_NAME_2)) {\n        valueParsed=Integer.parseInt(value);\n      }\n else       if (type.equals(LONG_CANONICAL_NAME_1) || type.equals(LONG_CANONICAL_NAME_2)) {\n        valueParsed=Long.parseLong(value);\n      }\n else       if (type.equals(BOOLEAN_CANONICAL_NAME_1) || type.equals(BOOLEAN_CANONICAL_NAME_2)) {\n        valueParsed=Boolean.parseBoolean(value);\n      }\n else       if (type.equals(DOUBLE_CANONICAL_NAME_1) || type.equals(DOUBLE_CANONICAL_NAME_2)) {\n        valueParsed=Double.parseDouble(value);\n      }\n else {\n        throw new RemotingCommandException(\"the custom field <\" + fieldName + \"> type is not supported\");\n      }\n      field.set(objectHeader,valueParsed);\n    }\n catch (    Throwable e) {\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 172,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2066,
        "startLineNumber" : 113,
        "startColumnNumber" : 16,
        "endLineNumber" : 148,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (!Modifier.isStatic(field.getModifiers())) {\n  String fieldName=field.getName();\n  if (!fieldName.startsWith(\"this\")) {\n    try {\n      String value=remotingCommand.getExtFields().get(fieldName);\n      if (null == value) {\n        if (!isFieldNullable(field)) {\n          throw new RemotingCommandException(\"the custom field <\" + fieldName + \"> is null\");\n        }\n        continue;\n      }\n      field.setAccessible(true);\n      String type=getCanonicalName(field.getType());\n      Object valueParsed;\n      if (type.equals(STRING_CANONICAL_NAME)) {\n        valueParsed=value;\n      }\n else       if (type.equals(INTEGER_CANONICAL_NAME_1) || type.equals(INTEGER_CANONICAL_NAME_2)) {\n        valueParsed=Integer.parseInt(value);\n      }\n else       if (type.equals(LONG_CANONICAL_NAME_1) || type.equals(LONG_CANONICAL_NAME_2)) {\n        valueParsed=Long.parseLong(value);\n      }\n else       if (type.equals(BOOLEAN_CANONICAL_NAME_1) || type.equals(BOOLEAN_CANONICAL_NAME_2)) {\n        valueParsed=Boolean.parseBoolean(value);\n      }\n else       if (type.equals(DOUBLE_CANONICAL_NAME_1) || type.equals(DOUBLE_CANONICAL_NAME_2)) {\n        valueParsed=Double.parseDouble(value);\n      }\n else {\n        throw new RemotingCommandException(\"the custom field <\" + fieldName + \"> type is not supported\");\n      }\n      field.set(objectHeader,valueParsed);\n    }\n catch (    Throwable e) {\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 180,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2098,
        "startLineNumber" : 112,
        "startColumnNumber" : 39,
        "endLineNumber" : 149,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (!Modifier.isStatic(field.getModifiers())) {\n    String fieldName=field.getName();\n    if (!fieldName.startsWith(\"this\")) {\n      try {\n        String value=remotingCommand.getExtFields().get(fieldName);\n        if (null == value) {\n          if (!isFieldNullable(field)) {\n            throw new RemotingCommandException(\"the custom field <\" + fieldName + \"> is null\");\n          }\n          continue;\n        }\n        field.setAccessible(true);\n        String type=getCanonicalName(field.getType());\n        Object valueParsed;\n        if (type.equals(STRING_CANONICAL_NAME)) {\n          valueParsed=value;\n        }\n else         if (type.equals(INTEGER_CANONICAL_NAME_1) || type.equals(INTEGER_CANONICAL_NAME_2)) {\n          valueParsed=Integer.parseInt(value);\n        }\n else         if (type.equals(LONG_CANONICAL_NAME_1) || type.equals(LONG_CANONICAL_NAME_2)) {\n          valueParsed=Long.parseLong(value);\n        }\n else         if (type.equals(BOOLEAN_CANONICAL_NAME_1) || type.equals(BOOLEAN_CANONICAL_NAME_2)) {\n          valueParsed=Boolean.parseBoolean(value);\n        }\n else         if (type.equals(DOUBLE_CANONICAL_NAME_1) || type.equals(DOUBLE_CANONICAL_NAME_2)) {\n          valueParsed=Double.parseDouble(value);\n        }\n else {\n          throw new RemotingCommandException(\"the custom field <\" + fieldName + \"> type is not supported\");\n        }\n        field.set(objectHeader,valueParsed);\n      }\n catch (      Throwable e) {\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 181,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2125,
        "startLineNumber" : 112,
        "startColumnNumber" : 12,
        "endLineNumber" : 149,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Field field : fields) {\n  if (!Modifier.isStatic(field.getModifiers())) {\n    String fieldName=field.getName();\n    if (!fieldName.startsWith(\"this\")) {\n      try {\n        String value=remotingCommand.getExtFields().get(fieldName);\n        if (null == value) {\n          if (!isFieldNullable(field)) {\n            throw new RemotingCommandException(\"the custom field <\" + fieldName + \"> is null\");\n          }\n          continue;\n        }\n        field.setAccessible(true);\n        String type=getCanonicalName(field.getType());\n        Object valueParsed;\n        if (type.equals(STRING_CANONICAL_NAME)) {\n          valueParsed=value;\n        }\n else         if (type.equals(INTEGER_CANONICAL_NAME_1) || type.equals(INTEGER_CANONICAL_NAME_2)) {\n          valueParsed=Integer.parseInt(value);\n        }\n else         if (type.equals(LONG_CANONICAL_NAME_1) || type.equals(LONG_CANONICAL_NAME_2)) {\n          valueParsed=Long.parseLong(value);\n        }\n else         if (type.equals(BOOLEAN_CANONICAL_NAME_1) || type.equals(BOOLEAN_CANONICAL_NAME_2)) {\n          valueParsed=Boolean.parseBoolean(value);\n        }\n else         if (type.equals(DOUBLE_CANONICAL_NAME_1) || type.equals(DOUBLE_CANONICAL_NAME_2)) {\n          valueParsed=Double.parseDouble(value);\n        }\n else {\n          throw new RemotingCommandException(\"the custom field <\" + fieldName + \"> type is not supported\");\n        }\n        field.set(objectHeader,valueParsed);\n      }\n catch (      Throwable e) {\n      }\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 187,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2248,
        "startLineNumber" : 110,
        "startColumnNumber" : 52,
        "endLineNumber" : 152,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Field[] fields=getClazzFields(classHeader);\n  for (  Field field : fields) {\n    if (!Modifier.isStatic(field.getModifiers())) {\n      String fieldName=field.getName();\n      if (!fieldName.startsWith(\"this\")) {\n        try {\n          String value=remotingCommand.getExtFields().get(fieldName);\n          if (null == value) {\n            if (!isFieldNullable(field)) {\n              throw new RemotingCommandException(\"the custom field <\" + fieldName + \"> is null\");\n            }\n            continue;\n          }\n          field.setAccessible(true);\n          String type=getCanonicalName(field.getType());\n          Object valueParsed;\n          if (type.equals(STRING_CANONICAL_NAME)) {\n            valueParsed=value;\n          }\n else           if (type.equals(INTEGER_CANONICAL_NAME_1) || type.equals(INTEGER_CANONICAL_NAME_2)) {\n            valueParsed=Integer.parseInt(value);\n          }\n else           if (type.equals(LONG_CANONICAL_NAME_1) || type.equals(LONG_CANONICAL_NAME_2)) {\n            valueParsed=Long.parseLong(value);\n          }\n else           if (type.equals(BOOLEAN_CANONICAL_NAME_1) || type.equals(BOOLEAN_CANONICAL_NAME_2)) {\n            valueParsed=Boolean.parseBoolean(value);\n          }\n else           if (type.equals(DOUBLE_CANONICAL_NAME_1) || type.equals(DOUBLE_CANONICAL_NAME_2)) {\n            valueParsed=Double.parseDouble(value);\n          }\n else {\n            throw new RemotingCommandException(\"the custom field <\" + fieldName + \"> type is not supported\");\n          }\n          field.set(objectHeader,valueParsed);\n        }\n catch (        Throwable e) {\n        }\n      }\n    }\n  }\n  objectHeader.checkFields();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 202,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2292,
        "startLineNumber" : 110,
        "startColumnNumber" : 8,
        "endLineNumber" : 152,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (remotingCommand.getExtFields() != null) {\n  Field[] fields=getClazzFields(classHeader);\n  for (  Field field : fields) {\n    if (!Modifier.isStatic(field.getModifiers())) {\n      String fieldName=field.getName();\n      if (!fieldName.startsWith(\"this\")) {\n        try {\n          String value=remotingCommand.getExtFields().get(fieldName);\n          if (null == value) {\n            if (!isFieldNullable(field)) {\n              throw new RemotingCommandException(\"the custom field <\" + fieldName + \"> is null\");\n            }\n            continue;\n          }\n          field.setAccessible(true);\n          String type=getCanonicalName(field.getType());\n          Object valueParsed;\n          if (type.equals(STRING_CANONICAL_NAME)) {\n            valueParsed=value;\n          }\n else           if (type.equals(INTEGER_CANONICAL_NAME_1) || type.equals(INTEGER_CANONICAL_NAME_2)) {\n            valueParsed=Integer.parseInt(value);\n          }\n else           if (type.equals(LONG_CANONICAL_NAME_1) || type.equals(LONG_CANONICAL_NAME_2)) {\n            valueParsed=Long.parseLong(value);\n          }\n else           if (type.equals(BOOLEAN_CANONICAL_NAME_1) || type.equals(BOOLEAN_CANONICAL_NAME_2)) {\n            valueParsed=Boolean.parseBoolean(value);\n          }\n else           if (type.equals(DOUBLE_CANONICAL_NAME_1) || type.equals(DOUBLE_CANONICAL_NAME_2)) {\n            valueParsed=Double.parseDouble(value);\n          }\n else {\n            throw new RemotingCommandException(\"the custom field <\" + fieldName + \"> type is not supported\");\n          }\n          field.set(objectHeader,valueParsed);\n        }\n catch (        Throwable e) {\n        }\n      }\n    }\n  }\n  objectHeader.checkFields();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 208,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2599,
        "startLineNumber" : 100,
        "startColumnNumber" : 90,
        "endLineNumber" : 155,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  CommandCustomHeader objectHeader;\n  try {\n    objectHeader=classHeader.newInstance();\n  }\n catch (  InstantiationException e) {\n    return null;\n  }\ncatch (  IllegalAccessException e) {\n    return null;\n  }\n  if (remotingCommand.getExtFields() != null) {\n    Field[] fields=getClazzFields(classHeader);\n    for (    Field field : fields) {\n      if (!Modifier.isStatic(field.getModifiers())) {\n        String fieldName=field.getName();\n        if (!fieldName.startsWith(\"this\")) {\n          try {\n            String value=remotingCommand.getExtFields().get(fieldName);\n            if (null == value) {\n              if (!isFieldNullable(field)) {\n                throw new RemotingCommandException(\"the custom field <\" + fieldName + \"> is null\");\n              }\n              continue;\n            }\n            field.setAccessible(true);\n            String type=getCanonicalName(field.getType());\n            Object valueParsed;\n            if (type.equals(STRING_CANONICAL_NAME)) {\n              valueParsed=value;\n            }\n else             if (type.equals(INTEGER_CANONICAL_NAME_1) || type.equals(INTEGER_CANONICAL_NAME_2)) {\n              valueParsed=Integer.parseInt(value);\n            }\n else             if (type.equals(LONG_CANONICAL_NAME_1) || type.equals(LONG_CANONICAL_NAME_2)) {\n              valueParsed=Long.parseLong(value);\n            }\n else             if (type.equals(BOOLEAN_CANONICAL_NAME_1) || type.equals(BOOLEAN_CANONICAL_NAME_2)) {\n              valueParsed=Boolean.parseBoolean(value);\n            }\n else             if (type.equals(DOUBLE_CANONICAL_NAME_1) || type.equals(DOUBLE_CANONICAL_NAME_2)) {\n              valueParsed=Double.parseDouble(value);\n            }\n else {\n              throw new RemotingCommandException(\"the custom field <\" + fieldName + \"> type is not supported\");\n            }\n            field.set(objectHeader,valueParsed);\n          }\n catch (          Throwable e) {\n          }\n        }\n      }\n    }\n    objectHeader.checkFields();\n  }\n  return objectHeader;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 240,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2782,
        "startLineNumber" : 99,
        "startColumnNumber" : 4,
        "endLineNumber" : 155,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static CommandCustomHeader decodeCommandCustomHeader(RemotingCommand remotingCommand,Class<? extends CommandCustomHeader> classHeader) throws RemotingCommandException {\n  CommandCustomHeader objectHeader;\n  try {\n    objectHeader=classHeader.newInstance();\n  }\n catch (  InstantiationException e) {\n    return null;\n  }\ncatch (  IllegalAccessException e) {\n    return null;\n  }\n  if (remotingCommand.getExtFields() != null) {\n    Field[] fields=getClazzFields(classHeader);\n    for (    Field field : fields) {\n      if (!Modifier.isStatic(field.getModifiers())) {\n        String fieldName=field.getName();\n        if (!fieldName.startsWith(\"this\")) {\n          try {\n            String value=remotingCommand.getExtFields().get(fieldName);\n            if (null == value) {\n              if (!isFieldNullable(field)) {\n                throw new RemotingCommandException(\"the custom field <\" + fieldName + \"> is null\");\n              }\n              continue;\n            }\n            field.setAccessible(true);\n            String type=getCanonicalName(field.getType());\n            Object valueParsed;\n            if (type.equals(STRING_CANONICAL_NAME)) {\n              valueParsed=value;\n            }\n else             if (type.equals(INTEGER_CANONICAL_NAME_1) || type.equals(INTEGER_CANONICAL_NAME_2)) {\n              valueParsed=Integer.parseInt(value);\n            }\n else             if (type.equals(LONG_CANONICAL_NAME_1) || type.equals(LONG_CANONICAL_NAME_2)) {\n              valueParsed=Long.parseLong(value);\n            }\n else             if (type.equals(BOOLEAN_CANONICAL_NAME_1) || type.equals(BOOLEAN_CANONICAL_NAME_2)) {\n              valueParsed=Boolean.parseBoolean(value);\n            }\n else             if (type.equals(DOUBLE_CANONICAL_NAME_1) || type.equals(DOUBLE_CANONICAL_NAME_2)) {\n              valueParsed=Double.parseDouble(value);\n            }\n else {\n              throw new RemotingCommandException(\"the custom field <\" + fieldName + \"> type is not supported\");\n            }\n            field.set(objectHeader,valueParsed);\n          }\n catch (          Throwable e) {\n          }\n        }\n      }\n    }\n    objectHeader.checkFields();\n  }\n  return objectHeader;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 260,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 132,
        "startColumnNumber" : 32,
        "endLineNumber" : 132,
        "endColumnNumber" : 70
      },
      "nodeContext" : "valueParsed=Integer.parseInt(value);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 132,
    "startColumnNumber" : 46,
    "endLineNumber" : 132,
    "endColumnNumber" : 69
  } ],
  "layoutRelationDataList" : [ ]
}