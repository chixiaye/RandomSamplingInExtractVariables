{
  "id" : 112,
  "expression" : "new TimerTask(){\n  @Override public void run(){\n    List<BlockedThreadEvent> events=new ArrayList<>();\n    Handler<BlockedThreadEvent> handler;\nsynchronized (BlockedThreadChecker.this) {\n      handler=blockedThreadHandler;\n      long now=System.nanoTime();\n      for (      Map.Entry<Thread,Task> entry : threads.entrySet()) {\n        long execStart=entry.getValue().startTime();\n        long dur=now - execStart;\n        final long timeLimit=entry.getValue().maxExecTime();\n        TimeUnit maxExecTimeUnit=entry.getValue().maxExecTimeUnit();\n        long maxExecTimeInNanos=TimeUnit.NANOSECONDS.convert(timeLimit,maxExecTimeUnit);\n        long warningExceptionTimeInNanos=TimeUnit.NANOSECONDS.convert(warningExceptionTime,warningExceptionTimeUnit);\n        if (execStart != 0 && dur >= maxExecTimeInNanos) {\n          events.add(new BlockedThreadEvent(entry.getKey(),dur,maxExecTimeInNanos,warningExceptionTimeInNanos));\n        }\n      }\n    }\n    events.forEach(handler::handle);\n  }\n}\n",
  "projectName" : "eclipse-vertx@vert.x",
  "commitID" : "665e20a715caff0cbaa72adfd1bb374c543281f0",
  "filePath" : "/src/main/java/io/vertx/core/impl/btc/BlockedThreadChecker.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new TimerTask(){\n  @Override public void run(){\n    List<BlockedThreadEvent> events=new ArrayList<>();\n    Handler<BlockedThreadEvent> handler;\nsynchronized (BlockedThreadChecker.this) {\n      handler=blockedThreadHandler;\n      long now=System.nanoTime();\n      for (      Map.Entry<Thread,Task> entry : threads.entrySet()) {\n        long execStart=entry.getValue().startTime();\n        long dur=now - execStart;\n        final long timeLimit=entry.getValue().maxExecTime();\n        TimeUnit maxExecTimeUnit=entry.getValue().maxExecTimeUnit();\n        long maxExecTimeInNanos=TimeUnit.NANOSECONDS.convert(timeLimit,maxExecTimeUnit);\n        long warningExceptionTimeInNanos=TimeUnit.NANOSECONDS.convert(warningExceptionTime,warningExceptionTimeUnit);\n        if (execStart != 0 && dur >= maxExecTimeInNanos) {\n          events.add(new BlockedThreadEvent(entry.getKey(),dur,maxExecTimeInNanos,warningExceptionTimeInNanos));\n        }\n      }\n    }\n    events.forEach(handler::handle);\n  }\n}\n",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 1125,
      "startLineNumber" : 52,
      "startColumnNumber" : 19,
      "endLineNumber" : 74,
      "endColumnNumber" : 5
    },
    "astNodeNumber" : 149,
    "astHeight" : 15,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 1207,
        "startLineNumber" : 52,
        "startColumnNumber" : 4,
        "endLineNumber" : 74,
        "endColumnNumber" : 72
      },
      "nodeContext" : "timer.schedule(new TimerTask(){\n  @Override public void run(){\n    List<BlockedThreadEvent> events=new ArrayList<>();\n    Handler<BlockedThreadEvent> handler;\nsynchronized (BlockedThreadChecker.this) {\n      handler=blockedThreadHandler;\n      long now=System.nanoTime();\n      for (      Map.Entry<Thread,Task> entry : threads.entrySet()) {\n        long execStart=entry.getValue().startTime();\n        long dur=now - execStart;\n        final long timeLimit=entry.getValue().maxExecTime();\n        TimeUnit maxExecTimeUnit=entry.getValue().maxExecTimeUnit();\n        long maxExecTimeInNanos=TimeUnit.NANOSECONDS.convert(timeLimit,maxExecTimeUnit);\n        long warningExceptionTimeInNanos=TimeUnit.NANOSECONDS.convert(warningExceptionTime,warningExceptionTimeUnit);\n        if (execStart != 0 && dur >= maxExecTimeInNanos) {\n          events.add(new BlockedThreadEvent(entry.getKey(),dur,maxExecTimeInNanos,warningExceptionTimeInNanos));\n        }\n      }\n    }\n    events.forEach(handler::handle);\n  }\n}\n,intervalUnit.toMillis(interval),intervalUnit.toMillis(interval))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 160,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1208,
        "startLineNumber" : 52,
        "startColumnNumber" : 4,
        "endLineNumber" : 74,
        "endColumnNumber" : 73
      },
      "nodeContext" : "timer.schedule(new TimerTask(){\n  @Override public void run(){\n    List<BlockedThreadEvent> events=new ArrayList<>();\n    Handler<BlockedThreadEvent> handler;\nsynchronized (BlockedThreadChecker.this) {\n      handler=blockedThreadHandler;\n      long now=System.nanoTime();\n      for (      Map.Entry<Thread,Task> entry : threads.entrySet()) {\n        long execStart=entry.getValue().startTime();\n        long dur=now - execStart;\n        final long timeLimit=entry.getValue().maxExecTime();\n        TimeUnit maxExecTimeUnit=entry.getValue().maxExecTimeUnit();\n        long maxExecTimeInNanos=TimeUnit.NANOSECONDS.convert(timeLimit,maxExecTimeUnit);\n        long warningExceptionTimeInNanos=TimeUnit.NANOSECONDS.convert(warningExceptionTime,warningExceptionTimeUnit);\n        if (execStart != 0 && dur >= maxExecTimeInNanos) {\n          events.add(new BlockedThreadEvent(entry.getKey(),dur,maxExecTimeInNanos,warningExceptionTimeInNanos));\n        }\n      }\n    }\n    events.forEach(handler::handle);\n  }\n}\n,intervalUnit.toMillis(interval),intervalUnit.toMillis(interval));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 161,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1361,
        "startLineNumber" : 49,
        "startColumnNumber" : 130,
        "endLineNumber" : 75,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  timer=new Timer(\"vertx-blocked-thread-checker\",true);\n  blockedThreadHandler=BlockedThreadChecker::defaultBlockedThreadHandler;\n  timer.schedule(new TimerTask(){\n    @Override public void run(){\n      List<BlockedThreadEvent> events=new ArrayList<>();\n      Handler<BlockedThreadEvent> handler;\nsynchronized (BlockedThreadChecker.this) {\n        handler=blockedThreadHandler;\n        long now=System.nanoTime();\n        for (        Map.Entry<Thread,Task> entry : threads.entrySet()) {\n          long execStart=entry.getValue().startTime();\n          long dur=now - execStart;\n          final long timeLimit=entry.getValue().maxExecTime();\n          TimeUnit maxExecTimeUnit=entry.getValue().maxExecTimeUnit();\n          long maxExecTimeInNanos=TimeUnit.NANOSECONDS.convert(timeLimit,maxExecTimeUnit);\n          long warningExceptionTimeInNanos=TimeUnit.NANOSECONDS.convert(warningExceptionTime,warningExceptionTimeUnit);\n          if (execStart != 0 && dur >= maxExecTimeInNanos) {\n            events.add(new BlockedThreadEvent(entry.getKey(),dur,maxExecTimeInNanos,warningExceptionTimeInNanos));\n          }\n        }\n      }\n      events.forEach(handler::handle);\n    }\n  }\n,intervalUnit.toMillis(interval),intervalUnit.toMillis(interval));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 176,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1489,
        "startLineNumber" : 49,
        "startColumnNumber" : 2,
        "endLineNumber" : 75,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public BlockedThreadChecker(long interval,TimeUnit intervalUnit,long warningExceptionTime,TimeUnit warningExceptionTimeUnit){\n  timer=new Timer(\"vertx-blocked-thread-checker\",true);\n  blockedThreadHandler=BlockedThreadChecker::defaultBlockedThreadHandler;\n  timer.schedule(new TimerTask(){\n    @Override public void run(){\n      List<BlockedThreadEvent> events=new ArrayList<>();\n      Handler<BlockedThreadEvent> handler;\nsynchronized (BlockedThreadChecker.this) {\n        handler=blockedThreadHandler;\n        long now=System.nanoTime();\n        for (        Map.Entry<Thread,Task> entry : threads.entrySet()) {\n          long execStart=entry.getValue().startTime();\n          long dur=now - execStart;\n          final long timeLimit=entry.getValue().maxExecTime();\n          TimeUnit maxExecTimeUnit=entry.getValue().maxExecTimeUnit();\n          long maxExecTimeInNanos=TimeUnit.NANOSECONDS.convert(timeLimit,maxExecTimeUnit);\n          long warningExceptionTimeInNanos=TimeUnit.NANOSECONDS.convert(warningExceptionTime,warningExceptionTimeUnit);\n          if (execStart != 0 && dur >= maxExecTimeInNanos) {\n            events.add(new BlockedThreadEvent(entry.getKey(),dur,maxExecTimeInNanos,warningExceptionTimeInNanos));\n          }\n        }\n      }\n      events.forEach(handler::handle);\n    }\n  }\n,intervalUnit.toMillis(interval),intervalUnit.toMillis(interval));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 193,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1208,
        "startLineNumber" : 52,
        "startColumnNumber" : 4,
        "endLineNumber" : 74,
        "endColumnNumber" : 73
      },
      "nodeContext" : "timer.schedule(new TimerTask(){\n  @Override public void run(){\n    List<BlockedThreadEvent> events=new ArrayList<>();\n    Handler<BlockedThreadEvent> handler;\nsynchronized (BlockedThreadChecker.this) {\n      handler=blockedThreadHandler;\n      long now=System.nanoTime();\n      for (      Map.Entry<Thread,Task> entry : threads.entrySet()) {\n        long execStart=entry.getValue().startTime();\n        long dur=now - execStart;\n        final long timeLimit=entry.getValue().maxExecTime();\n        TimeUnit maxExecTimeUnit=entry.getValue().maxExecTimeUnit();\n        long maxExecTimeInNanos=TimeUnit.NANOSECONDS.convert(timeLimit,maxExecTimeUnit);\n        long warningExceptionTimeInNanos=TimeUnit.NANOSECONDS.convert(warningExceptionTime,warningExceptionTimeUnit);\n        if (execStart != 0 && dur >= maxExecTimeInNanos) {\n          events.add(new BlockedThreadEvent(entry.getKey(),dur,maxExecTimeInNanos,warningExceptionTimeInNanos));\n        }\n      }\n    }\n    events.forEach(handler::handle);\n  }\n}\n,intervalUnit.toMillis(interval),intervalUnit.toMillis(interval));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 161,
      "astHeight" : 17
    },
    "tokenLength" : 60,
    "type" : ""
  } ],
  "positionList" : [ {
    "charLength" : 1125,
    "startLineNumber" : 52,
    "startColumnNumber" : 19,
    "endLineNumber" : 74,
    "endColumnNumber" : 5
  } ],
  "layoutRelationDataList" : [ ]
}