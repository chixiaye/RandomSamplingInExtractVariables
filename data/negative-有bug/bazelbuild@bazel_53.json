{
  "id" : 53,
  "expression" : "candidateClass",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/test/java/com/google/devtools/build/lib/starlark/StarlarkAnnotationContractTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "candidateClass",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 56,
      "startColumnNumber" : 45,
      "endLineNumber" : 56,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 56,
        "startColumnNumber" : 6,
        "endLineNumber" : 56,
        "endColumnNumber" : 60
      },
      "nodeContext" : "StarlarkAnnotations.getStarlarkBuiltin(candidateClass)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 56,
        "startColumnNumber" : 6,
        "endLineNumber" : 56,
        "endColumnNumber" : 61
      },
      "nodeContext" : "StarlarkAnnotations.getStarlarkBuiltin(candidateClass);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 55,
        "startColumnNumber" : 82,
        "endLineNumber" : 57,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  StarlarkAnnotations.getStarlarkBuiltin(candidateClass);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 147,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 57,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Class<?> candidateClass : Classpath.findClasses(MODULES_PACKAGE_PREFIX)) {\n  StarlarkAnnotations.getStarlarkBuiltin(candidateClass);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 157,
        "startLineNumber" : 54,
        "startColumnNumber" : 64,
        "endLineNumber" : 58,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (  Class<?> candidateClass : Classpath.findClasses(MODULES_PACKAGE_PREFIX)) {\n    StarlarkAnnotations.getStarlarkBuiltin(candidateClass);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 928,
        "startLineNumber" : 41,
        "startColumnNumber" : 2,
        "endLineNumber" : 58,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Verifies that every class in bazel that implements or extends a Starlark type has a clearly resolvable type. <p>If this test fails, it indicates the following error scenario: <p>Suppose class A is a subclass of both B and C, where B and C are annotated with  {@link StarlarkBuiltin} annotations (and are thus considered \"Starlark types\"). If B is not a subclassof C (nor visa versa), then it's impossible to resolve whether A is of type B or if A is of type C. It's both! The way to resolve this is usually to have A be its own type (annotated with {@link StarlarkBuiltin}), and thus have the explicit type of A be semantically \"B and C\".\n */\n@Test public void testResolvableStarlarkBuiltins() throws Exception {\n  for (  Class<?> candidateClass : Classpath.findClasses(MODULES_PACKAGE_PREFIX)) {\n    StarlarkAnnotations.getStarlarkBuiltin(candidateClass);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 27,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 56,
        "startColumnNumber" : 6,
        "endLineNumber" : 56,
        "endColumnNumber" : 61
      },
      "nodeContext" : "StarlarkAnnotations.getStarlarkBuiltin(candidateClass);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<>"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 56,
    "startColumnNumber" : 45,
    "endLineNumber" : 56,
    "endColumnNumber" : 59
  } ],
  "layoutRelationDataList" : [ ]
}