{
  "id" : 454,
  "expression" : "charA != charB",
  "projectName" : "arduino@Arduino",
  "commitID" : "cf1879f948e0c1fa9ddd91f7348fbdd07fd870cb",
  "filePath" : "/arduino-core/src/processing/app/SerialPortList.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "charA != charB",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 95,
      "startColumnNumber" : 19,
      "endLineNumber" : 95,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1080,
        "startLineNumber" : 95,
        "startColumnNumber" : 16,
        "endLineNumber" : 118,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (charA != charB) {\n  if (Character.isDigit(charA) && Character.isDigit(charB)) {\n    int[] resultsA=getNumberAndLastIndex(valueA,i - shiftA);\n    int[] resultsB=getNumberAndLastIndex(valueB,i - shiftB);\n    if (resultsA[0] != resultsB[0]) {\n      return resultsA[0] - resultsB[0];\n    }\n    if (valueA.length() < valueB.length()) {\n      i=resultsA[1];\n      shiftB=resultsA[1] - resultsB[1];\n    }\n else {\n      i=resultsB[1];\n      shiftA=resultsB[1] - resultsA[1];\n    }\n  }\n else {\n    if (Character.toLowerCase(charA) - Character.toLowerCase(charB) != 0) {\n      return Character.toLowerCase(charA) - Character.toLowerCase(charB);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 123,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1224,
        "startLineNumber" : 92,
        "startColumnNumber" : 46,
        "endLineNumber" : 119,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  char charA=valueA.charAt(i - shiftA);\n  char charB=valueB.charAt(i - shiftB);\n  if (charA != charB) {\n    if (Character.isDigit(charA) && Character.isDigit(charB)) {\n      int[] resultsA=getNumberAndLastIndex(valueA,i - shiftA);\n      int[] resultsB=getNumberAndLastIndex(valueB,i - shiftB);\n      if (resultsA[0] != resultsB[0]) {\n        return resultsA[0] - resultsB[0];\n      }\n      if (valueA.length() < valueB.length()) {\n        i=resultsA[1];\n        shiftB=resultsA[1] - resultsB[1];\n      }\n else {\n        i=resultsB[1];\n        shiftA=resultsB[1] - resultsA[1];\n      }\n    }\n else {\n      if (Character.toLowerCase(charA) - Character.toLowerCase(charB) != 0) {\n        return Character.toLowerCase(charA) - Character.toLowerCase(charB);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 144,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1258,
        "startLineNumber" : 92,
        "startColumnNumber" : 12,
        "endLineNumber" : 119,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < minLength; i++) {\n  char charA=valueA.charAt(i - shiftA);\n  char charB=valueB.charAt(i - shiftB);\n  if (charA != charB) {\n    if (Character.isDigit(charA) && Character.isDigit(charB)) {\n      int[] resultsA=getNumberAndLastIndex(valueA,i - shiftA);\n      int[] resultsB=getNumberAndLastIndex(valueB,i - shiftB);\n      if (resultsA[0] != resultsB[0]) {\n        return resultsA[0] - resultsB[0];\n      }\n      if (valueA.length() < valueB.length()) {\n        i=resultsA[1];\n        shiftB=resultsA[1] - resultsB[1];\n      }\n else {\n        i=resultsB[1];\n        shiftA=resultsB[1] - resultsA[1];\n      }\n    }\n else {\n      if (Character.toLowerCase(charA) - Character.toLowerCase(charB) != 0) {\n        return Character.toLowerCase(charA) - Character.toLowerCase(charB);\n      }\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 155,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1581,
        "startLineNumber" : 81,
        "startColumnNumber" : 57,
        "endLineNumber" : 121,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (valueA.equalsIgnoreCase(valueB)) {\n    return valueA.compareTo(valueB);\n  }\n  int minLength=Math.min(valueA.length(),valueB.length());\n  int shiftA=0;\n  int shiftB=0;\n  for (int i=0; i < minLength; i++) {\n    char charA=valueA.charAt(i - shiftA);\n    char charB=valueB.charAt(i - shiftB);\n    if (charA != charB) {\n      if (Character.isDigit(charA) && Character.isDigit(charB)) {\n        int[] resultsA=getNumberAndLastIndex(valueA,i - shiftA);\n        int[] resultsB=getNumberAndLastIndex(valueB,i - shiftB);\n        if (resultsA[0] != resultsB[0]) {\n          return resultsA[0] - resultsB[0];\n        }\n        if (valueA.length() < valueB.length()) {\n          i=resultsA[1];\n          shiftB=resultsA[1] - resultsB[1];\n        }\n else {\n          i=resultsB[1];\n          shiftA=resultsB[1] - resultsA[1];\n        }\n      }\n else {\n        if (Character.toLowerCase(charA) - Character.toLowerCase(charB) != 0) {\n          return Character.toLowerCase(charA) - Character.toLowerCase(charB);\n        }\n      }\n    }\n  }\n  return valueA.compareToIgnoreCase(valueB);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 195,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.AnonymousClassDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1648,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 121,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public int compare(String valueA,String valueB){\n  if (valueA.equalsIgnoreCase(valueB)) {\n    return valueA.compareTo(valueB);\n  }\n  int minLength=Math.min(valueA.length(),valueB.length());\n  int shiftA=0;\n  int shiftB=0;\n  for (int i=0; i < minLength; i++) {\n    char charA=valueA.charAt(i - shiftA);\n    char charB=valueB.charAt(i - shiftB);\n    if (charA != charB) {\n      if (Character.isDigit(charA) && Character.isDigit(charB)) {\n        int[] resultsA=getNumberAndLastIndex(valueA,i - shiftA);\n        int[] resultsB=getNumberAndLastIndex(valueB,i - shiftB);\n        if (resultsA[0] != resultsB[0]) {\n          return resultsA[0] - resultsB[0];\n        }\n        if (valueA.length() < valueB.length()) {\n          i=resultsA[1];\n          shiftB=resultsA[1] - resultsB[1];\n        }\n else {\n          i=resultsB[1];\n          shiftA=resultsB[1] - resultsA[1];\n        }\n      }\n else {\n        if (Character.toLowerCase(charA) - Character.toLowerCase(charB) != 0) {\n          return Character.toLowerCase(charA) - Character.toLowerCase(charB);\n        }\n      }\n    }\n  }\n  return valueA.compareToIgnoreCase(valueB);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 209,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1080,
        "startLineNumber" : 95,
        "startColumnNumber" : 16,
        "endLineNumber" : 118,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (charA != charB) {\n  if (Character.isDigit(charA) && Character.isDigit(charB)) {\n    int[] resultsA=getNumberAndLastIndex(valueA,i - shiftA);\n    int[] resultsB=getNumberAndLastIndex(valueB,i - shiftB);\n    if (resultsA[0] != resultsB[0]) {\n      return resultsA[0] - resultsB[0];\n    }\n    if (valueA.length() < valueB.length()) {\n      i=resultsA[1];\n      shiftB=resultsA[1] - resultsB[1];\n    }\n else {\n      i=resultsB[1];\n      shiftA=resultsB[1] - resultsA[1];\n    }\n  }\n else {\n    if (Character.toLowerCase(charA) - Character.toLowerCase(charB) != 0) {\n      return Character.toLowerCase(charA) - Character.toLowerCase(charB);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 123,
      "astHeight" : 11
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 95,
    "startColumnNumber" : 19,
    "endLineNumber" : 95,
    "endColumnNumber" : 33
  } ],
  "layoutRelationDataList" : [ ]
}