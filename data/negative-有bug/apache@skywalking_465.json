{
  "id" : 465,
  "expression" : "channels",
  "projectName" : "apache@skywalking",
  "commitID" : "16b51d55baec4f779f312e07081d1397addbcfe9",
  "filePath" : "/apm-commons/apm-datacarrier/src/test/java/org/apache/skywalking/apm/commons/datacarrier/DataCarrierTest.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "channels",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 40,
      "startColumnNumber" : 31,
      "endLineNumber" : 40,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 40,
        "startColumnNumber" : 31,
        "endLineNumber" : 40,
        "endColumnNumber" : 56
      },
      "nodeContext" : "channels.getChannelSize()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 40,
        "startColumnNumber" : 8,
        "endLineNumber" : 40,
        "endColumnNumber" : 57
      },
      "nodeContext" : "Assert.assertEquals(5,channels.getChannelSize())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 40,
        "startColumnNumber" : 8,
        "endLineNumber" : 40,
        "endColumnNumber" : 58
      },
      "nodeContext" : "Assert.assertEquals(5,channels.getChannelSize());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1322,
        "startLineNumber" : 35,
        "startColumnNumber" : 70,
        "endLineNumber" : 56,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DataCarrier<SampleData> carrier=new DataCarrier<>(5,100,BufferStrategy.IF_POSSIBLE);\n  Channels<SampleData> channels=(Channels<SampleData>)(MemberModifier.field(DataCarrier.class,\"channels\").get(carrier));\n  Assert.assertEquals(5,channels.getChannelSize());\n  QueueBuffer<SampleData> buffer=channels.getBuffer(0);\n  Assert.assertEquals(100,buffer.getBufferSize());\n  Assert.assertEquals(MemberModifier.field(buffer.getClass(),\"strategy\").get(buffer),BufferStrategy.IF_POSSIBLE);\n  Assert.assertEquals(MemberModifier.field(buffer.getClass(),\"strategy\").get(buffer),BufferStrategy.IF_POSSIBLE);\n  Assert.assertEquals(MemberModifier.field(Channels.class,\"dataPartitioner\").get(channels).getClass(),SimpleRollingPartitioner.class);\n  carrier.setPartitioner(new ProducerThreadPartitioner<SampleData>());\n  Assert.assertEquals(MemberModifier.field(Channels.class,\"dataPartitioner\").get(channels).getClass(),ProducerThreadPartitioner.class);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 153,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1398,
        "startLineNumber" : 34,
        "startColumnNumber" : 4,
        "endLineNumber" : 56,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testCreateDataCarrier() throws IllegalAccessException {\n  DataCarrier<SampleData> carrier=new DataCarrier<>(5,100,BufferStrategy.IF_POSSIBLE);\n  Channels<SampleData> channels=(Channels<SampleData>)(MemberModifier.field(DataCarrier.class,\"channels\").get(carrier));\n  Assert.assertEquals(5,channels.getChannelSize());\n  QueueBuffer<SampleData> buffer=channels.getBuffer(0);\n  Assert.assertEquals(100,buffer.getBufferSize());\n  Assert.assertEquals(MemberModifier.field(buffer.getClass(),\"strategy\").get(buffer),BufferStrategy.IF_POSSIBLE);\n  Assert.assertEquals(MemberModifier.field(buffer.getClass(),\"strategy\").get(buffer),BufferStrategy.IF_POSSIBLE);\n  Assert.assertEquals(MemberModifier.field(Channels.class,\"dataPartitioner\").get(channels).getClass(),SimpleRollingPartitioner.class);\n  carrier.setPartitioner(new ProducerThreadPartitioner<SampleData>());\n  Assert.assertEquals(MemberModifier.field(Channels.class,\"dataPartitioner\").get(channels).getClass(),ProducerThreadPartitioner.class);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 161,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 40,
        "startColumnNumber" : 8,
        "endLineNumber" : 40,
        "endColumnNumber" : 58
      },
      "nodeContext" : "Assert.assertEquals(5,channels.getChannelSize());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.skywalking.apm.commons.datacarrier.buffer.Channels<org.apache.skywalking.apm.commons.datacarrier.SampleData>"
  }, {
    "nodeContext" : "channels",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 42,
      "startColumnNumber" : 41,
      "endLineNumber" : 42,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 42,
        "startColumnNumber" : 41,
        "endLineNumber" : 42,
        "endColumnNumber" : 62
      },
      "nodeContext" : "channels.getBuffer(0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 42,
        "startColumnNumber" : 32,
        "endLineNumber" : 42,
        "endColumnNumber" : 62
      },
      "nodeContext" : "buffer=channels.getBuffer(0)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 42,
        "startColumnNumber" : 8,
        "endLineNumber" : 42,
        "endColumnNumber" : 63
      },
      "nodeContext" : "QueueBuffer<SampleData> buffer=channels.getBuffer(0);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1322,
        "startLineNumber" : 35,
        "startColumnNumber" : 70,
        "endLineNumber" : 56,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DataCarrier<SampleData> carrier=new DataCarrier<>(5,100,BufferStrategy.IF_POSSIBLE);\n  Channels<SampleData> channels=(Channels<SampleData>)(MemberModifier.field(DataCarrier.class,\"channels\").get(carrier));\n  Assert.assertEquals(5,channels.getChannelSize());\n  QueueBuffer<SampleData> buffer=channels.getBuffer(0);\n  Assert.assertEquals(100,buffer.getBufferSize());\n  Assert.assertEquals(MemberModifier.field(buffer.getClass(),\"strategy\").get(buffer),BufferStrategy.IF_POSSIBLE);\n  Assert.assertEquals(MemberModifier.field(buffer.getClass(),\"strategy\").get(buffer),BufferStrategy.IF_POSSIBLE);\n  Assert.assertEquals(MemberModifier.field(Channels.class,\"dataPartitioner\").get(channels).getClass(),SimpleRollingPartitioner.class);\n  carrier.setPartitioner(new ProducerThreadPartitioner<SampleData>());\n  Assert.assertEquals(MemberModifier.field(Channels.class,\"dataPartitioner\").get(channels).getClass(),ProducerThreadPartitioner.class);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 153,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1398,
        "startLineNumber" : 34,
        "startColumnNumber" : 4,
        "endLineNumber" : 56,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testCreateDataCarrier() throws IllegalAccessException {\n  DataCarrier<SampleData> carrier=new DataCarrier<>(5,100,BufferStrategy.IF_POSSIBLE);\n  Channels<SampleData> channels=(Channels<SampleData>)(MemberModifier.field(DataCarrier.class,\"channels\").get(carrier));\n  Assert.assertEquals(5,channels.getChannelSize());\n  QueueBuffer<SampleData> buffer=channels.getBuffer(0);\n  Assert.assertEquals(100,buffer.getBufferSize());\n  Assert.assertEquals(MemberModifier.field(buffer.getClass(),\"strategy\").get(buffer),BufferStrategy.IF_POSSIBLE);\n  Assert.assertEquals(MemberModifier.field(buffer.getClass(),\"strategy\").get(buffer),BufferStrategy.IF_POSSIBLE);\n  Assert.assertEquals(MemberModifier.field(Channels.class,\"dataPartitioner\").get(channels).getClass(),SimpleRollingPartitioner.class);\n  carrier.setPartitioner(new ProducerThreadPartitioner<SampleData>());\n  Assert.assertEquals(MemberModifier.field(Channels.class,\"dataPartitioner\").get(channels).getClass(),ProducerThreadPartitioner.class);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 161,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 42,
        "startColumnNumber" : 8,
        "endLineNumber" : 42,
        "endColumnNumber" : 63
      },
      "nodeContext" : "QueueBuffer<SampleData> buffer=channels.getBuffer(0);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.skywalking.apm.commons.datacarrier.buffer.Channels<org.apache.skywalking.apm.commons.datacarrier.SampleData>"
  }, {
    "nodeContext" : "channels",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 50,
      "startColumnNumber" : 47,
      "endLineNumber" : 50,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 112,
        "startLineNumber" : 49,
        "startColumnNumber" : 28,
        "endLineNumber" : 50,
        "endColumnNumber" : 56
      },
      "nodeContext" : "MemberModifier.field(Channels.class,\"dataPartitioner\").get(channels)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 166,
        "startLineNumber" : 49,
        "startColumnNumber" : 28,
        "endLineNumber" : 51,
        "endColumnNumber" : 53
      },
      "nodeContext" : "MemberModifier.field(Channels.class,\"dataPartitioner\").get(channels).getClass()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 219,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 51,
        "endColumnNumber" : 86
      },
      "nodeContext" : "Assert.assertEquals(MemberModifier.field(Channels.class,\"dataPartitioner\").get(channels).getClass(),SimpleRollingPartitioner.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 220,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 51,
        "endColumnNumber" : 87
      },
      "nodeContext" : "Assert.assertEquals(MemberModifier.field(Channels.class,\"dataPartitioner\").get(channels).getClass(),SimpleRollingPartitioner.class);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1322,
        "startLineNumber" : 35,
        "startColumnNumber" : 70,
        "endLineNumber" : 56,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DataCarrier<SampleData> carrier=new DataCarrier<>(5,100,BufferStrategy.IF_POSSIBLE);\n  Channels<SampleData> channels=(Channels<SampleData>)(MemberModifier.field(DataCarrier.class,\"channels\").get(carrier));\n  Assert.assertEquals(5,channels.getChannelSize());\n  QueueBuffer<SampleData> buffer=channels.getBuffer(0);\n  Assert.assertEquals(100,buffer.getBufferSize());\n  Assert.assertEquals(MemberModifier.field(buffer.getClass(),\"strategy\").get(buffer),BufferStrategy.IF_POSSIBLE);\n  Assert.assertEquals(MemberModifier.field(buffer.getClass(),\"strategy\").get(buffer),BufferStrategy.IF_POSSIBLE);\n  Assert.assertEquals(MemberModifier.field(Channels.class,\"dataPartitioner\").get(channels).getClass(),SimpleRollingPartitioner.class);\n  carrier.setPartitioner(new ProducerThreadPartitioner<SampleData>());\n  Assert.assertEquals(MemberModifier.field(Channels.class,\"dataPartitioner\").get(channels).getClass(),ProducerThreadPartitioner.class);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 153,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1398,
        "startLineNumber" : 34,
        "startColumnNumber" : 4,
        "endLineNumber" : 56,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testCreateDataCarrier() throws IllegalAccessException {\n  DataCarrier<SampleData> carrier=new DataCarrier<>(5,100,BufferStrategy.IF_POSSIBLE);\n  Channels<SampleData> channels=(Channels<SampleData>)(MemberModifier.field(DataCarrier.class,\"channels\").get(carrier));\n  Assert.assertEquals(5,channels.getChannelSize());\n  QueueBuffer<SampleData> buffer=channels.getBuffer(0);\n  Assert.assertEquals(100,buffer.getBufferSize());\n  Assert.assertEquals(MemberModifier.field(buffer.getClass(),\"strategy\").get(buffer),BufferStrategy.IF_POSSIBLE);\n  Assert.assertEquals(MemberModifier.field(buffer.getClass(),\"strategy\").get(buffer),BufferStrategy.IF_POSSIBLE);\n  Assert.assertEquals(MemberModifier.field(Channels.class,\"dataPartitioner\").get(channels).getClass(),SimpleRollingPartitioner.class);\n  carrier.setPartitioner(new ProducerThreadPartitioner<SampleData>());\n  Assert.assertEquals(MemberModifier.field(Channels.class,\"dataPartitioner\").get(channels).getClass(),ProducerThreadPartitioner.class);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 161,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 112,
        "startLineNumber" : 49,
        "startColumnNumber" : 28,
        "endLineNumber" : 50,
        "endColumnNumber" : 56
      },
      "nodeContext" : "MemberModifier.field(Channels.class,\"dataPartitioner\").get(channels)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.skywalking.apm.commons.datacarrier.buffer.Channels<org.apache.skywalking.apm.commons.datacarrier.SampleData>"
  }, {
    "nodeContext" : "channels",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 54,
      "startColumnNumber" : 47,
      "endLineNumber" : 54,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 112,
        "startLineNumber" : 53,
        "startColumnNumber" : 28,
        "endLineNumber" : 54,
        "endColumnNumber" : 56
      },
      "nodeContext" : "MemberModifier.field(Channels.class,\"dataPartitioner\").get(channels)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 166,
        "startLineNumber" : 53,
        "startColumnNumber" : 28,
        "endLineNumber" : 55,
        "endColumnNumber" : 53
      },
      "nodeContext" : "MemberModifier.field(Channels.class,\"dataPartitioner\").get(channels).getClass()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 220,
        "startLineNumber" : 53,
        "startColumnNumber" : 8,
        "endLineNumber" : 55,
        "endColumnNumber" : 87
      },
      "nodeContext" : "Assert.assertEquals(MemberModifier.field(Channels.class,\"dataPartitioner\").get(channels).getClass(),ProducerThreadPartitioner.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 221,
        "startLineNumber" : 53,
        "startColumnNumber" : 8,
        "endLineNumber" : 55,
        "endColumnNumber" : 88
      },
      "nodeContext" : "Assert.assertEquals(MemberModifier.field(Channels.class,\"dataPartitioner\").get(channels).getClass(),ProducerThreadPartitioner.class);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1322,
        "startLineNumber" : 35,
        "startColumnNumber" : 70,
        "endLineNumber" : 56,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DataCarrier<SampleData> carrier=new DataCarrier<>(5,100,BufferStrategy.IF_POSSIBLE);\n  Channels<SampleData> channels=(Channels<SampleData>)(MemberModifier.field(DataCarrier.class,\"channels\").get(carrier));\n  Assert.assertEquals(5,channels.getChannelSize());\n  QueueBuffer<SampleData> buffer=channels.getBuffer(0);\n  Assert.assertEquals(100,buffer.getBufferSize());\n  Assert.assertEquals(MemberModifier.field(buffer.getClass(),\"strategy\").get(buffer),BufferStrategy.IF_POSSIBLE);\n  Assert.assertEquals(MemberModifier.field(buffer.getClass(),\"strategy\").get(buffer),BufferStrategy.IF_POSSIBLE);\n  Assert.assertEquals(MemberModifier.field(Channels.class,\"dataPartitioner\").get(channels).getClass(),SimpleRollingPartitioner.class);\n  carrier.setPartitioner(new ProducerThreadPartitioner<SampleData>());\n  Assert.assertEquals(MemberModifier.field(Channels.class,\"dataPartitioner\").get(channels).getClass(),ProducerThreadPartitioner.class);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 153,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1398,
        "startLineNumber" : 34,
        "startColumnNumber" : 4,
        "endLineNumber" : 56,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testCreateDataCarrier() throws IllegalAccessException {\n  DataCarrier<SampleData> carrier=new DataCarrier<>(5,100,BufferStrategy.IF_POSSIBLE);\n  Channels<SampleData> channels=(Channels<SampleData>)(MemberModifier.field(DataCarrier.class,\"channels\").get(carrier));\n  Assert.assertEquals(5,channels.getChannelSize());\n  QueueBuffer<SampleData> buffer=channels.getBuffer(0);\n  Assert.assertEquals(100,buffer.getBufferSize());\n  Assert.assertEquals(MemberModifier.field(buffer.getClass(),\"strategy\").get(buffer),BufferStrategy.IF_POSSIBLE);\n  Assert.assertEquals(MemberModifier.field(buffer.getClass(),\"strategy\").get(buffer),BufferStrategy.IF_POSSIBLE);\n  Assert.assertEquals(MemberModifier.field(Channels.class,\"dataPartitioner\").get(channels).getClass(),SimpleRollingPartitioner.class);\n  carrier.setPartitioner(new ProducerThreadPartitioner<SampleData>());\n  Assert.assertEquals(MemberModifier.field(Channels.class,\"dataPartitioner\").get(channels).getClass(),ProducerThreadPartitioner.class);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 161,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 112,
        "startLineNumber" : 53,
        "startColumnNumber" : 28,
        "endLineNumber" : 54,
        "endColumnNumber" : 56
      },
      "nodeContext" : "MemberModifier.field(Channels.class,\"dataPartitioner\").get(channels)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.skywalking.apm.commons.datacarrier.buffer.Channels<org.apache.skywalking.apm.commons.datacarrier.SampleData>"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 40,
    "startColumnNumber" : 31,
    "endLineNumber" : 40,
    "endColumnNumber" : 39
  }, {
    "charLength" : 8,
    "startLineNumber" : 42,
    "startColumnNumber" : 41,
    "endLineNumber" : 42,
    "endColumnNumber" : 49
  }, {
    "charLength" : 8,
    "startLineNumber" : 50,
    "startColumnNumber" : 47,
    "endLineNumber" : 50,
    "endColumnNumber" : 55
  }, {
    "charLength" : 8,
    "startLineNumber" : 54,
    "startColumnNumber" : 47,
    "endLineNumber" : 54,
    "endColumnNumber" : 55
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  } ]
}