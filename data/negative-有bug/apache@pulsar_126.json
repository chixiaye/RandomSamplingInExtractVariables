{
  "id" : 126,
  "expression" : "\"flink-examples\"",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/examples/flink/src/main/java/org/apache/flink/streaming/connectors/pulsar/example/PulsarConsumerSourceWordCount.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"flink-examples\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 66,
      "startColumnNumber" : 64,
      "endLineNumber" : 66,
      "endColumnNumber" : 80
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 66,
        "startColumnNumber" : 30,
        "endLineNumber" : 66,
        "endColumnNumber" : 81
      },
      "nodeContext" : "parameterTool.get(\"subscription\",\"flink-examples\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 66,
        "startColumnNumber" : 15,
        "endLineNumber" : 66,
        "endColumnNumber" : 81
      },
      "nodeContext" : "subscription=parameterTool.get(\"subscription\",\"flink-examples\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 66,
        "startColumnNumber" : 8,
        "endLineNumber" : 66,
        "endColumnNumber" : 82
      },
      "nodeContext" : "String subscription=parameterTool.get(\"subscription\",\"flink-examples\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2954,
        "startLineNumber" : 47,
        "startColumnNumber" : 60,
        "endLineNumber" : 109,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final ParameterTool parameterTool=ParameterTool.fromArgs(args);\n  if (parameterTool.getNumberOfParameters() < 2) {\n    System.out.println(\"Missing parameters!\");\n    System.out.println(\"Usage: pulsar --service-url <pulsar-service-url> --input-topic <topic> --subscription <sub> --output-topic <topic>\");\n    return;\n  }\n  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();\n  env.getConfig().disableSysoutLogging();\n  env.getConfig().setRestartStrategy(RestartStrategies.fixedDelayRestart(4,10000));\n  env.enableCheckpointing(5000);\n  env.getConfig().setGlobalJobParameters(parameterTool);\n  env.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n  String serviceUrl=parameterTool.getRequired(\"service-url\");\n  String inputTopic=parameterTool.getRequired(\"input-topic\");\n  String subscription=parameterTool.get(\"subscription\",\"flink-examples\");\n  String outputTopic=parameterTool.get(\"output-topic\",null);\n  int parallelism=parameterTool.getInt(\"parallelism\",1);\n  System.out.println(\"Parameters:\");\n  System.out.println(\"\\tServiceUrl:\\t\" + serviceUrl);\n  System.out.println(\"\\tInputTopic:\\t\" + inputTopic);\n  System.out.println(\"\\tSubscription:\\t\" + subscription);\n  System.out.println(\"\\tOutputTopic:\\t\" + outputTopic);\n  System.out.println(\"\\tParallelism:\\t\" + parallelism);\n  PulsarSourceBuilder<String> builder=PulsarSourceBuilder.builder(new SimpleStringSchema()).serviceUrl(serviceUrl).topic(inputTopic).subscriptionName(subscription);\n  SourceFunction<String> src=builder.build();\n  DataStream<String> input=env.addSource(src);\n  DataStream<WordWithCount> wc=input.flatMap((FlatMapFunction<String,WordWithCount>)(line,collector) -> {\n    for (    String word : line.split(\"\\\\s\")) {\n      collector.collect(new WordWithCount(word,1));\n    }\n  }\n).returns(WordWithCount.class).keyBy(\"word\").timeWindow(Time.seconds(5)).reduce((ReduceFunction<WordWithCount>)(c1,c2) -> new WordWithCount(c1.word,c1.count + c2.count));\n  if (null != outputTopic) {\n    wc.addSink(new FlinkPulsarProducer<>(serviceUrl,outputTopic,wordWithCount -> wordWithCount.toString().getBytes(UTF_8),wordWithCount -> wordWithCount.word)).setParallelism(parallelism);\n  }\n else {\n    wc.print().setParallelism(1);\n  }\n  env.execute(\"Pulsar Stream WordCount\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 352,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3010,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 109,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void main(String[] args) throws Exception {\n  final ParameterTool parameterTool=ParameterTool.fromArgs(args);\n  if (parameterTool.getNumberOfParameters() < 2) {\n    System.out.println(\"Missing parameters!\");\n    System.out.println(\"Usage: pulsar --service-url <pulsar-service-url> --input-topic <topic> --subscription <sub> --output-topic <topic>\");\n    return;\n  }\n  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();\n  env.getConfig().disableSysoutLogging();\n  env.getConfig().setRestartStrategy(RestartStrategies.fixedDelayRestart(4,10000));\n  env.enableCheckpointing(5000);\n  env.getConfig().setGlobalJobParameters(parameterTool);\n  env.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n  String serviceUrl=parameterTool.getRequired(\"service-url\");\n  String inputTopic=parameterTool.getRequired(\"input-topic\");\n  String subscription=parameterTool.get(\"subscription\",\"flink-examples\");\n  String outputTopic=parameterTool.get(\"output-topic\",null);\n  int parallelism=parameterTool.getInt(\"parallelism\",1);\n  System.out.println(\"Parameters:\");\n  System.out.println(\"\\tServiceUrl:\\t\" + serviceUrl);\n  System.out.println(\"\\tInputTopic:\\t\" + inputTopic);\n  System.out.println(\"\\tSubscription:\\t\" + subscription);\n  System.out.println(\"\\tOutputTopic:\\t\" + outputTopic);\n  System.out.println(\"\\tParallelism:\\t\" + parallelism);\n  PulsarSourceBuilder<String> builder=PulsarSourceBuilder.builder(new SimpleStringSchema()).serviceUrl(serviceUrl).topic(inputTopic).subscriptionName(subscription);\n  SourceFunction<String> src=builder.build();\n  DataStream<String> input=env.addSource(src);\n  DataStream<WordWithCount> wc=input.flatMap((FlatMapFunction<String,WordWithCount>)(line,collector) -> {\n    for (    String word : line.split(\"\\\\s\")) {\n      collector.collect(new WordWithCount(word,1));\n    }\n  }\n).returns(WordWithCount.class).keyBy(\"word\").timeWindow(Time.seconds(5)).reduce((ReduceFunction<WordWithCount>)(c1,c2) -> new WordWithCount(c1.word,c1.count + c2.count));\n  if (null != outputTopic) {\n    wc.addSink(new FlinkPulsarProducer<>(serviceUrl,outputTopic,wordWithCount -> wordWithCount.toString().getBytes(UTF_8),wordWithCount -> wordWithCount.word)).setParallelism(parallelism);\n  }\n else {\n    wc.print().setParallelism(1);\n  }\n  env.execute(\"Pulsar Stream WordCount\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 365,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 66,
        "startColumnNumber" : 8,
        "endLineNumber" : 66,
        "endColumnNumber" : 82
      },
      "nodeContext" : "String subscription=parameterTool.get(\"subscription\",\"flink-examples\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 66,
    "startColumnNumber" : 64,
    "endLineNumber" : 66,
    "endColumnNumber" : 80
  } ],
  "layoutRelationDataList" : [ ]
}