{
  "id" : 512,
  "expression" : "expectedSize",
  "projectName" : "facebook@fresco",
  "commitID" : "22468d5b520df9b51572a6388a34e7f6bd5a22c1",
  "filePath" : "/fbcore/src/main/java/com/facebook/common/internal/ByteStreams.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "expectedSize",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 125,
      "startColumnNumber" : 28,
      "endLineNumber" : 125,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 125,
        "startColumnNumber" : 19,
        "endLineNumber" : 125,
        "endColumnNumber" : 41
      },
      "nodeContext" : "new byte[expectedSize]",
      "nodeType" : "ArrayCreation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 125,
        "startColumnNumber" : 11,
        "endLineNumber" : 125,
        "endColumnNumber" : 41
      },
      "nodeContext" : "bytes=new byte[expectedSize]",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 125,
        "startColumnNumber" : 4,
        "endLineNumber" : 125,
        "endColumnNumber" : 42
      },
      "nodeContext" : "byte[] bytes=new byte[expectedSize];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 898,
        "startLineNumber" : 124,
        "startColumnNumber" : 88,
        "endLineNumber" : 154,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  byte[] bytes=new byte[expectedSize];\n  int remaining=expectedSize;\n  while (remaining > 0) {\n    int off=expectedSize - remaining;\n    int read=in.read(bytes,off,remaining);\n    if (read == -1) {\n      return Arrays.copyOf(bytes,off);\n    }\n    remaining-=read;\n  }\n  int b=in.read();\n  if (b == -1) {\n    return bytes;\n  }\n  FastByteArrayOutputStream out=new FastByteArrayOutputStream();\n  out.write(b);\n  copy(in,out);\n  byte[] result=new byte[bytes.length + out.size()];\n  System.arraycopy(bytes,0,result,0,bytes.length);\n  out.writeTo(result,bytes.length);\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 126,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1240,
        "startLineNumber" : 119,
        "startColumnNumber" : 2,
        "endLineNumber" : 154,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Reads all bytes from an input stream into a byte array. The given expected size is used to create an initial byte array, but if the actual number of bytes read from the stream differs, the correct result will be returned anyway.\n */\npublic static byte[] toByteArray(InputStream in,int expectedSize) throws IOException {\n  byte[] bytes=new byte[expectedSize];\n  int remaining=expectedSize;\n  while (remaining > 0) {\n    int off=expectedSize - remaining;\n    int read=in.read(bytes,off,remaining);\n    if (read == -1) {\n      return Arrays.copyOf(bytes,off);\n    }\n    remaining-=read;\n  }\n  int b=in.read();\n  if (b == -1) {\n    return bytes;\n  }\n  FastByteArrayOutputStream out=new FastByteArrayOutputStream();\n  out.write(b);\n  copy(in,out);\n  byte[] result=new byte[bytes.length + out.size()];\n  System.arraycopy(bytes,0,result,0,bytes.length);\n  out.writeTo(result,bytes.length);\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 143,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 125,
        "startColumnNumber" : 4,
        "endLineNumber" : 125,
        "endColumnNumber" : 42
      },
      "nodeContext" : "byte[] bytes=new byte[expectedSize];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "expectedSize",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 126,
      "startColumnNumber" : 20,
      "endLineNumber" : 126,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 126,
        "startColumnNumber" : 8,
        "endLineNumber" : 126,
        "endColumnNumber" : 32
      },
      "nodeContext" : "remaining=expectedSize",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 126,
        "startColumnNumber" : 4,
        "endLineNumber" : 126,
        "endColumnNumber" : 33
      },
      "nodeContext" : "int remaining=expectedSize;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 898,
        "startLineNumber" : 124,
        "startColumnNumber" : 88,
        "endLineNumber" : 154,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  byte[] bytes=new byte[expectedSize];\n  int remaining=expectedSize;\n  while (remaining > 0) {\n    int off=expectedSize - remaining;\n    int read=in.read(bytes,off,remaining);\n    if (read == -1) {\n      return Arrays.copyOf(bytes,off);\n    }\n    remaining-=read;\n  }\n  int b=in.read();\n  if (b == -1) {\n    return bytes;\n  }\n  FastByteArrayOutputStream out=new FastByteArrayOutputStream();\n  out.write(b);\n  copy(in,out);\n  byte[] result=new byte[bytes.length + out.size()];\n  System.arraycopy(bytes,0,result,0,bytes.length);\n  out.writeTo(result,bytes.length);\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 126,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1240,
        "startLineNumber" : 119,
        "startColumnNumber" : 2,
        "endLineNumber" : 154,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Reads all bytes from an input stream into a byte array. The given expected size is used to create an initial byte array, but if the actual number of bytes read from the stream differs, the correct result will be returned anyway.\n */\npublic static byte[] toByteArray(InputStream in,int expectedSize) throws IOException {\n  byte[] bytes=new byte[expectedSize];\n  int remaining=expectedSize;\n  while (remaining > 0) {\n    int off=expectedSize - remaining;\n    int read=in.read(bytes,off,remaining);\n    if (read == -1) {\n      return Arrays.copyOf(bytes,off);\n    }\n    remaining-=read;\n  }\n  int b=in.read();\n  if (b == -1) {\n    return bytes;\n  }\n  FastByteArrayOutputStream out=new FastByteArrayOutputStream();\n  out.write(b);\n  copy(in,out);\n  byte[] result=new byte[bytes.length + out.size()];\n  System.arraycopy(bytes,0,result,0,bytes.length);\n  out.writeTo(result,bytes.length);\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 143,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 126,
        "startColumnNumber" : 4,
        "endLineNumber" : 126,
        "endColumnNumber" : 33
      },
      "nodeContext" : "int remaining=expectedSize;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "expectedSize",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 129,
      "startColumnNumber" : 16,
      "endLineNumber" : 129,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 129,
        "startColumnNumber" : 16,
        "endLineNumber" : 129,
        "endColumnNumber" : 40
      },
      "nodeContext" : "expectedSize - remaining",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 129,
        "startColumnNumber" : 10,
        "endLineNumber" : 129,
        "endColumnNumber" : 40
      },
      "nodeContext" : "off=expectedSize - remaining",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 129,
        "startColumnNumber" : 6,
        "endLineNumber" : 129,
        "endColumnNumber" : 41
      },
      "nodeContext" : "int off=expectedSize - remaining;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 301,
        "startLineNumber" : 128,
        "startColumnNumber" : 26,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int off=expectedSize - remaining;\n  int read=in.read(bytes,off,remaining);\n  if (read == -1) {\n    return Arrays.copyOf(bytes,off);\n  }\n  remaining-=read;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 34,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 323,
        "startLineNumber" : 128,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (remaining > 0) {\n  int off=expectedSize - remaining;\n  int read=in.read(bytes,off,remaining);\n  if (read == -1) {\n    return Arrays.copyOf(bytes,off);\n  }\n  remaining-=read;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 38,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 898,
        "startLineNumber" : 124,
        "startColumnNumber" : 88,
        "endLineNumber" : 154,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  byte[] bytes=new byte[expectedSize];\n  int remaining=expectedSize;\n  while (remaining > 0) {\n    int off=expectedSize - remaining;\n    int read=in.read(bytes,off,remaining);\n    if (read == -1) {\n      return Arrays.copyOf(bytes,off);\n    }\n    remaining-=read;\n  }\n  int b=in.read();\n  if (b == -1) {\n    return bytes;\n  }\n  FastByteArrayOutputStream out=new FastByteArrayOutputStream();\n  out.write(b);\n  copy(in,out);\n  byte[] result=new byte[bytes.length + out.size()];\n  System.arraycopy(bytes,0,result,0,bytes.length);\n  out.writeTo(result,bytes.length);\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 126,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1240,
        "startLineNumber" : 119,
        "startColumnNumber" : 2,
        "endLineNumber" : 154,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Reads all bytes from an input stream into a byte array. The given expected size is used to create an initial byte array, but if the actual number of bytes read from the stream differs, the correct result will be returned anyway.\n */\npublic static byte[] toByteArray(InputStream in,int expectedSize) throws IOException {\n  byte[] bytes=new byte[expectedSize];\n  int remaining=expectedSize;\n  while (remaining > 0) {\n    int off=expectedSize - remaining;\n    int read=in.read(bytes,off,remaining);\n    if (read == -1) {\n      return Arrays.copyOf(bytes,off);\n    }\n    remaining-=read;\n  }\n  int b=in.read();\n  if (b == -1) {\n    return bytes;\n  }\n  FastByteArrayOutputStream out=new FastByteArrayOutputStream();\n  out.write(b);\n  copy(in,out);\n  byte[] result=new byte[bytes.length + out.size()];\n  System.arraycopy(bytes,0,result,0,bytes.length);\n  out.writeTo(result,bytes.length);\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 143,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 129,
        "startColumnNumber" : 6,
        "endLineNumber" : 129,
        "endColumnNumber" : 41
      },
      "nodeContext" : "int off=expectedSize - remaining;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 125,
    "startColumnNumber" : 28,
    "endLineNumber" : 125,
    "endColumnNumber" : 40
  }, {
    "charLength" : 12,
    "startLineNumber" : 126,
    "startColumnNumber" : 20,
    "endLineNumber" : 126,
    "endColumnNumber" : 32
  }, {
    "charLength" : 12,
    "startLineNumber" : 129,
    "startColumnNumber" : 16,
    "endLineNumber" : 129,
    "endColumnNumber" : 28
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  } ]
}