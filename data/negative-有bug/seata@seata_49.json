{
  "id" : 49,
  "expression" : "portMapOnOtherIPEntry",
  "projectName" : "seata@seata",
  "commitID" : "42d41623178ab076b11b27a0f049ac3ed7f1a9dc",
  "filePath" : "/core/src/main/java/io/seata/core/rpc/ChannelManager.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "portMapOnOtherIPEntry",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 407,
      "startColumnNumber" : 42,
      "endLineNumber" : 407,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 407,
        "startColumnNumber" : 42,
        "endLineNumber" : 407,
        "endColumnNumber" : 74
      },
      "nodeContext" : "portMapOnOtherIPEntry.getValue()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 407,
        "startColumnNumber" : 42,
        "endLineNumber" : 407,
        "endColumnNumber" : 87
      },
      "nodeContext" : "portMapOnOtherIPEntry.getValue().getChannel()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 407,
        "startColumnNumber" : 32,
        "endLineNumber" : 407,
        "endColumnNumber" : 87
      },
      "nodeContext" : "channel=portMapOnOtherIPEntry.getValue().getChannel()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 407,
        "startColumnNumber" : 24,
        "endLineNumber" : 407,
        "endColumnNumber" : 88
      },
      "nodeContext" : "Channel channel=portMapOnOtherIPEntry.getValue().getChannel();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 987,
        "startLineNumber" : 406,
        "startColumnNumber" : 119,
        "endLineNumber" : 425,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  Channel channel=portMapOnOtherIPEntry.getValue().getChannel();\n  if (channel.isActive()) {\n    resultChannel=channel;\n    if (LOGGER.isInfoEnabled()) {\n      LOGGER.info(\"Choose \" + channel + \" on the same application[\"+ targetApplicationId+ \"] as alternative of \"+ clientId);\n    }\n    break;\n  }\n else {\n    if (portMapOnOtherIP.remove(portMapOnOtherIPEntry.getKey(),portMapOnOtherIPEntry.getValue())) {\n      if (LOGGER.isInfoEnabled()) {\n        LOGGER.info(\"Removed inactive \" + channel);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 61,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1086,
        "startLineNumber" : 406,
        "startColumnNumber" : 20,
        "endLineNumber" : 425,
        "endColumnNumber" : 21
      },
      "nodeContext" : "for (ConcurrentMap.Entry<Integer,RpcContext> portMapOnOtherIPEntry : portMapOnOtherIP.entrySet()) {\n  Channel channel=portMapOnOtherIPEntry.getValue().getChannel();\n  if (channel.isActive()) {\n    resultChannel=channel;\n    if (LOGGER.isInfoEnabled()) {\n      LOGGER.info(\"Choose \" + channel + \" on the same application[\"+ targetApplicationId+ \"] as alternative of \"+ clientId);\n    }\n    break;\n  }\n else {\n    if (portMapOnOtherIP.remove(portMapOnOtherIPEntry.getKey(),portMapOnOtherIPEntry.getValue())) {\n      if (LOGGER.isInfoEnabled()) {\n        LOGGER.info(\"Removed inactive \" + channel);\n      }\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 76,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1497,
        "startLineNumber" : 398,
        "startColumnNumber" : 33,
        "endLineNumber" : 427,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (ipMapEntry.getKey().equals(targetIP)) {\n    continue;\n  }\n  ConcurrentMap<Integer,RpcContext> portMapOnOtherIP=ipMapEntry.getValue();\n  if (portMapOnOtherIP == null || portMapOnOtherIP.isEmpty()) {\n    continue;\n  }\n  for (  ConcurrentMap.Entry<Integer,RpcContext> portMapOnOtherIPEntry : portMapOnOtherIP.entrySet()) {\n    Channel channel=portMapOnOtherIPEntry.getValue().getChannel();\n    if (channel.isActive()) {\n      resultChannel=channel;\n      if (LOGGER.isInfoEnabled()) {\n        LOGGER.info(\"Choose \" + channel + \" on the same application[\"+ targetApplicationId+ \"] as alternative of \"+ clientId);\n      }\n      break;\n    }\n else {\n      if (portMapOnOtherIP.remove(portMapOnOtherIPEntry.getKey(),portMapOnOtherIPEntry.getValue())) {\n        if (LOGGER.isInfoEnabled()) {\n          LOGGER.info(\"Removed inactive \" + channel);\n        }\n      }\n    }\n  }\n  if (resultChannel != null) {\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 115,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1618,
        "startLineNumber" : 397,
        "startColumnNumber" : 16,
        "endLineNumber" : 427,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (ConcurrentMap.Entry<String,ConcurrentMap<Integer,RpcContext>> ipMapEntry : ipMap.entrySet()) {\n  if (ipMapEntry.getKey().equals(targetIP)) {\n    continue;\n  }\n  ConcurrentMap<Integer,RpcContext> portMapOnOtherIP=ipMapEntry.getValue();\n  if (portMapOnOtherIP == null || portMapOnOtherIP.isEmpty()) {\n    continue;\n  }\n  for (  ConcurrentMap.Entry<Integer,RpcContext> portMapOnOtherIPEntry : portMapOnOtherIP.entrySet()) {\n    Channel channel=portMapOnOtherIPEntry.getValue().getChannel();\n    if (channel.isActive()) {\n      resultChannel=channel;\n      if (LOGGER.isInfoEnabled()) {\n        LOGGER.info(\"Choose \" + channel + \" on the same application[\"+ targetApplicationId+ \"] as alternative of \"+ clientId);\n      }\n      break;\n    }\n else {\n      if (portMapOnOtherIP.remove(portMapOnOtherIPEntry.getKey(),portMapOnOtherIPEntry.getValue())) {\n        if (LOGGER.isInfoEnabled()) {\n          LOGGER.info(\"Removed inactive \" + channel);\n        }\n      }\n    }\n  }\n  if (resultChannel != null) {\n    break;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 135,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1650,
        "startLineNumber" : 396,
        "startColumnNumber" : 39,
        "endLineNumber" : 428,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  for (  ConcurrentMap.Entry<String,ConcurrentMap<Integer,RpcContext>> ipMapEntry : ipMap.entrySet()) {\n    if (ipMapEntry.getKey().equals(targetIP)) {\n      continue;\n    }\n    ConcurrentMap<Integer,RpcContext> portMapOnOtherIP=ipMapEntry.getValue();\n    if (portMapOnOtherIP == null || portMapOnOtherIP.isEmpty()) {\n      continue;\n    }\n    for (    ConcurrentMap.Entry<Integer,RpcContext> portMapOnOtherIPEntry : portMapOnOtherIP.entrySet()) {\n      Channel channel=portMapOnOtherIPEntry.getValue().getChannel();\n      if (channel.isActive()) {\n        resultChannel=channel;\n        if (LOGGER.isInfoEnabled()) {\n          LOGGER.info(\"Choose \" + channel + \" on the same application[\"+ targetApplicationId+ \"] as alternative of \"+ clientId);\n        }\n        break;\n      }\n else {\n        if (portMapOnOtherIP.remove(portMapOnOtherIPEntry.getKey(),portMapOnOtherIPEntry.getValue())) {\n          if (LOGGER.isInfoEnabled()) {\n            LOGGER.info(\"Removed inactive \" + channel);\n          }\n        }\n      }\n    }\n    if (resultChannel != null) {\n      break;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 136,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1677,
        "startLineNumber" : 396,
        "startColumnNumber" : 12,
        "endLineNumber" : 428,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (resultChannel == null) {\n  for (  ConcurrentMap.Entry<String,ConcurrentMap<Integer,RpcContext>> ipMapEntry : ipMap.entrySet()) {\n    if (ipMapEntry.getKey().equals(targetIP)) {\n      continue;\n    }\n    ConcurrentMap<Integer,RpcContext> portMapOnOtherIP=ipMapEntry.getValue();\n    if (portMapOnOtherIP == null || portMapOnOtherIP.isEmpty()) {\n      continue;\n    }\n    for (    ConcurrentMap.Entry<Integer,RpcContext> portMapOnOtherIPEntry : portMapOnOtherIP.entrySet()) {\n      Channel channel=portMapOnOtherIPEntry.getValue().getChannel();\n      if (channel.isActive()) {\n        resultChannel=channel;\n        if (LOGGER.isInfoEnabled()) {\n          LOGGER.info(\"Choose \" + channel + \" on the same application[\"+ targetApplicationId+ \"] as alternative of \"+ clientId);\n        }\n        break;\n      }\n else {\n        if (portMapOnOtherIP.remove(portMapOnOtherIPEntry.getKey(),portMapOnOtherIPEntry.getValue())) {\n          if (LOGGER.isInfoEnabled()) {\n            LOGGER.info(\"Removed inactive \" + channel);\n          }\n        }\n      }\n    }\n    if (resultChannel != null) {\n      break;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 140,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 4118,
        "startLineNumber" : 346,
        "startColumnNumber" : 47,
        "endLineNumber" : 429,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ConcurrentMap<Integer,RpcContext> portMapOnTargetIP=ipMap.get(targetIP);\n  if (portMapOnTargetIP != null && !portMapOnTargetIP.isEmpty()) {\n    RpcContext exactRpcContext=portMapOnTargetIP.get(targetPort);\n    if (exactRpcContext != null) {\n      Channel channel=exactRpcContext.getChannel();\n      if (channel.isActive()) {\n        resultChannel=channel;\n        if (LOGGER.isInfoEnabled()) {\n          LOGGER.info(\"Just got exactly the one \" + channel + \" for \"+ clientId);\n        }\n      }\n else {\n        if (portMapOnTargetIP.remove(targetPort,exactRpcContext)) {\n          if (LOGGER.isInfoEnabled()) {\n            LOGGER.info(\"Removed inactive \" + channel);\n          }\n        }\n      }\n    }\n    if (resultChannel == null) {\n      for (      ConcurrentMap.Entry<Integer,RpcContext> portMapOnTargetIPEntry : portMapOnTargetIP.entrySet()) {\n        Channel channel=portMapOnTargetIPEntry.getValue().getChannel();\n        if (channel.isActive()) {\n          resultChannel=channel;\n          if (LOGGER.isInfoEnabled()) {\n            LOGGER.info(\"Choose \" + channel + \" on the same IP[\"+ targetIP+ \"]  as alternative of \"+ clientId);\n          }\n          break;\n        }\n else {\n          if (portMapOnTargetIP.remove(portMapOnTargetIPEntry.getKey(),portMapOnTargetIPEntry.getValue())) {\n            if (LOGGER.isInfoEnabled()) {\n              LOGGER.info(\"Removed inactive \" + channel);\n            }\n          }\n        }\n      }\n    }\n  }\n  if (resultChannel == null) {\n    for (    ConcurrentMap.Entry<String,ConcurrentMap<Integer,RpcContext>> ipMapEntry : ipMap.entrySet()) {\n      if (ipMapEntry.getKey().equals(targetIP)) {\n        continue;\n      }\n      ConcurrentMap<Integer,RpcContext> portMapOnOtherIP=ipMapEntry.getValue();\n      if (portMapOnOtherIP == null || portMapOnOtherIP.isEmpty()) {\n        continue;\n      }\n      for (      ConcurrentMap.Entry<Integer,RpcContext> portMapOnOtherIPEntry : portMapOnOtherIP.entrySet()) {\n        Channel channel=portMapOnOtherIPEntry.getValue().getChannel();\n        if (channel.isActive()) {\n          resultChannel=channel;\n          if (LOGGER.isInfoEnabled()) {\n            LOGGER.info(\"Choose \" + channel + \" on the same application[\"+ targetApplicationId+ \"] as alternative of \"+ clientId);\n          }\n          break;\n        }\n else {\n          if (portMapOnOtherIP.remove(portMapOnOtherIPEntry.getKey(),portMapOnOtherIPEntry.getValue())) {\n            if (LOGGER.isInfoEnabled()) {\n              LOGGER.info(\"Removed inactive \" + channel);\n            }\n          }\n        }\n      }\n      if (resultChannel != null) {\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 311,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4157,
        "startLineNumber" : 346,
        "startColumnNumber" : 8,
        "endLineNumber" : 429,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (null != ipMap && !ipMap.isEmpty()) {\n  ConcurrentMap<Integer,RpcContext> portMapOnTargetIP=ipMap.get(targetIP);\n  if (portMapOnTargetIP != null && !portMapOnTargetIP.isEmpty()) {\n    RpcContext exactRpcContext=portMapOnTargetIP.get(targetPort);\n    if (exactRpcContext != null) {\n      Channel channel=exactRpcContext.getChannel();\n      if (channel.isActive()) {\n        resultChannel=channel;\n        if (LOGGER.isInfoEnabled()) {\n          LOGGER.info(\"Just got exactly the one \" + channel + \" for \"+ clientId);\n        }\n      }\n else {\n        if (portMapOnTargetIP.remove(targetPort,exactRpcContext)) {\n          if (LOGGER.isInfoEnabled()) {\n            LOGGER.info(\"Removed inactive \" + channel);\n          }\n        }\n      }\n    }\n    if (resultChannel == null) {\n      for (      ConcurrentMap.Entry<Integer,RpcContext> portMapOnTargetIPEntry : portMapOnTargetIP.entrySet()) {\n        Channel channel=portMapOnTargetIPEntry.getValue().getChannel();\n        if (channel.isActive()) {\n          resultChannel=channel;\n          if (LOGGER.isInfoEnabled()) {\n            LOGGER.info(\"Choose \" + channel + \" on the same IP[\"+ targetIP+ \"]  as alternative of \"+ clientId);\n          }\n          break;\n        }\n else {\n          if (portMapOnTargetIP.remove(portMapOnTargetIPEntry.getKey(),portMapOnTargetIPEntry.getValue())) {\n            if (LOGGER.isInfoEnabled()) {\n              LOGGER.info(\"Removed inactive \" + channel);\n            }\n          }\n        }\n      }\n    }\n  }\n  if (resultChannel == null) {\n    for (    ConcurrentMap.Entry<String,ConcurrentMap<Integer,RpcContext>> ipMapEntry : ipMap.entrySet()) {\n      if (ipMapEntry.getKey().equals(targetIP)) {\n        continue;\n      }\n      ConcurrentMap<Integer,RpcContext> portMapOnOtherIP=ipMapEntry.getValue();\n      if (portMapOnOtherIP == null || portMapOnOtherIP.isEmpty()) {\n        continue;\n      }\n      for (      ConcurrentMap.Entry<Integer,RpcContext> portMapOnOtherIPEntry : portMapOnOtherIP.entrySet()) {\n        Channel channel=portMapOnOtherIPEntry.getValue().getChannel();\n        if (channel.isActive()) {\n          resultChannel=channel;\n          if (LOGGER.isInfoEnabled()) {\n            LOGGER.info(\"Choose \" + channel + \" on the same application[\"+ targetApplicationId+ \"] as alternative of \"+ clientId);\n          }\n          break;\n        }\n else {\n          if (portMapOnOtherIP.remove(portMapOnOtherIPEntry.getKey(),portMapOnOtherIPEntry.getValue())) {\n            if (LOGGER.isInfoEnabled()) {\n              LOGGER.info(\"Removed inactive \" + channel);\n            }\n          }\n        }\n      }\n      if (resultChannel != null) {\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 320,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5851,
        "startLineNumber" : 321,
        "startColumnNumber" : 73,
        "endLineNumber" : 451,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Channel resultChannel=null;\n  String[] clientIdInfo=readClientId(clientId);\n  if (clientIdInfo == null || clientIdInfo.length != 3) {\n    throw new FrameworkException(\"Invalid Client ID: \" + clientId);\n  }\n  String targetApplicationId=clientIdInfo[0];\n  String targetIP=clientIdInfo[1];\n  int targetPort=Integer.parseInt(clientIdInfo[2]);\n  ConcurrentMap<String,ConcurrentMap<String,ConcurrentMap<Integer,RpcContext>>> applicationIdMap=RM_CHANNELS.get(resourceId);\n  if (targetApplicationId == null || applicationIdMap == null || applicationIdMap.isEmpty()) {\n    if (LOGGER.isInfoEnabled()) {\n      LOGGER.info(\"No channel is available for resource[\" + resourceId + \"]\");\n    }\n    return null;\n  }\n  ConcurrentMap<String,ConcurrentMap<Integer,RpcContext>> ipMap=applicationIdMap.get(targetApplicationId);\n  if (null != ipMap && !ipMap.isEmpty()) {\n    ConcurrentMap<Integer,RpcContext> portMapOnTargetIP=ipMap.get(targetIP);\n    if (portMapOnTargetIP != null && !portMapOnTargetIP.isEmpty()) {\n      RpcContext exactRpcContext=portMapOnTargetIP.get(targetPort);\n      if (exactRpcContext != null) {\n        Channel channel=exactRpcContext.getChannel();\n        if (channel.isActive()) {\n          resultChannel=channel;\n          if (LOGGER.isInfoEnabled()) {\n            LOGGER.info(\"Just got exactly the one \" + channel + \" for \"+ clientId);\n          }\n        }\n else {\n          if (portMapOnTargetIP.remove(targetPort,exactRpcContext)) {\n            if (LOGGER.isInfoEnabled()) {\n              LOGGER.info(\"Removed inactive \" + channel);\n            }\n          }\n        }\n      }\n      if (resultChannel == null) {\n        for (        ConcurrentMap.Entry<Integer,RpcContext> portMapOnTargetIPEntry : portMapOnTargetIP.entrySet()) {\n          Channel channel=portMapOnTargetIPEntry.getValue().getChannel();\n          if (channel.isActive()) {\n            resultChannel=channel;\n            if (LOGGER.isInfoEnabled()) {\n              LOGGER.info(\"Choose \" + channel + \" on the same IP[\"+ targetIP+ \"]  as alternative of \"+ clientId);\n            }\n            break;\n          }\n else {\n            if (portMapOnTargetIP.remove(portMapOnTargetIPEntry.getKey(),portMapOnTargetIPEntry.getValue())) {\n              if (LOGGER.isInfoEnabled()) {\n                LOGGER.info(\"Removed inactive \" + channel);\n              }\n            }\n          }\n        }\n      }\n    }\n    if (resultChannel == null) {\n      for (      ConcurrentMap.Entry<String,ConcurrentMap<Integer,RpcContext>> ipMapEntry : ipMap.entrySet()) {\n        if (ipMapEntry.getKey().equals(targetIP)) {\n          continue;\n        }\n        ConcurrentMap<Integer,RpcContext> portMapOnOtherIP=ipMapEntry.getValue();\n        if (portMapOnOtherIP == null || portMapOnOtherIP.isEmpty()) {\n          continue;\n        }\n        for (        ConcurrentMap.Entry<Integer,RpcContext> portMapOnOtherIPEntry : portMapOnOtherIP.entrySet()) {\n          Channel channel=portMapOnOtherIPEntry.getValue().getChannel();\n          if (channel.isActive()) {\n            resultChannel=channel;\n            if (LOGGER.isInfoEnabled()) {\n              LOGGER.info(\"Choose \" + channel + \" on the same application[\"+ targetApplicationId+ \"] as alternative of \"+ clientId);\n            }\n            break;\n          }\n else {\n            if (portMapOnOtherIP.remove(portMapOnOtherIPEntry.getKey(),portMapOnOtherIPEntry.getValue())) {\n              if (LOGGER.isInfoEnabled()) {\n                LOGGER.info(\"Removed inactive \" + channel);\n              }\n            }\n          }\n        }\n        if (resultChannel != null) {\n          break;\n        }\n      }\n    }\n  }\n  if (resultChannel == null) {\n    resultChannel=tryOtherApp(applicationIdMap,targetApplicationId);\n    if (resultChannel == null) {\n      if (LOGGER.isInfoEnabled()) {\n        LOGGER.info(\"No channel is available for resource[\" + resourceId + \"]  as alternative of \"+ clientId);\n      }\n    }\n else {\n      if (LOGGER.isInfoEnabled()) {\n        LOGGER.info(\"Choose \" + resultChannel + \" on the same resource[\"+ resourceId+ \"]  as alternative of \"+ clientId);\n      }\n    }\n  }\n  return resultChannel;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 502,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6121,
        "startLineNumber" : 314,
        "startColumnNumber" : 4,
        "endLineNumber" : 451,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Gets get channel.\n * @param resourceId Resource ID\n * @param clientId   Client ID - ApplicationId:IP:Port\n * @return Corresponding channel, NULL if not found.\n */\npublic static Channel getChannel(String resourceId,String clientId){\n  Channel resultChannel=null;\n  String[] clientIdInfo=readClientId(clientId);\n  if (clientIdInfo == null || clientIdInfo.length != 3) {\n    throw new FrameworkException(\"Invalid Client ID: \" + clientId);\n  }\n  String targetApplicationId=clientIdInfo[0];\n  String targetIP=clientIdInfo[1];\n  int targetPort=Integer.parseInt(clientIdInfo[2]);\n  ConcurrentMap<String,ConcurrentMap<String,ConcurrentMap<Integer,RpcContext>>> applicationIdMap=RM_CHANNELS.get(resourceId);\n  if (targetApplicationId == null || applicationIdMap == null || applicationIdMap.isEmpty()) {\n    if (LOGGER.isInfoEnabled()) {\n      LOGGER.info(\"No channel is available for resource[\" + resourceId + \"]\");\n    }\n    return null;\n  }\n  ConcurrentMap<String,ConcurrentMap<Integer,RpcContext>> ipMap=applicationIdMap.get(targetApplicationId);\n  if (null != ipMap && !ipMap.isEmpty()) {\n    ConcurrentMap<Integer,RpcContext> portMapOnTargetIP=ipMap.get(targetIP);\n    if (portMapOnTargetIP != null && !portMapOnTargetIP.isEmpty()) {\n      RpcContext exactRpcContext=portMapOnTargetIP.get(targetPort);\n      if (exactRpcContext != null) {\n        Channel channel=exactRpcContext.getChannel();\n        if (channel.isActive()) {\n          resultChannel=channel;\n          if (LOGGER.isInfoEnabled()) {\n            LOGGER.info(\"Just got exactly the one \" + channel + \" for \"+ clientId);\n          }\n        }\n else {\n          if (portMapOnTargetIP.remove(targetPort,exactRpcContext)) {\n            if (LOGGER.isInfoEnabled()) {\n              LOGGER.info(\"Removed inactive \" + channel);\n            }\n          }\n        }\n      }\n      if (resultChannel == null) {\n        for (        ConcurrentMap.Entry<Integer,RpcContext> portMapOnTargetIPEntry : portMapOnTargetIP.entrySet()) {\n          Channel channel=portMapOnTargetIPEntry.getValue().getChannel();\n          if (channel.isActive()) {\n            resultChannel=channel;\n            if (LOGGER.isInfoEnabled()) {\n              LOGGER.info(\"Choose \" + channel + \" on the same IP[\"+ targetIP+ \"]  as alternative of \"+ clientId);\n            }\n            break;\n          }\n else {\n            if (portMapOnTargetIP.remove(portMapOnTargetIPEntry.getKey(),portMapOnTargetIPEntry.getValue())) {\n              if (LOGGER.isInfoEnabled()) {\n                LOGGER.info(\"Removed inactive \" + channel);\n              }\n            }\n          }\n        }\n      }\n    }\n    if (resultChannel == null) {\n      for (      ConcurrentMap.Entry<String,ConcurrentMap<Integer,RpcContext>> ipMapEntry : ipMap.entrySet()) {\n        if (ipMapEntry.getKey().equals(targetIP)) {\n          continue;\n        }\n        ConcurrentMap<Integer,RpcContext> portMapOnOtherIP=ipMapEntry.getValue();\n        if (portMapOnOtherIP == null || portMapOnOtherIP.isEmpty()) {\n          continue;\n        }\n        for (        ConcurrentMap.Entry<Integer,RpcContext> portMapOnOtherIPEntry : portMapOnOtherIP.entrySet()) {\n          Channel channel=portMapOnOtherIPEntry.getValue().getChannel();\n          if (channel.isActive()) {\n            resultChannel=channel;\n            if (LOGGER.isInfoEnabled()) {\n              LOGGER.info(\"Choose \" + channel + \" on the same application[\"+ targetApplicationId+ \"] as alternative of \"+ clientId);\n            }\n            break;\n          }\n else {\n            if (portMapOnOtherIP.remove(portMapOnOtherIPEntry.getKey(),portMapOnOtherIPEntry.getValue())) {\n              if (LOGGER.isInfoEnabled()) {\n                LOGGER.info(\"Removed inactive \" + channel);\n              }\n            }\n          }\n        }\n        if (resultChannel != null) {\n          break;\n        }\n      }\n    }\n  }\n  if (resultChannel == null) {\n    resultChannel=tryOtherApp(applicationIdMap,targetApplicationId);\n    if (resultChannel == null) {\n      if (LOGGER.isInfoEnabled()) {\n        LOGGER.info(\"No channel is available for resource[\" + resourceId + \"]  as alternative of \"+ clientId);\n      }\n    }\n else {\n      if (LOGGER.isInfoEnabled()) {\n        LOGGER.info(\"Choose \" + resultChannel + \" on the same resource[\"+ resourceId+ \"]  as alternative of \"+ clientId);\n      }\n    }\n  }\n  return resultChannel;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 517,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 407,
        "startColumnNumber" : 24,
        "endLineNumber" : 407,
        "endColumnNumber" : 88
      },
      "nodeContext" : "Channel channel=portMapOnOtherIPEntry.getValue().getChannel();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.Map.Entry<java.lang.Integer,io.seata.core.rpc.RpcContext>"
  }, {
    "nodeContext" : "portMapOnOtherIPEntry",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 418,
      "startColumnNumber" : 56,
      "endLineNumber" : 418,
      "endColumnNumber" : 77
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 418,
        "startColumnNumber" : 56,
        "endLineNumber" : 418,
        "endColumnNumber" : 86
      },
      "nodeContext" : "portMapOnOtherIPEntry.getKey()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 121,
        "startLineNumber" : 418,
        "startColumnNumber" : 32,
        "endLineNumber" : 419,
        "endColumnNumber" : 65
      },
      "nodeContext" : "portMapOnOtherIP.remove(portMapOnOtherIPEntry.getKey(),portMapOnOtherIPEntry.getValue())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 334,
        "startLineNumber" : 418,
        "startColumnNumber" : 28,
        "endLineNumber" : 423,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (portMapOnOtherIP.remove(portMapOnOtherIPEntry.getKey(),portMapOnOtherIPEntry.getValue())) {\n  if (LOGGER.isInfoEnabled()) {\n    LOGGER.info(\"Removed inactive \" + channel);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 390,
        "startLineNumber" : 417,
        "startColumnNumber" : 31,
        "endLineNumber" : 424,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  if (portMapOnOtherIP.remove(portMapOnOtherIPEntry.getKey(),portMapOnOtherIPEntry.getValue())) {\n    if (LOGGER.isInfoEnabled()) {\n      LOGGER.info(\"Removed inactive \" + channel);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 24,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 849,
        "startLineNumber" : 409,
        "startColumnNumber" : 24,
        "endLineNumber" : 424,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (channel.isActive()) {\n  resultChannel=channel;\n  if (LOGGER.isInfoEnabled()) {\n    LOGGER.info(\"Choose \" + channel + \" on the same application[\"+ targetApplicationId+ \"] as alternative of \"+ clientId);\n  }\n  break;\n}\n else {\n  if (portMapOnOtherIP.remove(portMapOnOtherIPEntry.getKey(),portMapOnOtherIPEntry.getValue())) {\n    if (LOGGER.isInfoEnabled()) {\n      LOGGER.info(\"Removed inactive \" + channel);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 50,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 987,
        "startLineNumber" : 406,
        "startColumnNumber" : 119,
        "endLineNumber" : 425,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  Channel channel=portMapOnOtherIPEntry.getValue().getChannel();\n  if (channel.isActive()) {\n    resultChannel=channel;\n    if (LOGGER.isInfoEnabled()) {\n      LOGGER.info(\"Choose \" + channel + \" on the same application[\"+ targetApplicationId+ \"] as alternative of \"+ clientId);\n    }\n    break;\n  }\n else {\n    if (portMapOnOtherIP.remove(portMapOnOtherIPEntry.getKey(),portMapOnOtherIPEntry.getValue())) {\n      if (LOGGER.isInfoEnabled()) {\n        LOGGER.info(\"Removed inactive \" + channel);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 61,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1086,
        "startLineNumber" : 406,
        "startColumnNumber" : 20,
        "endLineNumber" : 425,
        "endColumnNumber" : 21
      },
      "nodeContext" : "for (ConcurrentMap.Entry<Integer,RpcContext> portMapOnOtherIPEntry : portMapOnOtherIP.entrySet()) {\n  Channel channel=portMapOnOtherIPEntry.getValue().getChannel();\n  if (channel.isActive()) {\n    resultChannel=channel;\n    if (LOGGER.isInfoEnabled()) {\n      LOGGER.info(\"Choose \" + channel + \" on the same application[\"+ targetApplicationId+ \"] as alternative of \"+ clientId);\n    }\n    break;\n  }\n else {\n    if (portMapOnOtherIP.remove(portMapOnOtherIPEntry.getKey(),portMapOnOtherIPEntry.getValue())) {\n      if (LOGGER.isInfoEnabled()) {\n        LOGGER.info(\"Removed inactive \" + channel);\n      }\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 76,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1497,
        "startLineNumber" : 398,
        "startColumnNumber" : 33,
        "endLineNumber" : 427,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (ipMapEntry.getKey().equals(targetIP)) {\n    continue;\n  }\n  ConcurrentMap<Integer,RpcContext> portMapOnOtherIP=ipMapEntry.getValue();\n  if (portMapOnOtherIP == null || portMapOnOtherIP.isEmpty()) {\n    continue;\n  }\n  for (  ConcurrentMap.Entry<Integer,RpcContext> portMapOnOtherIPEntry : portMapOnOtherIP.entrySet()) {\n    Channel channel=portMapOnOtherIPEntry.getValue().getChannel();\n    if (channel.isActive()) {\n      resultChannel=channel;\n      if (LOGGER.isInfoEnabled()) {\n        LOGGER.info(\"Choose \" + channel + \" on the same application[\"+ targetApplicationId+ \"] as alternative of \"+ clientId);\n      }\n      break;\n    }\n else {\n      if (portMapOnOtherIP.remove(portMapOnOtherIPEntry.getKey(),portMapOnOtherIPEntry.getValue())) {\n        if (LOGGER.isInfoEnabled()) {\n          LOGGER.info(\"Removed inactive \" + channel);\n        }\n      }\n    }\n  }\n  if (resultChannel != null) {\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 115,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1618,
        "startLineNumber" : 397,
        "startColumnNumber" : 16,
        "endLineNumber" : 427,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (ConcurrentMap.Entry<String,ConcurrentMap<Integer,RpcContext>> ipMapEntry : ipMap.entrySet()) {\n  if (ipMapEntry.getKey().equals(targetIP)) {\n    continue;\n  }\n  ConcurrentMap<Integer,RpcContext> portMapOnOtherIP=ipMapEntry.getValue();\n  if (portMapOnOtherIP == null || portMapOnOtherIP.isEmpty()) {\n    continue;\n  }\n  for (  ConcurrentMap.Entry<Integer,RpcContext> portMapOnOtherIPEntry : portMapOnOtherIP.entrySet()) {\n    Channel channel=portMapOnOtherIPEntry.getValue().getChannel();\n    if (channel.isActive()) {\n      resultChannel=channel;\n      if (LOGGER.isInfoEnabled()) {\n        LOGGER.info(\"Choose \" + channel + \" on the same application[\"+ targetApplicationId+ \"] as alternative of \"+ clientId);\n      }\n      break;\n    }\n else {\n      if (portMapOnOtherIP.remove(portMapOnOtherIPEntry.getKey(),portMapOnOtherIPEntry.getValue())) {\n        if (LOGGER.isInfoEnabled()) {\n          LOGGER.info(\"Removed inactive \" + channel);\n        }\n      }\n    }\n  }\n  if (resultChannel != null) {\n    break;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 135,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1650,
        "startLineNumber" : 396,
        "startColumnNumber" : 39,
        "endLineNumber" : 428,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  for (  ConcurrentMap.Entry<String,ConcurrentMap<Integer,RpcContext>> ipMapEntry : ipMap.entrySet()) {\n    if (ipMapEntry.getKey().equals(targetIP)) {\n      continue;\n    }\n    ConcurrentMap<Integer,RpcContext> portMapOnOtherIP=ipMapEntry.getValue();\n    if (portMapOnOtherIP == null || portMapOnOtherIP.isEmpty()) {\n      continue;\n    }\n    for (    ConcurrentMap.Entry<Integer,RpcContext> portMapOnOtherIPEntry : portMapOnOtherIP.entrySet()) {\n      Channel channel=portMapOnOtherIPEntry.getValue().getChannel();\n      if (channel.isActive()) {\n        resultChannel=channel;\n        if (LOGGER.isInfoEnabled()) {\n          LOGGER.info(\"Choose \" + channel + \" on the same application[\"+ targetApplicationId+ \"] as alternative of \"+ clientId);\n        }\n        break;\n      }\n else {\n        if (portMapOnOtherIP.remove(portMapOnOtherIPEntry.getKey(),portMapOnOtherIPEntry.getValue())) {\n          if (LOGGER.isInfoEnabled()) {\n            LOGGER.info(\"Removed inactive \" + channel);\n          }\n        }\n      }\n    }\n    if (resultChannel != null) {\n      break;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 136,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1677,
        "startLineNumber" : 396,
        "startColumnNumber" : 12,
        "endLineNumber" : 428,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (resultChannel == null) {\n  for (  ConcurrentMap.Entry<String,ConcurrentMap<Integer,RpcContext>> ipMapEntry : ipMap.entrySet()) {\n    if (ipMapEntry.getKey().equals(targetIP)) {\n      continue;\n    }\n    ConcurrentMap<Integer,RpcContext> portMapOnOtherIP=ipMapEntry.getValue();\n    if (portMapOnOtherIP == null || portMapOnOtherIP.isEmpty()) {\n      continue;\n    }\n    for (    ConcurrentMap.Entry<Integer,RpcContext> portMapOnOtherIPEntry : portMapOnOtherIP.entrySet()) {\n      Channel channel=portMapOnOtherIPEntry.getValue().getChannel();\n      if (channel.isActive()) {\n        resultChannel=channel;\n        if (LOGGER.isInfoEnabled()) {\n          LOGGER.info(\"Choose \" + channel + \" on the same application[\"+ targetApplicationId+ \"] as alternative of \"+ clientId);\n        }\n        break;\n      }\n else {\n        if (portMapOnOtherIP.remove(portMapOnOtherIPEntry.getKey(),portMapOnOtherIPEntry.getValue())) {\n          if (LOGGER.isInfoEnabled()) {\n            LOGGER.info(\"Removed inactive \" + channel);\n          }\n        }\n      }\n    }\n    if (resultChannel != null) {\n      break;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 140,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 4118,
        "startLineNumber" : 346,
        "startColumnNumber" : 47,
        "endLineNumber" : 429,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ConcurrentMap<Integer,RpcContext> portMapOnTargetIP=ipMap.get(targetIP);\n  if (portMapOnTargetIP != null && !portMapOnTargetIP.isEmpty()) {\n    RpcContext exactRpcContext=portMapOnTargetIP.get(targetPort);\n    if (exactRpcContext != null) {\n      Channel channel=exactRpcContext.getChannel();\n      if (channel.isActive()) {\n        resultChannel=channel;\n        if (LOGGER.isInfoEnabled()) {\n          LOGGER.info(\"Just got exactly the one \" + channel + \" for \"+ clientId);\n        }\n      }\n else {\n        if (portMapOnTargetIP.remove(targetPort,exactRpcContext)) {\n          if (LOGGER.isInfoEnabled()) {\n            LOGGER.info(\"Removed inactive \" + channel);\n          }\n        }\n      }\n    }\n    if (resultChannel == null) {\n      for (      ConcurrentMap.Entry<Integer,RpcContext> portMapOnTargetIPEntry : portMapOnTargetIP.entrySet()) {\n        Channel channel=portMapOnTargetIPEntry.getValue().getChannel();\n        if (channel.isActive()) {\n          resultChannel=channel;\n          if (LOGGER.isInfoEnabled()) {\n            LOGGER.info(\"Choose \" + channel + \" on the same IP[\"+ targetIP+ \"]  as alternative of \"+ clientId);\n          }\n          break;\n        }\n else {\n          if (portMapOnTargetIP.remove(portMapOnTargetIPEntry.getKey(),portMapOnTargetIPEntry.getValue())) {\n            if (LOGGER.isInfoEnabled()) {\n              LOGGER.info(\"Removed inactive \" + channel);\n            }\n          }\n        }\n      }\n    }\n  }\n  if (resultChannel == null) {\n    for (    ConcurrentMap.Entry<String,ConcurrentMap<Integer,RpcContext>> ipMapEntry : ipMap.entrySet()) {\n      if (ipMapEntry.getKey().equals(targetIP)) {\n        continue;\n      }\n      ConcurrentMap<Integer,RpcContext> portMapOnOtherIP=ipMapEntry.getValue();\n      if (portMapOnOtherIP == null || portMapOnOtherIP.isEmpty()) {\n        continue;\n      }\n      for (      ConcurrentMap.Entry<Integer,RpcContext> portMapOnOtherIPEntry : portMapOnOtherIP.entrySet()) {\n        Channel channel=portMapOnOtherIPEntry.getValue().getChannel();\n        if (channel.isActive()) {\n          resultChannel=channel;\n          if (LOGGER.isInfoEnabled()) {\n            LOGGER.info(\"Choose \" + channel + \" on the same application[\"+ targetApplicationId+ \"] as alternative of \"+ clientId);\n          }\n          break;\n        }\n else {\n          if (portMapOnOtherIP.remove(portMapOnOtherIPEntry.getKey(),portMapOnOtherIPEntry.getValue())) {\n            if (LOGGER.isInfoEnabled()) {\n              LOGGER.info(\"Removed inactive \" + channel);\n            }\n          }\n        }\n      }\n      if (resultChannel != null) {\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 311,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4157,
        "startLineNumber" : 346,
        "startColumnNumber" : 8,
        "endLineNumber" : 429,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (null != ipMap && !ipMap.isEmpty()) {\n  ConcurrentMap<Integer,RpcContext> portMapOnTargetIP=ipMap.get(targetIP);\n  if (portMapOnTargetIP != null && !portMapOnTargetIP.isEmpty()) {\n    RpcContext exactRpcContext=portMapOnTargetIP.get(targetPort);\n    if (exactRpcContext != null) {\n      Channel channel=exactRpcContext.getChannel();\n      if (channel.isActive()) {\n        resultChannel=channel;\n        if (LOGGER.isInfoEnabled()) {\n          LOGGER.info(\"Just got exactly the one \" + channel + \" for \"+ clientId);\n        }\n      }\n else {\n        if (portMapOnTargetIP.remove(targetPort,exactRpcContext)) {\n          if (LOGGER.isInfoEnabled()) {\n            LOGGER.info(\"Removed inactive \" + channel);\n          }\n        }\n      }\n    }\n    if (resultChannel == null) {\n      for (      ConcurrentMap.Entry<Integer,RpcContext> portMapOnTargetIPEntry : portMapOnTargetIP.entrySet()) {\n        Channel channel=portMapOnTargetIPEntry.getValue().getChannel();\n        if (channel.isActive()) {\n          resultChannel=channel;\n          if (LOGGER.isInfoEnabled()) {\n            LOGGER.info(\"Choose \" + channel + \" on the same IP[\"+ targetIP+ \"]  as alternative of \"+ clientId);\n          }\n          break;\n        }\n else {\n          if (portMapOnTargetIP.remove(portMapOnTargetIPEntry.getKey(),portMapOnTargetIPEntry.getValue())) {\n            if (LOGGER.isInfoEnabled()) {\n              LOGGER.info(\"Removed inactive \" + channel);\n            }\n          }\n        }\n      }\n    }\n  }\n  if (resultChannel == null) {\n    for (    ConcurrentMap.Entry<String,ConcurrentMap<Integer,RpcContext>> ipMapEntry : ipMap.entrySet()) {\n      if (ipMapEntry.getKey().equals(targetIP)) {\n        continue;\n      }\n      ConcurrentMap<Integer,RpcContext> portMapOnOtherIP=ipMapEntry.getValue();\n      if (portMapOnOtherIP == null || portMapOnOtherIP.isEmpty()) {\n        continue;\n      }\n      for (      ConcurrentMap.Entry<Integer,RpcContext> portMapOnOtherIPEntry : portMapOnOtherIP.entrySet()) {\n        Channel channel=portMapOnOtherIPEntry.getValue().getChannel();\n        if (channel.isActive()) {\n          resultChannel=channel;\n          if (LOGGER.isInfoEnabled()) {\n            LOGGER.info(\"Choose \" + channel + \" on the same application[\"+ targetApplicationId+ \"] as alternative of \"+ clientId);\n          }\n          break;\n        }\n else {\n          if (portMapOnOtherIP.remove(portMapOnOtherIPEntry.getKey(),portMapOnOtherIPEntry.getValue())) {\n            if (LOGGER.isInfoEnabled()) {\n              LOGGER.info(\"Removed inactive \" + channel);\n            }\n          }\n        }\n      }\n      if (resultChannel != null) {\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 320,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5851,
        "startLineNumber" : 321,
        "startColumnNumber" : 73,
        "endLineNumber" : 451,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Channel resultChannel=null;\n  String[] clientIdInfo=readClientId(clientId);\n  if (clientIdInfo == null || clientIdInfo.length != 3) {\n    throw new FrameworkException(\"Invalid Client ID: \" + clientId);\n  }\n  String targetApplicationId=clientIdInfo[0];\n  String targetIP=clientIdInfo[1];\n  int targetPort=Integer.parseInt(clientIdInfo[2]);\n  ConcurrentMap<String,ConcurrentMap<String,ConcurrentMap<Integer,RpcContext>>> applicationIdMap=RM_CHANNELS.get(resourceId);\n  if (targetApplicationId == null || applicationIdMap == null || applicationIdMap.isEmpty()) {\n    if (LOGGER.isInfoEnabled()) {\n      LOGGER.info(\"No channel is available for resource[\" + resourceId + \"]\");\n    }\n    return null;\n  }\n  ConcurrentMap<String,ConcurrentMap<Integer,RpcContext>> ipMap=applicationIdMap.get(targetApplicationId);\n  if (null != ipMap && !ipMap.isEmpty()) {\n    ConcurrentMap<Integer,RpcContext> portMapOnTargetIP=ipMap.get(targetIP);\n    if (portMapOnTargetIP != null && !portMapOnTargetIP.isEmpty()) {\n      RpcContext exactRpcContext=portMapOnTargetIP.get(targetPort);\n      if (exactRpcContext != null) {\n        Channel channel=exactRpcContext.getChannel();\n        if (channel.isActive()) {\n          resultChannel=channel;\n          if (LOGGER.isInfoEnabled()) {\n            LOGGER.info(\"Just got exactly the one \" + channel + \" for \"+ clientId);\n          }\n        }\n else {\n          if (portMapOnTargetIP.remove(targetPort,exactRpcContext)) {\n            if (LOGGER.isInfoEnabled()) {\n              LOGGER.info(\"Removed inactive \" + channel);\n            }\n          }\n        }\n      }\n      if (resultChannel == null) {\n        for (        ConcurrentMap.Entry<Integer,RpcContext> portMapOnTargetIPEntry : portMapOnTargetIP.entrySet()) {\n          Channel channel=portMapOnTargetIPEntry.getValue().getChannel();\n          if (channel.isActive()) {\n            resultChannel=channel;\n            if (LOGGER.isInfoEnabled()) {\n              LOGGER.info(\"Choose \" + channel + \" on the same IP[\"+ targetIP+ \"]  as alternative of \"+ clientId);\n            }\n            break;\n          }\n else {\n            if (portMapOnTargetIP.remove(portMapOnTargetIPEntry.getKey(),portMapOnTargetIPEntry.getValue())) {\n              if (LOGGER.isInfoEnabled()) {\n                LOGGER.info(\"Removed inactive \" + channel);\n              }\n            }\n          }\n        }\n      }\n    }\n    if (resultChannel == null) {\n      for (      ConcurrentMap.Entry<String,ConcurrentMap<Integer,RpcContext>> ipMapEntry : ipMap.entrySet()) {\n        if (ipMapEntry.getKey().equals(targetIP)) {\n          continue;\n        }\n        ConcurrentMap<Integer,RpcContext> portMapOnOtherIP=ipMapEntry.getValue();\n        if (portMapOnOtherIP == null || portMapOnOtherIP.isEmpty()) {\n          continue;\n        }\n        for (        ConcurrentMap.Entry<Integer,RpcContext> portMapOnOtherIPEntry : portMapOnOtherIP.entrySet()) {\n          Channel channel=portMapOnOtherIPEntry.getValue().getChannel();\n          if (channel.isActive()) {\n            resultChannel=channel;\n            if (LOGGER.isInfoEnabled()) {\n              LOGGER.info(\"Choose \" + channel + \" on the same application[\"+ targetApplicationId+ \"] as alternative of \"+ clientId);\n            }\n            break;\n          }\n else {\n            if (portMapOnOtherIP.remove(portMapOnOtherIPEntry.getKey(),portMapOnOtherIPEntry.getValue())) {\n              if (LOGGER.isInfoEnabled()) {\n                LOGGER.info(\"Removed inactive \" + channel);\n              }\n            }\n          }\n        }\n        if (resultChannel != null) {\n          break;\n        }\n      }\n    }\n  }\n  if (resultChannel == null) {\n    resultChannel=tryOtherApp(applicationIdMap,targetApplicationId);\n    if (resultChannel == null) {\n      if (LOGGER.isInfoEnabled()) {\n        LOGGER.info(\"No channel is available for resource[\" + resourceId + \"]  as alternative of \"+ clientId);\n      }\n    }\n else {\n      if (LOGGER.isInfoEnabled()) {\n        LOGGER.info(\"Choose \" + resultChannel + \" on the same resource[\"+ resourceId+ \"]  as alternative of \"+ clientId);\n      }\n    }\n  }\n  return resultChannel;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 502,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6121,
        "startLineNumber" : 314,
        "startColumnNumber" : 4,
        "endLineNumber" : 451,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Gets get channel.\n * @param resourceId Resource ID\n * @param clientId   Client ID - ApplicationId:IP:Port\n * @return Corresponding channel, NULL if not found.\n */\npublic static Channel getChannel(String resourceId,String clientId){\n  Channel resultChannel=null;\n  String[] clientIdInfo=readClientId(clientId);\n  if (clientIdInfo == null || clientIdInfo.length != 3) {\n    throw new FrameworkException(\"Invalid Client ID: \" + clientId);\n  }\n  String targetApplicationId=clientIdInfo[0];\n  String targetIP=clientIdInfo[1];\n  int targetPort=Integer.parseInt(clientIdInfo[2]);\n  ConcurrentMap<String,ConcurrentMap<String,ConcurrentMap<Integer,RpcContext>>> applicationIdMap=RM_CHANNELS.get(resourceId);\n  if (targetApplicationId == null || applicationIdMap == null || applicationIdMap.isEmpty()) {\n    if (LOGGER.isInfoEnabled()) {\n      LOGGER.info(\"No channel is available for resource[\" + resourceId + \"]\");\n    }\n    return null;\n  }\n  ConcurrentMap<String,ConcurrentMap<Integer,RpcContext>> ipMap=applicationIdMap.get(targetApplicationId);\n  if (null != ipMap && !ipMap.isEmpty()) {\n    ConcurrentMap<Integer,RpcContext> portMapOnTargetIP=ipMap.get(targetIP);\n    if (portMapOnTargetIP != null && !portMapOnTargetIP.isEmpty()) {\n      RpcContext exactRpcContext=portMapOnTargetIP.get(targetPort);\n      if (exactRpcContext != null) {\n        Channel channel=exactRpcContext.getChannel();\n        if (channel.isActive()) {\n          resultChannel=channel;\n          if (LOGGER.isInfoEnabled()) {\n            LOGGER.info(\"Just got exactly the one \" + channel + \" for \"+ clientId);\n          }\n        }\n else {\n          if (portMapOnTargetIP.remove(targetPort,exactRpcContext)) {\n            if (LOGGER.isInfoEnabled()) {\n              LOGGER.info(\"Removed inactive \" + channel);\n            }\n          }\n        }\n      }\n      if (resultChannel == null) {\n        for (        ConcurrentMap.Entry<Integer,RpcContext> portMapOnTargetIPEntry : portMapOnTargetIP.entrySet()) {\n          Channel channel=portMapOnTargetIPEntry.getValue().getChannel();\n          if (channel.isActive()) {\n            resultChannel=channel;\n            if (LOGGER.isInfoEnabled()) {\n              LOGGER.info(\"Choose \" + channel + \" on the same IP[\"+ targetIP+ \"]  as alternative of \"+ clientId);\n            }\n            break;\n          }\n else {\n            if (portMapOnTargetIP.remove(portMapOnTargetIPEntry.getKey(),portMapOnTargetIPEntry.getValue())) {\n              if (LOGGER.isInfoEnabled()) {\n                LOGGER.info(\"Removed inactive \" + channel);\n              }\n            }\n          }\n        }\n      }\n    }\n    if (resultChannel == null) {\n      for (      ConcurrentMap.Entry<String,ConcurrentMap<Integer,RpcContext>> ipMapEntry : ipMap.entrySet()) {\n        if (ipMapEntry.getKey().equals(targetIP)) {\n          continue;\n        }\n        ConcurrentMap<Integer,RpcContext> portMapOnOtherIP=ipMapEntry.getValue();\n        if (portMapOnOtherIP == null || portMapOnOtherIP.isEmpty()) {\n          continue;\n        }\n        for (        ConcurrentMap.Entry<Integer,RpcContext> portMapOnOtherIPEntry : portMapOnOtherIP.entrySet()) {\n          Channel channel=portMapOnOtherIPEntry.getValue().getChannel();\n          if (channel.isActive()) {\n            resultChannel=channel;\n            if (LOGGER.isInfoEnabled()) {\n              LOGGER.info(\"Choose \" + channel + \" on the same application[\"+ targetApplicationId+ \"] as alternative of \"+ clientId);\n            }\n            break;\n          }\n else {\n            if (portMapOnOtherIP.remove(portMapOnOtherIPEntry.getKey(),portMapOnOtherIPEntry.getValue())) {\n              if (LOGGER.isInfoEnabled()) {\n                LOGGER.info(\"Removed inactive \" + channel);\n              }\n            }\n          }\n        }\n        if (resultChannel != null) {\n          break;\n        }\n      }\n    }\n  }\n  if (resultChannel == null) {\n    resultChannel=tryOtherApp(applicationIdMap,targetApplicationId);\n    if (resultChannel == null) {\n      if (LOGGER.isInfoEnabled()) {\n        LOGGER.info(\"No channel is available for resource[\" + resourceId + \"]  as alternative of \"+ clientId);\n      }\n    }\n else {\n      if (LOGGER.isInfoEnabled()) {\n        LOGGER.info(\"Choose \" + resultChannel + \" on the same resource[\"+ resourceId+ \"]  as alternative of \"+ clientId);\n      }\n    }\n  }\n  return resultChannel;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 517,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 418,
        "startColumnNumber" : 56,
        "endLineNumber" : 418,
        "endColumnNumber" : 86
      },
      "nodeContext" : "portMapOnOtherIPEntry.getKey()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.util.Map.Entry<java.lang.Integer,io.seata.core.rpc.RpcContext>"
  }, {
    "nodeContext" : "portMapOnOtherIPEntry",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 419,
      "startColumnNumber" : 32,
      "endLineNumber" : 419,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 419,
        "startColumnNumber" : 32,
        "endLineNumber" : 419,
        "endColumnNumber" : 64
      },
      "nodeContext" : "portMapOnOtherIPEntry.getValue()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 121,
        "startLineNumber" : 418,
        "startColumnNumber" : 32,
        "endLineNumber" : 419,
        "endColumnNumber" : 65
      },
      "nodeContext" : "portMapOnOtherIP.remove(portMapOnOtherIPEntry.getKey(),portMapOnOtherIPEntry.getValue())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 334,
        "startLineNumber" : 418,
        "startColumnNumber" : 28,
        "endLineNumber" : 423,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (portMapOnOtherIP.remove(portMapOnOtherIPEntry.getKey(),portMapOnOtherIPEntry.getValue())) {\n  if (LOGGER.isInfoEnabled()) {\n    LOGGER.info(\"Removed inactive \" + channel);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 390,
        "startLineNumber" : 417,
        "startColumnNumber" : 31,
        "endLineNumber" : 424,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  if (portMapOnOtherIP.remove(portMapOnOtherIPEntry.getKey(),portMapOnOtherIPEntry.getValue())) {\n    if (LOGGER.isInfoEnabled()) {\n      LOGGER.info(\"Removed inactive \" + channel);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 24,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 849,
        "startLineNumber" : 409,
        "startColumnNumber" : 24,
        "endLineNumber" : 424,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (channel.isActive()) {\n  resultChannel=channel;\n  if (LOGGER.isInfoEnabled()) {\n    LOGGER.info(\"Choose \" + channel + \" on the same application[\"+ targetApplicationId+ \"] as alternative of \"+ clientId);\n  }\n  break;\n}\n else {\n  if (portMapOnOtherIP.remove(portMapOnOtherIPEntry.getKey(),portMapOnOtherIPEntry.getValue())) {\n    if (LOGGER.isInfoEnabled()) {\n      LOGGER.info(\"Removed inactive \" + channel);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 50,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 987,
        "startLineNumber" : 406,
        "startColumnNumber" : 119,
        "endLineNumber" : 425,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  Channel channel=portMapOnOtherIPEntry.getValue().getChannel();\n  if (channel.isActive()) {\n    resultChannel=channel;\n    if (LOGGER.isInfoEnabled()) {\n      LOGGER.info(\"Choose \" + channel + \" on the same application[\"+ targetApplicationId+ \"] as alternative of \"+ clientId);\n    }\n    break;\n  }\n else {\n    if (portMapOnOtherIP.remove(portMapOnOtherIPEntry.getKey(),portMapOnOtherIPEntry.getValue())) {\n      if (LOGGER.isInfoEnabled()) {\n        LOGGER.info(\"Removed inactive \" + channel);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 61,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1086,
        "startLineNumber" : 406,
        "startColumnNumber" : 20,
        "endLineNumber" : 425,
        "endColumnNumber" : 21
      },
      "nodeContext" : "for (ConcurrentMap.Entry<Integer,RpcContext> portMapOnOtherIPEntry : portMapOnOtherIP.entrySet()) {\n  Channel channel=portMapOnOtherIPEntry.getValue().getChannel();\n  if (channel.isActive()) {\n    resultChannel=channel;\n    if (LOGGER.isInfoEnabled()) {\n      LOGGER.info(\"Choose \" + channel + \" on the same application[\"+ targetApplicationId+ \"] as alternative of \"+ clientId);\n    }\n    break;\n  }\n else {\n    if (portMapOnOtherIP.remove(portMapOnOtherIPEntry.getKey(),portMapOnOtherIPEntry.getValue())) {\n      if (LOGGER.isInfoEnabled()) {\n        LOGGER.info(\"Removed inactive \" + channel);\n      }\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 76,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1497,
        "startLineNumber" : 398,
        "startColumnNumber" : 33,
        "endLineNumber" : 427,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (ipMapEntry.getKey().equals(targetIP)) {\n    continue;\n  }\n  ConcurrentMap<Integer,RpcContext> portMapOnOtherIP=ipMapEntry.getValue();\n  if (portMapOnOtherIP == null || portMapOnOtherIP.isEmpty()) {\n    continue;\n  }\n  for (  ConcurrentMap.Entry<Integer,RpcContext> portMapOnOtherIPEntry : portMapOnOtherIP.entrySet()) {\n    Channel channel=portMapOnOtherIPEntry.getValue().getChannel();\n    if (channel.isActive()) {\n      resultChannel=channel;\n      if (LOGGER.isInfoEnabled()) {\n        LOGGER.info(\"Choose \" + channel + \" on the same application[\"+ targetApplicationId+ \"] as alternative of \"+ clientId);\n      }\n      break;\n    }\n else {\n      if (portMapOnOtherIP.remove(portMapOnOtherIPEntry.getKey(),portMapOnOtherIPEntry.getValue())) {\n        if (LOGGER.isInfoEnabled()) {\n          LOGGER.info(\"Removed inactive \" + channel);\n        }\n      }\n    }\n  }\n  if (resultChannel != null) {\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 115,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1618,
        "startLineNumber" : 397,
        "startColumnNumber" : 16,
        "endLineNumber" : 427,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (ConcurrentMap.Entry<String,ConcurrentMap<Integer,RpcContext>> ipMapEntry : ipMap.entrySet()) {\n  if (ipMapEntry.getKey().equals(targetIP)) {\n    continue;\n  }\n  ConcurrentMap<Integer,RpcContext> portMapOnOtherIP=ipMapEntry.getValue();\n  if (portMapOnOtherIP == null || portMapOnOtherIP.isEmpty()) {\n    continue;\n  }\n  for (  ConcurrentMap.Entry<Integer,RpcContext> portMapOnOtherIPEntry : portMapOnOtherIP.entrySet()) {\n    Channel channel=portMapOnOtherIPEntry.getValue().getChannel();\n    if (channel.isActive()) {\n      resultChannel=channel;\n      if (LOGGER.isInfoEnabled()) {\n        LOGGER.info(\"Choose \" + channel + \" on the same application[\"+ targetApplicationId+ \"] as alternative of \"+ clientId);\n      }\n      break;\n    }\n else {\n      if (portMapOnOtherIP.remove(portMapOnOtherIPEntry.getKey(),portMapOnOtherIPEntry.getValue())) {\n        if (LOGGER.isInfoEnabled()) {\n          LOGGER.info(\"Removed inactive \" + channel);\n        }\n      }\n    }\n  }\n  if (resultChannel != null) {\n    break;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 135,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1650,
        "startLineNumber" : 396,
        "startColumnNumber" : 39,
        "endLineNumber" : 428,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  for (  ConcurrentMap.Entry<String,ConcurrentMap<Integer,RpcContext>> ipMapEntry : ipMap.entrySet()) {\n    if (ipMapEntry.getKey().equals(targetIP)) {\n      continue;\n    }\n    ConcurrentMap<Integer,RpcContext> portMapOnOtherIP=ipMapEntry.getValue();\n    if (portMapOnOtherIP == null || portMapOnOtherIP.isEmpty()) {\n      continue;\n    }\n    for (    ConcurrentMap.Entry<Integer,RpcContext> portMapOnOtherIPEntry : portMapOnOtherIP.entrySet()) {\n      Channel channel=portMapOnOtherIPEntry.getValue().getChannel();\n      if (channel.isActive()) {\n        resultChannel=channel;\n        if (LOGGER.isInfoEnabled()) {\n          LOGGER.info(\"Choose \" + channel + \" on the same application[\"+ targetApplicationId+ \"] as alternative of \"+ clientId);\n        }\n        break;\n      }\n else {\n        if (portMapOnOtherIP.remove(portMapOnOtherIPEntry.getKey(),portMapOnOtherIPEntry.getValue())) {\n          if (LOGGER.isInfoEnabled()) {\n            LOGGER.info(\"Removed inactive \" + channel);\n          }\n        }\n      }\n    }\n    if (resultChannel != null) {\n      break;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 136,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1677,
        "startLineNumber" : 396,
        "startColumnNumber" : 12,
        "endLineNumber" : 428,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (resultChannel == null) {\n  for (  ConcurrentMap.Entry<String,ConcurrentMap<Integer,RpcContext>> ipMapEntry : ipMap.entrySet()) {\n    if (ipMapEntry.getKey().equals(targetIP)) {\n      continue;\n    }\n    ConcurrentMap<Integer,RpcContext> portMapOnOtherIP=ipMapEntry.getValue();\n    if (portMapOnOtherIP == null || portMapOnOtherIP.isEmpty()) {\n      continue;\n    }\n    for (    ConcurrentMap.Entry<Integer,RpcContext> portMapOnOtherIPEntry : portMapOnOtherIP.entrySet()) {\n      Channel channel=portMapOnOtherIPEntry.getValue().getChannel();\n      if (channel.isActive()) {\n        resultChannel=channel;\n        if (LOGGER.isInfoEnabled()) {\n          LOGGER.info(\"Choose \" + channel + \" on the same application[\"+ targetApplicationId+ \"] as alternative of \"+ clientId);\n        }\n        break;\n      }\n else {\n        if (portMapOnOtherIP.remove(portMapOnOtherIPEntry.getKey(),portMapOnOtherIPEntry.getValue())) {\n          if (LOGGER.isInfoEnabled()) {\n            LOGGER.info(\"Removed inactive \" + channel);\n          }\n        }\n      }\n    }\n    if (resultChannel != null) {\n      break;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 140,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 4118,
        "startLineNumber" : 346,
        "startColumnNumber" : 47,
        "endLineNumber" : 429,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ConcurrentMap<Integer,RpcContext> portMapOnTargetIP=ipMap.get(targetIP);\n  if (portMapOnTargetIP != null && !portMapOnTargetIP.isEmpty()) {\n    RpcContext exactRpcContext=portMapOnTargetIP.get(targetPort);\n    if (exactRpcContext != null) {\n      Channel channel=exactRpcContext.getChannel();\n      if (channel.isActive()) {\n        resultChannel=channel;\n        if (LOGGER.isInfoEnabled()) {\n          LOGGER.info(\"Just got exactly the one \" + channel + \" for \"+ clientId);\n        }\n      }\n else {\n        if (portMapOnTargetIP.remove(targetPort,exactRpcContext)) {\n          if (LOGGER.isInfoEnabled()) {\n            LOGGER.info(\"Removed inactive \" + channel);\n          }\n        }\n      }\n    }\n    if (resultChannel == null) {\n      for (      ConcurrentMap.Entry<Integer,RpcContext> portMapOnTargetIPEntry : portMapOnTargetIP.entrySet()) {\n        Channel channel=portMapOnTargetIPEntry.getValue().getChannel();\n        if (channel.isActive()) {\n          resultChannel=channel;\n          if (LOGGER.isInfoEnabled()) {\n            LOGGER.info(\"Choose \" + channel + \" on the same IP[\"+ targetIP+ \"]  as alternative of \"+ clientId);\n          }\n          break;\n        }\n else {\n          if (portMapOnTargetIP.remove(portMapOnTargetIPEntry.getKey(),portMapOnTargetIPEntry.getValue())) {\n            if (LOGGER.isInfoEnabled()) {\n              LOGGER.info(\"Removed inactive \" + channel);\n            }\n          }\n        }\n      }\n    }\n  }\n  if (resultChannel == null) {\n    for (    ConcurrentMap.Entry<String,ConcurrentMap<Integer,RpcContext>> ipMapEntry : ipMap.entrySet()) {\n      if (ipMapEntry.getKey().equals(targetIP)) {\n        continue;\n      }\n      ConcurrentMap<Integer,RpcContext> portMapOnOtherIP=ipMapEntry.getValue();\n      if (portMapOnOtherIP == null || portMapOnOtherIP.isEmpty()) {\n        continue;\n      }\n      for (      ConcurrentMap.Entry<Integer,RpcContext> portMapOnOtherIPEntry : portMapOnOtherIP.entrySet()) {\n        Channel channel=portMapOnOtherIPEntry.getValue().getChannel();\n        if (channel.isActive()) {\n          resultChannel=channel;\n          if (LOGGER.isInfoEnabled()) {\n            LOGGER.info(\"Choose \" + channel + \" on the same application[\"+ targetApplicationId+ \"] as alternative of \"+ clientId);\n          }\n          break;\n        }\n else {\n          if (portMapOnOtherIP.remove(portMapOnOtherIPEntry.getKey(),portMapOnOtherIPEntry.getValue())) {\n            if (LOGGER.isInfoEnabled()) {\n              LOGGER.info(\"Removed inactive \" + channel);\n            }\n          }\n        }\n      }\n      if (resultChannel != null) {\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 311,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4157,
        "startLineNumber" : 346,
        "startColumnNumber" : 8,
        "endLineNumber" : 429,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (null != ipMap && !ipMap.isEmpty()) {\n  ConcurrentMap<Integer,RpcContext> portMapOnTargetIP=ipMap.get(targetIP);\n  if (portMapOnTargetIP != null && !portMapOnTargetIP.isEmpty()) {\n    RpcContext exactRpcContext=portMapOnTargetIP.get(targetPort);\n    if (exactRpcContext != null) {\n      Channel channel=exactRpcContext.getChannel();\n      if (channel.isActive()) {\n        resultChannel=channel;\n        if (LOGGER.isInfoEnabled()) {\n          LOGGER.info(\"Just got exactly the one \" + channel + \" for \"+ clientId);\n        }\n      }\n else {\n        if (portMapOnTargetIP.remove(targetPort,exactRpcContext)) {\n          if (LOGGER.isInfoEnabled()) {\n            LOGGER.info(\"Removed inactive \" + channel);\n          }\n        }\n      }\n    }\n    if (resultChannel == null) {\n      for (      ConcurrentMap.Entry<Integer,RpcContext> portMapOnTargetIPEntry : portMapOnTargetIP.entrySet()) {\n        Channel channel=portMapOnTargetIPEntry.getValue().getChannel();\n        if (channel.isActive()) {\n          resultChannel=channel;\n          if (LOGGER.isInfoEnabled()) {\n            LOGGER.info(\"Choose \" + channel + \" on the same IP[\"+ targetIP+ \"]  as alternative of \"+ clientId);\n          }\n          break;\n        }\n else {\n          if (portMapOnTargetIP.remove(portMapOnTargetIPEntry.getKey(),portMapOnTargetIPEntry.getValue())) {\n            if (LOGGER.isInfoEnabled()) {\n              LOGGER.info(\"Removed inactive \" + channel);\n            }\n          }\n        }\n      }\n    }\n  }\n  if (resultChannel == null) {\n    for (    ConcurrentMap.Entry<String,ConcurrentMap<Integer,RpcContext>> ipMapEntry : ipMap.entrySet()) {\n      if (ipMapEntry.getKey().equals(targetIP)) {\n        continue;\n      }\n      ConcurrentMap<Integer,RpcContext> portMapOnOtherIP=ipMapEntry.getValue();\n      if (portMapOnOtherIP == null || portMapOnOtherIP.isEmpty()) {\n        continue;\n      }\n      for (      ConcurrentMap.Entry<Integer,RpcContext> portMapOnOtherIPEntry : portMapOnOtherIP.entrySet()) {\n        Channel channel=portMapOnOtherIPEntry.getValue().getChannel();\n        if (channel.isActive()) {\n          resultChannel=channel;\n          if (LOGGER.isInfoEnabled()) {\n            LOGGER.info(\"Choose \" + channel + \" on the same application[\"+ targetApplicationId+ \"] as alternative of \"+ clientId);\n          }\n          break;\n        }\n else {\n          if (portMapOnOtherIP.remove(portMapOnOtherIPEntry.getKey(),portMapOnOtherIPEntry.getValue())) {\n            if (LOGGER.isInfoEnabled()) {\n              LOGGER.info(\"Removed inactive \" + channel);\n            }\n          }\n        }\n      }\n      if (resultChannel != null) {\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 320,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5851,
        "startLineNumber" : 321,
        "startColumnNumber" : 73,
        "endLineNumber" : 451,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Channel resultChannel=null;\n  String[] clientIdInfo=readClientId(clientId);\n  if (clientIdInfo == null || clientIdInfo.length != 3) {\n    throw new FrameworkException(\"Invalid Client ID: \" + clientId);\n  }\n  String targetApplicationId=clientIdInfo[0];\n  String targetIP=clientIdInfo[1];\n  int targetPort=Integer.parseInt(clientIdInfo[2]);\n  ConcurrentMap<String,ConcurrentMap<String,ConcurrentMap<Integer,RpcContext>>> applicationIdMap=RM_CHANNELS.get(resourceId);\n  if (targetApplicationId == null || applicationIdMap == null || applicationIdMap.isEmpty()) {\n    if (LOGGER.isInfoEnabled()) {\n      LOGGER.info(\"No channel is available for resource[\" + resourceId + \"]\");\n    }\n    return null;\n  }\n  ConcurrentMap<String,ConcurrentMap<Integer,RpcContext>> ipMap=applicationIdMap.get(targetApplicationId);\n  if (null != ipMap && !ipMap.isEmpty()) {\n    ConcurrentMap<Integer,RpcContext> portMapOnTargetIP=ipMap.get(targetIP);\n    if (portMapOnTargetIP != null && !portMapOnTargetIP.isEmpty()) {\n      RpcContext exactRpcContext=portMapOnTargetIP.get(targetPort);\n      if (exactRpcContext != null) {\n        Channel channel=exactRpcContext.getChannel();\n        if (channel.isActive()) {\n          resultChannel=channel;\n          if (LOGGER.isInfoEnabled()) {\n            LOGGER.info(\"Just got exactly the one \" + channel + \" for \"+ clientId);\n          }\n        }\n else {\n          if (portMapOnTargetIP.remove(targetPort,exactRpcContext)) {\n            if (LOGGER.isInfoEnabled()) {\n              LOGGER.info(\"Removed inactive \" + channel);\n            }\n          }\n        }\n      }\n      if (resultChannel == null) {\n        for (        ConcurrentMap.Entry<Integer,RpcContext> portMapOnTargetIPEntry : portMapOnTargetIP.entrySet()) {\n          Channel channel=portMapOnTargetIPEntry.getValue().getChannel();\n          if (channel.isActive()) {\n            resultChannel=channel;\n            if (LOGGER.isInfoEnabled()) {\n              LOGGER.info(\"Choose \" + channel + \" on the same IP[\"+ targetIP+ \"]  as alternative of \"+ clientId);\n            }\n            break;\n          }\n else {\n            if (portMapOnTargetIP.remove(portMapOnTargetIPEntry.getKey(),portMapOnTargetIPEntry.getValue())) {\n              if (LOGGER.isInfoEnabled()) {\n                LOGGER.info(\"Removed inactive \" + channel);\n              }\n            }\n          }\n        }\n      }\n    }\n    if (resultChannel == null) {\n      for (      ConcurrentMap.Entry<String,ConcurrentMap<Integer,RpcContext>> ipMapEntry : ipMap.entrySet()) {\n        if (ipMapEntry.getKey().equals(targetIP)) {\n          continue;\n        }\n        ConcurrentMap<Integer,RpcContext> portMapOnOtherIP=ipMapEntry.getValue();\n        if (portMapOnOtherIP == null || portMapOnOtherIP.isEmpty()) {\n          continue;\n        }\n        for (        ConcurrentMap.Entry<Integer,RpcContext> portMapOnOtherIPEntry : portMapOnOtherIP.entrySet()) {\n          Channel channel=portMapOnOtherIPEntry.getValue().getChannel();\n          if (channel.isActive()) {\n            resultChannel=channel;\n            if (LOGGER.isInfoEnabled()) {\n              LOGGER.info(\"Choose \" + channel + \" on the same application[\"+ targetApplicationId+ \"] as alternative of \"+ clientId);\n            }\n            break;\n          }\n else {\n            if (portMapOnOtherIP.remove(portMapOnOtherIPEntry.getKey(),portMapOnOtherIPEntry.getValue())) {\n              if (LOGGER.isInfoEnabled()) {\n                LOGGER.info(\"Removed inactive \" + channel);\n              }\n            }\n          }\n        }\n        if (resultChannel != null) {\n          break;\n        }\n      }\n    }\n  }\n  if (resultChannel == null) {\n    resultChannel=tryOtherApp(applicationIdMap,targetApplicationId);\n    if (resultChannel == null) {\n      if (LOGGER.isInfoEnabled()) {\n        LOGGER.info(\"No channel is available for resource[\" + resourceId + \"]  as alternative of \"+ clientId);\n      }\n    }\n else {\n      if (LOGGER.isInfoEnabled()) {\n        LOGGER.info(\"Choose \" + resultChannel + \" on the same resource[\"+ resourceId+ \"]  as alternative of \"+ clientId);\n      }\n    }\n  }\n  return resultChannel;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 502,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6121,
        "startLineNumber" : 314,
        "startColumnNumber" : 4,
        "endLineNumber" : 451,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Gets get channel.\n * @param resourceId Resource ID\n * @param clientId   Client ID - ApplicationId:IP:Port\n * @return Corresponding channel, NULL if not found.\n */\npublic static Channel getChannel(String resourceId,String clientId){\n  Channel resultChannel=null;\n  String[] clientIdInfo=readClientId(clientId);\n  if (clientIdInfo == null || clientIdInfo.length != 3) {\n    throw new FrameworkException(\"Invalid Client ID: \" + clientId);\n  }\n  String targetApplicationId=clientIdInfo[0];\n  String targetIP=clientIdInfo[1];\n  int targetPort=Integer.parseInt(clientIdInfo[2]);\n  ConcurrentMap<String,ConcurrentMap<String,ConcurrentMap<Integer,RpcContext>>> applicationIdMap=RM_CHANNELS.get(resourceId);\n  if (targetApplicationId == null || applicationIdMap == null || applicationIdMap.isEmpty()) {\n    if (LOGGER.isInfoEnabled()) {\n      LOGGER.info(\"No channel is available for resource[\" + resourceId + \"]\");\n    }\n    return null;\n  }\n  ConcurrentMap<String,ConcurrentMap<Integer,RpcContext>> ipMap=applicationIdMap.get(targetApplicationId);\n  if (null != ipMap && !ipMap.isEmpty()) {\n    ConcurrentMap<Integer,RpcContext> portMapOnTargetIP=ipMap.get(targetIP);\n    if (portMapOnTargetIP != null && !portMapOnTargetIP.isEmpty()) {\n      RpcContext exactRpcContext=portMapOnTargetIP.get(targetPort);\n      if (exactRpcContext != null) {\n        Channel channel=exactRpcContext.getChannel();\n        if (channel.isActive()) {\n          resultChannel=channel;\n          if (LOGGER.isInfoEnabled()) {\n            LOGGER.info(\"Just got exactly the one \" + channel + \" for \"+ clientId);\n          }\n        }\n else {\n          if (portMapOnTargetIP.remove(targetPort,exactRpcContext)) {\n            if (LOGGER.isInfoEnabled()) {\n              LOGGER.info(\"Removed inactive \" + channel);\n            }\n          }\n        }\n      }\n      if (resultChannel == null) {\n        for (        ConcurrentMap.Entry<Integer,RpcContext> portMapOnTargetIPEntry : portMapOnTargetIP.entrySet()) {\n          Channel channel=portMapOnTargetIPEntry.getValue().getChannel();\n          if (channel.isActive()) {\n            resultChannel=channel;\n            if (LOGGER.isInfoEnabled()) {\n              LOGGER.info(\"Choose \" + channel + \" on the same IP[\"+ targetIP+ \"]  as alternative of \"+ clientId);\n            }\n            break;\n          }\n else {\n            if (portMapOnTargetIP.remove(portMapOnTargetIPEntry.getKey(),portMapOnTargetIPEntry.getValue())) {\n              if (LOGGER.isInfoEnabled()) {\n                LOGGER.info(\"Removed inactive \" + channel);\n              }\n            }\n          }\n        }\n      }\n    }\n    if (resultChannel == null) {\n      for (      ConcurrentMap.Entry<String,ConcurrentMap<Integer,RpcContext>> ipMapEntry : ipMap.entrySet()) {\n        if (ipMapEntry.getKey().equals(targetIP)) {\n          continue;\n        }\n        ConcurrentMap<Integer,RpcContext> portMapOnOtherIP=ipMapEntry.getValue();\n        if (portMapOnOtherIP == null || portMapOnOtherIP.isEmpty()) {\n          continue;\n        }\n        for (        ConcurrentMap.Entry<Integer,RpcContext> portMapOnOtherIPEntry : portMapOnOtherIP.entrySet()) {\n          Channel channel=portMapOnOtherIPEntry.getValue().getChannel();\n          if (channel.isActive()) {\n            resultChannel=channel;\n            if (LOGGER.isInfoEnabled()) {\n              LOGGER.info(\"Choose \" + channel + \" on the same application[\"+ targetApplicationId+ \"] as alternative of \"+ clientId);\n            }\n            break;\n          }\n else {\n            if (portMapOnOtherIP.remove(portMapOnOtherIPEntry.getKey(),portMapOnOtherIPEntry.getValue())) {\n              if (LOGGER.isInfoEnabled()) {\n                LOGGER.info(\"Removed inactive \" + channel);\n              }\n            }\n          }\n        }\n        if (resultChannel != null) {\n          break;\n        }\n      }\n    }\n  }\n  if (resultChannel == null) {\n    resultChannel=tryOtherApp(applicationIdMap,targetApplicationId);\n    if (resultChannel == null) {\n      if (LOGGER.isInfoEnabled()) {\n        LOGGER.info(\"No channel is available for resource[\" + resourceId + \"]  as alternative of \"+ clientId);\n      }\n    }\n else {\n      if (LOGGER.isInfoEnabled()) {\n        LOGGER.info(\"Choose \" + resultChannel + \" on the same resource[\"+ resourceId+ \"]  as alternative of \"+ clientId);\n      }\n    }\n  }\n  return resultChannel;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 517,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 419,
        "startColumnNumber" : 32,
        "endLineNumber" : 419,
        "endColumnNumber" : 64
      },
      "nodeContext" : "portMapOnOtherIPEntry.getValue()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.util.Map.Entry<java.lang.Integer,io.seata.core.rpc.RpcContext>"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 407,
    "startColumnNumber" : 42,
    "endLineNumber" : 407,
    "endColumnNumber" : 63
  }, {
    "charLength" : 21,
    "startLineNumber" : 418,
    "startColumnNumber" : 56,
    "endLineNumber" : 418,
    "endColumnNumber" : 77
  }, {
    "charLength" : 21,
    "startLineNumber" : 419,
    "startColumnNumber" : 32,
    "endLineNumber" : 419,
    "endColumnNumber" : 53
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 1
  } ]
}