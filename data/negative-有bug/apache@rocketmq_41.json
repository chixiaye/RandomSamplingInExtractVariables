{
  "id" : 41,
  "expression" : "message.getTopic()",
  "projectName" : "apache@rocketmq",
  "commitID" : "7692d466e1fda6c29d52a61617cab1d82de8b884",
  "filePath" : "/test/src/test/java/org/apache/rocketmq/test/client/producer/batch/BatchSendIT.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "message.getTopic()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 110,
      "startColumnNumber" : 28,
      "endLineNumber" : 110,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 110,
        "startColumnNumber" : 8,
        "endLineNumber" : 110,
        "endColumnNumber" : 74
      },
      "nodeContext" : "Assert.assertEquals(message.getTopic(),messageByMsgId.getTopic())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 110,
        "startColumnNumber" : 8,
        "endLineNumber" : 110,
        "endColumnNumber" : 75
      },
      "nodeContext" : "Assert.assertEquals(message.getTopic(),messageByMsgId.getTopic());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2091,
        "startLineNumber" : 81,
        "startColumnNumber" : 65,
        "endLineNumber" : 127,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<Message> messageList=new ArrayList<>();\n  Message message=new Message();\n  message.setTopic(topic);\n  message.setKeys(\"keys123\");\n  message.setTags(\"tags123\");\n  message.setWaitStoreMsgOK(false);\n  message.setBuyerId(\"buyerid123\");\n  message.setFlag(123);\n  message.setBody(\"body\".getBytes());\n  messageList.add(message);\n  DefaultMQProducer producer=ProducerFactory.getRMQProducer(nsAddr);\n  SendResult sendResult=producer.send(messageList);\n  Assert.assertEquals(SendStatus.SEND_OK,sendResult.getSendStatus());\n  String[] offsetIds=sendResult.getOffsetMsgId().split(\",\");\n  String[] msgIds=sendResult.getMsgId().split(\",\");\n  Assert.assertEquals(messageList.size(),offsetIds.length);\n  Assert.assertEquals(messageList.size(),msgIds.length);\n  Thread.sleep(2000);\n  Message messageByOffset=producer.viewMessage(offsetIds[0]);\n  Message messageByMsgId=producer.viewMessage(topic,msgIds[0]);\n  System.out.println(messageByOffset);\n  System.out.println(messageByMsgId);\n  Assert.assertEquals(message.getTopic(),messageByMsgId.getTopic());\n  Assert.assertEquals(message.getTopic(),messageByOffset.getTopic());\n  Assert.assertEquals(message.getKeys(),messageByOffset.getKeys());\n  Assert.assertEquals(message.getKeys(),messageByMsgId.getKeys());\n  Assert.assertEquals(message.getTags(),messageByOffset.getTags());\n  Assert.assertEquals(message.getTags(),messageByMsgId.getTags());\n  Assert.assertEquals(message.isWaitStoreMsgOK(),messageByOffset.isWaitStoreMsgOK());\n  Assert.assertEquals(message.isWaitStoreMsgOK(),messageByMsgId.isWaitStoreMsgOK());\n  Assert.assertEquals(message.getBuyerId(),messageByOffset.getBuyerId());\n  Assert.assertEquals(message.getBuyerId(),messageByMsgId.getBuyerId());\n  Assert.assertEquals(message.getFlag(),messageByOffset.getFlag());\n  Assert.assertEquals(message.getFlag(),messageByMsgId.getFlag());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 299,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2162,
        "startLineNumber" : 80,
        "startColumnNumber" : 4,
        "endLineNumber" : 127,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testBatchSend_CheckProperties() throws Exception {\n  List<Message> messageList=new ArrayList<>();\n  Message message=new Message();\n  message.setTopic(topic);\n  message.setKeys(\"keys123\");\n  message.setTags(\"tags123\");\n  message.setWaitStoreMsgOK(false);\n  message.setBuyerId(\"buyerid123\");\n  message.setFlag(123);\n  message.setBody(\"body\".getBytes());\n  messageList.add(message);\n  DefaultMQProducer producer=ProducerFactory.getRMQProducer(nsAddr);\n  SendResult sendResult=producer.send(messageList);\n  Assert.assertEquals(SendStatus.SEND_OK,sendResult.getSendStatus());\n  String[] offsetIds=sendResult.getOffsetMsgId().split(\",\");\n  String[] msgIds=sendResult.getMsgId().split(\",\");\n  Assert.assertEquals(messageList.size(),offsetIds.length);\n  Assert.assertEquals(messageList.size(),msgIds.length);\n  Thread.sleep(2000);\n  Message messageByOffset=producer.viewMessage(offsetIds[0]);\n  Message messageByMsgId=producer.viewMessage(topic,msgIds[0]);\n  System.out.println(messageByOffset);\n  System.out.println(messageByMsgId);\n  Assert.assertEquals(message.getTopic(),messageByMsgId.getTopic());\n  Assert.assertEquals(message.getTopic(),messageByOffset.getTopic());\n  Assert.assertEquals(message.getKeys(),messageByOffset.getKeys());\n  Assert.assertEquals(message.getKeys(),messageByMsgId.getKeys());\n  Assert.assertEquals(message.getTags(),messageByOffset.getTags());\n  Assert.assertEquals(message.getTags(),messageByMsgId.getTags());\n  Assert.assertEquals(message.isWaitStoreMsgOK(),messageByOffset.isWaitStoreMsgOK());\n  Assert.assertEquals(message.isWaitStoreMsgOK(),messageByMsgId.isWaitStoreMsgOK());\n  Assert.assertEquals(message.getBuyerId(),messageByOffset.getBuyerId());\n  Assert.assertEquals(message.getBuyerId(),messageByMsgId.getBuyerId());\n  Assert.assertEquals(message.getFlag(),messageByOffset.getFlag());\n  Assert.assertEquals(message.getFlag(),messageByMsgId.getFlag());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 307,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 110,
        "startColumnNumber" : 8,
        "endLineNumber" : 110,
        "endColumnNumber" : 75
      },
      "nodeContext" : "Assert.assertEquals(message.getTopic(),messageByMsgId.getTopic());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "message.getTopic()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 111,
      "startColumnNumber" : 28,
      "endLineNumber" : 111,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 111,
        "startColumnNumber" : 8,
        "endLineNumber" : 111,
        "endColumnNumber" : 75
      },
      "nodeContext" : "Assert.assertEquals(message.getTopic(),messageByOffset.getTopic())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 111,
        "startColumnNumber" : 8,
        "endLineNumber" : 111,
        "endColumnNumber" : 76
      },
      "nodeContext" : "Assert.assertEquals(message.getTopic(),messageByOffset.getTopic());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2091,
        "startLineNumber" : 81,
        "startColumnNumber" : 65,
        "endLineNumber" : 127,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<Message> messageList=new ArrayList<>();\n  Message message=new Message();\n  message.setTopic(topic);\n  message.setKeys(\"keys123\");\n  message.setTags(\"tags123\");\n  message.setWaitStoreMsgOK(false);\n  message.setBuyerId(\"buyerid123\");\n  message.setFlag(123);\n  message.setBody(\"body\".getBytes());\n  messageList.add(message);\n  DefaultMQProducer producer=ProducerFactory.getRMQProducer(nsAddr);\n  SendResult sendResult=producer.send(messageList);\n  Assert.assertEquals(SendStatus.SEND_OK,sendResult.getSendStatus());\n  String[] offsetIds=sendResult.getOffsetMsgId().split(\",\");\n  String[] msgIds=sendResult.getMsgId().split(\",\");\n  Assert.assertEquals(messageList.size(),offsetIds.length);\n  Assert.assertEquals(messageList.size(),msgIds.length);\n  Thread.sleep(2000);\n  Message messageByOffset=producer.viewMessage(offsetIds[0]);\n  Message messageByMsgId=producer.viewMessage(topic,msgIds[0]);\n  System.out.println(messageByOffset);\n  System.out.println(messageByMsgId);\n  Assert.assertEquals(message.getTopic(),messageByMsgId.getTopic());\n  Assert.assertEquals(message.getTopic(),messageByOffset.getTopic());\n  Assert.assertEquals(message.getKeys(),messageByOffset.getKeys());\n  Assert.assertEquals(message.getKeys(),messageByMsgId.getKeys());\n  Assert.assertEquals(message.getTags(),messageByOffset.getTags());\n  Assert.assertEquals(message.getTags(),messageByMsgId.getTags());\n  Assert.assertEquals(message.isWaitStoreMsgOK(),messageByOffset.isWaitStoreMsgOK());\n  Assert.assertEquals(message.isWaitStoreMsgOK(),messageByMsgId.isWaitStoreMsgOK());\n  Assert.assertEquals(message.getBuyerId(),messageByOffset.getBuyerId());\n  Assert.assertEquals(message.getBuyerId(),messageByMsgId.getBuyerId());\n  Assert.assertEquals(message.getFlag(),messageByOffset.getFlag());\n  Assert.assertEquals(message.getFlag(),messageByMsgId.getFlag());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 299,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2162,
        "startLineNumber" : 80,
        "startColumnNumber" : 4,
        "endLineNumber" : 127,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testBatchSend_CheckProperties() throws Exception {\n  List<Message> messageList=new ArrayList<>();\n  Message message=new Message();\n  message.setTopic(topic);\n  message.setKeys(\"keys123\");\n  message.setTags(\"tags123\");\n  message.setWaitStoreMsgOK(false);\n  message.setBuyerId(\"buyerid123\");\n  message.setFlag(123);\n  message.setBody(\"body\".getBytes());\n  messageList.add(message);\n  DefaultMQProducer producer=ProducerFactory.getRMQProducer(nsAddr);\n  SendResult sendResult=producer.send(messageList);\n  Assert.assertEquals(SendStatus.SEND_OK,sendResult.getSendStatus());\n  String[] offsetIds=sendResult.getOffsetMsgId().split(\",\");\n  String[] msgIds=sendResult.getMsgId().split(\",\");\n  Assert.assertEquals(messageList.size(),offsetIds.length);\n  Assert.assertEquals(messageList.size(),msgIds.length);\n  Thread.sleep(2000);\n  Message messageByOffset=producer.viewMessage(offsetIds[0]);\n  Message messageByMsgId=producer.viewMessage(topic,msgIds[0]);\n  System.out.println(messageByOffset);\n  System.out.println(messageByMsgId);\n  Assert.assertEquals(message.getTopic(),messageByMsgId.getTopic());\n  Assert.assertEquals(message.getTopic(),messageByOffset.getTopic());\n  Assert.assertEquals(message.getKeys(),messageByOffset.getKeys());\n  Assert.assertEquals(message.getKeys(),messageByMsgId.getKeys());\n  Assert.assertEquals(message.getTags(),messageByOffset.getTags());\n  Assert.assertEquals(message.getTags(),messageByMsgId.getTags());\n  Assert.assertEquals(message.isWaitStoreMsgOK(),messageByOffset.isWaitStoreMsgOK());\n  Assert.assertEquals(message.isWaitStoreMsgOK(),messageByMsgId.isWaitStoreMsgOK());\n  Assert.assertEquals(message.getBuyerId(),messageByOffset.getBuyerId());\n  Assert.assertEquals(message.getBuyerId(),messageByMsgId.getBuyerId());\n  Assert.assertEquals(message.getFlag(),messageByOffset.getFlag());\n  Assert.assertEquals(message.getFlag(),messageByMsgId.getFlag());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 307,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 111,
        "startColumnNumber" : 8,
        "endLineNumber" : 111,
        "endColumnNumber" : 76
      },
      "nodeContext" : "Assert.assertEquals(message.getTopic(),messageByOffset.getTopic());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 110,
    "startColumnNumber" : 28,
    "endLineNumber" : 110,
    "endColumnNumber" : 46
  }, {
    "charLength" : 18,
    "startLineNumber" : 111,
    "startColumnNumber" : 28,
    "endLineNumber" : 111,
    "endColumnNumber" : 46
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}