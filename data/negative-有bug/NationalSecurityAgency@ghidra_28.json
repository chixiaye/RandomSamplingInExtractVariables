{
  "id" : 28,
  "expression" : "keyIn",
  "projectName" : "NationalSecurityAgency@ghidra",
  "commitID" : "a54d0e28d652c48502551a88278808549aed5f98",
  "filePath" : "/Ghidra/Framework/FileSystem/src/main/java/ghidra/framework/client/HeadlessClientAuthenticator.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "keyIn",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 94,
      "startColumnNumber" : 8,
      "endLineNumber" : 94,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 21
      },
      "nodeContext" : "keyIn != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 577,
        "startLineNumber" : 94,
        "startColumnNumber" : 4,
        "endLineNumber" : 114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (keyIn != null) {\n  try {\n    sshPrivateKey=SSHKeyManager.getSSHPrivateKey(keyIn);\n    Msg.info(HeadlessClientAuthenticator.class,\"Loaded SSH key: \" + keystorePath);\n    return;\n  }\n catch (  Exception e) {\n    Msg.error(HeadlessClientAuthenticator.class,\"Failed to open keystore for SSH use: \" + keystorePath,e);\n    throw new IOException(\"Failed to parse keystore: \" + keystorePath);\n  }\n finally {\n    try {\n      keyIn.close();\n    }\n catch (    IOException e) {\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 62,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1002,
        "startLineNumber" : 90,
        "startColumnNumber" : 20,
        "endLineNumber" : 117,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  InputStream keyIn=keystorePath.getClass().getResourceAsStream(keystorePath);\n  if (keyIn != null) {\n    try {\n      sshPrivateKey=SSHKeyManager.getSSHPrivateKey(keyIn);\n      Msg.info(HeadlessClientAuthenticator.class,\"Loaded SSH key: \" + keystorePath);\n      return;\n    }\n catch (    Exception e) {\n      Msg.error(HeadlessClientAuthenticator.class,\"Failed to open keystore for SSH use: \" + keystorePath,e);\n      throw new IOException(\"Failed to parse keystore: \" + keystorePath);\n    }\n finally {\n      try {\n        keyIn.close();\n      }\n catch (      IOException e) {\n      }\n    }\n  }\n  Msg.error(HeadlessClientAuthenticator.class,\"Keystore not found: \" + keystorePath);\n  throw new FileNotFoundException(\"Keystore not found: \" + keystorePath);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1019,
        "startLineNumber" : 90,
        "startColumnNumber" : 3,
        "endLineNumber" : 117,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (!f.exists()) {\n  InputStream keyIn=keystorePath.getClass().getResourceAsStream(keystorePath);\n  if (keyIn != null) {\n    try {\n      sshPrivateKey=SSHKeyManager.getSSHPrivateKey(keyIn);\n      Msg.info(HeadlessClientAuthenticator.class,\"Loaded SSH key: \" + keystorePath);\n      return;\n    }\n catch (    Exception e) {\n      Msg.error(HeadlessClientAuthenticator.class,\"Failed to open keystore for SSH use: \" + keystorePath,e);\n      throw new IOException(\"Failed to parse keystore: \" + keystorePath);\n    }\n finally {\n      try {\n        keyIn.close();\n      }\n catch (      IOException e) {\n      }\n    }\n  }\n  Msg.error(HeadlessClientAuthenticator.class,\"Keystore not found: \" + keystorePath);\n  throw new FileNotFoundException(\"Keystore not found: \" + keystorePath);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 96,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1866,
        "startLineNumber" : 88,
        "startColumnNumber" : 28,
        "endLineNumber" : 137,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  File f=new File(keystorePath);\n  if (!f.exists()) {\n    InputStream keyIn=keystorePath.getClass().getResourceAsStream(keystorePath);\n    if (keyIn != null) {\n      try {\n        sshPrivateKey=SSHKeyManager.getSSHPrivateKey(keyIn);\n        Msg.info(HeadlessClientAuthenticator.class,\"Loaded SSH key: \" + keystorePath);\n        return;\n      }\n catch (      Exception e) {\n        Msg.error(HeadlessClientAuthenticator.class,\"Failed to open keystore for SSH use: \" + keystorePath,e);\n        throw new IOException(\"Failed to parse keystore: \" + keystorePath);\n      }\n finally {\n        try {\n          keyIn.close();\n        }\n catch (        IOException e) {\n        }\n      }\n    }\n    Msg.error(HeadlessClientAuthenticator.class,\"Keystore not found: \" + keystorePath);\n    throw new FileNotFoundException(\"Keystore not found: \" + keystorePath);\n  }\n  try {\n    sshPrivateKey=SSHKeyManager.getSSHPrivateKey(new File(keystorePath));\n    Msg.info(HeadlessClientAuthenticator.class,\"Loaded SSH key: \" + keystorePath);\n  }\n catch (  IOException e) {\n    try {\n      ApplicationKeyManagerFactory.setKeyStore(keystorePath,false);\n      Msg.info(HeadlessClientAuthenticator.class,\"Loaded PKI key: \" + keystorePath);\n    }\n catch (    IOException e1) {\n      Msg.error(HeadlessClientAuthenticator.class,\"Failed to open keystore for PKI use: \" + keystorePath,e1);\n      Msg.error(HeadlessClientAuthenticator.class,\"Failed to open keystore for SSH use: \" + keystorePath,e);\n      throw new IOException(\"Failed to parse keystore: \" + keystorePath);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 187,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1933,
        "startLineNumber" : 88,
        "startColumnNumber" : 2,
        "endLineNumber" : 140,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (keystorePath != null) {\n  File f=new File(keystorePath);\n  if (!f.exists()) {\n    InputStream keyIn=keystorePath.getClass().getResourceAsStream(keystorePath);\n    if (keyIn != null) {\n      try {\n        sshPrivateKey=SSHKeyManager.getSSHPrivateKey(keyIn);\n        Msg.info(HeadlessClientAuthenticator.class,\"Loaded SSH key: \" + keystorePath);\n        return;\n      }\n catch (      Exception e) {\n        Msg.error(HeadlessClientAuthenticator.class,\"Failed to open keystore for SSH use: \" + keystorePath,e);\n        throw new IOException(\"Failed to parse keystore: \" + keystorePath);\n      }\n finally {\n        try {\n          keyIn.close();\n        }\n catch (        IOException e) {\n        }\n      }\n    }\n    Msg.error(HeadlessClientAuthenticator.class,\"Keystore not found: \" + keystorePath);\n    throw new FileNotFoundException(\"Keystore not found: \" + keystorePath);\n  }\n  try {\n    sshPrivateKey=SSHKeyManager.getSSHPrivateKey(new File(keystorePath));\n    Msg.info(HeadlessClientAuthenticator.class,\"Loaded SSH key: \" + keystorePath);\n  }\n catch (  IOException e) {\n    try {\n      ApplicationKeyManagerFactory.setKeyStore(keystorePath,false);\n      Msg.info(HeadlessClientAuthenticator.class,\"Loaded PKI key: \" + keystorePath);\n    }\n catch (    IOException e1) {\n      Msg.error(HeadlessClientAuthenticator.class,\"Failed to open keystore for PKI use: \" + keystorePath,e1);\n      Msg.error(HeadlessClientAuthenticator.class,\"Failed to open keystore for SSH use: \" + keystorePath,e);\n      throw new IOException(\"Failed to parse keystore: \" + keystorePath);\n    }\n  }\n}\n else {\n  sshPrivateKey=null;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 196,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2250,
        "startLineNumber" : 76,
        "startColumnNumber" : 51,
        "endLineNumber" : 141,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  passwordPromptAlowed=allowPasswordPrompt;\n  if (username != null) {\n    userID=username;\n  }\n  sshPrivateKey=null;\n  HeadlessClientAuthenticator authenticator=new HeadlessClientAuthenticator();\n  ClientUtil.setClientAuthenticator(authenticator);\n  if (keystorePath != null) {\n    File f=new File(keystorePath);\n    if (!f.exists()) {\n      InputStream keyIn=keystorePath.getClass().getResourceAsStream(keystorePath);\n      if (keyIn != null) {\n        try {\n          sshPrivateKey=SSHKeyManager.getSSHPrivateKey(keyIn);\n          Msg.info(HeadlessClientAuthenticator.class,\"Loaded SSH key: \" + keystorePath);\n          return;\n        }\n catch (        Exception e) {\n          Msg.error(HeadlessClientAuthenticator.class,\"Failed to open keystore for SSH use: \" + keystorePath,e);\n          throw new IOException(\"Failed to parse keystore: \" + keystorePath);\n        }\n finally {\n          try {\n            keyIn.close();\n          }\n catch (          IOException e) {\n          }\n        }\n      }\n      Msg.error(HeadlessClientAuthenticator.class,\"Keystore not found: \" + keystorePath);\n      throw new FileNotFoundException(\"Keystore not found: \" + keystorePath);\n    }\n    try {\n      sshPrivateKey=SSHKeyManager.getSSHPrivateKey(new File(keystorePath));\n      Msg.info(HeadlessClientAuthenticator.class,\"Loaded SSH key: \" + keystorePath);\n    }\n catch (    IOException e) {\n      try {\n        ApplicationKeyManagerFactory.setKeyStore(keystorePath,false);\n        Msg.info(HeadlessClientAuthenticator.class,\"Loaded PKI key: \" + keystorePath);\n      }\n catch (      IOException e1) {\n        Msg.error(HeadlessClientAuthenticator.class,\"Failed to open keystore for PKI use: \" + keystorePath,e1);\n        Msg.error(HeadlessClientAuthenticator.class,\"Failed to open keystore for SSH use: \" + keystorePath,e);\n        throw new IOException(\"Failed to parse keystore: \" + keystorePath);\n      }\n    }\n  }\n else {\n    sshPrivateKey=null;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 227,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2999,
        "startLineNumber" : 64,
        "startColumnNumber" : 1,
        "endLineNumber" : 141,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Install headless client authenticator for Ghidra Server\n * @param username optional username to be used with a Ghidra Server whichallows username to be specified\n * @param keystorePath optional PKI or SSH keystore path.  May also be specifiedas resource path for SSH key.\n * @param allowPasswordPrompt if true the user may be prompted for passwordsvia the console (stdin).  Please note that the Java console will echo  the password entry to the terminal which may be undesirable.\n * @throws IOException if error occurs while opening specified keystorePath \n */\npublic static void installHeadlessClientAuthenticator(String username,String keystorePath,boolean allowPasswordPrompt) throws IOException {\n  passwordPromptAlowed=allowPasswordPrompt;\n  if (username != null) {\n    userID=username;\n  }\n  sshPrivateKey=null;\n  HeadlessClientAuthenticator authenticator=new HeadlessClientAuthenticator();\n  ClientUtil.setClientAuthenticator(authenticator);\n  if (keystorePath != null) {\n    File f=new File(keystorePath);\n    if (!f.exists()) {\n      InputStream keyIn=keystorePath.getClass().getResourceAsStream(keystorePath);\n      if (keyIn != null) {\n        try {\n          sshPrivateKey=SSHKeyManager.getSSHPrivateKey(keyIn);\n          Msg.info(HeadlessClientAuthenticator.class,\"Loaded SSH key: \" + keystorePath);\n          return;\n        }\n catch (        Exception e) {\n          Msg.error(HeadlessClientAuthenticator.class,\"Failed to open keystore for SSH use: \" + keystorePath,e);\n          throw new IOException(\"Failed to parse keystore: \" + keystorePath);\n        }\n finally {\n          try {\n            keyIn.close();\n          }\n catch (          IOException e) {\n          }\n        }\n      }\n      Msg.error(HeadlessClientAuthenticator.class,\"Keystore not found: \" + keystorePath);\n      throw new FileNotFoundException(\"Keystore not found: \" + keystorePath);\n    }\n    try {\n      sshPrivateKey=SSHKeyManager.getSSHPrivateKey(new File(keystorePath));\n      Msg.info(HeadlessClientAuthenticator.class,\"Loaded SSH key: \" + keystorePath);\n    }\n catch (    IOException e) {\n      try {\n        ApplicationKeyManagerFactory.setKeyStore(keystorePath,false);\n        Msg.info(HeadlessClientAuthenticator.class,\"Loaded PKI key: \" + keystorePath);\n      }\n catch (      IOException e1) {\n        Msg.error(HeadlessClientAuthenticator.class,\"Failed to open keystore for PKI use: \" + keystorePath,e1);\n        Msg.error(HeadlessClientAuthenticator.class,\"Failed to open keystore for SSH use: \" + keystorePath,e);\n        throw new IOException(\"Failed to parse keystore: \" + keystorePath);\n      }\n    }\n  }\n else {\n    sshPrivateKey=null;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 246,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 21
      },
      "nodeContext" : "keyIn != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.io.InputStream"
  }, {
    "nodeContext" : "keyIn",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 96,
      "startColumnNumber" : 53,
      "endLineNumber" : 96,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 96,
        "startColumnNumber" : 22,
        "endLineNumber" : 96,
        "endColumnNumber" : 59
      },
      "nodeContext" : "SSHKeyManager.getSSHPrivateKey(keyIn)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 96,
        "startColumnNumber" : 6,
        "endLineNumber" : 96,
        "endColumnNumber" : 59
      },
      "nodeContext" : "sshPrivateKey=SSHKeyManager.getSSHPrivateKey(keyIn)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 96,
        "startColumnNumber" : 6,
        "endLineNumber" : 96,
        "endColumnNumber" : 60
      },
      "nodeContext" : "sshPrivateKey=SSHKeyManager.getSSHPrivateKey(keyIn);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 181,
        "startLineNumber" : 95,
        "startColumnNumber" : 9,
        "endLineNumber" : 100,
        "endColumnNumber" : 6
      },
      "nodeContext" : "{\n  sshPrivateKey=SSHKeyManager.getSSHPrivateKey(keyIn);\n  Msg.info(HeadlessClientAuthenticator.class,\"Loaded SSH key: \" + keystorePath);\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 543,
        "startLineNumber" : 95,
        "startColumnNumber" : 5,
        "endLineNumber" : 113,
        "endColumnNumber" : 6
      },
      "nodeContext" : "try {\n  sshPrivateKey=SSHKeyManager.getSSHPrivateKey(keyIn);\n  Msg.info(HeadlessClientAuthenticator.class,\"Loaded SSH key: \" + keystorePath);\n  return;\n}\n catch (Exception e) {\n  Msg.error(HeadlessClientAuthenticator.class,\"Failed to open keystore for SSH use: \" + keystorePath,e);\n  throw new IOException(\"Failed to parse keystore: \" + keystorePath);\n}\n finally {\n  try {\n    keyIn.close();\n  }\n catch (  IOException e) {\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 57,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 558,
        "startLineNumber" : 94,
        "startColumnNumber" : 23,
        "endLineNumber" : 114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    sshPrivateKey=SSHKeyManager.getSSHPrivateKey(keyIn);\n    Msg.info(HeadlessClientAuthenticator.class,\"Loaded SSH key: \" + keystorePath);\n    return;\n  }\n catch (  Exception e) {\n    Msg.error(HeadlessClientAuthenticator.class,\"Failed to open keystore for SSH use: \" + keystorePath,e);\n    throw new IOException(\"Failed to parse keystore: \" + keystorePath);\n  }\n finally {\n    try {\n      keyIn.close();\n    }\n catch (    IOException e) {\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 58,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 577,
        "startLineNumber" : 94,
        "startColumnNumber" : 4,
        "endLineNumber" : 114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (keyIn != null) {\n  try {\n    sshPrivateKey=SSHKeyManager.getSSHPrivateKey(keyIn);\n    Msg.info(HeadlessClientAuthenticator.class,\"Loaded SSH key: \" + keystorePath);\n    return;\n  }\n catch (  Exception e) {\n    Msg.error(HeadlessClientAuthenticator.class,\"Failed to open keystore for SSH use: \" + keystorePath,e);\n    throw new IOException(\"Failed to parse keystore: \" + keystorePath);\n  }\n finally {\n    try {\n      keyIn.close();\n    }\n catch (    IOException e) {\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 62,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1002,
        "startLineNumber" : 90,
        "startColumnNumber" : 20,
        "endLineNumber" : 117,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  InputStream keyIn=keystorePath.getClass().getResourceAsStream(keystorePath);\n  if (keyIn != null) {\n    try {\n      sshPrivateKey=SSHKeyManager.getSSHPrivateKey(keyIn);\n      Msg.info(HeadlessClientAuthenticator.class,\"Loaded SSH key: \" + keystorePath);\n      return;\n    }\n catch (    Exception e) {\n      Msg.error(HeadlessClientAuthenticator.class,\"Failed to open keystore for SSH use: \" + keystorePath,e);\n      throw new IOException(\"Failed to parse keystore: \" + keystorePath);\n    }\n finally {\n      try {\n        keyIn.close();\n      }\n catch (      IOException e) {\n      }\n    }\n  }\n  Msg.error(HeadlessClientAuthenticator.class,\"Keystore not found: \" + keystorePath);\n  throw new FileNotFoundException(\"Keystore not found: \" + keystorePath);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1019,
        "startLineNumber" : 90,
        "startColumnNumber" : 3,
        "endLineNumber" : 117,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (!f.exists()) {\n  InputStream keyIn=keystorePath.getClass().getResourceAsStream(keystorePath);\n  if (keyIn != null) {\n    try {\n      sshPrivateKey=SSHKeyManager.getSSHPrivateKey(keyIn);\n      Msg.info(HeadlessClientAuthenticator.class,\"Loaded SSH key: \" + keystorePath);\n      return;\n    }\n catch (    Exception e) {\n      Msg.error(HeadlessClientAuthenticator.class,\"Failed to open keystore for SSH use: \" + keystorePath,e);\n      throw new IOException(\"Failed to parse keystore: \" + keystorePath);\n    }\n finally {\n      try {\n        keyIn.close();\n      }\n catch (      IOException e) {\n      }\n    }\n  }\n  Msg.error(HeadlessClientAuthenticator.class,\"Keystore not found: \" + keystorePath);\n  throw new FileNotFoundException(\"Keystore not found: \" + keystorePath);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 96,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1866,
        "startLineNumber" : 88,
        "startColumnNumber" : 28,
        "endLineNumber" : 137,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  File f=new File(keystorePath);\n  if (!f.exists()) {\n    InputStream keyIn=keystorePath.getClass().getResourceAsStream(keystorePath);\n    if (keyIn != null) {\n      try {\n        sshPrivateKey=SSHKeyManager.getSSHPrivateKey(keyIn);\n        Msg.info(HeadlessClientAuthenticator.class,\"Loaded SSH key: \" + keystorePath);\n        return;\n      }\n catch (      Exception e) {\n        Msg.error(HeadlessClientAuthenticator.class,\"Failed to open keystore for SSH use: \" + keystorePath,e);\n        throw new IOException(\"Failed to parse keystore: \" + keystorePath);\n      }\n finally {\n        try {\n          keyIn.close();\n        }\n catch (        IOException e) {\n        }\n      }\n    }\n    Msg.error(HeadlessClientAuthenticator.class,\"Keystore not found: \" + keystorePath);\n    throw new FileNotFoundException(\"Keystore not found: \" + keystorePath);\n  }\n  try {\n    sshPrivateKey=SSHKeyManager.getSSHPrivateKey(new File(keystorePath));\n    Msg.info(HeadlessClientAuthenticator.class,\"Loaded SSH key: \" + keystorePath);\n  }\n catch (  IOException e) {\n    try {\n      ApplicationKeyManagerFactory.setKeyStore(keystorePath,false);\n      Msg.info(HeadlessClientAuthenticator.class,\"Loaded PKI key: \" + keystorePath);\n    }\n catch (    IOException e1) {\n      Msg.error(HeadlessClientAuthenticator.class,\"Failed to open keystore for PKI use: \" + keystorePath,e1);\n      Msg.error(HeadlessClientAuthenticator.class,\"Failed to open keystore for SSH use: \" + keystorePath,e);\n      throw new IOException(\"Failed to parse keystore: \" + keystorePath);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 187,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1933,
        "startLineNumber" : 88,
        "startColumnNumber" : 2,
        "endLineNumber" : 140,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (keystorePath != null) {\n  File f=new File(keystorePath);\n  if (!f.exists()) {\n    InputStream keyIn=keystorePath.getClass().getResourceAsStream(keystorePath);\n    if (keyIn != null) {\n      try {\n        sshPrivateKey=SSHKeyManager.getSSHPrivateKey(keyIn);\n        Msg.info(HeadlessClientAuthenticator.class,\"Loaded SSH key: \" + keystorePath);\n        return;\n      }\n catch (      Exception e) {\n        Msg.error(HeadlessClientAuthenticator.class,\"Failed to open keystore for SSH use: \" + keystorePath,e);\n        throw new IOException(\"Failed to parse keystore: \" + keystorePath);\n      }\n finally {\n        try {\n          keyIn.close();\n        }\n catch (        IOException e) {\n        }\n      }\n    }\n    Msg.error(HeadlessClientAuthenticator.class,\"Keystore not found: \" + keystorePath);\n    throw new FileNotFoundException(\"Keystore not found: \" + keystorePath);\n  }\n  try {\n    sshPrivateKey=SSHKeyManager.getSSHPrivateKey(new File(keystorePath));\n    Msg.info(HeadlessClientAuthenticator.class,\"Loaded SSH key: \" + keystorePath);\n  }\n catch (  IOException e) {\n    try {\n      ApplicationKeyManagerFactory.setKeyStore(keystorePath,false);\n      Msg.info(HeadlessClientAuthenticator.class,\"Loaded PKI key: \" + keystorePath);\n    }\n catch (    IOException e1) {\n      Msg.error(HeadlessClientAuthenticator.class,\"Failed to open keystore for PKI use: \" + keystorePath,e1);\n      Msg.error(HeadlessClientAuthenticator.class,\"Failed to open keystore for SSH use: \" + keystorePath,e);\n      throw new IOException(\"Failed to parse keystore: \" + keystorePath);\n    }\n  }\n}\n else {\n  sshPrivateKey=null;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 196,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2250,
        "startLineNumber" : 76,
        "startColumnNumber" : 51,
        "endLineNumber" : 141,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  passwordPromptAlowed=allowPasswordPrompt;\n  if (username != null) {\n    userID=username;\n  }\n  sshPrivateKey=null;\n  HeadlessClientAuthenticator authenticator=new HeadlessClientAuthenticator();\n  ClientUtil.setClientAuthenticator(authenticator);\n  if (keystorePath != null) {\n    File f=new File(keystorePath);\n    if (!f.exists()) {\n      InputStream keyIn=keystorePath.getClass().getResourceAsStream(keystorePath);\n      if (keyIn != null) {\n        try {\n          sshPrivateKey=SSHKeyManager.getSSHPrivateKey(keyIn);\n          Msg.info(HeadlessClientAuthenticator.class,\"Loaded SSH key: \" + keystorePath);\n          return;\n        }\n catch (        Exception e) {\n          Msg.error(HeadlessClientAuthenticator.class,\"Failed to open keystore for SSH use: \" + keystorePath,e);\n          throw new IOException(\"Failed to parse keystore: \" + keystorePath);\n        }\n finally {\n          try {\n            keyIn.close();\n          }\n catch (          IOException e) {\n          }\n        }\n      }\n      Msg.error(HeadlessClientAuthenticator.class,\"Keystore not found: \" + keystorePath);\n      throw new FileNotFoundException(\"Keystore not found: \" + keystorePath);\n    }\n    try {\n      sshPrivateKey=SSHKeyManager.getSSHPrivateKey(new File(keystorePath));\n      Msg.info(HeadlessClientAuthenticator.class,\"Loaded SSH key: \" + keystorePath);\n    }\n catch (    IOException e) {\n      try {\n        ApplicationKeyManagerFactory.setKeyStore(keystorePath,false);\n        Msg.info(HeadlessClientAuthenticator.class,\"Loaded PKI key: \" + keystorePath);\n      }\n catch (      IOException e1) {\n        Msg.error(HeadlessClientAuthenticator.class,\"Failed to open keystore for PKI use: \" + keystorePath,e1);\n        Msg.error(HeadlessClientAuthenticator.class,\"Failed to open keystore for SSH use: \" + keystorePath,e);\n        throw new IOException(\"Failed to parse keystore: \" + keystorePath);\n      }\n    }\n  }\n else {\n    sshPrivateKey=null;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 227,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2999,
        "startLineNumber" : 64,
        "startColumnNumber" : 1,
        "endLineNumber" : 141,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Install headless client authenticator for Ghidra Server\n * @param username optional username to be used with a Ghidra Server whichallows username to be specified\n * @param keystorePath optional PKI or SSH keystore path.  May also be specifiedas resource path for SSH key.\n * @param allowPasswordPrompt if true the user may be prompted for passwordsvia the console (stdin).  Please note that the Java console will echo  the password entry to the terminal which may be undesirable.\n * @throws IOException if error occurs while opening specified keystorePath \n */\npublic static void installHeadlessClientAuthenticator(String username,String keystorePath,boolean allowPasswordPrompt) throws IOException {\n  passwordPromptAlowed=allowPasswordPrompt;\n  if (username != null) {\n    userID=username;\n  }\n  sshPrivateKey=null;\n  HeadlessClientAuthenticator authenticator=new HeadlessClientAuthenticator();\n  ClientUtil.setClientAuthenticator(authenticator);\n  if (keystorePath != null) {\n    File f=new File(keystorePath);\n    if (!f.exists()) {\n      InputStream keyIn=keystorePath.getClass().getResourceAsStream(keystorePath);\n      if (keyIn != null) {\n        try {\n          sshPrivateKey=SSHKeyManager.getSSHPrivateKey(keyIn);\n          Msg.info(HeadlessClientAuthenticator.class,\"Loaded SSH key: \" + keystorePath);\n          return;\n        }\n catch (        Exception e) {\n          Msg.error(HeadlessClientAuthenticator.class,\"Failed to open keystore for SSH use: \" + keystorePath,e);\n          throw new IOException(\"Failed to parse keystore: \" + keystorePath);\n        }\n finally {\n          try {\n            keyIn.close();\n          }\n catch (          IOException e) {\n          }\n        }\n      }\n      Msg.error(HeadlessClientAuthenticator.class,\"Keystore not found: \" + keystorePath);\n      throw new FileNotFoundException(\"Keystore not found: \" + keystorePath);\n    }\n    try {\n      sshPrivateKey=SSHKeyManager.getSSHPrivateKey(new File(keystorePath));\n      Msg.info(HeadlessClientAuthenticator.class,\"Loaded SSH key: \" + keystorePath);\n    }\n catch (    IOException e) {\n      try {\n        ApplicationKeyManagerFactory.setKeyStore(keystorePath,false);\n        Msg.info(HeadlessClientAuthenticator.class,\"Loaded PKI key: \" + keystorePath);\n      }\n catch (      IOException e1) {\n        Msg.error(HeadlessClientAuthenticator.class,\"Failed to open keystore for PKI use: \" + keystorePath,e1);\n        Msg.error(HeadlessClientAuthenticator.class,\"Failed to open keystore for SSH use: \" + keystorePath,e);\n        throw new IOException(\"Failed to parse keystore: \" + keystorePath);\n      }\n    }\n  }\n else {\n    sshPrivateKey=null;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 246,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 96,
        "startColumnNumber" : 6,
        "endLineNumber" : 96,
        "endColumnNumber" : 60
      },
      "nodeContext" : "sshPrivateKey=SSHKeyManager.getSSHPrivateKey(keyIn);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.io.InputStream"
  }, {
    "nodeContext" : "keyIn",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 108,
      "startColumnNumber" : 7,
      "endLineNumber" : 108,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 108,
        "startColumnNumber" : 7,
        "endLineNumber" : 108,
        "endColumnNumber" : 20
      },
      "nodeContext" : "keyIn.close()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 108,
        "startColumnNumber" : 7,
        "endLineNumber" : 108,
        "endColumnNumber" : 21
      },
      "nodeContext" : "keyIn.close();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 107,
        "startColumnNumber" : 10,
        "endLineNumber" : 109,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  keyIn.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 107,
        "startColumnNumber" : 6,
        "endLineNumber" : 112,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try {\n  keyIn.close();\n}\n catch (IOException e) {\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,finally]",
      "nodePosition" : {
        "charLength" : 112,
        "startLineNumber" : 106,
        "startColumnNumber" : 13,
        "endLineNumber" : 113,
        "endColumnNumber" : 6
      },
      "nodeContext" : "{\n  try {\n    keyIn.close();\n  }\n catch (  IOException e) {\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 543,
        "startLineNumber" : 95,
        "startColumnNumber" : 5,
        "endLineNumber" : 113,
        "endColumnNumber" : 6
      },
      "nodeContext" : "try {\n  sshPrivateKey=SSHKeyManager.getSSHPrivateKey(keyIn);\n  Msg.info(HeadlessClientAuthenticator.class,\"Loaded SSH key: \" + keystorePath);\n  return;\n}\n catch (Exception e) {\n  Msg.error(HeadlessClientAuthenticator.class,\"Failed to open keystore for SSH use: \" + keystorePath,e);\n  throw new IOException(\"Failed to parse keystore: \" + keystorePath);\n}\n finally {\n  try {\n    keyIn.close();\n  }\n catch (  IOException e) {\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 57,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 558,
        "startLineNumber" : 94,
        "startColumnNumber" : 23,
        "endLineNumber" : 114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    sshPrivateKey=SSHKeyManager.getSSHPrivateKey(keyIn);\n    Msg.info(HeadlessClientAuthenticator.class,\"Loaded SSH key: \" + keystorePath);\n    return;\n  }\n catch (  Exception e) {\n    Msg.error(HeadlessClientAuthenticator.class,\"Failed to open keystore for SSH use: \" + keystorePath,e);\n    throw new IOException(\"Failed to parse keystore: \" + keystorePath);\n  }\n finally {\n    try {\n      keyIn.close();\n    }\n catch (    IOException e) {\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 58,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 577,
        "startLineNumber" : 94,
        "startColumnNumber" : 4,
        "endLineNumber" : 114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (keyIn != null) {\n  try {\n    sshPrivateKey=SSHKeyManager.getSSHPrivateKey(keyIn);\n    Msg.info(HeadlessClientAuthenticator.class,\"Loaded SSH key: \" + keystorePath);\n    return;\n  }\n catch (  Exception e) {\n    Msg.error(HeadlessClientAuthenticator.class,\"Failed to open keystore for SSH use: \" + keystorePath,e);\n    throw new IOException(\"Failed to parse keystore: \" + keystorePath);\n  }\n finally {\n    try {\n      keyIn.close();\n    }\n catch (    IOException e) {\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 62,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1002,
        "startLineNumber" : 90,
        "startColumnNumber" : 20,
        "endLineNumber" : 117,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  InputStream keyIn=keystorePath.getClass().getResourceAsStream(keystorePath);\n  if (keyIn != null) {\n    try {\n      sshPrivateKey=SSHKeyManager.getSSHPrivateKey(keyIn);\n      Msg.info(HeadlessClientAuthenticator.class,\"Loaded SSH key: \" + keystorePath);\n      return;\n    }\n catch (    Exception e) {\n      Msg.error(HeadlessClientAuthenticator.class,\"Failed to open keystore for SSH use: \" + keystorePath,e);\n      throw new IOException(\"Failed to parse keystore: \" + keystorePath);\n    }\n finally {\n      try {\n        keyIn.close();\n      }\n catch (      IOException e) {\n      }\n    }\n  }\n  Msg.error(HeadlessClientAuthenticator.class,\"Keystore not found: \" + keystorePath);\n  throw new FileNotFoundException(\"Keystore not found: \" + keystorePath);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1019,
        "startLineNumber" : 90,
        "startColumnNumber" : 3,
        "endLineNumber" : 117,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (!f.exists()) {\n  InputStream keyIn=keystorePath.getClass().getResourceAsStream(keystorePath);\n  if (keyIn != null) {\n    try {\n      sshPrivateKey=SSHKeyManager.getSSHPrivateKey(keyIn);\n      Msg.info(HeadlessClientAuthenticator.class,\"Loaded SSH key: \" + keystorePath);\n      return;\n    }\n catch (    Exception e) {\n      Msg.error(HeadlessClientAuthenticator.class,\"Failed to open keystore for SSH use: \" + keystorePath,e);\n      throw new IOException(\"Failed to parse keystore: \" + keystorePath);\n    }\n finally {\n      try {\n        keyIn.close();\n      }\n catch (      IOException e) {\n      }\n    }\n  }\n  Msg.error(HeadlessClientAuthenticator.class,\"Keystore not found: \" + keystorePath);\n  throw new FileNotFoundException(\"Keystore not found: \" + keystorePath);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 96,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1866,
        "startLineNumber" : 88,
        "startColumnNumber" : 28,
        "endLineNumber" : 137,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  File f=new File(keystorePath);\n  if (!f.exists()) {\n    InputStream keyIn=keystorePath.getClass().getResourceAsStream(keystorePath);\n    if (keyIn != null) {\n      try {\n        sshPrivateKey=SSHKeyManager.getSSHPrivateKey(keyIn);\n        Msg.info(HeadlessClientAuthenticator.class,\"Loaded SSH key: \" + keystorePath);\n        return;\n      }\n catch (      Exception e) {\n        Msg.error(HeadlessClientAuthenticator.class,\"Failed to open keystore for SSH use: \" + keystorePath,e);\n        throw new IOException(\"Failed to parse keystore: \" + keystorePath);\n      }\n finally {\n        try {\n          keyIn.close();\n        }\n catch (        IOException e) {\n        }\n      }\n    }\n    Msg.error(HeadlessClientAuthenticator.class,\"Keystore not found: \" + keystorePath);\n    throw new FileNotFoundException(\"Keystore not found: \" + keystorePath);\n  }\n  try {\n    sshPrivateKey=SSHKeyManager.getSSHPrivateKey(new File(keystorePath));\n    Msg.info(HeadlessClientAuthenticator.class,\"Loaded SSH key: \" + keystorePath);\n  }\n catch (  IOException e) {\n    try {\n      ApplicationKeyManagerFactory.setKeyStore(keystorePath,false);\n      Msg.info(HeadlessClientAuthenticator.class,\"Loaded PKI key: \" + keystorePath);\n    }\n catch (    IOException e1) {\n      Msg.error(HeadlessClientAuthenticator.class,\"Failed to open keystore for PKI use: \" + keystorePath,e1);\n      Msg.error(HeadlessClientAuthenticator.class,\"Failed to open keystore for SSH use: \" + keystorePath,e);\n      throw new IOException(\"Failed to parse keystore: \" + keystorePath);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 187,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1933,
        "startLineNumber" : 88,
        "startColumnNumber" : 2,
        "endLineNumber" : 140,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (keystorePath != null) {\n  File f=new File(keystorePath);\n  if (!f.exists()) {\n    InputStream keyIn=keystorePath.getClass().getResourceAsStream(keystorePath);\n    if (keyIn != null) {\n      try {\n        sshPrivateKey=SSHKeyManager.getSSHPrivateKey(keyIn);\n        Msg.info(HeadlessClientAuthenticator.class,\"Loaded SSH key: \" + keystorePath);\n        return;\n      }\n catch (      Exception e) {\n        Msg.error(HeadlessClientAuthenticator.class,\"Failed to open keystore for SSH use: \" + keystorePath,e);\n        throw new IOException(\"Failed to parse keystore: \" + keystorePath);\n      }\n finally {\n        try {\n          keyIn.close();\n        }\n catch (        IOException e) {\n        }\n      }\n    }\n    Msg.error(HeadlessClientAuthenticator.class,\"Keystore not found: \" + keystorePath);\n    throw new FileNotFoundException(\"Keystore not found: \" + keystorePath);\n  }\n  try {\n    sshPrivateKey=SSHKeyManager.getSSHPrivateKey(new File(keystorePath));\n    Msg.info(HeadlessClientAuthenticator.class,\"Loaded SSH key: \" + keystorePath);\n  }\n catch (  IOException e) {\n    try {\n      ApplicationKeyManagerFactory.setKeyStore(keystorePath,false);\n      Msg.info(HeadlessClientAuthenticator.class,\"Loaded PKI key: \" + keystorePath);\n    }\n catch (    IOException e1) {\n      Msg.error(HeadlessClientAuthenticator.class,\"Failed to open keystore for PKI use: \" + keystorePath,e1);\n      Msg.error(HeadlessClientAuthenticator.class,\"Failed to open keystore for SSH use: \" + keystorePath,e);\n      throw new IOException(\"Failed to parse keystore: \" + keystorePath);\n    }\n  }\n}\n else {\n  sshPrivateKey=null;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 196,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2250,
        "startLineNumber" : 76,
        "startColumnNumber" : 51,
        "endLineNumber" : 141,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  passwordPromptAlowed=allowPasswordPrompt;\n  if (username != null) {\n    userID=username;\n  }\n  sshPrivateKey=null;\n  HeadlessClientAuthenticator authenticator=new HeadlessClientAuthenticator();\n  ClientUtil.setClientAuthenticator(authenticator);\n  if (keystorePath != null) {\n    File f=new File(keystorePath);\n    if (!f.exists()) {\n      InputStream keyIn=keystorePath.getClass().getResourceAsStream(keystorePath);\n      if (keyIn != null) {\n        try {\n          sshPrivateKey=SSHKeyManager.getSSHPrivateKey(keyIn);\n          Msg.info(HeadlessClientAuthenticator.class,\"Loaded SSH key: \" + keystorePath);\n          return;\n        }\n catch (        Exception e) {\n          Msg.error(HeadlessClientAuthenticator.class,\"Failed to open keystore for SSH use: \" + keystorePath,e);\n          throw new IOException(\"Failed to parse keystore: \" + keystorePath);\n        }\n finally {\n          try {\n            keyIn.close();\n          }\n catch (          IOException e) {\n          }\n        }\n      }\n      Msg.error(HeadlessClientAuthenticator.class,\"Keystore not found: \" + keystorePath);\n      throw new FileNotFoundException(\"Keystore not found: \" + keystorePath);\n    }\n    try {\n      sshPrivateKey=SSHKeyManager.getSSHPrivateKey(new File(keystorePath));\n      Msg.info(HeadlessClientAuthenticator.class,\"Loaded SSH key: \" + keystorePath);\n    }\n catch (    IOException e) {\n      try {\n        ApplicationKeyManagerFactory.setKeyStore(keystorePath,false);\n        Msg.info(HeadlessClientAuthenticator.class,\"Loaded PKI key: \" + keystorePath);\n      }\n catch (      IOException e1) {\n        Msg.error(HeadlessClientAuthenticator.class,\"Failed to open keystore for PKI use: \" + keystorePath,e1);\n        Msg.error(HeadlessClientAuthenticator.class,\"Failed to open keystore for SSH use: \" + keystorePath,e);\n        throw new IOException(\"Failed to parse keystore: \" + keystorePath);\n      }\n    }\n  }\n else {\n    sshPrivateKey=null;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 227,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2999,
        "startLineNumber" : 64,
        "startColumnNumber" : 1,
        "endLineNumber" : 141,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Install headless client authenticator for Ghidra Server\n * @param username optional username to be used with a Ghidra Server whichallows username to be specified\n * @param keystorePath optional PKI or SSH keystore path.  May also be specifiedas resource path for SSH key.\n * @param allowPasswordPrompt if true the user may be prompted for passwordsvia the console (stdin).  Please note that the Java console will echo  the password entry to the terminal which may be undesirable.\n * @throws IOException if error occurs while opening specified keystorePath \n */\npublic static void installHeadlessClientAuthenticator(String username,String keystorePath,boolean allowPasswordPrompt) throws IOException {\n  passwordPromptAlowed=allowPasswordPrompt;\n  if (username != null) {\n    userID=username;\n  }\n  sshPrivateKey=null;\n  HeadlessClientAuthenticator authenticator=new HeadlessClientAuthenticator();\n  ClientUtil.setClientAuthenticator(authenticator);\n  if (keystorePath != null) {\n    File f=new File(keystorePath);\n    if (!f.exists()) {\n      InputStream keyIn=keystorePath.getClass().getResourceAsStream(keystorePath);\n      if (keyIn != null) {\n        try {\n          sshPrivateKey=SSHKeyManager.getSSHPrivateKey(keyIn);\n          Msg.info(HeadlessClientAuthenticator.class,\"Loaded SSH key: \" + keystorePath);\n          return;\n        }\n catch (        Exception e) {\n          Msg.error(HeadlessClientAuthenticator.class,\"Failed to open keystore for SSH use: \" + keystorePath,e);\n          throw new IOException(\"Failed to parse keystore: \" + keystorePath);\n        }\n finally {\n          try {\n            keyIn.close();\n          }\n catch (          IOException e) {\n          }\n        }\n      }\n      Msg.error(HeadlessClientAuthenticator.class,\"Keystore not found: \" + keystorePath);\n      throw new FileNotFoundException(\"Keystore not found: \" + keystorePath);\n    }\n    try {\n      sshPrivateKey=SSHKeyManager.getSSHPrivateKey(new File(keystorePath));\n      Msg.info(HeadlessClientAuthenticator.class,\"Loaded SSH key: \" + keystorePath);\n    }\n catch (    IOException e) {\n      try {\n        ApplicationKeyManagerFactory.setKeyStore(keystorePath,false);\n        Msg.info(HeadlessClientAuthenticator.class,\"Loaded PKI key: \" + keystorePath);\n      }\n catch (      IOException e1) {\n        Msg.error(HeadlessClientAuthenticator.class,\"Failed to open keystore for PKI use: \" + keystorePath,e1);\n        Msg.error(HeadlessClientAuthenticator.class,\"Failed to open keystore for SSH use: \" + keystorePath,e);\n        throw new IOException(\"Failed to parse keystore: \" + keystorePath);\n      }\n    }\n  }\n else {\n    sshPrivateKey=null;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 246,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 108,
        "startColumnNumber" : 7,
        "endLineNumber" : 108,
        "endColumnNumber" : 21
      },
      "nodeContext" : "keyIn.close();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.io.InputStream"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 94,
    "startColumnNumber" : 8,
    "endLineNumber" : 94,
    "endColumnNumber" : 13
  }, {
    "charLength" : 5,
    "startLineNumber" : 96,
    "startColumnNumber" : 53,
    "endLineNumber" : 96,
    "endColumnNumber" : 58
  }, {
    "charLength" : 5,
    "startLineNumber" : 108,
    "startColumnNumber" : 7,
    "endLineNumber" : 108,
    "endColumnNumber" : 12
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  } ]
}