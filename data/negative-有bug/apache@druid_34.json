{
  "id" : 34,
  "expression" : "new CloseableIterator<InputRow>(){\n  Iterator<InputRow> rows=null;\n  @Override public boolean hasNext(){\n    if (rows == null || !rows.hasNext()) {\n      if (!intermediateRowIterator.hasNext()) {\n        return false;\n      }\n      final T row=intermediateRowIterator.next();\n      try {\n        rows=parseInputRows(row).iterator();\n      }\n catch (      IOException e) {\n        rows=new ExceptionThrowingIterator(new ParseException(e,\"Unable to parse row [%s]\",row));\n      }\ncatch (      ParseException e) {\n        rows=new ExceptionThrowingIterator(e);\n      }\n    }\n    return true;\n  }\n  @Override public InputRow next(){\n    if (!hasNext()) {\n      throw new NoSuchElementException();\n    }\n    return rows.next();\n  }\n  @Override public void close() throws IOException {\n    intermediateRowIterator.close();\n  }\n}\n",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/core/src/main/java/org/apache/druid/data/input/IntermediateRowParsingReader.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new CloseableIterator<InputRow>(){\n  Iterator<InputRow> rows=null;\n  @Override public boolean hasNext(){\n    if (rows == null || !rows.hasNext()) {\n      if (!intermediateRowIterator.hasNext()) {\n        return false;\n      }\n      final T row=intermediateRowIterator.next();\n      try {\n        rows=parseInputRows(row).iterator();\n      }\n catch (      IOException e) {\n        rows=new ExceptionThrowingIterator(new ParseException(e,\"Unable to parse row [%s]\",row));\n      }\ncatch (      ParseException e) {\n        rows=new ExceptionThrowingIterator(e);\n      }\n    }\n    return true;\n  }\n  @Override public InputRow next(){\n    if (!hasNext()) {\n      throw new NoSuchElementException();\n    }\n    return rows.next();\n  }\n  @Override public void close() throws IOException {\n    intermediateRowIterator.close();\n  }\n}\n",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 1531,
      "startLineNumber" : 46,
      "startColumnNumber" : 11,
      "endLineNumber" : 93,
      "endColumnNumber" : 5
    },
    "astNodeNumber" : 127,
    "astHeight" : 15,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1539,
        "startLineNumber" : 46,
        "startColumnNumber" : 4,
        "endLineNumber" : 93,
        "endColumnNumber" : 6
      },
      "nodeContext" : "return new CloseableIterator<InputRow>(){\n  Iterator<InputRow> rows=null;\n  @Override public boolean hasNext(){\n    if (rows == null || !rows.hasNext()) {\n      if (!intermediateRowIterator.hasNext()) {\n        return false;\n      }\n      final T row=intermediateRowIterator.next();\n      try {\n        rows=parseInputRows(row).iterator();\n      }\n catch (      IOException e) {\n        rows=new ExceptionThrowingIterator(new ParseException(e,\"Unable to parse row [%s]\",row));\n      }\ncatch (      ParseException e) {\n        rows=new ExceptionThrowingIterator(e);\n      }\n    }\n    return true;\n  }\n  @Override public InputRow next(){\n    if (!hasNext()) {\n      throw new NoSuchElementException();\n    }\n    return rows.next();\n  }\n  @Override public void close() throws IOException {\n    intermediateRowIterator.close();\n  }\n}\n;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 128,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1634,
        "startLineNumber" : 43,
        "startColumnNumber" : 2,
        "endLineNumber" : 94,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final CloseableIterator<T> intermediateRowIterator=intermediateRowIterator();\n  return new CloseableIterator<InputRow>(){\n    Iterator<InputRow> rows=null;\n    @Override public boolean hasNext(){\n      if (rows == null || !rows.hasNext()) {\n        if (!intermediateRowIterator.hasNext()) {\n          return false;\n        }\n        final T row=intermediateRowIterator.next();\n        try {\n          rows=parseInputRows(row).iterator();\n        }\n catch (        IOException e) {\n          rows=new ExceptionThrowingIterator(new ParseException(e,\"Unable to parse row [%s]\",row));\n        }\ncatch (        ParseException e) {\n          rows=new ExceptionThrowingIterator(e);\n        }\n      }\n      return true;\n    }\n    @Override public InputRow next(){\n      if (!hasNext()) {\n        throw new NoSuchElementException();\n      }\n      return rows.next();\n    }\n    @Override public void close() throws IOException {\n      intermediateRowIterator.close();\n    }\n  }\n;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 140,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1709,
        "startLineNumber" : 41,
        "startColumnNumber" : 2,
        "endLineNumber" : 94,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public CloseableIterator<InputRow> read() throws IOException {\n  final CloseableIterator<T> intermediateRowIterator=intermediateRowIterator();\n  return new CloseableIterator<InputRow>(){\n    Iterator<InputRow> rows=null;\n    @Override public boolean hasNext(){\n      if (rows == null || !rows.hasNext()) {\n        if (!intermediateRowIterator.hasNext()) {\n          return false;\n        }\n        final T row=intermediateRowIterator.next();\n        try {\n          rows=parseInputRows(row).iterator();\n        }\n catch (        IOException e) {\n          rows=new ExceptionThrowingIterator(new ParseException(e,\"Unable to parse row [%s]\",row));\n        }\ncatch (        ParseException e) {\n          rows=new ExceptionThrowingIterator(e);\n        }\n      }\n      return true;\n    }\n    @Override public InputRow next(){\n      if (!hasNext()) {\n        throw new NoSuchElementException();\n      }\n      return rows.next();\n    }\n    @Override public void close() throws IOException {\n      intermediateRowIterator.close();\n    }\n  }\n;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 152,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1539,
        "startLineNumber" : 46,
        "startColumnNumber" : 4,
        "endLineNumber" : 93,
        "endColumnNumber" : 6
      },
      "nodeContext" : "return new CloseableIterator<InputRow>(){\n  Iterator<InputRow> rows=null;\n  @Override public boolean hasNext(){\n    if (rows == null || !rows.hasNext()) {\n      if (!intermediateRowIterator.hasNext()) {\n        return false;\n      }\n      final T row=intermediateRowIterator.next();\n      try {\n        rows=parseInputRows(row).iterator();\n      }\n catch (      IOException e) {\n        rows=new ExceptionThrowingIterator(new ParseException(e,\"Unable to parse row [%s]\",row));\n      }\ncatch (      ParseException e) {\n        rows=new ExceptionThrowingIterator(e);\n      }\n    }\n    return true;\n  }\n  @Override public InputRow next(){\n    if (!hasNext()) {\n      throw new NoSuchElementException();\n    }\n    return rows.next();\n  }\n  @Override public void close() throws IOException {\n    intermediateRowIterator.close();\n  }\n}\n;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 128,
      "astHeight" : 16
    },
    "tokenLength" : 50,
    "type" : ""
  } ],
  "positionList" : [ {
    "charLength" : 1531,
    "startLineNumber" : 46,
    "startColumnNumber" : 11,
    "endLineNumber" : 93,
    "endColumnNumber" : 5
  } ],
  "layoutRelationDataList" : [ ]
}