{
  "id" : 249,
  "expression" : "BorderLayout.CENTER",
  "projectName" : "java-decompiler@jd-gui",
  "commitID" : "fbc5b14d66b37b88bf1dc18386b530e874550240",
  "filePath" : "/services/src/main/java/org/jd/gui/view/component/AbstractTextPage.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "BorderLayout.CENTER",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 138,
      "startColumnNumber" : 24,
      "endLineNumber" : 138,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 138,
        "startColumnNumber" : 8,
        "endLineNumber" : 138,
        "endColumnNumber" : 44
      },
      "nodeContext" : "add(scrollPane,BorderLayout.CENTER)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 138,
        "startColumnNumber" : 8,
        "endLineNumber" : 138,
        "endColumnNumber" : 45
      },
      "nodeContext" : "add(scrollPane,BorderLayout.CENTER);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4019,
        "startLineNumber" : 51,
        "startColumnNumber" : 30,
        "endLineNumber" : 140,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  super(new BorderLayout());\n  textArea=newSyntaxTextArea();\n  textArea.setSyntaxEditingStyle(getSyntaxStyle());\n  textArea.setCodeFoldingEnabled(true);\n  textArea.setAntiAliasingEnabled(true);\n  textArea.setCaretPosition(0);\n  textArea.setEditable(false);\n  textArea.setDropTarget(null);\n  textArea.setPopupMenu(null);\n  textArea.addMouseListener(new MouseAdapter(){\n    public void mouseClicked(    MouseEvent e){\n      if (e.getClickCount() == 2) {\n        textArea.setMarkAllHighlightColor(DOUBLE_CLICK_HIGHLIGHT_COLOR);\n        SearchEngine.markAll(textArea,newSearchContext(textArea.getSelectedText(),true,true,true,false));\n      }\n    }\n  }\n);\n  KeyStroke ctrlA=KeyStroke.getKeyStroke(KeyEvent.VK_A,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask());\n  KeyStroke ctrlC=KeyStroke.getKeyStroke(KeyEvent.VK_C,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask());\n  KeyStroke ctrlV=KeyStroke.getKeyStroke(KeyEvent.VK_V,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask());\n  InputMap inputMap=textArea.getInputMap();\n  inputMap.put(ctrlA,\"none\");\n  inputMap.put(ctrlC,\"none\");\n  inputMap.put(ctrlV,\"none\");\n  try {\n    Theme theme=Theme.load(getClass().getClassLoader().getResourceAsStream(\"rsyntaxtextarea/themes/eclipse.xml\"));\n    theme.apply(textArea);\n  }\n catch (  IOException e) {\n    assert ExceptionUtil.printStackTrace(e);\n  }\n  scrollPane=new RTextScrollPane(textArea);\n  scrollPane.setFoldIndicatorEnabled(true);\n  scrollPane.setFont(textArea.getFont());\n  final MouseWheelListener[] mouseWheelListeners=scrollPane.getMouseWheelListeners();\n  for (  MouseWheelListener listener : mouseWheelListeners) {\n    scrollPane.removeMouseWheelListener(listener);\n  }\n  scrollPane.addMouseWheelListener(e -> {\n    if ((e.getModifiers() & (Event.META_MASK | Event.CTRL_MASK)) != 0) {\n      int x=e.getX() + scrollPane.getX() - textArea.getX();\n      int y=e.getY() + scrollPane.getY() - textArea.getY();\n      int offset=textArea.viewToModel(new Point(x,y));\n      if (e.getWheelRotation() > 0) {\n        INCREASE_FONT_SIZE_ACTION.actionPerformedImpl(null,textArea);\n      }\n else {\n        DECREASE_FONT_SIZE_ACTION.actionPerformedImpl(null,textArea);\n      }\n      if (preferences != null) {\n        preferences.put(FONT_SIZE_KEY,String.valueOf(textArea.getFont().getSize()));\n      }\n      try {\n        Rectangle newRectangle=textArea.modelToView(offset);\n        int newY=newRectangle.y + (newRectangle.height >> 1);\n        Point viewPosition=scrollPane.getViewport().getViewPosition();\n        viewPosition.y=Math.max(viewPosition.y + newY - y,0);\n        scrollPane.getViewport().setViewPosition(viewPosition);\n      }\n catch (      BadLocationException ee) {\n        assert ExceptionUtil.printStackTrace(ee);\n      }\n    }\n else {\n      for (      MouseWheelListener listener : mouseWheelListeners) {\n        listener.mouseWheelMoved(e);\n      }\n    }\n  }\n);\n  Gutter gutter=scrollPane.getGutter();\n  gutter.setFoldIcons(COLLAPSED_ICON,EXPANDED_ICON);\n  gutter.setFoldIndicatorForeground(gutter.getBorderColor());\n  add(scrollPane,BorderLayout.CENTER);\n  add(new RoundMarkErrorStrip(textArea),BorderLayout.LINE_END);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 463,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4045,
        "startLineNumber" : 51,
        "startColumnNumber" : 4,
        "endLineNumber" : 140,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public AbstractTextPage(){\n  super(new BorderLayout());\n  textArea=newSyntaxTextArea();\n  textArea.setSyntaxEditingStyle(getSyntaxStyle());\n  textArea.setCodeFoldingEnabled(true);\n  textArea.setAntiAliasingEnabled(true);\n  textArea.setCaretPosition(0);\n  textArea.setEditable(false);\n  textArea.setDropTarget(null);\n  textArea.setPopupMenu(null);\n  textArea.addMouseListener(new MouseAdapter(){\n    public void mouseClicked(    MouseEvent e){\n      if (e.getClickCount() == 2) {\n        textArea.setMarkAllHighlightColor(DOUBLE_CLICK_HIGHLIGHT_COLOR);\n        SearchEngine.markAll(textArea,newSearchContext(textArea.getSelectedText(),true,true,true,false));\n      }\n    }\n  }\n);\n  KeyStroke ctrlA=KeyStroke.getKeyStroke(KeyEvent.VK_A,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask());\n  KeyStroke ctrlC=KeyStroke.getKeyStroke(KeyEvent.VK_C,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask());\n  KeyStroke ctrlV=KeyStroke.getKeyStroke(KeyEvent.VK_V,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask());\n  InputMap inputMap=textArea.getInputMap();\n  inputMap.put(ctrlA,\"none\");\n  inputMap.put(ctrlC,\"none\");\n  inputMap.put(ctrlV,\"none\");\n  try {\n    Theme theme=Theme.load(getClass().getClassLoader().getResourceAsStream(\"rsyntaxtextarea/themes/eclipse.xml\"));\n    theme.apply(textArea);\n  }\n catch (  IOException e) {\n    assert ExceptionUtil.printStackTrace(e);\n  }\n  scrollPane=new RTextScrollPane(textArea);\n  scrollPane.setFoldIndicatorEnabled(true);\n  scrollPane.setFont(textArea.getFont());\n  final MouseWheelListener[] mouseWheelListeners=scrollPane.getMouseWheelListeners();\n  for (  MouseWheelListener listener : mouseWheelListeners) {\n    scrollPane.removeMouseWheelListener(listener);\n  }\n  scrollPane.addMouseWheelListener(e -> {\n    if ((e.getModifiers() & (Event.META_MASK | Event.CTRL_MASK)) != 0) {\n      int x=e.getX() + scrollPane.getX() - textArea.getX();\n      int y=e.getY() + scrollPane.getY() - textArea.getY();\n      int offset=textArea.viewToModel(new Point(x,y));\n      if (e.getWheelRotation() > 0) {\n        INCREASE_FONT_SIZE_ACTION.actionPerformedImpl(null,textArea);\n      }\n else {\n        DECREASE_FONT_SIZE_ACTION.actionPerformedImpl(null,textArea);\n      }\n      if (preferences != null) {\n        preferences.put(FONT_SIZE_KEY,String.valueOf(textArea.getFont().getSize()));\n      }\n      try {\n        Rectangle newRectangle=textArea.modelToView(offset);\n        int newY=newRectangle.y + (newRectangle.height >> 1);\n        Point viewPosition=scrollPane.getViewport().getViewPosition();\n        viewPosition.y=Math.max(viewPosition.y + newY - y,0);\n        scrollPane.getViewport().setViewPosition(viewPosition);\n      }\n catch (      BadLocationException ee) {\n        assert ExceptionUtil.printStackTrace(ee);\n      }\n    }\n else {\n      for (      MouseWheelListener listener : mouseWheelListeners) {\n        listener.mouseWheelMoved(e);\n      }\n    }\n  }\n);\n  Gutter gutter=scrollPane.getGutter();\n  gutter.setFoldIcons(COLLAPSED_ICON,EXPANDED_ICON);\n  gutter.setFoldIndicatorForeground(gutter.getBorderColor());\n  add(scrollPane,BorderLayout.CENTER);\n  add(new RoundMarkErrorStrip(textArea),BorderLayout.LINE_END);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 466,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 138,
        "startColumnNumber" : 8,
        "endLineNumber" : 138,
        "endColumnNumber" : 45
      },
      "nodeContext" : "add(scrollPane,BorderLayout.CENTER);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 138,
    "startColumnNumber" : 24,
    "endLineNumber" : 138,
    "endColumnNumber" : 43
  } ],
  "layoutRelationDataList" : [ ]
}