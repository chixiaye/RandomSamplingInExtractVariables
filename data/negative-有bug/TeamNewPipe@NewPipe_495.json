{
  "id" : 495,
  "expression" : "mConn.getResponseCode() != 206",
  "projectName" : "TeamNewPipe@NewPipe",
  "commitID" : "d7574973e97fa7a3a21aa59967311f6091941830",
  "filePath" : "/app/src/main/java/us/shandian/giga/get/DownloadRunnable.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "mConn.getResponseCode() != 206",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 103,
      "startColumnNumber" : 20,
      "endLineNumber" : 103,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 320,
        "startLineNumber" : 103,
        "startColumnNumber" : 16,
        "endLineNumber" : 109,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (mConn.getResponseCode() != 206) {\n  if (DEBUG) {\n    Log.e(TAG,mId + \":Unsupported \" + mConn.getResponseCode());\n  }\n  mMission.notifyError(new DownloadMission.HttpError(mConn.getResponseCode()));\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 34,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1997,
        "startLineNumber" : 82,
        "startColumnNumber" : 16,
        "endLineNumber" : 130,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  mConn=mMission.openConnection(false,start,end);\n  mMission.establishConnection(mId,mConn);\n  if (mConn.getResponseCode() == 416) {\n    if (block.done > 0) {\n      mMission.notifyProgress(-block.done);\n      block.done=0;\n      retry=true;\n      mConn.disconnect();\n      continue;\n    }\n    throw new DownloadMission.HttpError(416);\n  }\n  retry=false;\n  if (mConn.getResponseCode() != 206) {\n    if (DEBUG) {\n      Log.e(TAG,mId + \":Unsupported \" + mConn.getResponseCode());\n    }\n    mMission.notifyError(new DownloadMission.HttpError(mConn.getResponseCode()));\n    break;\n  }\n  f.seek(mMission.offsets[mMission.current] + start);\n  try (InputStream is=mConn.getInputStream()){\n    byte[] buf=new byte[DownloadMission.BUFFER_SIZE];\n    int len;\n    while (start <= end && mMission.running && (len=is.read(buf,0,buf.length)) != -1) {\n      f.write(buf,0,len);\n      start+=len;\n      block.done+=len;\n      mMission.notifyProgress(len);\n    }\n  }\n   if (DEBUG && mMission.running) {\n    Log.d(TAG,mId + \":position \" + block.position+ \" stopped \"+ start+ \"/\"+ end);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2852,
        "startLineNumber" : 82,
        "startColumnNumber" : 12,
        "endLineNumber" : 152,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  mConn=mMission.openConnection(false,start,end);\n  mMission.establishConnection(mId,mConn);\n  if (mConn.getResponseCode() == 416) {\n    if (block.done > 0) {\n      mMission.notifyProgress(-block.done);\n      block.done=0;\n      retry=true;\n      mConn.disconnect();\n      continue;\n    }\n    throw new DownloadMission.HttpError(416);\n  }\n  retry=false;\n  if (mConn.getResponseCode() != 206) {\n    if (DEBUG) {\n      Log.e(TAG,mId + \":Unsupported \" + mConn.getResponseCode());\n    }\n    mMission.notifyError(new DownloadMission.HttpError(mConn.getResponseCode()));\n    break;\n  }\n  f.seek(mMission.offsets[mMission.current] + start);\n  try (InputStream is=mConn.getInputStream()){\n    byte[] buf=new byte[DownloadMission.BUFFER_SIZE];\n    int len;\n    while (start <= end && mMission.running && (len=is.read(buf,0,buf.length)) != -1) {\n      f.write(buf,0,len);\n      start+=len;\n      block.done+=len;\n      mMission.notifyProgress(len);\n    }\n  }\n   if (DEBUG && mMission.running) {\n    Log.d(TAG,mId + \":position \" + block.position+ \" stopped \"+ start+ \"/\"+ end);\n  }\n}\n catch (Exception e) {\n  if (!mMission.running || e instanceof ClosedByInterruptException)   break;\n  if (e instanceof HttpError && ((HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    f.close();\n    if (mId == 1) {\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    }\n    return;\n  }\n  if (retryCount++ >= mMission.maxRetry) {\n    mMission.notifyError(e);\n    break;\n  }\n  retry=true;\n}\n finally {\n  if (!retry)   releaseBlock(block,end - start);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 284,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 3692,
        "startLineNumber" : 56,
        "startColumnNumber" : 86,
        "endLineNumber" : 153,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (!retry) {\n    block=mMission.acquireBlock();\n  }\n  if (block == null) {\n    if (DEBUG)     Log.d(TAG,mId + \":no more blocks left, exiting\");\n    break;\n  }\n  if (DEBUG) {\n    if (retry)     Log.d(TAG,mId + \":retry block at position=\" + block.position+ \" from the start\");\n else     Log.d(TAG,mId + \":acquired block at position=\" + block.position+ \" done=\"+ block.done);\n  }\n  long start=(long)block.position * DownloadMission.BLOCK_SIZE;\n  long end=start + DownloadMission.BLOCK_SIZE - 1;\n  start+=block.done;\n  if (end >= mMission.length) {\n    end=mMission.length - 1;\n  }\n  try {\n    mConn=mMission.openConnection(false,start,end);\n    mMission.establishConnection(mId,mConn);\n    if (mConn.getResponseCode() == 416) {\n      if (block.done > 0) {\n        mMission.notifyProgress(-block.done);\n        block.done=0;\n        retry=true;\n        mConn.disconnect();\n        continue;\n      }\n      throw new DownloadMission.HttpError(416);\n    }\n    retry=false;\n    if (mConn.getResponseCode() != 206) {\n      if (DEBUG) {\n        Log.e(TAG,mId + \":Unsupported \" + mConn.getResponseCode());\n      }\n      mMission.notifyError(new DownloadMission.HttpError(mConn.getResponseCode()));\n      break;\n    }\n    f.seek(mMission.offsets[mMission.current] + start);\n    try (InputStream is=mConn.getInputStream()){\n      byte[] buf=new byte[DownloadMission.BUFFER_SIZE];\n      int len;\n      while (start <= end && mMission.running && (len=is.read(buf,0,buf.length)) != -1) {\n        f.write(buf,0,len);\n        start+=len;\n        block.done+=len;\n        mMission.notifyProgress(len);\n      }\n    }\n     if (DEBUG && mMission.running) {\n      Log.d(TAG,mId + \":position \" + block.position+ \" stopped \"+ start+ \"/\"+ end);\n    }\n  }\n catch (  Exception e) {\n    if (!mMission.running || e instanceof ClosedByInterruptException)     break;\n    if (e instanceof HttpError && ((HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      f.close();\n      if (mId == 1) {\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      }\n      return;\n    }\n    if (retryCount++ >= mMission.maxRetry) {\n      mMission.notifyError(e);\n      break;\n    }\n    retry=true;\n  }\n finally {\n    if (!retry)     releaseBlock(block,end - start);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 388,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3770,
        "startLineNumber" : 56,
        "startColumnNumber" : 8,
        "endLineNumber" : 153,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (mMission.running && mMission.errCode == DownloadMission.ERROR_NOTHING) {\n  if (!retry) {\n    block=mMission.acquireBlock();\n  }\n  if (block == null) {\n    if (DEBUG)     Log.d(TAG,mId + \":no more blocks left, exiting\");\n    break;\n  }\n  if (DEBUG) {\n    if (retry)     Log.d(TAG,mId + \":retry block at position=\" + block.position+ \" from the start\");\n else     Log.d(TAG,mId + \":acquired block at position=\" + block.position+ \" done=\"+ block.done);\n  }\n  long start=(long)block.position * DownloadMission.BLOCK_SIZE;\n  long end=start + DownloadMission.BLOCK_SIZE - 1;\n  start+=block.done;\n  if (end >= mMission.length) {\n    end=mMission.length - 1;\n  }\n  try {\n    mConn=mMission.openConnection(false,start,end);\n    mMission.establishConnection(mId,mConn);\n    if (mConn.getResponseCode() == 416) {\n      if (block.done > 0) {\n        mMission.notifyProgress(-block.done);\n        block.done=0;\n        retry=true;\n        mConn.disconnect();\n        continue;\n      }\n      throw new DownloadMission.HttpError(416);\n    }\n    retry=false;\n    if (mConn.getResponseCode() != 206) {\n      if (DEBUG) {\n        Log.e(TAG,mId + \":Unsupported \" + mConn.getResponseCode());\n      }\n      mMission.notifyError(new DownloadMission.HttpError(mConn.getResponseCode()));\n      break;\n    }\n    f.seek(mMission.offsets[mMission.current] + start);\n    try (InputStream is=mConn.getInputStream()){\n      byte[] buf=new byte[DownloadMission.BUFFER_SIZE];\n      int len;\n      while (start <= end && mMission.running && (len=is.read(buf,0,buf.length)) != -1) {\n        f.write(buf,0,len);\n        start+=len;\n        block.done+=len;\n        mMission.notifyProgress(len);\n      }\n    }\n     if (DEBUG && mMission.running) {\n      Log.d(TAG,mId + \":position \" + block.position+ \" stopped \"+ start+ \"/\"+ end);\n    }\n  }\n catch (  Exception e) {\n    if (!mMission.running || e instanceof ClosedByInterruptException)     break;\n    if (e instanceof HttpError && ((HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      f.close();\n      if (mId == 1) {\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      }\n      return;\n    }\n    if (retryCount++ >= mMission.maxRetry) {\n      mMission.notifyError(e);\n      break;\n    }\n    retry=true;\n  }\n finally {\n    if (!retry)     releaseBlock(block,end - start);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 400,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4571,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 171,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean retry=false;\n  Block block=null;\n  int retryCount=0;\n  SharpStream f;\n  try {\n    f=mMission.storage.getStream();\n  }\n catch (  IOException e) {\n    mMission.notifyError(e);\n    return;\n  }\n  while (mMission.running && mMission.errCode == DownloadMission.ERROR_NOTHING) {\n    if (!retry) {\n      block=mMission.acquireBlock();\n    }\n    if (block == null) {\n      if (DEBUG)       Log.d(TAG,mId + \":no more blocks left, exiting\");\n      break;\n    }\n    if (DEBUG) {\n      if (retry)       Log.d(TAG,mId + \":retry block at position=\" + block.position+ \" from the start\");\n else       Log.d(TAG,mId + \":acquired block at position=\" + block.position+ \" done=\"+ block.done);\n    }\n    long start=(long)block.position * DownloadMission.BLOCK_SIZE;\n    long end=start + DownloadMission.BLOCK_SIZE - 1;\n    start+=block.done;\n    if (end >= mMission.length) {\n      end=mMission.length - 1;\n    }\n    try {\n      mConn=mMission.openConnection(false,start,end);\n      mMission.establishConnection(mId,mConn);\n      if (mConn.getResponseCode() == 416) {\n        if (block.done > 0) {\n          mMission.notifyProgress(-block.done);\n          block.done=0;\n          retry=true;\n          mConn.disconnect();\n          continue;\n        }\n        throw new DownloadMission.HttpError(416);\n      }\n      retry=false;\n      if (mConn.getResponseCode() != 206) {\n        if (DEBUG) {\n          Log.e(TAG,mId + \":Unsupported \" + mConn.getResponseCode());\n        }\n        mMission.notifyError(new DownloadMission.HttpError(mConn.getResponseCode()));\n        break;\n      }\n      f.seek(mMission.offsets[mMission.current] + start);\n      try (InputStream is=mConn.getInputStream()){\n        byte[] buf=new byte[DownloadMission.BUFFER_SIZE];\n        int len;\n        while (start <= end && mMission.running && (len=is.read(buf,0,buf.length)) != -1) {\n          f.write(buf,0,len);\n          start+=len;\n          block.done+=len;\n          mMission.notifyProgress(len);\n        }\n      }\n       if (DEBUG && mMission.running) {\n        Log.d(TAG,mId + \":position \" + block.position+ \" stopped \"+ start+ \"/\"+ end);\n      }\n    }\n catch (    Exception e) {\n      if (!mMission.running || e instanceof ClosedByInterruptException)       break;\n      if (e instanceof HttpError && ((HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        f.close();\n        if (mId == 1) {\n          mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        }\n        return;\n      }\n      if (retryCount++ >= mMission.maxRetry) {\n        mMission.notifyError(e);\n        break;\n      }\n      retry=true;\n    }\n finally {\n      if (!retry)       releaseBlock(block,end - start);\n    }\n  }\n  f.close();\n  if (DEBUG) {\n    Log.d(TAG,\"thread \" + mId + \" exited from main download loop\");\n  }\n  if (mMission.errCode == DownloadMission.ERROR_NOTHING && mMission.running) {\n    if (DEBUG) {\n      Log.d(TAG,\"no error has happened, notifying\");\n    }\n    mMission.notifyFinished();\n  }\n  if (DEBUG && !mMission.running) {\n    Log.d(TAG,\"The mission has been paused. Passing.\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 500,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4603,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 171,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  boolean retry=false;\n  Block block=null;\n  int retryCount=0;\n  SharpStream f;\n  try {\n    f=mMission.storage.getStream();\n  }\n catch (  IOException e) {\n    mMission.notifyError(e);\n    return;\n  }\n  while (mMission.running && mMission.errCode == DownloadMission.ERROR_NOTHING) {\n    if (!retry) {\n      block=mMission.acquireBlock();\n    }\n    if (block == null) {\n      if (DEBUG)       Log.d(TAG,mId + \":no more blocks left, exiting\");\n      break;\n    }\n    if (DEBUG) {\n      if (retry)       Log.d(TAG,mId + \":retry block at position=\" + block.position+ \" from the start\");\n else       Log.d(TAG,mId + \":acquired block at position=\" + block.position+ \" done=\"+ block.done);\n    }\n    long start=(long)block.position * DownloadMission.BLOCK_SIZE;\n    long end=start + DownloadMission.BLOCK_SIZE - 1;\n    start+=block.done;\n    if (end >= mMission.length) {\n      end=mMission.length - 1;\n    }\n    try {\n      mConn=mMission.openConnection(false,start,end);\n      mMission.establishConnection(mId,mConn);\n      if (mConn.getResponseCode() == 416) {\n        if (block.done > 0) {\n          mMission.notifyProgress(-block.done);\n          block.done=0;\n          retry=true;\n          mConn.disconnect();\n          continue;\n        }\n        throw new DownloadMission.HttpError(416);\n      }\n      retry=false;\n      if (mConn.getResponseCode() != 206) {\n        if (DEBUG) {\n          Log.e(TAG,mId + \":Unsupported \" + mConn.getResponseCode());\n        }\n        mMission.notifyError(new DownloadMission.HttpError(mConn.getResponseCode()));\n        break;\n      }\n      f.seek(mMission.offsets[mMission.current] + start);\n      try (InputStream is=mConn.getInputStream()){\n        byte[] buf=new byte[DownloadMission.BUFFER_SIZE];\n        int len;\n        while (start <= end && mMission.running && (len=is.read(buf,0,buf.length)) != -1) {\n          f.write(buf,0,len);\n          start+=len;\n          block.done+=len;\n          mMission.notifyProgress(len);\n        }\n      }\n       if (DEBUG && mMission.running) {\n        Log.d(TAG,mId + \":position \" + block.position+ \" stopped \"+ start+ \"/\"+ end);\n      }\n    }\n catch (    Exception e) {\n      if (!mMission.running || e instanceof ClosedByInterruptException)       break;\n      if (e instanceof HttpError && ((HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        f.close();\n        if (mId == 1) {\n          mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        }\n        return;\n      }\n      if (retryCount++ >= mMission.maxRetry) {\n        mMission.notifyError(e);\n        break;\n      }\n      retry=true;\n    }\n finally {\n      if (!retry)       releaseBlock(block,end - start);\n    }\n  }\n  f.close();\n  if (DEBUG) {\n    Log.d(TAG,\"thread \" + mId + \" exited from main download loop\");\n  }\n  if (mMission.errCode == DownloadMission.ERROR_NOTHING && mMission.running) {\n    if (DEBUG) {\n      Log.d(TAG,\"no error has happened, notifying\");\n    }\n    mMission.notifyFinished();\n  }\n  if (DEBUG && !mMission.running) {\n    Log.d(TAG,\"The mission has been paused. Passing.\");\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 506,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 320,
        "startLineNumber" : 103,
        "startColumnNumber" : 16,
        "endLineNumber" : 109,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (mConn.getResponseCode() != 206) {\n  if (DEBUG) {\n    Log.e(TAG,mId + \":Unsupported \" + mConn.getResponseCode());\n  }\n  mMission.notifyError(new DownloadMission.HttpError(mConn.getResponseCode()));\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 34,
      "astHeight" : 9
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 30,
    "startLineNumber" : 103,
    "startColumnNumber" : 20,
    "endLineNumber" : 103,
    "endColumnNumber" : 50
  } ],
  "layoutRelationDataList" : [ ]
}