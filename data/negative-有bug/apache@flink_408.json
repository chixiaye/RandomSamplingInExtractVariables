{
  "id" : 408,
  "expression" : "10000",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-table/flink-table-runtime/src/test/java/org/apache/flink/table/runtime/operators/window/WindowOperatorTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "10000",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 1578,
      "startColumnNumber" : 38,
      "endLineNumber" : 1578,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 1578,
        "startColumnNumber" : 8,
        "endLineNumber" : 1578,
        "endColumnNumber" : 44
      },
      "nodeContext" : "testHarness.setProcessingTime(10000)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 1578,
        "startColumnNumber" : 8,
        "endLineNumber" : 1578,
        "endColumnNumber" : 45
      },
      "nodeContext" : "testHarness.setProcessingTime(10000);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3306,
        "startLineNumber" : 1521,
        "startColumnNumber" : 68,
        "endLineNumber" : 1605,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  closeCalled.set(0);\n  WindowOperator operator=WindowOperatorBuilder.builder().withInputFields(inputFieldTypes).withShiftTimezone(shiftTimeZone).session(Duration.ofSeconds(3)).withProcessingTime().aggregateAndBuild(getTimeWindowAggFunction(),equaliser,accTypes,aggResultTypes,windowTypes);\n  OneInputStreamOperatorTestHarness<RowData,RowData> testHarness=createTestHarness(operator);\n  RowDataHarnessAssertor assertor=new RowDataHarnessAssertor(outputType.toRowFieldTypes(),new GenericRowRecordSortComparator(0,VarCharType.STRING_TYPE));\n  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();\n  testHarness.open();\n  testHarness.setProcessingTime(3);\n  testHarness.processElement(insertRecord(\"key2\",1,1L));\n  testHarness.setProcessingTime(1000);\n  testHarness.processElement(insertRecord(\"key2\",1,1002L));\n  testHarness.setProcessingTime(5000);\n  expectedOutput.addAll(doubleRecord(isTableAggregate,insertRecord(\"key2\",2L,2L,localMills(3L),localMills(4000L),localMills(3999L))));\n  assertor.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput());\n  testHarness.processElement(insertRecord(\"key2\",1,5000L));\n  testHarness.processElement(insertRecord(\"key2\",1,5000L));\n  testHarness.processElement(insertRecord(\"key1\",1,5000L));\n  testHarness.processElement(insertRecord(\"key1\",1,5000L));\n  testHarness.processElement(insertRecord(\"key1\",1,5000L));\n  testHarness.setProcessingTime(10000);\n  expectedOutput.addAll(doubleRecord(isTableAggregate,insertRecord(\"key2\",2L,2L,localMills(5000L),localMills(8000L),localMills(7999L))));\n  expectedOutput.addAll(doubleRecord(isTableAggregate,insertRecord(\"key1\",3L,3L,localMills(5000L),localMills(8000L),localMills(7999L))));\n  assertor.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput());\n  testHarness.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 251,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3380,
        "startLineNumber" : 1520,
        "startColumnNumber" : 4,
        "endLineNumber" : 1605,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testProcessingTimeSessionWindows() throws Throwable {\n  closeCalled.set(0);\n  WindowOperator operator=WindowOperatorBuilder.builder().withInputFields(inputFieldTypes).withShiftTimezone(shiftTimeZone).session(Duration.ofSeconds(3)).withProcessingTime().aggregateAndBuild(getTimeWindowAggFunction(),equaliser,accTypes,aggResultTypes,windowTypes);\n  OneInputStreamOperatorTestHarness<RowData,RowData> testHarness=createTestHarness(operator);\n  RowDataHarnessAssertor assertor=new RowDataHarnessAssertor(outputType.toRowFieldTypes(),new GenericRowRecordSortComparator(0,VarCharType.STRING_TYPE));\n  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();\n  testHarness.open();\n  testHarness.setProcessingTime(3);\n  testHarness.processElement(insertRecord(\"key2\",1,1L));\n  testHarness.setProcessingTime(1000);\n  testHarness.processElement(insertRecord(\"key2\",1,1002L));\n  testHarness.setProcessingTime(5000);\n  expectedOutput.addAll(doubleRecord(isTableAggregate,insertRecord(\"key2\",2L,2L,localMills(3L),localMills(4000L),localMills(3999L))));\n  assertor.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput());\n  testHarness.processElement(insertRecord(\"key2\",1,5000L));\n  testHarness.processElement(insertRecord(\"key2\",1,5000L));\n  testHarness.processElement(insertRecord(\"key1\",1,5000L));\n  testHarness.processElement(insertRecord(\"key1\",1,5000L));\n  testHarness.processElement(insertRecord(\"key1\",1,5000L));\n  testHarness.setProcessingTime(10000);\n  expectedOutput.addAll(doubleRecord(isTableAggregate,insertRecord(\"key2\",2L,2L,localMills(5000L),localMills(8000L),localMills(7999L))));\n  expectedOutput.addAll(doubleRecord(isTableAggregate,insertRecord(\"key1\",3L,3L,localMills(5000L),localMills(8000L),localMills(7999L))));\n  assertor.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput());\n  testHarness.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 259,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 1578,
        "startColumnNumber" : 8,
        "endLineNumber" : 1578,
        "endColumnNumber" : 45
      },
      "nodeContext" : "testHarness.setProcessingTime(10000);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 1578,
    "startColumnNumber" : 38,
    "endLineNumber" : 1578,
    "endColumnNumber" : 43
  } ],
  "layoutRelationDataList" : [ ]
}