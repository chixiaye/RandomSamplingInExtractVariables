{
  "id" : 198,
  "expression" : "bytesAllocated < capacity - size",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/processing/src/main/java/org/apache/druid/frame/allocation/HeapMemoryAllocator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "bytesAllocated < capacity - size",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 32,
      "startLineNumber" : 56,
      "startColumnNumber" : 8,
      "endLineNumber" : 56,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 792,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 85,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (bytesAllocated < capacity - size) {\n  bytesAllocated+=size;\n  return Optional.of(new ResourceHolder<WritableMemory>(){\n    private WritableMemory memory=WritableMemory.writableWrap(ByteBuffer.allocate(Ints.checkedCast(size)).order(ByteOrder.LITTLE_ENDIAN));\n    @Override public WritableMemory get(){\n      if (memory == null) {\n        throw new ISE(\"Already closed\");\n      }\n      return memory;\n    }\n    @Override public void close(){\n      memory=null;\n      bytesAllocated-=size;\n    }\n  }\n);\n}\n else {\n  return Optional.empty();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 83,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 804,
        "startLineNumber" : 55,
        "startColumnNumber" : 2,
        "endLineNumber" : 86,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (bytesAllocated < capacity - size) {\n    bytesAllocated+=size;\n    return Optional.of(new ResourceHolder<WritableMemory>(){\n      private WritableMemory memory=WritableMemory.writableWrap(ByteBuffer.allocate(Ints.checkedCast(size)).order(ByteOrder.LITTLE_ENDIAN));\n      @Override public WritableMemory get(){\n        if (memory == null) {\n          throw new ISE(\"Already closed\");\n        }\n        return memory;\n      }\n      @Override public void close(){\n        memory=null;\n        bytesAllocated-=size;\n      }\n    }\n);\n  }\n else {\n    return Optional.empty();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 84,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 894,
        "startLineNumber" : 53,
        "startColumnNumber" : 2,
        "endLineNumber" : 86,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Optional<ResourceHolder<WritableMemory>> allocate(final long size){\n  if (bytesAllocated < capacity - size) {\n    bytesAllocated+=size;\n    return Optional.of(new ResourceHolder<WritableMemory>(){\n      private WritableMemory memory=WritableMemory.writableWrap(ByteBuffer.allocate(Ints.checkedCast(size)).order(ByteOrder.LITTLE_ENDIAN));\n      @Override public WritableMemory get(){\n        if (memory == null) {\n          throw new ISE(\"Already closed\");\n        }\n        return memory;\n      }\n      @Override public void close(){\n        memory=null;\n        bytesAllocated-=size;\n      }\n    }\n);\n  }\n else {\n    return Optional.empty();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 101,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 792,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 85,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (bytesAllocated < capacity - size) {\n  bytesAllocated+=size;\n  return Optional.of(new ResourceHolder<WritableMemory>(){\n    private WritableMemory memory=WritableMemory.writableWrap(ByteBuffer.allocate(Ints.checkedCast(size)).order(ByteOrder.LITTLE_ENDIAN));\n    @Override public WritableMemory get(){\n      if (memory == null) {\n        throw new ISE(\"Already closed\");\n      }\n      return memory;\n    }\n    @Override public void close(){\n      memory=null;\n      bytesAllocated-=size;\n    }\n  }\n);\n}\n else {\n  return Optional.empty();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 83,
      "astHeight" : 14
    },
    "tokenLength" : 5,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 32,
    "startLineNumber" : 56,
    "startColumnNumber" : 8,
    "endLineNumber" : 56,
    "endColumnNumber" : 40
  } ],
  "layoutRelationDataList" : [ ]
}