{
  "id" : 495,
  "expression" : "Blocks.stone.id",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/core/src/mindustry/io/versions/LegacySaveVersion.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Blocks.stone.id",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 36,
      "startColumnNumber" : 67,
      "endLineNumber" : 36,
      "endColumnNumber" : 82
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 36,
        "startColumnNumber" : 57,
        "endLineNumber" : 36,
        "endColumnNumber" : 82
      },
      "nodeContext" : "floorid=Blocks.stone.id",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 36,
        "startColumnNumber" : 57,
        "endLineNumber" : 36,
        "endColumnNumber" : 83
      },
      "nodeContext" : "floorid=Blocks.stone.id;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 36,
        "startColumnNumber" : 16,
        "endLineNumber" : 36,
        "endColumnNumber" : 83
      },
      "nodeContext" : "if (content.block(floorid) == Blocks.air) floorid=Blocks.stone.id;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 649,
        "startLineNumber" : 31,
        "startColumnNumber" : 51,
        "endLineNumber" : 46,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  int x=i % width, y=i / width;\n  short floorid=stream.readShort();\n  short oreid=stream.readShort();\n  int consecutives=stream.readUnsignedByte();\n  if (content.block(floorid) == Blocks.air)   floorid=Blocks.stone.id;\n  context.create(x,y,floorid,oreid,(short)0);\n  for (int j=i + 1; j < i + 1 + consecutives; j++) {\n    int newx=j % width, newy=j / width;\n    context.create(newx,newy,floorid,oreid,(short)0);\n  }\n  i+=consecutives;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 106,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 688,
        "startLineNumber" : 31,
        "startColumnNumber" : 12,
        "endLineNumber" : 46,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < width * height; i++) {\n  int x=i % width, y=i / width;\n  short floorid=stream.readShort();\n  short oreid=stream.readShort();\n  int consecutives=stream.readUnsignedByte();\n  if (content.block(floorid) == Blocks.air)   floorid=Blocks.stone.id;\n  context.create(x,y,floorid,oreid,(short)0);\n  for (int j=i + 1; j < i + 1 + consecutives; j++) {\n    int newx=j % width, newy=j / width;\n    context.create(newx,newy,floorid,oreid,(short)0);\n  }\n  i+=consecutives;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 119,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3394,
        "startLineNumber" : 27,
        "startColumnNumber" : 11,
        "endLineNumber" : 102,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  context.resize(width,height);\n  for (int i=0; i < width * height; i++) {\n    int x=i % width, y=i / width;\n    short floorid=stream.readShort();\n    short oreid=stream.readShort();\n    int consecutives=stream.readUnsignedByte();\n    if (content.block(floorid) == Blocks.air)     floorid=Blocks.stone.id;\n    context.create(x,y,floorid,oreid,(short)0);\n    for (int j=i + 1; j < i + 1 + consecutives; j++) {\n      int newx=j % width, newy=j / width;\n      context.create(newx,newy,floorid,oreid,(short)0);\n    }\n    i+=consecutives;\n  }\n  for (int i=0; i < width * height; i++) {\n    Block block=content.block(stream.readShort());\n    Tile tile=context.tile(i);\n    if (block == null)     block=Blocks.air;\n    boolean occupied=tile.build != null && !tile.isCenter() && (tile.build.block == block || block == Blocks.air);\n    if (!occupied) {\n      tile.setBlock(block);\n    }\n    if (block.hasBuilding()) {\n      try {\n        readChunk(stream,true,in -> {\n          byte version=in.readByte();\n          tile.build.health=stream.readUnsignedShort();\n          byte packedrot=stream.readByte();\n          byte team=Pack.leftByte(packedrot) == 8 ? stream.readByte() : Pack.leftByte(packedrot);\n          byte rotation=Pack.rightByte(packedrot);\n          tile.setTeam(Team.get(team));\n          tile.build.rotation=rotation;\n          if (tile.build.items != null)           tile.build.items.read(Reads.get(stream),true);\n          if (tile.build.power != null)           tile.build.power.read(Reads.get(stream),true);\n          if (tile.build.liquids != null)           tile.build.liquids.read(Reads.get(stream),true);\n          stream.readByte();\n          tile.build.read(Reads.get(in),version);\n        }\n);\n      }\n catch (      Throwable e) {\n        throw new IOException(\"Failed to read tile entity of block: \" + block,e);\n      }\n      context.onReadBuilding();\n    }\n else {\n      int consecutives=stream.readUnsignedByte();\n      if (block != Blocks.air) {\n        for (int j=i + 1; j < i + 1 + consecutives; j++) {\n          context.tile(j).setBlock(block);\n        }\n      }\n      i+=consecutives;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 430,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3460,
        "startLineNumber" : 27,
        "startColumnNumber" : 8,
        "endLineNumber" : 104,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  context.resize(width,height);\n  for (int i=0; i < width * height; i++) {\n    int x=i % width, y=i / width;\n    short floorid=stream.readShort();\n    short oreid=stream.readShort();\n    int consecutives=stream.readUnsignedByte();\n    if (content.block(floorid) == Blocks.air)     floorid=Blocks.stone.id;\n    context.create(x,y,floorid,oreid,(short)0);\n    for (int j=i + 1; j < i + 1 + consecutives; j++) {\n      int newx=j % width, newy=j / width;\n      context.create(newx,newy,floorid,oreid,(short)0);\n    }\n    i+=consecutives;\n  }\n  for (int i=0; i < width * height; i++) {\n    Block block=content.block(stream.readShort());\n    Tile tile=context.tile(i);\n    if (block == null)     block=Blocks.air;\n    boolean occupied=tile.build != null && !tile.isCenter() && (tile.build.block == block || block == Blocks.air);\n    if (!occupied) {\n      tile.setBlock(block);\n    }\n    if (block.hasBuilding()) {\n      try {\n        readChunk(stream,true,in -> {\n          byte version=in.readByte();\n          tile.build.health=stream.readUnsignedShort();\n          byte packedrot=stream.readByte();\n          byte team=Pack.leftByte(packedrot) == 8 ? stream.readByte() : Pack.leftByte(packedrot);\n          byte rotation=Pack.rightByte(packedrot);\n          tile.setTeam(Team.get(team));\n          tile.build.rotation=rotation;\n          if (tile.build.items != null)           tile.build.items.read(Reads.get(stream),true);\n          if (tile.build.power != null)           tile.build.power.read(Reads.get(stream),true);\n          if (tile.build.liquids != null)           tile.build.liquids.read(Reads.get(stream),true);\n          stream.readByte();\n          tile.build.read(Reads.get(in),version);\n        }\n);\n      }\n catch (      Throwable e) {\n        throw new IOException(\"Failed to read tile entity of block: \" + block,e);\n      }\n      context.onReadBuilding();\n    }\n else {\n      int consecutives=stream.readUnsignedByte();\n      if (block != Blocks.air) {\n        for (int j=i + 1; j < i + 1 + consecutives; j++) {\n          context.tile(j).setBlock(block);\n        }\n      }\n      i+=consecutives;\n    }\n  }\n}\n  finally {\n  if (!generating)   context.end();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 439,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3677,
        "startLineNumber" : 20,
        "startColumnNumber" : 82,
        "endLineNumber" : 105,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int width=stream.readUnsignedShort();\n  int height=stream.readUnsignedShort();\n  boolean generating=context.isGenerating();\n  if (!generating)   context.begin();\n  try {\n    context.resize(width,height);\n    for (int i=0; i < width * height; i++) {\n      int x=i % width, y=i / width;\n      short floorid=stream.readShort();\n      short oreid=stream.readShort();\n      int consecutives=stream.readUnsignedByte();\n      if (content.block(floorid) == Blocks.air)       floorid=Blocks.stone.id;\n      context.create(x,y,floorid,oreid,(short)0);\n      for (int j=i + 1; j < i + 1 + consecutives; j++) {\n        int newx=j % width, newy=j / width;\n        context.create(newx,newy,floorid,oreid,(short)0);\n      }\n      i+=consecutives;\n    }\n    for (int i=0; i < width * height; i++) {\n      Block block=content.block(stream.readShort());\n      Tile tile=context.tile(i);\n      if (block == null)       block=Blocks.air;\n      boolean occupied=tile.build != null && !tile.isCenter() && (tile.build.block == block || block == Blocks.air);\n      if (!occupied) {\n        tile.setBlock(block);\n      }\n      if (block.hasBuilding()) {\n        try {\n          readChunk(stream,true,in -> {\n            byte version=in.readByte();\n            tile.build.health=stream.readUnsignedShort();\n            byte packedrot=stream.readByte();\n            byte team=Pack.leftByte(packedrot) == 8 ? stream.readByte() : Pack.leftByte(packedrot);\n            byte rotation=Pack.rightByte(packedrot);\n            tile.setTeam(Team.get(team));\n            tile.build.rotation=rotation;\n            if (tile.build.items != null)             tile.build.items.read(Reads.get(stream),true);\n            if (tile.build.power != null)             tile.build.power.read(Reads.get(stream),true);\n            if (tile.build.liquids != null)             tile.build.liquids.read(Reads.get(stream),true);\n            stream.readByte();\n            tile.build.read(Reads.get(in),version);\n          }\n);\n        }\n catch (        Throwable e) {\n          throw new IOException(\"Failed to read tile entity of block: \" + block,e);\n        }\n        context.onReadBuilding();\n      }\n else {\n        int consecutives=stream.readUnsignedByte();\n        if (block != Blocks.air) {\n          for (int j=i + 1; j < i + 1 + consecutives; j++) {\n            context.tile(j).setBlock(block);\n          }\n        }\n        i+=consecutives;\n      }\n    }\n  }\n  finally {\n    if (!generating)     context.end();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 468,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3770,
        "startLineNumber" : 19,
        "startColumnNumber" : 4,
        "endLineNumber" : 105,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void readMap(DataInput stream,WorldContext context) throws IOException {\n  int width=stream.readUnsignedShort();\n  int height=stream.readUnsignedShort();\n  boolean generating=context.isGenerating();\n  if (!generating)   context.begin();\n  try {\n    context.resize(width,height);\n    for (int i=0; i < width * height; i++) {\n      int x=i % width, y=i / width;\n      short floorid=stream.readShort();\n      short oreid=stream.readShort();\n      int consecutives=stream.readUnsignedByte();\n      if (content.block(floorid) == Blocks.air)       floorid=Blocks.stone.id;\n      context.create(x,y,floorid,oreid,(short)0);\n      for (int j=i + 1; j < i + 1 + consecutives; j++) {\n        int newx=j % width, newy=j / width;\n        context.create(newx,newy,floorid,oreid,(short)0);\n      }\n      i+=consecutives;\n    }\n    for (int i=0; i < width * height; i++) {\n      Block block=content.block(stream.readShort());\n      Tile tile=context.tile(i);\n      if (block == null)       block=Blocks.air;\n      boolean occupied=tile.build != null && !tile.isCenter() && (tile.build.block == block || block == Blocks.air);\n      if (!occupied) {\n        tile.setBlock(block);\n      }\n      if (block.hasBuilding()) {\n        try {\n          readChunk(stream,true,in -> {\n            byte version=in.readByte();\n            tile.build.health=stream.readUnsignedShort();\n            byte packedrot=stream.readByte();\n            byte team=Pack.leftByte(packedrot) == 8 ? stream.readByte() : Pack.leftByte(packedrot);\n            byte rotation=Pack.rightByte(packedrot);\n            tile.setTeam(Team.get(team));\n            tile.build.rotation=rotation;\n            if (tile.build.items != null)             tile.build.items.read(Reads.get(stream),true);\n            if (tile.build.power != null)             tile.build.power.read(Reads.get(stream),true);\n            if (tile.build.liquids != null)             tile.build.liquids.read(Reads.get(stream),true);\n            stream.readByte();\n            tile.build.read(Reads.get(in),version);\n          }\n);\n        }\n catch (        Throwable e) {\n          throw new IOException(\"Failed to read tile entity of block: \" + block,e);\n        }\n        context.onReadBuilding();\n      }\n else {\n        int consecutives=stream.readUnsignedByte();\n        if (block != Blocks.air) {\n          for (int j=i + 1; j < i + 1 + consecutives; j++) {\n            context.tile(j).setBlock(block);\n          }\n        }\n        i+=consecutives;\n      }\n    }\n  }\n  finally {\n    if (!generating)     context.end();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 484,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 36,
        "startColumnNumber" : 16,
        "endLineNumber" : 36,
        "endColumnNumber" : 83
      },
      "nodeContext" : "if (content.block(floorid) == Blocks.air) floorid=Blocks.stone.id;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "short"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 36,
    "startColumnNumber" : 67,
    "endLineNumber" : 36,
    "endColumnNumber" : 82
  } ],
  "layoutRelationDataList" : [ ]
}