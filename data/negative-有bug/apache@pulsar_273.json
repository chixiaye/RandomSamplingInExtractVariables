{
  "id" : 273,
  "expression" : "\" --state_storage_serviceurl \"",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-functions/runtime/src/test/java/org/apache/pulsar/functions/runtime/kubernetes/KubernetesRuntimeTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\" --state_storage_serviceurl \"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 446,
      "startColumnNumber" : 18,
      "endLineNumber" : 446,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 1330,
        "startLineNumber" : 430,
        "startColumnNumber" : 30,
        "endLineNumber" : 447,
        "endColumnNumber" : 55
      },
      "nodeContext" : "\"exec java -cp \" + classpath + extraDepsEnv+ \" -Dpulsar.functions.instance.classpath=/pulsar/lib/*\"+ \" -Dlog4j.configurationFile=kubernetes_instance_log4j2.xml \"+ \"-Dpulsar.function.log.dir=\"+ logDirectory+ \"/\"+ FunctionCommon.getFullyQualifiedName(config.getFunctionDetails())+ \" -Dpulsar.function.log.file=\"+ config.getFunctionDetails().getName()+ \"-$SHARD_ID\"+ \" -Xmx\"+ String.valueOf(RESOURCES.getRam())+ \" org.apache.pulsar.functions.instance.JavaInstanceMain\"+ \" --jar \"+ jarLocation+ \" --instance_id \"+ \"$SHARD_ID\"+ \" --function_id \"+ config.getFunctionId()+ \" --function_version \"+ config.getFunctionVersion()+ \" --function_details '\"+ JsonFormat.printer().omittingInsignificantWhitespace().print(config.getFunctionDetails())+ \"' --pulsar_serviceurl \"+ pulsarServiceUrl+ pulsarAdminArg+ \" --max_buffered_tuples 1024 --port \"+ args.get(portArg)+ \" --metrics_port \"+ args.get(metricsPortArg)+ \" --pending_async_requests 200\"+ \" --state_storage_serviceurl \"+ stateStorageServiceUrl+ \" --expected_healthcheck_interval -1\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 70,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 1345,
        "startLineNumber" : 430,
        "startColumnNumber" : 15,
        "endLineNumber" : 447,
        "endColumnNumber" : 55
      },
      "nodeContext" : "expectedArgs=\"exec java -cp \" + classpath + extraDepsEnv+ \" -Dpulsar.functions.instance.classpath=/pulsar/lib/*\"+ \" -Dlog4j.configurationFile=kubernetes_instance_log4j2.xml \"+ \"-Dpulsar.function.log.dir=\"+ logDirectory+ \"/\"+ FunctionCommon.getFullyQualifiedName(config.getFunctionDetails())+ \" -Dpulsar.function.log.file=\"+ config.getFunctionDetails().getName()+ \"-$SHARD_ID\"+ \" -Xmx\"+ String.valueOf(RESOURCES.getRam())+ \" org.apache.pulsar.functions.instance.JavaInstanceMain\"+ \" --jar \"+ jarLocation+ \" --instance_id \"+ \"$SHARD_ID\"+ \" --function_id \"+ config.getFunctionId()+ \" --function_version \"+ config.getFunctionVersion()+ \" --function_details '\"+ JsonFormat.printer().omittingInsignificantWhitespace().print(config.getFunctionDetails())+ \"' --pulsar_serviceurl \"+ pulsarServiceUrl+ pulsarAdminArg+ \" --max_buffered_tuples 1024 --port \"+ args.get(portArg)+ \" --metrics_port \"+ args.get(metricsPortArg)+ \" --pending_async_requests 200\"+ \" --state_storage_serviceurl \"+ stateStorageServiceUrl+ \" --expected_healthcheck_interval -1\"",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 72,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1353,
        "startLineNumber" : 430,
        "startColumnNumber" : 8,
        "endLineNumber" : 447,
        "endColumnNumber" : 56
      },
      "nodeContext" : "String expectedArgs=\"exec java -cp \" + classpath + extraDepsEnv+ \" -Dpulsar.functions.instance.classpath=/pulsar/lib/*\"+ \" -Dlog4j.configurationFile=kubernetes_instance_log4j2.xml \"+ \"-Dpulsar.function.log.dir=\"+ logDirectory+ \"/\"+ FunctionCommon.getFullyQualifiedName(config.getFunctionDetails())+ \" -Dpulsar.function.log.file=\"+ config.getFunctionDetails().getName()+ \"-$SHARD_ID\"+ \" -Xmx\"+ String.valueOf(RESOURCES.getRam())+ \" org.apache.pulsar.functions.instance.JavaInstanceMain\"+ \" --jar \"+ jarLocation+ \" --instance_id \"+ \"$SHARD_ID\"+ \" --function_id \"+ config.getFunctionId()+ \" --function_version \"+ config.getFunctionVersion()+ \" --function_details '\"+ JsonFormat.printer().omittingInsignificantWhitespace().print(config.getFunctionDetails())+ \"' --pulsar_serviceurl \"+ pulsarServiceUrl+ pulsarAdminArg+ \" --max_buffered_tuples 1024 --port \"+ args.get(portArg)+ \" --metrics_port \"+ args.get(metricsPortArg)+ \" --pending_async_requests 200\"+ \" --state_storage_serviceurl \"+ stateStorageServiceUrl+ \" --expected_healthcheck_interval -1\";\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 75,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3896,
        "startLineNumber" : 386,
        "startColumnNumber" : 143,
        "endLineNumber" : 464,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  KubernetesRuntime container=factory.createContainer(config,userJarFile,userJarFile,30l);\n  List<String> args=container.getProcessArgs();\n  String classpath=javaInstanceJarFile;\n  String extraDepsEnv;\n  String jarLocation;\n  int portArg;\n  int metricsPortArg;\n  int totalArgs;\n  if (null != depsDir) {\n    extraDepsEnv=\" -Dpulsar.functions.extra.dependencies.dir=\" + depsDir;\n    classpath=classpath + \":\" + depsDir+ \"/*\";\n    totalArgs=39;\n    portArg=26;\n    metricsPortArg=28;\n  }\n else {\n    extraDepsEnv=\"\";\n    portArg=25;\n    metricsPortArg=27;\n    totalArgs=38;\n  }\n  if (secretsAttached) {\n    totalArgs+=4;\n  }\n  if (config.isExposePulsarAdminClientEnabled()) {\n    totalArgs+=3;\n    portArg+=3;\n    metricsPortArg+=3;\n  }\n  if (StringUtils.isNotEmpty(downloadDirectory)) {\n    jarLocation=downloadDirectory + \"/\" + userJarFile;\n  }\n else {\n    jarLocation=pulsarRootDir + \"/\" + userJarFile;\n  }\n  assertEquals(args.size(),totalArgs,\"Actual args : \" + StringUtils.join(args,\" \"));\n  String pulsarAdminArg=config.isExposePulsarAdminClientEnabled() ? \" --web_serviceurl \" + pulsarAdminUrl + \" --expose_pulsaradmin\" : \"\";\n  String expectedArgs=\"exec java -cp \" + classpath + extraDepsEnv+ \" -Dpulsar.functions.instance.classpath=/pulsar/lib/*\"+ \" -Dlog4j.configurationFile=kubernetes_instance_log4j2.xml \"+ \"-Dpulsar.function.log.dir=\"+ logDirectory+ \"/\"+ FunctionCommon.getFullyQualifiedName(config.getFunctionDetails())+ \" -Dpulsar.function.log.file=\"+ config.getFunctionDetails().getName()+ \"-$SHARD_ID\"+ \" -Xmx\"+ String.valueOf(RESOURCES.getRam())+ \" org.apache.pulsar.functions.instance.JavaInstanceMain\"+ \" --jar \"+ jarLocation+ \" --instance_id \"+ \"$SHARD_ID\"+ \" --function_id \"+ config.getFunctionId()+ \" --function_version \"+ config.getFunctionVersion()+ \" --function_details '\"+ JsonFormat.printer().omittingInsignificantWhitespace().print(config.getFunctionDetails())+ \"' --pulsar_serviceurl \"+ pulsarServiceUrl+ pulsarAdminArg+ \" --max_buffered_tuples 1024 --port \"+ args.get(portArg)+ \" --metrics_port \"+ args.get(metricsPortArg)+ \" --pending_async_requests 200\"+ \" --state_storage_serviceurl \"+ stateStorageServiceUrl+ \" --expected_healthcheck_interval -1\";\n  if (secretsAttached) {\n    expectedArgs+=\" --secrets_provider org.apache.pulsar.functions.secretsprovider.ClearTextSecretsProvider\" + \" --secrets_provider_config '{\\\"Somevalue\\\":\\\"myvalue\\\"}'\";\n  }\n  expectedArgs+=\" --cluster_name standalone --nar_extraction_directory \" + narExtractionDirectory;\n  long heap=Long.parseLong(args.stream().filter(s -> s.startsWith(\"-Xmx\")).collect(Collectors.toList()).get(0).replace(\"-Xmx\",\"\"));\n  V1Container containerSpec=container.getFunctionContainer(Collections.emptyList(),RESOURCES);\n  assertEquals(heap,RESOURCES.getRam());\n  assertEquals(containerSpec.getResources().getLimits().get(\"memory\").getNumber().longValue(),Math.round(heap + (heap * 0.1)));\n  assertEquals(containerSpec.getResources().getRequests().get(\"cpu\").getNumber().doubleValue(),RESOURCES.getCpu());\n  assertEquals(containerSpec.getResources().getLimits().get(\"cpu\").getNumber().doubleValue(),RESOURCES.getCpu());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 373,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4035,
        "startLineNumber" : 386,
        "startColumnNumber" : 4,
        "endLineNumber" : 464,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void verifyJavaInstance(InstanceConfig config,String depsDir,boolean secretsAttached,String downloadDirectory) throws Exception {\n  KubernetesRuntime container=factory.createContainer(config,userJarFile,userJarFile,30l);\n  List<String> args=container.getProcessArgs();\n  String classpath=javaInstanceJarFile;\n  String extraDepsEnv;\n  String jarLocation;\n  int portArg;\n  int metricsPortArg;\n  int totalArgs;\n  if (null != depsDir) {\n    extraDepsEnv=\" -Dpulsar.functions.extra.dependencies.dir=\" + depsDir;\n    classpath=classpath + \":\" + depsDir+ \"/*\";\n    totalArgs=39;\n    portArg=26;\n    metricsPortArg=28;\n  }\n else {\n    extraDepsEnv=\"\";\n    portArg=25;\n    metricsPortArg=27;\n    totalArgs=38;\n  }\n  if (secretsAttached) {\n    totalArgs+=4;\n  }\n  if (config.isExposePulsarAdminClientEnabled()) {\n    totalArgs+=3;\n    portArg+=3;\n    metricsPortArg+=3;\n  }\n  if (StringUtils.isNotEmpty(downloadDirectory)) {\n    jarLocation=downloadDirectory + \"/\" + userJarFile;\n  }\n else {\n    jarLocation=pulsarRootDir + \"/\" + userJarFile;\n  }\n  assertEquals(args.size(),totalArgs,\"Actual args : \" + StringUtils.join(args,\" \"));\n  String pulsarAdminArg=config.isExposePulsarAdminClientEnabled() ? \" --web_serviceurl \" + pulsarAdminUrl + \" --expose_pulsaradmin\" : \"\";\n  String expectedArgs=\"exec java -cp \" + classpath + extraDepsEnv+ \" -Dpulsar.functions.instance.classpath=/pulsar/lib/*\"+ \" -Dlog4j.configurationFile=kubernetes_instance_log4j2.xml \"+ \"-Dpulsar.function.log.dir=\"+ logDirectory+ \"/\"+ FunctionCommon.getFullyQualifiedName(config.getFunctionDetails())+ \" -Dpulsar.function.log.file=\"+ config.getFunctionDetails().getName()+ \"-$SHARD_ID\"+ \" -Xmx\"+ String.valueOf(RESOURCES.getRam())+ \" org.apache.pulsar.functions.instance.JavaInstanceMain\"+ \" --jar \"+ jarLocation+ \" --instance_id \"+ \"$SHARD_ID\"+ \" --function_id \"+ config.getFunctionId()+ \" --function_version \"+ config.getFunctionVersion()+ \" --function_details '\"+ JsonFormat.printer().omittingInsignificantWhitespace().print(config.getFunctionDetails())+ \"' --pulsar_serviceurl \"+ pulsarServiceUrl+ pulsarAdminArg+ \" --max_buffered_tuples 1024 --port \"+ args.get(portArg)+ \" --metrics_port \"+ args.get(metricsPortArg)+ \" --pending_async_requests 200\"+ \" --state_storage_serviceurl \"+ stateStorageServiceUrl+ \" --expected_healthcheck_interval -1\";\n  if (secretsAttached) {\n    expectedArgs+=\" --secrets_provider org.apache.pulsar.functions.secretsprovider.ClearTextSecretsProvider\" + \" --secrets_provider_config '{\\\"Somevalue\\\":\\\"myvalue\\\"}'\";\n  }\n  expectedArgs+=\" --cluster_name standalone --nar_extraction_directory \" + narExtractionDirectory;\n  long heap=Long.parseLong(args.stream().filter(s -> s.startsWith(\"-Xmx\")).collect(Collectors.toList()).get(0).replace(\"-Xmx\",\"\"));\n  V1Container containerSpec=container.getFunctionContainer(Collections.emptyList(),RESOURCES);\n  assertEquals(heap,RESOURCES.getRam());\n  assertEquals(containerSpec.getResources().getLimits().get(\"memory\").getNumber().longValue(),Math.round(heap + (heap * 0.1)));\n  assertEquals(containerSpec.getResources().getRequests().get(\"cpu\").getNumber().doubleValue(),RESOURCES.getCpu());\n  assertEquals(containerSpec.getResources().getLimits().get(\"cpu\").getNumber().doubleValue(),RESOURCES.getCpu());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 394,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 1330,
        "startLineNumber" : 430,
        "startColumnNumber" : 30,
        "endLineNumber" : 447,
        "endColumnNumber" : 55
      },
      "nodeContext" : "\"exec java -cp \" + classpath + extraDepsEnv+ \" -Dpulsar.functions.instance.classpath=/pulsar/lib/*\"+ \" -Dlog4j.configurationFile=kubernetes_instance_log4j2.xml \"+ \"-Dpulsar.function.log.dir=\"+ logDirectory+ \"/\"+ FunctionCommon.getFullyQualifiedName(config.getFunctionDetails())+ \" -Dpulsar.function.log.file=\"+ config.getFunctionDetails().getName()+ \"-$SHARD_ID\"+ \" -Xmx\"+ String.valueOf(RESOURCES.getRam())+ \" org.apache.pulsar.functions.instance.JavaInstanceMain\"+ \" --jar \"+ jarLocation+ \" --instance_id \"+ \"$SHARD_ID\"+ \" --function_id \"+ config.getFunctionId()+ \" --function_version \"+ config.getFunctionVersion()+ \" --function_details '\"+ JsonFormat.printer().omittingInsignificantWhitespace().print(config.getFunctionDetails())+ \"' --pulsar_serviceurl \"+ pulsarServiceUrl+ pulsarAdminArg+ \" --max_buffered_tuples 1024 --port \"+ args.get(portArg)+ \" --metrics_port \"+ args.get(metricsPortArg)+ \" --pending_async_requests 200\"+ \" --state_storage_serviceurl \"+ stateStorageServiceUrl+ \" --expected_healthcheck_interval -1\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 70,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 30,
    "startLineNumber" : 446,
    "startColumnNumber" : 18,
    "endLineNumber" : 446,
    "endColumnNumber" : 48
  } ],
  "layoutRelationDataList" : [ ]
}