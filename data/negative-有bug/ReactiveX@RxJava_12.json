{
  "id" : 12,
  "expression" : "w",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/internal/operators/flowable/FlowableUnsubscribeOnTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "w",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 49,
      "startColumnNumber" : 12,
      "endLineNumber" : 49,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 49,
        "startColumnNumber" : 12,
        "endLineNumber" : 49,
        "endColumnNumber" : 40
      },
      "nodeContext" : "w.subscribeOn(UI_EVENT_LOOP)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 49,
        "startColumnNumber" : 12,
        "endLineNumber" : 49,
        "endColumnNumber" : 76
      },
      "nodeContext" : "w.subscribeOn(UI_EVENT_LOOP).observeOn(Schedulers.computation())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 49,
        "startColumnNumber" : 12,
        "endLineNumber" : 49,
        "endColumnNumber" : 105
      },
      "nodeContext" : "w.subscribeOn(UI_EVENT_LOOP).observeOn(Schedulers.computation()).unsubscribeOn(UI_EVENT_LOOP)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 49,
        "startColumnNumber" : 12,
        "endLineNumber" : 49,
        "endColumnNumber" : 125
      },
      "nodeContext" : "w.subscribeOn(UI_EVENT_LOOP).observeOn(Schedulers.computation()).unsubscribeOn(UI_EVENT_LOOP).subscribe(observer)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 49,
        "startColumnNumber" : 12,
        "endLineNumber" : 49,
        "endColumnNumber" : 126
      },
      "nodeContext" : "w.subscribeOn(UI_EVENT_LOOP).observeOn(Schedulers.computation()).unsubscribeOn(UI_EVENT_LOOP).subscribe(observer);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1628,
        "startLineNumber" : 33,
        "startColumnNumber" : 12,
        "endLineNumber" : 69,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final ThreadSubscription subscription=new ThreadSubscription();\n  final AtomicReference<Thread> subscribeThread=new AtomicReference<Thread>();\n  Flowable<Integer> w=Flowable.create(new Publisher<Integer>(){\n    @Override public void subscribe(    Subscriber<? super Integer> t1){\n      subscribeThread.set(Thread.currentThread());\n      t1.onSubscribe(subscription);\n      t1.onNext(1);\n      t1.onNext(2);\n      t1.onComplete();\n    }\n  }\n);\n  TestSubscriber<Integer> observer=new TestSubscriber<Integer>();\n  w.subscribeOn(UI_EVENT_LOOP).observeOn(Schedulers.computation()).unsubscribeOn(UI_EVENT_LOOP).subscribe(observer);\n  observer.awaitTerminalEvent(1,TimeUnit.SECONDS);\n  observer.dispose();\n  Thread unsubscribeThread=subscription.getThread();\n  assertNotNull(unsubscribeThread);\n  assertNotSame(Thread.currentThread(),unsubscribeThread);\n  assertNotNull(subscribeThread.get());\n  assertNotSame(Thread.currentThread(),subscribeThread.get());\n  System.out.println(\"unsubscribeThread: \" + unsubscribeThread);\n  System.out.println(\"subscribeThread.get(): \" + subscribeThread.get());\n  assertTrue(unsubscribeThread == UI_EVENT_LOOP.getThread());\n  observer.assertValues(1,2);\n  observer.assertTerminated();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 198,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1692,
        "startLineNumber" : 33,
        "startColumnNumber" : 8,
        "endLineNumber" : 71,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  final ThreadSubscription subscription=new ThreadSubscription();\n  final AtomicReference<Thread> subscribeThread=new AtomicReference<Thread>();\n  Flowable<Integer> w=Flowable.create(new Publisher<Integer>(){\n    @Override public void subscribe(    Subscriber<? super Integer> t1){\n      subscribeThread.set(Thread.currentThread());\n      t1.onSubscribe(subscription);\n      t1.onNext(1);\n      t1.onNext(2);\n      t1.onComplete();\n    }\n  }\n);\n  TestSubscriber<Integer> observer=new TestSubscriber<Integer>();\n  w.subscribeOn(UI_EVENT_LOOP).observeOn(Schedulers.computation()).unsubscribeOn(UI_EVENT_LOOP).subscribe(observer);\n  observer.awaitTerminalEvent(1,TimeUnit.SECONDS);\n  observer.dispose();\n  Thread unsubscribeThread=subscription.getThread();\n  assertNotNull(unsubscribeThread);\n  assertNotSame(Thread.currentThread(),unsubscribeThread);\n  assertNotNull(subscribeThread.get());\n  assertNotSame(Thread.currentThread(),subscribeThread.get());\n  System.out.println(\"unsubscribeThread: \" + unsubscribeThread);\n  System.out.println(\"subscribeThread.get(): \" + subscribeThread.get());\n  assertTrue(unsubscribeThread == UI_EVENT_LOOP.getThread());\n  observer.assertValues(1,2);\n  observer.assertTerminated();\n}\n  finally {\n  UI_EVENT_LOOP.shutdown();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 204,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1784,
        "startLineNumber" : 31,
        "startColumnNumber" : 108,
        "endLineNumber" : 72,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  UIEventLoopScheduler UI_EVENT_LOOP=new UIEventLoopScheduler();\n  try {\n    final ThreadSubscription subscription=new ThreadSubscription();\n    final AtomicReference<Thread> subscribeThread=new AtomicReference<Thread>();\n    Flowable<Integer> w=Flowable.create(new Publisher<Integer>(){\n      @Override public void subscribe(      Subscriber<? super Integer> t1){\n        subscribeThread.set(Thread.currentThread());\n        t1.onSubscribe(subscription);\n        t1.onNext(1);\n        t1.onNext(2);\n        t1.onComplete();\n      }\n    }\n);\n    TestSubscriber<Integer> observer=new TestSubscriber<Integer>();\n    w.subscribeOn(UI_EVENT_LOOP).observeOn(Schedulers.computation()).unsubscribeOn(UI_EVENT_LOOP).subscribe(observer);\n    observer.awaitTerminalEvent(1,TimeUnit.SECONDS);\n    observer.dispose();\n    Thread unsubscribeThread=subscription.getThread();\n    assertNotNull(unsubscribeThread);\n    assertNotSame(Thread.currentThread(),unsubscribeThread);\n    assertNotNull(subscribeThread.get());\n    assertNotSame(Thread.currentThread(),subscribeThread.get());\n    System.out.println(\"unsubscribeThread: \" + unsubscribeThread);\n    System.out.println(\"subscribeThread.get(): \" + subscribeThread.get());\n    assertTrue(unsubscribeThread == UI_EVENT_LOOP.getThread());\n    observer.assertValues(1,2);\n    observer.assertTerminated();\n  }\n  finally {\n    UI_EVENT_LOOP.shutdown();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 213,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1899,
        "startLineNumber" : 30,
        "startColumnNumber" : 4,
        "endLineNumber" : 72,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testUnsubscribeWhenSubscribeOnAndUnsubscribeOnAreOnSameThread() throws InterruptedException {\n  UIEventLoopScheduler UI_EVENT_LOOP=new UIEventLoopScheduler();\n  try {\n    final ThreadSubscription subscription=new ThreadSubscription();\n    final AtomicReference<Thread> subscribeThread=new AtomicReference<Thread>();\n    Flowable<Integer> w=Flowable.create(new Publisher<Integer>(){\n      @Override public void subscribe(      Subscriber<? super Integer> t1){\n        subscribeThread.set(Thread.currentThread());\n        t1.onSubscribe(subscription);\n        t1.onNext(1);\n        t1.onNext(2);\n        t1.onComplete();\n      }\n    }\n);\n    TestSubscriber<Integer> observer=new TestSubscriber<Integer>();\n    w.subscribeOn(UI_EVENT_LOOP).observeOn(Schedulers.computation()).unsubscribeOn(UI_EVENT_LOOP).subscribe(observer);\n    observer.awaitTerminalEvent(1,TimeUnit.SECONDS);\n    observer.dispose();\n    Thread unsubscribeThread=subscription.getThread();\n    assertNotNull(unsubscribeThread);\n    assertNotSame(Thread.currentThread(),unsubscribeThread);\n    assertNotNull(subscribeThread.get());\n    assertNotSame(Thread.currentThread(),subscribeThread.get());\n    System.out.println(\"unsubscribeThread: \" + unsubscribeThread);\n    System.out.println(\"subscribeThread.get(): \" + subscribeThread.get());\n    assertTrue(unsubscribeThread == UI_EVENT_LOOP.getThread());\n    observer.assertValues(1,2);\n    observer.assertTerminated();\n  }\n  finally {\n    UI_EVENT_LOOP.shutdown();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 221,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 49,
        "startColumnNumber" : 12,
        "endLineNumber" : 49,
        "endColumnNumber" : 126
      },
      "nodeContext" : "w.subscribeOn(UI_EVENT_LOOP).observeOn(Schedulers.computation()).unsubscribeOn(UI_EVENT_LOOP).subscribe(observer);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "io.reactivex.Flowable<java.lang.Integer>"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 49,
    "startColumnNumber" : 12,
    "endLineNumber" : 49,
    "endColumnNumber" : 13
  } ],
  "layoutRelationDataList" : [ ]
}