{
  "id" : 397,
  "expression" : "SpdySession",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdySessionHandler.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "SpdySession",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 486,
      "startColumnNumber" : 58,
      "endLineNumber" : 486,
      "endColumnNumber" : 69
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 486,
        "startColumnNumber" : 58,
        "endLineNumber" : 486,
        "endColumnNumber" : 82
      },
      "nodeContext" : "SpdySession.PendingWrite",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,type]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 486,
        "startColumnNumber" : 58,
        "endLineNumber" : 486,
        "endColumnNumber" : 82
      },
      "nodeContext" : "SpdySession.PendingWrite",
      "nodeType" : "SimpleType",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 486,
        "startColumnNumber" : 54,
        "endLineNumber" : 486,
        "endColumnNumber" : 106
      },
      "nodeContext" : "new SpdySession.PendingWrite(spdyDataFrame,promise)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 486,
        "startColumnNumber" : 16,
        "endLineNumber" : 486,
        "endColumnNumber" : 107
      },
      "nodeContext" : "spdySession.putPendingWrite(streamId,new SpdySession.PendingWrite(spdyDataFrame,promise))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 486,
        "startColumnNumber" : 16,
        "endLineNumber" : 486,
        "endColumnNumber" : 108
      },
      "nodeContext" : "spdySession.putPendingWrite(streamId,new SpdySession.PendingWrite(spdyDataFrame,promise));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 222,
        "startLineNumber" : 484,
        "startColumnNumber" : 37,
        "endLineNumber" : 488,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  spdySession.putPendingWrite(streamId,new SpdySession.PendingWrite(spdyDataFrame,promise));\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2672,
        "startLineNumber" : 484,
        "startColumnNumber" : 12,
        "endLineNumber" : 528,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (sendWindowSize <= 0) {\n  spdySession.putPendingWrite(streamId,new SpdySession.PendingWrite(spdyDataFrame,promise));\n  return;\n}\n else if (sendWindowSize < dataLength) {\n  spdySession.updateSendWindowSize(streamId,-1 * sendWindowSize);\n  spdySession.updateSendWindowSize(SPDY_SESSION_STREAM_ID,-1 * sendWindowSize);\n  SpdyDataFrame partialDataFrame=new DefaultSpdyDataFrame(streamId,spdyDataFrame.content().readRetainedSlice(sendWindowSize));\n  spdySession.putPendingWrite(streamId,new SpdySession.PendingWrite(spdyDataFrame,promise));\n  final ChannelHandlerContext context=ctx;\n  ctx.write(partialDataFrame).addListener(new ChannelFutureListener(){\n    @Override public void operationComplete(    ChannelFuture future) throws Exception {\n      if (!future.isSuccess()) {\n        issueSessionError(context,SpdySessionStatus.INTERNAL_ERROR);\n      }\n    }\n  }\n);\n  return;\n}\n else {\n  spdySession.updateSendWindowSize(streamId,-1 * dataLength);\n  spdySession.updateSendWindowSize(SPDY_SESSION_STREAM_ID,-1 * dataLength);\n  final ChannelHandlerContext context=ctx;\n  promise.addListener(new ChannelFutureListener(){\n    @Override public void operationComplete(    ChannelFuture future) throws Exception {\n      if (!future.isSuccess()) {\n        issueSessionError(context,SpdySessionStatus.INTERNAL_ERROR);\n      }\n    }\n  }\n);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 173,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 4160,
        "startLineNumber" : 454,
        "startColumnNumber" : 42,
        "endLineNumber" : 535,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  SpdyDataFrame spdyDataFrame=(SpdyDataFrame)msg;\n  int streamId=spdyDataFrame.streamId();\n  if (spdySession.isLocalSideClosed(streamId)) {\n    spdyDataFrame.release();\n    promise.setFailure(PROTOCOL_EXCEPTION);\n    return;\n  }\n  int dataLength=spdyDataFrame.content().readableBytes();\n  int sendWindowSize=spdySession.getSendWindowSize(streamId);\n  int sessionSendWindowSize=spdySession.getSendWindowSize(SPDY_SESSION_STREAM_ID);\n  sendWindowSize=Math.min(sendWindowSize,sessionSendWindowSize);\n  if (sendWindowSize <= 0) {\n    spdySession.putPendingWrite(streamId,new SpdySession.PendingWrite(spdyDataFrame,promise));\n    return;\n  }\n else   if (sendWindowSize < dataLength) {\n    spdySession.updateSendWindowSize(streamId,-1 * sendWindowSize);\n    spdySession.updateSendWindowSize(SPDY_SESSION_STREAM_ID,-1 * sendWindowSize);\n    SpdyDataFrame partialDataFrame=new DefaultSpdyDataFrame(streamId,spdyDataFrame.content().readRetainedSlice(sendWindowSize));\n    spdySession.putPendingWrite(streamId,new SpdySession.PendingWrite(spdyDataFrame,promise));\n    final ChannelHandlerContext context=ctx;\n    ctx.write(partialDataFrame).addListener(new ChannelFutureListener(){\n      @Override public void operationComplete(      ChannelFuture future) throws Exception {\n        if (!future.isSuccess()) {\n          issueSessionError(context,SpdySessionStatus.INTERNAL_ERROR);\n        }\n      }\n    }\n);\n    return;\n  }\n else {\n    spdySession.updateSendWindowSize(streamId,-1 * dataLength);\n    spdySession.updateSendWindowSize(SPDY_SESSION_STREAM_ID,-1 * dataLength);\n    final ChannelHandlerContext context=ctx;\n    promise.addListener(new ChannelFutureListener(){\n      @Override public void operationComplete(      ChannelFuture future) throws Exception {\n        if (!future.isSuccess()) {\n          issueSessionError(context,SpdySessionStatus.INTERNAL_ERROR);\n        }\n      }\n    }\n);\n  }\n  if (spdyDataFrame.isLast()) {\n    halfCloseStream(streamId,false,promise);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 250,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8898,
        "startLineNumber" : 454,
        "startColumnNumber" : 8,
        "endLineNumber" : 643,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (msg instanceof SpdyDataFrame) {\n  SpdyDataFrame spdyDataFrame=(SpdyDataFrame)msg;\n  int streamId=spdyDataFrame.streamId();\n  if (spdySession.isLocalSideClosed(streamId)) {\n    spdyDataFrame.release();\n    promise.setFailure(PROTOCOL_EXCEPTION);\n    return;\n  }\n  int dataLength=spdyDataFrame.content().readableBytes();\n  int sendWindowSize=spdySession.getSendWindowSize(streamId);\n  int sessionSendWindowSize=spdySession.getSendWindowSize(SPDY_SESSION_STREAM_ID);\n  sendWindowSize=Math.min(sendWindowSize,sessionSendWindowSize);\n  if (sendWindowSize <= 0) {\n    spdySession.putPendingWrite(streamId,new SpdySession.PendingWrite(spdyDataFrame,promise));\n    return;\n  }\n else   if (sendWindowSize < dataLength) {\n    spdySession.updateSendWindowSize(streamId,-1 * sendWindowSize);\n    spdySession.updateSendWindowSize(SPDY_SESSION_STREAM_ID,-1 * sendWindowSize);\n    SpdyDataFrame partialDataFrame=new DefaultSpdyDataFrame(streamId,spdyDataFrame.content().readRetainedSlice(sendWindowSize));\n    spdySession.putPendingWrite(streamId,new SpdySession.PendingWrite(spdyDataFrame,promise));\n    final ChannelHandlerContext context=ctx;\n    ctx.write(partialDataFrame).addListener(new ChannelFutureListener(){\n      @Override public void operationComplete(      ChannelFuture future) throws Exception {\n        if (!future.isSuccess()) {\n          issueSessionError(context,SpdySessionStatus.INTERNAL_ERROR);\n        }\n      }\n    }\n);\n    return;\n  }\n else {\n    spdySession.updateSendWindowSize(streamId,-1 * dataLength);\n    spdySession.updateSendWindowSize(SPDY_SESSION_STREAM_ID,-1 * dataLength);\n    final ChannelHandlerContext context=ctx;\n    promise.addListener(new ChannelFutureListener(){\n      @Override public void operationComplete(      ChannelFuture future) throws Exception {\n        if (!future.isSuccess()) {\n          issueSessionError(context,SpdySessionStatus.INTERNAL_ERROR);\n        }\n      }\n    }\n);\n  }\n  if (spdyDataFrame.isLast()) {\n    halfCloseStream(streamId,false,promise);\n  }\n}\n else if (msg instanceof SpdySynStreamFrame) {\n  SpdySynStreamFrame spdySynStreamFrame=(SpdySynStreamFrame)msg;\n  int streamId=spdySynStreamFrame.streamId();\n  if (isRemoteInitiatedId(streamId)) {\n    promise.setFailure(PROTOCOL_EXCEPTION);\n    return;\n  }\n  byte priority=spdySynStreamFrame.priority();\n  boolean remoteSideClosed=spdySynStreamFrame.isUnidirectional();\n  boolean localSideClosed=spdySynStreamFrame.isLast();\n  if (!acceptStream(streamId,priority,remoteSideClosed,localSideClosed)) {\n    promise.setFailure(PROTOCOL_EXCEPTION);\n    return;\n  }\n}\n else if (msg instanceof SpdySynReplyFrame) {\n  SpdySynReplyFrame spdySynReplyFrame=(SpdySynReplyFrame)msg;\n  int streamId=spdySynReplyFrame.streamId();\n  if (!isRemoteInitiatedId(streamId) || spdySession.isLocalSideClosed(streamId)) {\n    promise.setFailure(PROTOCOL_EXCEPTION);\n    return;\n  }\n  if (spdySynReplyFrame.isLast()) {\n    halfCloseStream(streamId,false,promise);\n  }\n}\n else if (msg instanceof SpdyRstStreamFrame) {\n  SpdyRstStreamFrame spdyRstStreamFrame=(SpdyRstStreamFrame)msg;\n  removeStream(spdyRstStreamFrame.streamId(),promise);\n}\n else if (msg instanceof SpdySettingsFrame) {\n  SpdySettingsFrame spdySettingsFrame=(SpdySettingsFrame)msg;\n  int settingsMinorVersion=spdySettingsFrame.getValue(SpdySettingsFrame.SETTINGS_MINOR_VERSION);\n  if (settingsMinorVersion >= 0 && settingsMinorVersion != minorVersion) {\n    promise.setFailure(PROTOCOL_EXCEPTION);\n    return;\n  }\n  int newConcurrentStreams=spdySettingsFrame.getValue(SpdySettingsFrame.SETTINGS_MAX_CONCURRENT_STREAMS);\n  if (newConcurrentStreams >= 0) {\n    localConcurrentStreams=newConcurrentStreams;\n  }\n  if (spdySettingsFrame.isPersisted(SpdySettingsFrame.SETTINGS_INITIAL_WINDOW_SIZE)) {\n    spdySettingsFrame.removeValue(SpdySettingsFrame.SETTINGS_INITIAL_WINDOW_SIZE);\n  }\n  spdySettingsFrame.setPersistValue(SpdySettingsFrame.SETTINGS_INITIAL_WINDOW_SIZE,false);\n  int newInitialWindowSize=spdySettingsFrame.getValue(SpdySettingsFrame.SETTINGS_INITIAL_WINDOW_SIZE);\n  if (newInitialWindowSize >= 0) {\n    updateInitialReceiveWindowSize(newInitialWindowSize);\n  }\n}\n else if (msg instanceof SpdyPingFrame) {\n  SpdyPingFrame spdyPingFrame=(SpdyPingFrame)msg;\n  if (isRemoteInitiatedId(spdyPingFrame.id())) {\n    ctx.fireExceptionCaught(new IllegalArgumentException(\"invalid PING ID: \" + spdyPingFrame.id()));\n    return;\n  }\n  pings.getAndIncrement();\n}\n else if (msg instanceof SpdyGoAwayFrame) {\n  promise.setFailure(PROTOCOL_EXCEPTION);\n  return;\n}\n else if (msg instanceof SpdyHeadersFrame) {\n  SpdyHeadersFrame spdyHeadersFrame=(SpdyHeadersFrame)msg;\n  int streamId=spdyHeadersFrame.streamId();\n  if (spdySession.isLocalSideClosed(streamId)) {\n    promise.setFailure(PROTOCOL_EXCEPTION);\n    return;\n  }\n  if (spdyHeadersFrame.isLast()) {\n    halfCloseStream(streamId,false,promise);\n  }\n}\n else if (msg instanceof SpdyWindowUpdateFrame) {\n  promise.setFailure(PROTOCOL_EXCEPTION);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 605,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8952,
        "startLineNumber" : 453,
        "startColumnNumber" : 119,
        "endLineNumber" : 646,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (msg instanceof SpdyDataFrame) {\n    SpdyDataFrame spdyDataFrame=(SpdyDataFrame)msg;\n    int streamId=spdyDataFrame.streamId();\n    if (spdySession.isLocalSideClosed(streamId)) {\n      spdyDataFrame.release();\n      promise.setFailure(PROTOCOL_EXCEPTION);\n      return;\n    }\n    int dataLength=spdyDataFrame.content().readableBytes();\n    int sendWindowSize=spdySession.getSendWindowSize(streamId);\n    int sessionSendWindowSize=spdySession.getSendWindowSize(SPDY_SESSION_STREAM_ID);\n    sendWindowSize=Math.min(sendWindowSize,sessionSendWindowSize);\n    if (sendWindowSize <= 0) {\n      spdySession.putPendingWrite(streamId,new SpdySession.PendingWrite(spdyDataFrame,promise));\n      return;\n    }\n else     if (sendWindowSize < dataLength) {\n      spdySession.updateSendWindowSize(streamId,-1 * sendWindowSize);\n      spdySession.updateSendWindowSize(SPDY_SESSION_STREAM_ID,-1 * sendWindowSize);\n      SpdyDataFrame partialDataFrame=new DefaultSpdyDataFrame(streamId,spdyDataFrame.content().readRetainedSlice(sendWindowSize));\n      spdySession.putPendingWrite(streamId,new SpdySession.PendingWrite(spdyDataFrame,promise));\n      final ChannelHandlerContext context=ctx;\n      ctx.write(partialDataFrame).addListener(new ChannelFutureListener(){\n        @Override public void operationComplete(        ChannelFuture future) throws Exception {\n          if (!future.isSuccess()) {\n            issueSessionError(context,SpdySessionStatus.INTERNAL_ERROR);\n          }\n        }\n      }\n);\n      return;\n    }\n else {\n      spdySession.updateSendWindowSize(streamId,-1 * dataLength);\n      spdySession.updateSendWindowSize(SPDY_SESSION_STREAM_ID,-1 * dataLength);\n      final ChannelHandlerContext context=ctx;\n      promise.addListener(new ChannelFutureListener(){\n        @Override public void operationComplete(        ChannelFuture future) throws Exception {\n          if (!future.isSuccess()) {\n            issueSessionError(context,SpdySessionStatus.INTERNAL_ERROR);\n          }\n        }\n      }\n);\n    }\n    if (spdyDataFrame.isLast()) {\n      halfCloseStream(streamId,false,promise);\n    }\n  }\n else   if (msg instanceof SpdySynStreamFrame) {\n    SpdySynStreamFrame spdySynStreamFrame=(SpdySynStreamFrame)msg;\n    int streamId=spdySynStreamFrame.streamId();\n    if (isRemoteInitiatedId(streamId)) {\n      promise.setFailure(PROTOCOL_EXCEPTION);\n      return;\n    }\n    byte priority=spdySynStreamFrame.priority();\n    boolean remoteSideClosed=spdySynStreamFrame.isUnidirectional();\n    boolean localSideClosed=spdySynStreamFrame.isLast();\n    if (!acceptStream(streamId,priority,remoteSideClosed,localSideClosed)) {\n      promise.setFailure(PROTOCOL_EXCEPTION);\n      return;\n    }\n  }\n else   if (msg instanceof SpdySynReplyFrame) {\n    SpdySynReplyFrame spdySynReplyFrame=(SpdySynReplyFrame)msg;\n    int streamId=spdySynReplyFrame.streamId();\n    if (!isRemoteInitiatedId(streamId) || spdySession.isLocalSideClosed(streamId)) {\n      promise.setFailure(PROTOCOL_EXCEPTION);\n      return;\n    }\n    if (spdySynReplyFrame.isLast()) {\n      halfCloseStream(streamId,false,promise);\n    }\n  }\n else   if (msg instanceof SpdyRstStreamFrame) {\n    SpdyRstStreamFrame spdyRstStreamFrame=(SpdyRstStreamFrame)msg;\n    removeStream(spdyRstStreamFrame.streamId(),promise);\n  }\n else   if (msg instanceof SpdySettingsFrame) {\n    SpdySettingsFrame spdySettingsFrame=(SpdySettingsFrame)msg;\n    int settingsMinorVersion=spdySettingsFrame.getValue(SpdySettingsFrame.SETTINGS_MINOR_VERSION);\n    if (settingsMinorVersion >= 0 && settingsMinorVersion != minorVersion) {\n      promise.setFailure(PROTOCOL_EXCEPTION);\n      return;\n    }\n    int newConcurrentStreams=spdySettingsFrame.getValue(SpdySettingsFrame.SETTINGS_MAX_CONCURRENT_STREAMS);\n    if (newConcurrentStreams >= 0) {\n      localConcurrentStreams=newConcurrentStreams;\n    }\n    if (spdySettingsFrame.isPersisted(SpdySettingsFrame.SETTINGS_INITIAL_WINDOW_SIZE)) {\n      spdySettingsFrame.removeValue(SpdySettingsFrame.SETTINGS_INITIAL_WINDOW_SIZE);\n    }\n    spdySettingsFrame.setPersistValue(SpdySettingsFrame.SETTINGS_INITIAL_WINDOW_SIZE,false);\n    int newInitialWindowSize=spdySettingsFrame.getValue(SpdySettingsFrame.SETTINGS_INITIAL_WINDOW_SIZE);\n    if (newInitialWindowSize >= 0) {\n      updateInitialReceiveWindowSize(newInitialWindowSize);\n    }\n  }\n else   if (msg instanceof SpdyPingFrame) {\n    SpdyPingFrame spdyPingFrame=(SpdyPingFrame)msg;\n    if (isRemoteInitiatedId(spdyPingFrame.id())) {\n      ctx.fireExceptionCaught(new IllegalArgumentException(\"invalid PING ID: \" + spdyPingFrame.id()));\n      return;\n    }\n    pings.getAndIncrement();\n  }\n else   if (msg instanceof SpdyGoAwayFrame) {\n    promise.setFailure(PROTOCOL_EXCEPTION);\n    return;\n  }\n else   if (msg instanceof SpdyHeadersFrame) {\n    SpdyHeadersFrame spdyHeadersFrame=(SpdyHeadersFrame)msg;\n    int streamId=spdyHeadersFrame.streamId();\n    if (spdySession.isLocalSideClosed(streamId)) {\n      promise.setFailure(PROTOCOL_EXCEPTION);\n      return;\n    }\n    if (spdyHeadersFrame.isLast()) {\n      halfCloseStream(streamId,false,promise);\n    }\n  }\n else   if (msg instanceof SpdyWindowUpdateFrame) {\n    promise.setFailure(PROTOCOL_EXCEPTION);\n    return;\n  }\n  ctx.write(msg,promise);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 612,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9067,
        "startLineNumber" : 453,
        "startColumnNumber" : 4,
        "endLineNumber" : 646,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void handleOutboundMessage(ChannelHandlerContext ctx,Object msg,ChannelPromise promise) throws Exception {\n  if (msg instanceof SpdyDataFrame) {\n    SpdyDataFrame spdyDataFrame=(SpdyDataFrame)msg;\n    int streamId=spdyDataFrame.streamId();\n    if (spdySession.isLocalSideClosed(streamId)) {\n      spdyDataFrame.release();\n      promise.setFailure(PROTOCOL_EXCEPTION);\n      return;\n    }\n    int dataLength=spdyDataFrame.content().readableBytes();\n    int sendWindowSize=spdySession.getSendWindowSize(streamId);\n    int sessionSendWindowSize=spdySession.getSendWindowSize(SPDY_SESSION_STREAM_ID);\n    sendWindowSize=Math.min(sendWindowSize,sessionSendWindowSize);\n    if (sendWindowSize <= 0) {\n      spdySession.putPendingWrite(streamId,new SpdySession.PendingWrite(spdyDataFrame,promise));\n      return;\n    }\n else     if (sendWindowSize < dataLength) {\n      spdySession.updateSendWindowSize(streamId,-1 * sendWindowSize);\n      spdySession.updateSendWindowSize(SPDY_SESSION_STREAM_ID,-1 * sendWindowSize);\n      SpdyDataFrame partialDataFrame=new DefaultSpdyDataFrame(streamId,spdyDataFrame.content().readRetainedSlice(sendWindowSize));\n      spdySession.putPendingWrite(streamId,new SpdySession.PendingWrite(spdyDataFrame,promise));\n      final ChannelHandlerContext context=ctx;\n      ctx.write(partialDataFrame).addListener(new ChannelFutureListener(){\n        @Override public void operationComplete(        ChannelFuture future) throws Exception {\n          if (!future.isSuccess()) {\n            issueSessionError(context,SpdySessionStatus.INTERNAL_ERROR);\n          }\n        }\n      }\n);\n      return;\n    }\n else {\n      spdySession.updateSendWindowSize(streamId,-1 * dataLength);\n      spdySession.updateSendWindowSize(SPDY_SESSION_STREAM_ID,-1 * dataLength);\n      final ChannelHandlerContext context=ctx;\n      promise.addListener(new ChannelFutureListener(){\n        @Override public void operationComplete(        ChannelFuture future) throws Exception {\n          if (!future.isSuccess()) {\n            issueSessionError(context,SpdySessionStatus.INTERNAL_ERROR);\n          }\n        }\n      }\n);\n    }\n    if (spdyDataFrame.isLast()) {\n      halfCloseStream(streamId,false,promise);\n    }\n  }\n else   if (msg instanceof SpdySynStreamFrame) {\n    SpdySynStreamFrame spdySynStreamFrame=(SpdySynStreamFrame)msg;\n    int streamId=spdySynStreamFrame.streamId();\n    if (isRemoteInitiatedId(streamId)) {\n      promise.setFailure(PROTOCOL_EXCEPTION);\n      return;\n    }\n    byte priority=spdySynStreamFrame.priority();\n    boolean remoteSideClosed=spdySynStreamFrame.isUnidirectional();\n    boolean localSideClosed=spdySynStreamFrame.isLast();\n    if (!acceptStream(streamId,priority,remoteSideClosed,localSideClosed)) {\n      promise.setFailure(PROTOCOL_EXCEPTION);\n      return;\n    }\n  }\n else   if (msg instanceof SpdySynReplyFrame) {\n    SpdySynReplyFrame spdySynReplyFrame=(SpdySynReplyFrame)msg;\n    int streamId=spdySynReplyFrame.streamId();\n    if (!isRemoteInitiatedId(streamId) || spdySession.isLocalSideClosed(streamId)) {\n      promise.setFailure(PROTOCOL_EXCEPTION);\n      return;\n    }\n    if (spdySynReplyFrame.isLast()) {\n      halfCloseStream(streamId,false,promise);\n    }\n  }\n else   if (msg instanceof SpdyRstStreamFrame) {\n    SpdyRstStreamFrame spdyRstStreamFrame=(SpdyRstStreamFrame)msg;\n    removeStream(spdyRstStreamFrame.streamId(),promise);\n  }\n else   if (msg instanceof SpdySettingsFrame) {\n    SpdySettingsFrame spdySettingsFrame=(SpdySettingsFrame)msg;\n    int settingsMinorVersion=spdySettingsFrame.getValue(SpdySettingsFrame.SETTINGS_MINOR_VERSION);\n    if (settingsMinorVersion >= 0 && settingsMinorVersion != minorVersion) {\n      promise.setFailure(PROTOCOL_EXCEPTION);\n      return;\n    }\n    int newConcurrentStreams=spdySettingsFrame.getValue(SpdySettingsFrame.SETTINGS_MAX_CONCURRENT_STREAMS);\n    if (newConcurrentStreams >= 0) {\n      localConcurrentStreams=newConcurrentStreams;\n    }\n    if (spdySettingsFrame.isPersisted(SpdySettingsFrame.SETTINGS_INITIAL_WINDOW_SIZE)) {\n      spdySettingsFrame.removeValue(SpdySettingsFrame.SETTINGS_INITIAL_WINDOW_SIZE);\n    }\n    spdySettingsFrame.setPersistValue(SpdySettingsFrame.SETTINGS_INITIAL_WINDOW_SIZE,false);\n    int newInitialWindowSize=spdySettingsFrame.getValue(SpdySettingsFrame.SETTINGS_INITIAL_WINDOW_SIZE);\n    if (newInitialWindowSize >= 0) {\n      updateInitialReceiveWindowSize(newInitialWindowSize);\n    }\n  }\n else   if (msg instanceof SpdyPingFrame) {\n    SpdyPingFrame spdyPingFrame=(SpdyPingFrame)msg;\n    if (isRemoteInitiatedId(spdyPingFrame.id())) {\n      ctx.fireExceptionCaught(new IllegalArgumentException(\"invalid PING ID: \" + spdyPingFrame.id()));\n      return;\n    }\n    pings.getAndIncrement();\n  }\n else   if (msg instanceof SpdyGoAwayFrame) {\n    promise.setFailure(PROTOCOL_EXCEPTION);\n    return;\n  }\n else   if (msg instanceof SpdyHeadersFrame) {\n    SpdyHeadersFrame spdyHeadersFrame=(SpdyHeadersFrame)msg;\n    int streamId=spdyHeadersFrame.streamId();\n    if (spdySession.isLocalSideClosed(streamId)) {\n      promise.setFailure(PROTOCOL_EXCEPTION);\n      return;\n    }\n    if (spdyHeadersFrame.isLast()) {\n      halfCloseStream(streamId,false,promise);\n    }\n  }\n else   if (msg instanceof SpdyWindowUpdateFrame) {\n    promise.setFailure(PROTOCOL_EXCEPTION);\n    return;\n  }\n  ctx.write(msg,promise);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 630,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 486,
        "startColumnNumber" : 16,
        "endLineNumber" : 486,
        "endColumnNumber" : 108
      },
      "nodeContext" : "spdySession.putPendingWrite(streamId,new SpdySession.PendingWrite(spdyDataFrame,promise));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "io.netty.handler.codec.spdy.SpdySession"
  }, {
    "nodeContext" : "SpdySession",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 498,
      "startColumnNumber" : 58,
      "endLineNumber" : 498,
      "endColumnNumber" : 69
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 498,
        "startColumnNumber" : 58,
        "endLineNumber" : 498,
        "endColumnNumber" : 82
      },
      "nodeContext" : "SpdySession.PendingWrite",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,type]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 498,
        "startColumnNumber" : 58,
        "endLineNumber" : 498,
        "endColumnNumber" : 82
      },
      "nodeContext" : "SpdySession.PendingWrite",
      "nodeType" : "SimpleType",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 498,
        "startColumnNumber" : 54,
        "endLineNumber" : 498,
        "endColumnNumber" : 106
      },
      "nodeContext" : "new SpdySession.PendingWrite(spdyDataFrame,promise)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 498,
        "startColumnNumber" : 16,
        "endLineNumber" : 498,
        "endColumnNumber" : 107
      },
      "nodeContext" : "spdySession.putPendingWrite(streamId,new SpdySession.PendingWrite(spdyDataFrame,promise))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 498,
        "startColumnNumber" : 16,
        "endLineNumber" : 498,
        "endColumnNumber" : 108
      },
      "nodeContext" : "spdySession.putPendingWrite(streamId,new SpdySession.PendingWrite(spdyDataFrame,promise));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1445,
        "startLineNumber" : 488,
        "startColumnNumber" : 52,
        "endLineNumber" : 512,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  spdySession.updateSendWindowSize(streamId,-1 * sendWindowSize);\n  spdySession.updateSendWindowSize(SPDY_SESSION_STREAM_ID,-1 * sendWindowSize);\n  SpdyDataFrame partialDataFrame=new DefaultSpdyDataFrame(streamId,spdyDataFrame.content().readRetainedSlice(sendWindowSize));\n  spdySession.putPendingWrite(streamId,new SpdySession.PendingWrite(spdyDataFrame,promise));\n  final ChannelHandlerContext context=ctx;\n  ctx.write(partialDataFrame).addListener(new ChannelFutureListener(){\n    @Override public void operationComplete(    ChannelFuture future) throws Exception {\n      if (!future.isSuccess()) {\n        issueSessionError(context,SpdySessionStatus.INTERNAL_ERROR);\n      }\n    }\n  }\n);\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2419,
        "startLineNumber" : 488,
        "startColumnNumber" : 19,
        "endLineNumber" : 528,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (sendWindowSize < dataLength) {\n  spdySession.updateSendWindowSize(streamId,-1 * sendWindowSize);\n  spdySession.updateSendWindowSize(SPDY_SESSION_STREAM_ID,-1 * sendWindowSize);\n  SpdyDataFrame partialDataFrame=new DefaultSpdyDataFrame(streamId,spdyDataFrame.content().readRetainedSlice(sendWindowSize));\n  spdySession.putPendingWrite(streamId,new SpdySession.PendingWrite(spdyDataFrame,promise));\n  final ChannelHandlerContext context=ctx;\n  ctx.write(partialDataFrame).addListener(new ChannelFutureListener(){\n    @Override public void operationComplete(    ChannelFuture future) throws Exception {\n      if (!future.isSuccess()) {\n        issueSessionError(context,SpdySessionStatus.INTERNAL_ERROR);\n      }\n    }\n  }\n);\n  return;\n}\n else {\n  spdySession.updateSendWindowSize(streamId,-1 * dataLength);\n  spdySession.updateSendWindowSize(SPDY_SESSION_STREAM_ID,-1 * dataLength);\n  final ChannelHandlerContext context=ctx;\n  promise.addListener(new ChannelFutureListener(){\n    @Override public void operationComplete(    ChannelFuture future) throws Exception {\n      if (!future.isSuccess()) {\n        issueSessionError(context,SpdySessionStatus.INTERNAL_ERROR);\n      }\n    }\n  }\n);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 155,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2672,
        "startLineNumber" : 484,
        "startColumnNumber" : 12,
        "endLineNumber" : 528,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (sendWindowSize <= 0) {\n  spdySession.putPendingWrite(streamId,new SpdySession.PendingWrite(spdyDataFrame,promise));\n  return;\n}\n else if (sendWindowSize < dataLength) {\n  spdySession.updateSendWindowSize(streamId,-1 * sendWindowSize);\n  spdySession.updateSendWindowSize(SPDY_SESSION_STREAM_ID,-1 * sendWindowSize);\n  SpdyDataFrame partialDataFrame=new DefaultSpdyDataFrame(streamId,spdyDataFrame.content().readRetainedSlice(sendWindowSize));\n  spdySession.putPendingWrite(streamId,new SpdySession.PendingWrite(spdyDataFrame,promise));\n  final ChannelHandlerContext context=ctx;\n  ctx.write(partialDataFrame).addListener(new ChannelFutureListener(){\n    @Override public void operationComplete(    ChannelFuture future) throws Exception {\n      if (!future.isSuccess()) {\n        issueSessionError(context,SpdySessionStatus.INTERNAL_ERROR);\n      }\n    }\n  }\n);\n  return;\n}\n else {\n  spdySession.updateSendWindowSize(streamId,-1 * dataLength);\n  spdySession.updateSendWindowSize(SPDY_SESSION_STREAM_ID,-1 * dataLength);\n  final ChannelHandlerContext context=ctx;\n  promise.addListener(new ChannelFutureListener(){\n    @Override public void operationComplete(    ChannelFuture future) throws Exception {\n      if (!future.isSuccess()) {\n        issueSessionError(context,SpdySessionStatus.INTERNAL_ERROR);\n      }\n    }\n  }\n);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 173,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 4160,
        "startLineNumber" : 454,
        "startColumnNumber" : 42,
        "endLineNumber" : 535,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  SpdyDataFrame spdyDataFrame=(SpdyDataFrame)msg;\n  int streamId=spdyDataFrame.streamId();\n  if (spdySession.isLocalSideClosed(streamId)) {\n    spdyDataFrame.release();\n    promise.setFailure(PROTOCOL_EXCEPTION);\n    return;\n  }\n  int dataLength=spdyDataFrame.content().readableBytes();\n  int sendWindowSize=spdySession.getSendWindowSize(streamId);\n  int sessionSendWindowSize=spdySession.getSendWindowSize(SPDY_SESSION_STREAM_ID);\n  sendWindowSize=Math.min(sendWindowSize,sessionSendWindowSize);\n  if (sendWindowSize <= 0) {\n    spdySession.putPendingWrite(streamId,new SpdySession.PendingWrite(spdyDataFrame,promise));\n    return;\n  }\n else   if (sendWindowSize < dataLength) {\n    spdySession.updateSendWindowSize(streamId,-1 * sendWindowSize);\n    spdySession.updateSendWindowSize(SPDY_SESSION_STREAM_ID,-1 * sendWindowSize);\n    SpdyDataFrame partialDataFrame=new DefaultSpdyDataFrame(streamId,spdyDataFrame.content().readRetainedSlice(sendWindowSize));\n    spdySession.putPendingWrite(streamId,new SpdySession.PendingWrite(spdyDataFrame,promise));\n    final ChannelHandlerContext context=ctx;\n    ctx.write(partialDataFrame).addListener(new ChannelFutureListener(){\n      @Override public void operationComplete(      ChannelFuture future) throws Exception {\n        if (!future.isSuccess()) {\n          issueSessionError(context,SpdySessionStatus.INTERNAL_ERROR);\n        }\n      }\n    }\n);\n    return;\n  }\n else {\n    spdySession.updateSendWindowSize(streamId,-1 * dataLength);\n    spdySession.updateSendWindowSize(SPDY_SESSION_STREAM_ID,-1 * dataLength);\n    final ChannelHandlerContext context=ctx;\n    promise.addListener(new ChannelFutureListener(){\n      @Override public void operationComplete(      ChannelFuture future) throws Exception {\n        if (!future.isSuccess()) {\n          issueSessionError(context,SpdySessionStatus.INTERNAL_ERROR);\n        }\n      }\n    }\n);\n  }\n  if (spdyDataFrame.isLast()) {\n    halfCloseStream(streamId,false,promise);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 250,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8898,
        "startLineNumber" : 454,
        "startColumnNumber" : 8,
        "endLineNumber" : 643,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (msg instanceof SpdyDataFrame) {\n  SpdyDataFrame spdyDataFrame=(SpdyDataFrame)msg;\n  int streamId=spdyDataFrame.streamId();\n  if (spdySession.isLocalSideClosed(streamId)) {\n    spdyDataFrame.release();\n    promise.setFailure(PROTOCOL_EXCEPTION);\n    return;\n  }\n  int dataLength=spdyDataFrame.content().readableBytes();\n  int sendWindowSize=spdySession.getSendWindowSize(streamId);\n  int sessionSendWindowSize=spdySession.getSendWindowSize(SPDY_SESSION_STREAM_ID);\n  sendWindowSize=Math.min(sendWindowSize,sessionSendWindowSize);\n  if (sendWindowSize <= 0) {\n    spdySession.putPendingWrite(streamId,new SpdySession.PendingWrite(spdyDataFrame,promise));\n    return;\n  }\n else   if (sendWindowSize < dataLength) {\n    spdySession.updateSendWindowSize(streamId,-1 * sendWindowSize);\n    spdySession.updateSendWindowSize(SPDY_SESSION_STREAM_ID,-1 * sendWindowSize);\n    SpdyDataFrame partialDataFrame=new DefaultSpdyDataFrame(streamId,spdyDataFrame.content().readRetainedSlice(sendWindowSize));\n    spdySession.putPendingWrite(streamId,new SpdySession.PendingWrite(spdyDataFrame,promise));\n    final ChannelHandlerContext context=ctx;\n    ctx.write(partialDataFrame).addListener(new ChannelFutureListener(){\n      @Override public void operationComplete(      ChannelFuture future) throws Exception {\n        if (!future.isSuccess()) {\n          issueSessionError(context,SpdySessionStatus.INTERNAL_ERROR);\n        }\n      }\n    }\n);\n    return;\n  }\n else {\n    spdySession.updateSendWindowSize(streamId,-1 * dataLength);\n    spdySession.updateSendWindowSize(SPDY_SESSION_STREAM_ID,-1 * dataLength);\n    final ChannelHandlerContext context=ctx;\n    promise.addListener(new ChannelFutureListener(){\n      @Override public void operationComplete(      ChannelFuture future) throws Exception {\n        if (!future.isSuccess()) {\n          issueSessionError(context,SpdySessionStatus.INTERNAL_ERROR);\n        }\n      }\n    }\n);\n  }\n  if (spdyDataFrame.isLast()) {\n    halfCloseStream(streamId,false,promise);\n  }\n}\n else if (msg instanceof SpdySynStreamFrame) {\n  SpdySynStreamFrame spdySynStreamFrame=(SpdySynStreamFrame)msg;\n  int streamId=spdySynStreamFrame.streamId();\n  if (isRemoteInitiatedId(streamId)) {\n    promise.setFailure(PROTOCOL_EXCEPTION);\n    return;\n  }\n  byte priority=spdySynStreamFrame.priority();\n  boolean remoteSideClosed=spdySynStreamFrame.isUnidirectional();\n  boolean localSideClosed=spdySynStreamFrame.isLast();\n  if (!acceptStream(streamId,priority,remoteSideClosed,localSideClosed)) {\n    promise.setFailure(PROTOCOL_EXCEPTION);\n    return;\n  }\n}\n else if (msg instanceof SpdySynReplyFrame) {\n  SpdySynReplyFrame spdySynReplyFrame=(SpdySynReplyFrame)msg;\n  int streamId=spdySynReplyFrame.streamId();\n  if (!isRemoteInitiatedId(streamId) || spdySession.isLocalSideClosed(streamId)) {\n    promise.setFailure(PROTOCOL_EXCEPTION);\n    return;\n  }\n  if (spdySynReplyFrame.isLast()) {\n    halfCloseStream(streamId,false,promise);\n  }\n}\n else if (msg instanceof SpdyRstStreamFrame) {\n  SpdyRstStreamFrame spdyRstStreamFrame=(SpdyRstStreamFrame)msg;\n  removeStream(spdyRstStreamFrame.streamId(),promise);\n}\n else if (msg instanceof SpdySettingsFrame) {\n  SpdySettingsFrame spdySettingsFrame=(SpdySettingsFrame)msg;\n  int settingsMinorVersion=spdySettingsFrame.getValue(SpdySettingsFrame.SETTINGS_MINOR_VERSION);\n  if (settingsMinorVersion >= 0 && settingsMinorVersion != minorVersion) {\n    promise.setFailure(PROTOCOL_EXCEPTION);\n    return;\n  }\n  int newConcurrentStreams=spdySettingsFrame.getValue(SpdySettingsFrame.SETTINGS_MAX_CONCURRENT_STREAMS);\n  if (newConcurrentStreams >= 0) {\n    localConcurrentStreams=newConcurrentStreams;\n  }\n  if (spdySettingsFrame.isPersisted(SpdySettingsFrame.SETTINGS_INITIAL_WINDOW_SIZE)) {\n    spdySettingsFrame.removeValue(SpdySettingsFrame.SETTINGS_INITIAL_WINDOW_SIZE);\n  }\n  spdySettingsFrame.setPersistValue(SpdySettingsFrame.SETTINGS_INITIAL_WINDOW_SIZE,false);\n  int newInitialWindowSize=spdySettingsFrame.getValue(SpdySettingsFrame.SETTINGS_INITIAL_WINDOW_SIZE);\n  if (newInitialWindowSize >= 0) {\n    updateInitialReceiveWindowSize(newInitialWindowSize);\n  }\n}\n else if (msg instanceof SpdyPingFrame) {\n  SpdyPingFrame spdyPingFrame=(SpdyPingFrame)msg;\n  if (isRemoteInitiatedId(spdyPingFrame.id())) {\n    ctx.fireExceptionCaught(new IllegalArgumentException(\"invalid PING ID: \" + spdyPingFrame.id()));\n    return;\n  }\n  pings.getAndIncrement();\n}\n else if (msg instanceof SpdyGoAwayFrame) {\n  promise.setFailure(PROTOCOL_EXCEPTION);\n  return;\n}\n else if (msg instanceof SpdyHeadersFrame) {\n  SpdyHeadersFrame spdyHeadersFrame=(SpdyHeadersFrame)msg;\n  int streamId=spdyHeadersFrame.streamId();\n  if (spdySession.isLocalSideClosed(streamId)) {\n    promise.setFailure(PROTOCOL_EXCEPTION);\n    return;\n  }\n  if (spdyHeadersFrame.isLast()) {\n    halfCloseStream(streamId,false,promise);\n  }\n}\n else if (msg instanceof SpdyWindowUpdateFrame) {\n  promise.setFailure(PROTOCOL_EXCEPTION);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 605,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8952,
        "startLineNumber" : 453,
        "startColumnNumber" : 119,
        "endLineNumber" : 646,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (msg instanceof SpdyDataFrame) {\n    SpdyDataFrame spdyDataFrame=(SpdyDataFrame)msg;\n    int streamId=spdyDataFrame.streamId();\n    if (spdySession.isLocalSideClosed(streamId)) {\n      spdyDataFrame.release();\n      promise.setFailure(PROTOCOL_EXCEPTION);\n      return;\n    }\n    int dataLength=spdyDataFrame.content().readableBytes();\n    int sendWindowSize=spdySession.getSendWindowSize(streamId);\n    int sessionSendWindowSize=spdySession.getSendWindowSize(SPDY_SESSION_STREAM_ID);\n    sendWindowSize=Math.min(sendWindowSize,sessionSendWindowSize);\n    if (sendWindowSize <= 0) {\n      spdySession.putPendingWrite(streamId,new SpdySession.PendingWrite(spdyDataFrame,promise));\n      return;\n    }\n else     if (sendWindowSize < dataLength) {\n      spdySession.updateSendWindowSize(streamId,-1 * sendWindowSize);\n      spdySession.updateSendWindowSize(SPDY_SESSION_STREAM_ID,-1 * sendWindowSize);\n      SpdyDataFrame partialDataFrame=new DefaultSpdyDataFrame(streamId,spdyDataFrame.content().readRetainedSlice(sendWindowSize));\n      spdySession.putPendingWrite(streamId,new SpdySession.PendingWrite(spdyDataFrame,promise));\n      final ChannelHandlerContext context=ctx;\n      ctx.write(partialDataFrame).addListener(new ChannelFutureListener(){\n        @Override public void operationComplete(        ChannelFuture future) throws Exception {\n          if (!future.isSuccess()) {\n            issueSessionError(context,SpdySessionStatus.INTERNAL_ERROR);\n          }\n        }\n      }\n);\n      return;\n    }\n else {\n      spdySession.updateSendWindowSize(streamId,-1 * dataLength);\n      spdySession.updateSendWindowSize(SPDY_SESSION_STREAM_ID,-1 * dataLength);\n      final ChannelHandlerContext context=ctx;\n      promise.addListener(new ChannelFutureListener(){\n        @Override public void operationComplete(        ChannelFuture future) throws Exception {\n          if (!future.isSuccess()) {\n            issueSessionError(context,SpdySessionStatus.INTERNAL_ERROR);\n          }\n        }\n      }\n);\n    }\n    if (spdyDataFrame.isLast()) {\n      halfCloseStream(streamId,false,promise);\n    }\n  }\n else   if (msg instanceof SpdySynStreamFrame) {\n    SpdySynStreamFrame spdySynStreamFrame=(SpdySynStreamFrame)msg;\n    int streamId=spdySynStreamFrame.streamId();\n    if (isRemoteInitiatedId(streamId)) {\n      promise.setFailure(PROTOCOL_EXCEPTION);\n      return;\n    }\n    byte priority=spdySynStreamFrame.priority();\n    boolean remoteSideClosed=spdySynStreamFrame.isUnidirectional();\n    boolean localSideClosed=spdySynStreamFrame.isLast();\n    if (!acceptStream(streamId,priority,remoteSideClosed,localSideClosed)) {\n      promise.setFailure(PROTOCOL_EXCEPTION);\n      return;\n    }\n  }\n else   if (msg instanceof SpdySynReplyFrame) {\n    SpdySynReplyFrame spdySynReplyFrame=(SpdySynReplyFrame)msg;\n    int streamId=spdySynReplyFrame.streamId();\n    if (!isRemoteInitiatedId(streamId) || spdySession.isLocalSideClosed(streamId)) {\n      promise.setFailure(PROTOCOL_EXCEPTION);\n      return;\n    }\n    if (spdySynReplyFrame.isLast()) {\n      halfCloseStream(streamId,false,promise);\n    }\n  }\n else   if (msg instanceof SpdyRstStreamFrame) {\n    SpdyRstStreamFrame spdyRstStreamFrame=(SpdyRstStreamFrame)msg;\n    removeStream(spdyRstStreamFrame.streamId(),promise);\n  }\n else   if (msg instanceof SpdySettingsFrame) {\n    SpdySettingsFrame spdySettingsFrame=(SpdySettingsFrame)msg;\n    int settingsMinorVersion=spdySettingsFrame.getValue(SpdySettingsFrame.SETTINGS_MINOR_VERSION);\n    if (settingsMinorVersion >= 0 && settingsMinorVersion != minorVersion) {\n      promise.setFailure(PROTOCOL_EXCEPTION);\n      return;\n    }\n    int newConcurrentStreams=spdySettingsFrame.getValue(SpdySettingsFrame.SETTINGS_MAX_CONCURRENT_STREAMS);\n    if (newConcurrentStreams >= 0) {\n      localConcurrentStreams=newConcurrentStreams;\n    }\n    if (spdySettingsFrame.isPersisted(SpdySettingsFrame.SETTINGS_INITIAL_WINDOW_SIZE)) {\n      spdySettingsFrame.removeValue(SpdySettingsFrame.SETTINGS_INITIAL_WINDOW_SIZE);\n    }\n    spdySettingsFrame.setPersistValue(SpdySettingsFrame.SETTINGS_INITIAL_WINDOW_SIZE,false);\n    int newInitialWindowSize=spdySettingsFrame.getValue(SpdySettingsFrame.SETTINGS_INITIAL_WINDOW_SIZE);\n    if (newInitialWindowSize >= 0) {\n      updateInitialReceiveWindowSize(newInitialWindowSize);\n    }\n  }\n else   if (msg instanceof SpdyPingFrame) {\n    SpdyPingFrame spdyPingFrame=(SpdyPingFrame)msg;\n    if (isRemoteInitiatedId(spdyPingFrame.id())) {\n      ctx.fireExceptionCaught(new IllegalArgumentException(\"invalid PING ID: \" + spdyPingFrame.id()));\n      return;\n    }\n    pings.getAndIncrement();\n  }\n else   if (msg instanceof SpdyGoAwayFrame) {\n    promise.setFailure(PROTOCOL_EXCEPTION);\n    return;\n  }\n else   if (msg instanceof SpdyHeadersFrame) {\n    SpdyHeadersFrame spdyHeadersFrame=(SpdyHeadersFrame)msg;\n    int streamId=spdyHeadersFrame.streamId();\n    if (spdySession.isLocalSideClosed(streamId)) {\n      promise.setFailure(PROTOCOL_EXCEPTION);\n      return;\n    }\n    if (spdyHeadersFrame.isLast()) {\n      halfCloseStream(streamId,false,promise);\n    }\n  }\n else   if (msg instanceof SpdyWindowUpdateFrame) {\n    promise.setFailure(PROTOCOL_EXCEPTION);\n    return;\n  }\n  ctx.write(msg,promise);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 612,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9067,
        "startLineNumber" : 453,
        "startColumnNumber" : 4,
        "endLineNumber" : 646,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void handleOutboundMessage(ChannelHandlerContext ctx,Object msg,ChannelPromise promise) throws Exception {\n  if (msg instanceof SpdyDataFrame) {\n    SpdyDataFrame spdyDataFrame=(SpdyDataFrame)msg;\n    int streamId=spdyDataFrame.streamId();\n    if (spdySession.isLocalSideClosed(streamId)) {\n      spdyDataFrame.release();\n      promise.setFailure(PROTOCOL_EXCEPTION);\n      return;\n    }\n    int dataLength=spdyDataFrame.content().readableBytes();\n    int sendWindowSize=spdySession.getSendWindowSize(streamId);\n    int sessionSendWindowSize=spdySession.getSendWindowSize(SPDY_SESSION_STREAM_ID);\n    sendWindowSize=Math.min(sendWindowSize,sessionSendWindowSize);\n    if (sendWindowSize <= 0) {\n      spdySession.putPendingWrite(streamId,new SpdySession.PendingWrite(spdyDataFrame,promise));\n      return;\n    }\n else     if (sendWindowSize < dataLength) {\n      spdySession.updateSendWindowSize(streamId,-1 * sendWindowSize);\n      spdySession.updateSendWindowSize(SPDY_SESSION_STREAM_ID,-1 * sendWindowSize);\n      SpdyDataFrame partialDataFrame=new DefaultSpdyDataFrame(streamId,spdyDataFrame.content().readRetainedSlice(sendWindowSize));\n      spdySession.putPendingWrite(streamId,new SpdySession.PendingWrite(spdyDataFrame,promise));\n      final ChannelHandlerContext context=ctx;\n      ctx.write(partialDataFrame).addListener(new ChannelFutureListener(){\n        @Override public void operationComplete(        ChannelFuture future) throws Exception {\n          if (!future.isSuccess()) {\n            issueSessionError(context,SpdySessionStatus.INTERNAL_ERROR);\n          }\n        }\n      }\n);\n      return;\n    }\n else {\n      spdySession.updateSendWindowSize(streamId,-1 * dataLength);\n      spdySession.updateSendWindowSize(SPDY_SESSION_STREAM_ID,-1 * dataLength);\n      final ChannelHandlerContext context=ctx;\n      promise.addListener(new ChannelFutureListener(){\n        @Override public void operationComplete(        ChannelFuture future) throws Exception {\n          if (!future.isSuccess()) {\n            issueSessionError(context,SpdySessionStatus.INTERNAL_ERROR);\n          }\n        }\n      }\n);\n    }\n    if (spdyDataFrame.isLast()) {\n      halfCloseStream(streamId,false,promise);\n    }\n  }\n else   if (msg instanceof SpdySynStreamFrame) {\n    SpdySynStreamFrame spdySynStreamFrame=(SpdySynStreamFrame)msg;\n    int streamId=spdySynStreamFrame.streamId();\n    if (isRemoteInitiatedId(streamId)) {\n      promise.setFailure(PROTOCOL_EXCEPTION);\n      return;\n    }\n    byte priority=spdySynStreamFrame.priority();\n    boolean remoteSideClosed=spdySynStreamFrame.isUnidirectional();\n    boolean localSideClosed=spdySynStreamFrame.isLast();\n    if (!acceptStream(streamId,priority,remoteSideClosed,localSideClosed)) {\n      promise.setFailure(PROTOCOL_EXCEPTION);\n      return;\n    }\n  }\n else   if (msg instanceof SpdySynReplyFrame) {\n    SpdySynReplyFrame spdySynReplyFrame=(SpdySynReplyFrame)msg;\n    int streamId=spdySynReplyFrame.streamId();\n    if (!isRemoteInitiatedId(streamId) || spdySession.isLocalSideClosed(streamId)) {\n      promise.setFailure(PROTOCOL_EXCEPTION);\n      return;\n    }\n    if (spdySynReplyFrame.isLast()) {\n      halfCloseStream(streamId,false,promise);\n    }\n  }\n else   if (msg instanceof SpdyRstStreamFrame) {\n    SpdyRstStreamFrame spdyRstStreamFrame=(SpdyRstStreamFrame)msg;\n    removeStream(spdyRstStreamFrame.streamId(),promise);\n  }\n else   if (msg instanceof SpdySettingsFrame) {\n    SpdySettingsFrame spdySettingsFrame=(SpdySettingsFrame)msg;\n    int settingsMinorVersion=spdySettingsFrame.getValue(SpdySettingsFrame.SETTINGS_MINOR_VERSION);\n    if (settingsMinorVersion >= 0 && settingsMinorVersion != minorVersion) {\n      promise.setFailure(PROTOCOL_EXCEPTION);\n      return;\n    }\n    int newConcurrentStreams=spdySettingsFrame.getValue(SpdySettingsFrame.SETTINGS_MAX_CONCURRENT_STREAMS);\n    if (newConcurrentStreams >= 0) {\n      localConcurrentStreams=newConcurrentStreams;\n    }\n    if (spdySettingsFrame.isPersisted(SpdySettingsFrame.SETTINGS_INITIAL_WINDOW_SIZE)) {\n      spdySettingsFrame.removeValue(SpdySettingsFrame.SETTINGS_INITIAL_WINDOW_SIZE);\n    }\n    spdySettingsFrame.setPersistValue(SpdySettingsFrame.SETTINGS_INITIAL_WINDOW_SIZE,false);\n    int newInitialWindowSize=spdySettingsFrame.getValue(SpdySettingsFrame.SETTINGS_INITIAL_WINDOW_SIZE);\n    if (newInitialWindowSize >= 0) {\n      updateInitialReceiveWindowSize(newInitialWindowSize);\n    }\n  }\n else   if (msg instanceof SpdyPingFrame) {\n    SpdyPingFrame spdyPingFrame=(SpdyPingFrame)msg;\n    if (isRemoteInitiatedId(spdyPingFrame.id())) {\n      ctx.fireExceptionCaught(new IllegalArgumentException(\"invalid PING ID: \" + spdyPingFrame.id()));\n      return;\n    }\n    pings.getAndIncrement();\n  }\n else   if (msg instanceof SpdyGoAwayFrame) {\n    promise.setFailure(PROTOCOL_EXCEPTION);\n    return;\n  }\n else   if (msg instanceof SpdyHeadersFrame) {\n    SpdyHeadersFrame spdyHeadersFrame=(SpdyHeadersFrame)msg;\n    int streamId=spdyHeadersFrame.streamId();\n    if (spdySession.isLocalSideClosed(streamId)) {\n      promise.setFailure(PROTOCOL_EXCEPTION);\n      return;\n    }\n    if (spdyHeadersFrame.isLast()) {\n      halfCloseStream(streamId,false,promise);\n    }\n  }\n else   if (msg instanceof SpdyWindowUpdateFrame) {\n    promise.setFailure(PROTOCOL_EXCEPTION);\n    return;\n  }\n  ctx.write(msg,promise);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 630,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 498,
        "startColumnNumber" : 16,
        "endLineNumber" : 498,
        "endColumnNumber" : 108
      },
      "nodeContext" : "spdySession.putPendingWrite(streamId,new SpdySession.PendingWrite(spdyDataFrame,promise));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "io.netty.handler.codec.spdy.SpdySession"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 486,
    "startColumnNumber" : 58,
    "endLineNumber" : 486,
    "endColumnNumber" : 69
  }, {
    "charLength" : 11,
    "startLineNumber" : 498,
    "startColumnNumber" : 58,
    "endLineNumber" : 498,
    "endColumnNumber" : 69
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 7
  } ]
}