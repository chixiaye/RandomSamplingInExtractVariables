{
  "id" : 76,
  "expression" : "cs != lastCS",
  "projectName" : "jenkinsci@jenkins",
  "commitID" : "c44fa7f4cf769257844d562353a579a198ea517a",
  "filePath" : "/core/src/main/java/jenkins/security/RSAConfidentialKey.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "cs != lastCS",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 76,
      "startColumnNumber" : 32,
      "endLineNumber" : 76,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 76,
        "startColumnNumber" : 16,
        "endLineNumber" : 76,
        "endColumnNumber" : 44
      },
      "nodeContext" : "priv == null || cs != lastCS",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1043,
        "startLineNumber" : 76,
        "startColumnNumber" : 12,
        "endLineNumber" : 94,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (priv == null || cs != lastCS) {\n  lastCS=cs;\n  byte[] payload=load();\n  if (payload == null) {\n    KeyPairGenerator gen=KeyPairGenerator.getInstance(\"RSA\");\n    gen.initialize(2048,cs.secureRandom());\n    KeyPair keys=gen.generateKeyPair();\n    priv=(RSAPrivateKey)keys.getPrivate();\n    pub=(RSAPublicKey)keys.getPublic();\n    store(priv.getEncoded());\n  }\n else {\n    KeyFactory keyFactory=KeyFactory.getInstance(\"RSA\");\n    priv=(RSAPrivateKey)keyFactory.generatePrivate(new PKCS8EncodedKeySpec(payload));\n    RSAPrivateCrtKey pks=(RSAPrivateCrtKey)priv;\n    pub=(RSAPublicKey)keyFactory.generatePublic(new RSAPublicKeySpec(pks.getModulus(),pks.getPublicExponent()));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 125,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1156,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 96,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ConfidentialStore cs=ConfidentialStore.get();\n  if (priv == null || cs != lastCS) {\n    lastCS=cs;\n    byte[] payload=load();\n    if (payload == null) {\n      KeyPairGenerator gen=KeyPairGenerator.getInstance(\"RSA\");\n      gen.initialize(2048,cs.secureRandom());\n      KeyPair keys=gen.generateKeyPair();\n      priv=(RSAPrivateKey)keys.getPrivate();\n      pub=(RSAPublicKey)keys.getPublic();\n      store(priv.getEncoded());\n    }\n else {\n      KeyFactory keyFactory=KeyFactory.getInstance(\"RSA\");\n      priv=(RSAPrivateKey)keyFactory.generatePrivate(new PKCS8EncodedKeySpec(payload));\n      RSAPrivateCrtKey pks=(RSAPrivateCrtKey)priv;\n      pub=(RSAPublicKey)keyFactory.generatePublic(new RSAPublicKeySpec(pks.getModulus(),pks.getPublicExponent()));\n    }\n  }\n  return priv;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 136,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1293,
        "startLineNumber" : 74,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  ConfidentialStore cs=ConfidentialStore.get();\n  if (priv == null || cs != lastCS) {\n    lastCS=cs;\n    byte[] payload=load();\n    if (payload == null) {\n      KeyPairGenerator gen=KeyPairGenerator.getInstance(\"RSA\");\n      gen.initialize(2048,cs.secureRandom());\n      KeyPair keys=gen.generateKeyPair();\n      priv=(RSAPrivateKey)keys.getPrivate();\n      pub=(RSAPublicKey)keys.getPublic();\n      store(priv.getEncoded());\n    }\n else {\n      KeyFactory keyFactory=KeyFactory.getInstance(\"RSA\");\n      priv=(RSAPrivateKey)keyFactory.generatePrivate(new PKCS8EncodedKeySpec(payload));\n      RSAPrivateCrtKey pks=(RSAPrivateCrtKey)priv;\n      pub=(RSAPublicKey)keyFactory.generatePublic(new RSAPublicKeySpec(pks.getModulus(),pks.getPublicExponent()));\n    }\n  }\n  return priv;\n}\n catch (IOException|GeneralSecurityException e) {\n  throw new Error(\"Failed to load the key: \" + getId(),e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 155,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1311,
        "startLineNumber" : 73,
        "startColumnNumber" : 57,
        "endLineNumber" : 99,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    ConfidentialStore cs=ConfidentialStore.get();\n    if (priv == null || cs != lastCS) {\n      lastCS=cs;\n      byte[] payload=load();\n      if (payload == null) {\n        KeyPairGenerator gen=KeyPairGenerator.getInstance(\"RSA\");\n        gen.initialize(2048,cs.secureRandom());\n        KeyPair keys=gen.generateKeyPair();\n        priv=(RSAPrivateKey)keys.getPrivate();\n        pub=(RSAPublicKey)keys.getPublic();\n        store(priv.getEncoded());\n      }\n else {\n        KeyFactory keyFactory=KeyFactory.getInstance(\"RSA\");\n        priv=(RSAPrivateKey)keyFactory.generatePrivate(new PKCS8EncodedKeySpec(payload));\n        RSAPrivateCrtKey pks=(RSAPrivateCrtKey)priv;\n        pub=(RSAPublicKey)keyFactory.generatePublic(new RSAPublicKeySpec(pks.getModulus(),pks.getPublicExponent()));\n      }\n    }\n    return priv;\n  }\n catch (  IOException|GeneralSecurityException e) {\n    throw new Error(\"Failed to load the key: \" + getId(),e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 156,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1777,
        "startLineNumber" : 63,
        "startColumnNumber" : 4,
        "endLineNumber" : 99,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Obtains the private key (lazily.) <p> This method is not publicly exposed as per the design principle of  {@link ConfidentialKey}. Instead of exposing private key, define methods that use them in specific way, such as {@link RSADigitalSignatureConfidentialKey}.\n * @throws Error If key cannot be loaded for some reasons, we fail.\n */\nprotected synchronized RSAPrivateKey getPrivateKey(){\n  try {\n    ConfidentialStore cs=ConfidentialStore.get();\n    if (priv == null || cs != lastCS) {\n      lastCS=cs;\n      byte[] payload=load();\n      if (payload == null) {\n        KeyPairGenerator gen=KeyPairGenerator.getInstance(\"RSA\");\n        gen.initialize(2048,cs.secureRandom());\n        KeyPair keys=gen.generateKeyPair();\n        priv=(RSAPrivateKey)keys.getPrivate();\n        pub=(RSAPublicKey)keys.getPublic();\n        store(priv.getEncoded());\n      }\n else {\n        KeyFactory keyFactory=KeyFactory.getInstance(\"RSA\");\n        priv=(RSAPrivateKey)keyFactory.generatePrivate(new PKCS8EncodedKeySpec(payload));\n        RSAPrivateCrtKey pks=(RSAPrivateCrtKey)priv;\n        pub=(RSAPublicKey)keyFactory.generatePublic(new RSAPublicKeySpec(pks.getModulus(),pks.getPublicExponent()));\n      }\n    }\n    return priv;\n  }\n catch (  IOException|GeneralSecurityException e) {\n    throw new Error(\"Failed to load the key: \" + getId(),e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 163,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 76,
        "startColumnNumber" : 16,
        "endLineNumber" : 76,
        "endColumnNumber" : 44
      },
      "nodeContext" : "priv == null || cs != lastCS",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 76,
    "startColumnNumber" : 32,
    "endLineNumber" : 76,
    "endColumnNumber" : 44
  } ],
  "layoutRelationDataList" : [ ]
}