{
  "id" : 397,
  "expression" : "Starlark.toIterable(getSaved(\"[v['name'] for v in rs.values()]\"))",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/test/java/com/google/devtools/build/lib/packages/NativeExistingRulesTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Starlark.toIterable(getSaved(\"[v['name'] for v in rs.values()]\"))",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 65,
      "startLineNumber" : 346,
      "startColumnNumber" : 15,
      "endLineNumber" : 346,
      "endColumnNumber" : 80
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 346,
        "startColumnNumber" : 4,
        "endLineNumber" : 346,
        "endColumnNumber" : 81
      },
      "nodeContext" : "assertThat(Starlark.toIterable(getSaved(\"[v['name'] for v in rs.values()]\")))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 112,
        "startLineNumber" : 346,
        "startColumnNumber" : 4,
        "endLineNumber" : 347,
        "endColumnNumber" : 34
      },
      "nodeContext" : "assertThat(Starlark.toIterable(getSaved(\"[v['name'] for v in rs.values()]\"))).containsExactly(\"x\",\"y\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 346,
        "startColumnNumber" : 4,
        "endLineNumber" : 347,
        "endColumnNumber" : 35
      },
      "nodeContext" : "assertThat(Starlark.toIterable(getSaved(\"[v['name'] for v in rs.values()]\"))).containsExactly(\"x\",\"y\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2346,
        "startLineNumber" : 317,
        "startColumnNumber" : 69,
        "endLineNumber" : 357,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  scratch.file(\"test/BUILD\",\"load('inc.bzl', 'f')\",\"f()\");\n  scratch.file(\"test/inc.bzl\",\"def f():\",\"  native.config_setting(name='x', define_values={'key_x': 'value_x'})\",\"  native.config_setting(name='y', define_values={'key_y': 'value_y'})\",\"  rs = native.existing_rules()\",\"  print('rs == %s' % repr(rs))\",\"  test.save('[key for key in rs]', [key for key in rs])\",\"  test.save('list(rs)', list(rs))\",\"  test.save('rs.keys()', rs.keys())\",\"  test.save(\\\"[v['name'] for v in rs.values()]\\\", [v['name'] for v in rs.values()])\",\"  test.save(\\\"[(i[0], i[1]['name']) for i in rs.items()]\\\", [(i[0], i[1]['name']) for i in\" + \" rs.items()])\",\"  test.save(\\\"rs['x']['define_values']\\\", rs['x']['define_values'])\",\"  test.save(\\\"rs.get('x', {'name': 'z'})['name']\\\", rs.get('x', {'name': 'z'})['name'])\",\"  test.save(\\\"rs.get('invalid_rule', {'name': 'invalid_rule'})\\\", rs.get('invalid_rule',\" + \" {'name': 'invalid_rule'}))\",\"  test.save(\\\"'x' in rs\\\", 'x' in rs)\",\"  test.save(\\\"'invalid_rule' in rs\\\", 'invalid_rule' in rs)\");\n  assertThat(getConfiguredTarget(\"//test:BUILD\")).isNotNull();\n  assertThat(Starlark.toIterable(getSaved(\"[key for key in rs]\"))).containsExactly(\"x\",\"y\");\n  assertThat(Starlark.toIterable(getSaved(\"list(rs)\"))).containsExactly(\"x\",\"y\");\n  assertThat(Starlark.toIterable(getSaved(\"rs.keys()\"))).containsExactly(\"x\",\"y\");\n  assertThat(Starlark.toIterable(getSaved(\"[v['name'] for v in rs.values()]\"))).containsExactly(\"x\",\"y\");\n  assertThat(Starlark.toIterable(getSaved(\"[(i[0], i[1]['name']) for i in rs.items()]\"))).containsExactly(Tuple.of(\"x\",\"x\"),Tuple.of(\"y\",\"y\"));\n  assertThat(getSaved(\"rs['x']['define_values']\")).isEqualTo(Dict.builder().put(\"key_x\",\"value_x\").buildImmutable());\n  assertThat(getSaved(\"rs.get('x', {'name': 'z'})['name']\")).isEqualTo(\"x\");\n  assertThat(getSaved(\"rs.get('invalid_rule', {'name': 'invalid_rule'})\")).isEqualTo(Dict.builder().put(\"name\",\"invalid_rule\").buildImmutable());\n  assertThat(getSaved(\"'x' in rs\")).isEqualTo(true);\n  assertThat(getSaved(\"'invalid_rule' in rs\")).isEqualTo(false);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 174,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2421,
        "startLineNumber" : 316,
        "startColumnNumber" : 2,
        "endLineNumber" : 357,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void existingRules_returnsDictLikeObject() throws Exception {\n  scratch.file(\"test/BUILD\",\"load('inc.bzl', 'f')\",\"f()\");\n  scratch.file(\"test/inc.bzl\",\"def f():\",\"  native.config_setting(name='x', define_values={'key_x': 'value_x'})\",\"  native.config_setting(name='y', define_values={'key_y': 'value_y'})\",\"  rs = native.existing_rules()\",\"  print('rs == %s' % repr(rs))\",\"  test.save('[key for key in rs]', [key for key in rs])\",\"  test.save('list(rs)', list(rs))\",\"  test.save('rs.keys()', rs.keys())\",\"  test.save(\\\"[v['name'] for v in rs.values()]\\\", [v['name'] for v in rs.values()])\",\"  test.save(\\\"[(i[0], i[1]['name']) for i in rs.items()]\\\", [(i[0], i[1]['name']) for i in\" + \" rs.items()])\",\"  test.save(\\\"rs['x']['define_values']\\\", rs['x']['define_values'])\",\"  test.save(\\\"rs.get('x', {'name': 'z'})['name']\\\", rs.get('x', {'name': 'z'})['name'])\",\"  test.save(\\\"rs.get('invalid_rule', {'name': 'invalid_rule'})\\\", rs.get('invalid_rule',\" + \" {'name': 'invalid_rule'}))\",\"  test.save(\\\"'x' in rs\\\", 'x' in rs)\",\"  test.save(\\\"'invalid_rule' in rs\\\", 'invalid_rule' in rs)\");\n  assertThat(getConfiguredTarget(\"//test:BUILD\")).isNotNull();\n  assertThat(Starlark.toIterable(getSaved(\"[key for key in rs]\"))).containsExactly(\"x\",\"y\");\n  assertThat(Starlark.toIterable(getSaved(\"list(rs)\"))).containsExactly(\"x\",\"y\");\n  assertThat(Starlark.toIterable(getSaved(\"rs.keys()\"))).containsExactly(\"x\",\"y\");\n  assertThat(Starlark.toIterable(getSaved(\"[v['name'] for v in rs.values()]\"))).containsExactly(\"x\",\"y\");\n  assertThat(Starlark.toIterable(getSaved(\"[(i[0], i[1]['name']) for i in rs.items()]\"))).containsExactly(Tuple.of(\"x\",\"x\"),Tuple.of(\"y\",\"y\"));\n  assertThat(getSaved(\"rs['x']['define_values']\")).isEqualTo(Dict.builder().put(\"key_x\",\"value_x\").buildImmutable());\n  assertThat(getSaved(\"rs.get('x', {'name': 'z'})['name']\")).isEqualTo(\"x\");\n  assertThat(getSaved(\"rs.get('invalid_rule', {'name': 'invalid_rule'})\")).isEqualTo(Dict.builder().put(\"name\",\"invalid_rule\").buildImmutable());\n  assertThat(getSaved(\"'x' in rs\")).isEqualTo(true);\n  assertThat(getSaved(\"'invalid_rule' in rs\")).isEqualTo(false);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 182,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 346,
        "startColumnNumber" : 4,
        "endLineNumber" : 346,
        "endColumnNumber" : 81
      },
      "nodeContext" : "assertThat(Starlark.toIterable(getSaved(\"[v['name'] for v in rs.values()]\")))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 9,
    "type" : "java.lang.Iterable<>"
  } ],
  "positionList" : [ {
    "charLength" : 65,
    "startLineNumber" : 346,
    "startColumnNumber" : 15,
    "endLineNumber" : 346,
    "endColumnNumber" : 80
  } ],
  "layoutRelationDataList" : [ ]
}