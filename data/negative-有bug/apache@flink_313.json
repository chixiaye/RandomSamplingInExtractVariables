{
  "id" : 313,
  "expression" : "record",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-formats/flink-avro/src/main/java/org/apache/flink/formats/avro/typeutils/AvroSchemaConverter.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "record",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 409,
      "startColumnNumber" : 49,
      "endLineNumber" : 409,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,thenExpression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 409,
        "startColumnNumber" : 34,
        "endLineNumber" : 409,
        "endColumnNumber" : 56
      },
      "nodeContext" : "nullableSchema(record)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 409,
        "startColumnNumber" : 23,
        "endLineNumber" : 409,
        "endColumnNumber" : 65
      },
      "nodeContext" : "nullable ? nullableSchema(record) : record",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 409,
        "startColumnNumber" : 16,
        "endLineNumber" : 409,
        "endColumnNumber" : 66
      },
      "nodeContext" : "return nullable ? nullableSchema(record) : record;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5791,
        "startLineNumber" : 322,
        "startColumnNumber" : 8,
        "endLineNumber" : 431,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (logicalType.getTypeRoot()) {\ncase NULL:  return SchemaBuilder.builder().nullType();\ncase BOOLEAN:Schema bool=SchemaBuilder.builder().booleanType();\nreturn nullable ? nullableSchema(bool) : bool;\ncase TINYINT:case SMALLINT:case INTEGER:Schema integer=SchemaBuilder.builder().intType();\nreturn nullable ? nullableSchema(integer) : integer;\ncase BIGINT:Schema bigint=SchemaBuilder.builder().longType();\nreturn nullable ? nullableSchema(bigint) : bigint;\ncase FLOAT:Schema f=SchemaBuilder.builder().floatType();\nreturn nullable ? nullableSchema(f) : f;\ncase DOUBLE:Schema d=SchemaBuilder.builder().doubleType();\nreturn nullable ? nullableSchema(d) : d;\ncase CHAR:case VARCHAR:Schema str=SchemaBuilder.builder().stringType();\nreturn nullable ? nullableSchema(str) : str;\ncase BINARY:case VARBINARY:Schema binary=SchemaBuilder.builder().bytesType();\nreturn nullable ? nullableSchema(binary) : binary;\ncase TIMESTAMP_WITHOUT_TIME_ZONE:final TimestampType timestampType=(TimestampType)logicalType;\nprecision=timestampType.getPrecision();\norg.apache.avro.LogicalType avroLogicalType;\nif (precision <= 3) {\navroLogicalType=LogicalTypes.timestampMillis();\n}\n else {\nthrow new IllegalArgumentException(\"Avro does not support TIMESTAMP type \" + \"with precision: \" + precision + \", it only supports precision less than 3.\");\n}\nSchema timestamp=avroLogicalType.addToSchema(SchemaBuilder.builder().longType());\nreturn nullable ? nullableSchema(timestamp) : timestamp;\ncase DATE:Schema date=LogicalTypes.date().addToSchema(SchemaBuilder.builder().intType());\nreturn nullable ? nullableSchema(date) : date;\ncase TIME_WITHOUT_TIME_ZONE:precision=((TimeType)logicalType).getPrecision();\nif (precision > 3) {\nthrow new IllegalArgumentException(\"Avro does not support TIME type with precision: \" + precision + \", it only supports precision less than 3.\");\n}\nSchema time=LogicalTypes.timeMillis().addToSchema(SchemaBuilder.builder().intType());\nreturn nullable ? nullableSchema(time) : time;\ncase DECIMAL:DecimalType decimalType=(DecimalType)logicalType;\nSchema decimal=LogicalTypes.decimal(decimalType.getPrecision(),decimalType.getScale()).addToSchema(SchemaBuilder.builder().bytesType());\nreturn nullable ? nullableSchema(decimal) : decimal;\ncase ROW:RowType rowType=(RowType)logicalType;\nList<String> fieldNames=rowType.getFieldNames();\nSchemaBuilder.FieldAssembler<Schema> builder=SchemaBuilder.builder().record(rowName).fields();\nfor (int i=0; i < rowType.getFieldCount(); i++) {\nString fieldName=fieldNames.get(i);\nLogicalType fieldType=rowType.getTypeAt(i);\nSchemaBuilder.GenericDefault<Schema> fieldBuilder=builder.name(fieldName).type(convertToSchema(fieldType,rowName + \"_\" + fieldName));\nif (fieldType.isNullable()) {\nbuilder=fieldBuilder.withDefault(null);\n}\n else {\nbuilder=fieldBuilder.noDefault();\n}\n}\nSchema record=builder.endRecord();\nreturn nullable ? nullableSchema(record) : record;\ncase MULTISET:case MAP:Schema map=SchemaBuilder.builder().map().values(convertToSchema(extractValueTypeToAvroMap(logicalType),rowName));\nreturn nullable ? nullableSchema(map) : map;\ncase ARRAY:ArrayType arrayType=(ArrayType)logicalType;\nSchema array=SchemaBuilder.builder().array().items(convertToSchema(arrayType.getElementType(),rowName));\nreturn nullable ? nullableSchema(array) : array;\ncase RAW:case TIMESTAMP_WITH_LOCAL_TIME_ZONE:default:throw new UnsupportedOperationException(\"Unsupported to derive Schema for type: \" + logicalType);\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 540,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5883,
        "startLineNumber" : 319,
        "startColumnNumber" : 82,
        "endLineNumber" : 432,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int precision;\n  boolean nullable=logicalType.isNullable();\nswitch (logicalType.getTypeRoot()) {\ncase NULL:    return SchemaBuilder.builder().nullType();\ncase BOOLEAN:  Schema bool=SchemaBuilder.builder().booleanType();\nreturn nullable ? nullableSchema(bool) : bool;\ncase TINYINT:case SMALLINT:case INTEGER:Schema integer=SchemaBuilder.builder().intType();\nreturn nullable ? nullableSchema(integer) : integer;\ncase BIGINT:Schema bigint=SchemaBuilder.builder().longType();\nreturn nullable ? nullableSchema(bigint) : bigint;\ncase FLOAT:Schema f=SchemaBuilder.builder().floatType();\nreturn nullable ? nullableSchema(f) : f;\ncase DOUBLE:Schema d=SchemaBuilder.builder().doubleType();\nreturn nullable ? nullableSchema(d) : d;\ncase CHAR:case VARCHAR:Schema str=SchemaBuilder.builder().stringType();\nreturn nullable ? nullableSchema(str) : str;\ncase BINARY:case VARBINARY:Schema binary=SchemaBuilder.builder().bytesType();\nreturn nullable ? nullableSchema(binary) : binary;\ncase TIMESTAMP_WITHOUT_TIME_ZONE:final TimestampType timestampType=(TimestampType)logicalType;\nprecision=timestampType.getPrecision();\norg.apache.avro.LogicalType avroLogicalType;\nif (precision <= 3) {\navroLogicalType=LogicalTypes.timestampMillis();\n}\n else {\nthrow new IllegalArgumentException(\"Avro does not support TIMESTAMP type \" + \"with precision: \" + precision + \", it only supports precision less than 3.\");\n}\nSchema timestamp=avroLogicalType.addToSchema(SchemaBuilder.builder().longType());\nreturn nullable ? nullableSchema(timestamp) : timestamp;\ncase DATE:Schema date=LogicalTypes.date().addToSchema(SchemaBuilder.builder().intType());\nreturn nullable ? nullableSchema(date) : date;\ncase TIME_WITHOUT_TIME_ZONE:precision=((TimeType)logicalType).getPrecision();\nif (precision > 3) {\nthrow new IllegalArgumentException(\"Avro does not support TIME type with precision: \" + precision + \", it only supports precision less than 3.\");\n}\nSchema time=LogicalTypes.timeMillis().addToSchema(SchemaBuilder.builder().intType());\nreturn nullable ? nullableSchema(time) : time;\ncase DECIMAL:DecimalType decimalType=(DecimalType)logicalType;\nSchema decimal=LogicalTypes.decimal(decimalType.getPrecision(),decimalType.getScale()).addToSchema(SchemaBuilder.builder().bytesType());\nreturn nullable ? nullableSchema(decimal) : decimal;\ncase ROW:RowType rowType=(RowType)logicalType;\nList<String> fieldNames=rowType.getFieldNames();\nSchemaBuilder.FieldAssembler<Schema> builder=SchemaBuilder.builder().record(rowName).fields();\nfor (int i=0; i < rowType.getFieldCount(); i++) {\nString fieldName=fieldNames.get(i);\nLogicalType fieldType=rowType.getTypeAt(i);\nSchemaBuilder.GenericDefault<Schema> fieldBuilder=builder.name(fieldName).type(convertToSchema(fieldType,rowName + \"_\" + fieldName));\nif (fieldType.isNullable()) {\nbuilder=fieldBuilder.withDefault(null);\n}\n else {\nbuilder=fieldBuilder.noDefault();\n}\n}\nSchema record=builder.endRecord();\nreturn nullable ? nullableSchema(record) : record;\ncase MULTISET:case MAP:Schema map=SchemaBuilder.builder().map().values(convertToSchema(extractValueTypeToAvroMap(logicalType),rowName));\nreturn nullable ? nullableSchema(map) : map;\ncase ARRAY:ArrayType arrayType=(ArrayType)logicalType;\nSchema array=SchemaBuilder.builder().array().items(convertToSchema(arrayType.getElementType(),rowName));\nreturn nullable ? nullableSchema(array) : array;\ncase RAW:case TIMESTAMP_WITH_LOCAL_TIME_ZONE:default:throw new UnsupportedOperationException(\"Unsupported to derive Schema for type: \" + logicalType);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 552,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6405,
        "startLineNumber" : 309,
        "startColumnNumber" : 4,
        "endLineNumber" : 432,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Converts Flink SQL  {@link LogicalType} (can be nested) into an Avro schema.<p>The \"{rowName}_\" is used as the nested row type name prefix in order to generate the right schema. Nested record type that only differs with type name is still compatible.\n * @param logicalType logical type\n * @param rowName the record name\n * @return Avro's {@link Schema} matching this logical type.\n */\npublic static Schema convertToSchema(LogicalType logicalType,String rowName){\n  int precision;\n  boolean nullable=logicalType.isNullable();\nswitch (logicalType.getTypeRoot()) {\ncase NULL:    return SchemaBuilder.builder().nullType();\ncase BOOLEAN:  Schema bool=SchemaBuilder.builder().booleanType();\nreturn nullable ? nullableSchema(bool) : bool;\ncase TINYINT:case SMALLINT:case INTEGER:Schema integer=SchemaBuilder.builder().intType();\nreturn nullable ? nullableSchema(integer) : integer;\ncase BIGINT:Schema bigint=SchemaBuilder.builder().longType();\nreturn nullable ? nullableSchema(bigint) : bigint;\ncase FLOAT:Schema f=SchemaBuilder.builder().floatType();\nreturn nullable ? nullableSchema(f) : f;\ncase DOUBLE:Schema d=SchemaBuilder.builder().doubleType();\nreturn nullable ? nullableSchema(d) : d;\ncase CHAR:case VARCHAR:Schema str=SchemaBuilder.builder().stringType();\nreturn nullable ? nullableSchema(str) : str;\ncase BINARY:case VARBINARY:Schema binary=SchemaBuilder.builder().bytesType();\nreturn nullable ? nullableSchema(binary) : binary;\ncase TIMESTAMP_WITHOUT_TIME_ZONE:final TimestampType timestampType=(TimestampType)logicalType;\nprecision=timestampType.getPrecision();\norg.apache.avro.LogicalType avroLogicalType;\nif (precision <= 3) {\navroLogicalType=LogicalTypes.timestampMillis();\n}\n else {\nthrow new IllegalArgumentException(\"Avro does not support TIMESTAMP type \" + \"with precision: \" + precision + \", it only supports precision less than 3.\");\n}\nSchema timestamp=avroLogicalType.addToSchema(SchemaBuilder.builder().longType());\nreturn nullable ? nullableSchema(timestamp) : timestamp;\ncase DATE:Schema date=LogicalTypes.date().addToSchema(SchemaBuilder.builder().intType());\nreturn nullable ? nullableSchema(date) : date;\ncase TIME_WITHOUT_TIME_ZONE:precision=((TimeType)logicalType).getPrecision();\nif (precision > 3) {\nthrow new IllegalArgumentException(\"Avro does not support TIME type with precision: \" + precision + \", it only supports precision less than 3.\");\n}\nSchema time=LogicalTypes.timeMillis().addToSchema(SchemaBuilder.builder().intType());\nreturn nullable ? nullableSchema(time) : time;\ncase DECIMAL:DecimalType decimalType=(DecimalType)logicalType;\nSchema decimal=LogicalTypes.decimal(decimalType.getPrecision(),decimalType.getScale()).addToSchema(SchemaBuilder.builder().bytesType());\nreturn nullable ? nullableSchema(decimal) : decimal;\ncase ROW:RowType rowType=(RowType)logicalType;\nList<String> fieldNames=rowType.getFieldNames();\nSchemaBuilder.FieldAssembler<Schema> builder=SchemaBuilder.builder().record(rowName).fields();\nfor (int i=0; i < rowType.getFieldCount(); i++) {\nString fieldName=fieldNames.get(i);\nLogicalType fieldType=rowType.getTypeAt(i);\nSchemaBuilder.GenericDefault<Schema> fieldBuilder=builder.name(fieldName).type(convertToSchema(fieldType,rowName + \"_\" + fieldName));\nif (fieldType.isNullable()) {\nbuilder=fieldBuilder.withDefault(null);\n}\n else {\nbuilder=fieldBuilder.noDefault();\n}\n}\nSchema record=builder.endRecord();\nreturn nullable ? nullableSchema(record) : record;\ncase MULTISET:case MAP:Schema map=SchemaBuilder.builder().map().values(convertToSchema(extractValueTypeToAvroMap(logicalType),rowName));\nreturn nullable ? nullableSchema(map) : map;\ncase ARRAY:ArrayType arrayType=(ArrayType)logicalType;\nSchema array=SchemaBuilder.builder().array().items(convertToSchema(arrayType.getElementType(),rowName));\nreturn nullable ? nullableSchema(array) : array;\ncase RAW:case TIMESTAMP_WITH_LOCAL_TIME_ZONE:default:throw new UnsupportedOperationException(\"Unsupported to derive Schema for type: \" + logicalType);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 567,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 409,
        "startColumnNumber" : 16,
        "endLineNumber" : 409,
        "endColumnNumber" : 66
      },
      "nodeContext" : "return nullable ? nullableSchema(record) : record;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.flink.formats.avro.typeutils.Schema"
  }, {
    "nodeContext" : "record",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 409,
      "startColumnNumber" : 59,
      "endLineNumber" : 409,
      "endColumnNumber" : 65
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 409,
        "startColumnNumber" : 23,
        "endLineNumber" : 409,
        "endColumnNumber" : 65
      },
      "nodeContext" : "nullable ? nullableSchema(record) : record",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 409,
        "startColumnNumber" : 16,
        "endLineNumber" : 409,
        "endColumnNumber" : 66
      },
      "nodeContext" : "return nullable ? nullableSchema(record) : record;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5791,
        "startLineNumber" : 322,
        "startColumnNumber" : 8,
        "endLineNumber" : 431,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (logicalType.getTypeRoot()) {\ncase NULL:  return SchemaBuilder.builder().nullType();\ncase BOOLEAN:Schema bool=SchemaBuilder.builder().booleanType();\nreturn nullable ? nullableSchema(bool) : bool;\ncase TINYINT:case SMALLINT:case INTEGER:Schema integer=SchemaBuilder.builder().intType();\nreturn nullable ? nullableSchema(integer) : integer;\ncase BIGINT:Schema bigint=SchemaBuilder.builder().longType();\nreturn nullable ? nullableSchema(bigint) : bigint;\ncase FLOAT:Schema f=SchemaBuilder.builder().floatType();\nreturn nullable ? nullableSchema(f) : f;\ncase DOUBLE:Schema d=SchemaBuilder.builder().doubleType();\nreturn nullable ? nullableSchema(d) : d;\ncase CHAR:case VARCHAR:Schema str=SchemaBuilder.builder().stringType();\nreturn nullable ? nullableSchema(str) : str;\ncase BINARY:case VARBINARY:Schema binary=SchemaBuilder.builder().bytesType();\nreturn nullable ? nullableSchema(binary) : binary;\ncase TIMESTAMP_WITHOUT_TIME_ZONE:final TimestampType timestampType=(TimestampType)logicalType;\nprecision=timestampType.getPrecision();\norg.apache.avro.LogicalType avroLogicalType;\nif (precision <= 3) {\navroLogicalType=LogicalTypes.timestampMillis();\n}\n else {\nthrow new IllegalArgumentException(\"Avro does not support TIMESTAMP type \" + \"with precision: \" + precision + \", it only supports precision less than 3.\");\n}\nSchema timestamp=avroLogicalType.addToSchema(SchemaBuilder.builder().longType());\nreturn nullable ? nullableSchema(timestamp) : timestamp;\ncase DATE:Schema date=LogicalTypes.date().addToSchema(SchemaBuilder.builder().intType());\nreturn nullable ? nullableSchema(date) : date;\ncase TIME_WITHOUT_TIME_ZONE:precision=((TimeType)logicalType).getPrecision();\nif (precision > 3) {\nthrow new IllegalArgumentException(\"Avro does not support TIME type with precision: \" + precision + \", it only supports precision less than 3.\");\n}\nSchema time=LogicalTypes.timeMillis().addToSchema(SchemaBuilder.builder().intType());\nreturn nullable ? nullableSchema(time) : time;\ncase DECIMAL:DecimalType decimalType=(DecimalType)logicalType;\nSchema decimal=LogicalTypes.decimal(decimalType.getPrecision(),decimalType.getScale()).addToSchema(SchemaBuilder.builder().bytesType());\nreturn nullable ? nullableSchema(decimal) : decimal;\ncase ROW:RowType rowType=(RowType)logicalType;\nList<String> fieldNames=rowType.getFieldNames();\nSchemaBuilder.FieldAssembler<Schema> builder=SchemaBuilder.builder().record(rowName).fields();\nfor (int i=0; i < rowType.getFieldCount(); i++) {\nString fieldName=fieldNames.get(i);\nLogicalType fieldType=rowType.getTypeAt(i);\nSchemaBuilder.GenericDefault<Schema> fieldBuilder=builder.name(fieldName).type(convertToSchema(fieldType,rowName + \"_\" + fieldName));\nif (fieldType.isNullable()) {\nbuilder=fieldBuilder.withDefault(null);\n}\n else {\nbuilder=fieldBuilder.noDefault();\n}\n}\nSchema record=builder.endRecord();\nreturn nullable ? nullableSchema(record) : record;\ncase MULTISET:case MAP:Schema map=SchemaBuilder.builder().map().values(convertToSchema(extractValueTypeToAvroMap(logicalType),rowName));\nreturn nullable ? nullableSchema(map) : map;\ncase ARRAY:ArrayType arrayType=(ArrayType)logicalType;\nSchema array=SchemaBuilder.builder().array().items(convertToSchema(arrayType.getElementType(),rowName));\nreturn nullable ? nullableSchema(array) : array;\ncase RAW:case TIMESTAMP_WITH_LOCAL_TIME_ZONE:default:throw new UnsupportedOperationException(\"Unsupported to derive Schema for type: \" + logicalType);\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 540,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5883,
        "startLineNumber" : 319,
        "startColumnNumber" : 82,
        "endLineNumber" : 432,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int precision;\n  boolean nullable=logicalType.isNullable();\nswitch (logicalType.getTypeRoot()) {\ncase NULL:    return SchemaBuilder.builder().nullType();\ncase BOOLEAN:  Schema bool=SchemaBuilder.builder().booleanType();\nreturn nullable ? nullableSchema(bool) : bool;\ncase TINYINT:case SMALLINT:case INTEGER:Schema integer=SchemaBuilder.builder().intType();\nreturn nullable ? nullableSchema(integer) : integer;\ncase BIGINT:Schema bigint=SchemaBuilder.builder().longType();\nreturn nullable ? nullableSchema(bigint) : bigint;\ncase FLOAT:Schema f=SchemaBuilder.builder().floatType();\nreturn nullable ? nullableSchema(f) : f;\ncase DOUBLE:Schema d=SchemaBuilder.builder().doubleType();\nreturn nullable ? nullableSchema(d) : d;\ncase CHAR:case VARCHAR:Schema str=SchemaBuilder.builder().stringType();\nreturn nullable ? nullableSchema(str) : str;\ncase BINARY:case VARBINARY:Schema binary=SchemaBuilder.builder().bytesType();\nreturn nullable ? nullableSchema(binary) : binary;\ncase TIMESTAMP_WITHOUT_TIME_ZONE:final TimestampType timestampType=(TimestampType)logicalType;\nprecision=timestampType.getPrecision();\norg.apache.avro.LogicalType avroLogicalType;\nif (precision <= 3) {\navroLogicalType=LogicalTypes.timestampMillis();\n}\n else {\nthrow new IllegalArgumentException(\"Avro does not support TIMESTAMP type \" + \"with precision: \" + precision + \", it only supports precision less than 3.\");\n}\nSchema timestamp=avroLogicalType.addToSchema(SchemaBuilder.builder().longType());\nreturn nullable ? nullableSchema(timestamp) : timestamp;\ncase DATE:Schema date=LogicalTypes.date().addToSchema(SchemaBuilder.builder().intType());\nreturn nullable ? nullableSchema(date) : date;\ncase TIME_WITHOUT_TIME_ZONE:precision=((TimeType)logicalType).getPrecision();\nif (precision > 3) {\nthrow new IllegalArgumentException(\"Avro does not support TIME type with precision: \" + precision + \", it only supports precision less than 3.\");\n}\nSchema time=LogicalTypes.timeMillis().addToSchema(SchemaBuilder.builder().intType());\nreturn nullable ? nullableSchema(time) : time;\ncase DECIMAL:DecimalType decimalType=(DecimalType)logicalType;\nSchema decimal=LogicalTypes.decimal(decimalType.getPrecision(),decimalType.getScale()).addToSchema(SchemaBuilder.builder().bytesType());\nreturn nullable ? nullableSchema(decimal) : decimal;\ncase ROW:RowType rowType=(RowType)logicalType;\nList<String> fieldNames=rowType.getFieldNames();\nSchemaBuilder.FieldAssembler<Schema> builder=SchemaBuilder.builder().record(rowName).fields();\nfor (int i=0; i < rowType.getFieldCount(); i++) {\nString fieldName=fieldNames.get(i);\nLogicalType fieldType=rowType.getTypeAt(i);\nSchemaBuilder.GenericDefault<Schema> fieldBuilder=builder.name(fieldName).type(convertToSchema(fieldType,rowName + \"_\" + fieldName));\nif (fieldType.isNullable()) {\nbuilder=fieldBuilder.withDefault(null);\n}\n else {\nbuilder=fieldBuilder.noDefault();\n}\n}\nSchema record=builder.endRecord();\nreturn nullable ? nullableSchema(record) : record;\ncase MULTISET:case MAP:Schema map=SchemaBuilder.builder().map().values(convertToSchema(extractValueTypeToAvroMap(logicalType),rowName));\nreturn nullable ? nullableSchema(map) : map;\ncase ARRAY:ArrayType arrayType=(ArrayType)logicalType;\nSchema array=SchemaBuilder.builder().array().items(convertToSchema(arrayType.getElementType(),rowName));\nreturn nullable ? nullableSchema(array) : array;\ncase RAW:case TIMESTAMP_WITH_LOCAL_TIME_ZONE:default:throw new UnsupportedOperationException(\"Unsupported to derive Schema for type: \" + logicalType);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 552,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6405,
        "startLineNumber" : 309,
        "startColumnNumber" : 4,
        "endLineNumber" : 432,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Converts Flink SQL  {@link LogicalType} (can be nested) into an Avro schema.<p>The \"{rowName}_\" is used as the nested row type name prefix in order to generate the right schema. Nested record type that only differs with type name is still compatible.\n * @param logicalType logical type\n * @param rowName the record name\n * @return Avro's {@link Schema} matching this logical type.\n */\npublic static Schema convertToSchema(LogicalType logicalType,String rowName){\n  int precision;\n  boolean nullable=logicalType.isNullable();\nswitch (logicalType.getTypeRoot()) {\ncase NULL:    return SchemaBuilder.builder().nullType();\ncase BOOLEAN:  Schema bool=SchemaBuilder.builder().booleanType();\nreturn nullable ? nullableSchema(bool) : bool;\ncase TINYINT:case SMALLINT:case INTEGER:Schema integer=SchemaBuilder.builder().intType();\nreturn nullable ? nullableSchema(integer) : integer;\ncase BIGINT:Schema bigint=SchemaBuilder.builder().longType();\nreturn nullable ? nullableSchema(bigint) : bigint;\ncase FLOAT:Schema f=SchemaBuilder.builder().floatType();\nreturn nullable ? nullableSchema(f) : f;\ncase DOUBLE:Schema d=SchemaBuilder.builder().doubleType();\nreturn nullable ? nullableSchema(d) : d;\ncase CHAR:case VARCHAR:Schema str=SchemaBuilder.builder().stringType();\nreturn nullable ? nullableSchema(str) : str;\ncase BINARY:case VARBINARY:Schema binary=SchemaBuilder.builder().bytesType();\nreturn nullable ? nullableSchema(binary) : binary;\ncase TIMESTAMP_WITHOUT_TIME_ZONE:final TimestampType timestampType=(TimestampType)logicalType;\nprecision=timestampType.getPrecision();\norg.apache.avro.LogicalType avroLogicalType;\nif (precision <= 3) {\navroLogicalType=LogicalTypes.timestampMillis();\n}\n else {\nthrow new IllegalArgumentException(\"Avro does not support TIMESTAMP type \" + \"with precision: \" + precision + \", it only supports precision less than 3.\");\n}\nSchema timestamp=avroLogicalType.addToSchema(SchemaBuilder.builder().longType());\nreturn nullable ? nullableSchema(timestamp) : timestamp;\ncase DATE:Schema date=LogicalTypes.date().addToSchema(SchemaBuilder.builder().intType());\nreturn nullable ? nullableSchema(date) : date;\ncase TIME_WITHOUT_TIME_ZONE:precision=((TimeType)logicalType).getPrecision();\nif (precision > 3) {\nthrow new IllegalArgumentException(\"Avro does not support TIME type with precision: \" + precision + \", it only supports precision less than 3.\");\n}\nSchema time=LogicalTypes.timeMillis().addToSchema(SchemaBuilder.builder().intType());\nreturn nullable ? nullableSchema(time) : time;\ncase DECIMAL:DecimalType decimalType=(DecimalType)logicalType;\nSchema decimal=LogicalTypes.decimal(decimalType.getPrecision(),decimalType.getScale()).addToSchema(SchemaBuilder.builder().bytesType());\nreturn nullable ? nullableSchema(decimal) : decimal;\ncase ROW:RowType rowType=(RowType)logicalType;\nList<String> fieldNames=rowType.getFieldNames();\nSchemaBuilder.FieldAssembler<Schema> builder=SchemaBuilder.builder().record(rowName).fields();\nfor (int i=0; i < rowType.getFieldCount(); i++) {\nString fieldName=fieldNames.get(i);\nLogicalType fieldType=rowType.getTypeAt(i);\nSchemaBuilder.GenericDefault<Schema> fieldBuilder=builder.name(fieldName).type(convertToSchema(fieldType,rowName + \"_\" + fieldName));\nif (fieldType.isNullable()) {\nbuilder=fieldBuilder.withDefault(null);\n}\n else {\nbuilder=fieldBuilder.noDefault();\n}\n}\nSchema record=builder.endRecord();\nreturn nullable ? nullableSchema(record) : record;\ncase MULTISET:case MAP:Schema map=SchemaBuilder.builder().map().values(convertToSchema(extractValueTypeToAvroMap(logicalType),rowName));\nreturn nullable ? nullableSchema(map) : map;\ncase ARRAY:ArrayType arrayType=(ArrayType)logicalType;\nSchema array=SchemaBuilder.builder().array().items(convertToSchema(arrayType.getElementType(),rowName));\nreturn nullable ? nullableSchema(array) : array;\ncase RAW:case TIMESTAMP_WITH_LOCAL_TIME_ZONE:default:throw new UnsupportedOperationException(\"Unsupported to derive Schema for type: \" + logicalType);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 567,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 409,
        "startColumnNumber" : 16,
        "endLineNumber" : 409,
        "endColumnNumber" : 66
      },
      "nodeContext" : "return nullable ? nullableSchema(record) : record;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.flink.formats.avro.typeutils.Schema"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 409,
    "startColumnNumber" : 49,
    "endLineNumber" : 409,
    "endColumnNumber" : 55
  }, {
    "charLength" : 6,
    "startLineNumber" : 409,
    "startColumnNumber" : 59,
    "endLineNumber" : 409,
    "endColumnNumber" : 65
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 0
  } ]
}