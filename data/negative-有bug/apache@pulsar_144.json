{
  "id" : 144,
  "expression" : "System",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-io/elastic-search/src/test/java/org/apache/pulsar/io/elasticsearch/RandomExponentialRetryTests.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "System",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 87,
      "startColumnNumber" : 8,
      "endLineNumber" : 87,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 18
      },
      "nodeContext" : "System.out",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 53
      },
      "nodeContext" : "System.out.println(\"sleeps=\" + mockTime.sleeps)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 54
      },
      "nodeContext" : "System.out.println(\"sleeps=\" + mockTime.sleeps);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 489,
        "startLineNumber" : 78,
        "startColumnNumber" : 55,
        "endLineNumber" : 88,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int N=10;\n  MockTime mockTime=new MockTime();\n  RandomExponentialRetry backoffRetry=new RandomExponentialRetry();\n  assertEquals(N,(int)backoffRetry.retry(() -> testFunction(N),N + 1,100,\"SomeRetries\",mockTime));\n  assertEquals(N,mockTime.sleeps.size());\n  for (int i=0; i < N; i++) {\n    assertTrue(mockTime.sleeps.get(i) <= backoffRetry.waitInMs(i,100));\n  }\n  System.out.println(\"sleeps=\" + mockTime.sleeps);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 88,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 550,
        "startLineNumber" : 77,
        "startColumnNumber" : 4,
        "endLineNumber" : 88,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void callWithSomeRetries() throws Exception {\n  int N=10;\n  MockTime mockTime=new MockTime();\n  RandomExponentialRetry backoffRetry=new RandomExponentialRetry();\n  assertEquals(N,(int)backoffRetry.retry(() -> testFunction(N),N + 1,100,\"SomeRetries\",mockTime));\n  assertEquals(N,mockTime.sleeps.size());\n  for (int i=0; i < N; i++) {\n    assertTrue(mockTime.sleeps.get(i) <= backoffRetry.waitInMs(i,100));\n  }\n  System.out.println(\"sleeps=\" + mockTime.sleeps);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 96,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 54
      },
      "nodeContext" : "System.out.println(\"sleeps=\" + mockTime.sleeps);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.System"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 87,
    "startColumnNumber" : 8,
    "endLineNumber" : 87,
    "endColumnNumber" : 14
  } ],
  "layoutRelationDataList" : [ ]
}