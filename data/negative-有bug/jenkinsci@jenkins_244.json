{
  "id" : 244,
  "expression" : "\"acceptBuildResult\"",
  "projectName" : "jenkinsci@jenkins",
  "commitID" : "c44fa7f4cf769257844d562353a579a198ea517a",
  "filePath" : "/core/src/main/java/hudson/Main.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"acceptBuildResult\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 118,
      "startColumnNumber" : 57,
      "endLineNumber" : 118,
      "endColumnNumber" : 76
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 118,
        "startColumnNumber" : 41,
        "endLineNumber" : 118,
        "endColumnNumber" : 77
      },
      "nodeContext" : "new URL(jobURL,\"acceptBuildResult\")",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 118,
        "startColumnNumber" : 36,
        "endLineNumber" : 118,
        "endColumnNumber" : 78
      },
      "nodeContext" : "open(new URL(jobURL,\"acceptBuildResult\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 118,
        "startColumnNumber" : 30,
        "endLineNumber" : 118,
        "endColumnNumber" : 78
      },
      "nodeContext" : "con=open(new URL(jobURL,\"acceptBuildResult\"))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 118,
        "startColumnNumber" : 12,
        "endLineNumber" : 118,
        "endColumnNumber" : 79
      },
      "nodeContext" : "HttpURLConnection con=open(new URL(jobURL,\"acceptBuildResult\"));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 466,
        "startLineNumber" : 117,
        "startColumnNumber" : 8,
        "endLineNumber" : 125,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  HttpURLConnection con=open(new URL(jobURL,\"acceptBuildResult\"));\n  if (auth != null)   con.setRequestProperty(\"Authorization\",auth);\n  con.connect();\n  if (con.getResponseCode() != 200) {\n    System.err.println(jobURL + \" is not a valid external job (\" + con.getResponseCode()+ \" \"+ con.getResponseMessage()+ \")\");\n    return -1;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 54,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5073,
        "startLineNumber" : 94,
        "startColumnNumber" : 65,
        "endLineNumber" : 205,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String projectName=args[0];\n  String home=getHudsonHome();\n  if (!home.endsWith(\"/\"))   home=home + '/';\n  String auth=new URL(home).getUserInfo();\n  if (auth != null)   auth=\"Basic \" + new Base64Encoder().encode(auth.getBytes(StandardCharsets.UTF_8));\n{\n    HttpURLConnection con=open(new URL(home));\n    if (auth != null)     con.setRequestProperty(\"Authorization\",auth);\n    con.connect();\n    if (con.getResponseCode() != 200 || con.getHeaderField(\"X-Hudson\") == null) {\n      System.err.println(home + \" is not Hudson (\" + con.getResponseMessage()+ \")\");\n      return -1;\n    }\n  }\n  URL jobURL=new URL(home + \"job/\" + Util.encode(projectName).replace(\"/\",\"/job/\")+ \"/\");\n{\n    HttpURLConnection con=open(new URL(jobURL,\"acceptBuildResult\"));\n    if (auth != null)     con.setRequestProperty(\"Authorization\",auth);\n    con.connect();\n    if (con.getResponseCode() != 200) {\n      System.err.println(jobURL + \" is not a valid external job (\" + con.getResponseCode()+ \" \"+ con.getResponseMessage()+ \")\");\n      return -1;\n    }\n  }\n  String crumbField=null, crumbValue=null;\n  try {\n    HttpURLConnection con=open(new URL(home + \"crumbIssuer/api/xml?xpath=concat(//crumbRequestField,\\\":\\\",//crumb)'\"));\n    if (auth != null)     con.setRequestProperty(\"Authorization\",auth);\n    String line=IOUtils.readFirstLine(con.getInputStream(),\"UTF-8\");\n    String[] components=line.split(\":\");\n    if (components.length == 2) {\n      crumbField=components[0];\n      crumbValue=components[1];\n    }\n  }\n catch (  IOException e) {\n  }\n  File tmpFile=File.createTempFile(\"jenkins\",\"log\");\n  try {\n    int ret;\n    try (OutputStream os=Files.newOutputStream(tmpFile.toPath());Writer w=new OutputStreamWriter(os,StandardCharsets.UTF_8)){\n      w.write(\"<?xml version='1.1' encoding='UTF-8'?>\");\n      w.write(\"<run><log encoding='hexBinary' content-encoding='\" + Charset.defaultCharset().name() + \"'>\");\n      w.flush();\n      long start=System.currentTimeMillis();\n      List<String> cmd=new ArrayList<>(Arrays.asList(args).subList(1,args.length));\n      Proc proc=new Proc.LocalProc(cmd.toArray(new String[0]),(String[])null,System.in,new DualOutputStream(System.out,new EncodingStream(os)));\n      ret=proc.join();\n      w.write(\"</log><result>\" + ret + \"</result><duration>\"+ (System.currentTimeMillis() - start)+ \"</duration></run>\");\n    }\n catch (    InvalidPathException e) {\n      throw new IOException(e);\n    }\n    URL location=new URL(jobURL,\"postBuildResult\");\n    while (true) {\n      try {\n        HttpURLConnection con=open(location);\n        if (auth != null)         con.setRequestProperty(\"Authorization\",auth);\n        if (crumbField != null && crumbValue != null) {\n          con.setRequestProperty(crumbField,crumbValue);\n        }\n        con.setDoOutput(true);\n        con.setFixedLengthStreamingMode((int)tmpFile.length());\n        con.connect();\n        try (InputStream in=Files.newInputStream(tmpFile.toPath())){\n          org.apache.commons.io.IOUtils.copy(in,con.getOutputStream());\n        }\n catch (        InvalidPathException e) {\n          throw new IOException(e);\n        }\n        if (con.getResponseCode() != 200) {\n          org.apache.commons.io.IOUtils.copy(con.getErrorStream(),System.err);\n        }\n        return ret;\n      }\n catch (      HttpRetryException e) {\n        if (e.getLocation() != null) {\n          location=new URL(e.getLocation());\n          continue;\n        }\n        throw e;\n      }\n    }\n  }\n  finally {\n    tmpFile.delete();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 595,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5347,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 205,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Run command and send result to  {@code ExternalJob} in the {@code external-monitor-job} plugin.Obsoleted by  {@code SetExternalBuildResultCommand} but kept here for compatibility.\n */\npublic static int remotePost(String[] args) throws Exception {\n  String projectName=args[0];\n  String home=getHudsonHome();\n  if (!home.endsWith(\"/\"))   home=home + '/';\n  String auth=new URL(home).getUserInfo();\n  if (auth != null)   auth=\"Basic \" + new Base64Encoder().encode(auth.getBytes(StandardCharsets.UTF_8));\n{\n    HttpURLConnection con=open(new URL(home));\n    if (auth != null)     con.setRequestProperty(\"Authorization\",auth);\n    con.connect();\n    if (con.getResponseCode() != 200 || con.getHeaderField(\"X-Hudson\") == null) {\n      System.err.println(home + \" is not Hudson (\" + con.getResponseMessage()+ \")\");\n      return -1;\n    }\n  }\n  URL jobURL=new URL(home + \"job/\" + Util.encode(projectName).replace(\"/\",\"/job/\")+ \"/\");\n{\n    HttpURLConnection con=open(new URL(jobURL,\"acceptBuildResult\"));\n    if (auth != null)     con.setRequestProperty(\"Authorization\",auth);\n    con.connect();\n    if (con.getResponseCode() != 200) {\n      System.err.println(jobURL + \" is not a valid external job (\" + con.getResponseCode()+ \" \"+ con.getResponseMessage()+ \")\");\n      return -1;\n    }\n  }\n  String crumbField=null, crumbValue=null;\n  try {\n    HttpURLConnection con=open(new URL(home + \"crumbIssuer/api/xml?xpath=concat(//crumbRequestField,\\\":\\\",//crumb)'\"));\n    if (auth != null)     con.setRequestProperty(\"Authorization\",auth);\n    String line=IOUtils.readFirstLine(con.getInputStream(),\"UTF-8\");\n    String[] components=line.split(\":\");\n    if (components.length == 2) {\n      crumbField=components[0];\n      crumbValue=components[1];\n    }\n  }\n catch (  IOException e) {\n  }\n  File tmpFile=File.createTempFile(\"jenkins\",\"log\");\n  try {\n    int ret;\n    try (OutputStream os=Files.newOutputStream(tmpFile.toPath());Writer w=new OutputStreamWriter(os,StandardCharsets.UTF_8)){\n      w.write(\"<?xml version='1.1' encoding='UTF-8'?>\");\n      w.write(\"<run><log encoding='hexBinary' content-encoding='\" + Charset.defaultCharset().name() + \"'>\");\n      w.flush();\n      long start=System.currentTimeMillis();\n      List<String> cmd=new ArrayList<>(Arrays.asList(args).subList(1,args.length));\n      Proc proc=new Proc.LocalProc(cmd.toArray(new String[0]),(String[])null,System.in,new DualOutputStream(System.out,new EncodingStream(os)));\n      ret=proc.join();\n      w.write(\"</log><result>\" + ret + \"</result><duration>\"+ (System.currentTimeMillis() - start)+ \"</duration></run>\");\n    }\n catch (    InvalidPathException e) {\n      throw new IOException(e);\n    }\n    URL location=new URL(jobURL,\"postBuildResult\");\n    while (true) {\n      try {\n        HttpURLConnection con=open(location);\n        if (auth != null)         con.setRequestProperty(\"Authorization\",auth);\n        if (crumbField != null && crumbValue != null) {\n          con.setRequestProperty(crumbField,crumbValue);\n        }\n        con.setDoOutput(true);\n        con.setFixedLengthStreamingMode((int)tmpFile.length());\n        con.connect();\n        try (InputStream in=Files.newInputStream(tmpFile.toPath())){\n          org.apache.commons.io.IOUtils.copy(in,con.getOutputStream());\n        }\n catch (        InvalidPathException e) {\n          throw new IOException(e);\n        }\n        if (con.getResponseCode() != 200) {\n          org.apache.commons.io.IOUtils.copy(con.getErrorStream(),System.err);\n        }\n        return ret;\n      }\n catch (      HttpRetryException e) {\n        if (e.getLocation() != null) {\n          location=new URL(e.getLocation());\n          continue;\n        }\n        throw e;\n      }\n    }\n  }\n  finally {\n    tmpFile.delete();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 609,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 118,
        "startColumnNumber" : 12,
        "endLineNumber" : 118,
        "endColumnNumber" : 79
      },
      "nodeContext" : "HttpURLConnection con=open(new URL(jobURL,\"acceptBuildResult\"));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 118,
    "startColumnNumber" : 57,
    "endLineNumber" : 118,
    "endColumnNumber" : 76
  } ],
  "layoutRelationDataList" : [ ]
}