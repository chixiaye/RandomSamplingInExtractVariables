{
  "id" : 217,
  "expression" : "expectedSccs",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/test/java/com/williamfiset/algorithms/graphtheory/TarjanSccSolverAdjacencyListTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "expectedSccs",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 60,
      "startColumnNumber" : 44,
      "endLineNumber" : 60,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 60,
        "startColumnNumber" : 44,
        "endLineNumber" : 60,
        "endColumnNumber" : 63
      },
      "nodeContext" : "expectedSccs.size()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 60,
        "startColumnNumber" : 4,
        "endLineNumber" : 60,
        "endColumnNumber" : 64
      },
      "nodeContext" : "assertThat(solver.sccCount()).isEqualTo(expectedSccs.size())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 60,
        "startColumnNumber" : 4,
        "endLineNumber" : 60,
        "endColumnNumber" : 65
      },
      "nodeContext" : "assertThat(solver.sccCount()).isEqualTo(expectedSccs.size());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 524,
        "startLineNumber" : 43,
        "startColumnNumber" : 42,
        "endLineNumber" : 62,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int n=5;\n  List<List<Integer>> g=createGraph(n);\n  addEdge(g,0,1);\n  addEdge(g,1,0);\n  addEdge(g,2,3);\n  addEdge(g,3,4);\n  addEdge(g,4,2);\n  TarjanSccSolverAdjacencyList solver=new TarjanSccSolverAdjacencyList(g);\n  solver.solve();\n  List<List<Integer>> expectedSccs=ImmutableList.of(ImmutableList.of(0,1),ImmutableList.of(2,3,4));\n  assertThat(solver.sccCount()).isEqualTo(expectedSccs.size());\n  assertThat(isScc(solver.getSccs(),expectedSccs)).isTrue();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 110,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 572,
        "startLineNumber" : 42,
        "startColumnNumber" : 2,
        "endLineNumber" : 62,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testTwoDisjointComponents(){\n  int n=5;\n  List<List<Integer>> g=createGraph(n);\n  addEdge(g,0,1);\n  addEdge(g,1,0);\n  addEdge(g,2,3);\n  addEdge(g,3,4);\n  addEdge(g,4,2);\n  TarjanSccSolverAdjacencyList solver=new TarjanSccSolverAdjacencyList(g);\n  solver.solve();\n  List<List<Integer>> expectedSccs=ImmutableList.of(ImmutableList.of(0,1),ImmutableList.of(2,3,4));\n  assertThat(solver.sccCount()).isEqualTo(expectedSccs.size());\n  assertThat(isScc(solver.getSccs(),expectedSccs)).isTrue();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 116,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 60,
        "startColumnNumber" : 4,
        "endLineNumber" : 60,
        "endColumnNumber" : 65
      },
      "nodeContext" : "assertThat(solver.sccCount()).isEqualTo(expectedSccs.size());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.List<java.util.List<java.lang.Integer>>"
  }, {
    "nodeContext" : "expectedSccs",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 61,
      "startColumnNumber" : 39,
      "endLineNumber" : 61,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 61,
        "startColumnNumber" : 15,
        "endLineNumber" : 61,
        "endColumnNumber" : 52
      },
      "nodeContext" : "isScc(solver.getSccs(),expectedSccs)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 61,
        "startColumnNumber" : 4,
        "endLineNumber" : 61,
        "endColumnNumber" : 53
      },
      "nodeContext" : "assertThat(isScc(solver.getSccs(),expectedSccs))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 61,
        "startColumnNumber" : 4,
        "endLineNumber" : 61,
        "endColumnNumber" : 62
      },
      "nodeContext" : "assertThat(isScc(solver.getSccs(),expectedSccs)).isTrue()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 61,
        "startColumnNumber" : 4,
        "endLineNumber" : 61,
        "endColumnNumber" : 63
      },
      "nodeContext" : "assertThat(isScc(solver.getSccs(),expectedSccs)).isTrue();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 524,
        "startLineNumber" : 43,
        "startColumnNumber" : 42,
        "endLineNumber" : 62,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int n=5;\n  List<List<Integer>> g=createGraph(n);\n  addEdge(g,0,1);\n  addEdge(g,1,0);\n  addEdge(g,2,3);\n  addEdge(g,3,4);\n  addEdge(g,4,2);\n  TarjanSccSolverAdjacencyList solver=new TarjanSccSolverAdjacencyList(g);\n  solver.solve();\n  List<List<Integer>> expectedSccs=ImmutableList.of(ImmutableList.of(0,1),ImmutableList.of(2,3,4));\n  assertThat(solver.sccCount()).isEqualTo(expectedSccs.size());\n  assertThat(isScc(solver.getSccs(),expectedSccs)).isTrue();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 110,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 572,
        "startLineNumber" : 42,
        "startColumnNumber" : 2,
        "endLineNumber" : 62,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testTwoDisjointComponents(){\n  int n=5;\n  List<List<Integer>> g=createGraph(n);\n  addEdge(g,0,1);\n  addEdge(g,1,0);\n  addEdge(g,2,3);\n  addEdge(g,3,4);\n  addEdge(g,4,2);\n  TarjanSccSolverAdjacencyList solver=new TarjanSccSolverAdjacencyList(g);\n  solver.solve();\n  List<List<Integer>> expectedSccs=ImmutableList.of(ImmutableList.of(0,1),ImmutableList.of(2,3,4));\n  assertThat(solver.sccCount()).isEqualTo(expectedSccs.size());\n  assertThat(isScc(solver.getSccs(),expectedSccs)).isTrue();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 116,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 61,
        "startColumnNumber" : 4,
        "endLineNumber" : 61,
        "endColumnNumber" : 63
      },
      "nodeContext" : "assertThat(isScc(solver.getSccs(),expectedSccs)).isTrue();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.util.List<java.util.List<java.lang.Integer>>"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 60,
    "startColumnNumber" : 44,
    "endLineNumber" : 60,
    "endColumnNumber" : 56
  }, {
    "charLength" : 12,
    "startLineNumber" : 61,
    "startColumnNumber" : 39,
    "endLineNumber" : 61,
    "endColumnNumber" : 51
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}