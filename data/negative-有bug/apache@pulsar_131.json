{
  "id" : 131,
  "expression" : "200",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-functions/utils/src/test/java/org/apache/pulsar/functions/utils/ActionsTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "200",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 64,
      "startColumnNumber" : 51,
      "endLineNumber" : 64,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 167,
        "startLineNumber" : 61,
        "startColumnNumber" : 16,
        "endLineNumber" : 64,
        "endColumnNumber" : 55
      },
      "nodeContext" : "Actions.Action.builder().actionName(\"action2\").numRetries(20).sleepBetweenInvocationsMs(200)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 212,
        "startLineNumber" : 61,
        "startColumnNumber" : 16,
        "endLineNumber" : 65,
        "endColumnNumber" : 44
      },
      "nodeContext" : "Actions.Action.builder().actionName(\"action2\").numRetries(20).sleepBetweenInvocationsMs(200).supplier(supplier2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 245,
        "startLineNumber" : 61,
        "startColumnNumber" : 16,
        "endLineNumber" : 66,
        "endColumnNumber" : 32
      },
      "nodeContext" : "Actions.Action.builder().actionName(\"action2\").numRetries(20).sleepBetweenInvocationsMs(200).supplier(supplier2).build()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 267,
        "startLineNumber" : 60,
        "startColumnNumber" : 33,
        "endLineNumber" : 66,
        "endColumnNumber" : 33
      },
      "nodeContext" : "spy(Actions.Action.builder().actionName(\"action2\").numRetries(20).sleepBetweenInvocationsMs(200).supplier(supplier2).build())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 21,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 277,
        "startLineNumber" : 60,
        "startColumnNumber" : 23,
        "endLineNumber" : 66,
        "endColumnNumber" : 33
      },
      "nodeContext" : "action2=spy(Actions.Action.builder().actionName(\"action2\").numRetries(20).sleepBetweenInvocationsMs(200).supplier(supplier2).build())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 23,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 293,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 66,
        "endColumnNumber" : 34
      },
      "nodeContext" : "Actions.Action action2=spy(Actions.Action.builder().actionName(\"action2\").numRetries(20).sleepBetweenInvocationsMs(200).supplier(supplier2).build());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 28,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4786,
        "startLineNumber" : 37,
        "startColumnNumber" : 58,
        "endLineNumber" : 163,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Supplier<Actions.ActionResult> supplier1=mock(Supplier.class);\n  when(supplier1.get()).thenReturn(Actions.ActionResult.builder().success(true).build());\n  Supplier<Actions.ActionResult> supplier2=mock(Supplier.class);\n  when(supplier2.get()).thenReturn(Actions.ActionResult.builder().success(true).build());\n  java.util.function.Consumer<Actions.ActionResult> onFail=mock(java.util.function.Consumer.class);\n  java.util.function.Consumer<Actions.ActionResult> onSucess=mock(java.util.function.Consumer.class);\n  Actions.Action action1=spy(Actions.Action.builder().actionName(\"action1\").numRetries(10).sleepBetweenInvocationsMs(100).supplier(supplier1).continueOn(true).onFail(onFail).onSuccess(onSucess).build());\n  Actions.Action action2=spy(Actions.Action.builder().actionName(\"action2\").numRetries(20).sleepBetweenInvocationsMs(200).supplier(supplier2).build());\n  Actions actions=Actions.newBuilder().addAction(action1).addAction(action2);\n  actions.run();\n  assertEquals(actions.numActions(),2);\n  verify(supplier1,times(1)).get();\n  verify(onFail,times(0)).accept(any());\n  verify(onSucess,times(1)).accept(any());\n  verify(supplier2,times(1)).get();\n  supplier1=mock(Supplier.class);\n  when(supplier1.get()).thenReturn(Actions.ActionResult.builder().success(true).build());\n  supplier2=mock(Supplier.class);\n  when(supplier2.get()).thenReturn(Actions.ActionResult.builder().success(true).build());\n  onFail=mock(java.util.function.Consumer.class);\n  onSucess=mock(java.util.function.Consumer.class);\n  action1=spy(Actions.Action.builder().actionName(\"action1\").numRetries(10).sleepBetweenInvocationsMs(100).supplier(supplier1).continueOn(false).onFail(onFail).onSuccess(onSucess).build());\n  action2=spy(Actions.Action.builder().actionName(\"action2\").numRetries(20).sleepBetweenInvocationsMs(200).supplier(supplier2).onFail(onFail).onSuccess(onSucess).build());\n  actions=Actions.newBuilder().addAction(action1).addAction(action2);\n  actions.run();\n  assertEquals(actions.numActions(),2);\n  verify(supplier1,times(1)).get();\n  verify(onFail,times(0)).accept(any());\n  verify(onSucess,times(1)).accept(any());\n  verify(supplier2,times(0)).get();\n  supplier1=mock(Supplier.class);\n  when(supplier1.get()).thenReturn(Actions.ActionResult.builder().success(false).build());\n  supplier2=mock(Supplier.class);\n  when(supplier2.get()).thenReturn(Actions.ActionResult.builder().success(true).build());\n  onFail=mock(java.util.function.Consumer.class);\n  onSucess=mock(java.util.function.Consumer.class);\n  action1=spy(Actions.Action.builder().actionName(\"action1\").numRetries(10).sleepBetweenInvocationsMs(10).supplier(supplier1).continueOn(false).onFail(onFail).onSuccess(onSucess).build());\n  action2=spy(Actions.Action.builder().actionName(\"action2\").numRetries(20).sleepBetweenInvocationsMs(200).supplier(supplier2).build());\n  actions=Actions.newBuilder().addAction(action1).addAction(action2);\n  actions.run();\n  assertEquals(actions.numActions(),2);\n  verify(supplier1,times(11)).get();\n  verify(onFail,times(1)).accept(any());\n  verify(onSucess,times(0)).accept(any());\n  verify(supplier2,times(1)).get();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 657,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4850,
        "startLineNumber" : 36,
        "startColumnNumber" : 4,
        "endLineNumber" : 163,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testActions() throws InterruptedException {\n  Supplier<Actions.ActionResult> supplier1=mock(Supplier.class);\n  when(supplier1.get()).thenReturn(Actions.ActionResult.builder().success(true).build());\n  Supplier<Actions.ActionResult> supplier2=mock(Supplier.class);\n  when(supplier2.get()).thenReturn(Actions.ActionResult.builder().success(true).build());\n  java.util.function.Consumer<Actions.ActionResult> onFail=mock(java.util.function.Consumer.class);\n  java.util.function.Consumer<Actions.ActionResult> onSucess=mock(java.util.function.Consumer.class);\n  Actions.Action action1=spy(Actions.Action.builder().actionName(\"action1\").numRetries(10).sleepBetweenInvocationsMs(100).supplier(supplier1).continueOn(true).onFail(onFail).onSuccess(onSucess).build());\n  Actions.Action action2=spy(Actions.Action.builder().actionName(\"action2\").numRetries(20).sleepBetweenInvocationsMs(200).supplier(supplier2).build());\n  Actions actions=Actions.newBuilder().addAction(action1).addAction(action2);\n  actions.run();\n  assertEquals(actions.numActions(),2);\n  verify(supplier1,times(1)).get();\n  verify(onFail,times(0)).accept(any());\n  verify(onSucess,times(1)).accept(any());\n  verify(supplier2,times(1)).get();\n  supplier1=mock(Supplier.class);\n  when(supplier1.get()).thenReturn(Actions.ActionResult.builder().success(true).build());\n  supplier2=mock(Supplier.class);\n  when(supplier2.get()).thenReturn(Actions.ActionResult.builder().success(true).build());\n  onFail=mock(java.util.function.Consumer.class);\n  onSucess=mock(java.util.function.Consumer.class);\n  action1=spy(Actions.Action.builder().actionName(\"action1\").numRetries(10).sleepBetweenInvocationsMs(100).supplier(supplier1).continueOn(false).onFail(onFail).onSuccess(onSucess).build());\n  action2=spy(Actions.Action.builder().actionName(\"action2\").numRetries(20).sleepBetweenInvocationsMs(200).supplier(supplier2).onFail(onFail).onSuccess(onSucess).build());\n  actions=Actions.newBuilder().addAction(action1).addAction(action2);\n  actions.run();\n  assertEquals(actions.numActions(),2);\n  verify(supplier1,times(1)).get();\n  verify(onFail,times(0)).accept(any());\n  verify(onSucess,times(1)).accept(any());\n  verify(supplier2,times(0)).get();\n  supplier1=mock(Supplier.class);\n  when(supplier1.get()).thenReturn(Actions.ActionResult.builder().success(false).build());\n  supplier2=mock(Supplier.class);\n  when(supplier2.get()).thenReturn(Actions.ActionResult.builder().success(true).build());\n  onFail=mock(java.util.function.Consumer.class);\n  onSucess=mock(java.util.function.Consumer.class);\n  action1=spy(Actions.Action.builder().actionName(\"action1\").numRetries(10).sleepBetweenInvocationsMs(10).supplier(supplier1).continueOn(false).onFail(onFail).onSuccess(onSucess).build());\n  action2=spy(Actions.Action.builder().actionName(\"action2\").numRetries(20).sleepBetweenInvocationsMs(200).supplier(supplier2).build());\n  actions=Actions.newBuilder().addAction(action1).addAction(action2);\n  actions.run();\n  assertEquals(actions.numActions(),2);\n  verify(supplier1,times(11)).get();\n  verify(onFail,times(1)).accept(any());\n  verify(onSucess,times(0)).accept(any());\n  verify(supplier2,times(1)).get();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 665,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 167,
        "startLineNumber" : 61,
        "startColumnNumber" : 16,
        "endLineNumber" : 64,
        "endColumnNumber" : 55
      },
      "nodeContext" : "Actions.Action.builder().actionName(\"action2\").numRetries(20).sleepBetweenInvocationsMs(200)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "200",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 105,
      "startColumnNumber" : 51,
      "endLineNumber" : 105,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 167,
        "startLineNumber" : 102,
        "startColumnNumber" : 16,
        "endLineNumber" : 105,
        "endColumnNumber" : 55
      },
      "nodeContext" : "Actions.Action.builder().actionName(\"action2\").numRetries(20).sleepBetweenInvocationsMs(200)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 212,
        "startLineNumber" : 102,
        "startColumnNumber" : 16,
        "endLineNumber" : 106,
        "endColumnNumber" : 44
      },
      "nodeContext" : "Actions.Action.builder().actionName(\"action2\").numRetries(20).sleepBetweenInvocationsMs(200).supplier(supplier2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 252,
        "startLineNumber" : 102,
        "startColumnNumber" : 16,
        "endLineNumber" : 107,
        "endColumnNumber" : 39
      },
      "nodeContext" : "Actions.Action.builder().actionName(\"action2\").numRetries(20).sleepBetweenInvocationsMs(200).supplier(supplier2).onFail(onFail)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 20,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 297,
        "startLineNumber" : 102,
        "startColumnNumber" : 16,
        "endLineNumber" : 108,
        "endColumnNumber" : 44
      },
      "nodeContext" : "Actions.Action.builder().actionName(\"action2\").numRetries(20).sleepBetweenInvocationsMs(200).supplier(supplier2).onFail(onFail).onSuccess(onSucess)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 23,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 330,
        "startLineNumber" : 102,
        "startColumnNumber" : 16,
        "endLineNumber" : 109,
        "endColumnNumber" : 32
      },
      "nodeContext" : "Actions.Action.builder().actionName(\"action2\").numRetries(20).sleepBetweenInvocationsMs(200).supplier(supplier2).onFail(onFail).onSuccess(onSucess).build()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 25,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 352,
        "startLineNumber" : 101,
        "startColumnNumber" : 18,
        "endLineNumber" : 109,
        "endColumnNumber" : 33
      },
      "nodeContext" : "spy(Actions.Action.builder().actionName(\"action2\").numRetries(20).sleepBetweenInvocationsMs(200).supplier(supplier2).onFail(onFail).onSuccess(onSucess).build())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 27,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 362,
        "startLineNumber" : 101,
        "startColumnNumber" : 8,
        "endLineNumber" : 109,
        "endColumnNumber" : 33
      },
      "nodeContext" : "action2=spy(Actions.Action.builder().actionName(\"action2\").numRetries(20).sleepBetweenInvocationsMs(200).supplier(supplier2).onFail(onFail).onSuccess(onSucess).build())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 29,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 363,
        "startLineNumber" : 101,
        "startColumnNumber" : 8,
        "endLineNumber" : 109,
        "endColumnNumber" : 34
      },
      "nodeContext" : "action2=spy(Actions.Action.builder().actionName(\"action2\").numRetries(20).sleepBetweenInvocationsMs(200).supplier(supplier2).onFail(onFail).onSuccess(onSucess).build());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 30,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4786,
        "startLineNumber" : 37,
        "startColumnNumber" : 58,
        "endLineNumber" : 163,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Supplier<Actions.ActionResult> supplier1=mock(Supplier.class);\n  when(supplier1.get()).thenReturn(Actions.ActionResult.builder().success(true).build());\n  Supplier<Actions.ActionResult> supplier2=mock(Supplier.class);\n  when(supplier2.get()).thenReturn(Actions.ActionResult.builder().success(true).build());\n  java.util.function.Consumer<Actions.ActionResult> onFail=mock(java.util.function.Consumer.class);\n  java.util.function.Consumer<Actions.ActionResult> onSucess=mock(java.util.function.Consumer.class);\n  Actions.Action action1=spy(Actions.Action.builder().actionName(\"action1\").numRetries(10).sleepBetweenInvocationsMs(100).supplier(supplier1).continueOn(true).onFail(onFail).onSuccess(onSucess).build());\n  Actions.Action action2=spy(Actions.Action.builder().actionName(\"action2\").numRetries(20).sleepBetweenInvocationsMs(200).supplier(supplier2).build());\n  Actions actions=Actions.newBuilder().addAction(action1).addAction(action2);\n  actions.run();\n  assertEquals(actions.numActions(),2);\n  verify(supplier1,times(1)).get();\n  verify(onFail,times(0)).accept(any());\n  verify(onSucess,times(1)).accept(any());\n  verify(supplier2,times(1)).get();\n  supplier1=mock(Supplier.class);\n  when(supplier1.get()).thenReturn(Actions.ActionResult.builder().success(true).build());\n  supplier2=mock(Supplier.class);\n  when(supplier2.get()).thenReturn(Actions.ActionResult.builder().success(true).build());\n  onFail=mock(java.util.function.Consumer.class);\n  onSucess=mock(java.util.function.Consumer.class);\n  action1=spy(Actions.Action.builder().actionName(\"action1\").numRetries(10).sleepBetweenInvocationsMs(100).supplier(supplier1).continueOn(false).onFail(onFail).onSuccess(onSucess).build());\n  action2=spy(Actions.Action.builder().actionName(\"action2\").numRetries(20).sleepBetweenInvocationsMs(200).supplier(supplier2).onFail(onFail).onSuccess(onSucess).build());\n  actions=Actions.newBuilder().addAction(action1).addAction(action2);\n  actions.run();\n  assertEquals(actions.numActions(),2);\n  verify(supplier1,times(1)).get();\n  verify(onFail,times(0)).accept(any());\n  verify(onSucess,times(1)).accept(any());\n  verify(supplier2,times(0)).get();\n  supplier1=mock(Supplier.class);\n  when(supplier1.get()).thenReturn(Actions.ActionResult.builder().success(false).build());\n  supplier2=mock(Supplier.class);\n  when(supplier2.get()).thenReturn(Actions.ActionResult.builder().success(true).build());\n  onFail=mock(java.util.function.Consumer.class);\n  onSucess=mock(java.util.function.Consumer.class);\n  action1=spy(Actions.Action.builder().actionName(\"action1\").numRetries(10).sleepBetweenInvocationsMs(10).supplier(supplier1).continueOn(false).onFail(onFail).onSuccess(onSucess).build());\n  action2=spy(Actions.Action.builder().actionName(\"action2\").numRetries(20).sleepBetweenInvocationsMs(200).supplier(supplier2).build());\n  actions=Actions.newBuilder().addAction(action1).addAction(action2);\n  actions.run();\n  assertEquals(actions.numActions(),2);\n  verify(supplier1,times(11)).get();\n  verify(onFail,times(1)).accept(any());\n  verify(onSucess,times(0)).accept(any());\n  verify(supplier2,times(1)).get();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 657,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4850,
        "startLineNumber" : 36,
        "startColumnNumber" : 4,
        "endLineNumber" : 163,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testActions() throws InterruptedException {\n  Supplier<Actions.ActionResult> supplier1=mock(Supplier.class);\n  when(supplier1.get()).thenReturn(Actions.ActionResult.builder().success(true).build());\n  Supplier<Actions.ActionResult> supplier2=mock(Supplier.class);\n  when(supplier2.get()).thenReturn(Actions.ActionResult.builder().success(true).build());\n  java.util.function.Consumer<Actions.ActionResult> onFail=mock(java.util.function.Consumer.class);\n  java.util.function.Consumer<Actions.ActionResult> onSucess=mock(java.util.function.Consumer.class);\n  Actions.Action action1=spy(Actions.Action.builder().actionName(\"action1\").numRetries(10).sleepBetweenInvocationsMs(100).supplier(supplier1).continueOn(true).onFail(onFail).onSuccess(onSucess).build());\n  Actions.Action action2=spy(Actions.Action.builder().actionName(\"action2\").numRetries(20).sleepBetweenInvocationsMs(200).supplier(supplier2).build());\n  Actions actions=Actions.newBuilder().addAction(action1).addAction(action2);\n  actions.run();\n  assertEquals(actions.numActions(),2);\n  verify(supplier1,times(1)).get();\n  verify(onFail,times(0)).accept(any());\n  verify(onSucess,times(1)).accept(any());\n  verify(supplier2,times(1)).get();\n  supplier1=mock(Supplier.class);\n  when(supplier1.get()).thenReturn(Actions.ActionResult.builder().success(true).build());\n  supplier2=mock(Supplier.class);\n  when(supplier2.get()).thenReturn(Actions.ActionResult.builder().success(true).build());\n  onFail=mock(java.util.function.Consumer.class);\n  onSucess=mock(java.util.function.Consumer.class);\n  action1=spy(Actions.Action.builder().actionName(\"action1\").numRetries(10).sleepBetweenInvocationsMs(100).supplier(supplier1).continueOn(false).onFail(onFail).onSuccess(onSucess).build());\n  action2=spy(Actions.Action.builder().actionName(\"action2\").numRetries(20).sleepBetweenInvocationsMs(200).supplier(supplier2).onFail(onFail).onSuccess(onSucess).build());\n  actions=Actions.newBuilder().addAction(action1).addAction(action2);\n  actions.run();\n  assertEquals(actions.numActions(),2);\n  verify(supplier1,times(1)).get();\n  verify(onFail,times(0)).accept(any());\n  verify(onSucess,times(1)).accept(any());\n  verify(supplier2,times(0)).get();\n  supplier1=mock(Supplier.class);\n  when(supplier1.get()).thenReturn(Actions.ActionResult.builder().success(false).build());\n  supplier2=mock(Supplier.class);\n  when(supplier2.get()).thenReturn(Actions.ActionResult.builder().success(true).build());\n  onFail=mock(java.util.function.Consumer.class);\n  onSucess=mock(java.util.function.Consumer.class);\n  action1=spy(Actions.Action.builder().actionName(\"action1\").numRetries(10).sleepBetweenInvocationsMs(10).supplier(supplier1).continueOn(false).onFail(onFail).onSuccess(onSucess).build());\n  action2=spy(Actions.Action.builder().actionName(\"action2\").numRetries(20).sleepBetweenInvocationsMs(200).supplier(supplier2).build());\n  actions=Actions.newBuilder().addAction(action1).addAction(action2);\n  actions.run();\n  assertEquals(actions.numActions(),2);\n  verify(supplier1,times(11)).get();\n  verify(onFail,times(1)).accept(any());\n  verify(onSucess,times(0)).accept(any());\n  verify(supplier2,times(1)).get();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 665,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 167,
        "startLineNumber" : 102,
        "startColumnNumber" : 16,
        "endLineNumber" : 105,
        "endColumnNumber" : 55
      },
      "nodeContext" : "Actions.Action.builder().actionName(\"action2\").numRetries(20).sleepBetweenInvocationsMs(200)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "200",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 148,
      "startColumnNumber" : 51,
      "endLineNumber" : 148,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 167,
        "startLineNumber" : 145,
        "startColumnNumber" : 16,
        "endLineNumber" : 148,
        "endColumnNumber" : 55
      },
      "nodeContext" : "Actions.Action.builder().actionName(\"action2\").numRetries(20).sleepBetweenInvocationsMs(200)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 212,
        "startLineNumber" : 145,
        "startColumnNumber" : 16,
        "endLineNumber" : 149,
        "endColumnNumber" : 44
      },
      "nodeContext" : "Actions.Action.builder().actionName(\"action2\").numRetries(20).sleepBetweenInvocationsMs(200).supplier(supplier2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 245,
        "startLineNumber" : 145,
        "startColumnNumber" : 16,
        "endLineNumber" : 150,
        "endColumnNumber" : 32
      },
      "nodeContext" : "Actions.Action.builder().actionName(\"action2\").numRetries(20).sleepBetweenInvocationsMs(200).supplier(supplier2).build()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 267,
        "startLineNumber" : 144,
        "startColumnNumber" : 18,
        "endLineNumber" : 150,
        "endColumnNumber" : 33
      },
      "nodeContext" : "spy(Actions.Action.builder().actionName(\"action2\").numRetries(20).sleepBetweenInvocationsMs(200).supplier(supplier2).build())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 21,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 277,
        "startLineNumber" : 144,
        "startColumnNumber" : 8,
        "endLineNumber" : 150,
        "endColumnNumber" : 33
      },
      "nodeContext" : "action2=spy(Actions.Action.builder().actionName(\"action2\").numRetries(20).sleepBetweenInvocationsMs(200).supplier(supplier2).build())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 23,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 278,
        "startLineNumber" : 144,
        "startColumnNumber" : 8,
        "endLineNumber" : 150,
        "endColumnNumber" : 34
      },
      "nodeContext" : "action2=spy(Actions.Action.builder().actionName(\"action2\").numRetries(20).sleepBetweenInvocationsMs(200).supplier(supplier2).build());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 24,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4786,
        "startLineNumber" : 37,
        "startColumnNumber" : 58,
        "endLineNumber" : 163,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Supplier<Actions.ActionResult> supplier1=mock(Supplier.class);\n  when(supplier1.get()).thenReturn(Actions.ActionResult.builder().success(true).build());\n  Supplier<Actions.ActionResult> supplier2=mock(Supplier.class);\n  when(supplier2.get()).thenReturn(Actions.ActionResult.builder().success(true).build());\n  java.util.function.Consumer<Actions.ActionResult> onFail=mock(java.util.function.Consumer.class);\n  java.util.function.Consumer<Actions.ActionResult> onSucess=mock(java.util.function.Consumer.class);\n  Actions.Action action1=spy(Actions.Action.builder().actionName(\"action1\").numRetries(10).sleepBetweenInvocationsMs(100).supplier(supplier1).continueOn(true).onFail(onFail).onSuccess(onSucess).build());\n  Actions.Action action2=spy(Actions.Action.builder().actionName(\"action2\").numRetries(20).sleepBetweenInvocationsMs(200).supplier(supplier2).build());\n  Actions actions=Actions.newBuilder().addAction(action1).addAction(action2);\n  actions.run();\n  assertEquals(actions.numActions(),2);\n  verify(supplier1,times(1)).get();\n  verify(onFail,times(0)).accept(any());\n  verify(onSucess,times(1)).accept(any());\n  verify(supplier2,times(1)).get();\n  supplier1=mock(Supplier.class);\n  when(supplier1.get()).thenReturn(Actions.ActionResult.builder().success(true).build());\n  supplier2=mock(Supplier.class);\n  when(supplier2.get()).thenReturn(Actions.ActionResult.builder().success(true).build());\n  onFail=mock(java.util.function.Consumer.class);\n  onSucess=mock(java.util.function.Consumer.class);\n  action1=spy(Actions.Action.builder().actionName(\"action1\").numRetries(10).sleepBetweenInvocationsMs(100).supplier(supplier1).continueOn(false).onFail(onFail).onSuccess(onSucess).build());\n  action2=spy(Actions.Action.builder().actionName(\"action2\").numRetries(20).sleepBetweenInvocationsMs(200).supplier(supplier2).onFail(onFail).onSuccess(onSucess).build());\n  actions=Actions.newBuilder().addAction(action1).addAction(action2);\n  actions.run();\n  assertEquals(actions.numActions(),2);\n  verify(supplier1,times(1)).get();\n  verify(onFail,times(0)).accept(any());\n  verify(onSucess,times(1)).accept(any());\n  verify(supplier2,times(0)).get();\n  supplier1=mock(Supplier.class);\n  when(supplier1.get()).thenReturn(Actions.ActionResult.builder().success(false).build());\n  supplier2=mock(Supplier.class);\n  when(supplier2.get()).thenReturn(Actions.ActionResult.builder().success(true).build());\n  onFail=mock(java.util.function.Consumer.class);\n  onSucess=mock(java.util.function.Consumer.class);\n  action1=spy(Actions.Action.builder().actionName(\"action1\").numRetries(10).sleepBetweenInvocationsMs(10).supplier(supplier1).continueOn(false).onFail(onFail).onSuccess(onSucess).build());\n  action2=spy(Actions.Action.builder().actionName(\"action2\").numRetries(20).sleepBetweenInvocationsMs(200).supplier(supplier2).build());\n  actions=Actions.newBuilder().addAction(action1).addAction(action2);\n  actions.run();\n  assertEquals(actions.numActions(),2);\n  verify(supplier1,times(11)).get();\n  verify(onFail,times(1)).accept(any());\n  verify(onSucess,times(0)).accept(any());\n  verify(supplier2,times(1)).get();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 657,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4850,
        "startLineNumber" : 36,
        "startColumnNumber" : 4,
        "endLineNumber" : 163,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testActions() throws InterruptedException {\n  Supplier<Actions.ActionResult> supplier1=mock(Supplier.class);\n  when(supplier1.get()).thenReturn(Actions.ActionResult.builder().success(true).build());\n  Supplier<Actions.ActionResult> supplier2=mock(Supplier.class);\n  when(supplier2.get()).thenReturn(Actions.ActionResult.builder().success(true).build());\n  java.util.function.Consumer<Actions.ActionResult> onFail=mock(java.util.function.Consumer.class);\n  java.util.function.Consumer<Actions.ActionResult> onSucess=mock(java.util.function.Consumer.class);\n  Actions.Action action1=spy(Actions.Action.builder().actionName(\"action1\").numRetries(10).sleepBetweenInvocationsMs(100).supplier(supplier1).continueOn(true).onFail(onFail).onSuccess(onSucess).build());\n  Actions.Action action2=spy(Actions.Action.builder().actionName(\"action2\").numRetries(20).sleepBetweenInvocationsMs(200).supplier(supplier2).build());\n  Actions actions=Actions.newBuilder().addAction(action1).addAction(action2);\n  actions.run();\n  assertEquals(actions.numActions(),2);\n  verify(supplier1,times(1)).get();\n  verify(onFail,times(0)).accept(any());\n  verify(onSucess,times(1)).accept(any());\n  verify(supplier2,times(1)).get();\n  supplier1=mock(Supplier.class);\n  when(supplier1.get()).thenReturn(Actions.ActionResult.builder().success(true).build());\n  supplier2=mock(Supplier.class);\n  when(supplier2.get()).thenReturn(Actions.ActionResult.builder().success(true).build());\n  onFail=mock(java.util.function.Consumer.class);\n  onSucess=mock(java.util.function.Consumer.class);\n  action1=spy(Actions.Action.builder().actionName(\"action1\").numRetries(10).sleepBetweenInvocationsMs(100).supplier(supplier1).continueOn(false).onFail(onFail).onSuccess(onSucess).build());\n  action2=spy(Actions.Action.builder().actionName(\"action2\").numRetries(20).sleepBetweenInvocationsMs(200).supplier(supplier2).onFail(onFail).onSuccess(onSucess).build());\n  actions=Actions.newBuilder().addAction(action1).addAction(action2);\n  actions.run();\n  assertEquals(actions.numActions(),2);\n  verify(supplier1,times(1)).get();\n  verify(onFail,times(0)).accept(any());\n  verify(onSucess,times(1)).accept(any());\n  verify(supplier2,times(0)).get();\n  supplier1=mock(Supplier.class);\n  when(supplier1.get()).thenReturn(Actions.ActionResult.builder().success(false).build());\n  supplier2=mock(Supplier.class);\n  when(supplier2.get()).thenReturn(Actions.ActionResult.builder().success(true).build());\n  onFail=mock(java.util.function.Consumer.class);\n  onSucess=mock(java.util.function.Consumer.class);\n  action1=spy(Actions.Action.builder().actionName(\"action1\").numRetries(10).sleepBetweenInvocationsMs(10).supplier(supplier1).continueOn(false).onFail(onFail).onSuccess(onSucess).build());\n  action2=spy(Actions.Action.builder().actionName(\"action2\").numRetries(20).sleepBetweenInvocationsMs(200).supplier(supplier2).build());\n  actions=Actions.newBuilder().addAction(action1).addAction(action2);\n  actions.run();\n  assertEquals(actions.numActions(),2);\n  verify(supplier1,times(11)).get();\n  verify(onFail,times(1)).accept(any());\n  verify(onSucess,times(0)).accept(any());\n  verify(supplier2,times(1)).get();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 665,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 167,
        "startLineNumber" : 145,
        "startColumnNumber" : 16,
        "endLineNumber" : 148,
        "endColumnNumber" : 55
      },
      "nodeContext" : "Actions.Action.builder().actionName(\"action2\").numRetries(20).sleepBetweenInvocationsMs(200)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 64,
    "startColumnNumber" : 51,
    "endLineNumber" : 64,
    "endColumnNumber" : 54
  }, {
    "charLength" : 3,
    "startLineNumber" : 105,
    "startColumnNumber" : 51,
    "endLineNumber" : 105,
    "endColumnNumber" : 54
  }, {
    "charLength" : 3,
    "startLineNumber" : 148,
    "startColumnNumber" : 51,
    "endLineNumber" : 148,
    "endColumnNumber" : 54
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 6
  } ]
}