{
  "id" : 249,
  "expression" : "\"{\\\"content\\\":\\\"\\\\t\\\"}\"",
  "projectName" : "alibaba@fastjson",
  "commitID" : "d3797da65a3d9f804c9e275c25395c59e31f097d",
  "filePath" : "/src/test/java/com/alibaba/json/bvt/bug/Bug_for_ascii_0_31.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"{\\\"content\\\":\\\"\\\\t\\\"}\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 81,
      "startColumnNumber" : 40,
      "endLineNumber" : 81,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 81,
        "startColumnNumber" : 20,
        "endLineNumber" : 81,
        "endColumnNumber" : 72
      },
      "nodeContext" : "Assert.assertEquals(\"{\\\"content\\\":\\\"\\\\t\\\"}\",voText)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 81,
        "startColumnNumber" : 20,
        "endLineNumber" : 81,
        "endColumnNumber" : 73
      },
      "nodeContext" : "Assert.assertEquals(\"{\\\"content\\\":\\\"\\\\t\\\"}\",voText);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1525,
        "startLineNumber" : 58,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (ch) {\ncase '\"':  Assert.assertEquals(\"{\\\"content\\\":\\\"\\\\\\\"\\\"}\",voText);\nbreak;\ncase '/':Assert.assertEquals(\"{\\\"content\\\":\\\"\\\\/\\\"}\",voText);\nbreak;\ncase '\\\\':Assert.assertEquals(\"{\\\"content\\\":\\\"\\\\\\\\\\\"}\",voText);\nbreak;\ncase '\\b':Assert.assertEquals(\"{\\\"content\\\":\\\"\\\\b\\\"}\",voText);\nbreak;\ncase '\\f':Assert.assertEquals(\"{\\\"content\\\":\\\"\\\\f\\\"}\",voText);\nbreak;\ncase '\\n':Assert.assertEquals(\"{\\\"content\\\":\\\"\\\\n\\\"}\",voText);\nbreak;\ncase '\\r':Assert.assertEquals(\"{\\\"content\\\":\\\"\\\\r\\\"}\",voText);\nbreak;\ncase '\\t':Assert.assertEquals(\"{\\\"content\\\":\\\"\\\\t\\\"}\",voText);\nbreak;\ndefault:if (i < 16) {\nAssert.assertEquals(\"{\\\"content\\\":\\\"\\\\u000\" + Integer.toHexString(i).toUpperCase() + \"\\\"}\",voText);\n}\n else {\nAssert.assertEquals(\"{\\\"content\\\":\\\"\\\\u00\" + Integer.toHexString(i).toUpperCase() + \"\\\"}\",voText);\n}\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 110,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 3216,
        "startLineNumber" : 12,
        "startColumnNumber" : 37,
        "endLineNumber" : 93,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  StringBuilder buf=new StringBuilder();\n  char ch=(char)i;\n  buf.append(ch);\n  String text=JSON.toJSONString(buf.toString(),SerializerFeature.BrowserCompatible);\nswitch (ch) {\ncase '\"':    Assert.assertEquals(\"\\\"\\\\\\\"\\\"\",text);\n  break;\ncase '/':Assert.assertEquals(\"\\\"\\\\/\\\"\",text);\nbreak;\ncase '\\\\':Assert.assertEquals(\"\\\"\\\\\\\\\\\"\",text);\nbreak;\ncase '\\b':Assert.assertEquals(\"\\\"\\\\b\\\"\",text);\nbreak;\ncase '\\f':Assert.assertEquals(\"\\\"\\\\f\\\"\",text);\nbreak;\ncase '\\n':Assert.assertEquals(\"\\\"\\\\n\\\"\",text);\nbreak;\ncase '\\r':Assert.assertEquals(\"\\\"\\\\r\\\"\",text);\nbreak;\ncase '\\t':Assert.assertEquals(\"\\\"\\\\t\\\"\",text);\nbreak;\ndefault:if (i < 16) {\nAssert.assertEquals(\"\\\"\\\\u000\" + Integer.toHexString(i).toUpperCase() + \"\\\"\",text);\n}\n else {\nAssert.assertEquals(\"\\\"\\\\u00\" + Integer.toHexString(i).toUpperCase() + \"\\\"\",text);\n}\nbreak;\n}\nVO vo=new VO();\nvo.setContent(buf.toString());\nString voText=JSON.toJSONString(vo,SerializerFeature.BrowserCompatible);\nswitch (ch) {\ncase '\"':Assert.assertEquals(\"{\\\"content\\\":\\\"\\\\\\\"\\\"}\",voText);\nbreak;\ncase '/':Assert.assertEquals(\"{\\\"content\\\":\\\"\\\\/\\\"}\",voText);\nbreak;\ncase '\\\\':Assert.assertEquals(\"{\\\"content\\\":\\\"\\\\\\\\\\\"}\",voText);\nbreak;\ncase '\\b':Assert.assertEquals(\"{\\\"content\\\":\\\"\\\\b\\\"}\",voText);\nbreak;\ncase '\\f':Assert.assertEquals(\"{\\\"content\\\":\\\"\\\\f\\\"}\",voText);\nbreak;\ncase '\\n':Assert.assertEquals(\"{\\\"content\\\":\\\"\\\\n\\\"}\",voText);\nbreak;\ncase '\\r':Assert.assertEquals(\"{\\\"content\\\":\\\"\\\\r\\\"}\",voText);\nbreak;\ncase '\\t':Assert.assertEquals(\"{\\\"content\\\":\\\"\\\\t\\\"}\",voText);\nbreak;\ndefault:if (i < 16) {\nAssert.assertEquals(\"{\\\"content\\\":\\\"\\\\u000\" + Integer.toHexString(i).toUpperCase() + \"\\\"}\",voText);\n}\n else {\nAssert.assertEquals(\"{\\\"content\\\":\\\"\\\\u00\" + Integer.toHexString(i).toUpperCase() + \"\\\"}\",voText);\n}\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 282,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3245,
        "startLineNumber" : 12,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < 32; ++i) {\n  StringBuilder buf=new StringBuilder();\n  char ch=(char)i;\n  buf.append(ch);\n  String text=JSON.toJSONString(buf.toString(),SerializerFeature.BrowserCompatible);\nswitch (ch) {\ncase '\"':    Assert.assertEquals(\"\\\"\\\\\\\"\\\"\",text);\n  break;\ncase '/':Assert.assertEquals(\"\\\"\\\\/\\\"\",text);\nbreak;\ncase '\\\\':Assert.assertEquals(\"\\\"\\\\\\\\\\\"\",text);\nbreak;\ncase '\\b':Assert.assertEquals(\"\\\"\\\\b\\\"\",text);\nbreak;\ncase '\\f':Assert.assertEquals(\"\\\"\\\\f\\\"\",text);\nbreak;\ncase '\\n':Assert.assertEquals(\"\\\"\\\\n\\\"\",text);\nbreak;\ncase '\\r':Assert.assertEquals(\"\\\"\\\\r\\\"\",text);\nbreak;\ncase '\\t':Assert.assertEquals(\"\\\"\\\\t\\\"\",text);\nbreak;\ndefault:if (i < 16) {\nAssert.assertEquals(\"\\\"\\\\u000\" + Integer.toHexString(i).toUpperCase() + \"\\\"\",text);\n}\n else {\nAssert.assertEquals(\"\\\"\\\\u00\" + Integer.toHexString(i).toUpperCase() + \"\\\"\",text);\n}\nbreak;\n}\nVO vo=new VO();\nvo.setContent(buf.toString());\nString voText=JSON.toJSONString(vo,SerializerFeature.BrowserCompatible);\nswitch (ch) {\ncase '\"':Assert.assertEquals(\"{\\\"content\\\":\\\"\\\\\\\"\\\"}\",voText);\nbreak;\ncase '/':Assert.assertEquals(\"{\\\"content\\\":\\\"\\\\/\\\"}\",voText);\nbreak;\ncase '\\\\':Assert.assertEquals(\"{\\\"content\\\":\\\"\\\\\\\\\\\"}\",voText);\nbreak;\ncase '\\b':Assert.assertEquals(\"{\\\"content\\\":\\\"\\\\b\\\"}\",voText);\nbreak;\ncase '\\f':Assert.assertEquals(\"{\\\"content\\\":\\\"\\\\f\\\"}\",voText);\nbreak;\ncase '\\n':Assert.assertEquals(\"{\\\"content\\\":\\\"\\\\n\\\"}\",voText);\nbreak;\ncase '\\r':Assert.assertEquals(\"{\\\"content\\\":\\\"\\\\r\\\"}\",voText);\nbreak;\ncase '\\t':Assert.assertEquals(\"{\\\"content\\\":\\\"\\\\t\\\"}\",voText);\nbreak;\ndefault:if (i < 16) {\nAssert.assertEquals(\"{\\\"content\\\":\\\"\\\\u000\" + Integer.toHexString(i).toUpperCase() + \"\\\"}\",voText);\n}\n else {\nAssert.assertEquals(\"{\\\"content\\\":\\\"\\\\u00\" + Integer.toHexString(i).toUpperCase() + \"\\\"}\",voText);\n}\nbreak;\n}\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 293,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3262,
        "startLineNumber" : 11,
        "startColumnNumber" : 42,
        "endLineNumber" : 95,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  for (int i=0; i < 32; ++i) {\n    StringBuilder buf=new StringBuilder();\n    char ch=(char)i;\n    buf.append(ch);\n    String text=JSON.toJSONString(buf.toString(),SerializerFeature.BrowserCompatible);\nswitch (ch) {\ncase '\"':      Assert.assertEquals(\"\\\"\\\\\\\"\\\"\",text);\n    break;\ncase '/':  Assert.assertEquals(\"\\\"\\\\/\\\"\",text);\nbreak;\ncase '\\\\':Assert.assertEquals(\"\\\"\\\\\\\\\\\"\",text);\nbreak;\ncase '\\b':Assert.assertEquals(\"\\\"\\\\b\\\"\",text);\nbreak;\ncase '\\f':Assert.assertEquals(\"\\\"\\\\f\\\"\",text);\nbreak;\ncase '\\n':Assert.assertEquals(\"\\\"\\\\n\\\"\",text);\nbreak;\ncase '\\r':Assert.assertEquals(\"\\\"\\\\r\\\"\",text);\nbreak;\ncase '\\t':Assert.assertEquals(\"\\\"\\\\t\\\"\",text);\nbreak;\ndefault:if (i < 16) {\nAssert.assertEquals(\"\\\"\\\\u000\" + Integer.toHexString(i).toUpperCase() + \"\\\"\",text);\n}\n else {\nAssert.assertEquals(\"\\\"\\\\u00\" + Integer.toHexString(i).toUpperCase() + \"\\\"\",text);\n}\nbreak;\n}\nVO vo=new VO();\nvo.setContent(buf.toString());\nString voText=JSON.toJSONString(vo,SerializerFeature.BrowserCompatible);\nswitch (ch) {\ncase '\"':Assert.assertEquals(\"{\\\"content\\\":\\\"\\\\\\\"\\\"}\",voText);\nbreak;\ncase '/':Assert.assertEquals(\"{\\\"content\\\":\\\"\\\\/\\\"}\",voText);\nbreak;\ncase '\\\\':Assert.assertEquals(\"{\\\"content\\\":\\\"\\\\\\\\\\\"}\",voText);\nbreak;\ncase '\\b':Assert.assertEquals(\"{\\\"content\\\":\\\"\\\\b\\\"}\",voText);\nbreak;\ncase '\\f':Assert.assertEquals(\"{\\\"content\\\":\\\"\\\\f\\\"}\",voText);\nbreak;\ncase '\\n':Assert.assertEquals(\"{\\\"content\\\":\\\"\\\\n\\\"}\",voText);\nbreak;\ncase '\\r':Assert.assertEquals(\"{\\\"content\\\":\\\"\\\\r\\\"}\",voText);\nbreak;\ncase '\\t':Assert.assertEquals(\"{\\\"content\\\":\\\"\\\\t\\\"}\",voText);\nbreak;\ndefault:if (i < 16) {\nAssert.assertEquals(\"{\\\"content\\\":\\\"\\\\u000\" + Integer.toHexString(i).toUpperCase() + \"\\\"}\",voText);\n}\n else {\nAssert.assertEquals(\"{\\\"content\\\":\\\"\\\\u00\" + Integer.toHexString(i).toUpperCase() + \"\\\"}\",voText);\n}\nbreak;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 294,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3300,
        "startLineNumber" : 11,
        "startColumnNumber" : 4,
        "endLineNumber" : 95,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void test_0() throws Exception {\n  for (int i=0; i < 32; ++i) {\n    StringBuilder buf=new StringBuilder();\n    char ch=(char)i;\n    buf.append(ch);\n    String text=JSON.toJSONString(buf.toString(),SerializerFeature.BrowserCompatible);\nswitch (ch) {\ncase '\"':      Assert.assertEquals(\"\\\"\\\\\\\"\\\"\",text);\n    break;\ncase '/':  Assert.assertEquals(\"\\\"\\\\/\\\"\",text);\nbreak;\ncase '\\\\':Assert.assertEquals(\"\\\"\\\\\\\\\\\"\",text);\nbreak;\ncase '\\b':Assert.assertEquals(\"\\\"\\\\b\\\"\",text);\nbreak;\ncase '\\f':Assert.assertEquals(\"\\\"\\\\f\\\"\",text);\nbreak;\ncase '\\n':Assert.assertEquals(\"\\\"\\\\n\\\"\",text);\nbreak;\ncase '\\r':Assert.assertEquals(\"\\\"\\\\r\\\"\",text);\nbreak;\ncase '\\t':Assert.assertEquals(\"\\\"\\\\t\\\"\",text);\nbreak;\ndefault:if (i < 16) {\nAssert.assertEquals(\"\\\"\\\\u000\" + Integer.toHexString(i).toUpperCase() + \"\\\"\",text);\n}\n else {\nAssert.assertEquals(\"\\\"\\\\u00\" + Integer.toHexString(i).toUpperCase() + \"\\\"\",text);\n}\nbreak;\n}\nVO vo=new VO();\nvo.setContent(buf.toString());\nString voText=JSON.toJSONString(vo,SerializerFeature.BrowserCompatible);\nswitch (ch) {\ncase '\"':Assert.assertEquals(\"{\\\"content\\\":\\\"\\\\\\\"\\\"}\",voText);\nbreak;\ncase '/':Assert.assertEquals(\"{\\\"content\\\":\\\"\\\\/\\\"}\",voText);\nbreak;\ncase '\\\\':Assert.assertEquals(\"{\\\"content\\\":\\\"\\\\\\\\\\\"}\",voText);\nbreak;\ncase '\\b':Assert.assertEquals(\"{\\\"content\\\":\\\"\\\\b\\\"}\",voText);\nbreak;\ncase '\\f':Assert.assertEquals(\"{\\\"content\\\":\\\"\\\\f\\\"}\",voText);\nbreak;\ncase '\\n':Assert.assertEquals(\"{\\\"content\\\":\\\"\\\\n\\\"}\",voText);\nbreak;\ncase '\\r':Assert.assertEquals(\"{\\\"content\\\":\\\"\\\\r\\\"}\",voText);\nbreak;\ncase '\\t':Assert.assertEquals(\"{\\\"content\\\":\\\"\\\\t\\\"}\",voText);\nbreak;\ndefault:if (i < 16) {\nAssert.assertEquals(\"{\\\"content\\\":\\\"\\\\u000\" + Integer.toHexString(i).toUpperCase() + \"\\\"}\",voText);\n}\n else {\nAssert.assertEquals(\"{\\\"content\\\":\\\"\\\\u00\" + Integer.toHexString(i).toUpperCase() + \"\\\"}\",voText);\n}\nbreak;\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 300,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 81,
        "startColumnNumber" : 20,
        "endLineNumber" : 81,
        "endColumnNumber" : 73
      },
      "nodeContext" : "Assert.assertEquals(\"{\\\"content\\\":\\\"\\\\t\\\"}\",voText);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 81,
    "startColumnNumber" : 40,
    "endLineNumber" : 81,
    "endColumnNumber" : 63
  } ],
  "layoutRelationDataList" : [ ]
}