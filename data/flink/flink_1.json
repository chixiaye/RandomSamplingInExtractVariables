[ {
  "id" : 1,
  "expression" : "this",
  "projectName" : "flink",
  "commitID" : "33da59089554f74de6330cd9455d34bc8269a580",
  "filePath" : "/flink-table/flink-table-runtime/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/output/BroadcastingOutput.java",
  "occurrences" : 1,
  "expressionList" : [ {
    "nodeContext" : "this",
    "nodeType" : "ThisExpression",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 44,
      "startColumnNumber" : 8,
      "endLineNumber" : 44,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 44,
        "startColumnNumber" : 8,
        "endLineNumber" : 44,
        "endColumnNumber" : 20
      },
      "nodeContext" : "this.outputs",
      "nodeType" : "FieldAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 44,
        "startColumnNumber" : 8,
        "endLineNumber" : 44,
        "endColumnNumber" : 30
      },
      "nodeContext" : "this.outputs=outputs",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 44,
        "startColumnNumber" : 8,
        "endLineNumber" : 44,
        "endColumnNumber" : 31
      },
      "nodeContext" : "this.outputs=outputs;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 43,
        "startColumnNumber" : 71,
        "endLineNumber" : 45,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.outputs=outputs;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 43,
        "startColumnNumber" : 4,
        "endLineNumber" : 45,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public BroadcastingOutput(Output<StreamRecord<RowData>>[] outputs){\n  this.outputs=outputs;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 22,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 44,
        "startColumnNumber" : 8,
        "endLineNumber" : 44,
        "endColumnNumber" : 31
      },
      "nodeContext" : "this.outputs=outputs;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4,
      "tokenLength" : 4
    },
    "tokenLength" : 1
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 44,
    "startColumnNumber" : 8,
    "endLineNumber" : 44,
    "endColumnNumber" : 12
  } ]
}
, {
  "id" : 2,
  "expression" : "dependencyMatcher.group(\"groupId\")",
  "projectName" : "flink",
  "commitID" : "33da59089554f74de6330cd9455d34bc8269a580",
  "filePath" : "/tools/ci/flink-ci-tools/src/main/java/org/apache/flink/tools/ci/utils/shade/ShadeParser.java",
  "occurrences" : 1,
  "expressionList" : [ {
    "nodeContext" : "dependencyMatcher.group(\"groupId\")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 34,
      "startLineNumber" : 105,
      "startColumnNumber" : 24,
      "endLineNumber" : 105,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 264,
        "startLineNumber" : 104,
        "startColumnNumber" : 16,
        "endLineNumber" : 108,
        "endColumnNumber" : 62
      },
      "nodeContext" : "Dependency.create(dependencyMatcher.group(\"groupId\"),dependencyMatcher.group(\"artifactId\"),dependencyMatcher.group(\"version\"),dependencyMatcher.group(\"classifier\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 294,
        "startLineNumber" : 103,
        "startColumnNumber" : 15,
        "endLineNumber" : 108,
        "endColumnNumber" : 63
      },
      "nodeContext" : "Optional.of(Dependency.create(dependencyMatcher.group(\"groupId\"),dependencyMatcher.group(\"artifactId\"),dependencyMatcher.group(\"version\"),dependencyMatcher.group(\"classifier\")))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 22,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 302,
        "startLineNumber" : 103,
        "startColumnNumber" : 8,
        "endLineNumber" : 108,
        "endColumnNumber" : 64
      },
      "nodeContext" : "return Optional.of(Dependency.create(dependencyMatcher.group(\"groupId\"),dependencyMatcher.group(\"artifactId\"),dependencyMatcher.group(\"version\"),dependencyMatcher.group(\"classifier\")));\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 23,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 487,
        "startLineNumber" : 97,
        "startColumnNumber" : 61,
        "endLineNumber" : 109,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Matcher dependencyMatcher=SHADE_INCLUDE_MODULE_PATTERN.matcher(line);\n  if (!dependencyMatcher.find()) {\n    return Optional.empty();\n  }\n  return Optional.of(Dependency.create(dependencyMatcher.group(\"groupId\"),dependencyMatcher.group(\"artifactId\"),dependencyMatcher.group(\"version\"),dependencyMatcher.group(\"classifier\")));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 43,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 567,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 109,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@VisibleForTesting static Optional<Dependency> parseDependency(String line){\n  Matcher dependencyMatcher=SHADE_INCLUDE_MODULE_PATTERN.matcher(line);\n  if (!dependencyMatcher.find()) {\n    return Optional.empty();\n  }\n  return Optional.of(Dependency.create(dependencyMatcher.group(\"groupId\"),dependencyMatcher.group(\"artifactId\"),dependencyMatcher.group(\"version\"),dependencyMatcher.group(\"classifier\")));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 57,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 264,
        "startLineNumber" : 104,
        "startColumnNumber" : 16,
        "endLineNumber" : 108,
        "endColumnNumber" : 62
      },
      "nodeContext" : "Dependency.create(dependencyMatcher.group(\"groupId\"),dependencyMatcher.group(\"artifactId\"),dependencyMatcher.group(\"version\"),dependencyMatcher.group(\"classifier\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 3,
      "tokenLength" : 27
    },
    "tokenLength" : 6
  } ],
  "positionList" : [ {
    "charLength" : 34,
    "startLineNumber" : 105,
    "startColumnNumber" : 24,
    "endLineNumber" : 105,
    "endColumnNumber" : 58
  } ]
}
, {
  "id" : 3,
  "expression" : "new Watermark(91)",
  "projectName" : "flink",
  "commitID" : "33da59089554f74de6330cd9455d34bc8269a580",
  "filePath" : "/flink-table/flink-table-runtime/src/test/java/org/apache/flink/table/runtime/operators/join/interval/RowTimeIntervalJoinTest.java",
  "occurrences" : 3,
  "expressionList" : [ {
    "nodeContext" : "new Watermark(91)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 234,
      "startColumnNumber" : 27,
      "endLineNumber" : 234,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 234,
        "startColumnNumber" : 8,
        "endLineNumber" : 234,
        "endColumnNumber" : 45
      },
      "nodeContext" : "expectedOutput.add(new Watermark(91))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 234,
        "startColumnNumber" : 8,
        "endLineNumber" : 234,
        "endColumnNumber" : 46
      },
      "nodeContext" : "expectedOutput.add(new Watermark(91));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3533,
        "startLineNumber" : 171,
        "startColumnNumber" : 60,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  RowTimeIntervalJoin joinProcessFunc=new RowTimeIntervalJoin(FlinkJoinType.LEFT,-5,9,0,rowType,rowType,joinFunction,0,0);\n  KeyedTwoInputStreamOperatorTestHarness<RowData,RowData,RowData,RowData> testHarness=createTestHarness(joinProcessFunc);\n  testHarness.open();\n  testHarness.processElement1(insertRecord(1L,\"k1\"));\n  testHarness.processElement2(insertRecord(1L,\"k2\"));\n  assertThat(testHarness.numEventTimeTimers()).isEqualTo(2);\n  assertThat(testHarness.numKeyedStateEntries()).isEqualTo(4);\n  testHarness.processWatermark1(new Watermark(14));\n  testHarness.processWatermark2(new Watermark(14));\n  assertThat(testHarness.numEventTimeTimers()).isEqualTo(1);\n  assertThat(testHarness.numKeyedStateEntries()).isEqualTo(2);\n  testHarness.processWatermark1(new Watermark(18));\n  testHarness.processWatermark2(new Watermark(18));\n  assertThat(testHarness.numEventTimeTimers()).isEqualTo(0);\n  assertThat(testHarness.numKeyedStateEntries()).isEqualTo(0);\n  testHarness.processElement1(insertRecord(2L,\"k1\"));\n  testHarness.processElement2(insertRecord(2L,\"k2\"));\n  assertThat(testHarness.numKeyedStateEntries()).isEqualTo(0);\n  assertThat(testHarness.numEventTimeTimers()).isEqualTo(0);\n  testHarness.processElement1(insertRecord(19L,\"k1\"));\n  testHarness.processElement1(insertRecord(20L,\"k1\"));\n  testHarness.processElement2(insertRecord(26L,\"k1\"));\n  testHarness.processElement2(insertRecord(25L,\"k1\"));\n  testHarness.processElement1(insertRecord(21L,\"k1\"));\n  testHarness.processElement2(insertRecord(39L,\"k2\"));\n  testHarness.processElement2(insertRecord(40L,\"k2\"));\n  testHarness.processElement1(insertRecord(50L,\"k2\"));\n  testHarness.processElement1(insertRecord(49L,\"k2\"));\n  testHarness.processElement2(insertRecord(41L,\"k2\"));\n  testHarness.processWatermark1(new Watermark(100));\n  testHarness.processWatermark2(new Watermark(100));\n  List<Object> expectedOutput=new ArrayList<>();\n  expectedOutput.add(insertRecord(1L,\"k1\",null,null));\n  expectedOutput.add(new Watermark(5));\n  expectedOutput.add(new Watermark(9));\n  expectedOutput.add(insertRecord(2L,\"k1\",null,null));\n  expectedOutput.add(insertRecord(20L,\"k1\",25L,\"k1\"));\n  expectedOutput.add(insertRecord(21L,\"k1\",25L,\"k1\"));\n  expectedOutput.add(insertRecord(21L,\"k1\",26L,\"k1\"));\n  expectedOutput.add(insertRecord(49L,\"k2\",40L,\"k2\"));\n  expectedOutput.add(insertRecord(49L,\"k2\",41L,\"k2\"));\n  expectedOutput.add(insertRecord(50L,\"k2\",41L,\"k2\"));\n  expectedOutput.add(insertRecord(19L,\"k1\",null,null));\n  expectedOutput.add(new Watermark(91));\n  assertor.assertOutputEquals(\"output wrong.\",expectedOutput,testHarness.getOutput());\n  testHarness.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 413,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3599,
        "startLineNumber" : 170,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRowTimeLeftOuterJoin() throws Exception {\n  RowTimeIntervalJoin joinProcessFunc=new RowTimeIntervalJoin(FlinkJoinType.LEFT,-5,9,0,rowType,rowType,joinFunction,0,0);\n  KeyedTwoInputStreamOperatorTestHarness<RowData,RowData,RowData,RowData> testHarness=createTestHarness(joinProcessFunc);\n  testHarness.open();\n  testHarness.processElement1(insertRecord(1L,\"k1\"));\n  testHarness.processElement2(insertRecord(1L,\"k2\"));\n  assertThat(testHarness.numEventTimeTimers()).isEqualTo(2);\n  assertThat(testHarness.numKeyedStateEntries()).isEqualTo(4);\n  testHarness.processWatermark1(new Watermark(14));\n  testHarness.processWatermark2(new Watermark(14));\n  assertThat(testHarness.numEventTimeTimers()).isEqualTo(1);\n  assertThat(testHarness.numKeyedStateEntries()).isEqualTo(2);\n  testHarness.processWatermark1(new Watermark(18));\n  testHarness.processWatermark2(new Watermark(18));\n  assertThat(testHarness.numEventTimeTimers()).isEqualTo(0);\n  assertThat(testHarness.numKeyedStateEntries()).isEqualTo(0);\n  testHarness.processElement1(insertRecord(2L,\"k1\"));\n  testHarness.processElement2(insertRecord(2L,\"k2\"));\n  assertThat(testHarness.numKeyedStateEntries()).isEqualTo(0);\n  assertThat(testHarness.numEventTimeTimers()).isEqualTo(0);\n  testHarness.processElement1(insertRecord(19L,\"k1\"));\n  testHarness.processElement1(insertRecord(20L,\"k1\"));\n  testHarness.processElement2(insertRecord(26L,\"k1\"));\n  testHarness.processElement2(insertRecord(25L,\"k1\"));\n  testHarness.processElement1(insertRecord(21L,\"k1\"));\n  testHarness.processElement2(insertRecord(39L,\"k2\"));\n  testHarness.processElement2(insertRecord(40L,\"k2\"));\n  testHarness.processElement1(insertRecord(50L,\"k2\"));\n  testHarness.processElement1(insertRecord(49L,\"k2\"));\n  testHarness.processElement2(insertRecord(41L,\"k2\"));\n  testHarness.processWatermark1(new Watermark(100));\n  testHarness.processWatermark2(new Watermark(100));\n  List<Object> expectedOutput=new ArrayList<>();\n  expectedOutput.add(insertRecord(1L,\"k1\",null,null));\n  expectedOutput.add(new Watermark(5));\n  expectedOutput.add(new Watermark(9));\n  expectedOutput.add(insertRecord(2L,\"k1\",null,null));\n  expectedOutput.add(insertRecord(20L,\"k1\",25L,\"k1\"));\n  expectedOutput.add(insertRecord(21L,\"k1\",25L,\"k1\"));\n  expectedOutput.add(insertRecord(21L,\"k1\",26L,\"k1\"));\n  expectedOutput.add(insertRecord(49L,\"k2\",40L,\"k2\"));\n  expectedOutput.add(insertRecord(49L,\"k2\",41L,\"k2\"));\n  expectedOutput.add(insertRecord(50L,\"k2\",41L,\"k2\"));\n  expectedOutput.add(insertRecord(19L,\"k1\",null,null));\n  expectedOutput.add(new Watermark(91));\n  assertor.assertOutputEquals(\"output wrong.\",expectedOutput,testHarness.getOutput());\n  testHarness.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 421,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 234,
        "startColumnNumber" : 8,
        "endLineNumber" : 234,
        "endColumnNumber" : 46
      },
      "nodeContext" : "expectedOutput.add(new Watermark(91));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5,
      "tokenLength" : 9
    },
    "tokenLength" : 6
  }, {
    "nodeContext" : "new Watermark(91)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 304,
      "startColumnNumber" : 27,
      "endLineNumber" : 304,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 304,
        "startColumnNumber" : 8,
        "endLineNumber" : 304,
        "endColumnNumber" : 45
      },
      "nodeContext" : "expectedOutput.add(new Watermark(91))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 304,
        "startColumnNumber" : 8,
        "endLineNumber" : 304,
        "endColumnNumber" : 46
      },
      "nodeContext" : "expectedOutput.add(new Watermark(91));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3535,
        "startLineNumber" : 241,
        "startColumnNumber" : 61,
        "endLineNumber" : 308,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  RowTimeIntervalJoin joinProcessFunc=new RowTimeIntervalJoin(FlinkJoinType.RIGHT,-5,9,0,rowType,rowType,joinFunction,0,0);\n  KeyedTwoInputStreamOperatorTestHarness<RowData,RowData,RowData,RowData> testHarness=createTestHarness(joinProcessFunc);\n  testHarness.open();\n  testHarness.processElement1(insertRecord(1L,\"k1\"));\n  testHarness.processElement2(insertRecord(1L,\"k2\"));\n  assertThat(testHarness.numEventTimeTimers()).isEqualTo(2);\n  assertThat(testHarness.numKeyedStateEntries()).isEqualTo(4);\n  testHarness.processWatermark1(new Watermark(14));\n  testHarness.processWatermark2(new Watermark(14));\n  assertThat(testHarness.numEventTimeTimers()).isEqualTo(1);\n  assertThat(testHarness.numKeyedStateEntries()).isEqualTo(2);\n  testHarness.processWatermark1(new Watermark(18));\n  testHarness.processWatermark2(new Watermark(18));\n  assertThat(testHarness.numEventTimeTimers()).isEqualTo(0);\n  assertThat(testHarness.numKeyedStateEntries()).isEqualTo(0);\n  testHarness.processElement1(insertRecord(2L,\"k1\"));\n  testHarness.processElement2(insertRecord(2L,\"k2\"));\n  assertThat(testHarness.numKeyedStateEntries()).isEqualTo(0);\n  assertThat(testHarness.numEventTimeTimers()).isEqualTo(0);\n  testHarness.processElement1(insertRecord(19L,\"k1\"));\n  testHarness.processElement1(insertRecord(20L,\"k1\"));\n  testHarness.processElement2(insertRecord(26L,\"k1\"));\n  testHarness.processElement2(insertRecord(25L,\"k1\"));\n  testHarness.processElement1(insertRecord(21L,\"k1\"));\n  testHarness.processElement2(insertRecord(39L,\"k2\"));\n  testHarness.processElement2(insertRecord(40L,\"k2\"));\n  testHarness.processElement1(insertRecord(50L,\"k2\"));\n  testHarness.processElement1(insertRecord(49L,\"k2\"));\n  testHarness.processElement2(insertRecord(41L,\"k2\"));\n  testHarness.processWatermark1(new Watermark(100));\n  testHarness.processWatermark2(new Watermark(100));\n  List<Object> expectedOutput=new ArrayList<>();\n  expectedOutput.add(new Watermark(5));\n  expectedOutput.add(insertRecord(null,null,1L,\"k2\"));\n  expectedOutput.add(new Watermark(9));\n  expectedOutput.add(insertRecord(null,null,2L,\"k2\"));\n  expectedOutput.add(insertRecord(20L,\"k1\",25L,\"k1\"));\n  expectedOutput.add(insertRecord(21L,\"k1\",25L,\"k1\"));\n  expectedOutput.add(insertRecord(21L,\"k1\",26L,\"k1\"));\n  expectedOutput.add(insertRecord(49L,\"k2\",40L,\"k2\"));\n  expectedOutput.add(insertRecord(49L,\"k2\",41L,\"k2\"));\n  expectedOutput.add(insertRecord(50L,\"k2\",41L,\"k2\"));\n  expectedOutput.add(insertRecord(null,null,39L,\"k2\"));\n  expectedOutput.add(new Watermark(91));\n  assertor.assertOutputEquals(\"output wrong.\",expectedOutput,testHarness.getOutput());\n  testHarness.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 413,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3602,
        "startLineNumber" : 240,
        "startColumnNumber" : 4,
        "endLineNumber" : 308,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRowTimeRightOuterJoin() throws Exception {\n  RowTimeIntervalJoin joinProcessFunc=new RowTimeIntervalJoin(FlinkJoinType.RIGHT,-5,9,0,rowType,rowType,joinFunction,0,0);\n  KeyedTwoInputStreamOperatorTestHarness<RowData,RowData,RowData,RowData> testHarness=createTestHarness(joinProcessFunc);\n  testHarness.open();\n  testHarness.processElement1(insertRecord(1L,\"k1\"));\n  testHarness.processElement2(insertRecord(1L,\"k2\"));\n  assertThat(testHarness.numEventTimeTimers()).isEqualTo(2);\n  assertThat(testHarness.numKeyedStateEntries()).isEqualTo(4);\n  testHarness.processWatermark1(new Watermark(14));\n  testHarness.processWatermark2(new Watermark(14));\n  assertThat(testHarness.numEventTimeTimers()).isEqualTo(1);\n  assertThat(testHarness.numKeyedStateEntries()).isEqualTo(2);\n  testHarness.processWatermark1(new Watermark(18));\n  testHarness.processWatermark2(new Watermark(18));\n  assertThat(testHarness.numEventTimeTimers()).isEqualTo(0);\n  assertThat(testHarness.numKeyedStateEntries()).isEqualTo(0);\n  testHarness.processElement1(insertRecord(2L,\"k1\"));\n  testHarness.processElement2(insertRecord(2L,\"k2\"));\n  assertThat(testHarness.numKeyedStateEntries()).isEqualTo(0);\n  assertThat(testHarness.numEventTimeTimers()).isEqualTo(0);\n  testHarness.processElement1(insertRecord(19L,\"k1\"));\n  testHarness.processElement1(insertRecord(20L,\"k1\"));\n  testHarness.processElement2(insertRecord(26L,\"k1\"));\n  testHarness.processElement2(insertRecord(25L,\"k1\"));\n  testHarness.processElement1(insertRecord(21L,\"k1\"));\n  testHarness.processElement2(insertRecord(39L,\"k2\"));\n  testHarness.processElement2(insertRecord(40L,\"k2\"));\n  testHarness.processElement1(insertRecord(50L,\"k2\"));\n  testHarness.processElement1(insertRecord(49L,\"k2\"));\n  testHarness.processElement2(insertRecord(41L,\"k2\"));\n  testHarness.processWatermark1(new Watermark(100));\n  testHarness.processWatermark2(new Watermark(100));\n  List<Object> expectedOutput=new ArrayList<>();\n  expectedOutput.add(new Watermark(5));\n  expectedOutput.add(insertRecord(null,null,1L,\"k2\"));\n  expectedOutput.add(new Watermark(9));\n  expectedOutput.add(insertRecord(null,null,2L,\"k2\"));\n  expectedOutput.add(insertRecord(20L,\"k1\",25L,\"k1\"));\n  expectedOutput.add(insertRecord(21L,\"k1\",25L,\"k1\"));\n  expectedOutput.add(insertRecord(21L,\"k1\",26L,\"k1\"));\n  expectedOutput.add(insertRecord(49L,\"k2\",40L,\"k2\"));\n  expectedOutput.add(insertRecord(49L,\"k2\",41L,\"k2\"));\n  expectedOutput.add(insertRecord(50L,\"k2\",41L,\"k2\"));\n  expectedOutput.add(insertRecord(null,null,39L,\"k2\"));\n  expectedOutput.add(new Watermark(91));\n  assertor.assertOutputEquals(\"output wrong.\",expectedOutput,testHarness.getOutput());\n  testHarness.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 421,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 304,
        "startColumnNumber" : 8,
        "endLineNumber" : 304,
        "endColumnNumber" : 46
      },
      "nodeContext" : "expectedOutput.add(new Watermark(91));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5,
      "tokenLength" : 9
    },
    "tokenLength" : 6
  }, {
    "nodeContext" : "new Watermark(91)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 381,
      "startColumnNumber" : 27,
      "endLineNumber" : 381,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 381,
        "startColumnNumber" : 8,
        "endLineNumber" : 381,
        "endColumnNumber" : 45
      },
      "nodeContext" : "expectedOutput.add(new Watermark(91))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 381,
        "startColumnNumber" : 8,
        "endLineNumber" : 381,
        "endColumnNumber" : 46
      },
      "nodeContext" : "expectedOutput.add(new Watermark(91));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3861,
        "startLineNumber" : 312,
        "startColumnNumber" : 60,
        "endLineNumber" : 385,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  RowTimeIntervalJoin joinProcessFunc=new RowTimeIntervalJoin(FlinkJoinType.FULL,-5,9,0,rowType,rowType,joinFunction,0,0);\n  KeyedTwoInputStreamOperatorTestHarness<RowData,RowData,RowData,RowData> testHarness=createTestHarness(joinProcessFunc);\n  testHarness.open();\n  testHarness.processElement1(insertRecord(1L,\"k1\"));\n  testHarness.processElement2(insertRecord(1L,\"k2\"));\n  assertThat(testHarness.numEventTimeTimers()).isEqualTo(2);\n  assertThat(testHarness.numKeyedStateEntries()).isEqualTo(4);\n  testHarness.processWatermark1(new Watermark(14));\n  testHarness.processWatermark2(new Watermark(14));\n  assertThat(testHarness.numEventTimeTimers()).isEqualTo(1);\n  assertThat(testHarness.numKeyedStateEntries()).isEqualTo(2);\n  testHarness.processWatermark1(new Watermark(18));\n  testHarness.processWatermark2(new Watermark(18));\n  assertThat(testHarness.numEventTimeTimers()).isEqualTo(0);\n  assertThat(testHarness.numKeyedStateEntries()).isEqualTo(0);\n  testHarness.processElement1(insertRecord(2L,\"k1\"));\n  testHarness.processElement2(insertRecord(2L,\"k2\"));\n  assertThat(testHarness.numKeyedStateEntries()).isEqualTo(0);\n  assertThat(testHarness.numEventTimeTimers()).isEqualTo(0);\n  testHarness.processElement1(insertRecord(19L,\"k1\"));\n  testHarness.processElement1(insertRecord(20L,\"k1\"));\n  testHarness.processElement2(insertRecord(26L,\"k1\"));\n  testHarness.processElement2(insertRecord(25L,\"k1\"));\n  testHarness.processElement1(insertRecord(21L,\"k1\"));\n  testHarness.processElement2(insertRecord(39L,\"k2\"));\n  testHarness.processElement2(insertRecord(40L,\"k2\"));\n  testHarness.processElement1(insertRecord(50L,\"k2\"));\n  testHarness.processElement1(insertRecord(49L,\"k2\"));\n  testHarness.processElement2(insertRecord(41L,\"k2\"));\n  testHarness.processWatermark1(new Watermark(100));\n  testHarness.processWatermark2(new Watermark(100));\n  List<Object> expectedOutput=new ArrayList<>();\n  expectedOutput.add(insertRecord(1L,\"k1\",null,null));\n  expectedOutput.add(new Watermark(5));\n  expectedOutput.add(insertRecord(null,null,1L,\"k2\"));\n  expectedOutput.add(new Watermark(9));\n  expectedOutput.add(insertRecord(2L,\"k1\",null,null));\n  expectedOutput.add(insertRecord(null,null,2L,\"k2\"));\n  expectedOutput.add(insertRecord(20L,\"k1\",25L,\"k1\"));\n  expectedOutput.add(insertRecord(21L,\"k1\",25L,\"k1\"));\n  expectedOutput.add(insertRecord(21L,\"k1\",26L,\"k1\"));\n  expectedOutput.add(insertRecord(49L,\"k2\",40L,\"k2\"));\n  expectedOutput.add(insertRecord(49L,\"k2\",41L,\"k2\"));\n  expectedOutput.add(insertRecord(50L,\"k2\",41L,\"k2\"));\n  expectedOutput.add(insertRecord(19L,\"k1\",null,null));\n  expectedOutput.add(insertRecord(null,null,39L,\"k2\"));\n  expectedOutput.add(new Watermark(91));\n  assertor.assertOutputEquals(\"output wrong.\",expectedOutput,testHarness.getOutput());\n  testHarness.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 443,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3999,
        "startLineNumber" : 310,
        "startColumnNumber" : 4,
        "endLineNumber" : 385,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * a.rowtime >= b.rowtime - 5 and a.rowtime <= b.rowtime + 9. * \n */\n@Test public void testRowTimeFullOuterJoin() throws Exception {\n  RowTimeIntervalJoin joinProcessFunc=new RowTimeIntervalJoin(FlinkJoinType.FULL,-5,9,0,rowType,rowType,joinFunction,0,0);\n  KeyedTwoInputStreamOperatorTestHarness<RowData,RowData,RowData,RowData> testHarness=createTestHarness(joinProcessFunc);\n  testHarness.open();\n  testHarness.processElement1(insertRecord(1L,\"k1\"));\n  testHarness.processElement2(insertRecord(1L,\"k2\"));\n  assertThat(testHarness.numEventTimeTimers()).isEqualTo(2);\n  assertThat(testHarness.numKeyedStateEntries()).isEqualTo(4);\n  testHarness.processWatermark1(new Watermark(14));\n  testHarness.processWatermark2(new Watermark(14));\n  assertThat(testHarness.numEventTimeTimers()).isEqualTo(1);\n  assertThat(testHarness.numKeyedStateEntries()).isEqualTo(2);\n  testHarness.processWatermark1(new Watermark(18));\n  testHarness.processWatermark2(new Watermark(18));\n  assertThat(testHarness.numEventTimeTimers()).isEqualTo(0);\n  assertThat(testHarness.numKeyedStateEntries()).isEqualTo(0);\n  testHarness.processElement1(insertRecord(2L,\"k1\"));\n  testHarness.processElement2(insertRecord(2L,\"k2\"));\n  assertThat(testHarness.numKeyedStateEntries()).isEqualTo(0);\n  assertThat(testHarness.numEventTimeTimers()).isEqualTo(0);\n  testHarness.processElement1(insertRecord(19L,\"k1\"));\n  testHarness.processElement1(insertRecord(20L,\"k1\"));\n  testHarness.processElement2(insertRecord(26L,\"k1\"));\n  testHarness.processElement2(insertRecord(25L,\"k1\"));\n  testHarness.processElement1(insertRecord(21L,\"k1\"));\n  testHarness.processElement2(insertRecord(39L,\"k2\"));\n  testHarness.processElement2(insertRecord(40L,\"k2\"));\n  testHarness.processElement1(insertRecord(50L,\"k2\"));\n  testHarness.processElement1(insertRecord(49L,\"k2\"));\n  testHarness.processElement2(insertRecord(41L,\"k2\"));\n  testHarness.processWatermark1(new Watermark(100));\n  testHarness.processWatermark2(new Watermark(100));\n  List<Object> expectedOutput=new ArrayList<>();\n  expectedOutput.add(insertRecord(1L,\"k1\",null,null));\n  expectedOutput.add(new Watermark(5));\n  expectedOutput.add(insertRecord(null,null,1L,\"k2\"));\n  expectedOutput.add(new Watermark(9));\n  expectedOutput.add(insertRecord(2L,\"k1\",null,null));\n  expectedOutput.add(insertRecord(null,null,2L,\"k2\"));\n  expectedOutput.add(insertRecord(20L,\"k1\",25L,\"k1\"));\n  expectedOutput.add(insertRecord(21L,\"k1\",25L,\"k1\"));\n  expectedOutput.add(insertRecord(21L,\"k1\",26L,\"k1\"));\n  expectedOutput.add(insertRecord(49L,\"k2\",40L,\"k2\"));\n  expectedOutput.add(insertRecord(49L,\"k2\",41L,\"k2\"));\n  expectedOutput.add(insertRecord(50L,\"k2\",41L,\"k2\"));\n  expectedOutput.add(insertRecord(19L,\"k1\",null,null));\n  expectedOutput.add(insertRecord(null,null,39L,\"k2\"));\n  expectedOutput.add(new Watermark(91));\n  assertor.assertOutputEquals(\"output wrong.\",expectedOutput,testHarness.getOutput());\n  testHarness.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 452,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 381,
        "startColumnNumber" : 8,
        "endLineNumber" : 381,
        "endColumnNumber" : 46
      },
      "nodeContext" : "expectedOutput.add(new Watermark(91));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5,
      "tokenLength" : 9
    },
    "tokenLength" : 6
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 234,
    "startColumnNumber" : 27,
    "endLineNumber" : 234,
    "endColumnNumber" : 44
  }, {
    "charLength" : 17,
    "startLineNumber" : 304,
    "startColumnNumber" : 27,
    "endLineNumber" : 304,
    "endColumnNumber" : 44
  }, {
    "charLength" : 17,
    "startLineNumber" : 381,
    "startColumnNumber" : 27,
    "endLineNumber" : 381,
    "endColumnNumber" : 44
  } ]
}
, {
  "id" : 4,
  "expression" : "AsyncDataStream.orderedWait(inputStream,function,timeout,TimeUnit.MILLISECONDS,20)",
  "projectName" : "flink",
  "commitID" : "33da59089554f74de6330cd9455d34bc8269a580",
  "filePath" : "/flink-examples/flink-examples-streaming/src/main/java/org/apache/flink/streaming/examples/async/AsyncIOExample.java",
  "occurrences" : 1,
  "expressionList" : [ {
    "nodeContext" : "AsyncDataStream.orderedWait(inputStream,function,timeout,TimeUnit.MILLISECONDS,20)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 119,
      "startLineNumber" : 89,
      "startColumnNumber" : 24,
      "endLineNumber" : 90,
      "endColumnNumber" : 90
    },
    "astNodeNumber" : 10,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 152,
        "startLineNumber" : 88,
        "startColumnNumber" : 16,
        "endLineNumber" : 90,
        "endColumnNumber" : 90
      },
      "nodeContext" : "result=AsyncDataStream.orderedWait(inputStream,function,timeout,TimeUnit.MILLISECONDS,20)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 153,
        "startLineNumber" : 88,
        "startColumnNumber" : 16,
        "endLineNumber" : 90,
        "endColumnNumber" : 91
      },
      "nodeContext" : "result=AsyncDataStream.orderedWait(inputStream,function,timeout,TimeUnit.MILLISECONDS,20);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 580,
        "startLineNumber" : 86,
        "startColumnNumber" : 8,
        "endLineNumber" : 99,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (mode.toUpperCase()) {\ncase \"ORDERED\":  result=AsyncDataStream.orderedWait(inputStream,function,timeout,TimeUnit.MILLISECONDS,20);\nbreak;\ncase \"UNORDERED\":result=AsyncDataStream.unorderedWait(inputStream,function,timeout,TimeUnit.MILLISECONDS,20);\nbreak;\ndefault:throw new IllegalStateException(\"Unknown mode: \" + mode);\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 44,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1575,
        "startLineNumber" : 61,
        "startColumnNumber" : 60,
        "endLineNumber" : 105,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final ParameterTool params=ParameterTool.fromArgs(args);\n  final String mode;\n  final long timeout;\n  try {\n    mode=params.get(\"waitMode\",\"ordered\");\n    timeout=params.getLong(\"timeout\",10000L);\n  }\n catch (  Exception e) {\n    System.out.println(\"To customize example, use: AsyncIOExample [--waitMode <ordered or unordered>]\");\n    throw e;\n  }\n  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();\n  DataStream<Integer> inputStream=env.addSource(new SimpleSource());\n  AsyncFunction<Integer,String> function=new SampleAsyncFunction();\n  DataStream<String> result;\nswitch (mode.toUpperCase()) {\ncase \"ORDERED\":    result=AsyncDataStream.orderedWait(inputStream,function,timeout,TimeUnit.MILLISECONDS,20);\n  break;\ncase \"UNORDERED\":result=AsyncDataStream.unorderedWait(inputStream,function,timeout,TimeUnit.MILLISECONDS,20);\nbreak;\ndefault:throw new IllegalStateException(\"Unknown mode: \" + mode);\n}\nresult.print();\nenv.execute(\"Async IO Example: \" + mode);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 153,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1631,
        "startLineNumber" : 61,
        "startColumnNumber" : 4,
        "endLineNumber" : 105,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void main(String[] args) throws Exception {\n  final ParameterTool params=ParameterTool.fromArgs(args);\n  final String mode;\n  final long timeout;\n  try {\n    mode=params.get(\"waitMode\",\"ordered\");\n    timeout=params.getLong(\"timeout\",10000L);\n  }\n catch (  Exception e) {\n    System.out.println(\"To customize example, use: AsyncIOExample [--waitMode <ordered or unordered>]\");\n    throw e;\n  }\n  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();\n  DataStream<Integer> inputStream=env.addSource(new SimpleSource());\n  AsyncFunction<Integer,String> function=new SampleAsyncFunction();\n  DataStream<String> result;\nswitch (mode.toUpperCase()) {\ncase \"ORDERED\":    result=AsyncDataStream.orderedWait(inputStream,function,timeout,TimeUnit.MILLISECONDS,20);\n  break;\ncase \"UNORDERED\":result=AsyncDataStream.unorderedWait(inputStream,function,timeout,TimeUnit.MILLISECONDS,20);\nbreak;\ndefault:throw new IllegalStateException(\"Unknown mode: \" + mode);\n}\nresult.print();\nenv.execute(\"Async IO Example: \" + mode);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 166,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 152,
        "startLineNumber" : 88,
        "startColumnNumber" : 16,
        "endLineNumber" : 90,
        "endColumnNumber" : 90
      },
      "nodeContext" : "result=AsyncDataStream.orderedWait(inputStream,function,timeout,TimeUnit.MILLISECONDS,20)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 12,
      "astHeight" : 4,
      "tokenLength" : 14
    },
    "tokenLength" : 13
  } ],
  "positionList" : [ {
    "charLength" : 119,
    "startLineNumber" : 89,
    "startColumnNumber" : 24,
    "endLineNumber" : 90,
    "endColumnNumber" : 90
  } ]
}
, {
  "id" : 5,
  "expression" : "outputFormats.entrySet().iterator().next()",
  "projectName" : "flink",
  "commitID" : "33da59089554f74de6330cd9455d34bc8269a580",
  "filePath" : "/flink-runtime/src/main/java/org/apache/flink/runtime/jobgraph/InputOutputFormatContainer.java",
  "occurrences" : 1,
  "expressionList" : [ {
    "nodeContext" : "outputFormats.entrySet().iterator().next()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 42,
      "startLineNumber" : 122,
      "startColumnNumber" : 16,
      "endLineNumber" : 122,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 7,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 121,
        "startColumnNumber" : 74,
        "endLineNumber" : 122,
        "endColumnNumber" : 58
      },
      "nodeContext" : "entry=outputFormats.entrySet().iterator().next()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 121,
        "startColumnNumber" : 8,
        "endLineNumber" : 122,
        "endColumnNumber" : 59
      },
      "nodeContext" : "Map.Entry<OperatorID,UserCodeWrapper<? extends OutputFormat<?>>> entry=outputFormats.entrySet().iterator().next();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 578,
        "startLineNumber" : 116,
        "startColumnNumber" : 75,
        "endLineNumber" : 129,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<OperatorID,UserCodeWrapper<? extends OutputFormat<?>>> outputFormats=formats.getOutputFormats();\n  Preconditions.checkState(outputFormats.size() == 1);\n  Map.Entry<OperatorID,UserCodeWrapper<? extends OutputFormat<?>>> entry=outputFormats.entrySet().iterator().next();\n  return new ImmutablePair<>(entry.getKey(),(OutputFormat<IT>)entry.getValue().getUserCodeObject(OutputFormat.class,userCodeClassLoader));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 77,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 684,
        "startLineNumber" : 115,
        "startColumnNumber" : 4,
        "endLineNumber" : 129,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") public <IT>Pair<OperatorID,OutputFormat<IT>> getUniqueOutputFormat(){\n  Map<OperatorID,UserCodeWrapper<? extends OutputFormat<?>>> outputFormats=formats.getOutputFormats();\n  Preconditions.checkState(outputFormats.size() == 1);\n  Map.Entry<OperatorID,UserCodeWrapper<? extends OutputFormat<?>>> entry=outputFormats.entrySet().iterator().next();\n  return new ImmutablePair<>(entry.getKey(),(OutputFormat<IT>)entry.getValue().getUserCodeObject(OutputFormat.class,userCodeClassLoader));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 95,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 121,
        "startColumnNumber" : 74,
        "endLineNumber" : 122,
        "endColumnNumber" : 58
      },
      "nodeContext" : "entry=outputFormats.entrySet().iterator().next()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 5,
      "tokenLength" : 10
    },
    "tokenLength" : 9
  } ],
  "positionList" : [ {
    "charLength" : 42,
    "startLineNumber" : 122,
    "startColumnNumber" : 16,
    "endLineNumber" : 122,
    "endColumnNumber" : 58
  } ]
}
, {
  "id" : 6,
  "expression" : "Preconditions.checkNotNull(bitVector)",
  "projectName" : "flink",
  "commitID" : "33da59089554f74de6330cd9455d34bc8269a580",
  "filePath" : "/flink-python/src/main/java/org/apache/flink/table/runtime/arrow/vectors/ArrowBooleanColumnVector.java",
  "occurrences" : 1,
  "expressionList" : [ {
    "nodeContext" : "Preconditions.checkNotNull(bitVector)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 37,
      "startLineNumber" : 35,
      "startColumnNumber" : 25,
      "endLineNumber" : 35,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 35,
        "startColumnNumber" : 8,
        "endLineNumber" : 35,
        "endColumnNumber" : 62
      },
      "nodeContext" : "this.bitVector=Preconditions.checkNotNull(bitVector)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 35,
        "startColumnNumber" : 8,
        "endLineNumber" : 35,
        "endColumnNumber" : 63
      },
      "nodeContext" : "this.bitVector=Preconditions.checkNotNull(bitVector);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 34,
        "startColumnNumber" : 57,
        "endLineNumber" : 36,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.bitVector=Preconditions.checkNotNull(bitVector);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 34,
        "startColumnNumber" : 4,
        "endLineNumber" : 36,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public ArrowBooleanColumnVector(BitVector bitVector){\n  this.bitVector=Preconditions.checkNotNull(bitVector);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 17,
      "astHeight" : 6
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 35,
        "startColumnNumber" : 8,
        "endLineNumber" : 35,
        "endColumnNumber" : 63
      },
      "nodeContext" : "this.bitVector=Preconditions.checkNotNull(bitVector);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4,
      "tokenLength" : 9
    },
    "tokenLength" : 7
  } ],
  "positionList" : [ {
    "charLength" : 37,
    "startLineNumber" : 35,
    "startColumnNumber" : 25,
    "endLineNumber" : 35,
    "endColumnNumber" : 62
  } ]
}
, {
  "id" : 7,
  "expression" : "typeToString()",
  "projectName" : "flink",
  "commitID" : "33da59089554f74de6330cd9455d34bc8269a580",
  "filePath" : "/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/operations/SetQueryOperation.java",
  "occurrences" : 1,
  "expressionList" : [ {
    "nodeContext" : "typeToString()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 83,
      "startColumnNumber" : 16,
      "endLineNumber" : 83,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 2,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 82,
        "startColumnNumber" : 15,
        "endLineNumber" : 83,
        "endColumnNumber" : 80
      },
      "nodeContext" : "OperationUtils.formatWithChildren(typeToString(),args,getChildren(),Operation::asSummaryString)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 82,
        "startColumnNumber" : 8,
        "endLineNumber" : 83,
        "endColumnNumber" : 81
      },
      "nodeContext" : "return OperationUtils.formatWithChildren(typeToString(),args,getChildren(),Operation::asSummaryString);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 228,
        "startLineNumber" : 78,
        "startColumnNumber" : 36,
        "endLineNumber" : 84,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,Object> args=new LinkedHashMap<>();\n  args.put(\"all\",all);\n  return OperationUtils.formatWithChildren(typeToString(),args,getChildren(),Operation::asSummaryString);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 33,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 274,
        "startLineNumber" : 77,
        "startColumnNumber" : 4,
        "endLineNumber" : 84,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public String asSummaryString(){\n  Map<String,Object> args=new LinkedHashMap<>();\n  args.put(\"all\",all);\n  return OperationUtils.formatWithChildren(typeToString(),args,getChildren(),Operation::asSummaryString);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 40,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 82,
        "startColumnNumber" : 15,
        "endLineNumber" : 83,
        "endColumnNumber" : 80
      },
      "nodeContext" : "OperationUtils.formatWithChildren(typeToString(),args,getChildren(),Operation::asSummaryString)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3,
      "tokenLength" : 18
    },
    "tokenLength" : 3
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 83,
    "startColumnNumber" : 16,
    "endLineNumber" : 83,
    "endColumnNumber" : 30
  } ]
}
, {
  "id" : 8,
  "expression" : "TypeExtractor.createTypeInfo(Event.class)",
  "projectName" : "flink",
  "commitID" : "33da59089554f74de6330cd9455d34bc8269a580",
  "filePath" : "/flink-libraries/flink-cep/src/test/java/org/apache/flink/cep/Event.java",
  "occurrences" : 1,
  "expressionList" : [ {
    "nodeContext" : "TypeExtractor.createTypeInfo(Event.class)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 41,
      "startLineNumber" : 75,
      "startColumnNumber" : 41,
      "endLineNumber" : 75,
      "endColumnNumber" : 82
    },
    "astNodeNumber" : 6,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 75,
        "startColumnNumber" : 16,
        "endLineNumber" : 75,
        "endColumnNumber" : 82
      },
      "nodeContext" : "(TypeInformation<Event>)TypeExtractor.createTypeInfo(Event.class)",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 74,
        "startColumnNumber" : 31,
        "endLineNumber" : 75,
        "endColumnNumber" : 82
      },
      "nodeContext" : "typeInformation=(TypeInformation<Event>)TypeExtractor.createTypeInfo(Event.class)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 74,
        "startColumnNumber" : 8,
        "endLineNumber" : 75,
        "endColumnNumber" : 83
      },
      "nodeContext" : "TypeInformation<Event> typeInformation=(TypeInformation<Event>)TypeExtractor.createTypeInfo(Event.class);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 213,
        "startLineNumber" : 73,
        "startColumnNumber" : 63,
        "endLineNumber" : 78,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TypeInformation<Event> typeInformation=(TypeInformation<Event>)TypeExtractor.createTypeInfo(Event.class);\n  return typeInformation.createSerializer(new ExecutionConfig());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 28,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 272,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 78,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static TypeSerializer<Event> createTypeSerializer(){\n  TypeInformation<Event> typeInformation=(TypeInformation<Event>)TypeExtractor.createTypeInfo(Event.class);\n  return typeInformation.createSerializer(new ExecutionConfig());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 37,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 75,
        "startColumnNumber" : 16,
        "endLineNumber" : 75,
        "endColumnNumber" : 82
      },
      "nodeContext" : "(TypeInformation<Event>)TypeExtractor.createTypeInfo(Event.class)",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 12,
      "astHeight" : 5,
      "tokenLength" : 11
    },
    "tokenLength" : 7
  } ],
  "positionList" : [ {
    "charLength" : 41,
    "startLineNumber" : 75,
    "startColumnNumber" : 41,
    "endLineNumber" : 75,
    "endColumnNumber" : 82
  } ]
}
, {
  "id" : 9,
  "expression" : "Preconditions.checkNotNull(newConversionClass,\"New conversion class must not be null.\")",
  "projectName" : "flink",
  "commitID" : "33da59089554f74de6330cd9455d34bc8269a580",
  "filePath" : "/flink-table/flink-table-common/src/main/java/org/apache/flink/table/types/AtomicDataType.java",
  "occurrences" : 1,
  "expressionList" : [ {
    "nodeContext" : "Preconditions.checkNotNull(newConversionClass,\"New conversion class must not be null.\")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 113,
      "startLineNumber" : 61,
      "startColumnNumber" : 16,
      "endLineNumber" : 62,
      "endColumnNumber" : 85
    },
    "astNodeNumber" : 5,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 179,
        "startLineNumber" : 59,
        "startColumnNumber" : 15,
        "endLineNumber" : 62,
        "endColumnNumber" : 86
      },
      "nodeContext" : "new AtomicDataType(logicalType,Preconditions.checkNotNull(newConversionClass,\"New conversion class must not be null.\"))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 187,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 62,
        "endColumnNumber" : 87
      },
      "nodeContext" : "return new AtomicDataType(logicalType,Preconditions.checkNotNull(newConversionClass,\"New conversion class must not be null.\"));\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 203,
        "startLineNumber" : 58,
        "startColumnNumber" : 59,
        "endLineNumber" : 63,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  return new AtomicDataType(logicalType,Preconditions.checkNotNull(newConversionClass,\"New conversion class must not be null.\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 272,
        "startLineNumber" : 57,
        "startColumnNumber" : 4,
        "endLineNumber" : 63,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public DataType bridgedTo(Class<?> newConversionClass){\n  return new AtomicDataType(logicalType,Preconditions.checkNotNull(newConversionClass,\"New conversion class must not be null.\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 24,
      "astHeight" : 6
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 179,
        "startLineNumber" : 59,
        "startColumnNumber" : 15,
        "endLineNumber" : 62,
        "endColumnNumber" : 86
      },
      "nodeContext" : "new AtomicDataType(logicalType,Preconditions.checkNotNull(newConversionClass,\"New conversion class must not be null.\"))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 9,
      "astHeight" : 3,
      "tokenLength" : 20
    },
    "tokenLength" : 16
  } ],
  "positionList" : [ {
    "charLength" : 113,
    "startLineNumber" : 61,
    "startColumnNumber" : 16,
    "endLineNumber" : 62,
    "endColumnNumber" : 85
  } ]
}
, {
  "id" : 10,
  "expression" : "that.resourceProfile",
  "projectName" : "flink",
  "commitID" : "33da59089554f74de6330cd9455d34bc8269a580",
  "filePath" : "/flink-runtime/src/main/java/org/apache/flink/runtime/taskexecutor/slot/SlotAllocationSnapshot.java",
  "occurrences" : 1,
  "expressionList" : [ {
    "nodeContext" : "that.resourceProfile",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 106,
      "startColumnNumber" : 42,
      "endLineNumber" : 106,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 106,
        "startColumnNumber" : 19,
        "endLineNumber" : 106,
        "endColumnNumber" : 63
      },
      "nodeContext" : "resourceProfile.equals(that.resourceProfile)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 258,
        "startLineNumber" : 102,
        "startColumnNumber" : 15,
        "endLineNumber" : 106,
        "endColumnNumber" : 63
      },
      "nodeContext" : "slotID.equals(that.slotID) && jobId.equals(that.jobId) && jobTargetAddress.equals(that.jobTargetAddress)&& allocationId.equals(that.allocationId)&& resourceProfile.equals(that.resourceProfile)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 31,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 266,
        "startLineNumber" : 102,
        "startColumnNumber" : 8,
        "endLineNumber" : 106,
        "endColumnNumber" : 64
      },
      "nodeContext" : "return slotID.equals(that.slotID) && jobId.equals(that.jobId) && jobTargetAddress.equals(that.jobTargetAddress)&& allocationId.equals(that.allocationId)&& resourceProfile.equals(that.resourceProfile);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 32,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 499,
        "startLineNumber" : 94,
        "startColumnNumber" : 36,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (this == o) {\n    return true;\n  }\n  if (o == null || getClass() != o.getClass()) {\n    return false;\n  }\n  SlotAllocationSnapshot that=(SlotAllocationSnapshot)o;\n  return slotID.equals(that.slotID) && jobId.equals(that.jobId) && jobTargetAddress.equals(that.jobTargetAddress)&& allocationId.equals(that.allocationId)&& resourceProfile.equals(that.resourceProfile);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 63,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 545,
        "startLineNumber" : 93,
        "startColumnNumber" : 4,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean equals(Object o){\n  if (this == o) {\n    return true;\n  }\n  if (o == null || getClass() != o.getClass()) {\n    return false;\n  }\n  SlotAllocationSnapshot that=(SlotAllocationSnapshot)o;\n  return slotID.equals(that.slotID) && jobId.equals(that.jobId) && jobTargetAddress.equals(that.jobTargetAddress)&& allocationId.equals(that.allocationId)&& resourceProfile.equals(that.resourceProfile);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 73,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 106,
        "startColumnNumber" : 19,
        "endLineNumber" : 106,
        "endColumnNumber" : 63
      },
      "nodeContext" : "resourceProfile.equals(that.resourceProfile)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3,
      "tokenLength" : 7
    },
    "tokenLength" : 3
  } ],
  "positionList" : [ {
    "charLength" : 20,
    "startLineNumber" : 106,
    "startColumnNumber" : 42,
    "endLineNumber" : 106,
    "endColumnNumber" : 62
  } ]
} ]