{
  "id" : 35,
  "expression" : "expressionSegment instanceof FunctionSegment ? ((FunctionSegment)expressionSegment).getText() : sqlNode.toString()",
  "projectName" : "apache@shardingsphere",
  "commitID" : "2ea140b2e9b64670ae550ec45358f49f16c69cb2",
  "filePath" : "shardingsphere-infra/shardingsphere-infra-federation/shardingsphere-infra-federation-optimizer/src/main/java/org/apache/shardingsphere/infra/federation/optimizer/converter/segment/projection/impl/ExpressionProjectionConverter.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 1,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "expressionSegment instanceof FunctionSegment ? ((FunctionSegment)expressionSegment).getText() : sqlNode.toString()",
    "nodeType" : "ConditionalExpression",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 70,
      "startColumnNumber" : 19,
      "endLineNumber" : 70,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 15,
    "astHeight" : 6,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 122,
        "startLineNumber" : 70,
        "startColumnNumber" : 19,
        "endLineNumber" : 70,
        "endColumnNumber" : 141
      },
      "nodeContext" : "text=expressionSegment instanceof FunctionSegment ? ((FunctionSegment)expressionSegment).getText() : sqlNode.toString()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 130,
        "startLineNumber" : 70,
        "startColumnNumber" : 12,
        "endLineNumber" : 70,
        "endColumnNumber" : 142
      },
      "nodeContext" : "String text=expressionSegment instanceof FunctionSegment ? ((FunctionSegment)expressionSegment).getText() : sqlNode.toString();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 20,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1378,
        "startLineNumber" : 58,
        "startColumnNumber" : 45,
        "endLineNumber" : 72,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  SqlBasicCall sqlBasicCall=(SqlBasicCall)sqlNode;\n  if (SqlKind.AS == sqlBasicCall.getOperator().getKind() && sqlBasicCall.getOperandList().get(0) instanceof SqlNumericLiteral) {\n    SqlNode exprSqlNode=sqlBasicCall.getOperandList().get(0);\n    SqlNode aliasSqlNode=sqlBasicCall.getOperandList().get(1);\n    ExpressionSegment expressionSegment=new ExpressionConverter().convertToSQLSegment(exprSqlNode).orElse(null);\n    ExpressionProjectionSegment expressionProjectionSegment=new ExpressionProjectionSegment(getStartIndex(sqlBasicCall),getStopIndex(sqlBasicCall),exprSqlNode.toString(),expressionSegment);\n    expressionProjectionSegment.setAlias(new AliasSegment(getStartIndex(aliasSqlNode),getStopIndex(aliasSqlNode),new IdentifierValue(aliasSqlNode.toString())));\n    return Optional.of(expressionProjectionSegment);\n  }\n  ExpressionSegment expressionSegment=new ExpressionConverter().convertToSQLSegment(sqlNode).orElse(null);\n  String text=expressionSegment instanceof FunctionSegment ? ((FunctionSegment)expressionSegment).getText() : sqlNode.toString();\n  return Optional.of(new ExpressionProjectionSegment(getStartIndex(sqlNode),getStopIndex(sqlNode),text,expressionSegment));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 158,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1415,
        "startLineNumber" : 58,
        "startColumnNumber" : 8,
        "endLineNumber" : 72,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (sqlNode instanceof SqlBasicCall) {\n  SqlBasicCall sqlBasicCall=(SqlBasicCall)sqlNode;\n  if (SqlKind.AS == sqlBasicCall.getOperator().getKind() && sqlBasicCall.getOperandList().get(0) instanceof SqlNumericLiteral) {\n    SqlNode exprSqlNode=sqlBasicCall.getOperandList().get(0);\n    SqlNode aliasSqlNode=sqlBasicCall.getOperandList().get(1);\n    ExpressionSegment expressionSegment=new ExpressionConverter().convertToSQLSegment(exprSqlNode).orElse(null);\n    ExpressionProjectionSegment expressionProjectionSegment=new ExpressionProjectionSegment(getStartIndex(sqlBasicCall),getStopIndex(sqlBasicCall),exprSqlNode.toString(),expressionSegment);\n    expressionProjectionSegment.setAlias(new AliasSegment(getStartIndex(aliasSqlNode),getStopIndex(aliasSqlNode),new IdentifierValue(aliasSqlNode.toString())));\n    return Optional.of(expressionProjectionSegment);\n  }\n  ExpressionSegment expressionSegment=new ExpressionConverter().convertToSQLSegment(sqlNode).orElse(null);\n  String text=expressionSegment instanceof FunctionSegment ? ((FunctionSegment)expressionSegment).getText() : sqlNode.toString();\n  return Optional.of(new ExpressionProjectionSegment(getStartIndex(sqlNode),getStopIndex(sqlNode),text,expressionSegment));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 163,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1464,
        "startLineNumber" : 57,
        "startColumnNumber" : 92,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (sqlNode instanceof SqlBasicCall) {\n    SqlBasicCall sqlBasicCall=(SqlBasicCall)sqlNode;\n    if (SqlKind.AS == sqlBasicCall.getOperator().getKind() && sqlBasicCall.getOperandList().get(0) instanceof SqlNumericLiteral) {\n      SqlNode exprSqlNode=sqlBasicCall.getOperandList().get(0);\n      SqlNode aliasSqlNode=sqlBasicCall.getOperandList().get(1);\n      ExpressionSegment expressionSegment=new ExpressionConverter().convertToSQLSegment(exprSqlNode).orElse(null);\n      ExpressionProjectionSegment expressionProjectionSegment=new ExpressionProjectionSegment(getStartIndex(sqlBasicCall),getStopIndex(sqlBasicCall),exprSqlNode.toString(),expressionSegment);\n      expressionProjectionSegment.setAlias(new AliasSegment(getStartIndex(aliasSqlNode),getStopIndex(aliasSqlNode),new IdentifierValue(aliasSqlNode.toString())));\n      return Optional.of(expressionProjectionSegment);\n    }\n    ExpressionSegment expressionSegment=new ExpressionConverter().convertToSQLSegment(sqlNode).orElse(null);\n    String text=expressionSegment instanceof FunctionSegment ? ((FunctionSegment)expressionSegment).getText() : sqlNode.toString();\n    return Optional.of(new ExpressionProjectionSegment(getStartIndex(sqlNode),getStopIndex(sqlNode),text,expressionSegment));\n  }\n  return Optional.empty();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 168,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1566,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Optional<ExpressionProjectionSegment> convertToSQLSegment(final SqlNode sqlNode){\n  if (sqlNode instanceof SqlBasicCall) {\n    SqlBasicCall sqlBasicCall=(SqlBasicCall)sqlNode;\n    if (SqlKind.AS == sqlBasicCall.getOperator().getKind() && sqlBasicCall.getOperandList().get(0) instanceof SqlNumericLiteral) {\n      SqlNode exprSqlNode=sqlBasicCall.getOperandList().get(0);\n      SqlNode aliasSqlNode=sqlBasicCall.getOperandList().get(1);\n      ExpressionSegment expressionSegment=new ExpressionConverter().convertToSQLSegment(exprSqlNode).orElse(null);\n      ExpressionProjectionSegment expressionProjectionSegment=new ExpressionProjectionSegment(getStartIndex(sqlBasicCall),getStopIndex(sqlBasicCall),exprSqlNode.toString(),expressionSegment);\n      expressionProjectionSegment.setAlias(new AliasSegment(getStartIndex(aliasSqlNode),getStopIndex(aliasSqlNode),new IdentifierValue(aliasSqlNode.toString())));\n      return Optional.of(expressionProjectionSegment);\n    }\n    ExpressionSegment expressionSegment=new ExpressionConverter().convertToSQLSegment(sqlNode).orElse(null);\n    String text=expressionSegment instanceof FunctionSegment ? ((FunctionSegment)expressionSegment).getText() : sqlNode.toString();\n    return Optional.of(new ExpressionProjectionSegment(getStartIndex(sqlNode),getStopIndex(sqlNode),text,expressionSegment));\n  }\n  return Optional.empty();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 183,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 130,
        "startLineNumber" : 70,
        "startColumnNumber" : 12,
        "endLineNumber" : 70,
        "endColumnNumber" : 142
      },
      "nodeContext" : "String text=expressionSegment instanceof FunctionSegment ? ((FunctionSegment)expressionSegment).getText() : sqlNode.toString();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 20,
      "astHeight" : 8
    },
    "tokenLength" : 7,
    "type" : null
  }, {
    "nodeContext" : "text",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 71,
      "startColumnNumber" : 110,
      "endLineNumber" : 71,
      "endColumnNumber" : 114
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 71,
        "startColumnNumber" : 31,
        "endLineNumber" : 71,
        "endColumnNumber" : 134
      },
      "nodeContext" : "new ExpressionProjectionSegment(getStartIndex(sqlNode),getStopIndex(sqlNode),text,expressionSegment)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 71,
        "startColumnNumber" : 19,
        "endLineNumber" : 71,
        "endColumnNumber" : 135
      },
      "nodeContext" : "Optional.of(new ExpressionProjectionSegment(getStartIndex(sqlNode),getStopIndex(sqlNode),text,expressionSegment))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 71,
        "startColumnNumber" : 12,
        "endLineNumber" : 71,
        "endColumnNumber" : 136
      },
      "nodeContext" : "return Optional.of(new ExpressionProjectionSegment(getStartIndex(sqlNode),getStopIndex(sqlNode),text,expressionSegment));\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1378,
        "startLineNumber" : 58,
        "startColumnNumber" : 45,
        "endLineNumber" : 72,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  SqlBasicCall sqlBasicCall=(SqlBasicCall)sqlNode;\n  if (SqlKind.AS == sqlBasicCall.getOperator().getKind() && sqlBasicCall.getOperandList().get(0) instanceof SqlNumericLiteral) {\n    SqlNode exprSqlNode=sqlBasicCall.getOperandList().get(0);\n    SqlNode aliasSqlNode=sqlBasicCall.getOperandList().get(1);\n    ExpressionSegment expressionSegment=new ExpressionConverter().convertToSQLSegment(exprSqlNode).orElse(null);\n    ExpressionProjectionSegment expressionProjectionSegment=new ExpressionProjectionSegment(getStartIndex(sqlBasicCall),getStopIndex(sqlBasicCall),exprSqlNode.toString(),expressionSegment);\n    expressionProjectionSegment.setAlias(new AliasSegment(getStartIndex(aliasSqlNode),getStopIndex(aliasSqlNode),new IdentifierValue(aliasSqlNode.toString())));\n    return Optional.of(expressionProjectionSegment);\n  }\n  ExpressionSegment expressionSegment=new ExpressionConverter().convertToSQLSegment(sqlNode).orElse(null);\n  String text=expressionSegment instanceof FunctionSegment ? ((FunctionSegment)expressionSegment).getText() : sqlNode.toString();\n  return Optional.of(new ExpressionProjectionSegment(getStartIndex(sqlNode),getStopIndex(sqlNode),text,expressionSegment));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 158,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1415,
        "startLineNumber" : 58,
        "startColumnNumber" : 8,
        "endLineNumber" : 72,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (sqlNode instanceof SqlBasicCall) {\n  SqlBasicCall sqlBasicCall=(SqlBasicCall)sqlNode;\n  if (SqlKind.AS == sqlBasicCall.getOperator().getKind() && sqlBasicCall.getOperandList().get(0) instanceof SqlNumericLiteral) {\n    SqlNode exprSqlNode=sqlBasicCall.getOperandList().get(0);\n    SqlNode aliasSqlNode=sqlBasicCall.getOperandList().get(1);\n    ExpressionSegment expressionSegment=new ExpressionConverter().convertToSQLSegment(exprSqlNode).orElse(null);\n    ExpressionProjectionSegment expressionProjectionSegment=new ExpressionProjectionSegment(getStartIndex(sqlBasicCall),getStopIndex(sqlBasicCall),exprSqlNode.toString(),expressionSegment);\n    expressionProjectionSegment.setAlias(new AliasSegment(getStartIndex(aliasSqlNode),getStopIndex(aliasSqlNode),new IdentifierValue(aliasSqlNode.toString())));\n    return Optional.of(expressionProjectionSegment);\n  }\n  ExpressionSegment expressionSegment=new ExpressionConverter().convertToSQLSegment(sqlNode).orElse(null);\n  String text=expressionSegment instanceof FunctionSegment ? ((FunctionSegment)expressionSegment).getText() : sqlNode.toString();\n  return Optional.of(new ExpressionProjectionSegment(getStartIndex(sqlNode),getStopIndex(sqlNode),text,expressionSegment));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 163,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1464,
        "startLineNumber" : 57,
        "startColumnNumber" : 92,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (sqlNode instanceof SqlBasicCall) {\n    SqlBasicCall sqlBasicCall=(SqlBasicCall)sqlNode;\n    if (SqlKind.AS == sqlBasicCall.getOperator().getKind() && sqlBasicCall.getOperandList().get(0) instanceof SqlNumericLiteral) {\n      SqlNode exprSqlNode=sqlBasicCall.getOperandList().get(0);\n      SqlNode aliasSqlNode=sqlBasicCall.getOperandList().get(1);\n      ExpressionSegment expressionSegment=new ExpressionConverter().convertToSQLSegment(exprSqlNode).orElse(null);\n      ExpressionProjectionSegment expressionProjectionSegment=new ExpressionProjectionSegment(getStartIndex(sqlBasicCall),getStopIndex(sqlBasicCall),exprSqlNode.toString(),expressionSegment);\n      expressionProjectionSegment.setAlias(new AliasSegment(getStartIndex(aliasSqlNode),getStopIndex(aliasSqlNode),new IdentifierValue(aliasSqlNode.toString())));\n      return Optional.of(expressionProjectionSegment);\n    }\n    ExpressionSegment expressionSegment=new ExpressionConverter().convertToSQLSegment(sqlNode).orElse(null);\n    String text=expressionSegment instanceof FunctionSegment ? ((FunctionSegment)expressionSegment).getText() : sqlNode.toString();\n    return Optional.of(new ExpressionProjectionSegment(getStartIndex(sqlNode),getStopIndex(sqlNode),text,expressionSegment));\n  }\n  return Optional.empty();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 168,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1566,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Optional<ExpressionProjectionSegment> convertToSQLSegment(final SqlNode sqlNode){\n  if (sqlNode instanceof SqlBasicCall) {\n    SqlBasicCall sqlBasicCall=(SqlBasicCall)sqlNode;\n    if (SqlKind.AS == sqlBasicCall.getOperator().getKind() && sqlBasicCall.getOperandList().get(0) instanceof SqlNumericLiteral) {\n      SqlNode exprSqlNode=sqlBasicCall.getOperandList().get(0);\n      SqlNode aliasSqlNode=sqlBasicCall.getOperandList().get(1);\n      ExpressionSegment expressionSegment=new ExpressionConverter().convertToSQLSegment(exprSqlNode).orElse(null);\n      ExpressionProjectionSegment expressionProjectionSegment=new ExpressionProjectionSegment(getStartIndex(sqlBasicCall),getStopIndex(sqlBasicCall),exprSqlNode.toString(),expressionSegment);\n      expressionProjectionSegment.setAlias(new AliasSegment(getStartIndex(aliasSqlNode),getStopIndex(aliasSqlNode),new IdentifierValue(aliasSqlNode.toString())));\n      return Optional.of(expressionProjectionSegment);\n    }\n    ExpressionSegment expressionSegment=new ExpressionConverter().convertToSQLSegment(sqlNode).orElse(null);\n    String text=expressionSegment instanceof FunctionSegment ? ((FunctionSegment)expressionSegment).getText() : sqlNode.toString();\n    return Optional.of(new ExpressionProjectionSegment(getStartIndex(sqlNode),getStopIndex(sqlNode),text,expressionSegment));\n  }\n  return Optional.empty();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 183,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 71,
        "startColumnNumber" : 12,
        "endLineNumber" : 71,
        "endColumnNumber" : 136
      },
      "nodeContext" : "return Optional.of(new ExpressionProjectionSegment(getStartIndex(sqlNode),getStopIndex(sqlNode),text,expressionSegment));\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 70,
    "startColumnNumber" : 19,
    "endLineNumber" : 70,
    "endColumnNumber" : 23
  }, {
    "charLength" : 4,
    "startLineNumber" : 71,
    "startColumnNumber" : 110,
    "endLineNumber" : 71,
    "endColumnNumber" : 114
  } ],
  "layoutRelationDataList" : [ ]
}